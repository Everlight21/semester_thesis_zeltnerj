-------------------------------------------------------------------------------
-- Title      : Components package (generated by Emacs VHDL Mode 3.34.2)
-- Project    : 
-------------------------------------------------------------------------------
-- File       : semester_thesis_zeltnerj_components.vhd
-- Author     : Joscha Zeltner
-- Company    : Computer Vision and Geometry Group, Pixhawk, ETH Zurich
-- Created    : 2013-03-22
-- Last update: 2013-03-22
-- Platform   : Quartus II, NIOS II 12.1sp1
-- Standard   : VHDL'93/02
-------------------------------------------------------------------------------
-- Description: 
-------------------------------------------------------------------------------
-- Copyright (c) 2013 Computer Vision and Geometry Group, Pixhawk, ETH Zurich
-------------------------------------------------------------------------------
-- Revisions  :
-- Date        Version  Author  Description
-- 2013-03-22  1.0      zeltnerj	Created
-------------------------------------------------------------------------------

library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_arith.all;
use ieee.std_logic_unsigned.all;
use ieee.numeric_bit.all;
use work.configuration_pkg.all;

-------------------------------------------------------------------------------

package semester_thesis_zeltnerj_components is

  -----------------------------------------------------------------------------
  -- Component declarations
  -----------------------------------------------------------------------------

  component Camera_Interface_block is
    port (
      clk            : IN  STD_LOGIC;
      reset          : IN  STD_LOGIC;
      am_WaitRequest : IN  STD_LOGIC;
      clkcamera      : IN  STD_LOGIC;
      cam_dataav     : IN  STD_LOGIC;
      cam_FV         : IN  STD_LOGIC;
      cam_LV         : IN  STD_LOGIC;
      channel_1      : IN  STD_LOGIC_VECTOR(7 DOWNTO 0);
      channel_2      : IN  STD_LOGIC_VECTOR(7 DOWNTO 0);
      channel_3      : IN  STD_LOGIC_VECTOR(7 DOWNTO 0);
      channel_4      : IN  STD_LOGIC_VECTOR(7 DOWNTO 0);
      channel_5      : IN  STD_LOGIC_VECTOR(7 DOWNTO 0);
      channel_6      : IN  STD_LOGIC_VECTOR(7 DOWNTO 0);
      channel_7      : IN  STD_LOGIC_VECTOR(7 DOWNTO 0);
      channel_8      : IN  STD_LOGIC_VECTOR(7 DOWNTO 0);
      am_write       : OUT STD_LOGIC;
      am_address     : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      am_burstcount  : OUT STD_LOGIC_VECTOR(7 DOWNTO 0);
      am_dataWrite   : OUT STD_LOGIC_VECTOR(31 DOWNTO 0));
  end component Camera_Interface_block;

  component Camera_Master_part is
    port (
      clk             : IN  std_logic;
      clkcamera       : IN  std_logic;
      reset           : IN  std_logic;
      camInt_data1    : IN  std_logic_vector(7 downto 0);
      camInt_data2    : IN  std_logic_vector(7 downto 0);
      camInt_data3    : IN  std_logic_vector(7 downto 0);
      camInt_data4    : IN  std_logic_vector(7 downto 0);
      camInt_data5    : IN  std_logic_vector(7 downto 0);
      camInt_data6    : IN  std_logic_vector(7 downto 0);
      camInt_data7    : IN  std_logic_vector(7 downto 0);
      camInt_data8    : IN  std_logic_vector(7 downto 0);
      camInt_newData  : IN  std_logic;
      camInt_newFrame : IN  std_logic;
      camInt_newLine  : IN  std_logic;
      am_WaitRequest  : IN  std_logic;
      am_address      : OUT std_logic_vector(31 downto 0);
      am_dataWrite    : OUT std_logic_vector(31 downto 0);
      am_write        : OUT std_logic;
      am_burstcount   : OUT std_logic_vector(7 downto 0));
  end component Camera_Master_part;

  component Camera_Slave_part is
  end component Camera_Slave_part;

  component cmv_master is
    port (
      ClkxCI          : in  std_logic;
      ClkLvdsRxxCI    : in  std_logic;
      RstxRBI         : in  std_logic;
      PixelValidxSI   : in  std_logic;
      RowValidxSI     : in  std_logic;
      FrameValidxSI   : in  std_logic;
      DataInxDI       : in  std_logic_vector(noOfDataChannels*channelWidth-1 downto 0);
      AMWaitReqxSI    : in  std_logic;
      AMAddressxDO    : out std_logic_vector(31 downto 0);
      AMDWriteDataxDO : out std_logic_vector(31 downto 0);
      AMWritexSO      : out std_logic;
      AMBurstCountxSO : out std_logic_vector(7 downto 0));
  end component cmv_master;

  component ControlerCamera is
    port (
      clk              : in  std_logic;
      reset            : in  std_logic;
      newFrame_in      : in  std_logic;
      newLine_in       : in  std_logic;
      pixel0_in        : in  std_logic_vector(7 downto 0);
      pixel1_in        : in  std_logic_vector(7 downto 0);
      pixel2_in        : in  std_logic_vector(7 downto 0);
      pixel3_in        : in  std_logic_vector(7 downto 0);
      dataAvailable_in : in  std_logic;
      lastPixel_in     : in  std_logic;
      as_start         : IN  std_logic;
      as_stop          : IN  std_logic;
      as_mode          : IN  std_logic;
      am_Data          : OUT std_logic_vector(31 downto 0);
      am_newData       : OUT std_logic;
      am_newFrame      : OUT std_logic;
      am_newLine       : OUT std_logic;
      am_lastPixel     : OUT std_logic;
      as_nbPixels      : OUT std_logic_vector(31 downto 0));
  end component ControlerCamera;

  component fifo is
    port (
      aclr    : IN  STD_LOGIC := '0';
      data    : IN  STD_LOGIC_VECTOR (31 DOWNTO 0);
      rdclk   : IN  STD_LOGIC;
      rdreq   : IN  STD_LOGIC;
      wrclk   : IN  STD_LOGIC;
      wrreq   : IN  STD_LOGIC;
      q       : OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
      rdempty : OUT STD_LOGIC;
      wrusedw : OUT STD_LOGIC_VECTOR (11 DOWNTO 0));
  end component fifo;

  component fifocamera is
    port (
      aclr    : IN  STD_LOGIC := '0';
      data    : IN  STD_LOGIC_VECTOR (31 DOWNTO 0);
      rdclk   : IN  STD_LOGIC;
      rdreq   : IN  STD_LOGIC;
      wrclk   : IN  STD_LOGIC;
      wrreq   : IN  STD_LOGIC;
      q       : OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
      rdusedw : OUT STD_LOGIC_VECTOR (9 DOWNTO 0);
      wrfull  : OUT STD_LOGIC);
  end component fifocamera;

  component lvds_sync_controller is
    port (
      ClkxCI            : in  std_logic;
      RstxRBI           : in  std_logic;
      LVDSDataxDI       : in  std_logic_vector(lvdsDataWidth-1 downto 0);
      ButtonxSI         : in  std_logic_vector (3 downto 0);
      FrameReqInxSI     : in  std_logic;
      AlignxSO          : out std_logic_vector(noOfDataChannels downto 0);
      PixelChannel1xDO  : out std_logic_vector(channelWidth-1 downto 0);
      PixelChannel5xDO  : out std_logic_vector(channelWidth-1 downto 0);
      PixelChannel9xDO  : out std_logic_vector(channelWidth-1 downto 0);
      PixelChannel13xDO : out std_logic_vector(channelWidth-1 downto 0);
      FrameReqOutxSO    : out std_logic;
      PixelValidxSO     : out std_logic;
      RowValidxSO       : out std_logic;
      FrameValidxSO     : out std_logic;
      LedxSO            : out std_logic_vector(7 downto 0));
  end component lvds_sync_controller;

  component lvdsrx is
    port (
      pll_areset            : IN  STD_LOGIC;
      rx_channel_data_align : IN  STD_LOGIC_VECTOR (4 DOWNTO 0);
      rx_in                 : IN  STD_LOGIC_VECTOR (4 DOWNTO 0);
      rx_inclock            : IN  STD_LOGIC;
      rx_out                : OUT STD_LOGIC_VECTOR (49 DOWNTO 0);
      rx_outclock           : OUT STD_LOGIC);
  end component lvdsrx;

  component LVDSSyncControler is
    port (
      clk           : in  std_logic;
      reset         : in  std_logic;
      LVDSRX        : in  std_logic_vector(49 downto 0);
      rxclk         : in  std_logic;
      button1       : in  std_logic;
      button2       : in  std_logic;
      button3       : in  std_logic;
      align1        : out std_logic;
      align2        : out std_logic;
      align3        : out std_logic;
      align4        : out std_logic;
      dataAvailable : out std_logic;
      led1          : out std_logic;
      led2          : out std_logic;
      pixel1        : out std_logic_vector(9 downto 0);
      pixel5        : out std_logic_vector(9 downto 0);
      pixel9        : out std_logic_vector(9 downto 0);
      pixel13       : out std_logic_vector(9 downto 0);
      FV            : out std_logic;
      LV            : out std_logic);
  end component LVDSSyncControler;

  component pll is
    port (
      areset : IN  STD_LOGIC := '0';
      inclk0 : IN  STD_LOGIC := '0';
      c0     : OUT STD_LOGIC;
      c1     : OUT STD_LOGIC;
      c2     : OUT STD_LOGIC;
      locked : OUT STD_LOGIC);
  end component pll;

  component pllcamera is
    port (
      areset : IN  STD_LOGIC := '0';
      inclk0 : IN  STD_LOGIC := '0';
      c0     : OUT STD_LOGIC;
      locked : OUT STD_LOGIC);
  end component pllcamera;

  component plldvi is
    port (
      areset : IN  STD_LOGIC := '0';
      inclk0 : IN  STD_LOGIC := '0';
      c0     : OUT STD_LOGIC;
      locked : OUT STD_LOGIC);
  end component plldvi;

  component RX is
    port (
      clk               : in  std_logic;
      clklvds           : in  std_logic;
      reset             : in  std_logic;
      camdata1          : in  std_logic_vector(9 downto 0);
      camdata2          : in  std_logic_vector(9 downto 0);
      LVDVI             : in  std_logic;
      FVDVI             : in  std_logic;
      dataAvailableDVI  : in  std_logic;
      dataAvailableLVDS : in  std_logic;
      FVLVDS            : in  std_logic;
      LVLVDS            : in  std_logic;
      pixelr            : out std_logic_vector(7 downto 0);
      pixelg            : out std_logic_vector(7 downto 0);
      pixelb            : out std_logic_vector(7 downto 0));
  end component RX;

  component RX_Multiplexer is
    port (
      clkcamera       : IN  std_logic;
      clkcamerax4     : IN  std_logic;
      reset           : IN  std_logic;
      camInt_data1    : IN  std_logic_vector(7 downto 0);
      camInt_data2    : IN  std_logic_vector(7 downto 0);
      camInt_data3    : IN  std_logic_vector(7 downto 0);
      camInt_data4    : IN  std_logic_vector(7 downto 0);
      camInt_data5    : IN  std_logic_vector(7 downto 0);
      camInt_data6    : IN  std_logic_vector(7 downto 0);
      camInt_data7    : IN  std_logic_vector(7 downto 0);
      camInt_data8    : IN  std_logic_vector(7 downto 0);
      camInt_newData  : IN  std_logic;
      camInt_newFrame : IN  std_logic;
      camInt_newLine  : IN  std_logic;
      Pixel_Data      : OUT std_logic_vector(7 downto 0));
  end component RX_Multiplexer;

  component storage is
    port (
      data      : IN  STD_LOGIC_VECTOR (7 DOWNTO 0);
      rdaddress : IN  STD_LOGIC_VECTOR (15 DOWNTO 0);
      rdclock   : IN  STD_LOGIC;
      wraddress : IN  STD_LOGIC_VECTOR (15 DOWNTO 0);
      wrclock   : IN  STD_LOGIC := '1';
      wren      : IN  STD_LOGIC := '0';
      q         : OUT STD_LOGIC_VECTOR (7 DOWNTO 0));
  end component storage;

  component Stored_Master is
  end component Stored_Master;

  component Stored_Mastertest is
  end component Stored_Mastertest;

  component Stored_Pixel_Interface_block is
    port (
      clk              : IN  STD_LOGIC;
      reset            : IN  STD_LOGIC;
      am_WaitRequest   : IN  STD_LOGIC;
      am_readdatavalid : IN  STD_LOGIC;
      DVI_FV           : IN  STD_LOGIC;
      DVI_LV           : IN  STD_LOGIC;
      DVI_dataav       : IN  STD_LOGIC;
      DVI_CLK          : IN  STD_LOGIC;
      am_readdata      : IN  STD_LOGIC_VECTOR(31 DOWNTO 0);
      am_read          : OUT STD_LOGIC;
      am_address       : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      am_burstcount    : OUT STD_LOGIC_VECTOR(7 DOWNTO 0);
      pixelb           : OUT STD_LOGIC_VECTOR(7 DOWNTO 0);
      pixelg           : OUT STD_LOGIC_VECTOR(7 DOWNTO 0);
      pixelr           : OUT STD_LOGIC_VECTOR(7 DOWNTO 0));
  end component Stored_Pixel_Interface_block;

end package semester_thesis_zeltnerj_components;

-------------------------------------------------------------------------------
