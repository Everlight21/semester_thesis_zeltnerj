
testnios.elf:     file format elf32-littlenios2
testnios.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000401b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00040000 paddr 0x00040000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00040020 paddr 0x00040020 align 2**12
         filesz 0x0000cc74 memsz 0x0000cc74 flags r-x
    LOAD off    0x0000e000 vaddr 0x40000000 paddr 0x0004cc94 align 2**12
         filesz 0x00001de0 memsz 0x000020d4 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00040000  00040000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00040020  00040020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000cae0  000401b4  000401b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000384  40000000  0004cc94  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a5c  40000384  0004d018  0000e384  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002f4  40001de0  0004ea74  0000fde0  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  0000fde0  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000c98  00000000  00000000  0000fe08  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001369  00000000  00000000  00010aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00022c40  00000000  00000000  00011e09  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00007911  00000000  00000000  00034a49  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000139c0  00000000  00000000  0003c35a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001834  00000000  00000000  0004fd1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002205  00000000  00000000  00051550  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000bc63  00000000  00000000  00053755  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  0005f3b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000928  00000000  00000000  0005f3e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00062c70  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000a  00000000  00000000  00062c73  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00062c7d  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00062c7e  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00062c7f  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00062c83  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00062c87  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  00062c8b  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  00062c94  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  00062c9d  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000008  00000000  00000000  00062ca6  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000023  00000000  00000000  00062cae  2**0
                  CONTENTS, READONLY
 29 .jdi          00004d22  00000000  00000000  00062cd1  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     000a0d3f  00000000  00000000  000679f3  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00040000 l    d  .entry	00000000 .entry
00040020 l    d  .exceptions	00000000 .exceptions
000401b4 l    d  .text	00000000 .text
40000000 l    d  .rodata	00000000 .rodata
40000384 l    d  .rwdata	00000000 .rwdata
40001de0 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000401fc l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 camera.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00040ad0 l     F .text	00000058 __sprint_r
400000ba l     O .rodata	00000010 blanks.3452
400000aa l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00042b34 l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00044530 l     F .text	00000058 std
0004463c l     F .text	00000008 __fp_lock
00044644 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
40000384 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 locale.c
40001dac l     O .rwdata	00000004 charset
400000f0 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
40000238 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
000487d0 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
000498ec l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
0004a0c8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0004a128 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0004a228 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0004a348 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0004a428 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0004a584 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0004a7b0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
40001dd0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0004aa4c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
40000d40 l     O .rwdata	00001060 jtag_uart
0004ab3c l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0004ad7c l     F .text	00000228 altera_avalon_jtag_uart_irq
0004afa4 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0004b858 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0004bba4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0004bfc8 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0004c104 l     F .text	000000dc alt_file_locked
0004c368 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0004ca7c l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
0004cc30 l     F .text	00000040 alt_sim_halt
000462ec g     F .text	00000094 _mprec_log10
000463d8 g     F .text	00000088 __any_on
00047ae4 g     F .text	00000070 _isatty_r
40000210 g     O .rodata	00000028 __mprec_tinytens
0004a5e4 g     F .text	0000006c alt_main
000409a8 g     F .text	000000a0 _puts_r
40001e44 g     O .bss	00000100 alt_irq
00047b54 g     F .text	00000078 _lseek_r
0004d018 g       *ABS*	00000000 __flash_rwdata_start
000492e0 g     F .text	00000088 __eqdf2
400020d4 g       *ABS*	00000000 __alt_heap_start
00040930 g     F .text	00000044 printf
000475b0 g     F .text	00000068 __sseek
00044598 g     F .text	000000a4 __sinit
00045270 g     F .text	00000084 _setlocale_r
00044698 g     F .text	00000068 __sfmoreglue
0004a670 g     F .text	00000020 __malloc_unlock
00045d68 g     F .text	000000e0 memmove
00044688 g     F .text	00000010 _cleanup
00046460 g     F .text	000000bc _Balloc
000493f0 g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
00040000 g     F .entry	0000001c __reset
00040020 g       *ABS*	00000000 __flash_exceptions_start
00047a70 g     F .text	00000074 _fstat_r
40001e00 g     O .bss	00000004 errno
40001e08 g     O .bss	00000004 alt_argv
40009da0 g       *ABS*	00000000 _gp
40000bc0 g     O .rwdata	00000180 alt_fd_list
0004c58c g     F .text	00000094 alt_find_dev
00045cc8 g     F .text	000000a0 memcpy
0004467c g     F .text	0000000c _cleanup_r
00049588 g     F .text	000000f8 __floatsidf
0004c08c g     F .text	00000078 alt_io_redirect
00049500 g     F .text	00000088 __ltdf2
0004cc94 g       *ABS*	00000000 __DTOR_END__
00040a48 g     F .text	00000014 puts
0004623c g     F .text	000000b0 __ratio
0004b1bc g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00040974 g     F .text	00000034 _printf_r
00049a28 g     F .text	00000008 __udivsi3
0004a288 g     F .text	000000c0 isatty
40000120 g     O .rodata	000000c8 __mprec_tens
0004524c g     F .text	00000008 __locale_charset
0004c7f8 g     F .text	00000090 alt_icache_flush
40001df4 g     O .bss	00000004 __malloc_top_pad
40001da8 g     O .rwdata	00000004 __mb_cur_max
00045254 g     F .text	0000000c _localeconv_r
00046b58 g     F .text	0000003c __i2b
00044c30 g     F .text	0000049c __sfvwrite_r
00047538 g     F .text	00000070 _sbrk_r
00047bcc g     F .text	00000078 _read_r
40000784 g     O .rwdata	0000000c __lc_ctype
40001dc8 g     O .rwdata	00000004 alt_max_fd
00049dcc g     F .text	00000138 __unpack_d
0004794c g     F .text	00000110 _fclose_r
000444fc g     F .text	00000034 fflush
40001df8 g     O .bss	00000004 __malloc_max_sbrked_mem
00048c60 g     F .text	00000074 __adddf3
0004611c g     F .text	00000120 __b2d
00048220 g     F .text	000005b0 __umoddi3
0004a494 g     F .text	000000f0 lseek
40001da4 g     O .rwdata	00000004 _global_impure_ptr
00046ed4 g     F .text	000005f4 _realloc_r
400020d4 g       *ABS*	00000000 __bss_end
0004bed0 g     F .text	000000f8 alt_iic_isr_register
0004c460 g     F .text	0000010c alt_tick
00047c44 g     F .text	000005dc __udivdi3
400001e8 g     O .rodata	00000028 __mprec_bigtens
00046db4 g     F .text	00000120 __s2b
00049758 g     F .text	00000194 __floatunsidf
0004603c g     F .text	00000060 __mcmp
00044664 g     F .text	00000018 __fp_lock_all
0004be88 g     F .text	00000048 alt_ic_irq_enabled
0004c3c8 g     F .text	00000098 alt_alarm_stop
40001e10 g     O .bss	00000004 alt_irq_active
000400ec g     F .exceptions	000000c8 alt_irq_handler
40000b98 g     O .rwdata	00000028 alt_dev_null
0004baac g     F .text	00000044 alt_dcache_flush_all
00045f08 g     F .text	00000070 __hi0bits
00049680 g     F .text	000000d8 __fixdfsi
40001de0 g       *ABS*	00000000 __ram_rwdata_end
00040000 g       *ABS*	00000000 __alt_mem_onchip_memory
40001dc0 g     O .rwdata	00000008 alt_dev_list
0004a92c g     F .text	00000120 write
40000384 g       *ABS*	00000000 __ram_rodata_end
0004a154 g     F .text	000000d4 fstat
00046c94 g     F .text	00000120 __pow5mult
40001de8 g     O .bss	00000004 __nlocale_changed
00049a30 g     F .text	00000008 __umodsi3
400020d4 g       *ABS*	00000000 end
0004acbc g     F .text	000000c0 altera_avalon_jtag_uart_init
40001de4 g     O .bss	00000004 i
0004cc90 g       *ABS*	00000000 __CTOR_LIST__
80000000 g       *ABS*	00000000 __alt_stack_pointer
0004b8c8 g     F .text	00000090 alt_avalon_timer_sc_init
00049a38 g     F .text	00000080 __clzsi2
0004b3e0 g     F .text	00000240 altera_avalon_jtag_uart_write
00044588 g     F .text	00000004 __sfp_lock_acquire
00045be4 g     F .text	000000e4 memchr
00040b28 g     F .text	00001eac ___vfprintf_internal_r
0004491c g     F .text	00000314 _free_r
0004ca80 g     F .text	000001b0 __call_exitprocs
40001dec g     O .bss	00000004 __mlocale_changed
40001db4 g     O .rwdata	00000004 __malloc_sbrk_base
000401b4 g     F .text	0000004c _start
40001e14 g     O .bss	00000004 _alt_tick_rate
00046824 g     F .text	0000014c __lshift
0004b620 g     F .text	00000238 alt_avalon_spi_command
40001e18 g     O .bss	00000004 _alt_nticks
0004a690 g     F .text	00000120 read
0004aae0 g     F .text	0000005c alt_sys_init
0004c948 g     F .text	00000134 __register_exitproc
00046970 g     F .text	000001e8 __multiply
0004b054 g     F .text	00000074 altera_avalon_jtag_uart_close
40000384 g       *ABS*	00000000 __ram_rwdata_start
40000000 g       *ABS*	00000000 __ram_rodata_start
40001e1c g     O .bss	00000028 __malloc_current_mallinfo
0004651c g     F .text	0000017c __d2b
0004ab74 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0004c740 g     F .text	000000b8 alt_get_fd
00049f04 g     F .text	000000c8 __fpcmp_parts_d
000478dc g     F .text	00000070 _close_r
0004c8d4 g     F .text	00000074 memcmp
0004ac24 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
400020d4 g       *ABS*	00000000 __alt_stack_base
0004ac6c g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
000429f8 g     F .text	0000013c __swsetup_r
00049088 g     F .text	00000258 __divdf3
00044700 g     F .text	000000f0 __sfp
00046380 g     F .text	00000058 __copybits
40000790 g     O .rwdata	00000408 __malloc_av_
00044594 g     F .text	00000004 __sinit_lock_release
00048cd4 g     F .text	000003b4 __muldf3
00047694 g     F .text	00000060 __sread
0004c620 g     F .text	00000120 alt_find_file
0004baf0 g     F .text	000000b4 alt_dev_llist_insert
0004a650 g     F .text	00000020 __malloc_lock
0004a870 g     F .text	000000bc sbrk
00044300 g     F .text	000001fc _fflush_r
00047828 g     F .text	000000b4 _calloc_r
40001de0 g       *ABS*	00000000 __bss_start
00045e48 g     F .text	00000098 memset
000407fc g     F .text	00000134 main
40001e0c g     O .bss	00000004 alt_envp
40001dfc g     O .bss	00000004 __malloc_max_total_mem
0004abcc g     F .text	00000058 altera_avalon_jtag_uart_write_fd
000475a8 g     F .text	00000008 __sclose
80000000 g       *ABS*	00000000 __alt_heap_limit
00047a5c g     F .text	00000014 fclose
40001f44 g     O .bss	00000190 _atexit0
00042d4c g     F .text	000015b4 _dtoa_r
000454a4 g     F .text	00000740 _malloc_r
40001dcc g     O .rwdata	00000004 alt_errno
40000000 g       *ABS*	00000000 __alt_mem_mem_if_ddr2_emif
00045194 g     F .text	000000b8 _fwalk
00049968 g     F .text	00000060 __divsi3
40000244 g     O .rodata	00000014 __thenan_df
000447f0 g     F .text	0000012c _malloc_trim_r
0004cc94 g       *ABS*	00000000 __CTOR_END__
40001de0 g     O .bss	00000004 dir
000476f4 g     F .text	000000bc strcmp
0004cc94 g       *ABS*	00000000 __flash_rodata_start
0004cc94 g       *ABS*	00000000 __DTOR_LIST__
00049368 g     F .text	00000088 __nedf2
0004aaac g     F .text	00000034 alt_irq_init
0004a810 g     F .text	00000060 alt_release_fd
40000258 g     O .rodata	00000100 __clz_tab
40001df0 g     O .bss	00000004 _PathLocale
0004c888 g     F .text	00000014 atexit
000477b0 g     F .text	00000078 _write_r
000452f4 g     F .text	0000001c setlocale
40001da0 g     O .rwdata	00000004 _impure_ptr
40001e04 g     O .bss	00000004 alt_argc
0004bc68 g     F .text	00000064 _do_dtors
00040020 g       .exceptions	00000000 alt_irq_entry
0004609c g     F .text	00000080 __ulp
000474c8 g     F .text	00000040 __isinfd
0004464c g     F .text	00000018 __fp_unlock_all
40001db8 g     O .rwdata	00000008 alt_fs_list
00040020 g       *ABS*	00000000 __ram_exceptions_start
00045260 g     F .text	00000010 localeconv
0004bcfc g     F .text	00000050 alt_ic_isr_register
40001de0 g       *ABS*	00000000 _edata
400020d4 g       *ABS*	00000000 _end
000401b4 g       *ABS*	00000000 __ram_exceptions_end
0004b0c8 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0004bde8 g     F .text	000000a0 alt_ic_irq_disable
00047618 g     F .text	0000007c __swrite
40001db0 g     O .rwdata	00000004 __malloc_trim_threshold
0004c56c g     F .text	00000020 altera_nios2_qsys_irq_init
0004c89c g     F .text	00000038 exit
000450cc g     F .text	000000c8 _fwalk_reent
00046698 g     F .text	0000018c __mdiff
000499c8 g     F .text	00000060 __modsi3
80000000 g       *ABS*	00000000 __alt_data_end
00040020 g     F .exceptions	00000000 alt_exception
0004458c g     F .text	00000004 __sfp_lock_release
0004cc70 g     F .text	00000020 _exit
00047508 g     F .text	00000030 __isnand
0004b958 g     F .text	00000154 alt_alarm_start
00045310 g     F .text	00000194 __smakebuf_r
00040a5c g     F .text	00000074 strlen
0004c1e0 g     F .text	00000188 open
00049478 g     F .text	00000088 __gedf2
0004bccc g     F .text	00000030 alt_icache_flush_all
40001dd4 g     O .rwdata	00000004 alt_priority_mask
0004bd4c g     F .text	0000009c alt_ic_irq_enable
000429d4 g     F .text	00000024 __vfprintf_internal
00040200 g     F .text	000005fc camera_init
00048be0 g     F .text	00000080 __subdf3
00045f78 g     F .text	000000c4 __lo0bits
40001dd8 g     O .rwdata	00000008 alt_alarm_list
0004bc04 g     F .text	00000064 _do_ctors
00049fcc g     F .text	000000fc close
0004a3a8 g     F .text	00000080 alt_load
00049ab8 g     F .text	00000314 __pack_d
00000000  w      *UND*	00000000 free
00044590 g     F .text	00000004 __sinit_lock_acquire
00046b94 g     F .text	00000100 __multadd
00045ee0 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00040000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   40000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   40004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   40008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   4000c:	00bffd16 	blt	zero,r2,40004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   40010:	00400134 	movhi	at,4
    ori r1, r1, %lo(_start)
   40014:	08406d14 	ori	at,at,436
    jmp r1
   40018:	0800683a 	jmp	at
   4001c:	00000000 	call	0 <__alt_mem_onchip_memory-0x40000>

Disassembly of section .exceptions:

00040020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
   40020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
   40024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
   40028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   4002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   40030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   40034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   40038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   4003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   40040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
   40044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
   40048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   4004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   40050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   40054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   40058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   4005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   40060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   40064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   40068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   4006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   40070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   40074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   40078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   4007c:	10000326 	beq	r2,zero,4008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   40080:	20000226 	beq	r4,zero,4008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   40084:	00400ec0 	call	400ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   40088:	00000306 	br	40098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   4008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   40090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   40094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   40098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   4009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   400a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   400a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   400a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   400ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   400b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   400b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   400b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   400bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   400c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
   400c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   400c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   400cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   400d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   400d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   400d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   400dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   400e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
   400e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   400e8:	ef80083a 	eret

000400ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   400ec:	defff904 	addi	sp,sp,-28
   400f0:	dfc00615 	stw	ra,24(sp)
   400f4:	df000515 	stw	fp,20(sp)
   400f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   400fc:	0005313a 	rdctl	r2,ipending
   40100:	e0bffc15 	stw	r2,-16(fp)

  return active;
   40104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   40108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
   4010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   40110:	00800044 	movi	r2,1
   40114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   40118:	e0ffff17 	ldw	r3,-4(fp)
   4011c:	e0bffe17 	ldw	r2,-8(fp)
   40120:	1884703a 	and	r2,r3,r2
   40124:	1005003a 	cmpeq	r2,r2,zero
   40128:	1000161e 	bne	r2,zero,40184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   4012c:	e0bffd17 	ldw	r2,-12(fp)
   40130:	00d00034 	movhi	r3,16384
   40134:	18c79104 	addi	r3,r3,7748
   40138:	100490fa 	slli	r2,r2,3
   4013c:	10c5883a 	add	r2,r2,r3
   40140:	11400017 	ldw	r5,0(r2)
   40144:	e0bffd17 	ldw	r2,-12(fp)
   40148:	00d00034 	movhi	r3,16384
   4014c:	18c79104 	addi	r3,r3,7748
   40150:	100490fa 	slli	r2,r2,3
   40154:	10c5883a 	add	r2,r2,r3
   40158:	10800104 	addi	r2,r2,4
   4015c:	11000017 	ldw	r4,0(r2)
   40160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   40164:	0005313a 	rdctl	r2,ipending
   40168:	e0bffb15 	stw	r2,-20(fp)

  return active;
   4016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
   40170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
   40174:	e0bfff17 	ldw	r2,-4(fp)
   40178:	1004c03a 	cmpne	r2,r2,zero
   4017c:	103fe31e 	bne	r2,zero,4010c <alt_irq_handler+0x20>
   40180:	00000706 	br	401a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   40184:	e0bffe17 	ldw	r2,-8(fp)
   40188:	1085883a 	add	r2,r2,r2
   4018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
   40190:	e0bffd17 	ldw	r2,-12(fp)
   40194:	10800044 	addi	r2,r2,1
   40198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   4019c:	003fde06 	br	40118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   401a0:	e037883a 	mov	sp,fp
   401a4:	dfc00117 	ldw	ra,4(sp)
   401a8:	df000017 	ldw	fp,0(sp)
   401ac:	dec00204 	addi	sp,sp,8
   401b0:	f800283a 	ret

Disassembly of section .text:

000401b4 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
   401b4:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
   401b8:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
   401bc:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   401c0:	00bffd16 	blt	zero,r2,401b8 <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   401c4:	06e00034 	movhi	sp,32768
    ori sp, sp, %lo(__alt_stack_pointer)
   401c8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
   401cc:	06900034 	movhi	gp,16384
    ori gp, gp, %lo(_gp)
   401d0:	d6a76814 	ori	gp,gp,40352
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   401d4:	00900034 	movhi	r2,16384
    ori r2, r2, %lo(__bss_start)
   401d8:	10877814 	ori	r2,r2,7648

    movhi r3, %hi(__bss_end)
   401dc:	00d00034 	movhi	r3,16384
    ori r3, r3, %lo(__bss_end)
   401e0:	18c83514 	ori	r3,r3,8404

    beq r2, r3, 1f
   401e4:	10c00326 	beq	r2,r3,401f4 <_start+0x40>

0:
    stw zero, (r2)
   401e8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   401ec:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   401f0:	10fffd36 	bltu	r2,r3,401e8 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   401f4:	004a3a80 	call	4a3a8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   401f8:	004a5e40 	call	4a5e4 <alt_main>

000401fc <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   401fc:	003fff06 	br	401fc <alt_after_alt_main>

00040200 <camera_init>:

#include "system.h"
#include "altera_avalon_spi.h"


void camera_init(alt_u32 SPI_BASE){
   40200:	defff904 	addi	sp,sp,-28
   40204:	dfc00615 	stw	ra,24(sp)
   40208:	df000515 	stw	fp,20(sp)
   4020c:	df000504 	addi	fp,sp,20
   40210:	e13fff15 	stw	r4,-4(fp)

	 alt_u8 sentwrite[2];
	 alt_u8 received = 0;
   40214:	e03ffe85 	stb	zero,-6(fp)

	sentwrite[1] = 44;
   40218:	00800b04 	movi	r2,44
   4021c:	e0bffe45 	stb	r2,-7(fp)
	sentwrite[0] = 103 | 0x80;
   40220:	00bff9c4 	movi	r2,-25
   40224:	e0bffe05 	stb	r2,-8(fp)
	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   40228:	d8000015 	stw	zero,0(sp)
   4022c:	e0bffe84 	addi	r2,fp,-6
   40230:	d8800115 	stw	r2,4(sp)
   40234:	d8000215 	stw	zero,8(sp)
   40238:	e13fff17 	ldw	r4,-4(fp)
   4023c:	000b883a 	mov	r5,zero
   40240:	01800084 	movi	r6,2
   40244:	e1fffe04 	addi	r7,fp,-8
   40248:	004b6200 	call	4b620 <alt_avalon_spi_command>

	sentwrite[1] = 4;
   4024c:	00800104 	movi	r2,4
   40250:	e0bffe45 	stb	r2,-7(fp)
	sentwrite[0] = 84 | 0x80;
   40254:	00bff504 	movi	r2,-44
   40258:	e0bffe05 	stb	r2,-8(fp)
	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   4025c:	d8000015 	stw	zero,0(sp)
   40260:	e0bffe84 	addi	r2,fp,-6
   40264:	d8800115 	stw	r2,4(sp)
   40268:	d8000215 	stw	zero,8(sp)
   4026c:	e13fff17 	ldw	r4,-4(fp)
   40270:	000b883a 	mov	r5,zero
   40274:	01800084 	movi	r6,2
   40278:	e1fffe04 	addi	r7,fp,-8
   4027c:	004b6200 	call	4b620 <alt_avalon_spi_command>

	sentwrite[1] = 1;
   40280:	00800044 	movi	r2,1
   40284:	e0bffe45 	stb	r2,-7(fp)
	sentwrite[0] = 85 | 0x80;
   40288:	00bff544 	movi	r2,-43
   4028c:	e0bffe05 	stb	r2,-8(fp)
	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   40290:	d8000015 	stw	zero,0(sp)
   40294:	e0bffe84 	addi	r2,fp,-6
   40298:	d8800115 	stw	r2,4(sp)
   4029c:	d8000215 	stw	zero,8(sp)
   402a0:	e13fff17 	ldw	r4,-4(fp)
   402a4:	000b883a 	mov	r5,zero
   402a8:	01800084 	movi	r6,2
   402ac:	e1fffe04 	addi	r7,fp,-8
   402b0:	004b6200 	call	4b620 <alt_avalon_spi_command>

	sentwrite[1] = 64;
   402b4:	00801004 	movi	r2,64
   402b8:	e0bffe45 	stb	r2,-7(fp)
	sentwrite[0] = 88 | 0x80;
   402bc:	00bff604 	movi	r2,-40
   402c0:	e0bffe05 	stb	r2,-8(fp)
	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   402c4:	d8000015 	stw	zero,0(sp)
   402c8:	e0bffe84 	addi	r2,fp,-6
   402cc:	d8800115 	stw	r2,4(sp)
   402d0:	d8000215 	stw	zero,8(sp)
   402d4:	e13fff17 	ldw	r4,-4(fp)
   402d8:	000b883a 	mov	r5,zero
   402dc:	01800084 	movi	r6,2
   402e0:	e1fffe04 	addi	r7,fp,-8
   402e4:	004b6200 	call	4b620 <alt_avalon_spi_command>

	sentwrite[1] = 64;
   402e8:	00801004 	movi	r2,64
   402ec:	e0bffe45 	stb	r2,-7(fp)
	sentwrite[0] = 91 | 0x80;
   402f0:	00bff6c4 	movi	r2,-37
   402f4:	e0bffe05 	stb	r2,-8(fp)
	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   402f8:	d8000015 	stw	zero,0(sp)
   402fc:	e0bffe84 	addi	r2,fp,-6
   40300:	d8800115 	stw	r2,4(sp)
   40304:	d8000215 	stw	zero,8(sp)
   40308:	e13fff17 	ldw	r4,-4(fp)
   4030c:	000b883a 	mov	r5,zero
   40310:	01800084 	movi	r6,2
   40314:	e1fffe04 	addi	r7,fp,-8
   40318:	004b6200 	call	4b620 <alt_avalon_spi_command>

	sentwrite[1] = 101;
   4031c:	00801944 	movi	r2,101
   40320:	e0bffe45 	stb	r2,-7(fp)
	sentwrite[0] = 94 | 0x80;
   40324:	00bff784 	movi	r2,-34
   40328:	e0bffe05 	stb	r2,-8(fp)
	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   4032c:	d8000015 	stw	zero,0(sp)
   40330:	e0bffe84 	addi	r2,fp,-6
   40334:	d8800115 	stw	r2,4(sp)
   40338:	d8000215 	stw	zero,8(sp)
   4033c:	e13fff17 	ldw	r4,-4(fp)
   40340:	000b883a 	mov	r5,zero
   40344:	01800084 	movi	r6,2
   40348:	e1fffe04 	addi	r7,fp,-8
   4034c:	004b6200 	call	4b620 <alt_avalon_spi_command>

	sentwrite[1] = 109;
   40350:	00801b44 	movi	r2,109
   40354:	e0bffe45 	stb	r2,-7(fp)
	sentwrite[0] = 98 | 0x80;
   40358:	00bff884 	movi	r2,-30
   4035c:	e0bffe05 	stb	r2,-8(fp)
	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   40360:	d8000015 	stw	zero,0(sp)
   40364:	e0bffe84 	addi	r2,fp,-6
   40368:	d8800115 	stw	r2,4(sp)
   4036c:	d8000215 	stw	zero,8(sp)
   40370:	e13fff17 	ldw	r4,-4(fp)
   40374:	000b883a 	mov	r5,zero
   40378:	01800084 	movi	r6,2
   4037c:	e1fffe04 	addi	r7,fp,-8
   40380:	004b6200 	call	4b620 <alt_avalon_spi_command>

	sentwrite[1] = 109;
   40384:	00801b44 	movi	r2,109
   40388:	e0bffe45 	stb	r2,-7(fp)
	sentwrite[0] = 99 | 0x80;
   4038c:	00bff8c4 	movi	r2,-29
   40390:	e0bffe05 	stb	r2,-8(fp)
	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   40394:	d8000015 	stw	zero,0(sp)
   40398:	e0bffe84 	addi	r2,fp,-6
   4039c:	d8800115 	stw	r2,4(sp)
   403a0:	d8000215 	stw	zero,8(sp)
   403a4:	e13fff17 	ldw	r4,-4(fp)
   403a8:	000b883a 	mov	r5,zero
   403ac:	01800084 	movi	r6,2
   403b0:	e1fffe04 	addi	r7,fp,-8
   403b4:	004b6200 	call	4b620 <alt_avalon_spi_command>

	sentwrite[1] = 106;
   403b8:	00801a84 	movi	r2,106
   403bc:	e0bffe45 	stb	r2,-7(fp)
	sentwrite[0] = 95 | 0x80;
   403c0:	00bff7c4 	movi	r2,-33
   403c4:	e0bffe05 	stb	r2,-8(fp)
	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   403c8:	d8000015 	stw	zero,0(sp)
   403cc:	e0bffe84 	addi	r2,fp,-6
   403d0:	d8800115 	stw	r2,4(sp)
   403d4:	d8000215 	stw	zero,8(sp)
   403d8:	e13fff17 	ldw	r4,-4(fp)
   403dc:	000b883a 	mov	r5,zero
   403e0:	01800084 	movi	r6,2
   403e4:	e1fffe04 	addi	r7,fp,-8
   403e8:	004b6200 	call	4b620 <alt_avalon_spi_command>

	sentwrite[1] = 1;
   403ec:	00800044 	movi	r2,1
   403f0:	e0bffe45 	stb	r2,-7(fp)
	sentwrite[0] = 117 | 0x80;
   403f4:	00bffd44 	movi	r2,-11
   403f8:	e0bffe05 	stb	r2,-8(fp)
	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   403fc:	d8000015 	stw	zero,0(sp)
   40400:	e0bffe84 	addi	r2,fp,-6
   40404:	d8800115 	stw	r2,4(sp)
   40408:	d8000215 	stw	zero,8(sp)
   4040c:	e13fff17 	ldw	r4,-4(fp)
   40410:	000b883a 	mov	r5,zero
   40414:	01800084 	movi	r6,2
   40418:	e1fffe04 	addi	r7,fp,-8
   4041c:	004b6200 	call	4b620 <alt_avalon_spi_command>

	sentwrite[1] = 1;
   40420:	00800044 	movi	r2,1
   40424:	e0bffe45 	stb	r2,-7(fp)
	sentwrite[0] = 115 | 0x80;
   40428:	00bffcc4 	movi	r2,-13
   4042c:	e0bffe05 	stb	r2,-8(fp)
	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   40430:	d8000015 	stw	zero,0(sp)
   40434:	e0bffe84 	addi	r2,fp,-6
   40438:	d8800115 	stw	r2,4(sp)
   4043c:	d8000215 	stw	zero,8(sp)
   40440:	e13fff17 	ldw	r4,-4(fp)
   40444:	000b883a 	mov	r5,zero
   40448:	01800084 	movi	r6,2
   4044c:	e1fffe04 	addi	r7,fp,-8
   40450:	004b6200 	call	4b620 <alt_avalon_spi_command>

	sentwrite[1] = 7;
   40454:	008001c4 	movi	r2,7
   40458:	e0bffe45 	stb	r2,-7(fp)
	sentwrite[0] = 82 | 0x80;
   4045c:	00bff484 	movi	r2,-46
   40460:	e0bffe05 	stb	r2,-8(fp)
	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   40464:	d8000015 	stw	zero,0(sp)
   40468:	e0bffe84 	addi	r2,fp,-6
   4046c:	d8800115 	stw	r2,4(sp)
   40470:	d8000215 	stw	zero,8(sp)
   40474:	e13fff17 	ldw	r4,-4(fp)
   40478:	000b883a 	mov	r5,zero
   4047c:	01800084 	movi	r6,2
   40480:	e1fffe04 	addi	r7,fp,-8
   40484:	004b6200 	call	4b620 <alt_avalon_spi_command>

	//adjusting registers for optimal performance
	sentwrite[1] = 44; //req:44, valid:40-55
   40488:	00800b04 	movi	r2,44
   4048c:	e0bffe45 	stb	r2,-7(fp)
	sentwrite[0] = 103 | 0x80;
   40490:	00bff9c4 	movi	r2,-25
   40494:	e0bffe05 	stb	r2,-8(fp)
	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   40498:	d8000015 	stw	zero,0(sp)
   4049c:	e0bffe84 	addi	r2,fp,-6
   404a0:	d8800115 	stw	r2,4(sp)
   404a4:	d8000215 	stw	zero,8(sp)
   404a8:	e13fff17 	ldw	r4,-4(fp)
   404ac:	000b883a 	mov	r5,zero
   404b0:	01800084 	movi	r6,2
   404b4:	e1fffe04 	addi	r7,fp,-8
   404b8:	004b6200 	call	4b620 <alt_avalon_spi_command>

	sentwrite[1] = 109; //req:109, valid:102-115
   404bc:	00801b44 	movi	r2,109
   404c0:	e0bffe45 	stb	r2,-7(fp)
	sentwrite[0] = 98 | 0x80;
   404c4:	00bff884 	movi	r2,-30
   404c8:	e0bffe05 	stb	r2,-8(fp)
	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   404cc:	d8000015 	stw	zero,0(sp)
   404d0:	e0bffe84 	addi	r2,fp,-6
   404d4:	d8800115 	stw	r2,4(sp)
   404d8:	d8000215 	stw	zero,8(sp)
   404dc:	e13fff17 	ldw	r4,-4(fp)
   404e0:	000b883a 	mov	r5,zero
   404e4:	01800084 	movi	r6,2
   404e8:	e1fffe04 	addi	r7,fp,-8
   404ec:	004b6200 	call	4b620 <alt_avalon_spi_command>

	sentwrite[1] = 109; //req:109, valid:102-115
   404f0:	00801b44 	movi	r2,109
   404f4:	e0bffe45 	stb	r2,-7(fp)
	sentwrite[0] = 99 | 0x80;
   404f8:	00bff8c4 	movi	r2,-29
   404fc:	e0bffe05 	stb	r2,-8(fp)
	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   40500:	d8000015 	stw	zero,0(sp)
   40504:	e0bffe84 	addi	r2,fp,-6
   40508:	d8800115 	stw	r2,4(sp)
   4050c:	d8000215 	stw	zero,8(sp)
   40510:	e13fff17 	ldw	r4,-4(fp)
   40514:	000b883a 	mov	r5,zero
   40518:	01800084 	movi	r6,2
   4051c:	e1fffe04 	addi	r7,fp,-8
   40520:	004b6200 	call	4b620 <alt_avalon_spi_command>


	//channel mode 0=16 channels; 1=8 channels; 2=4 channels; 3=2 channels
	sentwrite[1] = 2;
   40524:	00800084 	movi	r2,2
   40528:	e0bffe45 	stb	r2,-7(fp)
	sentwrite[0] = 72 | 0x80;
   4052c:	00bff204 	movi	r2,-56
   40530:	e0bffe05 	stb	r2,-8(fp)
	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   40534:	d8000015 	stw	zero,0(sp)
   40538:	e0bffe84 	addi	r2,fp,-6
   4053c:	d8800115 	stw	r2,4(sp)
   40540:	d8000215 	stw	zero,8(sp)
   40544:	e13fff17 	ldw	r4,-4(fp)
   40548:	000b883a 	mov	r5,zero
   4054c:	01800084 	movi	r6,2
   40550:	e1fffe04 	addi	r7,fp,-8
   40554:	004b6200 	call	4b620 <alt_avalon_spi_command>

	//	request amount of frames
	sentwrite[1] = 10;
   40558:	00800284 	movi	r2,10
   4055c:	e0bffe45 	stb	r2,-7(fp)
	sentwrite[0] = 70 | 0x80;
   40560:	00bff184 	movi	r2,-58
   40564:	e0bffe05 	stb	r2,-8(fp)

	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   40568:	d8000015 	stw	zero,0(sp)
   4056c:	e0bffe84 	addi	r2,fp,-6
   40570:	d8800115 	stw	r2,4(sp)
   40574:	d8000215 	stw	zero,8(sp)
   40578:	e13fff17 	ldw	r4,-4(fp)
   4057c:	000b883a 	mov	r5,zero
   40580:	01800084 	movi	r6,2
   40584:	e1fffe04 	addi	r7,fp,-8
   40588:	004b6200 	call	4b620 <alt_avalon_spi_command>

	//	training pattern 1
	//sentwrite[1] = 0xFF;
	sentwrite[1] = 0x01 | 0x80;
   4058c:	00bfe044 	movi	r2,-127
   40590:	e0bffe45 	stb	r2,-7(fp)
	sentwrite[0] = 78 | 0x80;
   40594:	00bff384 	movi	r2,-50
   40598:	e0bffe05 	stb	r2,-8(fp)

	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   4059c:	d8000015 	stw	zero,0(sp)
   405a0:	e0bffe84 	addi	r2,fp,-6
   405a4:	d8800115 	stw	r2,4(sp)
   405a8:	d8000215 	stw	zero,8(sp)
   405ac:	e13fff17 	ldw	r4,-4(fp)
   405b0:	000b883a 	mov	r5,zero
   405b4:	01800084 	movi	r6,2
   405b8:	e1fffe04 	addi	r7,fp,-8
   405bc:	004b6200 	call	4b620 <alt_avalon_spi_command>

	//	training pattern 2
	//sentwrite[1] = 0x03;
	sentwrite[1] = 0x01 | 0x80;
   405c0:	00bfe044 	movi	r2,-127
   405c4:	e0bffe45 	stb	r2,-7(fp)
	sentwrite[0] = 79 | 0x80;
   405c8:	00bff3c4 	movi	r2,-49
   405cc:	e0bffe05 	stb	r2,-8(fp)

	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   405d0:	d8000015 	stw	zero,0(sp)
   405d4:	e0bffe84 	addi	r2,fp,-6
   405d8:	d8800115 	stw	r2,4(sp)
   405dc:	d8000215 	stw	zero,8(sp)
   405e0:	e13fff17 	ldw	r4,-4(fp)
   405e4:	000b883a 	mov	r5,zero
   405e8:	01800084 	movi	r6,2
   405ec:	e1fffe04 	addi	r7,fp,-8
   405f0:	004b6200 	call	4b620 <alt_avalon_spi_command>

	//number of lines 1 255
	sentwrite[1] = 0x30; //0x40
   405f4:	00800c04 	movi	r2,48
   405f8:	e0bffe45 	stb	r2,-7(fp)
	sentwrite[0] = 1 | 0x80;
   405fc:	00bfe044 	movi	r2,-127
   40600:	e0bffe05 	stb	r2,-8(fp)
	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   40604:	d8000015 	stw	zero,0(sp)
   40608:	e0bffe84 	addi	r2,fp,-6
   4060c:	d8800115 	stw	r2,4(sp)
   40610:	d8000215 	stw	zero,8(sp)
   40614:	e13fff17 	ldw	r4,-4(fp)
   40618:	000b883a 	mov	r5,zero
   4061c:	01800084 	movi	r6,2
   40620:	e1fffe04 	addi	r7,fp,-8
   40624:	004b6200 	call	4b620 <alt_avalon_spi_command>

	//number of lines 2 1
	sentwrite[1] = 0x04; //0x04
   40628:	00800104 	movi	r2,4
   4062c:	e0bffe45 	stb	r2,-7(fp)
	sentwrite[0] = 2 | 0x80;
   40630:	00bfe084 	movi	r2,-126
   40634:	e0bffe05 	stb	r2,-8(fp)
	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   40638:	d8000015 	stw	zero,0(sp)
   4063c:	e0bffe84 	addi	r2,fp,-6
   40640:	d8800115 	stw	r2,4(sp)
   40644:	d8000215 	stw	zero,8(sp)
   40648:	e13fff17 	ldw	r4,-4(fp)
   4064c:	000b883a 	mov	r5,zero
   40650:	01800084 	movi	r6,2
   40654:	e1fffe04 	addi	r7,fp,-8
   40658:	004b6200 	call	4b620 <alt_avalon_spi_command>

	//start row window 1
	sentwrite[1] = 0x00; //0x00
   4065c:	e03ffe45 	stb	zero,-7(fp)
	sentwrite[0] = 3 | 0x80;
   40660:	00bfe0c4 	movi	r2,-125
   40664:	e0bffe05 	stb	r2,-8(fp)
	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   40668:	d8000015 	stw	zero,0(sp)
   4066c:	e0bffe84 	addi	r2,fp,-6
   40670:	d8800115 	stw	r2,4(sp)
   40674:	d8000215 	stw	zero,8(sp)
   40678:	e13fff17 	ldw	r4,-4(fp)
   4067c:	000b883a 	mov	r5,zero
   40680:	01800084 	movi	r6,2
   40684:	e1fffe04 	addi	r7,fp,-8
   40688:	004b6200 	call	4b620 <alt_avalon_spi_command>

	//start row window 2
	sentwrite[1] = 0x00; //0x00
   4068c:	e03ffe45 	stb	zero,-7(fp)
	sentwrite[0] = 4 | 0x80;
   40690:	00bfe104 	movi	r2,-124
   40694:	e0bffe05 	stb	r2,-8(fp)
	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   40698:	d8000015 	stw	zero,0(sp)
   4069c:	e0bffe84 	addi	r2,fp,-6
   406a0:	d8800115 	stw	r2,4(sp)
   406a4:	d8000215 	stw	zero,8(sp)
   406a8:	e13fff17 	ldw	r4,-4(fp)
   406ac:	000b883a 	mov	r5,zero
   406b0:	01800084 	movi	r6,2
   406b4:	e1fffe04 	addi	r7,fp,-8
   406b8:	004b6200 	call	4b620 <alt_avalon_spi_command>

	// row skip 1
	sentwrite[1] = 0x00; //0x00
   406bc:	e03ffe45 	stb	zero,-7(fp)
	sentwrite[0] = 35 | 0x80;
   406c0:	00bfe8c4 	movi	r2,-93
   406c4:	e0bffe05 	stb	r2,-8(fp)
	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   406c8:	d8000015 	stw	zero,0(sp)
   406cc:	e0bffe84 	addi	r2,fp,-6
   406d0:	d8800115 	stw	r2,4(sp)
   406d4:	d8000215 	stw	zero,8(sp)
   406d8:	e13fff17 	ldw	r4,-4(fp)
   406dc:	000b883a 	mov	r5,zero
   406e0:	01800084 	movi	r6,2
   406e4:	e1fffe04 	addi	r7,fp,-8
   406e8:	004b6200 	call	4b620 <alt_avalon_spi_command>

	// row skip 2
	sentwrite[1] = 0x00; //0x00
   406ec:	e03ffe45 	stb	zero,-7(fp)
	sentwrite[0] = 37 | 0x80;
   406f0:	00bfe944 	movi	r2,-91
   406f4:	e0bffe05 	stb	r2,-8(fp)
	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   406f8:	d8000015 	stw	zero,0(sp)
   406fc:	e0bffe84 	addi	r2,fp,-6
   40700:	d8800115 	stw	r2,4(sp)
   40704:	d8000215 	stw	zero,8(sp)
   40708:	e13fff17 	ldw	r4,-4(fp)
   4070c:	000b883a 	mov	r5,zero
   40710:	01800084 	movi	r6,2
   40714:	e1fffe04 	addi	r7,fp,-8
   40718:	004b6200 	call	4b620 <alt_avalon_spi_command>
//	sentwrite[1] = 0x01;
//	sentwrite[0] = 111 | 0x80;
//	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);

	//	image flipping x/y
	sentwrite[1] = 0x01; //0x00
   4071c:	00800044 	movi	r2,1
   40720:	e0bffe45 	stb	r2,-7(fp)
	sentwrite[0] = 40 | 0x80;
   40724:	00bfea04 	movi	r2,-88
   40728:	e0bffe05 	stb	r2,-8(fp)
	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   4072c:	d8000015 	stw	zero,0(sp)
   40730:	e0bffe84 	addi	r2,fp,-6
   40734:	d8800115 	stw	r2,4(sp)
   40738:	d8000215 	stw	zero,8(sp)
   4073c:	e13fff17 	ldw	r4,-4(fp)
   40740:	000b883a 	mov	r5,zero
   40744:	01800084 	movi	r6,2
   40748:	e1fffe04 	addi	r7,fp,-8
   4074c:	004b6200 	call	4b620 <alt_avalon_spi_command>

	//	exposure time 1
	sentwrite[1] = 0x40; //0x40
   40750:	00801004 	movi	r2,64
   40754:	e0bffe45 	stb	r2,-7(fp)
	sentwrite[0] = 42 | 0x80;
   40758:	00bfea84 	movi	r2,-86
   4075c:	e0bffe05 	stb	r2,-8(fp)
	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   40760:	d8000015 	stw	zero,0(sp)
   40764:	e0bffe84 	addi	r2,fp,-6
   40768:	d8800115 	stw	r2,4(sp)
   4076c:	d8000215 	stw	zero,8(sp)
   40770:	e13fff17 	ldw	r4,-4(fp)
   40774:	000b883a 	mov	r5,zero
   40778:	01800084 	movi	r6,2
   4077c:	e1fffe04 	addi	r7,fp,-8
   40780:	004b6200 	call	4b620 <alt_avalon_spi_command>

	//	exposure time 2
	sentwrite[1] = 0x0F; //0x04
   40784:	008003c4 	movi	r2,15
   40788:	e0bffe45 	stb	r2,-7(fp)
	sentwrite[0] = 43 | 0x80;
   4078c:	00bfeac4 	movi	r2,-85
   40790:	e0bffe05 	stb	r2,-8(fp)
	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   40794:	d8000015 	stw	zero,0(sp)
   40798:	e0bffe84 	addi	r2,fp,-6
   4079c:	d8800115 	stw	r2,4(sp)
   407a0:	d8000215 	stw	zero,8(sp)
   407a4:	e13fff17 	ldw	r4,-4(fp)
   407a8:	000b883a 	mov	r5,zero
   407ac:	01800084 	movi	r6,2
   407b0:	e1fffe04 	addi	r7,fp,-8
   407b4:	004b6200 	call	4b620 <alt_avalon_spi_command>

	//	exposure time 3
	sentwrite[1] = 0x00; //0x00
   407b8:	e03ffe45 	stb	zero,-7(fp)
	sentwrite[0] = 44 | 0x80;
   407bc:	00bfeb04 	movi	r2,-84
   407c0:	e0bffe05 	stb	r2,-8(fp)
	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   407c4:	d8000015 	stw	zero,0(sp)
   407c8:	e0bffe84 	addi	r2,fp,-6
   407cc:	d8800115 	stw	r2,4(sp)
   407d0:	d8000215 	stw	zero,8(sp)
   407d4:	e13fff17 	ldw	r4,-4(fp)
   407d8:	000b883a 	mov	r5,zero
   407dc:	01800084 	movi	r6,2
   407e0:	e1fffe04 	addi	r7,fp,-8
   407e4:	004b6200 	call	4b620 <alt_avalon_spi_command>


}
   407e8:	e037883a 	mov	sp,fp
   407ec:	dfc00117 	ldw	ra,4(sp)
   407f0:	df000017 	ldw	fp,0(sp)
   407f4:	dec00204 	addi	sp,sp,8
   407f8:	f800283a 	ret

000407fc <main>:

  int dir = 0;
  int i = 0;

int main()
{
   407fc:	defff204 	addi	sp,sp,-56
   40800:	dfc00d15 	stw	ra,52(sp)
   40804:	df000c15 	stw	fp,48(sp)
   40808:	df000c04 	addi	fp,sp,48
  printf("Hello from Nios II!\n");
   4080c:	01100034 	movhi	r4,16384
   40810:	21000004 	addi	r4,r4,0
   40814:	0040a480 	call	40a48 <puts>

    int MemSize_1 = MEM_IF_DDR2_EMIF_SPAN;
   40818:	00900034 	movhi	r2,16384
   4081c:	e0bffd15 	stw	r2,-12(fp)
//  int MemSize_2 = MEM_IF_DDR2_EMIF_0_SPAN;
  int TimeStart, TimeElapsed, TestIndex = 0;
   40820:	e03ffa15 	stw	zero,-24(fp)
 void *ddr2_base_1 = (void *)MEM_IF_DDR2_EMIF_BASE;
   40824:	00900034 	movhi	r2,16384
   40828:	e0bff915 	stw	r2,-28(fp)
//  void *ddr2_base_2 = (void *)MEM_IF_DDR2_EMIF_0_BASE;
  alt_u32 InitValue;
//  alt_u8 ButtonMask;
  alt_u8 received1 = 0;
   4082c:	e03ffe05 	stb	zero,-8(fp)
  alt_u8 received2 = 0;
   40830:	e03ffe45 	stb	zero,-7(fp)
  alt_u8 sent = 125;
   40834:	00801f44 	movi	r2,125
   40838:	e0bffe85 	stb	r2,-6(fp)



//  printf("===== DE4 DDR2 Test Program (UniPHY) =====\n");
//  printf("DDR2 Clock: 400 MHZ\n");
    printf("DDR2_1  Size: %d MBytes\n", MEM_IF_DDR2_EMIF_SPAN/1024/1024);
   4083c:	01100034 	movhi	r4,16384
   40840:	21000504 	addi	r4,r4,20
   40844:	01410004 	movi	r5,1024
   40848:	00409300 	call	40930 <printf>
//    printf("test: %d\n",*test);
//  printf("DDR2_2  Size: %d MBytes\n", MEM_IF_DDR2_EMIF_0_SPAN/1024/1024);

  //  alt_u32 *test = 0x40000000;
    alt_u32 *test = 0x40000000;
   4084c:	00900034 	movhi	r2,16384
   40850:	e0bff715 	stw	r2,-36(fp)
 //   *test = 0;


	IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE, 0xff);
   40854:	00c04034 	movhi	r3,256
   40858:	18c01804 	addi	r3,r3,96
   4085c:	00803fc4 	movi	r2,255
   40860:	18800035 	stwio	r2,0(r3)


	camera_init(SPI_1_BASE);
   40864:	01004034 	movhi	r4,256
   40868:	00402000 	call	40200 <camera_init>
	camera_init(SPI_2_BASE);
   4086c:	01004034 	movhi	r4,256
   40870:	21000804 	addi	r4,r4,32
   40874:	00402000 	call	40200 <camera_init>


  while (1)
   {

	  if (dir>=60)
   40878:	d0a01017 	ldw	r2,-32704(gp)
   4087c:	10800f10 	cmplti	r2,r2,60
   40880:	10001e1e 	bne	r2,zero,408fc <main+0x100>
	      {

		  alt_avalon_spi_command(SPI_1_BASE,0,1,&sent,1,&received1,0);
   40884:	e1fffe84 	addi	r7,fp,-6
   40888:	00800044 	movi	r2,1
   4088c:	d8800015 	stw	r2,0(sp)
   40890:	e0bffe04 	addi	r2,fp,-8
   40894:	d8800115 	stw	r2,4(sp)
   40898:	d8000215 	stw	zero,8(sp)
   4089c:	01004034 	movhi	r4,256
   408a0:	000b883a 	mov	r5,zero
   408a4:	01800044 	movi	r6,1
   408a8:	004b6200 	call	4b620 <alt_avalon_spi_command>
		  alt_avalon_spi_command(SPI_2_BASE,0,1,&sent,1,&received2,0);
   408ac:	e1fffe84 	addi	r7,fp,-6
   408b0:	00800044 	movi	r2,1
   408b4:	d8800015 	stw	r2,0(sp)
   408b8:	e0bffe44 	addi	r2,fp,-7
   408bc:	d8800115 	stw	r2,4(sp)
   408c0:	d8000215 	stw	zero,8(sp)
   408c4:	01004034 	movhi	r4,256
   408c8:	21000804 	addi	r4,r4,32
   408cc:	000b883a 	mov	r5,zero
   408d0:	01800044 	movi	r6,1
   408d4:	004b6200 	call	4b620 <alt_avalon_spi_command>
//		  sent ++;
//		  if (sent>=120)
//		  {
//			  sent = 0x0;
//		  }
		  printf("value1: %d value2: %d\n",received1,received2);
   408d8:	e0bffe03 	ldbu	r2,-8(fp)
   408dc:	11403fcc 	andi	r5,r2,255
   408e0:	e0bffe43 	ldbu	r2,-7(fp)
   408e4:	11803fcc 	andi	r6,r2,255
   408e8:	01100034 	movhi	r4,16384
   408ec:	21000c04 	addi	r4,r4,48
   408f0:	00409300 	call	40930 <printf>
		  //received = 64;
		  //IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE, 0x80|0x40);

		  dir = 0;
   408f4:	d0201015 	stw	zero,-32704(gp)
   408f8:	00000306 	br	40908 <main+0x10c>
	      }
	      else
	      {
	    	  dir ++;
   408fc:	d0a01017 	ldw	r2,-32704(gp)
   40900:	10800044 	addi	r2,r2,1
   40904:	d0a01015 	stw	r2,-32704(gp)
		  	//  IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE, 0x80);
	      }



  i = 0;
   40908:	d0201115 	stw	zero,-32700(gp)
  while (i<80000)
   4090c:	00000306 	br	4091c <main+0x120>
    i++;
   40910:	d0a01117 	ldw	r2,-32700(gp)
   40914:	10800044 	addi	r2,r2,1
   40918:	d0a01115 	stw	r2,-32700(gp)
	      }



  i = 0;
  while (i<80000)
   4091c:	d0e01117 	ldw	r3,-32700(gp)
   40920:	00800074 	movhi	r2,1
   40924:	108e1fc4 	addi	r2,r2,14463
   40928:	10fff90e 	bge	r2,r3,40910 <main+0x114>
    i++;
}
   4092c:	003fd206 	br	40878 <main+0x7c>

00040930 <printf>:
   40930:	defffb04 	addi	sp,sp,-20
   40934:	dfc00115 	stw	ra,4(sp)
   40938:	d9400215 	stw	r5,8(sp)
   4093c:	d9800315 	stw	r6,12(sp)
   40940:	d9c00415 	stw	r7,16(sp)
   40944:	00900034 	movhi	r2,16384
   40948:	10876804 	addi	r2,r2,7584
   4094c:	10c00017 	ldw	r3,0(r2)
   40950:	200b883a 	mov	r5,r4
   40954:	d8800204 	addi	r2,sp,8
   40958:	19000217 	ldw	r4,8(r3)
   4095c:	100d883a 	mov	r6,r2
   40960:	d8800015 	stw	r2,0(sp)
   40964:	00429d40 	call	429d4 <__vfprintf_internal>
   40968:	dfc00117 	ldw	ra,4(sp)
   4096c:	dec00504 	addi	sp,sp,20
   40970:	f800283a 	ret

00040974 <_printf_r>:
   40974:	defffc04 	addi	sp,sp,-16
   40978:	dfc00115 	stw	ra,4(sp)
   4097c:	d9800215 	stw	r6,8(sp)
   40980:	d9c00315 	stw	r7,12(sp)
   40984:	280d883a 	mov	r6,r5
   40988:	21400217 	ldw	r5,8(r4)
   4098c:	d8c00204 	addi	r3,sp,8
   40990:	180f883a 	mov	r7,r3
   40994:	d8c00015 	stw	r3,0(sp)
   40998:	0040b280 	call	40b28 <___vfprintf_internal_r>
   4099c:	dfc00117 	ldw	ra,4(sp)
   409a0:	dec00404 	addi	sp,sp,16
   409a4:	f800283a 	ret

000409a8 <_puts_r>:
   409a8:	defff604 	addi	sp,sp,-40
   409ac:	dc400715 	stw	r17,28(sp)
   409b0:	2023883a 	mov	r17,r4
   409b4:	2809883a 	mov	r4,r5
   409b8:	dfc00915 	stw	ra,36(sp)
   409bc:	dcc00815 	stw	r19,32(sp)
   409c0:	2827883a 	mov	r19,r5
   409c4:	0040a5c0 	call	40a5c <strlen>
   409c8:	89400217 	ldw	r5,8(r17)
   409cc:	00d00034 	movhi	r3,16384
   409d0:	18c01204 	addi	r3,r3,72
   409d4:	01c00044 	movi	r7,1
   409d8:	12000044 	addi	r8,r2,1
   409dc:	d8c00515 	stw	r3,20(sp)
   409e0:	d9c00615 	stw	r7,24(sp)
   409e4:	d8c00304 	addi	r3,sp,12
   409e8:	01c00084 	movi	r7,2
   409ec:	8809883a 	mov	r4,r17
   409f0:	d80d883a 	mov	r6,sp
   409f4:	d8c00015 	stw	r3,0(sp)
   409f8:	dcc00315 	stw	r19,12(sp)
   409fc:	da000215 	stw	r8,8(sp)
   40a00:	d9c00115 	stw	r7,4(sp)
   40a04:	d8800415 	stw	r2,16(sp)
   40a08:	0044c300 	call	44c30 <__sfvwrite_r>
   40a0c:	00ffffc4 	movi	r3,-1
   40a10:	10000626 	beq	r2,zero,40a2c <_puts_r+0x84>
   40a14:	1805883a 	mov	r2,r3
   40a18:	dfc00917 	ldw	ra,36(sp)
   40a1c:	dcc00817 	ldw	r19,32(sp)
   40a20:	dc400717 	ldw	r17,28(sp)
   40a24:	dec00a04 	addi	sp,sp,40
   40a28:	f800283a 	ret
   40a2c:	00c00284 	movi	r3,10
   40a30:	1805883a 	mov	r2,r3
   40a34:	dfc00917 	ldw	ra,36(sp)
   40a38:	dcc00817 	ldw	r19,32(sp)
   40a3c:	dc400717 	ldw	r17,28(sp)
   40a40:	dec00a04 	addi	sp,sp,40
   40a44:	f800283a 	ret

00040a48 <puts>:
   40a48:	00900034 	movhi	r2,16384
   40a4c:	10876804 	addi	r2,r2,7584
   40a50:	200b883a 	mov	r5,r4
   40a54:	11000017 	ldw	r4,0(r2)
   40a58:	00409a81 	jmpi	409a8 <_puts_r>

00040a5c <strlen>:
   40a5c:	208000cc 	andi	r2,r4,3
   40a60:	2011883a 	mov	r8,r4
   40a64:	1000161e 	bne	r2,zero,40ac0 <strlen+0x64>
   40a68:	20c00017 	ldw	r3,0(r4)
   40a6c:	017fbff4 	movhi	r5,65279
   40a70:	297fbfc4 	addi	r5,r5,-257
   40a74:	01e02074 	movhi	r7,32897
   40a78:	39e02004 	addi	r7,r7,-32640
   40a7c:	1945883a 	add	r2,r3,r5
   40a80:	11c4703a 	and	r2,r2,r7
   40a84:	00c6303a 	nor	r3,zero,r3
   40a88:	1886703a 	and	r3,r3,r2
   40a8c:	18000c1e 	bne	r3,zero,40ac0 <strlen+0x64>
   40a90:	280d883a 	mov	r6,r5
   40a94:	380b883a 	mov	r5,r7
   40a98:	21000104 	addi	r4,r4,4
   40a9c:	20800017 	ldw	r2,0(r4)
   40aa0:	1187883a 	add	r3,r2,r6
   40aa4:	1946703a 	and	r3,r3,r5
   40aa8:	0084303a 	nor	r2,zero,r2
   40aac:	10c4703a 	and	r2,r2,r3
   40ab0:	103ff926 	beq	r2,zero,40a98 <strlen+0x3c>
   40ab4:	20800007 	ldb	r2,0(r4)
   40ab8:	10000326 	beq	r2,zero,40ac8 <strlen+0x6c>
   40abc:	21000044 	addi	r4,r4,1
   40ac0:	20800007 	ldb	r2,0(r4)
   40ac4:	103ffd1e 	bne	r2,zero,40abc <strlen+0x60>
   40ac8:	2205c83a 	sub	r2,r4,r8
   40acc:	f800283a 	ret

00040ad0 <__sprint_r>:
   40ad0:	30800217 	ldw	r2,8(r6)
   40ad4:	defffe04 	addi	sp,sp,-8
   40ad8:	dc000015 	stw	r16,0(sp)
   40adc:	dfc00115 	stw	ra,4(sp)
   40ae0:	3021883a 	mov	r16,r6
   40ae4:	0007883a 	mov	r3,zero
   40ae8:	1000061e 	bne	r2,zero,40b04 <__sprint_r+0x34>
   40aec:	1805883a 	mov	r2,r3
   40af0:	30000115 	stw	zero,4(r6)
   40af4:	dfc00117 	ldw	ra,4(sp)
   40af8:	dc000017 	ldw	r16,0(sp)
   40afc:	dec00204 	addi	sp,sp,8
   40b00:	f800283a 	ret
   40b04:	0044c300 	call	44c30 <__sfvwrite_r>
   40b08:	1007883a 	mov	r3,r2
   40b0c:	1805883a 	mov	r2,r3
   40b10:	80000115 	stw	zero,4(r16)
   40b14:	80000215 	stw	zero,8(r16)
   40b18:	dfc00117 	ldw	ra,4(sp)
   40b1c:	dc000017 	ldw	r16,0(sp)
   40b20:	dec00204 	addi	sp,sp,8
   40b24:	f800283a 	ret

00040b28 <___vfprintf_internal_r>:
   40b28:	defea404 	addi	sp,sp,-1392
   40b2c:	dd815815 	stw	r22,1376(sp)
   40b30:	dc015215 	stw	r16,1352(sp)
   40b34:	d9c15115 	stw	r7,1348(sp)
   40b38:	dfc15b15 	stw	ra,1388(sp)
   40b3c:	df015a15 	stw	fp,1384(sp)
   40b40:	ddc15915 	stw	r23,1380(sp)
   40b44:	dd415715 	stw	r21,1372(sp)
   40b48:	dd015615 	stw	r20,1368(sp)
   40b4c:	dcc15515 	stw	r19,1364(sp)
   40b50:	dc815415 	stw	r18,1360(sp)
   40b54:	dc415315 	stw	r17,1356(sp)
   40b58:	282d883a 	mov	r22,r5
   40b5c:	3021883a 	mov	r16,r6
   40b60:	d9014f15 	stw	r4,1340(sp)
   40b64:	00452540 	call	45254 <_localeconv_r>
   40b68:	10800017 	ldw	r2,0(r2)
   40b6c:	d9c15117 	ldw	r7,1348(sp)
   40b70:	d8814915 	stw	r2,1316(sp)
   40b74:	d8814f17 	ldw	r2,1340(sp)
   40b78:	10000226 	beq	r2,zero,40b84 <___vfprintf_internal_r+0x5c>
   40b7c:	10800e17 	ldw	r2,56(r2)
   40b80:	10020d26 	beq	r2,zero,413b8 <___vfprintf_internal_r+0x890>
   40b84:	b080030b 	ldhu	r2,12(r22)
   40b88:	1080020c 	andi	r2,r2,8
   40b8c:	10020e26 	beq	r2,zero,413c8 <___vfprintf_internal_r+0x8a0>
   40b90:	b0800417 	ldw	r2,16(r22)
   40b94:	10020c26 	beq	r2,zero,413c8 <___vfprintf_internal_r+0x8a0>
   40b98:	b200030b 	ldhu	r8,12(r22)
   40b9c:	00800284 	movi	r2,10
   40ba0:	40c0068c 	andi	r3,r8,26
   40ba4:	18802f1e 	bne	r3,r2,40c64 <___vfprintf_internal_r+0x13c>
   40ba8:	b080038f 	ldh	r2,14(r22)
   40bac:	10002d16 	blt	r2,zero,40c64 <___vfprintf_internal_r+0x13c>
   40bb0:	b240038b 	ldhu	r9,14(r22)
   40bb4:	b2800717 	ldw	r10,28(r22)
   40bb8:	b2c00917 	ldw	r11,36(r22)
   40bbc:	d9014f17 	ldw	r4,1340(sp)
   40bc0:	dc402904 	addi	r17,sp,164
   40bc4:	d8804004 	addi	r2,sp,256
   40bc8:	00c10004 	movi	r3,1024
   40bcc:	423fff4c 	andi	r8,r8,65533
   40bd0:	800d883a 	mov	r6,r16
   40bd4:	880b883a 	mov	r5,r17
   40bd8:	da002c0d 	sth	r8,176(sp)
   40bdc:	da402c8d 	sth	r9,178(sp)
   40be0:	da803015 	stw	r10,192(sp)
   40be4:	dac03215 	stw	r11,200(sp)
   40be8:	d8802d15 	stw	r2,180(sp)
   40bec:	d8c02e15 	stw	r3,184(sp)
   40bf0:	d8802915 	stw	r2,164(sp)
   40bf4:	d8c02b15 	stw	r3,172(sp)
   40bf8:	d8002f15 	stw	zero,188(sp)
   40bfc:	0040b280 	call	40b28 <___vfprintf_internal_r>
   40c00:	d8814b15 	stw	r2,1324(sp)
   40c04:	10000416 	blt	r2,zero,40c18 <___vfprintf_internal_r+0xf0>
   40c08:	d9014f17 	ldw	r4,1340(sp)
   40c0c:	880b883a 	mov	r5,r17
   40c10:	00443000 	call	44300 <_fflush_r>
   40c14:	1002321e 	bne	r2,zero,414e0 <___vfprintf_internal_r+0x9b8>
   40c18:	d8802c0b 	ldhu	r2,176(sp)
   40c1c:	1080100c 	andi	r2,r2,64
   40c20:	10000326 	beq	r2,zero,40c30 <___vfprintf_internal_r+0x108>
   40c24:	b080030b 	ldhu	r2,12(r22)
   40c28:	10801014 	ori	r2,r2,64
   40c2c:	b080030d 	sth	r2,12(r22)
   40c30:	d8814b17 	ldw	r2,1324(sp)
   40c34:	dfc15b17 	ldw	ra,1388(sp)
   40c38:	df015a17 	ldw	fp,1384(sp)
   40c3c:	ddc15917 	ldw	r23,1380(sp)
   40c40:	dd815817 	ldw	r22,1376(sp)
   40c44:	dd415717 	ldw	r21,1372(sp)
   40c48:	dd015617 	ldw	r20,1368(sp)
   40c4c:	dcc15517 	ldw	r19,1364(sp)
   40c50:	dc815417 	ldw	r18,1360(sp)
   40c54:	dc415317 	ldw	r17,1356(sp)
   40c58:	dc015217 	ldw	r16,1352(sp)
   40c5c:	dec15c04 	addi	sp,sp,1392
   40c60:	f800283a 	ret
   40c64:	0005883a 	mov	r2,zero
   40c68:	0007883a 	mov	r3,zero
   40c6c:	dd401904 	addi	r21,sp,100
   40c70:	d8814215 	stw	r2,1288(sp)
   40c74:	802f883a 	mov	r23,r16
   40c78:	d8c14315 	stw	r3,1292(sp)
   40c7c:	d8014b15 	stw	zero,1324(sp)
   40c80:	d8014815 	stw	zero,1312(sp)
   40c84:	d8014415 	stw	zero,1296(sp)
   40c88:	d8014715 	stw	zero,1308(sp)
   40c8c:	dd400c15 	stw	r21,48(sp)
   40c90:	d8000e15 	stw	zero,56(sp)
   40c94:	d8000d15 	stw	zero,52(sp)
   40c98:	b8800007 	ldb	r2,0(r23)
   40c9c:	10001926 	beq	r2,zero,40d04 <___vfprintf_internal_r+0x1dc>
   40ca0:	00c00944 	movi	r3,37
   40ca4:	10c01726 	beq	r2,r3,40d04 <___vfprintf_internal_r+0x1dc>
   40ca8:	b821883a 	mov	r16,r23
   40cac:	00000106 	br	40cb4 <___vfprintf_internal_r+0x18c>
   40cb0:	10c00326 	beq	r2,r3,40cc0 <___vfprintf_internal_r+0x198>
   40cb4:	84000044 	addi	r16,r16,1
   40cb8:	80800007 	ldb	r2,0(r16)
   40cbc:	103ffc1e 	bne	r2,zero,40cb0 <___vfprintf_internal_r+0x188>
   40cc0:	85e7c83a 	sub	r19,r16,r23
   40cc4:	98000e26 	beq	r19,zero,40d00 <___vfprintf_internal_r+0x1d8>
   40cc8:	dc800e17 	ldw	r18,56(sp)
   40ccc:	dc400d17 	ldw	r17,52(sp)
   40cd0:	008001c4 	movi	r2,7
   40cd4:	94e5883a 	add	r18,r18,r19
   40cd8:	8c400044 	addi	r17,r17,1
   40cdc:	adc00015 	stw	r23,0(r21)
   40ce0:	dc800e15 	stw	r18,56(sp)
   40ce4:	acc00115 	stw	r19,4(r21)
   40ce8:	dc400d15 	stw	r17,52(sp)
   40cec:	14428b16 	blt	r2,r17,4171c <___vfprintf_internal_r+0xbf4>
   40cf0:	ad400204 	addi	r21,r21,8
   40cf4:	d9014b17 	ldw	r4,1324(sp)
   40cf8:	24c9883a 	add	r4,r4,r19
   40cfc:	d9014b15 	stw	r4,1324(sp)
   40d00:	802f883a 	mov	r23,r16
   40d04:	b8800007 	ldb	r2,0(r23)
   40d08:	10013c26 	beq	r2,zero,411fc <___vfprintf_internal_r+0x6d4>
   40d0c:	bdc00044 	addi	r23,r23,1
   40d10:	d8000405 	stb	zero,16(sp)
   40d14:	b8c00007 	ldb	r3,0(r23)
   40d18:	04ffffc4 	movi	r19,-1
   40d1c:	d8014c15 	stw	zero,1328(sp)
   40d20:	d8014a15 	stw	zero,1320(sp)
   40d24:	d8c14d15 	stw	r3,1332(sp)
   40d28:	bdc00044 	addi	r23,r23,1
   40d2c:	d9414d17 	ldw	r5,1332(sp)
   40d30:	00801604 	movi	r2,88
   40d34:	28fff804 	addi	r3,r5,-32
   40d38:	10c06036 	bltu	r2,r3,40ebc <___vfprintf_internal_r+0x394>
   40d3c:	18c5883a 	add	r2,r3,r3
   40d40:	1085883a 	add	r2,r2,r2
   40d44:	00c00134 	movhi	r3,4
   40d48:	18c35604 	addi	r3,r3,3416
   40d4c:	10c5883a 	add	r2,r2,r3
   40d50:	11000017 	ldw	r4,0(r2)
   40d54:	2000683a 	jmp	r4
   40d58:	00041ccc 	andi	zero,zero,4211
   40d5c:	00040ebc 	xorhi	zero,zero,4154
   40d60:	00040ebc 	xorhi	zero,zero,4154
   40d64:	00041cb8 	rdprs	zero,zero,4210
   40d68:	00040ebc 	xorhi	zero,zero,4154
   40d6c:	00040ebc 	xorhi	zero,zero,4154
   40d70:	00040ebc 	xorhi	zero,zero,4154
   40d74:	00040ebc 	xorhi	zero,zero,4154
   40d78:	00040ebc 	xorhi	zero,zero,4154
   40d7c:	00040ebc 	xorhi	zero,zero,4154
   40d80:	00041a98 	cmpnei	zero,zero,4202
   40d84:	00041ca8 	cmpgeui	zero,zero,4210
   40d88:	00040ebc 	xorhi	zero,zero,4154
   40d8c:	00041ab0 	cmpltui	zero,zero,4202
   40d90:	00041d44 	movi	zero,4213
   40d94:	00040ebc 	xorhi	zero,zero,4154
   40d98:	00041d30 	cmpltui	zero,zero,4212
   40d9c:	00041cf8 	rdprs	zero,zero,4211
   40da0:	00041cf8 	rdprs	zero,zero,4211
   40da4:	00041cf8 	rdprs	zero,zero,4211
   40da8:	00041cf8 	rdprs	zero,zero,4211
   40dac:	00041cf8 	rdprs	zero,zero,4211
   40db0:	00041cf8 	rdprs	zero,zero,4211
   40db4:	00041cf8 	rdprs	zero,zero,4211
   40db8:	00041cf8 	rdprs	zero,zero,4211
   40dbc:	00041cf8 	rdprs	zero,zero,4211
   40dc0:	00040ebc 	xorhi	zero,zero,4154
   40dc4:	00040ebc 	xorhi	zero,zero,4154
   40dc8:	00040ebc 	xorhi	zero,zero,4154
   40dcc:	00040ebc 	xorhi	zero,zero,4154
   40dd0:	00040ebc 	xorhi	zero,zero,4154
   40dd4:	00040ebc 	xorhi	zero,zero,4154
   40dd8:	00040ebc 	xorhi	zero,zero,4154
   40ddc:	00040ebc 	xorhi	zero,zero,4154
   40de0:	00040ebc 	xorhi	zero,zero,4154
   40de4:	00040ebc 	xorhi	zero,zero,4154
   40de8:	00041514 	movui	zero,4180
   40dec:	00041b80 	call	41b8 <__alt_mem_onchip_memory-0x3be48>
   40df0:	00040ebc 	xorhi	zero,zero,4154
   40df4:	00041b80 	call	41b8 <__alt_mem_onchip_memory-0x3be48>
   40df8:	00040ebc 	xorhi	zero,zero,4154
   40dfc:	00040ebc 	xorhi	zero,zero,4154
   40e00:	00040ebc 	xorhi	zero,zero,4154
   40e04:	00040ebc 	xorhi	zero,zero,4154
   40e08:	00041ce4 	muli	zero,zero,4211
   40e0c:	00040ebc 	xorhi	zero,zero,4154
   40e10:	00040ebc 	xorhi	zero,zero,4154
   40e14:	000415c8 	cmpgei	zero,zero,4183
   40e18:	00040ebc 	xorhi	zero,zero,4154
   40e1c:	00040ebc 	xorhi	zero,zero,4154
   40e20:	00040ebc 	xorhi	zero,zero,4154
   40e24:	00040ebc 	xorhi	zero,zero,4154
   40e28:	00040ebc 	xorhi	zero,zero,4154
   40e2c:	00041614 	movui	zero,4184
   40e30:	00040ebc 	xorhi	zero,zero,4154
   40e34:	00040ebc 	xorhi	zero,zero,4154
   40e38:	00041c34 	movhi	zero,4208
   40e3c:	00040ebc 	xorhi	zero,zero,4154
   40e40:	00040ebc 	xorhi	zero,zero,4154
   40e44:	00040ebc 	xorhi	zero,zero,4154
   40e48:	00040ebc 	xorhi	zero,zero,4154
   40e4c:	00040ebc 	xorhi	zero,zero,4154
   40e50:	00040ebc 	xorhi	zero,zero,4154
   40e54:	00040ebc 	xorhi	zero,zero,4154
   40e58:	00040ebc 	xorhi	zero,zero,4154
   40e5c:	00040ebc 	xorhi	zero,zero,4154
   40e60:	00040ebc 	xorhi	zero,zero,4154
   40e64:	00041c08 	cmpgei	zero,zero,4208
   40e68:	00041520 	cmpeqi	zero,zero,4180
   40e6c:	00041b80 	call	41b8 <__alt_mem_onchip_memory-0x3be48>
   40e70:	00041b80 	call	41b8 <__alt_mem_onchip_memory-0x3be48>
   40e74:	00041b80 	call	41b8 <__alt_mem_onchip_memory-0x3be48>
   40e78:	00041b6c 	andhi	zero,zero,4205
   40e7c:	00041520 	cmpeqi	zero,zero,4180
   40e80:	00040ebc 	xorhi	zero,zero,4154
   40e84:	00040ebc 	xorhi	zero,zero,4154
   40e88:	00041af4 	movhi	zero,4203
   40e8c:	00040ebc 	xorhi	zero,zero,4154
   40e90:	00041ac4 	movi	zero,4203
   40e94:	000415d4 	movui	zero,4183
   40e98:	00041b24 	muli	zero,zero,4204
   40e9c:	00041b10 	cmplti	zero,zero,4204
   40ea0:	00040ebc 	xorhi	zero,zero,4154
   40ea4:	00041da0 	cmpeqi	zero,zero,4214
   40ea8:	00040ebc 	xorhi	zero,zero,4154
   40eac:	00041620 	cmpeqi	zero,zero,4184
   40eb0:	00040ebc 	xorhi	zero,zero,4154
   40eb4:	00040ebc 	xorhi	zero,zero,4154
   40eb8:	00041c98 	cmpnei	zero,zero,4210
   40ebc:	d9014d17 	ldw	r4,1332(sp)
   40ec0:	2000ce26 	beq	r4,zero,411fc <___vfprintf_internal_r+0x6d4>
   40ec4:	01400044 	movi	r5,1
   40ec8:	d9800f04 	addi	r6,sp,60
   40ecc:	d9c14015 	stw	r7,1280(sp)
   40ed0:	d9414515 	stw	r5,1300(sp)
   40ed4:	d9814115 	stw	r6,1284(sp)
   40ed8:	280f883a 	mov	r7,r5
   40edc:	d9000f05 	stb	r4,60(sp)
   40ee0:	d8000405 	stb	zero,16(sp)
   40ee4:	d8014615 	stw	zero,1304(sp)
   40ee8:	d8c14c17 	ldw	r3,1328(sp)
   40eec:	1880008c 	andi	r2,r3,2
   40ef0:	1005003a 	cmpeq	r2,r2,zero
   40ef4:	d8815015 	stw	r2,1344(sp)
   40ef8:	1000031e 	bne	r2,zero,40f08 <___vfprintf_internal_r+0x3e0>
   40efc:	d9014517 	ldw	r4,1300(sp)
   40f00:	21000084 	addi	r4,r4,2
   40f04:	d9014515 	stw	r4,1300(sp)
   40f08:	d9414c17 	ldw	r5,1328(sp)
   40f0c:	2940210c 	andi	r5,r5,132
   40f10:	d9414e15 	stw	r5,1336(sp)
   40f14:	28002d1e 	bne	r5,zero,40fcc <___vfprintf_internal_r+0x4a4>
   40f18:	d9814a17 	ldw	r6,1320(sp)
   40f1c:	d8814517 	ldw	r2,1300(sp)
   40f20:	30a1c83a 	sub	r16,r6,r2
   40f24:	0400290e 	bge	zero,r16,40fcc <___vfprintf_internal_r+0x4a4>
   40f28:	00800404 	movi	r2,16
   40f2c:	1404580e 	bge	r2,r16,42090 <___vfprintf_internal_r+0x1568>
   40f30:	dc800e17 	ldw	r18,56(sp)
   40f34:	dc400d17 	ldw	r17,52(sp)
   40f38:	1027883a 	mov	r19,r2
   40f3c:	07100034 	movhi	fp,16384
   40f40:	e7002e84 	addi	fp,fp,186
   40f44:	050001c4 	movi	r20,7
   40f48:	00000306 	br	40f58 <___vfprintf_internal_r+0x430>
   40f4c:	843ffc04 	addi	r16,r16,-16
   40f50:	ad400204 	addi	r21,r21,8
   40f54:	9c00130e 	bge	r19,r16,40fa4 <___vfprintf_internal_r+0x47c>
   40f58:	94800404 	addi	r18,r18,16
   40f5c:	8c400044 	addi	r17,r17,1
   40f60:	af000015 	stw	fp,0(r21)
   40f64:	acc00115 	stw	r19,4(r21)
   40f68:	dc800e15 	stw	r18,56(sp)
   40f6c:	dc400d15 	stw	r17,52(sp)
   40f70:	a47ff60e 	bge	r20,r17,40f4c <___vfprintf_internal_r+0x424>
   40f74:	d9014f17 	ldw	r4,1340(sp)
   40f78:	b00b883a 	mov	r5,r22
   40f7c:	d9800c04 	addi	r6,sp,48
   40f80:	d9c15115 	stw	r7,1348(sp)
   40f84:	0040ad00 	call	40ad0 <__sprint_r>
   40f88:	d9c15117 	ldw	r7,1348(sp)
   40f8c:	10009e1e 	bne	r2,zero,41208 <___vfprintf_internal_r+0x6e0>
   40f90:	843ffc04 	addi	r16,r16,-16
   40f94:	dc800e17 	ldw	r18,56(sp)
   40f98:	dc400d17 	ldw	r17,52(sp)
   40f9c:	dd401904 	addi	r21,sp,100
   40fa0:	9c3fed16 	blt	r19,r16,40f58 <___vfprintf_internal_r+0x430>
   40fa4:	9425883a 	add	r18,r18,r16
   40fa8:	8c400044 	addi	r17,r17,1
   40fac:	008001c4 	movi	r2,7
   40fb0:	af000015 	stw	fp,0(r21)
   40fb4:	ac000115 	stw	r16,4(r21)
   40fb8:	dc800e15 	stw	r18,56(sp)
   40fbc:	dc400d15 	stw	r17,52(sp)
   40fc0:	1441f516 	blt	r2,r17,41798 <___vfprintf_internal_r+0xc70>
   40fc4:	ad400204 	addi	r21,r21,8
   40fc8:	00000206 	br	40fd4 <___vfprintf_internal_r+0x4ac>
   40fcc:	dc800e17 	ldw	r18,56(sp)
   40fd0:	dc400d17 	ldw	r17,52(sp)
   40fd4:	d8800407 	ldb	r2,16(sp)
   40fd8:	10000b26 	beq	r2,zero,41008 <___vfprintf_internal_r+0x4e0>
   40fdc:	00800044 	movi	r2,1
   40fe0:	94800044 	addi	r18,r18,1
   40fe4:	8c400044 	addi	r17,r17,1
   40fe8:	a8800115 	stw	r2,4(r21)
   40fec:	d8c00404 	addi	r3,sp,16
   40ff0:	008001c4 	movi	r2,7
   40ff4:	a8c00015 	stw	r3,0(r21)
   40ff8:	dc800e15 	stw	r18,56(sp)
   40ffc:	dc400d15 	stw	r17,52(sp)
   41000:	1441da16 	blt	r2,r17,4176c <___vfprintf_internal_r+0xc44>
   41004:	ad400204 	addi	r21,r21,8
   41008:	d9015017 	ldw	r4,1344(sp)
   4100c:	20000b1e 	bne	r4,zero,4103c <___vfprintf_internal_r+0x514>
   41010:	d8800444 	addi	r2,sp,17
   41014:	94800084 	addi	r18,r18,2
   41018:	8c400044 	addi	r17,r17,1
   4101c:	a8800015 	stw	r2,0(r21)
   41020:	00c00084 	movi	r3,2
   41024:	008001c4 	movi	r2,7
   41028:	a8c00115 	stw	r3,4(r21)
   4102c:	dc800e15 	stw	r18,56(sp)
   41030:	dc400d15 	stw	r17,52(sp)
   41034:	1441c216 	blt	r2,r17,41740 <___vfprintf_internal_r+0xc18>
   41038:	ad400204 	addi	r21,r21,8
   4103c:	d9414e17 	ldw	r5,1336(sp)
   41040:	00802004 	movi	r2,128
   41044:	2880b126 	beq	r5,r2,4130c <___vfprintf_internal_r+0x7e4>
   41048:	d8c14617 	ldw	r3,1304(sp)
   4104c:	19e1c83a 	sub	r16,r3,r7
   41050:	0400260e 	bge	zero,r16,410ec <___vfprintf_internal_r+0x5c4>
   41054:	00800404 	movi	r2,16
   41058:	1403c90e 	bge	r2,r16,41f80 <___vfprintf_internal_r+0x1458>
   4105c:	1027883a 	mov	r19,r2
   41060:	07100034 	movhi	fp,16384
   41064:	e7002a84 	addi	fp,fp,170
   41068:	050001c4 	movi	r20,7
   4106c:	00000306 	br	4107c <___vfprintf_internal_r+0x554>
   41070:	843ffc04 	addi	r16,r16,-16
   41074:	ad400204 	addi	r21,r21,8
   41078:	9c00130e 	bge	r19,r16,410c8 <___vfprintf_internal_r+0x5a0>
   4107c:	94800404 	addi	r18,r18,16
   41080:	8c400044 	addi	r17,r17,1
   41084:	af000015 	stw	fp,0(r21)
   41088:	acc00115 	stw	r19,4(r21)
   4108c:	dc800e15 	stw	r18,56(sp)
   41090:	dc400d15 	stw	r17,52(sp)
   41094:	a47ff60e 	bge	r20,r17,41070 <___vfprintf_internal_r+0x548>
   41098:	d9014f17 	ldw	r4,1340(sp)
   4109c:	b00b883a 	mov	r5,r22
   410a0:	d9800c04 	addi	r6,sp,48
   410a4:	d9c15115 	stw	r7,1348(sp)
   410a8:	0040ad00 	call	40ad0 <__sprint_r>
   410ac:	d9c15117 	ldw	r7,1348(sp)
   410b0:	1000551e 	bne	r2,zero,41208 <___vfprintf_internal_r+0x6e0>
   410b4:	843ffc04 	addi	r16,r16,-16
   410b8:	dc800e17 	ldw	r18,56(sp)
   410bc:	dc400d17 	ldw	r17,52(sp)
   410c0:	dd401904 	addi	r21,sp,100
   410c4:	9c3fed16 	blt	r19,r16,4107c <___vfprintf_internal_r+0x554>
   410c8:	9425883a 	add	r18,r18,r16
   410cc:	8c400044 	addi	r17,r17,1
   410d0:	008001c4 	movi	r2,7
   410d4:	af000015 	stw	fp,0(r21)
   410d8:	ac000115 	stw	r16,4(r21)
   410dc:	dc800e15 	stw	r18,56(sp)
   410e0:	dc400d15 	stw	r17,52(sp)
   410e4:	14418216 	blt	r2,r17,416f0 <___vfprintf_internal_r+0xbc8>
   410e8:	ad400204 	addi	r21,r21,8
   410ec:	d9014c17 	ldw	r4,1328(sp)
   410f0:	2080400c 	andi	r2,r4,256
   410f4:	10004a1e 	bne	r2,zero,41220 <___vfprintf_internal_r+0x6f8>
   410f8:	d9414117 	ldw	r5,1284(sp)
   410fc:	91e5883a 	add	r18,r18,r7
   41100:	8c400044 	addi	r17,r17,1
   41104:	008001c4 	movi	r2,7
   41108:	a9400015 	stw	r5,0(r21)
   4110c:	a9c00115 	stw	r7,4(r21)
   41110:	dc800e15 	stw	r18,56(sp)
   41114:	dc400d15 	stw	r17,52(sp)
   41118:	14416716 	blt	r2,r17,416b8 <___vfprintf_internal_r+0xb90>
   4111c:	a8c00204 	addi	r3,r21,8
   41120:	d9814c17 	ldw	r6,1328(sp)
   41124:	3080010c 	andi	r2,r6,4
   41128:	10002826 	beq	r2,zero,411cc <___vfprintf_internal_r+0x6a4>
   4112c:	d8814a17 	ldw	r2,1320(sp)
   41130:	d9014517 	ldw	r4,1300(sp)
   41134:	1121c83a 	sub	r16,r2,r4
   41138:	0400240e 	bge	zero,r16,411cc <___vfprintf_internal_r+0x6a4>
   4113c:	00800404 	movi	r2,16
   41140:	14044f0e 	bge	r2,r16,42280 <___vfprintf_internal_r+0x1758>
   41144:	dc400d17 	ldw	r17,52(sp)
   41148:	1027883a 	mov	r19,r2
   4114c:	07100034 	movhi	fp,16384
   41150:	e7002e84 	addi	fp,fp,186
   41154:	050001c4 	movi	r20,7
   41158:	00000306 	br	41168 <___vfprintf_internal_r+0x640>
   4115c:	843ffc04 	addi	r16,r16,-16
   41160:	18c00204 	addi	r3,r3,8
   41164:	9c00110e 	bge	r19,r16,411ac <___vfprintf_internal_r+0x684>
   41168:	94800404 	addi	r18,r18,16
   4116c:	8c400044 	addi	r17,r17,1
   41170:	1f000015 	stw	fp,0(r3)
   41174:	1cc00115 	stw	r19,4(r3)
   41178:	dc800e15 	stw	r18,56(sp)
   4117c:	dc400d15 	stw	r17,52(sp)
   41180:	a47ff60e 	bge	r20,r17,4115c <___vfprintf_internal_r+0x634>
   41184:	d9014f17 	ldw	r4,1340(sp)
   41188:	b00b883a 	mov	r5,r22
   4118c:	d9800c04 	addi	r6,sp,48
   41190:	0040ad00 	call	40ad0 <__sprint_r>
   41194:	10001c1e 	bne	r2,zero,41208 <___vfprintf_internal_r+0x6e0>
   41198:	843ffc04 	addi	r16,r16,-16
   4119c:	dc800e17 	ldw	r18,56(sp)
   411a0:	dc400d17 	ldw	r17,52(sp)
   411a4:	d8c01904 	addi	r3,sp,100
   411a8:	9c3fef16 	blt	r19,r16,41168 <___vfprintf_internal_r+0x640>
   411ac:	9425883a 	add	r18,r18,r16
   411b0:	8c400044 	addi	r17,r17,1
   411b4:	008001c4 	movi	r2,7
   411b8:	1f000015 	stw	fp,0(r3)
   411bc:	1c000115 	stw	r16,4(r3)
   411c0:	dc800e15 	stw	r18,56(sp)
   411c4:	dc400d15 	stw	r17,52(sp)
   411c8:	1440cb16 	blt	r2,r17,414f8 <___vfprintf_internal_r+0x9d0>
   411cc:	d8814a17 	ldw	r2,1320(sp)
   411d0:	d9414517 	ldw	r5,1300(sp)
   411d4:	1140010e 	bge	r2,r5,411dc <___vfprintf_internal_r+0x6b4>
   411d8:	2805883a 	mov	r2,r5
   411dc:	d9814b17 	ldw	r6,1324(sp)
   411e0:	308d883a 	add	r6,r6,r2
   411e4:	d9814b15 	stw	r6,1324(sp)
   411e8:	90013b1e 	bne	r18,zero,416d8 <___vfprintf_internal_r+0xbb0>
   411ec:	d9c14017 	ldw	r7,1280(sp)
   411f0:	dd401904 	addi	r21,sp,100
   411f4:	d8000d15 	stw	zero,52(sp)
   411f8:	003ea706 	br	40c98 <___vfprintf_internal_r+0x170>
   411fc:	d8800e17 	ldw	r2,56(sp)
   41200:	10053f1e 	bne	r2,zero,42700 <___vfprintf_internal_r+0x1bd8>
   41204:	d8000d15 	stw	zero,52(sp)
   41208:	b080030b 	ldhu	r2,12(r22)
   4120c:	1080100c 	andi	r2,r2,64
   41210:	103e8726 	beq	r2,zero,40c30 <___vfprintf_internal_r+0x108>
   41214:	00bfffc4 	movi	r2,-1
   41218:	d8814b15 	stw	r2,1324(sp)
   4121c:	003e8406 	br	40c30 <___vfprintf_internal_r+0x108>
   41220:	d9814d17 	ldw	r6,1332(sp)
   41224:	00801944 	movi	r2,101
   41228:	11806e16 	blt	r2,r6,413e4 <___vfprintf_internal_r+0x8bc>
   4122c:	d9414717 	ldw	r5,1308(sp)
   41230:	00c00044 	movi	r3,1
   41234:	1943430e 	bge	r3,r5,41f44 <___vfprintf_internal_r+0x141c>
   41238:	d8814117 	ldw	r2,1284(sp)
   4123c:	94800044 	addi	r18,r18,1
   41240:	8c400044 	addi	r17,r17,1
   41244:	a8800015 	stw	r2,0(r21)
   41248:	008001c4 	movi	r2,7
   4124c:	a8c00115 	stw	r3,4(r21)
   41250:	dc800e15 	stw	r18,56(sp)
   41254:	dc400d15 	stw	r17,52(sp)
   41258:	1441ca16 	blt	r2,r17,41984 <___vfprintf_internal_r+0xe5c>
   4125c:	a8c00204 	addi	r3,r21,8
   41260:	d9014917 	ldw	r4,1316(sp)
   41264:	00800044 	movi	r2,1
   41268:	94800044 	addi	r18,r18,1
   4126c:	8c400044 	addi	r17,r17,1
   41270:	18800115 	stw	r2,4(r3)
   41274:	008001c4 	movi	r2,7
   41278:	19000015 	stw	r4,0(r3)
   4127c:	dc800e15 	stw	r18,56(sp)
   41280:	dc400d15 	stw	r17,52(sp)
   41284:	1441b616 	blt	r2,r17,41960 <___vfprintf_internal_r+0xe38>
   41288:	1cc00204 	addi	r19,r3,8
   4128c:	d9014217 	ldw	r4,1288(sp)
   41290:	d9414317 	ldw	r5,1292(sp)
   41294:	000d883a 	mov	r6,zero
   41298:	000f883a 	mov	r7,zero
   4129c:	00493680 	call	49368 <__nedf2>
   412a0:	10017426 	beq	r2,zero,41874 <___vfprintf_internal_r+0xd4c>
   412a4:	d9414717 	ldw	r5,1308(sp)
   412a8:	d9814117 	ldw	r6,1284(sp)
   412ac:	8c400044 	addi	r17,r17,1
   412b0:	2c85883a 	add	r2,r5,r18
   412b4:	14bfffc4 	addi	r18,r2,-1
   412b8:	28bfffc4 	addi	r2,r5,-1
   412bc:	30c00044 	addi	r3,r6,1
   412c0:	98800115 	stw	r2,4(r19)
   412c4:	008001c4 	movi	r2,7
   412c8:	98c00015 	stw	r3,0(r19)
   412cc:	dc800e15 	stw	r18,56(sp)
   412d0:	dc400d15 	stw	r17,52(sp)
   412d4:	14418e16 	blt	r2,r17,41910 <___vfprintf_internal_r+0xde8>
   412d8:	9cc00204 	addi	r19,r19,8
   412dc:	d9414817 	ldw	r5,1312(sp)
   412e0:	d8800804 	addi	r2,sp,32
   412e4:	8c400044 	addi	r17,r17,1
   412e8:	9165883a 	add	r18,r18,r5
   412ec:	98800015 	stw	r2,0(r19)
   412f0:	008001c4 	movi	r2,7
   412f4:	99400115 	stw	r5,4(r19)
   412f8:	dc800e15 	stw	r18,56(sp)
   412fc:	dc400d15 	stw	r17,52(sp)
   41300:	1440ed16 	blt	r2,r17,416b8 <___vfprintf_internal_r+0xb90>
   41304:	98c00204 	addi	r3,r19,8
   41308:	003f8506 	br	41120 <___vfprintf_internal_r+0x5f8>
   4130c:	d9814a17 	ldw	r6,1320(sp)
   41310:	d8814517 	ldw	r2,1300(sp)
   41314:	30a1c83a 	sub	r16,r6,r2
   41318:	043f4b0e 	bge	zero,r16,41048 <___vfprintf_internal_r+0x520>
   4131c:	00800404 	movi	r2,16
   41320:	1404340e 	bge	r2,r16,423f4 <___vfprintf_internal_r+0x18cc>
   41324:	1027883a 	mov	r19,r2
   41328:	07100034 	movhi	fp,16384
   4132c:	e7002a84 	addi	fp,fp,170
   41330:	050001c4 	movi	r20,7
   41334:	00000306 	br	41344 <___vfprintf_internal_r+0x81c>
   41338:	843ffc04 	addi	r16,r16,-16
   4133c:	ad400204 	addi	r21,r21,8
   41340:	9c00130e 	bge	r19,r16,41390 <___vfprintf_internal_r+0x868>
   41344:	94800404 	addi	r18,r18,16
   41348:	8c400044 	addi	r17,r17,1
   4134c:	af000015 	stw	fp,0(r21)
   41350:	acc00115 	stw	r19,4(r21)
   41354:	dc800e15 	stw	r18,56(sp)
   41358:	dc400d15 	stw	r17,52(sp)
   4135c:	a47ff60e 	bge	r20,r17,41338 <___vfprintf_internal_r+0x810>
   41360:	d9014f17 	ldw	r4,1340(sp)
   41364:	b00b883a 	mov	r5,r22
   41368:	d9800c04 	addi	r6,sp,48
   4136c:	d9c15115 	stw	r7,1348(sp)
   41370:	0040ad00 	call	40ad0 <__sprint_r>
   41374:	d9c15117 	ldw	r7,1348(sp)
   41378:	103fa31e 	bne	r2,zero,41208 <___vfprintf_internal_r+0x6e0>
   4137c:	843ffc04 	addi	r16,r16,-16
   41380:	dc800e17 	ldw	r18,56(sp)
   41384:	dc400d17 	ldw	r17,52(sp)
   41388:	dd401904 	addi	r21,sp,100
   4138c:	9c3fed16 	blt	r19,r16,41344 <___vfprintf_internal_r+0x81c>
   41390:	9425883a 	add	r18,r18,r16
   41394:	8c400044 	addi	r17,r17,1
   41398:	008001c4 	movi	r2,7
   4139c:	af000015 	stw	fp,0(r21)
   413a0:	ac000115 	stw	r16,4(r21)
   413a4:	dc800e15 	stw	r18,56(sp)
   413a8:	dc400d15 	stw	r17,52(sp)
   413ac:	14416116 	blt	r2,r17,41934 <___vfprintf_internal_r+0xe0c>
   413b0:	ad400204 	addi	r21,r21,8
   413b4:	003f2406 	br	41048 <___vfprintf_internal_r+0x520>
   413b8:	d9014f17 	ldw	r4,1340(sp)
   413bc:	00445980 	call	44598 <__sinit>
   413c0:	d9c15117 	ldw	r7,1348(sp)
   413c4:	003def06 	br	40b84 <___vfprintf_internal_r+0x5c>
   413c8:	d9014f17 	ldw	r4,1340(sp)
   413cc:	b00b883a 	mov	r5,r22
   413d0:	d9c15115 	stw	r7,1348(sp)
   413d4:	00429f80 	call	429f8 <__swsetup_r>
   413d8:	d9c15117 	ldw	r7,1348(sp)
   413dc:	103dee26 	beq	r2,zero,40b98 <___vfprintf_internal_r+0x70>
   413e0:	003f8c06 	br	41214 <___vfprintf_internal_r+0x6ec>
   413e4:	d9014217 	ldw	r4,1288(sp)
   413e8:	d9414317 	ldw	r5,1292(sp)
   413ec:	000d883a 	mov	r6,zero
   413f0:	000f883a 	mov	r7,zero
   413f4:	00492e00 	call	492e0 <__eqdf2>
   413f8:	1000f21e 	bne	r2,zero,417c4 <___vfprintf_internal_r+0xc9c>
   413fc:	00900034 	movhi	r2,16384
   41400:	10802a04 	addi	r2,r2,168
   41404:	94800044 	addi	r18,r18,1
   41408:	8c400044 	addi	r17,r17,1
   4140c:	a8800015 	stw	r2,0(r21)
   41410:	00c00044 	movi	r3,1
   41414:	008001c4 	movi	r2,7
   41418:	a8c00115 	stw	r3,4(r21)
   4141c:	dc800e15 	stw	r18,56(sp)
   41420:	dc400d15 	stw	r17,52(sp)
   41424:	1442fa16 	blt	r2,r17,42010 <___vfprintf_internal_r+0x14e8>
   41428:	a8c00204 	addi	r3,r21,8
   4142c:	d8800517 	ldw	r2,20(sp)
   41430:	d9014717 	ldw	r4,1308(sp)
   41434:	11015c0e 	bge	r2,r4,419a8 <___vfprintf_internal_r+0xe80>
   41438:	dc400d17 	ldw	r17,52(sp)
   4143c:	d9814917 	ldw	r6,1316(sp)
   41440:	00800044 	movi	r2,1
   41444:	94800044 	addi	r18,r18,1
   41448:	8c400044 	addi	r17,r17,1
   4144c:	18800115 	stw	r2,4(r3)
   41450:	008001c4 	movi	r2,7
   41454:	19800015 	stw	r6,0(r3)
   41458:	dc800e15 	stw	r18,56(sp)
   4145c:	dc400d15 	stw	r17,52(sp)
   41460:	14431016 	blt	r2,r17,420a4 <___vfprintf_internal_r+0x157c>
   41464:	18c00204 	addi	r3,r3,8
   41468:	d8814717 	ldw	r2,1308(sp)
   4146c:	143fffc4 	addi	r16,r2,-1
   41470:	043f2b0e 	bge	zero,r16,41120 <___vfprintf_internal_r+0x5f8>
   41474:	00800404 	movi	r2,16
   41478:	1402a20e 	bge	r2,r16,41f04 <___vfprintf_internal_r+0x13dc>
   4147c:	dc400d17 	ldw	r17,52(sp)
   41480:	1027883a 	mov	r19,r2
   41484:	07100034 	movhi	fp,16384
   41488:	e7002a84 	addi	fp,fp,170
   4148c:	050001c4 	movi	r20,7
   41490:	00000306 	br	414a0 <___vfprintf_internal_r+0x978>
   41494:	18c00204 	addi	r3,r3,8
   41498:	843ffc04 	addi	r16,r16,-16
   4149c:	9c029c0e 	bge	r19,r16,41f10 <___vfprintf_internal_r+0x13e8>
   414a0:	94800404 	addi	r18,r18,16
   414a4:	8c400044 	addi	r17,r17,1
   414a8:	1f000015 	stw	fp,0(r3)
   414ac:	1cc00115 	stw	r19,4(r3)
   414b0:	dc800e15 	stw	r18,56(sp)
   414b4:	dc400d15 	stw	r17,52(sp)
   414b8:	a47ff60e 	bge	r20,r17,41494 <___vfprintf_internal_r+0x96c>
   414bc:	d9014f17 	ldw	r4,1340(sp)
   414c0:	b00b883a 	mov	r5,r22
   414c4:	d9800c04 	addi	r6,sp,48
   414c8:	0040ad00 	call	40ad0 <__sprint_r>
   414cc:	103f4e1e 	bne	r2,zero,41208 <___vfprintf_internal_r+0x6e0>
   414d0:	dc800e17 	ldw	r18,56(sp)
   414d4:	dc400d17 	ldw	r17,52(sp)
   414d8:	d8c01904 	addi	r3,sp,100
   414dc:	003fee06 	br	41498 <___vfprintf_internal_r+0x970>
   414e0:	d8802c0b 	ldhu	r2,176(sp)
   414e4:	00ffffc4 	movi	r3,-1
   414e8:	d8c14b15 	stw	r3,1324(sp)
   414ec:	1080100c 	andi	r2,r2,64
   414f0:	103dcc1e 	bne	r2,zero,40c24 <___vfprintf_internal_r+0xfc>
   414f4:	003dce06 	br	40c30 <___vfprintf_internal_r+0x108>
   414f8:	d9014f17 	ldw	r4,1340(sp)
   414fc:	b00b883a 	mov	r5,r22
   41500:	d9800c04 	addi	r6,sp,48
   41504:	0040ad00 	call	40ad0 <__sprint_r>
   41508:	103f3f1e 	bne	r2,zero,41208 <___vfprintf_internal_r+0x6e0>
   4150c:	dc800e17 	ldw	r18,56(sp)
   41510:	003f2e06 	br	411cc <___vfprintf_internal_r+0x6a4>
   41514:	d9414c17 	ldw	r5,1328(sp)
   41518:	29400414 	ori	r5,r5,16
   4151c:	d9414c15 	stw	r5,1328(sp)
   41520:	d9814c17 	ldw	r6,1328(sp)
   41524:	3080080c 	andi	r2,r6,32
   41528:	10014f1e 	bne	r2,zero,41a68 <___vfprintf_internal_r+0xf40>
   4152c:	d8c14c17 	ldw	r3,1328(sp)
   41530:	1880040c 	andi	r2,r3,16
   41534:	1002ea1e 	bne	r2,zero,420e0 <___vfprintf_internal_r+0x15b8>
   41538:	d9014c17 	ldw	r4,1328(sp)
   4153c:	2080100c 	andi	r2,r4,64
   41540:	1002e726 	beq	r2,zero,420e0 <___vfprintf_internal_r+0x15b8>
   41544:	3880000f 	ldh	r2,0(r7)
   41548:	39c00104 	addi	r7,r7,4
   4154c:	d9c14015 	stw	r7,1280(sp)
   41550:	1023d7fa 	srai	r17,r2,31
   41554:	1021883a 	mov	r16,r2
   41558:	88037216 	blt	r17,zero,42324 <___vfprintf_internal_r+0x17fc>
   4155c:	01000044 	movi	r4,1
   41560:	98000416 	blt	r19,zero,41574 <___vfprintf_internal_r+0xa4c>
   41564:	d8c14c17 	ldw	r3,1328(sp)
   41568:	00bfdfc4 	movi	r2,-129
   4156c:	1886703a 	and	r3,r3,r2
   41570:	d8c14c15 	stw	r3,1328(sp)
   41574:	8444b03a 	or	r2,r16,r17
   41578:	1002261e 	bne	r2,zero,41e14 <___vfprintf_internal_r+0x12ec>
   4157c:	9802251e 	bne	r19,zero,41e14 <___vfprintf_internal_r+0x12ec>
   41580:	20803fcc 	andi	r2,r4,255
   41584:	10029b26 	beq	r2,zero,41ff4 <___vfprintf_internal_r+0x14cc>
   41588:	d8c01904 	addi	r3,sp,100
   4158c:	dd000f04 	addi	r20,sp,60
   41590:	d8c14115 	stw	r3,1284(sp)
   41594:	d8c14117 	ldw	r3,1284(sp)
   41598:	dcc14515 	stw	r19,1300(sp)
   4159c:	a0c5c83a 	sub	r2,r20,r3
   415a0:	11c00a04 	addi	r7,r2,40
   415a4:	99c0010e 	bge	r19,r7,415ac <___vfprintf_internal_r+0xa84>
   415a8:	d9c14515 	stw	r7,1300(sp)
   415ac:	dcc14615 	stw	r19,1304(sp)
   415b0:	d8800407 	ldb	r2,16(sp)
   415b4:	103e4c26 	beq	r2,zero,40ee8 <___vfprintf_internal_r+0x3c0>
   415b8:	d8814517 	ldw	r2,1300(sp)
   415bc:	10800044 	addi	r2,r2,1
   415c0:	d8814515 	stw	r2,1300(sp)
   415c4:	003e4806 	br	40ee8 <___vfprintf_internal_r+0x3c0>
   415c8:	d9814c17 	ldw	r6,1328(sp)
   415cc:	31800414 	ori	r6,r6,16
   415d0:	d9814c15 	stw	r6,1328(sp)
   415d4:	d8c14c17 	ldw	r3,1328(sp)
   415d8:	1880080c 	andi	r2,r3,32
   415dc:	1001271e 	bne	r2,zero,41a7c <___vfprintf_internal_r+0xf54>
   415e0:	d9414c17 	ldw	r5,1328(sp)
   415e4:	2880040c 	andi	r2,r5,16
   415e8:	1002b61e 	bne	r2,zero,420c4 <___vfprintf_internal_r+0x159c>
   415ec:	d9814c17 	ldw	r6,1328(sp)
   415f0:	3080100c 	andi	r2,r6,64
   415f4:	1002b326 	beq	r2,zero,420c4 <___vfprintf_internal_r+0x159c>
   415f8:	3c00000b 	ldhu	r16,0(r7)
   415fc:	0009883a 	mov	r4,zero
   41600:	39c00104 	addi	r7,r7,4
   41604:	0023883a 	mov	r17,zero
   41608:	d9c14015 	stw	r7,1280(sp)
   4160c:	d8000405 	stb	zero,16(sp)
   41610:	003fd306 	br	41560 <___vfprintf_internal_r+0xa38>
   41614:	d9014c17 	ldw	r4,1328(sp)
   41618:	21000414 	ori	r4,r4,16
   4161c:	d9014c15 	stw	r4,1328(sp)
   41620:	d9414c17 	ldw	r5,1328(sp)
   41624:	2880080c 	andi	r2,r5,32
   41628:	1001081e 	bne	r2,zero,41a4c <___vfprintf_internal_r+0xf24>
   4162c:	d8c14c17 	ldw	r3,1328(sp)
   41630:	1880040c 	andi	r2,r3,16
   41634:	1002b01e 	bne	r2,zero,420f8 <___vfprintf_internal_r+0x15d0>
   41638:	d9014c17 	ldw	r4,1328(sp)
   4163c:	2080100c 	andi	r2,r4,64
   41640:	1002ad26 	beq	r2,zero,420f8 <___vfprintf_internal_r+0x15d0>
   41644:	3c00000b 	ldhu	r16,0(r7)
   41648:	01000044 	movi	r4,1
   4164c:	39c00104 	addi	r7,r7,4
   41650:	0023883a 	mov	r17,zero
   41654:	d9c14015 	stw	r7,1280(sp)
   41658:	d8000405 	stb	zero,16(sp)
   4165c:	003fc006 	br	41560 <___vfprintf_internal_r+0xa38>
   41660:	d9014f17 	ldw	r4,1340(sp)
   41664:	b00b883a 	mov	r5,r22
   41668:	d9800c04 	addi	r6,sp,48
   4166c:	0040ad00 	call	40ad0 <__sprint_r>
   41670:	103ee51e 	bne	r2,zero,41208 <___vfprintf_internal_r+0x6e0>
   41674:	dc800e17 	ldw	r18,56(sp)
   41678:	d8c01904 	addi	r3,sp,100
   4167c:	d9814c17 	ldw	r6,1328(sp)
   41680:	3080004c 	andi	r2,r6,1
   41684:	1005003a 	cmpeq	r2,r2,zero
   41688:	103ea51e 	bne	r2,zero,41120 <___vfprintf_internal_r+0x5f8>
   4168c:	00800044 	movi	r2,1
   41690:	dc400d17 	ldw	r17,52(sp)
   41694:	18800115 	stw	r2,4(r3)
   41698:	d8814917 	ldw	r2,1316(sp)
   4169c:	94800044 	addi	r18,r18,1
   416a0:	8c400044 	addi	r17,r17,1
   416a4:	18800015 	stw	r2,0(r3)
   416a8:	008001c4 	movi	r2,7
   416ac:	dc800e15 	stw	r18,56(sp)
   416b0:	dc400d15 	stw	r17,52(sp)
   416b4:	14421e0e 	bge	r2,r17,41f30 <___vfprintf_internal_r+0x1408>
   416b8:	d9014f17 	ldw	r4,1340(sp)
   416bc:	b00b883a 	mov	r5,r22
   416c0:	d9800c04 	addi	r6,sp,48
   416c4:	0040ad00 	call	40ad0 <__sprint_r>
   416c8:	103ecf1e 	bne	r2,zero,41208 <___vfprintf_internal_r+0x6e0>
   416cc:	dc800e17 	ldw	r18,56(sp)
   416d0:	d8c01904 	addi	r3,sp,100
   416d4:	003e9206 	br	41120 <___vfprintf_internal_r+0x5f8>
   416d8:	d9014f17 	ldw	r4,1340(sp)
   416dc:	b00b883a 	mov	r5,r22
   416e0:	d9800c04 	addi	r6,sp,48
   416e4:	0040ad00 	call	40ad0 <__sprint_r>
   416e8:	103ec026 	beq	r2,zero,411ec <___vfprintf_internal_r+0x6c4>
   416ec:	003ec606 	br	41208 <___vfprintf_internal_r+0x6e0>
   416f0:	d9014f17 	ldw	r4,1340(sp)
   416f4:	b00b883a 	mov	r5,r22
   416f8:	d9800c04 	addi	r6,sp,48
   416fc:	d9c15115 	stw	r7,1348(sp)
   41700:	0040ad00 	call	40ad0 <__sprint_r>
   41704:	d9c15117 	ldw	r7,1348(sp)
   41708:	103ebf1e 	bne	r2,zero,41208 <___vfprintf_internal_r+0x6e0>
   4170c:	dc800e17 	ldw	r18,56(sp)
   41710:	dc400d17 	ldw	r17,52(sp)
   41714:	dd401904 	addi	r21,sp,100
   41718:	003e7406 	br	410ec <___vfprintf_internal_r+0x5c4>
   4171c:	d9014f17 	ldw	r4,1340(sp)
   41720:	b00b883a 	mov	r5,r22
   41724:	d9800c04 	addi	r6,sp,48
   41728:	d9c15115 	stw	r7,1348(sp)
   4172c:	0040ad00 	call	40ad0 <__sprint_r>
   41730:	d9c15117 	ldw	r7,1348(sp)
   41734:	103eb41e 	bne	r2,zero,41208 <___vfprintf_internal_r+0x6e0>
   41738:	dd401904 	addi	r21,sp,100
   4173c:	003d6d06 	br	40cf4 <___vfprintf_internal_r+0x1cc>
   41740:	d9014f17 	ldw	r4,1340(sp)
   41744:	b00b883a 	mov	r5,r22
   41748:	d9800c04 	addi	r6,sp,48
   4174c:	d9c15115 	stw	r7,1348(sp)
   41750:	0040ad00 	call	40ad0 <__sprint_r>
   41754:	d9c15117 	ldw	r7,1348(sp)
   41758:	103eab1e 	bne	r2,zero,41208 <___vfprintf_internal_r+0x6e0>
   4175c:	dc800e17 	ldw	r18,56(sp)
   41760:	dc400d17 	ldw	r17,52(sp)
   41764:	dd401904 	addi	r21,sp,100
   41768:	003e3406 	br	4103c <___vfprintf_internal_r+0x514>
   4176c:	d9014f17 	ldw	r4,1340(sp)
   41770:	b00b883a 	mov	r5,r22
   41774:	d9800c04 	addi	r6,sp,48
   41778:	d9c15115 	stw	r7,1348(sp)
   4177c:	0040ad00 	call	40ad0 <__sprint_r>
   41780:	d9c15117 	ldw	r7,1348(sp)
   41784:	103ea01e 	bne	r2,zero,41208 <___vfprintf_internal_r+0x6e0>
   41788:	dc800e17 	ldw	r18,56(sp)
   4178c:	dc400d17 	ldw	r17,52(sp)
   41790:	dd401904 	addi	r21,sp,100
   41794:	003e1c06 	br	41008 <___vfprintf_internal_r+0x4e0>
   41798:	d9014f17 	ldw	r4,1340(sp)
   4179c:	b00b883a 	mov	r5,r22
   417a0:	d9800c04 	addi	r6,sp,48
   417a4:	d9c15115 	stw	r7,1348(sp)
   417a8:	0040ad00 	call	40ad0 <__sprint_r>
   417ac:	d9c15117 	ldw	r7,1348(sp)
   417b0:	103e951e 	bne	r2,zero,41208 <___vfprintf_internal_r+0x6e0>
   417b4:	dc800e17 	ldw	r18,56(sp)
   417b8:	dc400d17 	ldw	r17,52(sp)
   417bc:	dd401904 	addi	r21,sp,100
   417c0:	003e0406 	br	40fd4 <___vfprintf_internal_r+0x4ac>
   417c4:	d9000517 	ldw	r4,20(sp)
   417c8:	0102520e 	bge	zero,r4,42114 <___vfprintf_internal_r+0x15ec>
   417cc:	d9814717 	ldw	r6,1308(sp)
   417d0:	21807a16 	blt	r4,r6,419bc <___vfprintf_internal_r+0xe94>
   417d4:	d8814117 	ldw	r2,1284(sp)
   417d8:	91a5883a 	add	r18,r18,r6
   417dc:	8c400044 	addi	r17,r17,1
   417e0:	a8800015 	stw	r2,0(r21)
   417e4:	008001c4 	movi	r2,7
   417e8:	a9800115 	stw	r6,4(r21)
   417ec:	dc800e15 	stw	r18,56(sp)
   417f0:	dc400d15 	stw	r17,52(sp)
   417f4:	1442f616 	blt	r2,r17,423d0 <___vfprintf_internal_r+0x18a8>
   417f8:	a8c00204 	addi	r3,r21,8
   417fc:	d9414717 	ldw	r5,1308(sp)
   41800:	2161c83a 	sub	r16,r4,r5
   41804:	043f9d0e 	bge	zero,r16,4167c <___vfprintf_internal_r+0xb54>
   41808:	00800404 	movi	r2,16
   4180c:	1402130e 	bge	r2,r16,4205c <___vfprintf_internal_r+0x1534>
   41810:	dc400d17 	ldw	r17,52(sp)
   41814:	1027883a 	mov	r19,r2
   41818:	07100034 	movhi	fp,16384
   4181c:	e7002a84 	addi	fp,fp,170
   41820:	050001c4 	movi	r20,7
   41824:	00000306 	br	41834 <___vfprintf_internal_r+0xd0c>
   41828:	18c00204 	addi	r3,r3,8
   4182c:	843ffc04 	addi	r16,r16,-16
   41830:	9c020d0e 	bge	r19,r16,42068 <___vfprintf_internal_r+0x1540>
   41834:	94800404 	addi	r18,r18,16
   41838:	8c400044 	addi	r17,r17,1
   4183c:	1f000015 	stw	fp,0(r3)
   41840:	1cc00115 	stw	r19,4(r3)
   41844:	dc800e15 	stw	r18,56(sp)
   41848:	dc400d15 	stw	r17,52(sp)
   4184c:	a47ff60e 	bge	r20,r17,41828 <___vfprintf_internal_r+0xd00>
   41850:	d9014f17 	ldw	r4,1340(sp)
   41854:	b00b883a 	mov	r5,r22
   41858:	d9800c04 	addi	r6,sp,48
   4185c:	0040ad00 	call	40ad0 <__sprint_r>
   41860:	103e691e 	bne	r2,zero,41208 <___vfprintf_internal_r+0x6e0>
   41864:	dc800e17 	ldw	r18,56(sp)
   41868:	dc400d17 	ldw	r17,52(sp)
   4186c:	d8c01904 	addi	r3,sp,100
   41870:	003fee06 	br	4182c <___vfprintf_internal_r+0xd04>
   41874:	d8814717 	ldw	r2,1308(sp)
   41878:	143fffc4 	addi	r16,r2,-1
   4187c:	043e970e 	bge	zero,r16,412dc <___vfprintf_internal_r+0x7b4>
   41880:	00800404 	movi	r2,16
   41884:	1400180e 	bge	r2,r16,418e8 <___vfprintf_internal_r+0xdc0>
   41888:	1029883a 	mov	r20,r2
   4188c:	07100034 	movhi	fp,16384
   41890:	e7002a84 	addi	fp,fp,170
   41894:	054001c4 	movi	r21,7
   41898:	00000306 	br	418a8 <___vfprintf_internal_r+0xd80>
   4189c:	9cc00204 	addi	r19,r19,8
   418a0:	843ffc04 	addi	r16,r16,-16
   418a4:	a400120e 	bge	r20,r16,418f0 <___vfprintf_internal_r+0xdc8>
   418a8:	94800404 	addi	r18,r18,16
   418ac:	8c400044 	addi	r17,r17,1
   418b0:	9f000015 	stw	fp,0(r19)
   418b4:	9d000115 	stw	r20,4(r19)
   418b8:	dc800e15 	stw	r18,56(sp)
   418bc:	dc400d15 	stw	r17,52(sp)
   418c0:	ac7ff60e 	bge	r21,r17,4189c <___vfprintf_internal_r+0xd74>
   418c4:	d9014f17 	ldw	r4,1340(sp)
   418c8:	b00b883a 	mov	r5,r22
   418cc:	d9800c04 	addi	r6,sp,48
   418d0:	0040ad00 	call	40ad0 <__sprint_r>
   418d4:	103e4c1e 	bne	r2,zero,41208 <___vfprintf_internal_r+0x6e0>
   418d8:	dc800e17 	ldw	r18,56(sp)
   418dc:	dc400d17 	ldw	r17,52(sp)
   418e0:	dcc01904 	addi	r19,sp,100
   418e4:	003fee06 	br	418a0 <___vfprintf_internal_r+0xd78>
   418e8:	07100034 	movhi	fp,16384
   418ec:	e7002a84 	addi	fp,fp,170
   418f0:	9425883a 	add	r18,r18,r16
   418f4:	8c400044 	addi	r17,r17,1
   418f8:	008001c4 	movi	r2,7
   418fc:	9f000015 	stw	fp,0(r19)
   41900:	9c000115 	stw	r16,4(r19)
   41904:	dc800e15 	stw	r18,56(sp)
   41908:	dc400d15 	stw	r17,52(sp)
   4190c:	147e720e 	bge	r2,r17,412d8 <___vfprintf_internal_r+0x7b0>
   41910:	d9014f17 	ldw	r4,1340(sp)
   41914:	b00b883a 	mov	r5,r22
   41918:	d9800c04 	addi	r6,sp,48
   4191c:	0040ad00 	call	40ad0 <__sprint_r>
   41920:	103e391e 	bne	r2,zero,41208 <___vfprintf_internal_r+0x6e0>
   41924:	dc800e17 	ldw	r18,56(sp)
   41928:	dc400d17 	ldw	r17,52(sp)
   4192c:	dcc01904 	addi	r19,sp,100
   41930:	003e6a06 	br	412dc <___vfprintf_internal_r+0x7b4>
   41934:	d9014f17 	ldw	r4,1340(sp)
   41938:	b00b883a 	mov	r5,r22
   4193c:	d9800c04 	addi	r6,sp,48
   41940:	d9c15115 	stw	r7,1348(sp)
   41944:	0040ad00 	call	40ad0 <__sprint_r>
   41948:	d9c15117 	ldw	r7,1348(sp)
   4194c:	103e2e1e 	bne	r2,zero,41208 <___vfprintf_internal_r+0x6e0>
   41950:	dc800e17 	ldw	r18,56(sp)
   41954:	dc400d17 	ldw	r17,52(sp)
   41958:	dd401904 	addi	r21,sp,100
   4195c:	003dba06 	br	41048 <___vfprintf_internal_r+0x520>
   41960:	d9014f17 	ldw	r4,1340(sp)
   41964:	b00b883a 	mov	r5,r22
   41968:	d9800c04 	addi	r6,sp,48
   4196c:	0040ad00 	call	40ad0 <__sprint_r>
   41970:	103e251e 	bne	r2,zero,41208 <___vfprintf_internal_r+0x6e0>
   41974:	dc800e17 	ldw	r18,56(sp)
   41978:	dc400d17 	ldw	r17,52(sp)
   4197c:	dcc01904 	addi	r19,sp,100
   41980:	003e4206 	br	4128c <___vfprintf_internal_r+0x764>
   41984:	d9014f17 	ldw	r4,1340(sp)
   41988:	b00b883a 	mov	r5,r22
   4198c:	d9800c04 	addi	r6,sp,48
   41990:	0040ad00 	call	40ad0 <__sprint_r>
   41994:	103e1c1e 	bne	r2,zero,41208 <___vfprintf_internal_r+0x6e0>
   41998:	dc800e17 	ldw	r18,56(sp)
   4199c:	dc400d17 	ldw	r17,52(sp)
   419a0:	d8c01904 	addi	r3,sp,100
   419a4:	003e2e06 	br	41260 <___vfprintf_internal_r+0x738>
   419a8:	d9414c17 	ldw	r5,1328(sp)
   419ac:	2880004c 	andi	r2,r5,1
   419b0:	1005003a 	cmpeq	r2,r2,zero
   419b4:	103dda1e 	bne	r2,zero,41120 <___vfprintf_internal_r+0x5f8>
   419b8:	003e9f06 	br	41438 <___vfprintf_internal_r+0x910>
   419bc:	d8c14117 	ldw	r3,1284(sp)
   419c0:	9125883a 	add	r18,r18,r4
   419c4:	8c400044 	addi	r17,r17,1
   419c8:	008001c4 	movi	r2,7
   419cc:	a8c00015 	stw	r3,0(r21)
   419d0:	a9000115 	stw	r4,4(r21)
   419d4:	dc800e15 	stw	r18,56(sp)
   419d8:	dc400d15 	stw	r17,52(sp)
   419dc:	14426616 	blt	r2,r17,42378 <___vfprintf_internal_r+0x1850>
   419e0:	a8c00204 	addi	r3,r21,8
   419e4:	d9414917 	ldw	r5,1316(sp)
   419e8:	00800044 	movi	r2,1
   419ec:	94800044 	addi	r18,r18,1
   419f0:	8c400044 	addi	r17,r17,1
   419f4:	18800115 	stw	r2,4(r3)
   419f8:	008001c4 	movi	r2,7
   419fc:	19400015 	stw	r5,0(r3)
   41a00:	dc800e15 	stw	r18,56(sp)
   41a04:	dc400d15 	stw	r17,52(sp)
   41a08:	2021883a 	mov	r16,r4
   41a0c:	14425016 	blt	r2,r17,42350 <___vfprintf_internal_r+0x1828>
   41a10:	19400204 	addi	r5,r3,8
   41a14:	d9814717 	ldw	r6,1308(sp)
   41a18:	8c400044 	addi	r17,r17,1
   41a1c:	dc400d15 	stw	r17,52(sp)
   41a20:	3107c83a 	sub	r3,r6,r4
   41a24:	d9014117 	ldw	r4,1284(sp)
   41a28:	90e5883a 	add	r18,r18,r3
   41a2c:	28c00115 	stw	r3,4(r5)
   41a30:	8105883a 	add	r2,r16,r4
   41a34:	28800015 	stw	r2,0(r5)
   41a38:	008001c4 	movi	r2,7
   41a3c:	dc800e15 	stw	r18,56(sp)
   41a40:	147f1d16 	blt	r2,r17,416b8 <___vfprintf_internal_r+0xb90>
   41a44:	28c00204 	addi	r3,r5,8
   41a48:	003db506 	br	41120 <___vfprintf_internal_r+0x5f8>
   41a4c:	3c000017 	ldw	r16,0(r7)
   41a50:	3c400117 	ldw	r17,4(r7)
   41a54:	39800204 	addi	r6,r7,8
   41a58:	01000044 	movi	r4,1
   41a5c:	d9814015 	stw	r6,1280(sp)
   41a60:	d8000405 	stb	zero,16(sp)
   41a64:	003ebe06 	br	41560 <___vfprintf_internal_r+0xa38>
   41a68:	3c000017 	ldw	r16,0(r7)
   41a6c:	3c400117 	ldw	r17,4(r7)
   41a70:	38800204 	addi	r2,r7,8
   41a74:	d8814015 	stw	r2,1280(sp)
   41a78:	003eb706 	br	41558 <___vfprintf_internal_r+0xa30>
   41a7c:	3c000017 	ldw	r16,0(r7)
   41a80:	3c400117 	ldw	r17,4(r7)
   41a84:	39000204 	addi	r4,r7,8
   41a88:	d9014015 	stw	r4,1280(sp)
   41a8c:	0009883a 	mov	r4,zero
   41a90:	d8000405 	stb	zero,16(sp)
   41a94:	003eb206 	br	41560 <___vfprintf_internal_r+0xa38>
   41a98:	38c00017 	ldw	r3,0(r7)
   41a9c:	39c00104 	addi	r7,r7,4
   41aa0:	d8c14a15 	stw	r3,1320(sp)
   41aa4:	1800d10e 	bge	r3,zero,41dec <___vfprintf_internal_r+0x12c4>
   41aa8:	00c7c83a 	sub	r3,zero,r3
   41aac:	d8c14a15 	stw	r3,1320(sp)
   41ab0:	d9014c17 	ldw	r4,1328(sp)
   41ab4:	b8c00007 	ldb	r3,0(r23)
   41ab8:	21000114 	ori	r4,r4,4
   41abc:	d9014c15 	stw	r4,1328(sp)
   41ac0:	003c9806 	br	40d24 <___vfprintf_internal_r+0x1fc>
   41ac4:	d9814c17 	ldw	r6,1328(sp)
   41ac8:	3080080c 	andi	r2,r6,32
   41acc:	1001f026 	beq	r2,zero,42290 <___vfprintf_internal_r+0x1768>
   41ad0:	d9014b17 	ldw	r4,1324(sp)
   41ad4:	38800017 	ldw	r2,0(r7)
   41ad8:	39c00104 	addi	r7,r7,4
   41adc:	d9c14015 	stw	r7,1280(sp)
   41ae0:	2007d7fa 	srai	r3,r4,31
   41ae4:	d9c14017 	ldw	r7,1280(sp)
   41ae8:	11000015 	stw	r4,0(r2)
   41aec:	10c00115 	stw	r3,4(r2)
   41af0:	003c6906 	br	40c98 <___vfprintf_internal_r+0x170>
   41af4:	b8c00007 	ldb	r3,0(r23)
   41af8:	00801b04 	movi	r2,108
   41afc:	18824f26 	beq	r3,r2,4243c <___vfprintf_internal_r+0x1914>
   41b00:	d9414c17 	ldw	r5,1328(sp)
   41b04:	29400414 	ori	r5,r5,16
   41b08:	d9414c15 	stw	r5,1328(sp)
   41b0c:	003c8506 	br	40d24 <___vfprintf_internal_r+0x1fc>
   41b10:	d9814c17 	ldw	r6,1328(sp)
   41b14:	b8c00007 	ldb	r3,0(r23)
   41b18:	31800814 	ori	r6,r6,32
   41b1c:	d9814c15 	stw	r6,1328(sp)
   41b20:	003c8006 	br	40d24 <___vfprintf_internal_r+0x1fc>
   41b24:	d8814c17 	ldw	r2,1328(sp)
   41b28:	3c000017 	ldw	r16,0(r7)
   41b2c:	00c01e04 	movi	r3,120
   41b30:	10800094 	ori	r2,r2,2
   41b34:	d8814c15 	stw	r2,1328(sp)
   41b38:	39c00104 	addi	r7,r7,4
   41b3c:	01500034 	movhi	r5,16384
   41b40:	29401304 	addi	r5,r5,76
   41b44:	00800c04 	movi	r2,48
   41b48:	0023883a 	mov	r17,zero
   41b4c:	01000084 	movi	r4,2
   41b50:	d9c14015 	stw	r7,1280(sp)
   41b54:	d8c14d15 	stw	r3,1332(sp)
   41b58:	d9414415 	stw	r5,1296(sp)
   41b5c:	d8800445 	stb	r2,17(sp)
   41b60:	d8c00485 	stb	r3,18(sp)
   41b64:	d8000405 	stb	zero,16(sp)
   41b68:	003e7d06 	br	41560 <___vfprintf_internal_r+0xa38>
   41b6c:	d8814c17 	ldw	r2,1328(sp)
   41b70:	b8c00007 	ldb	r3,0(r23)
   41b74:	10801014 	ori	r2,r2,64
   41b78:	d8814c15 	stw	r2,1328(sp)
   41b7c:	003c6906 	br	40d24 <___vfprintf_internal_r+0x1fc>
   41b80:	d9414c17 	ldw	r5,1328(sp)
   41b84:	2880020c 	andi	r2,r5,8
   41b88:	1001df26 	beq	r2,zero,42308 <___vfprintf_internal_r+0x17e0>
   41b8c:	39800017 	ldw	r6,0(r7)
   41b90:	38800204 	addi	r2,r7,8
   41b94:	d8814015 	stw	r2,1280(sp)
   41b98:	d9814215 	stw	r6,1288(sp)
   41b9c:	39c00117 	ldw	r7,4(r7)
   41ba0:	d9c14315 	stw	r7,1292(sp)
   41ba4:	d9014217 	ldw	r4,1288(sp)
   41ba8:	d9414317 	ldw	r5,1292(sp)
   41bac:	00474c80 	call	474c8 <__isinfd>
   41bb0:	10021726 	beq	r2,zero,42410 <___vfprintf_internal_r+0x18e8>
   41bb4:	d9014217 	ldw	r4,1288(sp)
   41bb8:	d9414317 	ldw	r5,1292(sp)
   41bbc:	000d883a 	mov	r6,zero
   41bc0:	000f883a 	mov	r7,zero
   41bc4:	00495000 	call	49500 <__ltdf2>
   41bc8:	1002ca16 	blt	r2,zero,426f4 <___vfprintf_internal_r+0x1bcc>
   41bcc:	d9414d17 	ldw	r5,1332(sp)
   41bd0:	008011c4 	movi	r2,71
   41bd4:	11420a16 	blt	r2,r5,42400 <___vfprintf_internal_r+0x18d8>
   41bd8:	01900034 	movhi	r6,16384
   41bdc:	31801804 	addi	r6,r6,96
   41be0:	d9814115 	stw	r6,1284(sp)
   41be4:	d9014c17 	ldw	r4,1328(sp)
   41be8:	00c000c4 	movi	r3,3
   41bec:	00bfdfc4 	movi	r2,-129
   41bf0:	2088703a 	and	r4,r4,r2
   41bf4:	180f883a 	mov	r7,r3
   41bf8:	d8c14515 	stw	r3,1300(sp)
   41bfc:	d9014c15 	stw	r4,1328(sp)
   41c00:	d8014615 	stw	zero,1304(sp)
   41c04:	003e6a06 	br	415b0 <___vfprintf_internal_r+0xa88>
   41c08:	38800017 	ldw	r2,0(r7)
   41c0c:	00c00044 	movi	r3,1
   41c10:	39c00104 	addi	r7,r7,4
   41c14:	d9c14015 	stw	r7,1280(sp)
   41c18:	d9000f04 	addi	r4,sp,60
   41c1c:	180f883a 	mov	r7,r3
   41c20:	d8c14515 	stw	r3,1300(sp)
   41c24:	d9014115 	stw	r4,1284(sp)
   41c28:	d8800f05 	stb	r2,60(sp)
   41c2c:	d8000405 	stb	zero,16(sp)
   41c30:	003cac06 	br	40ee4 <___vfprintf_internal_r+0x3bc>
   41c34:	01500034 	movhi	r5,16384
   41c38:	29401e04 	addi	r5,r5,120
   41c3c:	d9414415 	stw	r5,1296(sp)
   41c40:	d9814c17 	ldw	r6,1328(sp)
   41c44:	3080080c 	andi	r2,r6,32
   41c48:	1000f926 	beq	r2,zero,42030 <___vfprintf_internal_r+0x1508>
   41c4c:	3c000017 	ldw	r16,0(r7)
   41c50:	3c400117 	ldw	r17,4(r7)
   41c54:	38800204 	addi	r2,r7,8
   41c58:	d8814015 	stw	r2,1280(sp)
   41c5c:	d9414c17 	ldw	r5,1328(sp)
   41c60:	2880004c 	andi	r2,r5,1
   41c64:	1005003a 	cmpeq	r2,r2,zero
   41c68:	1000b31e 	bne	r2,zero,41f38 <___vfprintf_internal_r+0x1410>
   41c6c:	8444b03a 	or	r2,r16,r17
   41c70:	1000b126 	beq	r2,zero,41f38 <___vfprintf_internal_r+0x1410>
   41c74:	d9814d17 	ldw	r6,1332(sp)
   41c78:	29400094 	ori	r5,r5,2
   41c7c:	00800c04 	movi	r2,48
   41c80:	01000084 	movi	r4,2
   41c84:	d9414c15 	stw	r5,1328(sp)
   41c88:	d8800445 	stb	r2,17(sp)
   41c8c:	d9800485 	stb	r6,18(sp)
   41c90:	d8000405 	stb	zero,16(sp)
   41c94:	003e3206 	br	41560 <___vfprintf_internal_r+0xa38>
   41c98:	01900034 	movhi	r6,16384
   41c9c:	31801304 	addi	r6,r6,76
   41ca0:	d9814415 	stw	r6,1296(sp)
   41ca4:	003fe606 	br	41c40 <___vfprintf_internal_r+0x1118>
   41ca8:	00800ac4 	movi	r2,43
   41cac:	d8800405 	stb	r2,16(sp)
   41cb0:	b8c00007 	ldb	r3,0(r23)
   41cb4:	003c1b06 	br	40d24 <___vfprintf_internal_r+0x1fc>
   41cb8:	d8814c17 	ldw	r2,1328(sp)
   41cbc:	b8c00007 	ldb	r3,0(r23)
   41cc0:	10800054 	ori	r2,r2,1
   41cc4:	d8814c15 	stw	r2,1328(sp)
   41cc8:	003c1606 	br	40d24 <___vfprintf_internal_r+0x1fc>
   41ccc:	d8800407 	ldb	r2,16(sp)
   41cd0:	1000461e 	bne	r2,zero,41dec <___vfprintf_internal_r+0x12c4>
   41cd4:	00800804 	movi	r2,32
   41cd8:	d8800405 	stb	r2,16(sp)
   41cdc:	b8c00007 	ldb	r3,0(r23)
   41ce0:	003c1006 	br	40d24 <___vfprintf_internal_r+0x1fc>
   41ce4:	d9814c17 	ldw	r6,1328(sp)
   41ce8:	b8c00007 	ldb	r3,0(r23)
   41cec:	31800214 	ori	r6,r6,8
   41cf0:	d9814c15 	stw	r6,1328(sp)
   41cf4:	003c0b06 	br	40d24 <___vfprintf_internal_r+0x1fc>
   41cf8:	0007883a 	mov	r3,zero
   41cfc:	01000244 	movi	r4,9
   41d00:	188002a4 	muli	r2,r3,10
   41d04:	b8c00007 	ldb	r3,0(r23)
   41d08:	d9814d17 	ldw	r6,1332(sp)
   41d0c:	bdc00044 	addi	r23,r23,1
   41d10:	d8c14d15 	stw	r3,1332(sp)
   41d14:	d9414d17 	ldw	r5,1332(sp)
   41d18:	3085883a 	add	r2,r6,r2
   41d1c:	10fff404 	addi	r3,r2,-48
   41d20:	28bff404 	addi	r2,r5,-48
   41d24:	20bff62e 	bgeu	r4,r2,41d00 <___vfprintf_internal_r+0x11d8>
   41d28:	d8c14a15 	stw	r3,1320(sp)
   41d2c:	003bff06 	br	40d2c <___vfprintf_internal_r+0x204>
   41d30:	d9414c17 	ldw	r5,1328(sp)
   41d34:	b8c00007 	ldb	r3,0(r23)
   41d38:	29402014 	ori	r5,r5,128
   41d3c:	d9414c15 	stw	r5,1328(sp)
   41d40:	003bf806 	br	40d24 <___vfprintf_internal_r+0x1fc>
   41d44:	b8c00007 	ldb	r3,0(r23)
   41d48:	00800a84 	movi	r2,42
   41d4c:	bdc00044 	addi	r23,r23,1
   41d50:	18831526 	beq	r3,r2,429a8 <___vfprintf_internal_r+0x1e80>
   41d54:	d8c14d15 	stw	r3,1332(sp)
   41d58:	18bff404 	addi	r2,r3,-48
   41d5c:	00c00244 	movi	r3,9
   41d60:	18827836 	bltu	r3,r2,42744 <___vfprintf_internal_r+0x1c1c>
   41d64:	000d883a 	mov	r6,zero
   41d68:	308002a4 	muli	r2,r6,10
   41d6c:	b9800007 	ldb	r6,0(r23)
   41d70:	d9414d17 	ldw	r5,1332(sp)
   41d74:	bdc00044 	addi	r23,r23,1
   41d78:	d9814d15 	stw	r6,1332(sp)
   41d7c:	d9014d17 	ldw	r4,1332(sp)
   41d80:	1145883a 	add	r2,r2,r5
   41d84:	11bff404 	addi	r6,r2,-48
   41d88:	20bff404 	addi	r2,r4,-48
   41d8c:	18bff62e 	bgeu	r3,r2,41d68 <___vfprintf_internal_r+0x1240>
   41d90:	3027883a 	mov	r19,r6
   41d94:	303be50e 	bge	r6,zero,40d2c <___vfprintf_internal_r+0x204>
   41d98:	04ffffc4 	movi	r19,-1
   41d9c:	003be306 	br	40d2c <___vfprintf_internal_r+0x204>
   41da0:	d8000405 	stb	zero,16(sp)
   41da4:	39800017 	ldw	r6,0(r7)
   41da8:	39c00104 	addi	r7,r7,4
   41dac:	d9c14015 	stw	r7,1280(sp)
   41db0:	d9814115 	stw	r6,1284(sp)
   41db4:	3001c926 	beq	r6,zero,424dc <___vfprintf_internal_r+0x19b4>
   41db8:	98000e16 	blt	r19,zero,41df4 <___vfprintf_internal_r+0x12cc>
   41dbc:	d9014117 	ldw	r4,1284(sp)
   41dc0:	000b883a 	mov	r5,zero
   41dc4:	980d883a 	mov	r6,r19
   41dc8:	0045be40 	call	45be4 <memchr>
   41dcc:	10025926 	beq	r2,zero,42734 <___vfprintf_internal_r+0x1c0c>
   41dd0:	d8c14117 	ldw	r3,1284(sp)
   41dd4:	10cfc83a 	sub	r7,r2,r3
   41dd8:	99c19e16 	blt	r19,r7,42454 <___vfprintf_internal_r+0x192c>
   41ddc:	d9c14515 	stw	r7,1300(sp)
   41de0:	38000916 	blt	r7,zero,41e08 <___vfprintf_internal_r+0x12e0>
   41de4:	d8014615 	stw	zero,1304(sp)
   41de8:	003df106 	br	415b0 <___vfprintf_internal_r+0xa88>
   41dec:	b8c00007 	ldb	r3,0(r23)
   41df0:	003bcc06 	br	40d24 <___vfprintf_internal_r+0x1fc>
   41df4:	d9014117 	ldw	r4,1284(sp)
   41df8:	0040a5c0 	call	40a5c <strlen>
   41dfc:	d8814515 	stw	r2,1300(sp)
   41e00:	100f883a 	mov	r7,r2
   41e04:	103ff70e 	bge	r2,zero,41de4 <___vfprintf_internal_r+0x12bc>
   41e08:	d8014515 	stw	zero,1300(sp)
   41e0c:	d8014615 	stw	zero,1304(sp)
   41e10:	003de706 	br	415b0 <___vfprintf_internal_r+0xa88>
   41e14:	20c03fcc 	andi	r3,r4,255
   41e18:	00800044 	movi	r2,1
   41e1c:	18802d26 	beq	r3,r2,41ed4 <___vfprintf_internal_r+0x13ac>
   41e20:	18800e36 	bltu	r3,r2,41e5c <___vfprintf_internal_r+0x1334>
   41e24:	00800084 	movi	r2,2
   41e28:	1880fa26 	beq	r3,r2,42214 <___vfprintf_internal_r+0x16ec>
   41e2c:	01100034 	movhi	r4,16384
   41e30:	21002304 	addi	r4,r4,140
   41e34:	0040a5c0 	call	40a5c <strlen>
   41e38:	100f883a 	mov	r7,r2
   41e3c:	dcc14515 	stw	r19,1300(sp)
   41e40:	9880010e 	bge	r19,r2,41e48 <___vfprintf_internal_r+0x1320>
   41e44:	d8814515 	stw	r2,1300(sp)
   41e48:	00900034 	movhi	r2,16384
   41e4c:	10802304 	addi	r2,r2,140
   41e50:	dcc14615 	stw	r19,1304(sp)
   41e54:	d8814115 	stw	r2,1284(sp)
   41e58:	003dd506 	br	415b0 <___vfprintf_internal_r+0xa88>
   41e5c:	d9401904 	addi	r5,sp,100
   41e60:	dd000f04 	addi	r20,sp,60
   41e64:	d9414115 	stw	r5,1284(sp)
   41e68:	880a977a 	slli	r5,r17,29
   41e6c:	d9814117 	ldw	r6,1284(sp)
   41e70:	8004d0fa 	srli	r2,r16,3
   41e74:	8806d0fa 	srli	r3,r17,3
   41e78:	810001cc 	andi	r4,r16,7
   41e7c:	2884b03a 	or	r2,r5,r2
   41e80:	31bfffc4 	addi	r6,r6,-1
   41e84:	21000c04 	addi	r4,r4,48
   41e88:	d9814115 	stw	r6,1284(sp)
   41e8c:	10cab03a 	or	r5,r2,r3
   41e90:	31000005 	stb	r4,0(r6)
   41e94:	1021883a 	mov	r16,r2
   41e98:	1823883a 	mov	r17,r3
   41e9c:	283ff21e 	bne	r5,zero,41e68 <___vfprintf_internal_r+0x1340>
   41ea0:	d8c14c17 	ldw	r3,1328(sp)
   41ea4:	1880004c 	andi	r2,r3,1
   41ea8:	1005003a 	cmpeq	r2,r2,zero
   41eac:	103db91e 	bne	r2,zero,41594 <___vfprintf_internal_r+0xa6c>
   41eb0:	20803fcc 	andi	r2,r4,255
   41eb4:	1080201c 	xori	r2,r2,128
   41eb8:	10bfe004 	addi	r2,r2,-128
   41ebc:	00c00c04 	movi	r3,48
   41ec0:	10fdb426 	beq	r2,r3,41594 <___vfprintf_internal_r+0xa6c>
   41ec4:	31bfffc4 	addi	r6,r6,-1
   41ec8:	d9814115 	stw	r6,1284(sp)
   41ecc:	30c00005 	stb	r3,0(r6)
   41ed0:	003db006 	br	41594 <___vfprintf_internal_r+0xa6c>
   41ed4:	88800068 	cmpgeui	r2,r17,1
   41ed8:	10002c1e 	bne	r2,zero,41f8c <___vfprintf_internal_r+0x1464>
   41edc:	8800021e 	bne	r17,zero,41ee8 <___vfprintf_internal_r+0x13c0>
   41ee0:	00800244 	movi	r2,9
   41ee4:	14002936 	bltu	r2,r16,41f8c <___vfprintf_internal_r+0x1464>
   41ee8:	d90018c4 	addi	r4,sp,99
   41eec:	dd000f04 	addi	r20,sp,60
   41ef0:	d9014115 	stw	r4,1284(sp)
   41ef4:	d9014117 	ldw	r4,1284(sp)
   41ef8:	80800c04 	addi	r2,r16,48
   41efc:	20800005 	stb	r2,0(r4)
   41f00:	003da406 	br	41594 <___vfprintf_internal_r+0xa6c>
   41f04:	dc400d17 	ldw	r17,52(sp)
   41f08:	07100034 	movhi	fp,16384
   41f0c:	e7002a84 	addi	fp,fp,170
   41f10:	9425883a 	add	r18,r18,r16
   41f14:	8c400044 	addi	r17,r17,1
   41f18:	008001c4 	movi	r2,7
   41f1c:	1f000015 	stw	fp,0(r3)
   41f20:	1c000115 	stw	r16,4(r3)
   41f24:	dc800e15 	stw	r18,56(sp)
   41f28:	dc400d15 	stw	r17,52(sp)
   41f2c:	147de216 	blt	r2,r17,416b8 <___vfprintf_internal_r+0xb90>
   41f30:	18c00204 	addi	r3,r3,8
   41f34:	003c7a06 	br	41120 <___vfprintf_internal_r+0x5f8>
   41f38:	01000084 	movi	r4,2
   41f3c:	d8000405 	stb	zero,16(sp)
   41f40:	003d8706 	br	41560 <___vfprintf_internal_r+0xa38>
   41f44:	d9814c17 	ldw	r6,1328(sp)
   41f48:	30c4703a 	and	r2,r6,r3
   41f4c:	1005003a 	cmpeq	r2,r2,zero
   41f50:	103cb926 	beq	r2,zero,41238 <___vfprintf_internal_r+0x710>
   41f54:	d9014117 	ldw	r4,1284(sp)
   41f58:	94800044 	addi	r18,r18,1
   41f5c:	8c400044 	addi	r17,r17,1
   41f60:	008001c4 	movi	r2,7
   41f64:	a9000015 	stw	r4,0(r21)
   41f68:	a8c00115 	stw	r3,4(r21)
   41f6c:	dc800e15 	stw	r18,56(sp)
   41f70:	dc400d15 	stw	r17,52(sp)
   41f74:	147e6616 	blt	r2,r17,41910 <___vfprintf_internal_r+0xde8>
   41f78:	acc00204 	addi	r19,r21,8
   41f7c:	003cd706 	br	412dc <___vfprintf_internal_r+0x7b4>
   41f80:	07100034 	movhi	fp,16384
   41f84:	e7002a84 	addi	fp,fp,170
   41f88:	003c4f06 	br	410c8 <___vfprintf_internal_r+0x5a0>
   41f8c:	dd000f04 	addi	r20,sp,60
   41f90:	dc801904 	addi	r18,sp,100
   41f94:	8009883a 	mov	r4,r16
   41f98:	880b883a 	mov	r5,r17
   41f9c:	01800284 	movi	r6,10
   41fa0:	000f883a 	mov	r7,zero
   41fa4:	00482200 	call	48220 <__umoddi3>
   41fa8:	12000c04 	addi	r8,r2,48
   41fac:	94bfffc4 	addi	r18,r18,-1
   41fb0:	8009883a 	mov	r4,r16
   41fb4:	880b883a 	mov	r5,r17
   41fb8:	01800284 	movi	r6,10
   41fbc:	000f883a 	mov	r7,zero
   41fc0:	92000005 	stb	r8,0(r18)
   41fc4:	0047c440 	call	47c44 <__udivdi3>
   41fc8:	1009883a 	mov	r4,r2
   41fcc:	1021883a 	mov	r16,r2
   41fd0:	18800068 	cmpgeui	r2,r3,1
   41fd4:	1823883a 	mov	r17,r3
   41fd8:	103fee1e 	bne	r2,zero,41f94 <___vfprintf_internal_r+0x146c>
   41fdc:	1800021e 	bne	r3,zero,41fe8 <___vfprintf_internal_r+0x14c0>
   41fe0:	00800244 	movi	r2,9
   41fe4:	113feb36 	bltu	r2,r4,41f94 <___vfprintf_internal_r+0x146c>
   41fe8:	94bfffc4 	addi	r18,r18,-1
   41fec:	dc814115 	stw	r18,1284(sp)
   41ff0:	003fc006 	br	41ef4 <___vfprintf_internal_r+0x13cc>
   41ff4:	d9014c17 	ldw	r4,1328(sp)
   41ff8:	2080004c 	andi	r2,r4,1
   41ffc:	10009a1e 	bne	r2,zero,42268 <___vfprintf_internal_r+0x1740>
   42000:	d9401904 	addi	r5,sp,100
   42004:	dd000f04 	addi	r20,sp,60
   42008:	d9414115 	stw	r5,1284(sp)
   4200c:	003d6106 	br	41594 <___vfprintf_internal_r+0xa6c>
   42010:	d9014f17 	ldw	r4,1340(sp)
   42014:	b00b883a 	mov	r5,r22
   42018:	d9800c04 	addi	r6,sp,48
   4201c:	0040ad00 	call	40ad0 <__sprint_r>
   42020:	103c791e 	bne	r2,zero,41208 <___vfprintf_internal_r+0x6e0>
   42024:	dc800e17 	ldw	r18,56(sp)
   42028:	d8c01904 	addi	r3,sp,100
   4202c:	003cff06 	br	4142c <___vfprintf_internal_r+0x904>
   42030:	d8c14c17 	ldw	r3,1328(sp)
   42034:	1880040c 	andi	r2,r3,16
   42038:	1000711e 	bne	r2,zero,42200 <___vfprintf_internal_r+0x16d8>
   4203c:	d9014c17 	ldw	r4,1328(sp)
   42040:	2080100c 	andi	r2,r4,64
   42044:	10006e26 	beq	r2,zero,42200 <___vfprintf_internal_r+0x16d8>
   42048:	3c00000b 	ldhu	r16,0(r7)
   4204c:	0023883a 	mov	r17,zero
   42050:	39c00104 	addi	r7,r7,4
   42054:	d9c14015 	stw	r7,1280(sp)
   42058:	003f0006 	br	41c5c <___vfprintf_internal_r+0x1134>
   4205c:	dc400d17 	ldw	r17,52(sp)
   42060:	07100034 	movhi	fp,16384
   42064:	e7002a84 	addi	fp,fp,170
   42068:	9425883a 	add	r18,r18,r16
   4206c:	8c400044 	addi	r17,r17,1
   42070:	008001c4 	movi	r2,7
   42074:	1f000015 	stw	fp,0(r3)
   42078:	1c000115 	stw	r16,4(r3)
   4207c:	dc800e15 	stw	r18,56(sp)
   42080:	dc400d15 	stw	r17,52(sp)
   42084:	147d7616 	blt	r2,r17,41660 <___vfprintf_internal_r+0xb38>
   42088:	18c00204 	addi	r3,r3,8
   4208c:	003d7b06 	br	4167c <___vfprintf_internal_r+0xb54>
   42090:	dc800e17 	ldw	r18,56(sp)
   42094:	dc400d17 	ldw	r17,52(sp)
   42098:	07100034 	movhi	fp,16384
   4209c:	e7002e84 	addi	fp,fp,186
   420a0:	003bc006 	br	40fa4 <___vfprintf_internal_r+0x47c>
   420a4:	d9014f17 	ldw	r4,1340(sp)
   420a8:	b00b883a 	mov	r5,r22
   420ac:	d9800c04 	addi	r6,sp,48
   420b0:	0040ad00 	call	40ad0 <__sprint_r>
   420b4:	103c541e 	bne	r2,zero,41208 <___vfprintf_internal_r+0x6e0>
   420b8:	dc800e17 	ldw	r18,56(sp)
   420bc:	d8c01904 	addi	r3,sp,100
   420c0:	003ce906 	br	41468 <___vfprintf_internal_r+0x940>
   420c4:	3c000017 	ldw	r16,0(r7)
   420c8:	0009883a 	mov	r4,zero
   420cc:	39c00104 	addi	r7,r7,4
   420d0:	0023883a 	mov	r17,zero
   420d4:	d9c14015 	stw	r7,1280(sp)
   420d8:	d8000405 	stb	zero,16(sp)
   420dc:	003d2006 	br	41560 <___vfprintf_internal_r+0xa38>
   420e0:	38800017 	ldw	r2,0(r7)
   420e4:	39c00104 	addi	r7,r7,4
   420e8:	d9c14015 	stw	r7,1280(sp)
   420ec:	1023d7fa 	srai	r17,r2,31
   420f0:	1021883a 	mov	r16,r2
   420f4:	003d1806 	br	41558 <___vfprintf_internal_r+0xa30>
   420f8:	3c000017 	ldw	r16,0(r7)
   420fc:	01000044 	movi	r4,1
   42100:	39c00104 	addi	r7,r7,4
   42104:	0023883a 	mov	r17,zero
   42108:	d9c14015 	stw	r7,1280(sp)
   4210c:	d8000405 	stb	zero,16(sp)
   42110:	003d1306 	br	41560 <___vfprintf_internal_r+0xa38>
   42114:	00900034 	movhi	r2,16384
   42118:	10802a04 	addi	r2,r2,168
   4211c:	94800044 	addi	r18,r18,1
   42120:	8c400044 	addi	r17,r17,1
   42124:	a8800015 	stw	r2,0(r21)
   42128:	00c00044 	movi	r3,1
   4212c:	008001c4 	movi	r2,7
   42130:	a8c00115 	stw	r3,4(r21)
   42134:	dc800e15 	stw	r18,56(sp)
   42138:	dc400d15 	stw	r17,52(sp)
   4213c:	1440ca16 	blt	r2,r17,42468 <___vfprintf_internal_r+0x1940>
   42140:	a8c00204 	addi	r3,r21,8
   42144:	2000061e 	bne	r4,zero,42160 <___vfprintf_internal_r+0x1638>
   42148:	d9414717 	ldw	r5,1308(sp)
   4214c:	2800041e 	bne	r5,zero,42160 <___vfprintf_internal_r+0x1638>
   42150:	d9814c17 	ldw	r6,1328(sp)
   42154:	3080004c 	andi	r2,r6,1
   42158:	1005003a 	cmpeq	r2,r2,zero
   4215c:	103bf01e 	bne	r2,zero,41120 <___vfprintf_internal_r+0x5f8>
   42160:	00800044 	movi	r2,1
   42164:	dc400d17 	ldw	r17,52(sp)
   42168:	18800115 	stw	r2,4(r3)
   4216c:	d8814917 	ldw	r2,1316(sp)
   42170:	94800044 	addi	r18,r18,1
   42174:	8c400044 	addi	r17,r17,1
   42178:	18800015 	stw	r2,0(r3)
   4217c:	008001c4 	movi	r2,7
   42180:	dc800e15 	stw	r18,56(sp)
   42184:	dc400d15 	stw	r17,52(sp)
   42188:	1440ca16 	blt	r2,r17,424b4 <___vfprintf_internal_r+0x198c>
   4218c:	18c00204 	addi	r3,r3,8
   42190:	0121c83a 	sub	r16,zero,r4
   42194:	0400500e 	bge	zero,r16,422d8 <___vfprintf_internal_r+0x17b0>
   42198:	00800404 	movi	r2,16
   4219c:	1400800e 	bge	r2,r16,423a0 <___vfprintf_internal_r+0x1878>
   421a0:	1027883a 	mov	r19,r2
   421a4:	07100034 	movhi	fp,16384
   421a8:	e7002a84 	addi	fp,fp,170
   421ac:	050001c4 	movi	r20,7
   421b0:	00000306 	br	421c0 <___vfprintf_internal_r+0x1698>
   421b4:	18c00204 	addi	r3,r3,8
   421b8:	843ffc04 	addi	r16,r16,-16
   421bc:	9c007a0e 	bge	r19,r16,423a8 <___vfprintf_internal_r+0x1880>
   421c0:	94800404 	addi	r18,r18,16
   421c4:	8c400044 	addi	r17,r17,1
   421c8:	1f000015 	stw	fp,0(r3)
   421cc:	1cc00115 	stw	r19,4(r3)
   421d0:	dc800e15 	stw	r18,56(sp)
   421d4:	dc400d15 	stw	r17,52(sp)
   421d8:	a47ff60e 	bge	r20,r17,421b4 <___vfprintf_internal_r+0x168c>
   421dc:	d9014f17 	ldw	r4,1340(sp)
   421e0:	b00b883a 	mov	r5,r22
   421e4:	d9800c04 	addi	r6,sp,48
   421e8:	0040ad00 	call	40ad0 <__sprint_r>
   421ec:	103c061e 	bne	r2,zero,41208 <___vfprintf_internal_r+0x6e0>
   421f0:	dc800e17 	ldw	r18,56(sp)
   421f4:	dc400d17 	ldw	r17,52(sp)
   421f8:	d8c01904 	addi	r3,sp,100
   421fc:	003fee06 	br	421b8 <___vfprintf_internal_r+0x1690>
   42200:	3c000017 	ldw	r16,0(r7)
   42204:	0023883a 	mov	r17,zero
   42208:	39c00104 	addi	r7,r7,4
   4220c:	d9c14015 	stw	r7,1280(sp)
   42210:	003e9206 	br	41c5c <___vfprintf_internal_r+0x1134>
   42214:	d9401904 	addi	r5,sp,100
   42218:	dd000f04 	addi	r20,sp,60
   4221c:	d9414115 	stw	r5,1284(sp)
   42220:	d9814417 	ldw	r6,1296(sp)
   42224:	880a973a 	slli	r5,r17,28
   42228:	8004d13a 	srli	r2,r16,4
   4222c:	810003cc 	andi	r4,r16,15
   42230:	3109883a 	add	r4,r6,r4
   42234:	2884b03a 	or	r2,r5,r2
   42238:	21400003 	ldbu	r5,0(r4)
   4223c:	d9014117 	ldw	r4,1284(sp)
   42240:	8806d13a 	srli	r3,r17,4
   42244:	1021883a 	mov	r16,r2
   42248:	213fffc4 	addi	r4,r4,-1
   4224c:	d9014115 	stw	r4,1284(sp)
   42250:	d9814117 	ldw	r6,1284(sp)
   42254:	10c8b03a 	or	r4,r2,r3
   42258:	1823883a 	mov	r17,r3
   4225c:	31400005 	stb	r5,0(r6)
   42260:	203fef1e 	bne	r4,zero,42220 <___vfprintf_internal_r+0x16f8>
   42264:	003ccb06 	br	41594 <___vfprintf_internal_r+0xa6c>
   42268:	00800c04 	movi	r2,48
   4226c:	d98018c4 	addi	r6,sp,99
   42270:	dd000f04 	addi	r20,sp,60
   42274:	d88018c5 	stb	r2,99(sp)
   42278:	d9814115 	stw	r6,1284(sp)
   4227c:	003cc506 	br	41594 <___vfprintf_internal_r+0xa6c>
   42280:	dc400d17 	ldw	r17,52(sp)
   42284:	07100034 	movhi	fp,16384
   42288:	e7002e84 	addi	fp,fp,186
   4228c:	003bc706 	br	411ac <___vfprintf_internal_r+0x684>
   42290:	d9414c17 	ldw	r5,1328(sp)
   42294:	2880040c 	andi	r2,r5,16
   42298:	10007c26 	beq	r2,zero,4248c <___vfprintf_internal_r+0x1964>
   4229c:	38800017 	ldw	r2,0(r7)
   422a0:	39c00104 	addi	r7,r7,4
   422a4:	d9c14015 	stw	r7,1280(sp)
   422a8:	d9814b17 	ldw	r6,1324(sp)
   422ac:	d9c14017 	ldw	r7,1280(sp)
   422b0:	11800015 	stw	r6,0(r2)
   422b4:	003a7806 	br	40c98 <___vfprintf_internal_r+0x170>
   422b8:	d9014f17 	ldw	r4,1340(sp)
   422bc:	b00b883a 	mov	r5,r22
   422c0:	d9800c04 	addi	r6,sp,48
   422c4:	0040ad00 	call	40ad0 <__sprint_r>
   422c8:	103bcf1e 	bne	r2,zero,41208 <___vfprintf_internal_r+0x6e0>
   422cc:	dc800e17 	ldw	r18,56(sp)
   422d0:	dc400d17 	ldw	r17,52(sp)
   422d4:	d8c01904 	addi	r3,sp,100
   422d8:	d9014717 	ldw	r4,1308(sp)
   422dc:	d9414117 	ldw	r5,1284(sp)
   422e0:	8c400044 	addi	r17,r17,1
   422e4:	9125883a 	add	r18,r18,r4
   422e8:	008001c4 	movi	r2,7
   422ec:	19400015 	stw	r5,0(r3)
   422f0:	19000115 	stw	r4,4(r3)
   422f4:	dc800e15 	stw	r18,56(sp)
   422f8:	dc400d15 	stw	r17,52(sp)
   422fc:	147cee16 	blt	r2,r17,416b8 <___vfprintf_internal_r+0xb90>
   42300:	18c00204 	addi	r3,r3,8
   42304:	003b8606 	br	41120 <___vfprintf_internal_r+0x5f8>
   42308:	38c00017 	ldw	r3,0(r7)
   4230c:	39000204 	addi	r4,r7,8
   42310:	d9014015 	stw	r4,1280(sp)
   42314:	d8c14215 	stw	r3,1288(sp)
   42318:	39c00117 	ldw	r7,4(r7)
   4231c:	d9c14315 	stw	r7,1292(sp)
   42320:	003e2006 	br	41ba4 <___vfprintf_internal_r+0x107c>
   42324:	0005883a 	mov	r2,zero
   42328:	1409c83a 	sub	r4,r2,r16
   4232c:	1105803a 	cmpltu	r2,r2,r4
   42330:	044bc83a 	sub	r5,zero,r17
   42334:	2885c83a 	sub	r2,r5,r2
   42338:	2021883a 	mov	r16,r4
   4233c:	1023883a 	mov	r17,r2
   42340:	01000044 	movi	r4,1
   42344:	00800b44 	movi	r2,45
   42348:	d8800405 	stb	r2,16(sp)
   4234c:	003c8406 	br	41560 <___vfprintf_internal_r+0xa38>
   42350:	d9014f17 	ldw	r4,1340(sp)
   42354:	b00b883a 	mov	r5,r22
   42358:	d9800c04 	addi	r6,sp,48
   4235c:	0040ad00 	call	40ad0 <__sprint_r>
   42360:	103ba91e 	bne	r2,zero,41208 <___vfprintf_internal_r+0x6e0>
   42364:	dc800e17 	ldw	r18,56(sp)
   42368:	dc400d17 	ldw	r17,52(sp)
   4236c:	d9000517 	ldw	r4,20(sp)
   42370:	d9401904 	addi	r5,sp,100
   42374:	003da706 	br	41a14 <___vfprintf_internal_r+0xeec>
   42378:	d9014f17 	ldw	r4,1340(sp)
   4237c:	b00b883a 	mov	r5,r22
   42380:	d9800c04 	addi	r6,sp,48
   42384:	0040ad00 	call	40ad0 <__sprint_r>
   42388:	103b9f1e 	bne	r2,zero,41208 <___vfprintf_internal_r+0x6e0>
   4238c:	dc800e17 	ldw	r18,56(sp)
   42390:	dc400d17 	ldw	r17,52(sp)
   42394:	d9000517 	ldw	r4,20(sp)
   42398:	d8c01904 	addi	r3,sp,100
   4239c:	003d9106 	br	419e4 <___vfprintf_internal_r+0xebc>
   423a0:	07100034 	movhi	fp,16384
   423a4:	e7002a84 	addi	fp,fp,170
   423a8:	9425883a 	add	r18,r18,r16
   423ac:	8c400044 	addi	r17,r17,1
   423b0:	008001c4 	movi	r2,7
   423b4:	1f000015 	stw	fp,0(r3)
   423b8:	1c000115 	stw	r16,4(r3)
   423bc:	dc800e15 	stw	r18,56(sp)
   423c0:	dc400d15 	stw	r17,52(sp)
   423c4:	147fbc16 	blt	r2,r17,422b8 <___vfprintf_internal_r+0x1790>
   423c8:	18c00204 	addi	r3,r3,8
   423cc:	003fc206 	br	422d8 <___vfprintf_internal_r+0x17b0>
   423d0:	d9014f17 	ldw	r4,1340(sp)
   423d4:	b00b883a 	mov	r5,r22
   423d8:	d9800c04 	addi	r6,sp,48
   423dc:	0040ad00 	call	40ad0 <__sprint_r>
   423e0:	103b891e 	bne	r2,zero,41208 <___vfprintf_internal_r+0x6e0>
   423e4:	dc800e17 	ldw	r18,56(sp)
   423e8:	d9000517 	ldw	r4,20(sp)
   423ec:	d8c01904 	addi	r3,sp,100
   423f0:	003d0206 	br	417fc <___vfprintf_internal_r+0xcd4>
   423f4:	07100034 	movhi	fp,16384
   423f8:	e7002a84 	addi	fp,fp,170
   423fc:	003be406 	br	41390 <___vfprintf_internal_r+0x868>
   42400:	00900034 	movhi	r2,16384
   42404:	10801904 	addi	r2,r2,100
   42408:	d8814115 	stw	r2,1284(sp)
   4240c:	003df506 	br	41be4 <___vfprintf_internal_r+0x10bc>
   42410:	d9014217 	ldw	r4,1288(sp)
   42414:	d9414317 	ldw	r5,1292(sp)
   42418:	00475080 	call	47508 <__isnand>
   4241c:	10003926 	beq	r2,zero,42504 <___vfprintf_internal_r+0x19dc>
   42420:	d9414d17 	ldw	r5,1332(sp)
   42424:	008011c4 	movi	r2,71
   42428:	1140ce16 	blt	r2,r5,42764 <___vfprintf_internal_r+0x1c3c>
   4242c:	01900034 	movhi	r6,16384
   42430:	31801a04 	addi	r6,r6,104
   42434:	d9814115 	stw	r6,1284(sp)
   42438:	003dea06 	br	41be4 <___vfprintf_internal_r+0x10bc>
   4243c:	d9014c17 	ldw	r4,1328(sp)
   42440:	bdc00044 	addi	r23,r23,1
   42444:	b8c00007 	ldb	r3,0(r23)
   42448:	21000814 	ori	r4,r4,32
   4244c:	d9014c15 	stw	r4,1328(sp)
   42450:	003a3406 	br	40d24 <___vfprintf_internal_r+0x1fc>
   42454:	dcc14515 	stw	r19,1300(sp)
   42458:	98011016 	blt	r19,zero,4289c <___vfprintf_internal_r+0x1d74>
   4245c:	980f883a 	mov	r7,r19
   42460:	d8014615 	stw	zero,1304(sp)
   42464:	003c5206 	br	415b0 <___vfprintf_internal_r+0xa88>
   42468:	d9014f17 	ldw	r4,1340(sp)
   4246c:	b00b883a 	mov	r5,r22
   42470:	d9800c04 	addi	r6,sp,48
   42474:	0040ad00 	call	40ad0 <__sprint_r>
   42478:	103b631e 	bne	r2,zero,41208 <___vfprintf_internal_r+0x6e0>
   4247c:	dc800e17 	ldw	r18,56(sp)
   42480:	d9000517 	ldw	r4,20(sp)
   42484:	d8c01904 	addi	r3,sp,100
   42488:	003f2e06 	br	42144 <___vfprintf_internal_r+0x161c>
   4248c:	d8c14c17 	ldw	r3,1328(sp)
   42490:	1880100c 	andi	r2,r3,64
   42494:	1000a026 	beq	r2,zero,42718 <___vfprintf_internal_r+0x1bf0>
   42498:	38800017 	ldw	r2,0(r7)
   4249c:	39c00104 	addi	r7,r7,4
   424a0:	d9c14015 	stw	r7,1280(sp)
   424a4:	d9014b17 	ldw	r4,1324(sp)
   424a8:	d9c14017 	ldw	r7,1280(sp)
   424ac:	1100000d 	sth	r4,0(r2)
   424b0:	0039f906 	br	40c98 <___vfprintf_internal_r+0x170>
   424b4:	d9014f17 	ldw	r4,1340(sp)
   424b8:	b00b883a 	mov	r5,r22
   424bc:	d9800c04 	addi	r6,sp,48
   424c0:	0040ad00 	call	40ad0 <__sprint_r>
   424c4:	103b501e 	bne	r2,zero,41208 <___vfprintf_internal_r+0x6e0>
   424c8:	dc800e17 	ldw	r18,56(sp)
   424cc:	dc400d17 	ldw	r17,52(sp)
   424d0:	d9000517 	ldw	r4,20(sp)
   424d4:	d8c01904 	addi	r3,sp,100
   424d8:	003f2d06 	br	42190 <___vfprintf_internal_r+0x1668>
   424dc:	00800184 	movi	r2,6
   424e0:	14c09a36 	bltu	r2,r19,4274c <___vfprintf_internal_r+0x1c24>
   424e4:	dcc14515 	stw	r19,1300(sp)
   424e8:	9800010e 	bge	r19,zero,424f0 <___vfprintf_internal_r+0x19c8>
   424ec:	d8014515 	stw	zero,1300(sp)
   424f0:	00900034 	movhi	r2,16384
   424f4:	10801c04 	addi	r2,r2,112
   424f8:	980f883a 	mov	r7,r19
   424fc:	d8814115 	stw	r2,1284(sp)
   42500:	003a7806 	br	40ee4 <___vfprintf_internal_r+0x3bc>
   42504:	00bfffc4 	movi	r2,-1
   42508:	9880e226 	beq	r19,r2,42894 <___vfprintf_internal_r+0x1d6c>
   4250c:	d9414d17 	ldw	r5,1332(sp)
   42510:	008019c4 	movi	r2,103
   42514:	2880dc26 	beq	r5,r2,42888 <___vfprintf_internal_r+0x1d60>
   42518:	008011c4 	movi	r2,71
   4251c:	2880da26 	beq	r5,r2,42888 <___vfprintf_internal_r+0x1d60>
   42520:	d9414c17 	ldw	r5,1328(sp)
   42524:	d9014317 	ldw	r4,1292(sp)
   42528:	d9814217 	ldw	r6,1288(sp)
   4252c:	29404014 	ori	r5,r5,256
   42530:	d9414c15 	stw	r5,1328(sp)
   42534:	2000cc16 	blt	r4,zero,42868 <___vfprintf_internal_r+0x1d40>
   42538:	3021883a 	mov	r16,r6
   4253c:	2023883a 	mov	r17,r4
   42540:	0039883a 	mov	fp,zero
   42544:	d9414d17 	ldw	r5,1332(sp)
   42548:	00801984 	movi	r2,102
   4254c:	2880b726 	beq	r5,r2,4282c <___vfprintf_internal_r+0x1d04>
   42550:	00801184 	movi	r2,70
   42554:	2880b526 	beq	r5,r2,4282c <___vfprintf_internal_r+0x1d04>
   42558:	00801944 	movi	r2,101
   4255c:	2880c826 	beq	r5,r2,42880 <___vfprintf_internal_r+0x1d58>
   42560:	00801144 	movi	r2,69
   42564:	2880c626 	beq	r5,r2,42880 <___vfprintf_internal_r+0x1d58>
   42568:	9829883a 	mov	r20,r19
   4256c:	d9014f17 	ldw	r4,1340(sp)
   42570:	d8800504 	addi	r2,sp,20
   42574:	880d883a 	mov	r6,r17
   42578:	d8800115 	stw	r2,4(sp)
   4257c:	d8c00604 	addi	r3,sp,24
   42580:	d8800704 	addi	r2,sp,28
   42584:	800b883a 	mov	r5,r16
   42588:	01c00084 	movi	r7,2
   4258c:	d8c00215 	stw	r3,8(sp)
   42590:	d8800315 	stw	r2,12(sp)
   42594:	dd000015 	stw	r20,0(sp)
   42598:	0042d4c0 	call	42d4c <_dtoa_r>
   4259c:	d9814d17 	ldw	r6,1332(sp)
   425a0:	d8814115 	stw	r2,1284(sp)
   425a4:	008019c4 	movi	r2,103
   425a8:	30809526 	beq	r6,r2,42800 <___vfprintf_internal_r+0x1cd8>
   425ac:	d8c14d17 	ldw	r3,1332(sp)
   425b0:	008011c4 	movi	r2,71
   425b4:	18809226 	beq	r3,r2,42800 <___vfprintf_internal_r+0x1cd8>
   425b8:	d9414117 	ldw	r5,1284(sp)
   425bc:	d9814d17 	ldw	r6,1332(sp)
   425c0:	00801984 	movi	r2,102
   425c4:	2d25883a 	add	r18,r5,r20
   425c8:	30808626 	beq	r6,r2,427e4 <___vfprintf_internal_r+0x1cbc>
   425cc:	00801184 	movi	r2,70
   425d0:	30808426 	beq	r6,r2,427e4 <___vfprintf_internal_r+0x1cbc>
   425d4:	000d883a 	mov	r6,zero
   425d8:	000f883a 	mov	r7,zero
   425dc:	880b883a 	mov	r5,r17
   425e0:	8009883a 	mov	r4,r16
   425e4:	00492e00 	call	492e0 <__eqdf2>
   425e8:	1000751e 	bne	r2,zero,427c0 <___vfprintf_internal_r+0x1c98>
   425ec:	9005883a 	mov	r2,r18
   425f0:	dc800715 	stw	r18,28(sp)
   425f4:	d9014117 	ldw	r4,1284(sp)
   425f8:	d9414d17 	ldw	r5,1332(sp)
   425fc:	00c019c4 	movi	r3,103
   42600:	1125c83a 	sub	r18,r2,r4
   42604:	28c06826 	beq	r5,r3,427a8 <___vfprintf_internal_r+0x1c80>
   42608:	008011c4 	movi	r2,71
   4260c:	28806626 	beq	r5,r2,427a8 <___vfprintf_internal_r+0x1c80>
   42610:	d9000517 	ldw	r4,20(sp)
   42614:	d8c14d17 	ldw	r3,1332(sp)
   42618:	00801944 	movi	r2,101
   4261c:	10c05516 	blt	r2,r3,42774 <___vfprintf_internal_r+0x1c4c>
   42620:	213fffc4 	addi	r4,r4,-1
   42624:	d9000515 	stw	r4,20(sp)
   42628:	d8c00805 	stb	r3,32(sp)
   4262c:	2021883a 	mov	r16,r4
   42630:	2000c116 	blt	r4,zero,42938 <___vfprintf_internal_r+0x1e10>
   42634:	00800ac4 	movi	r2,43
   42638:	d8800845 	stb	r2,33(sp)
   4263c:	00800244 	movi	r2,9
   42640:	1400af0e 	bge	r2,r16,42900 <___vfprintf_internal_r+0x1dd8>
   42644:	1027883a 	mov	r19,r2
   42648:	dc400b84 	addi	r17,sp,46
   4264c:	8009883a 	mov	r4,r16
   42650:	01400284 	movi	r5,10
   42654:	00499c80 	call	499c8 <__modsi3>
   42658:	10800c04 	addi	r2,r2,48
   4265c:	8c7fffc4 	addi	r17,r17,-1
   42660:	8009883a 	mov	r4,r16
   42664:	01400284 	movi	r5,10
   42668:	88800005 	stb	r2,0(r17)
   4266c:	00499680 	call	49968 <__divsi3>
   42670:	1021883a 	mov	r16,r2
   42674:	98bff516 	blt	r19,r2,4264c <___vfprintf_internal_r+0x1b24>
   42678:	10c00c04 	addi	r3,r2,48
   4267c:	d88009c4 	addi	r2,sp,39
   42680:	108001c4 	addi	r2,r2,7
   42684:	897fffc4 	addi	r5,r17,-1
   42688:	88ffffc5 	stb	r3,-1(r17)
   4268c:	2880a72e 	bgeu	r5,r2,4292c <___vfprintf_internal_r+0x1e04>
   42690:	1009883a 	mov	r4,r2
   42694:	d9800804 	addi	r6,sp,32
   42698:	d8c00884 	addi	r3,sp,34
   4269c:	28800003 	ldbu	r2,0(r5)
   426a0:	29400044 	addi	r5,r5,1
   426a4:	18800005 	stb	r2,0(r3)
   426a8:	18c00044 	addi	r3,r3,1
   426ac:	293ffb36 	bltu	r5,r4,4269c <___vfprintf_internal_r+0x1b74>
   426b0:	1987c83a 	sub	r3,r3,r6
   426b4:	00800044 	movi	r2,1
   426b8:	d8c14815 	stw	r3,1312(sp)
   426bc:	90cf883a 	add	r7,r18,r3
   426c0:	1480960e 	bge	r2,r18,4291c <___vfprintf_internal_r+0x1df4>
   426c4:	39c00044 	addi	r7,r7,1
   426c8:	d9c14515 	stw	r7,1300(sp)
   426cc:	38003416 	blt	r7,zero,427a0 <___vfprintf_internal_r+0x1c78>
   426d0:	e0803fcc 	andi	r2,fp,255
   426d4:	1080201c 	xori	r2,r2,128
   426d8:	10bfe004 	addi	r2,r2,-128
   426dc:	10004e26 	beq	r2,zero,42818 <___vfprintf_internal_r+0x1cf0>
   426e0:	00800b44 	movi	r2,45
   426e4:	dc814715 	stw	r18,1308(sp)
   426e8:	d8014615 	stw	zero,1304(sp)
   426ec:	d8800405 	stb	r2,16(sp)
   426f0:	003bb106 	br	415b8 <___vfprintf_internal_r+0xa90>
   426f4:	00800b44 	movi	r2,45
   426f8:	d8800405 	stb	r2,16(sp)
   426fc:	003d3306 	br	41bcc <___vfprintf_internal_r+0x10a4>
   42700:	d9014f17 	ldw	r4,1340(sp)
   42704:	b00b883a 	mov	r5,r22
   42708:	d9800c04 	addi	r6,sp,48
   4270c:	0040ad00 	call	40ad0 <__sprint_r>
   42710:	103abd1e 	bne	r2,zero,41208 <___vfprintf_internal_r+0x6e0>
   42714:	003abb06 	br	41204 <___vfprintf_internal_r+0x6dc>
   42718:	38800017 	ldw	r2,0(r7)
   4271c:	39c00104 	addi	r7,r7,4
   42720:	d9c14015 	stw	r7,1280(sp)
   42724:	d9414b17 	ldw	r5,1324(sp)
   42728:	d9c14017 	ldw	r7,1280(sp)
   4272c:	11400015 	stw	r5,0(r2)
   42730:	00395906 	br	40c98 <___vfprintf_internal_r+0x170>
   42734:	980f883a 	mov	r7,r19
   42738:	dcc14515 	stw	r19,1300(sp)
   4273c:	d8014615 	stw	zero,1304(sp)
   42740:	003b9b06 	br	415b0 <___vfprintf_internal_r+0xa88>
   42744:	0027883a 	mov	r19,zero
   42748:	00397806 	br	40d2c <___vfprintf_internal_r+0x204>
   4274c:	00d00034 	movhi	r3,16384
   42750:	18c01c04 	addi	r3,r3,112
   42754:	100f883a 	mov	r7,r2
   42758:	d8814515 	stw	r2,1300(sp)
   4275c:	d8c14115 	stw	r3,1284(sp)
   42760:	0039e006 	br	40ee4 <___vfprintf_internal_r+0x3bc>
   42764:	00900034 	movhi	r2,16384
   42768:	10801b04 	addi	r2,r2,108
   4276c:	d8814115 	stw	r2,1284(sp)
   42770:	003d1c06 	br	41be4 <___vfprintf_internal_r+0x10bc>
   42774:	d9414d17 	ldw	r5,1332(sp)
   42778:	00801984 	movi	r2,102
   4277c:	28804926 	beq	r5,r2,428a4 <___vfprintf_internal_r+0x1d7c>
   42780:	200f883a 	mov	r7,r4
   42784:	24805716 	blt	r4,r18,428e4 <___vfprintf_internal_r+0x1dbc>
   42788:	d9414c17 	ldw	r5,1328(sp)
   4278c:	2880004c 	andi	r2,r5,1
   42790:	10000126 	beq	r2,zero,42798 <___vfprintf_internal_r+0x1c70>
   42794:	21c00044 	addi	r7,r4,1
   42798:	d9c14515 	stw	r7,1300(sp)
   4279c:	383fcc0e 	bge	r7,zero,426d0 <___vfprintf_internal_r+0x1ba8>
   427a0:	d8014515 	stw	zero,1300(sp)
   427a4:	003fca06 	br	426d0 <___vfprintf_internal_r+0x1ba8>
   427a8:	d9000517 	ldw	r4,20(sp)
   427ac:	00bfff04 	movi	r2,-4
   427b0:	1100480e 	bge	r2,r4,428d4 <___vfprintf_internal_r+0x1dac>
   427b4:	99004716 	blt	r19,r4,428d4 <___vfprintf_internal_r+0x1dac>
   427b8:	d8c14d15 	stw	r3,1332(sp)
   427bc:	003ff006 	br	42780 <___vfprintf_internal_r+0x1c58>
   427c0:	d8800717 	ldw	r2,28(sp)
   427c4:	14bf8b2e 	bgeu	r2,r18,425f4 <___vfprintf_internal_r+0x1acc>
   427c8:	9007883a 	mov	r3,r18
   427cc:	01000c04 	movi	r4,48
   427d0:	11000005 	stb	r4,0(r2)
   427d4:	10800044 	addi	r2,r2,1
   427d8:	d8800715 	stw	r2,28(sp)
   427dc:	18bffc1e 	bne	r3,r2,427d0 <___vfprintf_internal_r+0x1ca8>
   427e0:	003f8406 	br	425f4 <___vfprintf_internal_r+0x1acc>
   427e4:	d8814117 	ldw	r2,1284(sp)
   427e8:	10c00007 	ldb	r3,0(r2)
   427ec:	00800c04 	movi	r2,48
   427f0:	18805b26 	beq	r3,r2,42960 <___vfprintf_internal_r+0x1e38>
   427f4:	d9000517 	ldw	r4,20(sp)
   427f8:	9125883a 	add	r18,r18,r4
   427fc:	003f7506 	br	425d4 <___vfprintf_internal_r+0x1aac>
   42800:	d9014c17 	ldw	r4,1328(sp)
   42804:	2080004c 	andi	r2,r4,1
   42808:	1005003a 	cmpeq	r2,r2,zero
   4280c:	103f6a26 	beq	r2,zero,425b8 <___vfprintf_internal_r+0x1a90>
   42810:	d8800717 	ldw	r2,28(sp)
   42814:	003f7706 	br	425f4 <___vfprintf_internal_r+0x1acc>
   42818:	d9c14515 	stw	r7,1300(sp)
   4281c:	38004d16 	blt	r7,zero,42954 <___vfprintf_internal_r+0x1e2c>
   42820:	dc814715 	stw	r18,1308(sp)
   42824:	d8014615 	stw	zero,1304(sp)
   42828:	003b6106 	br	415b0 <___vfprintf_internal_r+0xa88>
   4282c:	d9014f17 	ldw	r4,1340(sp)
   42830:	d8800504 	addi	r2,sp,20
   42834:	d8800115 	stw	r2,4(sp)
   42838:	d8c00604 	addi	r3,sp,24
   4283c:	d8800704 	addi	r2,sp,28
   42840:	800b883a 	mov	r5,r16
   42844:	880d883a 	mov	r6,r17
   42848:	01c000c4 	movi	r7,3
   4284c:	d8c00215 	stw	r3,8(sp)
   42850:	d8800315 	stw	r2,12(sp)
   42854:	dcc00015 	stw	r19,0(sp)
   42858:	9829883a 	mov	r20,r19
   4285c:	0042d4c0 	call	42d4c <_dtoa_r>
   42860:	d8814115 	stw	r2,1284(sp)
   42864:	003f5106 	br	425ac <___vfprintf_internal_r+0x1a84>
   42868:	d8c14217 	ldw	r3,1288(sp)
   4286c:	d9014317 	ldw	r4,1292(sp)
   42870:	07000b44 	movi	fp,45
   42874:	1821883a 	mov	r16,r3
   42878:	2460003c 	xorhi	r17,r4,32768
   4287c:	003f3106 	br	42544 <___vfprintf_internal_r+0x1a1c>
   42880:	9d000044 	addi	r20,r19,1
   42884:	003f3906 	br	4256c <___vfprintf_internal_r+0x1a44>
   42888:	983f251e 	bne	r19,zero,42520 <___vfprintf_internal_r+0x19f8>
   4288c:	04c00044 	movi	r19,1
   42890:	003f2306 	br	42520 <___vfprintf_internal_r+0x19f8>
   42894:	04c00184 	movi	r19,6
   42898:	003f2106 	br	42520 <___vfprintf_internal_r+0x19f8>
   4289c:	d8014515 	stw	zero,1300(sp)
   428a0:	003eee06 	br	4245c <___vfprintf_internal_r+0x1934>
   428a4:	200f883a 	mov	r7,r4
   428a8:	0100370e 	bge	zero,r4,42988 <___vfprintf_internal_r+0x1e60>
   428ac:	9800031e 	bne	r19,zero,428bc <___vfprintf_internal_r+0x1d94>
   428b0:	d9814c17 	ldw	r6,1328(sp)
   428b4:	3080004c 	andi	r2,r6,1
   428b8:	103fb726 	beq	r2,zero,42798 <___vfprintf_internal_r+0x1c70>
   428bc:	20800044 	addi	r2,r4,1
   428c0:	98a7883a 	add	r19,r19,r2
   428c4:	dcc14515 	stw	r19,1300(sp)
   428c8:	980f883a 	mov	r7,r19
   428cc:	983f800e 	bge	r19,zero,426d0 <___vfprintf_internal_r+0x1ba8>
   428d0:	003fb306 	br	427a0 <___vfprintf_internal_r+0x1c78>
   428d4:	d9814d17 	ldw	r6,1332(sp)
   428d8:	31bfff84 	addi	r6,r6,-2
   428dc:	d9814d15 	stw	r6,1332(sp)
   428e0:	003f4c06 	br	42614 <___vfprintf_internal_r+0x1aec>
   428e4:	0100180e 	bge	zero,r4,42948 <___vfprintf_internal_r+0x1e20>
   428e8:	00800044 	movi	r2,1
   428ec:	1485883a 	add	r2,r2,r18
   428f0:	d8814515 	stw	r2,1300(sp)
   428f4:	100f883a 	mov	r7,r2
   428f8:	103f750e 	bge	r2,zero,426d0 <___vfprintf_internal_r+0x1ba8>
   428fc:	003fa806 	br	427a0 <___vfprintf_internal_r+0x1c78>
   42900:	80c00c04 	addi	r3,r16,48
   42904:	00800c04 	movi	r2,48
   42908:	d8c008c5 	stb	r3,35(sp)
   4290c:	d9800804 	addi	r6,sp,32
   42910:	d8c00904 	addi	r3,sp,36
   42914:	d8800885 	stb	r2,34(sp)
   42918:	003f6506 	br	426b0 <___vfprintf_internal_r+0x1b88>
   4291c:	d9014c17 	ldw	r4,1328(sp)
   42920:	2084703a 	and	r2,r4,r2
   42924:	103f9c26 	beq	r2,zero,42798 <___vfprintf_internal_r+0x1c70>
   42928:	003f6606 	br	426c4 <___vfprintf_internal_r+0x1b9c>
   4292c:	d9800804 	addi	r6,sp,32
   42930:	d8c00884 	addi	r3,sp,34
   42934:	003f5e06 	br	426b0 <___vfprintf_internal_r+0x1b88>
   42938:	00800b44 	movi	r2,45
   4293c:	0121c83a 	sub	r16,zero,r4
   42940:	d8800845 	stb	r2,33(sp)
   42944:	003f3d06 	br	4263c <___vfprintf_internal_r+0x1b14>
   42948:	00800084 	movi	r2,2
   4294c:	1105c83a 	sub	r2,r2,r4
   42950:	003fe606 	br	428ec <___vfprintf_internal_r+0x1dc4>
   42954:	d8014515 	stw	zero,1300(sp)
   42958:	dc814715 	stw	r18,1308(sp)
   4295c:	003fb106 	br	42824 <___vfprintf_internal_r+0x1cfc>
   42960:	000d883a 	mov	r6,zero
   42964:	000f883a 	mov	r7,zero
   42968:	8009883a 	mov	r4,r16
   4296c:	880b883a 	mov	r5,r17
   42970:	00493680 	call	49368 <__nedf2>
   42974:	103f9f26 	beq	r2,zero,427f4 <___vfprintf_internal_r+0x1ccc>
   42978:	00800044 	movi	r2,1
   4297c:	1509c83a 	sub	r4,r2,r20
   42980:	d9000515 	stw	r4,20(sp)
   42984:	003f9b06 	br	427f4 <___vfprintf_internal_r+0x1ccc>
   42988:	98000d1e 	bne	r19,zero,429c0 <___vfprintf_internal_r+0x1e98>
   4298c:	d8c14c17 	ldw	r3,1328(sp)
   42990:	1880004c 	andi	r2,r3,1
   42994:	10000a1e 	bne	r2,zero,429c0 <___vfprintf_internal_r+0x1e98>
   42998:	01000044 	movi	r4,1
   4299c:	200f883a 	mov	r7,r4
   429a0:	d9014515 	stw	r4,1300(sp)
   429a4:	003f4a06 	br	426d0 <___vfprintf_internal_r+0x1ba8>
   429a8:	3cc00017 	ldw	r19,0(r7)
   429ac:	39c00104 	addi	r7,r7,4
   429b0:	983d0e0e 	bge	r19,zero,41dec <___vfprintf_internal_r+0x12c4>
   429b4:	b8c00007 	ldb	r3,0(r23)
   429b8:	04ffffc4 	movi	r19,-1
   429bc:	0038d906 	br	40d24 <___vfprintf_internal_r+0x1fc>
   429c0:	9cc00084 	addi	r19,r19,2
   429c4:	dcc14515 	stw	r19,1300(sp)
   429c8:	980f883a 	mov	r7,r19
   429cc:	983f400e 	bge	r19,zero,426d0 <___vfprintf_internal_r+0x1ba8>
   429d0:	003f7306 	br	427a0 <___vfprintf_internal_r+0x1c78>

000429d4 <__vfprintf_internal>:
   429d4:	00900034 	movhi	r2,16384
   429d8:	10876804 	addi	r2,r2,7584
   429dc:	2013883a 	mov	r9,r4
   429e0:	11000017 	ldw	r4,0(r2)
   429e4:	2805883a 	mov	r2,r5
   429e8:	300f883a 	mov	r7,r6
   429ec:	480b883a 	mov	r5,r9
   429f0:	100d883a 	mov	r6,r2
   429f4:	0040b281 	jmpi	40b28 <___vfprintf_internal_r>

000429f8 <__swsetup_r>:
   429f8:	00900034 	movhi	r2,16384
   429fc:	10876804 	addi	r2,r2,7584
   42a00:	10c00017 	ldw	r3,0(r2)
   42a04:	defffd04 	addi	sp,sp,-12
   42a08:	dc400115 	stw	r17,4(sp)
   42a0c:	dc000015 	stw	r16,0(sp)
   42a10:	dfc00215 	stw	ra,8(sp)
   42a14:	2023883a 	mov	r17,r4
   42a18:	2821883a 	mov	r16,r5
   42a1c:	18000226 	beq	r3,zero,42a28 <__swsetup_r+0x30>
   42a20:	18800e17 	ldw	r2,56(r3)
   42a24:	10001f26 	beq	r2,zero,42aa4 <__swsetup_r+0xac>
   42a28:	8100030b 	ldhu	r4,12(r16)
   42a2c:	2080020c 	andi	r2,r4,8
   42a30:	10002826 	beq	r2,zero,42ad4 <__swsetup_r+0xdc>
   42a34:	81400417 	ldw	r5,16(r16)
   42a38:	28001d26 	beq	r5,zero,42ab0 <__swsetup_r+0xb8>
   42a3c:	2080004c 	andi	r2,r4,1
   42a40:	1005003a 	cmpeq	r2,r2,zero
   42a44:	10000b26 	beq	r2,zero,42a74 <__swsetup_r+0x7c>
   42a48:	2080008c 	andi	r2,r4,2
   42a4c:	10001226 	beq	r2,zero,42a98 <__swsetup_r+0xa0>
   42a50:	0005883a 	mov	r2,zero
   42a54:	80800215 	stw	r2,8(r16)
   42a58:	28000b26 	beq	r5,zero,42a88 <__swsetup_r+0x90>
   42a5c:	0005883a 	mov	r2,zero
   42a60:	dfc00217 	ldw	ra,8(sp)
   42a64:	dc400117 	ldw	r17,4(sp)
   42a68:	dc000017 	ldw	r16,0(sp)
   42a6c:	dec00304 	addi	sp,sp,12
   42a70:	f800283a 	ret
   42a74:	80800517 	ldw	r2,20(r16)
   42a78:	80000215 	stw	zero,8(r16)
   42a7c:	0085c83a 	sub	r2,zero,r2
   42a80:	80800615 	stw	r2,24(r16)
   42a84:	283ff51e 	bne	r5,zero,42a5c <__swsetup_r+0x64>
   42a88:	2080200c 	andi	r2,r4,128
   42a8c:	103ff326 	beq	r2,zero,42a5c <__swsetup_r+0x64>
   42a90:	00bfffc4 	movi	r2,-1
   42a94:	003ff206 	br	42a60 <__swsetup_r+0x68>
   42a98:	80800517 	ldw	r2,20(r16)
   42a9c:	80800215 	stw	r2,8(r16)
   42aa0:	003fed06 	br	42a58 <__swsetup_r+0x60>
   42aa4:	1809883a 	mov	r4,r3
   42aa8:	00445980 	call	44598 <__sinit>
   42aac:	003fde06 	br	42a28 <__swsetup_r+0x30>
   42ab0:	20c0a00c 	andi	r3,r4,640
   42ab4:	00808004 	movi	r2,512
   42ab8:	18bfe026 	beq	r3,r2,42a3c <__swsetup_r+0x44>
   42abc:	8809883a 	mov	r4,r17
   42ac0:	800b883a 	mov	r5,r16
   42ac4:	00453100 	call	45310 <__smakebuf_r>
   42ac8:	8100030b 	ldhu	r4,12(r16)
   42acc:	81400417 	ldw	r5,16(r16)
   42ad0:	003fda06 	br	42a3c <__swsetup_r+0x44>
   42ad4:	2080040c 	andi	r2,r4,16
   42ad8:	103fed26 	beq	r2,zero,42a90 <__swsetup_r+0x98>
   42adc:	2080010c 	andi	r2,r4,4
   42ae0:	10001226 	beq	r2,zero,42b2c <__swsetup_r+0x134>
   42ae4:	81400c17 	ldw	r5,48(r16)
   42ae8:	28000526 	beq	r5,zero,42b00 <__swsetup_r+0x108>
   42aec:	80801004 	addi	r2,r16,64
   42af0:	28800226 	beq	r5,r2,42afc <__swsetup_r+0x104>
   42af4:	8809883a 	mov	r4,r17
   42af8:	004491c0 	call	4491c <_free_r>
   42afc:	80000c15 	stw	zero,48(r16)
   42b00:	8080030b 	ldhu	r2,12(r16)
   42b04:	81400417 	ldw	r5,16(r16)
   42b08:	80000115 	stw	zero,4(r16)
   42b0c:	10bff6cc 	andi	r2,r2,65499
   42b10:	8080030d 	sth	r2,12(r16)
   42b14:	81400015 	stw	r5,0(r16)
   42b18:	8080030b 	ldhu	r2,12(r16)
   42b1c:	10800214 	ori	r2,r2,8
   42b20:	113fffcc 	andi	r4,r2,65535
   42b24:	8080030d 	sth	r2,12(r16)
   42b28:	003fc306 	br	42a38 <__swsetup_r+0x40>
   42b2c:	81400417 	ldw	r5,16(r16)
   42b30:	003ff906 	br	42b18 <__swsetup_r+0x120>

00042b34 <quorem>:
   42b34:	28c00417 	ldw	r3,16(r5)
   42b38:	20800417 	ldw	r2,16(r4)
   42b3c:	defff604 	addi	sp,sp,-40
   42b40:	ddc00715 	stw	r23,28(sp)
   42b44:	dd400515 	stw	r21,20(sp)
   42b48:	dfc00915 	stw	ra,36(sp)
   42b4c:	df000815 	stw	fp,32(sp)
   42b50:	dd800615 	stw	r22,24(sp)
   42b54:	dd000415 	stw	r20,16(sp)
   42b58:	dcc00315 	stw	r19,12(sp)
   42b5c:	dc800215 	stw	r18,8(sp)
   42b60:	dc400115 	stw	r17,4(sp)
   42b64:	dc000015 	stw	r16,0(sp)
   42b68:	202f883a 	mov	r23,r4
   42b6c:	282b883a 	mov	r21,r5
   42b70:	10c07416 	blt	r2,r3,42d44 <quorem+0x210>
   42b74:	1c7fffc4 	addi	r17,r3,-1
   42b78:	8c45883a 	add	r2,r17,r17
   42b7c:	1085883a 	add	r2,r2,r2
   42b80:	2c000504 	addi	r16,r5,20
   42b84:	24c00504 	addi	r19,r4,20
   42b88:	14ed883a 	add	r22,r2,r19
   42b8c:	80a5883a 	add	r18,r16,r2
   42b90:	b7000017 	ldw	fp,0(r22)
   42b94:	91400017 	ldw	r5,0(r18)
   42b98:	e009883a 	mov	r4,fp
   42b9c:	29400044 	addi	r5,r5,1
   42ba0:	0049a280 	call	49a28 <__udivsi3>
   42ba4:	1029883a 	mov	r20,r2
   42ba8:	10003c1e 	bne	r2,zero,42c9c <quorem+0x168>
   42bac:	a80b883a 	mov	r5,r21
   42bb0:	b809883a 	mov	r4,r23
   42bb4:	004603c0 	call	4603c <__mcmp>
   42bb8:	10002b16 	blt	r2,zero,42c68 <quorem+0x134>
   42bbc:	a5000044 	addi	r20,r20,1
   42bc0:	980f883a 	mov	r7,r19
   42bc4:	0011883a 	mov	r8,zero
   42bc8:	0009883a 	mov	r4,zero
   42bcc:	81400017 	ldw	r5,0(r16)
   42bd0:	38c00017 	ldw	r3,0(r7)
   42bd4:	84000104 	addi	r16,r16,4
   42bd8:	28bfffcc 	andi	r2,r5,65535
   42bdc:	2085883a 	add	r2,r4,r2
   42be0:	11bfffcc 	andi	r6,r2,65535
   42be4:	193fffcc 	andi	r4,r3,65535
   42be8:	1004d43a 	srli	r2,r2,16
   42bec:	280ad43a 	srli	r5,r5,16
   42bf0:	2189c83a 	sub	r4,r4,r6
   42bf4:	2209883a 	add	r4,r4,r8
   42bf8:	1806d43a 	srli	r3,r3,16
   42bfc:	288b883a 	add	r5,r5,r2
   42c00:	200dd43a 	srai	r6,r4,16
   42c04:	28bfffcc 	andi	r2,r5,65535
   42c08:	1887c83a 	sub	r3,r3,r2
   42c0c:	1987883a 	add	r3,r3,r6
   42c10:	3900000d 	sth	r4,0(r7)
   42c14:	38c0008d 	sth	r3,2(r7)
   42c18:	2808d43a 	srli	r4,r5,16
   42c1c:	39c00104 	addi	r7,r7,4
   42c20:	1811d43a 	srai	r8,r3,16
   42c24:	943fe92e 	bgeu	r18,r16,42bcc <quorem+0x98>
   42c28:	8c45883a 	add	r2,r17,r17
   42c2c:	1085883a 	add	r2,r2,r2
   42c30:	9885883a 	add	r2,r19,r2
   42c34:	10c00017 	ldw	r3,0(r2)
   42c38:	18000b1e 	bne	r3,zero,42c68 <quorem+0x134>
   42c3c:	113fff04 	addi	r4,r2,-4
   42c40:	9900082e 	bgeu	r19,r4,42c64 <quorem+0x130>
   42c44:	10bfff17 	ldw	r2,-4(r2)
   42c48:	10000326 	beq	r2,zero,42c58 <quorem+0x124>
   42c4c:	00000506 	br	42c64 <quorem+0x130>
   42c50:	20800017 	ldw	r2,0(r4)
   42c54:	1000031e 	bne	r2,zero,42c64 <quorem+0x130>
   42c58:	213fff04 	addi	r4,r4,-4
   42c5c:	8c7fffc4 	addi	r17,r17,-1
   42c60:	993ffb36 	bltu	r19,r4,42c50 <quorem+0x11c>
   42c64:	bc400415 	stw	r17,16(r23)
   42c68:	a005883a 	mov	r2,r20
   42c6c:	dfc00917 	ldw	ra,36(sp)
   42c70:	df000817 	ldw	fp,32(sp)
   42c74:	ddc00717 	ldw	r23,28(sp)
   42c78:	dd800617 	ldw	r22,24(sp)
   42c7c:	dd400517 	ldw	r21,20(sp)
   42c80:	dd000417 	ldw	r20,16(sp)
   42c84:	dcc00317 	ldw	r19,12(sp)
   42c88:	dc800217 	ldw	r18,8(sp)
   42c8c:	dc400117 	ldw	r17,4(sp)
   42c90:	dc000017 	ldw	r16,0(sp)
   42c94:	dec00a04 	addi	sp,sp,40
   42c98:	f800283a 	ret
   42c9c:	980f883a 	mov	r7,r19
   42ca0:	8011883a 	mov	r8,r16
   42ca4:	0013883a 	mov	r9,zero
   42ca8:	000d883a 	mov	r6,zero
   42cac:	40c00017 	ldw	r3,0(r8)
   42cb0:	39000017 	ldw	r4,0(r7)
   42cb4:	42000104 	addi	r8,r8,4
   42cb8:	18bfffcc 	andi	r2,r3,65535
   42cbc:	a085383a 	mul	r2,r20,r2
   42cc0:	1806d43a 	srli	r3,r3,16
   42cc4:	217fffcc 	andi	r5,r4,65535
   42cc8:	3085883a 	add	r2,r6,r2
   42ccc:	11bfffcc 	andi	r6,r2,65535
   42cd0:	a0c7383a 	mul	r3,r20,r3
   42cd4:	1004d43a 	srli	r2,r2,16
   42cd8:	298bc83a 	sub	r5,r5,r6
   42cdc:	2a4b883a 	add	r5,r5,r9
   42ce0:	2008d43a 	srli	r4,r4,16
   42ce4:	1887883a 	add	r3,r3,r2
   42ce8:	280dd43a 	srai	r6,r5,16
   42cec:	18bfffcc 	andi	r2,r3,65535
   42cf0:	2089c83a 	sub	r4,r4,r2
   42cf4:	2189883a 	add	r4,r4,r6
   42cf8:	3900008d 	sth	r4,2(r7)
   42cfc:	3940000d 	sth	r5,0(r7)
   42d00:	180cd43a 	srli	r6,r3,16
   42d04:	39c00104 	addi	r7,r7,4
   42d08:	2013d43a 	srai	r9,r4,16
   42d0c:	923fe72e 	bgeu	r18,r8,42cac <quorem+0x178>
   42d10:	e03fa61e 	bne	fp,zero,42bac <quorem+0x78>
   42d14:	b0ffff04 	addi	r3,r22,-4
   42d18:	98c0082e 	bgeu	r19,r3,42d3c <quorem+0x208>
   42d1c:	b0bfff17 	ldw	r2,-4(r22)
   42d20:	10000326 	beq	r2,zero,42d30 <quorem+0x1fc>
   42d24:	00000506 	br	42d3c <quorem+0x208>
   42d28:	18800017 	ldw	r2,0(r3)
   42d2c:	1000031e 	bne	r2,zero,42d3c <quorem+0x208>
   42d30:	18ffff04 	addi	r3,r3,-4
   42d34:	8c7fffc4 	addi	r17,r17,-1
   42d38:	98fffb36 	bltu	r19,r3,42d28 <quorem+0x1f4>
   42d3c:	bc400415 	stw	r17,16(r23)
   42d40:	003f9a06 	br	42bac <quorem+0x78>
   42d44:	0005883a 	mov	r2,zero
   42d48:	003fc806 	br	42c6c <quorem+0x138>

00042d4c <_dtoa_r>:
   42d4c:	22001017 	ldw	r8,64(r4)
   42d50:	deffda04 	addi	sp,sp,-152
   42d54:	dd402115 	stw	r21,132(sp)
   42d58:	dd002015 	stw	r20,128(sp)
   42d5c:	dc801e15 	stw	r18,120(sp)
   42d60:	dc401d15 	stw	r17,116(sp)
   42d64:	dfc02515 	stw	ra,148(sp)
   42d68:	df002415 	stw	fp,144(sp)
   42d6c:	ddc02315 	stw	r23,140(sp)
   42d70:	dd802215 	stw	r22,136(sp)
   42d74:	dcc01f15 	stw	r19,124(sp)
   42d78:	dc001c15 	stw	r16,112(sp)
   42d7c:	d9001615 	stw	r4,88(sp)
   42d80:	3023883a 	mov	r17,r6
   42d84:	2829883a 	mov	r20,r5
   42d88:	d9c01715 	stw	r7,92(sp)
   42d8c:	dc802817 	ldw	r18,160(sp)
   42d90:	302b883a 	mov	r21,r6
   42d94:	40000a26 	beq	r8,zero,42dc0 <_dtoa_r+0x74>
   42d98:	20801117 	ldw	r2,68(r4)
   42d9c:	400b883a 	mov	r5,r8
   42da0:	40800115 	stw	r2,4(r8)
   42da4:	20c01117 	ldw	r3,68(r4)
   42da8:	00800044 	movi	r2,1
   42dac:	10c4983a 	sll	r2,r2,r3
   42db0:	40800215 	stw	r2,8(r8)
   42db4:	0045ee00 	call	45ee0 <_Bfree>
   42db8:	d8c01617 	ldw	r3,88(sp)
   42dbc:	18001015 	stw	zero,64(r3)
   42dc0:	8800a316 	blt	r17,zero,43050 <_dtoa_r+0x304>
   42dc4:	90000015 	stw	zero,0(r18)
   42dc8:	a8dffc2c 	andhi	r3,r21,32752
   42dcc:	009ffc34 	movhi	r2,32752
   42dd0:	18809126 	beq	r3,r2,43018 <_dtoa_r+0x2cc>
   42dd4:	000d883a 	mov	r6,zero
   42dd8:	000f883a 	mov	r7,zero
   42ddc:	a009883a 	mov	r4,r20
   42de0:	a80b883a 	mov	r5,r21
   42de4:	dd001215 	stw	r20,72(sp)
   42de8:	dd401315 	stw	r21,76(sp)
   42dec:	00493680 	call	49368 <__nedf2>
   42df0:	1000171e 	bne	r2,zero,42e50 <_dtoa_r+0x104>
   42df4:	d9802717 	ldw	r6,156(sp)
   42df8:	00800044 	movi	r2,1
   42dfc:	30800015 	stw	r2,0(r6)
   42e00:	d8802917 	ldw	r2,164(sp)
   42e04:	10029b26 	beq	r2,zero,43874 <_dtoa_r+0xb28>
   42e08:	d9002917 	ldw	r4,164(sp)
   42e0c:	00900034 	movhi	r2,16384
   42e10:	10802a44 	addi	r2,r2,169
   42e14:	10ffffc4 	addi	r3,r2,-1
   42e18:	20800015 	stw	r2,0(r4)
   42e1c:	1805883a 	mov	r2,r3
   42e20:	dfc02517 	ldw	ra,148(sp)
   42e24:	df002417 	ldw	fp,144(sp)
   42e28:	ddc02317 	ldw	r23,140(sp)
   42e2c:	dd802217 	ldw	r22,136(sp)
   42e30:	dd402117 	ldw	r21,132(sp)
   42e34:	dd002017 	ldw	r20,128(sp)
   42e38:	dcc01f17 	ldw	r19,124(sp)
   42e3c:	dc801e17 	ldw	r18,120(sp)
   42e40:	dc401d17 	ldw	r17,116(sp)
   42e44:	dc001c17 	ldw	r16,112(sp)
   42e48:	dec02604 	addi	sp,sp,152
   42e4c:	f800283a 	ret
   42e50:	d9001617 	ldw	r4,88(sp)
   42e54:	d9401217 	ldw	r5,72(sp)
   42e58:	d8800104 	addi	r2,sp,4
   42e5c:	a80d883a 	mov	r6,r21
   42e60:	d9c00204 	addi	r7,sp,8
   42e64:	d8800015 	stw	r2,0(sp)
   42e68:	004651c0 	call	4651c <__d2b>
   42e6c:	d8800715 	stw	r2,28(sp)
   42e70:	a804d53a 	srli	r2,r21,20
   42e74:	1101ffcc 	andi	r4,r2,2047
   42e78:	20008626 	beq	r4,zero,43094 <_dtoa_r+0x348>
   42e7c:	d8c01217 	ldw	r3,72(sp)
   42e80:	00800434 	movhi	r2,16
   42e84:	10bfffc4 	addi	r2,r2,-1
   42e88:	ddc00117 	ldw	r23,4(sp)
   42e8c:	a884703a 	and	r2,r21,r2
   42e90:	1811883a 	mov	r8,r3
   42e94:	124ffc34 	orhi	r9,r2,16368
   42e98:	25bf0044 	addi	r22,r4,-1023
   42e9c:	d8000815 	stw	zero,32(sp)
   42ea0:	0005883a 	mov	r2,zero
   42ea4:	00cffe34 	movhi	r3,16376
   42ea8:	480b883a 	mov	r5,r9
   42eac:	4009883a 	mov	r4,r8
   42eb0:	180f883a 	mov	r7,r3
   42eb4:	100d883a 	mov	r6,r2
   42eb8:	0048be00 	call	48be0 <__subdf3>
   42ebc:	0218dbf4 	movhi	r8,25455
   42ec0:	4210d844 	addi	r8,r8,17249
   42ec4:	024ff4f4 	movhi	r9,16339
   42ec8:	4a61e9c4 	addi	r9,r9,-30809
   42ecc:	480f883a 	mov	r7,r9
   42ed0:	400d883a 	mov	r6,r8
   42ed4:	180b883a 	mov	r5,r3
   42ed8:	1009883a 	mov	r4,r2
   42edc:	0048cd40 	call	48cd4 <__muldf3>
   42ee0:	0222d874 	movhi	r8,35681
   42ee4:	42322cc4 	addi	r8,r8,-14157
   42ee8:	024ff1f4 	movhi	r9,16327
   42eec:	4a628a04 	addi	r9,r9,-30168
   42ef0:	480f883a 	mov	r7,r9
   42ef4:	400d883a 	mov	r6,r8
   42ef8:	180b883a 	mov	r5,r3
   42efc:	1009883a 	mov	r4,r2
   42f00:	0048c600 	call	48c60 <__adddf3>
   42f04:	b009883a 	mov	r4,r22
   42f08:	1021883a 	mov	r16,r2
   42f0c:	1823883a 	mov	r17,r3
   42f10:	00495880 	call	49588 <__floatsidf>
   42f14:	021427f4 	movhi	r8,20639
   42f18:	421e7ec4 	addi	r8,r8,31227
   42f1c:	024ff4f4 	movhi	r9,16339
   42f20:	4a5104c4 	addi	r9,r9,17427
   42f24:	480f883a 	mov	r7,r9
   42f28:	400d883a 	mov	r6,r8
   42f2c:	180b883a 	mov	r5,r3
   42f30:	1009883a 	mov	r4,r2
   42f34:	0048cd40 	call	48cd4 <__muldf3>
   42f38:	180f883a 	mov	r7,r3
   42f3c:	880b883a 	mov	r5,r17
   42f40:	100d883a 	mov	r6,r2
   42f44:	8009883a 	mov	r4,r16
   42f48:	0048c600 	call	48c60 <__adddf3>
   42f4c:	1009883a 	mov	r4,r2
   42f50:	180b883a 	mov	r5,r3
   42f54:	1021883a 	mov	r16,r2
   42f58:	1823883a 	mov	r17,r3
   42f5c:	00496800 	call	49680 <__fixdfsi>
   42f60:	000d883a 	mov	r6,zero
   42f64:	000f883a 	mov	r7,zero
   42f68:	8009883a 	mov	r4,r16
   42f6c:	880b883a 	mov	r5,r17
   42f70:	d8800d15 	stw	r2,52(sp)
   42f74:	00495000 	call	49500 <__ltdf2>
   42f78:	10031716 	blt	r2,zero,43bd8 <_dtoa_r+0xe8c>
   42f7c:	d8c00d17 	ldw	r3,52(sp)
   42f80:	00800584 	movi	r2,22
   42f84:	10c1482e 	bgeu	r2,r3,434a8 <_dtoa_r+0x75c>
   42f88:	01000044 	movi	r4,1
   42f8c:	d9000c15 	stw	r4,48(sp)
   42f90:	bd85c83a 	sub	r2,r23,r22
   42f94:	11bfffc4 	addi	r6,r2,-1
   42f98:	30030b16 	blt	r6,zero,43bc8 <_dtoa_r+0xe7c>
   42f9c:	d9800a15 	stw	r6,40(sp)
   42fa0:	d8001115 	stw	zero,68(sp)
   42fa4:	d8c00d17 	ldw	r3,52(sp)
   42fa8:	1802ff16 	blt	r3,zero,43ba8 <_dtoa_r+0xe5c>
   42fac:	d9000a17 	ldw	r4,40(sp)
   42fb0:	d8c00915 	stw	r3,36(sp)
   42fb4:	d8001015 	stw	zero,64(sp)
   42fb8:	20c9883a 	add	r4,r4,r3
   42fbc:	d9000a15 	stw	r4,40(sp)
   42fc0:	d9001717 	ldw	r4,92(sp)
   42fc4:	00800244 	movi	r2,9
   42fc8:	11004636 	bltu	r2,r4,430e4 <_dtoa_r+0x398>
   42fcc:	00800144 	movi	r2,5
   42fd0:	11020416 	blt	r2,r4,437e4 <_dtoa_r+0xa98>
   42fd4:	04400044 	movi	r17,1
   42fd8:	d8c01717 	ldw	r3,92(sp)
   42fdc:	00800144 	movi	r2,5
   42fe0:	10c1ed36 	bltu	r2,r3,43798 <_dtoa_r+0xa4c>
   42fe4:	18c5883a 	add	r2,r3,r3
   42fe8:	1085883a 	add	r2,r2,r2
   42fec:	00c00134 	movhi	r3,4
   42ff0:	18cc0004 	addi	r3,r3,12288
   42ff4:	10c5883a 	add	r2,r2,r3
   42ff8:	11000017 	ldw	r4,0(r2)
   42ffc:	2000683a 	jmp	r4
   43000:	000430ec 	andhi	zero,zero,4291
   43004:	000430ec 	andhi	zero,zero,4291
   43008:	00043aec 	andhi	zero,zero,4331
   4300c:	00043ac4 	movi	zero,4331
   43010:	00043b08 	cmpgei	zero,zero,4332
   43014:	00043b14 	movui	zero,4332
   43018:	d9002717 	ldw	r4,156(sp)
   4301c:	0089c3c4 	movi	r2,9999
   43020:	20800015 	stw	r2,0(r4)
   43024:	a0001026 	beq	r20,zero,43068 <_dtoa_r+0x31c>
   43028:	00d00034 	movhi	r3,16384
   4302c:	18c03604 	addi	r3,r3,216
   43030:	d9802917 	ldw	r6,164(sp)
   43034:	303f7926 	beq	r6,zero,42e1c <_dtoa_r+0xd0>
   43038:	188000c7 	ldb	r2,3(r3)
   4303c:	190000c4 	addi	r4,r3,3
   43040:	1000101e 	bne	r2,zero,43084 <_dtoa_r+0x338>
   43044:	d8802917 	ldw	r2,164(sp)
   43048:	11000015 	stw	r4,0(r2)
   4304c:	003f7306 	br	42e1c <_dtoa_r+0xd0>
   43050:	00a00034 	movhi	r2,32768
   43054:	10bfffc4 	addi	r2,r2,-1
   43058:	00c00044 	movi	r3,1
   4305c:	88aa703a 	and	r21,r17,r2
   43060:	90c00015 	stw	r3,0(r18)
   43064:	003f5806 	br	42dc8 <_dtoa_r+0x7c>
   43068:	00800434 	movhi	r2,16
   4306c:	10bfffc4 	addi	r2,r2,-1
   43070:	a884703a 	and	r2,r21,r2
   43074:	103fec1e 	bne	r2,zero,43028 <_dtoa_r+0x2dc>
   43078:	00d00034 	movhi	r3,16384
   4307c:	18c03304 	addi	r3,r3,204
   43080:	003feb06 	br	43030 <_dtoa_r+0x2e4>
   43084:	d8802917 	ldw	r2,164(sp)
   43088:	19000204 	addi	r4,r3,8
   4308c:	11000015 	stw	r4,0(r2)
   43090:	003f6206 	br	42e1c <_dtoa_r+0xd0>
   43094:	ddc00117 	ldw	r23,4(sp)
   43098:	d8800217 	ldw	r2,8(sp)
   4309c:	01000804 	movi	r4,32
   430a0:	b8c10c84 	addi	r3,r23,1074
   430a4:	18a3883a 	add	r17,r3,r2
   430a8:	2441b80e 	bge	r4,r17,4378c <_dtoa_r+0xa40>
   430ac:	00c01004 	movi	r3,64
   430b0:	1c47c83a 	sub	r3,r3,r17
   430b4:	88bff804 	addi	r2,r17,-32
   430b8:	a8c6983a 	sll	r3,r21,r3
   430bc:	a084d83a 	srl	r2,r20,r2
   430c0:	1888b03a 	or	r4,r3,r2
   430c4:	00497580 	call	49758 <__floatunsidf>
   430c8:	1011883a 	mov	r8,r2
   430cc:	00bf8434 	movhi	r2,65040
   430d0:	01000044 	movi	r4,1
   430d4:	10d3883a 	add	r9,r2,r3
   430d8:	8dbef344 	addi	r22,r17,-1075
   430dc:	d9000815 	stw	r4,32(sp)
   430e0:	003f6f06 	br	42ea0 <_dtoa_r+0x154>
   430e4:	d8001715 	stw	zero,92(sp)
   430e8:	04400044 	movi	r17,1
   430ec:	00bfffc4 	movi	r2,-1
   430f0:	00c00044 	movi	r3,1
   430f4:	d8800e15 	stw	r2,56(sp)
   430f8:	d8002615 	stw	zero,152(sp)
   430fc:	d8800f15 	stw	r2,60(sp)
   43100:	d8c00b15 	stw	r3,44(sp)
   43104:	1021883a 	mov	r16,r2
   43108:	d8801617 	ldw	r2,88(sp)
   4310c:	10001115 	stw	zero,68(r2)
   43110:	d8801617 	ldw	r2,88(sp)
   43114:	11401117 	ldw	r5,68(r2)
   43118:	1009883a 	mov	r4,r2
   4311c:	00464600 	call	46460 <_Balloc>
   43120:	d8c01617 	ldw	r3,88(sp)
   43124:	d8800515 	stw	r2,20(sp)
   43128:	18801015 	stw	r2,64(r3)
   4312c:	00800384 	movi	r2,14
   43130:	14006836 	bltu	r2,r16,432d4 <_dtoa_r+0x588>
   43134:	8805003a 	cmpeq	r2,r17,zero
   43138:	1000661e 	bne	r2,zero,432d4 <_dtoa_r+0x588>
   4313c:	d9000d17 	ldw	r4,52(sp)
   43140:	0102300e 	bge	zero,r4,43a04 <_dtoa_r+0xcb8>
   43144:	208003cc 	andi	r2,r4,15
   43148:	100490fa 	slli	r2,r2,3
   4314c:	2025d13a 	srai	r18,r4,4
   43150:	00d00034 	movhi	r3,16384
   43154:	18c04804 	addi	r3,r3,288
   43158:	10c5883a 	add	r2,r2,r3
   4315c:	90c0040c 	andi	r3,r18,16
   43160:	14000017 	ldw	r16,0(r2)
   43164:	14400117 	ldw	r17,4(r2)
   43168:	18036a1e 	bne	r3,zero,43f14 <_dtoa_r+0x11c8>
   4316c:	05800084 	movi	r22,2
   43170:	90001026 	beq	r18,zero,431b4 <_dtoa_r+0x468>
   43174:	04d00034 	movhi	r19,16384
   43178:	9cc07a04 	addi	r19,r19,488
   4317c:	9080004c 	andi	r2,r18,1
   43180:	1005003a 	cmpeq	r2,r2,zero
   43184:	1000081e 	bne	r2,zero,431a8 <_dtoa_r+0x45c>
   43188:	99800017 	ldw	r6,0(r19)
   4318c:	99c00117 	ldw	r7,4(r19)
   43190:	880b883a 	mov	r5,r17
   43194:	8009883a 	mov	r4,r16
   43198:	0048cd40 	call	48cd4 <__muldf3>
   4319c:	1021883a 	mov	r16,r2
   431a0:	b5800044 	addi	r22,r22,1
   431a4:	1823883a 	mov	r17,r3
   431a8:	9025d07a 	srai	r18,r18,1
   431ac:	9cc00204 	addi	r19,r19,8
   431b0:	903ff21e 	bne	r18,zero,4317c <_dtoa_r+0x430>
   431b4:	a80b883a 	mov	r5,r21
   431b8:	a009883a 	mov	r4,r20
   431bc:	880f883a 	mov	r7,r17
   431c0:	800d883a 	mov	r6,r16
   431c4:	00490880 	call	49088 <__divdf3>
   431c8:	1029883a 	mov	r20,r2
   431cc:	182b883a 	mov	r21,r3
   431d0:	d8c00c17 	ldw	r3,48(sp)
   431d4:	1805003a 	cmpeq	r2,r3,zero
   431d8:	1000081e 	bne	r2,zero,431fc <_dtoa_r+0x4b0>
   431dc:	0005883a 	mov	r2,zero
   431e0:	00cffc34 	movhi	r3,16368
   431e4:	180f883a 	mov	r7,r3
   431e8:	a009883a 	mov	r4,r20
   431ec:	a80b883a 	mov	r5,r21
   431f0:	100d883a 	mov	r6,r2
   431f4:	00495000 	call	49500 <__ltdf2>
   431f8:	1003fe16 	blt	r2,zero,441f4 <_dtoa_r+0x14a8>
   431fc:	b009883a 	mov	r4,r22
   43200:	00495880 	call	49588 <__floatsidf>
   43204:	180b883a 	mov	r5,r3
   43208:	1009883a 	mov	r4,r2
   4320c:	a00d883a 	mov	r6,r20
   43210:	a80f883a 	mov	r7,r21
   43214:	0048cd40 	call	48cd4 <__muldf3>
   43218:	0011883a 	mov	r8,zero
   4321c:	02500734 	movhi	r9,16412
   43220:	1009883a 	mov	r4,r2
   43224:	180b883a 	mov	r5,r3
   43228:	480f883a 	mov	r7,r9
   4322c:	400d883a 	mov	r6,r8
   43230:	0048c600 	call	48c60 <__adddf3>
   43234:	d9000f17 	ldw	r4,60(sp)
   43238:	102d883a 	mov	r22,r2
   4323c:	00bf3034 	movhi	r2,64704
   43240:	18b9883a 	add	fp,r3,r2
   43244:	e02f883a 	mov	r23,fp
   43248:	20028f1e 	bne	r4,zero,43c88 <_dtoa_r+0xf3c>
   4324c:	0005883a 	mov	r2,zero
   43250:	00d00534 	movhi	r3,16404
   43254:	a009883a 	mov	r4,r20
   43258:	a80b883a 	mov	r5,r21
   4325c:	180f883a 	mov	r7,r3
   43260:	100d883a 	mov	r6,r2
   43264:	0048be00 	call	48be0 <__subdf3>
   43268:	1009883a 	mov	r4,r2
   4326c:	e00f883a 	mov	r7,fp
   43270:	180b883a 	mov	r5,r3
   43274:	b00d883a 	mov	r6,r22
   43278:	1025883a 	mov	r18,r2
   4327c:	1827883a 	mov	r19,r3
   43280:	00493f00 	call	493f0 <__gtdf2>
   43284:	00834f16 	blt	zero,r2,43fc4 <_dtoa_r+0x1278>
   43288:	e0e0003c 	xorhi	r3,fp,32768
   4328c:	9009883a 	mov	r4,r18
   43290:	980b883a 	mov	r5,r19
   43294:	180f883a 	mov	r7,r3
   43298:	b00d883a 	mov	r6,r22
   4329c:	00495000 	call	49500 <__ltdf2>
   432a0:	1000080e 	bge	r2,zero,432c4 <_dtoa_r+0x578>
   432a4:	0027883a 	mov	r19,zero
   432a8:	0025883a 	mov	r18,zero
   432ac:	d8802617 	ldw	r2,152(sp)
   432b0:	df000517 	ldw	fp,20(sp)
   432b4:	d8000615 	stw	zero,24(sp)
   432b8:	0084303a 	nor	r2,zero,r2
   432bc:	d8800d15 	stw	r2,52(sp)
   432c0:	00019b06 	br	43930 <_dtoa_r+0xbe4>
   432c4:	d9801217 	ldw	r6,72(sp)
   432c8:	d8801317 	ldw	r2,76(sp)
   432cc:	3029883a 	mov	r20,r6
   432d0:	102b883a 	mov	r21,r2
   432d4:	d8c00217 	ldw	r3,8(sp)
   432d8:	18008516 	blt	r3,zero,434f0 <_dtoa_r+0x7a4>
   432dc:	d9000d17 	ldw	r4,52(sp)
   432e0:	00800384 	movi	r2,14
   432e4:	11008216 	blt	r2,r4,434f0 <_dtoa_r+0x7a4>
   432e8:	200490fa 	slli	r2,r4,3
   432ec:	d9802617 	ldw	r6,152(sp)
   432f0:	00d00034 	movhi	r3,16384
   432f4:	18c04804 	addi	r3,r3,288
   432f8:	10c5883a 	add	r2,r2,r3
   432fc:	14800017 	ldw	r18,0(r2)
   43300:	14c00117 	ldw	r19,4(r2)
   43304:	30031e16 	blt	r6,zero,43f80 <_dtoa_r+0x1234>
   43308:	d9000517 	ldw	r4,20(sp)
   4330c:	d8c00f17 	ldw	r3,60(sp)
   43310:	a823883a 	mov	r17,r21
   43314:	a021883a 	mov	r16,r20
   43318:	192b883a 	add	r21,r3,r4
   4331c:	2039883a 	mov	fp,r4
   43320:	00000f06 	br	43360 <_dtoa_r+0x614>
   43324:	0005883a 	mov	r2,zero
   43328:	00d00934 	movhi	r3,16420
   4332c:	5009883a 	mov	r4,r10
   43330:	580b883a 	mov	r5,r11
   43334:	180f883a 	mov	r7,r3
   43338:	100d883a 	mov	r6,r2
   4333c:	0048cd40 	call	48cd4 <__muldf3>
   43340:	180b883a 	mov	r5,r3
   43344:	000d883a 	mov	r6,zero
   43348:	000f883a 	mov	r7,zero
   4334c:	1009883a 	mov	r4,r2
   43350:	1021883a 	mov	r16,r2
   43354:	1823883a 	mov	r17,r3
   43358:	00493680 	call	49368 <__nedf2>
   4335c:	10004526 	beq	r2,zero,43474 <_dtoa_r+0x728>
   43360:	900d883a 	mov	r6,r18
   43364:	980f883a 	mov	r7,r19
   43368:	8009883a 	mov	r4,r16
   4336c:	880b883a 	mov	r5,r17
   43370:	00490880 	call	49088 <__divdf3>
   43374:	180b883a 	mov	r5,r3
   43378:	1009883a 	mov	r4,r2
   4337c:	00496800 	call	49680 <__fixdfsi>
   43380:	1009883a 	mov	r4,r2
   43384:	1029883a 	mov	r20,r2
   43388:	00495880 	call	49588 <__floatsidf>
   4338c:	180f883a 	mov	r7,r3
   43390:	9009883a 	mov	r4,r18
   43394:	980b883a 	mov	r5,r19
   43398:	100d883a 	mov	r6,r2
   4339c:	0048cd40 	call	48cd4 <__muldf3>
   433a0:	180f883a 	mov	r7,r3
   433a4:	880b883a 	mov	r5,r17
   433a8:	8009883a 	mov	r4,r16
   433ac:	100d883a 	mov	r6,r2
   433b0:	0048be00 	call	48be0 <__subdf3>
   433b4:	1015883a 	mov	r10,r2
   433b8:	a0800c04 	addi	r2,r20,48
   433bc:	e0800005 	stb	r2,0(fp)
   433c0:	e7000044 	addi	fp,fp,1
   433c4:	1817883a 	mov	r11,r3
   433c8:	e57fd61e 	bne	fp,r21,43324 <_dtoa_r+0x5d8>
   433cc:	500d883a 	mov	r6,r10
   433d0:	180f883a 	mov	r7,r3
   433d4:	5009883a 	mov	r4,r10
   433d8:	180b883a 	mov	r5,r3
   433dc:	0048c600 	call	48c60 <__adddf3>
   433e0:	100d883a 	mov	r6,r2
   433e4:	9009883a 	mov	r4,r18
   433e8:	980b883a 	mov	r5,r19
   433ec:	180f883a 	mov	r7,r3
   433f0:	1021883a 	mov	r16,r2
   433f4:	1823883a 	mov	r17,r3
   433f8:	00495000 	call	49500 <__ltdf2>
   433fc:	10000816 	blt	r2,zero,43420 <_dtoa_r+0x6d4>
   43400:	980b883a 	mov	r5,r19
   43404:	800d883a 	mov	r6,r16
   43408:	880f883a 	mov	r7,r17
   4340c:	9009883a 	mov	r4,r18
   43410:	00492e00 	call	492e0 <__eqdf2>
   43414:	1000171e 	bne	r2,zero,43474 <_dtoa_r+0x728>
   43418:	a080004c 	andi	r2,r20,1
   4341c:	10001526 	beq	r2,zero,43474 <_dtoa_r+0x728>
   43420:	d8800d17 	ldw	r2,52(sp)
   43424:	d8800415 	stw	r2,16(sp)
   43428:	e009883a 	mov	r4,fp
   4342c:	213fffc4 	addi	r4,r4,-1
   43430:	20c00007 	ldb	r3,0(r4)
   43434:	00800e44 	movi	r2,57
   43438:	1880081e 	bne	r3,r2,4345c <_dtoa_r+0x710>
   4343c:	d8800517 	ldw	r2,20(sp)
   43440:	113ffa1e 	bne	r2,r4,4342c <_dtoa_r+0x6e0>
   43444:	d8c00417 	ldw	r3,16(sp)
   43448:	d9800517 	ldw	r6,20(sp)
   4344c:	00800c04 	movi	r2,48
   43450:	18c00044 	addi	r3,r3,1
   43454:	d8c00415 	stw	r3,16(sp)
   43458:	30800005 	stb	r2,0(r6)
   4345c:	20800003 	ldbu	r2,0(r4)
   43460:	d8c00417 	ldw	r3,16(sp)
   43464:	27000044 	addi	fp,r4,1
   43468:	10800044 	addi	r2,r2,1
   4346c:	d8c00d15 	stw	r3,52(sp)
   43470:	20800005 	stb	r2,0(r4)
   43474:	d9001617 	ldw	r4,88(sp)
   43478:	d9400717 	ldw	r5,28(sp)
   4347c:	0045ee00 	call	45ee0 <_Bfree>
   43480:	e0000005 	stb	zero,0(fp)
   43484:	d9800d17 	ldw	r6,52(sp)
   43488:	d8c02717 	ldw	r3,156(sp)
   4348c:	d9002917 	ldw	r4,164(sp)
   43490:	30800044 	addi	r2,r6,1
   43494:	18800015 	stw	r2,0(r3)
   43498:	20029c26 	beq	r4,zero,43f0c <_dtoa_r+0x11c0>
   4349c:	d8c00517 	ldw	r3,20(sp)
   434a0:	27000015 	stw	fp,0(r4)
   434a4:	003e5d06 	br	42e1c <_dtoa_r+0xd0>
   434a8:	d9800d17 	ldw	r6,52(sp)
   434ac:	00d00034 	movhi	r3,16384
   434b0:	18c04804 	addi	r3,r3,288
   434b4:	d9001217 	ldw	r4,72(sp)
   434b8:	300490fa 	slli	r2,r6,3
   434bc:	d9401317 	ldw	r5,76(sp)
   434c0:	10c5883a 	add	r2,r2,r3
   434c4:	12000017 	ldw	r8,0(r2)
   434c8:	12400117 	ldw	r9,4(r2)
   434cc:	400d883a 	mov	r6,r8
   434d0:	480f883a 	mov	r7,r9
   434d4:	00495000 	call	49500 <__ltdf2>
   434d8:	1000030e 	bge	r2,zero,434e8 <_dtoa_r+0x79c>
   434dc:	d8800d17 	ldw	r2,52(sp)
   434e0:	10bfffc4 	addi	r2,r2,-1
   434e4:	d8800d15 	stw	r2,52(sp)
   434e8:	d8000c15 	stw	zero,48(sp)
   434ec:	003ea806 	br	42f90 <_dtoa_r+0x244>
   434f0:	d9000b17 	ldw	r4,44(sp)
   434f4:	202cc03a 	cmpne	r22,r4,zero
   434f8:	b000c71e 	bne	r22,zero,43818 <_dtoa_r+0xacc>
   434fc:	dc001117 	ldw	r16,68(sp)
   43500:	dc801017 	ldw	r18,64(sp)
   43504:	0027883a 	mov	r19,zero
   43508:	04000b0e 	bge	zero,r16,43538 <_dtoa_r+0x7ec>
   4350c:	d8c00a17 	ldw	r3,40(sp)
   43510:	00c0090e 	bge	zero,r3,43538 <_dtoa_r+0x7ec>
   43514:	8005883a 	mov	r2,r16
   43518:	1c011316 	blt	r3,r16,43968 <_dtoa_r+0xc1c>
   4351c:	d9000a17 	ldw	r4,40(sp)
   43520:	d9801117 	ldw	r6,68(sp)
   43524:	80a1c83a 	sub	r16,r16,r2
   43528:	2089c83a 	sub	r4,r4,r2
   4352c:	308dc83a 	sub	r6,r6,r2
   43530:	d9000a15 	stw	r4,40(sp)
   43534:	d9801115 	stw	r6,68(sp)
   43538:	d8801017 	ldw	r2,64(sp)
   4353c:	0080150e 	bge	zero,r2,43594 <_dtoa_r+0x848>
   43540:	d8c00b17 	ldw	r3,44(sp)
   43544:	1805003a 	cmpeq	r2,r3,zero
   43548:	1001c91e 	bne	r2,zero,43c70 <_dtoa_r+0xf24>
   4354c:	04800e0e 	bge	zero,r18,43588 <_dtoa_r+0x83c>
   43550:	d9001617 	ldw	r4,88(sp)
   43554:	980b883a 	mov	r5,r19
   43558:	900d883a 	mov	r6,r18
   4355c:	0046c940 	call	46c94 <__pow5mult>
   43560:	d9001617 	ldw	r4,88(sp)
   43564:	d9800717 	ldw	r6,28(sp)
   43568:	100b883a 	mov	r5,r2
   4356c:	1027883a 	mov	r19,r2
   43570:	00469700 	call	46970 <__multiply>
   43574:	d9001617 	ldw	r4,88(sp)
   43578:	d9400717 	ldw	r5,28(sp)
   4357c:	1023883a 	mov	r17,r2
   43580:	0045ee00 	call	45ee0 <_Bfree>
   43584:	dc400715 	stw	r17,28(sp)
   43588:	d9001017 	ldw	r4,64(sp)
   4358c:	248dc83a 	sub	r6,r4,r18
   43590:	30010e1e 	bne	r6,zero,439cc <_dtoa_r+0xc80>
   43594:	d9001617 	ldw	r4,88(sp)
   43598:	04400044 	movi	r17,1
   4359c:	880b883a 	mov	r5,r17
   435a0:	0046b580 	call	46b58 <__i2b>
   435a4:	d9800917 	ldw	r6,36(sp)
   435a8:	1025883a 	mov	r18,r2
   435ac:	0180040e 	bge	zero,r6,435c0 <_dtoa_r+0x874>
   435b0:	d9001617 	ldw	r4,88(sp)
   435b4:	100b883a 	mov	r5,r2
   435b8:	0046c940 	call	46c94 <__pow5mult>
   435bc:	1025883a 	mov	r18,r2
   435c0:	d8801717 	ldw	r2,92(sp)
   435c4:	8880f30e 	bge	r17,r2,43994 <_dtoa_r+0xc48>
   435c8:	0023883a 	mov	r17,zero
   435cc:	d9800917 	ldw	r6,36(sp)
   435d0:	30019e1e 	bne	r6,zero,43c4c <_dtoa_r+0xf00>
   435d4:	00c00044 	movi	r3,1
   435d8:	d9000a17 	ldw	r4,40(sp)
   435dc:	20c5883a 	add	r2,r4,r3
   435e0:	10c007cc 	andi	r3,r2,31
   435e4:	1800841e 	bne	r3,zero,437f8 <_dtoa_r+0xaac>
   435e8:	00800704 	movi	r2,28
   435ec:	d9000a17 	ldw	r4,40(sp)
   435f0:	d9801117 	ldw	r6,68(sp)
   435f4:	80a1883a 	add	r16,r16,r2
   435f8:	2089883a 	add	r4,r4,r2
   435fc:	308d883a 	add	r6,r6,r2
   43600:	d9000a15 	stw	r4,40(sp)
   43604:	d9801115 	stw	r6,68(sp)
   43608:	d8801117 	ldw	r2,68(sp)
   4360c:	0080050e 	bge	zero,r2,43624 <_dtoa_r+0x8d8>
   43610:	d9400717 	ldw	r5,28(sp)
   43614:	d9001617 	ldw	r4,88(sp)
   43618:	100d883a 	mov	r6,r2
   4361c:	00468240 	call	46824 <__lshift>
   43620:	d8800715 	stw	r2,28(sp)
   43624:	d8c00a17 	ldw	r3,40(sp)
   43628:	00c0050e 	bge	zero,r3,43640 <_dtoa_r+0x8f4>
   4362c:	d9001617 	ldw	r4,88(sp)
   43630:	900b883a 	mov	r5,r18
   43634:	180d883a 	mov	r6,r3
   43638:	00468240 	call	46824 <__lshift>
   4363c:	1025883a 	mov	r18,r2
   43640:	d9000c17 	ldw	r4,48(sp)
   43644:	2005003a 	cmpeq	r2,r4,zero
   43648:	10016f26 	beq	r2,zero,43c08 <_dtoa_r+0xebc>
   4364c:	d9000f17 	ldw	r4,60(sp)
   43650:	0102170e 	bge	zero,r4,43eb0 <_dtoa_r+0x1164>
   43654:	d9800b17 	ldw	r6,44(sp)
   43658:	3005003a 	cmpeq	r2,r6,zero
   4365c:	1000881e 	bne	r2,zero,43880 <_dtoa_r+0xb34>
   43660:	0400050e 	bge	zero,r16,43678 <_dtoa_r+0x92c>
   43664:	d9001617 	ldw	r4,88(sp)
   43668:	980b883a 	mov	r5,r19
   4366c:	800d883a 	mov	r6,r16
   43670:	00468240 	call	46824 <__lshift>
   43674:	1027883a 	mov	r19,r2
   43678:	8804c03a 	cmpne	r2,r17,zero
   4367c:	1002541e 	bne	r2,zero,43fd0 <_dtoa_r+0x1284>
   43680:	980b883a 	mov	r5,r19
   43684:	dd800517 	ldw	r22,20(sp)
   43688:	dcc00615 	stw	r19,24(sp)
   4368c:	a700004c 	andi	fp,r20,1
   43690:	2827883a 	mov	r19,r5
   43694:	d9000717 	ldw	r4,28(sp)
   43698:	900b883a 	mov	r5,r18
   4369c:	0042b340 	call	42b34 <quorem>
   436a0:	d9000717 	ldw	r4,28(sp)
   436a4:	d9400617 	ldw	r5,24(sp)
   436a8:	1023883a 	mov	r17,r2
   436ac:	8dc00c04 	addi	r23,r17,48
   436b0:	004603c0 	call	4603c <__mcmp>
   436b4:	d9001617 	ldw	r4,88(sp)
   436b8:	900b883a 	mov	r5,r18
   436bc:	980d883a 	mov	r6,r19
   436c0:	1029883a 	mov	r20,r2
   436c4:	00466980 	call	46698 <__mdiff>
   436c8:	102b883a 	mov	r21,r2
   436cc:	10800317 	ldw	r2,12(r2)
   436d0:	1001281e 	bne	r2,zero,43b74 <_dtoa_r+0xe28>
   436d4:	d9000717 	ldw	r4,28(sp)
   436d8:	a80b883a 	mov	r5,r21
   436dc:	004603c0 	call	4603c <__mcmp>
   436e0:	d9001617 	ldw	r4,88(sp)
   436e4:	1021883a 	mov	r16,r2
   436e8:	a80b883a 	mov	r5,r21
   436ec:	0045ee00 	call	45ee0 <_Bfree>
   436f0:	8000041e 	bne	r16,zero,43704 <_dtoa_r+0x9b8>
   436f4:	d8801717 	ldw	r2,92(sp)
   436f8:	1000021e 	bne	r2,zero,43704 <_dtoa_r+0x9b8>
   436fc:	e004c03a 	cmpne	r2,fp,zero
   43700:	10011726 	beq	r2,zero,43b60 <_dtoa_r+0xe14>
   43704:	a0010616 	blt	r20,zero,43b20 <_dtoa_r+0xdd4>
   43708:	a000041e 	bne	r20,zero,4371c <_dtoa_r+0x9d0>
   4370c:	d8c01717 	ldw	r3,92(sp)
   43710:	1800021e 	bne	r3,zero,4371c <_dtoa_r+0x9d0>
   43714:	e004c03a 	cmpne	r2,fp,zero
   43718:	10010126 	beq	r2,zero,43b20 <_dtoa_r+0xdd4>
   4371c:	04023d16 	blt	zero,r16,44014 <_dtoa_r+0x12c8>
   43720:	b5c00005 	stb	r23,0(r22)
   43724:	d9800517 	ldw	r6,20(sp)
   43728:	d9000f17 	ldw	r4,60(sp)
   4372c:	b5800044 	addi	r22,r22,1
   43730:	3105883a 	add	r2,r6,r4
   43734:	b0806526 	beq	r22,r2,438cc <_dtoa_r+0xb80>
   43738:	d9400717 	ldw	r5,28(sp)
   4373c:	d9001617 	ldw	r4,88(sp)
   43740:	01800284 	movi	r6,10
   43744:	000f883a 	mov	r7,zero
   43748:	0046b940 	call	46b94 <__multadd>
   4374c:	d8800715 	stw	r2,28(sp)
   43750:	d8800617 	ldw	r2,24(sp)
   43754:	14c10c26 	beq	r2,r19,43b88 <_dtoa_r+0xe3c>
   43758:	d9400617 	ldw	r5,24(sp)
   4375c:	d9001617 	ldw	r4,88(sp)
   43760:	01800284 	movi	r6,10
   43764:	000f883a 	mov	r7,zero
   43768:	0046b940 	call	46b94 <__multadd>
   4376c:	d9001617 	ldw	r4,88(sp)
   43770:	980b883a 	mov	r5,r19
   43774:	01800284 	movi	r6,10
   43778:	000f883a 	mov	r7,zero
   4377c:	d8800615 	stw	r2,24(sp)
   43780:	0046b940 	call	46b94 <__multadd>
   43784:	1027883a 	mov	r19,r2
   43788:	003fc206 	br	43694 <_dtoa_r+0x948>
   4378c:	2445c83a 	sub	r2,r4,r17
   43790:	a088983a 	sll	r4,r20,r2
   43794:	003e4b06 	br	430c4 <_dtoa_r+0x378>
   43798:	01bfffc4 	movi	r6,-1
   4379c:	00800044 	movi	r2,1
   437a0:	d9800e15 	stw	r6,56(sp)
   437a4:	d9800f15 	stw	r6,60(sp)
   437a8:	d8800b15 	stw	r2,44(sp)
   437ac:	d8c01617 	ldw	r3,88(sp)
   437b0:	008005c4 	movi	r2,23
   437b4:	18001115 	stw	zero,68(r3)
   437b8:	1580082e 	bgeu	r2,r22,437dc <_dtoa_r+0xa90>
   437bc:	00c00104 	movi	r3,4
   437c0:	0009883a 	mov	r4,zero
   437c4:	18c7883a 	add	r3,r3,r3
   437c8:	18800504 	addi	r2,r3,20
   437cc:	21000044 	addi	r4,r4,1
   437d0:	b0bffc2e 	bgeu	r22,r2,437c4 <_dtoa_r+0xa78>
   437d4:	d9801617 	ldw	r6,88(sp)
   437d8:	31001115 	stw	r4,68(r6)
   437dc:	dc000f17 	ldw	r16,60(sp)
   437e0:	003e4b06 	br	43110 <_dtoa_r+0x3c4>
   437e4:	d9801717 	ldw	r6,92(sp)
   437e8:	0023883a 	mov	r17,zero
   437ec:	31bfff04 	addi	r6,r6,-4
   437f0:	d9801715 	stw	r6,92(sp)
   437f4:	003df806 	br	42fd8 <_dtoa_r+0x28c>
   437f8:	00800804 	movi	r2,32
   437fc:	10c9c83a 	sub	r4,r2,r3
   43800:	00c00104 	movi	r3,4
   43804:	19005a16 	blt	r3,r4,43970 <_dtoa_r+0xc24>
   43808:	008000c4 	movi	r2,3
   4380c:	113f7e16 	blt	r2,r4,43608 <_dtoa_r+0x8bc>
   43810:	20800704 	addi	r2,r4,28
   43814:	003f7506 	br	435ec <_dtoa_r+0x8a0>
   43818:	d9801717 	ldw	r6,92(sp)
   4381c:	00800044 	movi	r2,1
   43820:	1180a10e 	bge	r2,r6,43aa8 <_dtoa_r+0xd5c>
   43824:	d9800f17 	ldw	r6,60(sp)
   43828:	d8c01017 	ldw	r3,64(sp)
   4382c:	30bfffc4 	addi	r2,r6,-1
   43830:	1881c616 	blt	r3,r2,43f4c <_dtoa_r+0x1200>
   43834:	18a5c83a 	sub	r18,r3,r2
   43838:	d8800f17 	ldw	r2,60(sp)
   4383c:	10026216 	blt	r2,zero,441c8 <_dtoa_r+0x147c>
   43840:	dc001117 	ldw	r16,68(sp)
   43844:	1007883a 	mov	r3,r2
   43848:	d9800a17 	ldw	r6,40(sp)
   4384c:	d8801117 	ldw	r2,68(sp)
   43850:	d9001617 	ldw	r4,88(sp)
   43854:	30cd883a 	add	r6,r6,r3
   43858:	10c5883a 	add	r2,r2,r3
   4385c:	01400044 	movi	r5,1
   43860:	d9800a15 	stw	r6,40(sp)
   43864:	d8801115 	stw	r2,68(sp)
   43868:	0046b580 	call	46b58 <__i2b>
   4386c:	1027883a 	mov	r19,r2
   43870:	003f2506 	br	43508 <_dtoa_r+0x7bc>
   43874:	00d00034 	movhi	r3,16384
   43878:	18c02a04 	addi	r3,r3,168
   4387c:	003d6706 	br	42e1c <_dtoa_r+0xd0>
   43880:	dd800517 	ldw	r22,20(sp)
   43884:	04000044 	movi	r16,1
   43888:	00000706 	br	438a8 <_dtoa_r+0xb5c>
   4388c:	d9400717 	ldw	r5,28(sp)
   43890:	d9001617 	ldw	r4,88(sp)
   43894:	01800284 	movi	r6,10
   43898:	000f883a 	mov	r7,zero
   4389c:	0046b940 	call	46b94 <__multadd>
   438a0:	d8800715 	stw	r2,28(sp)
   438a4:	84000044 	addi	r16,r16,1
   438a8:	d9000717 	ldw	r4,28(sp)
   438ac:	900b883a 	mov	r5,r18
   438b0:	0042b340 	call	42b34 <quorem>
   438b4:	15c00c04 	addi	r23,r2,48
   438b8:	b5c00005 	stb	r23,0(r22)
   438bc:	d8c00f17 	ldw	r3,60(sp)
   438c0:	b5800044 	addi	r22,r22,1
   438c4:	80fff116 	blt	r16,r3,4388c <_dtoa_r+0xb40>
   438c8:	d8000615 	stw	zero,24(sp)
   438cc:	d9400717 	ldw	r5,28(sp)
   438d0:	d9001617 	ldw	r4,88(sp)
   438d4:	01800044 	movi	r6,1
   438d8:	00468240 	call	46824 <__lshift>
   438dc:	1009883a 	mov	r4,r2
   438e0:	900b883a 	mov	r5,r18
   438e4:	d8800715 	stw	r2,28(sp)
   438e8:	004603c0 	call	4603c <__mcmp>
   438ec:	00803c0e 	bge	zero,r2,439e0 <_dtoa_r+0xc94>
   438f0:	b009883a 	mov	r4,r22
   438f4:	213fffc4 	addi	r4,r4,-1
   438f8:	21400003 	ldbu	r5,0(r4)
   438fc:	00800e44 	movi	r2,57
   43900:	28c03fcc 	andi	r3,r5,255
   43904:	18c0201c 	xori	r3,r3,128
   43908:	18ffe004 	addi	r3,r3,-128
   4390c:	1881981e 	bne	r3,r2,43f70 <_dtoa_r+0x1224>
   43910:	d9800517 	ldw	r6,20(sp)
   43914:	21bff71e 	bne	r4,r6,438f4 <_dtoa_r+0xba8>
   43918:	d8800d17 	ldw	r2,52(sp)
   4391c:	37000044 	addi	fp,r6,1
   43920:	10800044 	addi	r2,r2,1
   43924:	d8800d15 	stw	r2,52(sp)
   43928:	00800c44 	movi	r2,49
   4392c:	30800005 	stb	r2,0(r6)
   43930:	d9001617 	ldw	r4,88(sp)
   43934:	900b883a 	mov	r5,r18
   43938:	0045ee00 	call	45ee0 <_Bfree>
   4393c:	983ecd26 	beq	r19,zero,43474 <_dtoa_r+0x728>
   43940:	d8c00617 	ldw	r3,24(sp)
   43944:	18000426 	beq	r3,zero,43958 <_dtoa_r+0xc0c>
   43948:	1cc00326 	beq	r3,r19,43958 <_dtoa_r+0xc0c>
   4394c:	d9001617 	ldw	r4,88(sp)
   43950:	180b883a 	mov	r5,r3
   43954:	0045ee00 	call	45ee0 <_Bfree>
   43958:	d9001617 	ldw	r4,88(sp)
   4395c:	980b883a 	mov	r5,r19
   43960:	0045ee00 	call	45ee0 <_Bfree>
   43964:	003ec306 	br	43474 <_dtoa_r+0x728>
   43968:	1805883a 	mov	r2,r3
   4396c:	003eeb06 	br	4351c <_dtoa_r+0x7d0>
   43970:	d9800a17 	ldw	r6,40(sp)
   43974:	d8c01117 	ldw	r3,68(sp)
   43978:	20bfff04 	addi	r2,r4,-4
   4397c:	308d883a 	add	r6,r6,r2
   43980:	1887883a 	add	r3,r3,r2
   43984:	80a1883a 	add	r16,r16,r2
   43988:	d9800a15 	stw	r6,40(sp)
   4398c:	d8c01115 	stw	r3,68(sp)
   43990:	003f1d06 	br	43608 <_dtoa_r+0x8bc>
   43994:	a03f0c1e 	bne	r20,zero,435c8 <_dtoa_r+0x87c>
   43998:	00800434 	movhi	r2,16
   4399c:	10bfffc4 	addi	r2,r2,-1
   439a0:	a884703a 	and	r2,r21,r2
   439a4:	103f081e 	bne	r2,zero,435c8 <_dtoa_r+0x87c>
   439a8:	a89ffc2c 	andhi	r2,r21,32752
   439ac:	103f0626 	beq	r2,zero,435c8 <_dtoa_r+0x87c>
   439b0:	d8c01117 	ldw	r3,68(sp)
   439b4:	d9000a17 	ldw	r4,40(sp)
   439b8:	18c00044 	addi	r3,r3,1
   439bc:	21000044 	addi	r4,r4,1
   439c0:	d8c01115 	stw	r3,68(sp)
   439c4:	d9000a15 	stw	r4,40(sp)
   439c8:	003f0006 	br	435cc <_dtoa_r+0x880>
   439cc:	d9400717 	ldw	r5,28(sp)
   439d0:	d9001617 	ldw	r4,88(sp)
   439d4:	0046c940 	call	46c94 <__pow5mult>
   439d8:	d8800715 	stw	r2,28(sp)
   439dc:	003eed06 	br	43594 <_dtoa_r+0x848>
   439e0:	1000021e 	bne	r2,zero,439ec <_dtoa_r+0xca0>
   439e4:	b880004c 	andi	r2,r23,1
   439e8:	103fc11e 	bne	r2,zero,438f0 <_dtoa_r+0xba4>
   439ec:	b5bfffc4 	addi	r22,r22,-1
   439f0:	b0c00007 	ldb	r3,0(r22)
   439f4:	00800c04 	movi	r2,48
   439f8:	18bffc26 	beq	r3,r2,439ec <_dtoa_r+0xca0>
   439fc:	b7000044 	addi	fp,r22,1
   43a00:	003fcb06 	br	43930 <_dtoa_r+0xbe4>
   43a04:	d9800d17 	ldw	r6,52(sp)
   43a08:	018fc83a 	sub	r7,zero,r6
   43a0c:	3801f726 	beq	r7,zero,441ec <_dtoa_r+0x14a0>
   43a10:	398003cc 	andi	r6,r7,15
   43a14:	300c90fa 	slli	r6,r6,3
   43a18:	01500034 	movhi	r5,16384
   43a1c:	29404804 	addi	r5,r5,288
   43a20:	d9001217 	ldw	r4,72(sp)
   43a24:	314d883a 	add	r6,r6,r5
   43a28:	30c00117 	ldw	r3,4(r6)
   43a2c:	30800017 	ldw	r2,0(r6)
   43a30:	d9401317 	ldw	r5,76(sp)
   43a34:	3821d13a 	srai	r16,r7,4
   43a38:	100d883a 	mov	r6,r2
   43a3c:	180f883a 	mov	r7,r3
   43a40:	0048cd40 	call	48cd4 <__muldf3>
   43a44:	1011883a 	mov	r8,r2
   43a48:	1813883a 	mov	r9,r3
   43a4c:	1029883a 	mov	r20,r2
   43a50:	182b883a 	mov	r21,r3
   43a54:	8001e526 	beq	r16,zero,441ec <_dtoa_r+0x14a0>
   43a58:	05800084 	movi	r22,2
   43a5c:	04500034 	movhi	r17,16384
   43a60:	8c407a04 	addi	r17,r17,488
   43a64:	8080004c 	andi	r2,r16,1
   43a68:	1005003a 	cmpeq	r2,r2,zero
   43a6c:	1000081e 	bne	r2,zero,43a90 <_dtoa_r+0xd44>
   43a70:	89800017 	ldw	r6,0(r17)
   43a74:	89c00117 	ldw	r7,4(r17)
   43a78:	480b883a 	mov	r5,r9
   43a7c:	4009883a 	mov	r4,r8
   43a80:	0048cd40 	call	48cd4 <__muldf3>
   43a84:	1011883a 	mov	r8,r2
   43a88:	b5800044 	addi	r22,r22,1
   43a8c:	1813883a 	mov	r9,r3
   43a90:	8021d07a 	srai	r16,r16,1
   43a94:	8c400204 	addi	r17,r17,8
   43a98:	803ff21e 	bne	r16,zero,43a64 <_dtoa_r+0xd18>
   43a9c:	4029883a 	mov	r20,r8
   43aa0:	482b883a 	mov	r21,r9
   43aa4:	003dca06 	br	431d0 <_dtoa_r+0x484>
   43aa8:	d9000817 	ldw	r4,32(sp)
   43aac:	2005003a 	cmpeq	r2,r4,zero
   43ab0:	1001f61e 	bne	r2,zero,4428c <_dtoa_r+0x1540>
   43ab4:	dc001117 	ldw	r16,68(sp)
   43ab8:	dc801017 	ldw	r18,64(sp)
   43abc:	18c10cc4 	addi	r3,r3,1075
   43ac0:	003f6106 	br	43848 <_dtoa_r+0xafc>
   43ac4:	d8000b15 	stw	zero,44(sp)
   43ac8:	d9802617 	ldw	r6,152(sp)
   43acc:	d8c00d17 	ldw	r3,52(sp)
   43ad0:	30800044 	addi	r2,r6,1
   43ad4:	18ad883a 	add	r22,r3,r2
   43ad8:	b13fffc4 	addi	r4,r22,-1
   43adc:	d9000e15 	stw	r4,56(sp)
   43ae0:	0581f60e 	bge	zero,r22,442bc <_dtoa_r+0x1570>
   43ae4:	dd800f15 	stw	r22,60(sp)
   43ae8:	003f3006 	br	437ac <_dtoa_r+0xa60>
   43aec:	d8000b15 	stw	zero,44(sp)
   43af0:	d9002617 	ldw	r4,152(sp)
   43af4:	0101eb0e 	bge	zero,r4,442a4 <_dtoa_r+0x1558>
   43af8:	202d883a 	mov	r22,r4
   43afc:	d9000e15 	stw	r4,56(sp)
   43b00:	d9000f15 	stw	r4,60(sp)
   43b04:	003f2906 	br	437ac <_dtoa_r+0xa60>
   43b08:	01800044 	movi	r6,1
   43b0c:	d9800b15 	stw	r6,44(sp)
   43b10:	003ff706 	br	43af0 <_dtoa_r+0xda4>
   43b14:	01000044 	movi	r4,1
   43b18:	d9000b15 	stw	r4,44(sp)
   43b1c:	003fea06 	br	43ac8 <_dtoa_r+0xd7c>
   43b20:	04000c0e 	bge	zero,r16,43b54 <_dtoa_r+0xe08>
   43b24:	d9400717 	ldw	r5,28(sp)
   43b28:	d9001617 	ldw	r4,88(sp)
   43b2c:	01800044 	movi	r6,1
   43b30:	00468240 	call	46824 <__lshift>
   43b34:	1009883a 	mov	r4,r2
   43b38:	900b883a 	mov	r5,r18
   43b3c:	d8800715 	stw	r2,28(sp)
   43b40:	004603c0 	call	4603c <__mcmp>
   43b44:	0081e00e 	bge	zero,r2,442c8 <_dtoa_r+0x157c>
   43b48:	bdc00044 	addi	r23,r23,1
   43b4c:	00800e84 	movi	r2,58
   43b50:	b881a226 	beq	r23,r2,441dc <_dtoa_r+0x1490>
   43b54:	b7000044 	addi	fp,r22,1
   43b58:	b5c00005 	stb	r23,0(r22)
   43b5c:	003f7406 	br	43930 <_dtoa_r+0xbe4>
   43b60:	00800e44 	movi	r2,57
   43b64:	b8819d26 	beq	r23,r2,441dc <_dtoa_r+0x1490>
   43b68:	053ffa0e 	bge	zero,r20,43b54 <_dtoa_r+0xe08>
   43b6c:	8dc00c44 	addi	r23,r17,49
   43b70:	003ff806 	br	43b54 <_dtoa_r+0xe08>
   43b74:	d9001617 	ldw	r4,88(sp)
   43b78:	a80b883a 	mov	r5,r21
   43b7c:	04000044 	movi	r16,1
   43b80:	0045ee00 	call	45ee0 <_Bfree>
   43b84:	003edf06 	br	43704 <_dtoa_r+0x9b8>
   43b88:	d9001617 	ldw	r4,88(sp)
   43b8c:	980b883a 	mov	r5,r19
   43b90:	01800284 	movi	r6,10
   43b94:	000f883a 	mov	r7,zero
   43b98:	0046b940 	call	46b94 <__multadd>
   43b9c:	1027883a 	mov	r19,r2
   43ba0:	d8800615 	stw	r2,24(sp)
   43ba4:	003ebb06 	br	43694 <_dtoa_r+0x948>
   43ba8:	d9801117 	ldw	r6,68(sp)
   43bac:	d8800d17 	ldw	r2,52(sp)
   43bb0:	d8000915 	stw	zero,36(sp)
   43bb4:	308dc83a 	sub	r6,r6,r2
   43bb8:	0087c83a 	sub	r3,zero,r2
   43bbc:	d9801115 	stw	r6,68(sp)
   43bc0:	d8c01015 	stw	r3,64(sp)
   43bc4:	003cfe06 	br	42fc0 <_dtoa_r+0x274>
   43bc8:	018dc83a 	sub	r6,zero,r6
   43bcc:	d9801115 	stw	r6,68(sp)
   43bd0:	d8000a15 	stw	zero,40(sp)
   43bd4:	003cf306 	br	42fa4 <_dtoa_r+0x258>
   43bd8:	d9000d17 	ldw	r4,52(sp)
   43bdc:	00495880 	call	49588 <__floatsidf>
   43be0:	880b883a 	mov	r5,r17
   43be4:	8009883a 	mov	r4,r16
   43be8:	180f883a 	mov	r7,r3
   43bec:	100d883a 	mov	r6,r2
   43bf0:	00493680 	call	49368 <__nedf2>
   43bf4:	103ce126 	beq	r2,zero,42f7c <_dtoa_r+0x230>
   43bf8:	d9800d17 	ldw	r6,52(sp)
   43bfc:	31bfffc4 	addi	r6,r6,-1
   43c00:	d9800d15 	stw	r6,52(sp)
   43c04:	003cdd06 	br	42f7c <_dtoa_r+0x230>
   43c08:	d9000717 	ldw	r4,28(sp)
   43c0c:	900b883a 	mov	r5,r18
   43c10:	004603c0 	call	4603c <__mcmp>
   43c14:	103e8d0e 	bge	r2,zero,4364c <_dtoa_r+0x900>
   43c18:	d9400717 	ldw	r5,28(sp)
   43c1c:	d9001617 	ldw	r4,88(sp)
   43c20:	01800284 	movi	r6,10
   43c24:	000f883a 	mov	r7,zero
   43c28:	0046b940 	call	46b94 <__multadd>
   43c2c:	d9800d17 	ldw	r6,52(sp)
   43c30:	d8800715 	stw	r2,28(sp)
   43c34:	31bfffc4 	addi	r6,r6,-1
   43c38:	d9800d15 	stw	r6,52(sp)
   43c3c:	b001a71e 	bne	r22,zero,442dc <_dtoa_r+0x1590>
   43c40:	d8800e17 	ldw	r2,56(sp)
   43c44:	d8800f15 	stw	r2,60(sp)
   43c48:	003e8006 	br	4364c <_dtoa_r+0x900>
   43c4c:	90800417 	ldw	r2,16(r18)
   43c50:	1085883a 	add	r2,r2,r2
   43c54:	1085883a 	add	r2,r2,r2
   43c58:	1485883a 	add	r2,r2,r18
   43c5c:	11000417 	ldw	r4,16(r2)
   43c60:	0045f080 	call	45f08 <__hi0bits>
   43c64:	00c00804 	movi	r3,32
   43c68:	1887c83a 	sub	r3,r3,r2
   43c6c:	003e5a06 	br	435d8 <_dtoa_r+0x88c>
   43c70:	d9400717 	ldw	r5,28(sp)
   43c74:	d9801017 	ldw	r6,64(sp)
   43c78:	d9001617 	ldw	r4,88(sp)
   43c7c:	0046c940 	call	46c94 <__pow5mult>
   43c80:	d8800715 	stw	r2,28(sp)
   43c84:	003e4306 	br	43594 <_dtoa_r+0x848>
   43c88:	d9800f17 	ldw	r6,60(sp)
   43c8c:	d8800d17 	ldw	r2,52(sp)
   43c90:	d9800315 	stw	r6,12(sp)
   43c94:	d8800415 	stw	r2,16(sp)
   43c98:	d8c00b17 	ldw	r3,44(sp)
   43c9c:	1805003a 	cmpeq	r2,r3,zero
   43ca0:	1000e21e 	bne	r2,zero,4402c <_dtoa_r+0x12e0>
   43ca4:	d9000317 	ldw	r4,12(sp)
   43ca8:	0005883a 	mov	r2,zero
   43cac:	00cff834 	movhi	r3,16352
   43cb0:	200c90fa 	slli	r6,r4,3
   43cb4:	01100034 	movhi	r4,16384
   43cb8:	21004804 	addi	r4,r4,288
   43cbc:	180b883a 	mov	r5,r3
   43cc0:	310d883a 	add	r6,r6,r4
   43cc4:	327fff17 	ldw	r9,-4(r6)
   43cc8:	323ffe17 	ldw	r8,-8(r6)
   43ccc:	1009883a 	mov	r4,r2
   43cd0:	480f883a 	mov	r7,r9
   43cd4:	400d883a 	mov	r6,r8
   43cd8:	00490880 	call	49088 <__divdf3>
   43cdc:	180b883a 	mov	r5,r3
   43ce0:	b00d883a 	mov	r6,r22
   43ce4:	b80f883a 	mov	r7,r23
   43ce8:	1009883a 	mov	r4,r2
   43cec:	0048be00 	call	48be0 <__subdf3>
   43cf0:	a80b883a 	mov	r5,r21
   43cf4:	a009883a 	mov	r4,r20
   43cf8:	d8c01915 	stw	r3,100(sp)
   43cfc:	d8801815 	stw	r2,96(sp)
   43d00:	00496800 	call	49680 <__fixdfsi>
   43d04:	1009883a 	mov	r4,r2
   43d08:	1027883a 	mov	r19,r2
   43d0c:	00495880 	call	49588 <__floatsidf>
   43d10:	a80b883a 	mov	r5,r21
   43d14:	a009883a 	mov	r4,r20
   43d18:	180f883a 	mov	r7,r3
   43d1c:	100d883a 	mov	r6,r2
   43d20:	0048be00 	call	48be0 <__subdf3>
   43d24:	d9801817 	ldw	r6,96(sp)
   43d28:	1823883a 	mov	r17,r3
   43d2c:	d8801415 	stw	r2,80(sp)
   43d30:	302d883a 	mov	r22,r6
   43d34:	d9800517 	ldw	r6,20(sp)
   43d38:	9cc00c04 	addi	r19,r19,48
   43d3c:	dc401515 	stw	r17,84(sp)
   43d40:	d8c01917 	ldw	r3,100(sp)
   43d44:	34c00005 	stb	r19,0(r6)
   43d48:	d8800517 	ldw	r2,20(sp)
   43d4c:	d9401917 	ldw	r5,100(sp)
   43d50:	d9801417 	ldw	r6,80(sp)
   43d54:	b009883a 	mov	r4,r22
   43d58:	880f883a 	mov	r7,r17
   43d5c:	182f883a 	mov	r23,r3
   43d60:	17000044 	addi	fp,r2,1
   43d64:	00493f00 	call	493f0 <__gtdf2>
   43d68:	00804e16 	blt	zero,r2,43ea4 <_dtoa_r+0x1158>
   43d6c:	d9801417 	ldw	r6,80(sp)
   43d70:	0005883a 	mov	r2,zero
   43d74:	00cffc34 	movhi	r3,16368
   43d78:	180b883a 	mov	r5,r3
   43d7c:	880f883a 	mov	r7,r17
   43d80:	1009883a 	mov	r4,r2
   43d84:	0048be00 	call	48be0 <__subdf3>
   43d88:	d9401917 	ldw	r5,100(sp)
   43d8c:	180f883a 	mov	r7,r3
   43d90:	b009883a 	mov	r4,r22
   43d94:	100d883a 	mov	r6,r2
   43d98:	00493f00 	call	493f0 <__gtdf2>
   43d9c:	00bda216 	blt	zero,r2,43428 <_dtoa_r+0x6dc>
   43da0:	d8c00317 	ldw	r3,12(sp)
   43da4:	00800044 	movi	r2,1
   43da8:	10c01216 	blt	r2,r3,43df4 <_dtoa_r+0x10a8>
   43dac:	003d4506 	br	432c4 <_dtoa_r+0x578>
   43db0:	d9801417 	ldw	r6,80(sp)
   43db4:	0005883a 	mov	r2,zero
   43db8:	00cffc34 	movhi	r3,16368
   43dbc:	180b883a 	mov	r5,r3
   43dc0:	880f883a 	mov	r7,r17
   43dc4:	1009883a 	mov	r4,r2
   43dc8:	0048be00 	call	48be0 <__subdf3>
   43dcc:	d9c01b17 	ldw	r7,108(sp)
   43dd0:	180b883a 	mov	r5,r3
   43dd4:	1009883a 	mov	r4,r2
   43dd8:	b00d883a 	mov	r6,r22
   43ddc:	00495000 	call	49500 <__ltdf2>
   43de0:	103d9116 	blt	r2,zero,43428 <_dtoa_r+0x6dc>
   43de4:	d9800517 	ldw	r6,20(sp)
   43de8:	d9000317 	ldw	r4,12(sp)
   43dec:	3105883a 	add	r2,r6,r4
   43df0:	e0bd3426 	beq	fp,r2,432c4 <_dtoa_r+0x578>
   43df4:	04500934 	movhi	r17,16420
   43df8:	0021883a 	mov	r16,zero
   43dfc:	b80b883a 	mov	r5,r23
   43e00:	b009883a 	mov	r4,r22
   43e04:	800d883a 	mov	r6,r16
   43e08:	880f883a 	mov	r7,r17
   43e0c:	0048cd40 	call	48cd4 <__muldf3>
   43e10:	d9401517 	ldw	r5,84(sp)
   43e14:	d9001417 	ldw	r4,80(sp)
   43e18:	880f883a 	mov	r7,r17
   43e1c:	000d883a 	mov	r6,zero
   43e20:	d8801a15 	stw	r2,104(sp)
   43e24:	d8c01b15 	stw	r3,108(sp)
   43e28:	0048cd40 	call	48cd4 <__muldf3>
   43e2c:	180b883a 	mov	r5,r3
   43e30:	1009883a 	mov	r4,r2
   43e34:	1823883a 	mov	r17,r3
   43e38:	1021883a 	mov	r16,r2
   43e3c:	00496800 	call	49680 <__fixdfsi>
   43e40:	1009883a 	mov	r4,r2
   43e44:	102b883a 	mov	r21,r2
   43e48:	00495880 	call	49588 <__floatsidf>
   43e4c:	880b883a 	mov	r5,r17
   43e50:	8009883a 	mov	r4,r16
   43e54:	180f883a 	mov	r7,r3
   43e58:	100d883a 	mov	r6,r2
   43e5c:	0048be00 	call	48be0 <__subdf3>
   43e60:	1021883a 	mov	r16,r2
   43e64:	d9001b17 	ldw	r4,108(sp)
   43e68:	1823883a 	mov	r17,r3
   43e6c:	dc001415 	stw	r16,80(sp)
   43e70:	ad400c04 	addi	r21,r21,48
   43e74:	dc401515 	stw	r17,84(sp)
   43e78:	d8801a17 	ldw	r2,104(sp)
   43e7c:	e5400005 	stb	r21,0(fp)
   43e80:	202f883a 	mov	r23,r4
   43e84:	d9c01b17 	ldw	r7,108(sp)
   43e88:	d9001417 	ldw	r4,80(sp)
   43e8c:	880b883a 	mov	r5,r17
   43e90:	100d883a 	mov	r6,r2
   43e94:	102d883a 	mov	r22,r2
   43e98:	e7000044 	addi	fp,fp,1
   43e9c:	00495000 	call	49500 <__ltdf2>
   43ea0:	103fc30e 	bge	r2,zero,43db0 <_dtoa_r+0x1064>
   43ea4:	d9000417 	ldw	r4,16(sp)
   43ea8:	d9000d15 	stw	r4,52(sp)
   43eac:	003d7106 	br	43474 <_dtoa_r+0x728>
   43eb0:	d9801717 	ldw	r6,92(sp)
   43eb4:	00800084 	movi	r2,2
   43eb8:	11bde60e 	bge	r2,r6,43654 <_dtoa_r+0x908>
   43ebc:	203cfb1e 	bne	r4,zero,432ac <_dtoa_r+0x560>
   43ec0:	d9001617 	ldw	r4,88(sp)
   43ec4:	900b883a 	mov	r5,r18
   43ec8:	01800144 	movi	r6,5
   43ecc:	000f883a 	mov	r7,zero
   43ed0:	0046b940 	call	46b94 <__multadd>
   43ed4:	d9000717 	ldw	r4,28(sp)
   43ed8:	100b883a 	mov	r5,r2
   43edc:	1025883a 	mov	r18,r2
   43ee0:	004603c0 	call	4603c <__mcmp>
   43ee4:	00bcf10e 	bge	zero,r2,432ac <_dtoa_r+0x560>
   43ee8:	d8c00d17 	ldw	r3,52(sp)
   43eec:	d9000517 	ldw	r4,20(sp)
   43ef0:	d8000615 	stw	zero,24(sp)
   43ef4:	18c00044 	addi	r3,r3,1
   43ef8:	d8c00d15 	stw	r3,52(sp)
   43efc:	00800c44 	movi	r2,49
   43f00:	27000044 	addi	fp,r4,1
   43f04:	20800005 	stb	r2,0(r4)
   43f08:	003e8906 	br	43930 <_dtoa_r+0xbe4>
   43f0c:	d8c00517 	ldw	r3,20(sp)
   43f10:	003bc206 	br	42e1c <_dtoa_r+0xd0>
   43f14:	01900034 	movhi	r6,16384
   43f18:	31807a04 	addi	r6,r6,488
   43f1c:	30c00917 	ldw	r3,36(r6)
   43f20:	30800817 	ldw	r2,32(r6)
   43f24:	d9001217 	ldw	r4,72(sp)
   43f28:	d9401317 	ldw	r5,76(sp)
   43f2c:	180f883a 	mov	r7,r3
   43f30:	100d883a 	mov	r6,r2
   43f34:	00490880 	call	49088 <__divdf3>
   43f38:	948003cc 	andi	r18,r18,15
   43f3c:	058000c4 	movi	r22,3
   43f40:	1029883a 	mov	r20,r2
   43f44:	182b883a 	mov	r21,r3
   43f48:	003c8906 	br	43170 <_dtoa_r+0x424>
   43f4c:	d9001017 	ldw	r4,64(sp)
   43f50:	d9800917 	ldw	r6,36(sp)
   43f54:	0025883a 	mov	r18,zero
   43f58:	1105c83a 	sub	r2,r2,r4
   43f5c:	2089883a 	add	r4,r4,r2
   43f60:	308d883a 	add	r6,r6,r2
   43f64:	d9001015 	stw	r4,64(sp)
   43f68:	d9800915 	stw	r6,36(sp)
   43f6c:	003e3206 	br	43838 <_dtoa_r+0xaec>
   43f70:	28800044 	addi	r2,r5,1
   43f74:	27000044 	addi	fp,r4,1
   43f78:	20800005 	stb	r2,0(r4)
   43f7c:	003e6c06 	br	43930 <_dtoa_r+0xbe4>
   43f80:	d8800f17 	ldw	r2,60(sp)
   43f84:	00bce016 	blt	zero,r2,43308 <_dtoa_r+0x5bc>
   43f88:	d9800f17 	ldw	r6,60(sp)
   43f8c:	303cc51e 	bne	r6,zero,432a4 <_dtoa_r+0x558>
   43f90:	0005883a 	mov	r2,zero
   43f94:	00d00534 	movhi	r3,16404
   43f98:	980b883a 	mov	r5,r19
   43f9c:	180f883a 	mov	r7,r3
   43fa0:	9009883a 	mov	r4,r18
   43fa4:	100d883a 	mov	r6,r2
   43fa8:	0048cd40 	call	48cd4 <__muldf3>
   43fac:	180b883a 	mov	r5,r3
   43fb0:	a80f883a 	mov	r7,r21
   43fb4:	1009883a 	mov	r4,r2
   43fb8:	a00d883a 	mov	r6,r20
   43fbc:	00494780 	call	49478 <__gedf2>
   43fc0:	103cb80e 	bge	r2,zero,432a4 <_dtoa_r+0x558>
   43fc4:	0027883a 	mov	r19,zero
   43fc8:	0025883a 	mov	r18,zero
   43fcc:	003fc606 	br	43ee8 <_dtoa_r+0x119c>
   43fd0:	99400117 	ldw	r5,4(r19)
   43fd4:	d9001617 	ldw	r4,88(sp)
   43fd8:	00464600 	call	46460 <_Balloc>
   43fdc:	99800417 	ldw	r6,16(r19)
   43fe0:	11000304 	addi	r4,r2,12
   43fe4:	99400304 	addi	r5,r19,12
   43fe8:	318d883a 	add	r6,r6,r6
   43fec:	318d883a 	add	r6,r6,r6
   43ff0:	31800204 	addi	r6,r6,8
   43ff4:	1023883a 	mov	r17,r2
   43ff8:	0045cc80 	call	45cc8 <memcpy>
   43ffc:	d9001617 	ldw	r4,88(sp)
   44000:	880b883a 	mov	r5,r17
   44004:	01800044 	movi	r6,1
   44008:	00468240 	call	46824 <__lshift>
   4400c:	100b883a 	mov	r5,r2
   44010:	003d9c06 	br	43684 <_dtoa_r+0x938>
   44014:	00800e44 	movi	r2,57
   44018:	b8807026 	beq	r23,r2,441dc <_dtoa_r+0x1490>
   4401c:	b8800044 	addi	r2,r23,1
   44020:	b7000044 	addi	fp,r22,1
   44024:	b0800005 	stb	r2,0(r22)
   44028:	003e4106 	br	43930 <_dtoa_r+0xbe4>
   4402c:	d8800317 	ldw	r2,12(sp)
   44030:	01900034 	movhi	r6,16384
   44034:	31804804 	addi	r6,r6,288
   44038:	b009883a 	mov	r4,r22
   4403c:	100e90fa 	slli	r7,r2,3
   44040:	b80b883a 	mov	r5,r23
   44044:	398f883a 	add	r7,r7,r6
   44048:	38bffe17 	ldw	r2,-8(r7)
   4404c:	d9800517 	ldw	r6,20(sp)
   44050:	38ffff17 	ldw	r3,-4(r7)
   44054:	37000044 	addi	fp,r6,1
   44058:	180f883a 	mov	r7,r3
   4405c:	100d883a 	mov	r6,r2
   44060:	0048cd40 	call	48cd4 <__muldf3>
   44064:	a80b883a 	mov	r5,r21
   44068:	a009883a 	mov	r4,r20
   4406c:	182f883a 	mov	r23,r3
   44070:	102d883a 	mov	r22,r2
   44074:	00496800 	call	49680 <__fixdfsi>
   44078:	1009883a 	mov	r4,r2
   4407c:	1027883a 	mov	r19,r2
   44080:	00495880 	call	49588 <__floatsidf>
   44084:	a80b883a 	mov	r5,r21
   44088:	a009883a 	mov	r4,r20
   4408c:	180f883a 	mov	r7,r3
   44090:	100d883a 	mov	r6,r2
   44094:	0048be00 	call	48be0 <__subdf3>
   44098:	180b883a 	mov	r5,r3
   4409c:	d8c00517 	ldw	r3,20(sp)
   440a0:	9cc00c04 	addi	r19,r19,48
   440a4:	1009883a 	mov	r4,r2
   440a8:	1cc00005 	stb	r19,0(r3)
   440ac:	2021883a 	mov	r16,r4
   440b0:	d9000317 	ldw	r4,12(sp)
   440b4:	00800044 	movi	r2,1
   440b8:	2823883a 	mov	r17,r5
   440bc:	20802226 	beq	r4,r2,44148 <_dtoa_r+0x13fc>
   440c0:	1029883a 	mov	r20,r2
   440c4:	0005883a 	mov	r2,zero
   440c8:	00d00934 	movhi	r3,16420
   440cc:	180f883a 	mov	r7,r3
   440d0:	100d883a 	mov	r6,r2
   440d4:	880b883a 	mov	r5,r17
   440d8:	8009883a 	mov	r4,r16
   440dc:	0048cd40 	call	48cd4 <__muldf3>
   440e0:	180b883a 	mov	r5,r3
   440e4:	1009883a 	mov	r4,r2
   440e8:	1823883a 	mov	r17,r3
   440ec:	1021883a 	mov	r16,r2
   440f0:	00496800 	call	49680 <__fixdfsi>
   440f4:	1009883a 	mov	r4,r2
   440f8:	102b883a 	mov	r21,r2
   440fc:	00495880 	call	49588 <__floatsidf>
   44100:	880b883a 	mov	r5,r17
   44104:	8009883a 	mov	r4,r16
   44108:	180f883a 	mov	r7,r3
   4410c:	100d883a 	mov	r6,r2
   44110:	0048be00 	call	48be0 <__subdf3>
   44114:	180b883a 	mov	r5,r3
   44118:	d8c00517 	ldw	r3,20(sp)
   4411c:	1009883a 	mov	r4,r2
   44120:	ad400c04 	addi	r21,r21,48
   44124:	1d05883a 	add	r2,r3,r20
   44128:	15400005 	stb	r21,0(r2)
   4412c:	2021883a 	mov	r16,r4
   44130:	d9000317 	ldw	r4,12(sp)
   44134:	a5000044 	addi	r20,r20,1
   44138:	2823883a 	mov	r17,r5
   4413c:	a13fe11e 	bne	r20,r4,440c4 <_dtoa_r+0x1378>
   44140:	e505883a 	add	r2,fp,r20
   44144:	173fffc4 	addi	fp,r2,-1
   44148:	0025883a 	mov	r18,zero
   4414c:	04cff834 	movhi	r19,16352
   44150:	b009883a 	mov	r4,r22
   44154:	b80b883a 	mov	r5,r23
   44158:	900d883a 	mov	r6,r18
   4415c:	980f883a 	mov	r7,r19
   44160:	0048c600 	call	48c60 <__adddf3>
   44164:	180b883a 	mov	r5,r3
   44168:	1009883a 	mov	r4,r2
   4416c:	800d883a 	mov	r6,r16
   44170:	880f883a 	mov	r7,r17
   44174:	00495000 	call	49500 <__ltdf2>
   44178:	103cab16 	blt	r2,zero,43428 <_dtoa_r+0x6dc>
   4417c:	0009883a 	mov	r4,zero
   44180:	980b883a 	mov	r5,r19
   44184:	b80f883a 	mov	r7,r23
   44188:	b00d883a 	mov	r6,r22
   4418c:	0048be00 	call	48be0 <__subdf3>
   44190:	180b883a 	mov	r5,r3
   44194:	880f883a 	mov	r7,r17
   44198:	1009883a 	mov	r4,r2
   4419c:	800d883a 	mov	r6,r16
   441a0:	00493f00 	call	493f0 <__gtdf2>
   441a4:	00bc470e 	bge	zero,r2,432c4 <_dtoa_r+0x578>
   441a8:	00c00c04 	movi	r3,48
   441ac:	e73fffc4 	addi	fp,fp,-1
   441b0:	e0800007 	ldb	r2,0(fp)
   441b4:	10fffd26 	beq	r2,r3,441ac <_dtoa_r+0x1460>
   441b8:	d9800417 	ldw	r6,16(sp)
   441bc:	e7000044 	addi	fp,fp,1
   441c0:	d9800d15 	stw	r6,52(sp)
   441c4:	003cab06 	br	43474 <_dtoa_r+0x728>
   441c8:	d8c00f17 	ldw	r3,60(sp)
   441cc:	d9001117 	ldw	r4,68(sp)
   441d0:	20e1c83a 	sub	r16,r4,r3
   441d4:	0007883a 	mov	r3,zero
   441d8:	003d9b06 	br	43848 <_dtoa_r+0xafc>
   441dc:	00800e44 	movi	r2,57
   441e0:	b0800005 	stb	r2,0(r22)
   441e4:	b5800044 	addi	r22,r22,1
   441e8:	003dc106 	br	438f0 <_dtoa_r+0xba4>
   441ec:	05800084 	movi	r22,2
   441f0:	003bf706 	br	431d0 <_dtoa_r+0x484>
   441f4:	d9000f17 	ldw	r4,60(sp)
   441f8:	013c000e 	bge	zero,r4,431fc <_dtoa_r+0x4b0>
   441fc:	d9800e17 	ldw	r6,56(sp)
   44200:	01bc300e 	bge	zero,r6,432c4 <_dtoa_r+0x578>
   44204:	0005883a 	mov	r2,zero
   44208:	00d00934 	movhi	r3,16420
   4420c:	a80b883a 	mov	r5,r21
   44210:	180f883a 	mov	r7,r3
   44214:	a009883a 	mov	r4,r20
   44218:	100d883a 	mov	r6,r2
   4421c:	0048cd40 	call	48cd4 <__muldf3>
   44220:	b1000044 	addi	r4,r22,1
   44224:	1021883a 	mov	r16,r2
   44228:	1823883a 	mov	r17,r3
   4422c:	00495880 	call	49588 <__floatsidf>
   44230:	880b883a 	mov	r5,r17
   44234:	8009883a 	mov	r4,r16
   44238:	180f883a 	mov	r7,r3
   4423c:	100d883a 	mov	r6,r2
   44240:	0048cd40 	call	48cd4 <__muldf3>
   44244:	0011883a 	mov	r8,zero
   44248:	02500734 	movhi	r9,16412
   4424c:	180b883a 	mov	r5,r3
   44250:	480f883a 	mov	r7,r9
   44254:	1009883a 	mov	r4,r2
   44258:	400d883a 	mov	r6,r8
   4425c:	0048c600 	call	48c60 <__adddf3>
   44260:	102d883a 	mov	r22,r2
   44264:	00bf3034 	movhi	r2,64704
   44268:	10ef883a 	add	r23,r2,r3
   4426c:	d8800d17 	ldw	r2,52(sp)
   44270:	d8c00e17 	ldw	r3,56(sp)
   44274:	8029883a 	mov	r20,r16
   44278:	10bfffc4 	addi	r2,r2,-1
   4427c:	882b883a 	mov	r21,r17
   44280:	d8800415 	stw	r2,16(sp)
   44284:	d8c00315 	stw	r3,12(sp)
   44288:	003e8306 	br	43c98 <_dtoa_r+0xf4c>
   4428c:	d8800117 	ldw	r2,4(sp)
   44290:	dc001117 	ldw	r16,68(sp)
   44294:	dc801017 	ldw	r18,64(sp)
   44298:	00c00d84 	movi	r3,54
   4429c:	1887c83a 	sub	r3,r3,r2
   442a0:	003d6906 	br	43848 <_dtoa_r+0xafc>
   442a4:	01800044 	movi	r6,1
   442a8:	3021883a 	mov	r16,r6
   442ac:	d9800f15 	stw	r6,60(sp)
   442b0:	d9802615 	stw	r6,152(sp)
   442b4:	d9800e15 	stw	r6,56(sp)
   442b8:	003b9306 	br	43108 <_dtoa_r+0x3bc>
   442bc:	b021883a 	mov	r16,r22
   442c0:	dd800f15 	stw	r22,60(sp)
   442c4:	003b9006 	br	43108 <_dtoa_r+0x3bc>
   442c8:	103e221e 	bne	r2,zero,43b54 <_dtoa_r+0xe08>
   442cc:	b880004c 	andi	r2,r23,1
   442d0:	1005003a 	cmpeq	r2,r2,zero
   442d4:	103e1f1e 	bne	r2,zero,43b54 <_dtoa_r+0xe08>
   442d8:	003e1b06 	br	43b48 <_dtoa_r+0xdfc>
   442dc:	d9001617 	ldw	r4,88(sp)
   442e0:	980b883a 	mov	r5,r19
   442e4:	01800284 	movi	r6,10
   442e8:	000f883a 	mov	r7,zero
   442ec:	0046b940 	call	46b94 <__multadd>
   442f0:	d8c00e17 	ldw	r3,56(sp)
   442f4:	1027883a 	mov	r19,r2
   442f8:	d8c00f15 	stw	r3,60(sp)
   442fc:	003cd306 	br	4364c <_dtoa_r+0x900>

00044300 <_fflush_r>:
   44300:	defffb04 	addi	sp,sp,-20
   44304:	dcc00315 	stw	r19,12(sp)
   44308:	dc800215 	stw	r18,8(sp)
   4430c:	dfc00415 	stw	ra,16(sp)
   44310:	dc400115 	stw	r17,4(sp)
   44314:	dc000015 	stw	r16,0(sp)
   44318:	2027883a 	mov	r19,r4
   4431c:	2825883a 	mov	r18,r5
   44320:	20000226 	beq	r4,zero,4432c <_fflush_r+0x2c>
   44324:	20800e17 	ldw	r2,56(r4)
   44328:	10005626 	beq	r2,zero,44484 <_fflush_r+0x184>
   4432c:	9100030b 	ldhu	r4,12(r18)
   44330:	20ffffcc 	andi	r3,r4,65535
   44334:	18e0001c 	xori	r3,r3,32768
   44338:	18e00004 	addi	r3,r3,-32768
   4433c:	1880020c 	andi	r2,r3,8
   44340:	1000261e 	bne	r2,zero,443dc <_fflush_r+0xdc>
   44344:	90c00117 	ldw	r3,4(r18)
   44348:	20820014 	ori	r2,r4,2048
   4434c:	9080030d 	sth	r2,12(r18)
   44350:	1009883a 	mov	r4,r2
   44354:	00c0400e 	bge	zero,r3,44458 <_fflush_r+0x158>
   44358:	92000a17 	ldw	r8,40(r18)
   4435c:	40004026 	beq	r8,zero,44460 <_fflush_r+0x160>
   44360:	2084000c 	andi	r2,r4,4096
   44364:	10005326 	beq	r2,zero,444b4 <_fflush_r+0x1b4>
   44368:	94001417 	ldw	r16,80(r18)
   4436c:	9080030b 	ldhu	r2,12(r18)
   44370:	1080010c 	andi	r2,r2,4
   44374:	1000481e 	bne	r2,zero,44498 <_fflush_r+0x198>
   44378:	91400717 	ldw	r5,28(r18)
   4437c:	9809883a 	mov	r4,r19
   44380:	800d883a 	mov	r6,r16
   44384:	000f883a 	mov	r7,zero
   44388:	403ee83a 	callr	r8
   4438c:	8080261e 	bne	r16,r2,44428 <_fflush_r+0x128>
   44390:	9080030b 	ldhu	r2,12(r18)
   44394:	91000417 	ldw	r4,16(r18)
   44398:	90000115 	stw	zero,4(r18)
   4439c:	10bdffcc 	andi	r2,r2,63487
   443a0:	10ffffcc 	andi	r3,r2,65535
   443a4:	18c4000c 	andi	r3,r3,4096
   443a8:	9080030d 	sth	r2,12(r18)
   443ac:	91000015 	stw	r4,0(r18)
   443b0:	18002b26 	beq	r3,zero,44460 <_fflush_r+0x160>
   443b4:	0007883a 	mov	r3,zero
   443b8:	1805883a 	mov	r2,r3
   443bc:	94001415 	stw	r16,80(r18)
   443c0:	dfc00417 	ldw	ra,16(sp)
   443c4:	dcc00317 	ldw	r19,12(sp)
   443c8:	dc800217 	ldw	r18,8(sp)
   443cc:	dc400117 	ldw	r17,4(sp)
   443d0:	dc000017 	ldw	r16,0(sp)
   443d4:	dec00504 	addi	sp,sp,20
   443d8:	f800283a 	ret
   443dc:	94400417 	ldw	r17,16(r18)
   443e0:	88001f26 	beq	r17,zero,44460 <_fflush_r+0x160>
   443e4:	90800017 	ldw	r2,0(r18)
   443e8:	18c000cc 	andi	r3,r3,3
   443ec:	94400015 	stw	r17,0(r18)
   443f0:	1461c83a 	sub	r16,r2,r17
   443f4:	18002526 	beq	r3,zero,4448c <_fflush_r+0x18c>
   443f8:	0005883a 	mov	r2,zero
   443fc:	90800215 	stw	r2,8(r18)
   44400:	0400170e 	bge	zero,r16,44460 <_fflush_r+0x160>
   44404:	90c00917 	ldw	r3,36(r18)
   44408:	91400717 	ldw	r5,28(r18)
   4440c:	880d883a 	mov	r6,r17
   44410:	800f883a 	mov	r7,r16
   44414:	9809883a 	mov	r4,r19
   44418:	183ee83a 	callr	r3
   4441c:	88a3883a 	add	r17,r17,r2
   44420:	80a1c83a 	sub	r16,r16,r2
   44424:	00bff616 	blt	zero,r2,44400 <_fflush_r+0x100>
   44428:	9080030b 	ldhu	r2,12(r18)
   4442c:	00ffffc4 	movi	r3,-1
   44430:	10801014 	ori	r2,r2,64
   44434:	9080030d 	sth	r2,12(r18)
   44438:	1805883a 	mov	r2,r3
   4443c:	dfc00417 	ldw	ra,16(sp)
   44440:	dcc00317 	ldw	r19,12(sp)
   44444:	dc800217 	ldw	r18,8(sp)
   44448:	dc400117 	ldw	r17,4(sp)
   4444c:	dc000017 	ldw	r16,0(sp)
   44450:	dec00504 	addi	sp,sp,20
   44454:	f800283a 	ret
   44458:	90800f17 	ldw	r2,60(r18)
   4445c:	00bfbe16 	blt	zero,r2,44358 <_fflush_r+0x58>
   44460:	0007883a 	mov	r3,zero
   44464:	1805883a 	mov	r2,r3
   44468:	dfc00417 	ldw	ra,16(sp)
   4446c:	dcc00317 	ldw	r19,12(sp)
   44470:	dc800217 	ldw	r18,8(sp)
   44474:	dc400117 	ldw	r17,4(sp)
   44478:	dc000017 	ldw	r16,0(sp)
   4447c:	dec00504 	addi	sp,sp,20
   44480:	f800283a 	ret
   44484:	00445980 	call	44598 <__sinit>
   44488:	003fa806 	br	4432c <_fflush_r+0x2c>
   4448c:	90800517 	ldw	r2,20(r18)
   44490:	90800215 	stw	r2,8(r18)
   44494:	003fda06 	br	44400 <_fflush_r+0x100>
   44498:	90800117 	ldw	r2,4(r18)
   4449c:	90c00c17 	ldw	r3,48(r18)
   444a0:	80a1c83a 	sub	r16,r16,r2
   444a4:	183fb426 	beq	r3,zero,44378 <_fflush_r+0x78>
   444a8:	90800f17 	ldw	r2,60(r18)
   444ac:	80a1c83a 	sub	r16,r16,r2
   444b0:	003fb106 	br	44378 <_fflush_r+0x78>
   444b4:	91400717 	ldw	r5,28(r18)
   444b8:	9809883a 	mov	r4,r19
   444bc:	000d883a 	mov	r6,zero
   444c0:	01c00044 	movi	r7,1
   444c4:	403ee83a 	callr	r8
   444c8:	1021883a 	mov	r16,r2
   444cc:	00bfffc4 	movi	r2,-1
   444d0:	80800226 	beq	r16,r2,444dc <_fflush_r+0x1dc>
   444d4:	92000a17 	ldw	r8,40(r18)
   444d8:	003fa406 	br	4436c <_fflush_r+0x6c>
   444dc:	98c00017 	ldw	r3,0(r19)
   444e0:	00800744 	movi	r2,29
   444e4:	18bfde26 	beq	r3,r2,44460 <_fflush_r+0x160>
   444e8:	9080030b 	ldhu	r2,12(r18)
   444ec:	8007883a 	mov	r3,r16
   444f0:	10801014 	ori	r2,r2,64
   444f4:	9080030d 	sth	r2,12(r18)
   444f8:	003fcf06 	br	44438 <_fflush_r+0x138>

000444fc <fflush>:
   444fc:	01400134 	movhi	r5,4
   44500:	2950c004 	addi	r5,r5,17152
   44504:	2007883a 	mov	r3,r4
   44508:	20000526 	beq	r4,zero,44520 <fflush+0x24>
   4450c:	00900034 	movhi	r2,16384
   44510:	10876804 	addi	r2,r2,7584
   44514:	11000017 	ldw	r4,0(r2)
   44518:	180b883a 	mov	r5,r3
   4451c:	00443001 	jmpi	44300 <_fflush_r>
   44520:	00900034 	movhi	r2,16384
   44524:	10876904 	addi	r2,r2,7588
   44528:	11000017 	ldw	r4,0(r2)
   4452c:	00450cc1 	jmpi	450cc <_fwalk_reent>

00044530 <std>:
   44530:	00800134 	movhi	r2,4
   44534:	109d6a04 	addi	r2,r2,30120
   44538:	20800b15 	stw	r2,44(r4)
   4453c:	00800134 	movhi	r2,4
   44540:	109da504 	addi	r2,r2,30356
   44544:	20800815 	stw	r2,32(r4)
   44548:	00c00134 	movhi	r3,4
   4454c:	18dd8604 	addi	r3,r3,30232
   44550:	00800134 	movhi	r2,4
   44554:	109d6c04 	addi	r2,r2,30128
   44558:	2140030d 	sth	r5,12(r4)
   4455c:	2180038d 	sth	r6,14(r4)
   44560:	20c00915 	stw	r3,36(r4)
   44564:	20800a15 	stw	r2,40(r4)
   44568:	20000015 	stw	zero,0(r4)
   4456c:	20000115 	stw	zero,4(r4)
   44570:	20000215 	stw	zero,8(r4)
   44574:	20000415 	stw	zero,16(r4)
   44578:	20000515 	stw	zero,20(r4)
   4457c:	20000615 	stw	zero,24(r4)
   44580:	21000715 	stw	r4,28(r4)
   44584:	f800283a 	ret

00044588 <__sfp_lock_acquire>:
   44588:	f800283a 	ret

0004458c <__sfp_lock_release>:
   4458c:	f800283a 	ret

00044590 <__sinit_lock_acquire>:
   44590:	f800283a 	ret

00044594 <__sinit_lock_release>:
   44594:	f800283a 	ret

00044598 <__sinit>:
   44598:	20800e17 	ldw	r2,56(r4)
   4459c:	defffd04 	addi	sp,sp,-12
   445a0:	dc400115 	stw	r17,4(sp)
   445a4:	dc000015 	stw	r16,0(sp)
   445a8:	dfc00215 	stw	ra,8(sp)
   445ac:	04400044 	movi	r17,1
   445b0:	01400104 	movi	r5,4
   445b4:	000d883a 	mov	r6,zero
   445b8:	2021883a 	mov	r16,r4
   445bc:	2200bb04 	addi	r8,r4,748
   445c0:	200f883a 	mov	r7,r4
   445c4:	10000526 	beq	r2,zero,445dc <__sinit+0x44>
   445c8:	dfc00217 	ldw	ra,8(sp)
   445cc:	dc400117 	ldw	r17,4(sp)
   445d0:	dc000017 	ldw	r16,0(sp)
   445d4:	dec00304 	addi	sp,sp,12
   445d8:	f800283a 	ret
   445dc:	21000117 	ldw	r4,4(r4)
   445e0:	00800134 	movhi	r2,4
   445e4:	10919f04 	addi	r2,r2,18044
   445e8:	00c000c4 	movi	r3,3
   445ec:	80800f15 	stw	r2,60(r16)
   445f0:	80c0b915 	stw	r3,740(r16)
   445f4:	8200ba15 	stw	r8,744(r16)
   445f8:	84400e15 	stw	r17,56(r16)
   445fc:	8000b815 	stw	zero,736(r16)
   44600:	00445300 	call	44530 <std>
   44604:	81000217 	ldw	r4,8(r16)
   44608:	880d883a 	mov	r6,r17
   4460c:	800f883a 	mov	r7,r16
   44610:	01400284 	movi	r5,10
   44614:	00445300 	call	44530 <std>
   44618:	81000317 	ldw	r4,12(r16)
   4461c:	800f883a 	mov	r7,r16
   44620:	01400484 	movi	r5,18
   44624:	01800084 	movi	r6,2
   44628:	dfc00217 	ldw	ra,8(sp)
   4462c:	dc400117 	ldw	r17,4(sp)
   44630:	dc000017 	ldw	r16,0(sp)
   44634:	dec00304 	addi	sp,sp,12
   44638:	00445301 	jmpi	44530 <std>

0004463c <__fp_lock>:
   4463c:	0005883a 	mov	r2,zero
   44640:	f800283a 	ret

00044644 <__fp_unlock>:
   44644:	0005883a 	mov	r2,zero
   44648:	f800283a 	ret

0004464c <__fp_unlock_all>:
   4464c:	00900034 	movhi	r2,16384
   44650:	10876804 	addi	r2,r2,7584
   44654:	11000017 	ldw	r4,0(r2)
   44658:	01400134 	movhi	r5,4
   4465c:	29519104 	addi	r5,r5,17988
   44660:	00451941 	jmpi	45194 <_fwalk>

00044664 <__fp_lock_all>:
   44664:	00900034 	movhi	r2,16384
   44668:	10876804 	addi	r2,r2,7584
   4466c:	11000017 	ldw	r4,0(r2)
   44670:	01400134 	movhi	r5,4
   44674:	29518f04 	addi	r5,r5,17980
   44678:	00451941 	jmpi	45194 <_fwalk>

0004467c <_cleanup_r>:
   4467c:	01400134 	movhi	r5,4
   44680:	295e9704 	addi	r5,r5,31324
   44684:	00451941 	jmpi	45194 <_fwalk>

00044688 <_cleanup>:
   44688:	00900034 	movhi	r2,16384
   4468c:	10876904 	addi	r2,r2,7588
   44690:	11000017 	ldw	r4,0(r2)
   44694:	004467c1 	jmpi	4467c <_cleanup_r>

00044698 <__sfmoreglue>:
   44698:	defffc04 	addi	sp,sp,-16
   4469c:	dc400115 	stw	r17,4(sp)
   446a0:	2c401724 	muli	r17,r5,92
   446a4:	dc800215 	stw	r18,8(sp)
   446a8:	2825883a 	mov	r18,r5
   446ac:	89400304 	addi	r5,r17,12
   446b0:	dc000015 	stw	r16,0(sp)
   446b4:	dfc00315 	stw	ra,12(sp)
   446b8:	00454a40 	call	454a4 <_malloc_r>
   446bc:	0021883a 	mov	r16,zero
   446c0:	880d883a 	mov	r6,r17
   446c4:	000b883a 	mov	r5,zero
   446c8:	10000626 	beq	r2,zero,446e4 <__sfmoreglue+0x4c>
   446cc:	11000304 	addi	r4,r2,12
   446d0:	14800115 	stw	r18,4(r2)
   446d4:	10000015 	stw	zero,0(r2)
   446d8:	11000215 	stw	r4,8(r2)
   446dc:	1021883a 	mov	r16,r2
   446e0:	0045e480 	call	45e48 <memset>
   446e4:	8005883a 	mov	r2,r16
   446e8:	dfc00317 	ldw	ra,12(sp)
   446ec:	dc800217 	ldw	r18,8(sp)
   446f0:	dc400117 	ldw	r17,4(sp)
   446f4:	dc000017 	ldw	r16,0(sp)
   446f8:	dec00404 	addi	sp,sp,16
   446fc:	f800283a 	ret

00044700 <__sfp>:
   44700:	defffd04 	addi	sp,sp,-12
   44704:	00900034 	movhi	r2,16384
   44708:	10876904 	addi	r2,r2,7588
   4470c:	dc000015 	stw	r16,0(sp)
   44710:	14000017 	ldw	r16,0(r2)
   44714:	dc400115 	stw	r17,4(sp)
   44718:	dfc00215 	stw	ra,8(sp)
   4471c:	80800e17 	ldw	r2,56(r16)
   44720:	2023883a 	mov	r17,r4
   44724:	10002626 	beq	r2,zero,447c0 <__sfp+0xc0>
   44728:	8400b804 	addi	r16,r16,736
   4472c:	80800117 	ldw	r2,4(r16)
   44730:	81000217 	ldw	r4,8(r16)
   44734:	10ffffc4 	addi	r3,r2,-1
   44738:	18000916 	blt	r3,zero,44760 <__sfp+0x60>
   4473c:	2080030f 	ldh	r2,12(r4)
   44740:	10000b26 	beq	r2,zero,44770 <__sfp+0x70>
   44744:	017fffc4 	movi	r5,-1
   44748:	00000206 	br	44754 <__sfp+0x54>
   4474c:	2080030f 	ldh	r2,12(r4)
   44750:	10000726 	beq	r2,zero,44770 <__sfp+0x70>
   44754:	18ffffc4 	addi	r3,r3,-1
   44758:	21001704 	addi	r4,r4,92
   4475c:	197ffb1e 	bne	r3,r5,4474c <__sfp+0x4c>
   44760:	80800017 	ldw	r2,0(r16)
   44764:	10001926 	beq	r2,zero,447cc <__sfp+0xcc>
   44768:	1021883a 	mov	r16,r2
   4476c:	003fef06 	br	4472c <__sfp+0x2c>
   44770:	00bfffc4 	movi	r2,-1
   44774:	00c00044 	movi	r3,1
   44778:	2080038d 	sth	r2,14(r4)
   4477c:	20c0030d 	sth	r3,12(r4)
   44780:	20000015 	stw	zero,0(r4)
   44784:	20000215 	stw	zero,8(r4)
   44788:	20000115 	stw	zero,4(r4)
   4478c:	20000415 	stw	zero,16(r4)
   44790:	20000515 	stw	zero,20(r4)
   44794:	20000615 	stw	zero,24(r4)
   44798:	20000c15 	stw	zero,48(r4)
   4479c:	20000d15 	stw	zero,52(r4)
   447a0:	20001115 	stw	zero,68(r4)
   447a4:	20001215 	stw	zero,72(r4)
   447a8:	2005883a 	mov	r2,r4
   447ac:	dfc00217 	ldw	ra,8(sp)
   447b0:	dc400117 	ldw	r17,4(sp)
   447b4:	dc000017 	ldw	r16,0(sp)
   447b8:	dec00304 	addi	sp,sp,12
   447bc:	f800283a 	ret
   447c0:	8009883a 	mov	r4,r16
   447c4:	00445980 	call	44598 <__sinit>
   447c8:	003fd706 	br	44728 <__sfp+0x28>
   447cc:	8809883a 	mov	r4,r17
   447d0:	01400104 	movi	r5,4
   447d4:	00446980 	call	44698 <__sfmoreglue>
   447d8:	80800015 	stw	r2,0(r16)
   447dc:	103fe21e 	bne	r2,zero,44768 <__sfp+0x68>
   447e0:	00800304 	movi	r2,12
   447e4:	0009883a 	mov	r4,zero
   447e8:	88800015 	stw	r2,0(r17)
   447ec:	003fee06 	br	447a8 <__sfp+0xa8>

000447f0 <_malloc_trim_r>:
   447f0:	defffb04 	addi	sp,sp,-20
   447f4:	dcc00315 	stw	r19,12(sp)
   447f8:	04d00034 	movhi	r19,16384
   447fc:	9cc1e404 	addi	r19,r19,1936
   44800:	dc800215 	stw	r18,8(sp)
   44804:	dc400115 	stw	r17,4(sp)
   44808:	dc000015 	stw	r16,0(sp)
   4480c:	2823883a 	mov	r17,r5
   44810:	2025883a 	mov	r18,r4
   44814:	dfc00415 	stw	ra,16(sp)
   44818:	004a6500 	call	4a650 <__malloc_lock>
   4481c:	98800217 	ldw	r2,8(r19)
   44820:	9009883a 	mov	r4,r18
   44824:	000b883a 	mov	r5,zero
   44828:	10c00117 	ldw	r3,4(r2)
   4482c:	00bfff04 	movi	r2,-4
   44830:	18a0703a 	and	r16,r3,r2
   44834:	8463c83a 	sub	r17,r16,r17
   44838:	8c43fbc4 	addi	r17,r17,4079
   4483c:	8822d33a 	srli	r17,r17,12
   44840:	0083ffc4 	movi	r2,4095
   44844:	8c7fffc4 	addi	r17,r17,-1
   44848:	8822933a 	slli	r17,r17,12
   4484c:	1440060e 	bge	r2,r17,44868 <_malloc_trim_r+0x78>
   44850:	00475380 	call	47538 <_sbrk_r>
   44854:	98c00217 	ldw	r3,8(r19)
   44858:	9009883a 	mov	r4,r18
   4485c:	044bc83a 	sub	r5,zero,r17
   44860:	80c7883a 	add	r3,r16,r3
   44864:	10c00926 	beq	r2,r3,4488c <_malloc_trim_r+0x9c>
   44868:	004a6700 	call	4a670 <__malloc_unlock>
   4486c:	0005883a 	mov	r2,zero
   44870:	dfc00417 	ldw	ra,16(sp)
   44874:	dcc00317 	ldw	r19,12(sp)
   44878:	dc800217 	ldw	r18,8(sp)
   4487c:	dc400117 	ldw	r17,4(sp)
   44880:	dc000017 	ldw	r16,0(sp)
   44884:	dec00504 	addi	sp,sp,20
   44888:	f800283a 	ret
   4488c:	9009883a 	mov	r4,r18
   44890:	00475380 	call	47538 <_sbrk_r>
   44894:	844dc83a 	sub	r6,r16,r17
   44898:	00ffffc4 	movi	r3,-1
   4489c:	9009883a 	mov	r4,r18
   448a0:	000b883a 	mov	r5,zero
   448a4:	01d00034 	movhi	r7,16384
   448a8:	39c78704 	addi	r7,r7,7708
   448ac:	31800054 	ori	r6,r6,1
   448b0:	10c00926 	beq	r2,r3,448d8 <_malloc_trim_r+0xe8>
   448b4:	38800017 	ldw	r2,0(r7)
   448b8:	98c00217 	ldw	r3,8(r19)
   448bc:	9009883a 	mov	r4,r18
   448c0:	1445c83a 	sub	r2,r2,r17
   448c4:	38800015 	stw	r2,0(r7)
   448c8:	19800115 	stw	r6,4(r3)
   448cc:	004a6700 	call	4a670 <__malloc_unlock>
   448d0:	00800044 	movi	r2,1
   448d4:	003fe606 	br	44870 <_malloc_trim_r+0x80>
   448d8:	00475380 	call	47538 <_sbrk_r>
   448dc:	99800217 	ldw	r6,8(r19)
   448e0:	100f883a 	mov	r7,r2
   448e4:	9009883a 	mov	r4,r18
   448e8:	1187c83a 	sub	r3,r2,r6
   448ec:	008003c4 	movi	r2,15
   448f0:	19400054 	ori	r5,r3,1
   448f4:	10ffdc0e 	bge	r2,r3,44868 <_malloc_trim_r+0x78>
   448f8:	00900034 	movhi	r2,16384
   448fc:	10876d04 	addi	r2,r2,7604
   44900:	10c00017 	ldw	r3,0(r2)
   44904:	00900034 	movhi	r2,16384
   44908:	10878704 	addi	r2,r2,7708
   4490c:	31400115 	stw	r5,4(r6)
   44910:	38c7c83a 	sub	r3,r7,r3
   44914:	10c00015 	stw	r3,0(r2)
   44918:	003fd306 	br	44868 <_malloc_trim_r+0x78>

0004491c <_free_r>:
   4491c:	defffd04 	addi	sp,sp,-12
   44920:	dc400115 	stw	r17,4(sp)
   44924:	dc000015 	stw	r16,0(sp)
   44928:	dfc00215 	stw	ra,8(sp)
   4492c:	2821883a 	mov	r16,r5
   44930:	2023883a 	mov	r17,r4
   44934:	28005a26 	beq	r5,zero,44aa0 <_free_r+0x184>
   44938:	004a6500 	call	4a650 <__malloc_lock>
   4493c:	823ffe04 	addi	r8,r16,-8
   44940:	41400117 	ldw	r5,4(r8)
   44944:	00bfff84 	movi	r2,-2
   44948:	02900034 	movhi	r10,16384
   4494c:	5281e404 	addi	r10,r10,1936
   44950:	288e703a 	and	r7,r5,r2
   44954:	41cd883a 	add	r6,r8,r7
   44958:	30c00117 	ldw	r3,4(r6)
   4495c:	51000217 	ldw	r4,8(r10)
   44960:	00bfff04 	movi	r2,-4
   44964:	1892703a 	and	r9,r3,r2
   44968:	5017883a 	mov	r11,r10
   4496c:	31006726 	beq	r6,r4,44b0c <_free_r+0x1f0>
   44970:	2880004c 	andi	r2,r5,1
   44974:	1005003a 	cmpeq	r2,r2,zero
   44978:	32400115 	stw	r9,4(r6)
   4497c:	10001a1e 	bne	r2,zero,449e8 <_free_r+0xcc>
   44980:	000b883a 	mov	r5,zero
   44984:	3247883a 	add	r3,r6,r9
   44988:	18800117 	ldw	r2,4(r3)
   4498c:	1080004c 	andi	r2,r2,1
   44990:	1000231e 	bne	r2,zero,44a20 <_free_r+0x104>
   44994:	280ac03a 	cmpne	r5,r5,zero
   44998:	3a4f883a 	add	r7,r7,r9
   4499c:	2800451e 	bne	r5,zero,44ab4 <_free_r+0x198>
   449a0:	31000217 	ldw	r4,8(r6)
   449a4:	00900034 	movhi	r2,16384
   449a8:	1081e604 	addi	r2,r2,1944
   449ac:	20807b26 	beq	r4,r2,44b9c <_free_r+0x280>
   449b0:	30800317 	ldw	r2,12(r6)
   449b4:	3a07883a 	add	r3,r7,r8
   449b8:	19c00015 	stw	r7,0(r3)
   449bc:	11000215 	stw	r4,8(r2)
   449c0:	20800315 	stw	r2,12(r4)
   449c4:	38800054 	ori	r2,r7,1
   449c8:	40800115 	stw	r2,4(r8)
   449cc:	28001a26 	beq	r5,zero,44a38 <_free_r+0x11c>
   449d0:	8809883a 	mov	r4,r17
   449d4:	dfc00217 	ldw	ra,8(sp)
   449d8:	dc400117 	ldw	r17,4(sp)
   449dc:	dc000017 	ldw	r16,0(sp)
   449e0:	dec00304 	addi	sp,sp,12
   449e4:	004a6701 	jmpi	4a670 <__malloc_unlock>
   449e8:	80bffe17 	ldw	r2,-8(r16)
   449ec:	50c00204 	addi	r3,r10,8
   449f0:	4091c83a 	sub	r8,r8,r2
   449f4:	41000217 	ldw	r4,8(r8)
   449f8:	388f883a 	add	r7,r7,r2
   449fc:	20c06126 	beq	r4,r3,44b84 <_free_r+0x268>
   44a00:	40800317 	ldw	r2,12(r8)
   44a04:	3247883a 	add	r3,r6,r9
   44a08:	000b883a 	mov	r5,zero
   44a0c:	11000215 	stw	r4,8(r2)
   44a10:	20800315 	stw	r2,12(r4)
   44a14:	18800117 	ldw	r2,4(r3)
   44a18:	1080004c 	andi	r2,r2,1
   44a1c:	103fdd26 	beq	r2,zero,44994 <_free_r+0x78>
   44a20:	38800054 	ori	r2,r7,1
   44a24:	3a07883a 	add	r3,r7,r8
   44a28:	280ac03a 	cmpne	r5,r5,zero
   44a2c:	40800115 	stw	r2,4(r8)
   44a30:	19c00015 	stw	r7,0(r3)
   44a34:	283fe61e 	bne	r5,zero,449d0 <_free_r+0xb4>
   44a38:	00807fc4 	movi	r2,511
   44a3c:	11c01f2e 	bgeu	r2,r7,44abc <_free_r+0x1a0>
   44a40:	3806d27a 	srli	r3,r7,9
   44a44:	1800481e 	bne	r3,zero,44b68 <_free_r+0x24c>
   44a48:	3804d0fa 	srli	r2,r7,3
   44a4c:	100690fa 	slli	r3,r2,3
   44a50:	1acd883a 	add	r6,r3,r11
   44a54:	31400217 	ldw	r5,8(r6)
   44a58:	31405926 	beq	r6,r5,44bc0 <_free_r+0x2a4>
   44a5c:	28800117 	ldw	r2,4(r5)
   44a60:	00ffff04 	movi	r3,-4
   44a64:	10c4703a 	and	r2,r2,r3
   44a68:	3880022e 	bgeu	r7,r2,44a74 <_free_r+0x158>
   44a6c:	29400217 	ldw	r5,8(r5)
   44a70:	317ffa1e 	bne	r6,r5,44a5c <_free_r+0x140>
   44a74:	29800317 	ldw	r6,12(r5)
   44a78:	41800315 	stw	r6,12(r8)
   44a7c:	41400215 	stw	r5,8(r8)
   44a80:	8809883a 	mov	r4,r17
   44a84:	2a000315 	stw	r8,12(r5)
   44a88:	32000215 	stw	r8,8(r6)
   44a8c:	dfc00217 	ldw	ra,8(sp)
   44a90:	dc400117 	ldw	r17,4(sp)
   44a94:	dc000017 	ldw	r16,0(sp)
   44a98:	dec00304 	addi	sp,sp,12
   44a9c:	004a6701 	jmpi	4a670 <__malloc_unlock>
   44aa0:	dfc00217 	ldw	ra,8(sp)
   44aa4:	dc400117 	ldw	r17,4(sp)
   44aa8:	dc000017 	ldw	r16,0(sp)
   44aac:	dec00304 	addi	sp,sp,12
   44ab0:	f800283a 	ret
   44ab4:	31000217 	ldw	r4,8(r6)
   44ab8:	003fbd06 	br	449b0 <_free_r+0x94>
   44abc:	3806d0fa 	srli	r3,r7,3
   44ac0:	00800044 	movi	r2,1
   44ac4:	51400117 	ldw	r5,4(r10)
   44ac8:	180890fa 	slli	r4,r3,3
   44acc:	1807d0ba 	srai	r3,r3,2
   44ad0:	22c9883a 	add	r4,r4,r11
   44ad4:	21800217 	ldw	r6,8(r4)
   44ad8:	10c4983a 	sll	r2,r2,r3
   44adc:	41000315 	stw	r4,12(r8)
   44ae0:	41800215 	stw	r6,8(r8)
   44ae4:	288ab03a 	or	r5,r5,r2
   44ae8:	22000215 	stw	r8,8(r4)
   44aec:	8809883a 	mov	r4,r17
   44af0:	51400115 	stw	r5,4(r10)
   44af4:	32000315 	stw	r8,12(r6)
   44af8:	dfc00217 	ldw	ra,8(sp)
   44afc:	dc400117 	ldw	r17,4(sp)
   44b00:	dc000017 	ldw	r16,0(sp)
   44b04:	dec00304 	addi	sp,sp,12
   44b08:	004a6701 	jmpi	4a670 <__malloc_unlock>
   44b0c:	2880004c 	andi	r2,r5,1
   44b10:	3a4d883a 	add	r6,r7,r9
   44b14:	1000071e 	bne	r2,zero,44b34 <_free_r+0x218>
   44b18:	80bffe17 	ldw	r2,-8(r16)
   44b1c:	4091c83a 	sub	r8,r8,r2
   44b20:	41000317 	ldw	r4,12(r8)
   44b24:	40c00217 	ldw	r3,8(r8)
   44b28:	308d883a 	add	r6,r6,r2
   44b2c:	20c00215 	stw	r3,8(r4)
   44b30:	19000315 	stw	r4,12(r3)
   44b34:	00900034 	movhi	r2,16384
   44b38:	10876c04 	addi	r2,r2,7600
   44b3c:	11000017 	ldw	r4,0(r2)
   44b40:	30c00054 	ori	r3,r6,1
   44b44:	52000215 	stw	r8,8(r10)
   44b48:	40c00115 	stw	r3,4(r8)
   44b4c:	313fa036 	bltu	r6,r4,449d0 <_free_r+0xb4>
   44b50:	00900034 	movhi	r2,16384
   44b54:	10877d04 	addi	r2,r2,7668
   44b58:	11400017 	ldw	r5,0(r2)
   44b5c:	8809883a 	mov	r4,r17
   44b60:	00447f00 	call	447f0 <_malloc_trim_r>
   44b64:	003f9a06 	br	449d0 <_free_r+0xb4>
   44b68:	00800104 	movi	r2,4
   44b6c:	10c0072e 	bgeu	r2,r3,44b8c <_free_r+0x270>
   44b70:	00800504 	movi	r2,20
   44b74:	10c01936 	bltu	r2,r3,44bdc <_free_r+0x2c0>
   44b78:	188016c4 	addi	r2,r3,91
   44b7c:	100690fa 	slli	r3,r2,3
   44b80:	003fb306 	br	44a50 <_free_r+0x134>
   44b84:	01400044 	movi	r5,1
   44b88:	003f7e06 	br	44984 <_free_r+0x68>
   44b8c:	3804d1ba 	srli	r2,r7,6
   44b90:	10800e04 	addi	r2,r2,56
   44b94:	100690fa 	slli	r3,r2,3
   44b98:	003fad06 	br	44a50 <_free_r+0x134>
   44b9c:	22000315 	stw	r8,12(r4)
   44ba0:	22000215 	stw	r8,8(r4)
   44ba4:	3a05883a 	add	r2,r7,r8
   44ba8:	38c00054 	ori	r3,r7,1
   44bac:	11c00015 	stw	r7,0(r2)
   44bb0:	41000215 	stw	r4,8(r8)
   44bb4:	40c00115 	stw	r3,4(r8)
   44bb8:	41000315 	stw	r4,12(r8)
   44bbc:	003f8406 	br	449d0 <_free_r+0xb4>
   44bc0:	1005d0ba 	srai	r2,r2,2
   44bc4:	00c00044 	movi	r3,1
   44bc8:	51000117 	ldw	r4,4(r10)
   44bcc:	1886983a 	sll	r3,r3,r2
   44bd0:	20c8b03a 	or	r4,r4,r3
   44bd4:	51000115 	stw	r4,4(r10)
   44bd8:	003fa706 	br	44a78 <_free_r+0x15c>
   44bdc:	00801504 	movi	r2,84
   44be0:	10c00436 	bltu	r2,r3,44bf4 <_free_r+0x2d8>
   44be4:	3804d33a 	srli	r2,r7,12
   44be8:	10801b84 	addi	r2,r2,110
   44bec:	100690fa 	slli	r3,r2,3
   44bf0:	003f9706 	br	44a50 <_free_r+0x134>
   44bf4:	00805504 	movi	r2,340
   44bf8:	10c00436 	bltu	r2,r3,44c0c <_free_r+0x2f0>
   44bfc:	3804d3fa 	srli	r2,r7,15
   44c00:	10801dc4 	addi	r2,r2,119
   44c04:	100690fa 	slli	r3,r2,3
   44c08:	003f9106 	br	44a50 <_free_r+0x134>
   44c0c:	00815504 	movi	r2,1364
   44c10:	10c0032e 	bgeu	r2,r3,44c20 <_free_r+0x304>
   44c14:	00801f84 	movi	r2,126
   44c18:	00c0fc04 	movi	r3,1008
   44c1c:	003f8c06 	br	44a50 <_free_r+0x134>
   44c20:	3804d4ba 	srli	r2,r7,18
   44c24:	10801f04 	addi	r2,r2,124
   44c28:	100690fa 	slli	r3,r2,3
   44c2c:	003f8806 	br	44a50 <_free_r+0x134>

00044c30 <__sfvwrite_r>:
   44c30:	30800217 	ldw	r2,8(r6)
   44c34:	defff504 	addi	sp,sp,-44
   44c38:	df000915 	stw	fp,36(sp)
   44c3c:	dd800715 	stw	r22,28(sp)
   44c40:	dc800315 	stw	r18,12(sp)
   44c44:	dfc00a15 	stw	ra,40(sp)
   44c48:	ddc00815 	stw	r23,32(sp)
   44c4c:	dd400615 	stw	r21,24(sp)
   44c50:	dd000515 	stw	r20,20(sp)
   44c54:	dcc00415 	stw	r19,16(sp)
   44c58:	dc400215 	stw	r17,8(sp)
   44c5c:	dc000115 	stw	r16,4(sp)
   44c60:	302d883a 	mov	r22,r6
   44c64:	2039883a 	mov	fp,r4
   44c68:	2825883a 	mov	r18,r5
   44c6c:	10001c26 	beq	r2,zero,44ce0 <__sfvwrite_r+0xb0>
   44c70:	29c0030b 	ldhu	r7,12(r5)
   44c74:	3880020c 	andi	r2,r7,8
   44c78:	10002726 	beq	r2,zero,44d18 <__sfvwrite_r+0xe8>
   44c7c:	28800417 	ldw	r2,16(r5)
   44c80:	10002526 	beq	r2,zero,44d18 <__sfvwrite_r+0xe8>
   44c84:	3880008c 	andi	r2,r7,2
   44c88:	b5400017 	ldw	r21,0(r22)
   44c8c:	10002826 	beq	r2,zero,44d30 <__sfvwrite_r+0x100>
   44c90:	0021883a 	mov	r16,zero
   44c94:	0023883a 	mov	r17,zero
   44c98:	880d883a 	mov	r6,r17
   44c9c:	e009883a 	mov	r4,fp
   44ca0:	00810004 	movi	r2,1024
   44ca4:	80006e26 	beq	r16,zero,44e60 <__sfvwrite_r+0x230>
   44ca8:	800f883a 	mov	r7,r16
   44cac:	91400717 	ldw	r5,28(r18)
   44cb0:	1400012e 	bgeu	r2,r16,44cb8 <__sfvwrite_r+0x88>
   44cb4:	100f883a 	mov	r7,r2
   44cb8:	90c00917 	ldw	r3,36(r18)
   44cbc:	183ee83a 	callr	r3
   44cc0:	1007883a 	mov	r3,r2
   44cc4:	80a1c83a 	sub	r16,r16,r2
   44cc8:	88a3883a 	add	r17,r17,r2
   44ccc:	00806d0e 	bge	zero,r2,44e84 <__sfvwrite_r+0x254>
   44cd0:	b0800217 	ldw	r2,8(r22)
   44cd4:	10c5c83a 	sub	r2,r2,r3
   44cd8:	b0800215 	stw	r2,8(r22)
   44cdc:	103fee1e 	bne	r2,zero,44c98 <__sfvwrite_r+0x68>
   44ce0:	0009883a 	mov	r4,zero
   44ce4:	2005883a 	mov	r2,r4
   44ce8:	dfc00a17 	ldw	ra,40(sp)
   44cec:	df000917 	ldw	fp,36(sp)
   44cf0:	ddc00817 	ldw	r23,32(sp)
   44cf4:	dd800717 	ldw	r22,28(sp)
   44cf8:	dd400617 	ldw	r21,24(sp)
   44cfc:	dd000517 	ldw	r20,20(sp)
   44d00:	dcc00417 	ldw	r19,16(sp)
   44d04:	dc800317 	ldw	r18,12(sp)
   44d08:	dc400217 	ldw	r17,8(sp)
   44d0c:	dc000117 	ldw	r16,4(sp)
   44d10:	dec00b04 	addi	sp,sp,44
   44d14:	f800283a 	ret
   44d18:	00429f80 	call	429f8 <__swsetup_r>
   44d1c:	1000e41e 	bne	r2,zero,450b0 <__sfvwrite_r+0x480>
   44d20:	91c0030b 	ldhu	r7,12(r18)
   44d24:	b5400017 	ldw	r21,0(r22)
   44d28:	3880008c 	andi	r2,r7,2
   44d2c:	103fd81e 	bne	r2,zero,44c90 <__sfvwrite_r+0x60>
   44d30:	3880004c 	andi	r2,r7,1
   44d34:	1005003a 	cmpeq	r2,r2,zero
   44d38:	10005726 	beq	r2,zero,44e98 <__sfvwrite_r+0x268>
   44d3c:	0029883a 	mov	r20,zero
   44d40:	002f883a 	mov	r23,zero
   44d44:	a0004226 	beq	r20,zero,44e50 <__sfvwrite_r+0x220>
   44d48:	3880800c 	andi	r2,r7,512
   44d4c:	94000217 	ldw	r16,8(r18)
   44d50:	10008b26 	beq	r2,zero,44f80 <__sfvwrite_r+0x350>
   44d54:	800d883a 	mov	r6,r16
   44d58:	a400a536 	bltu	r20,r16,44ff0 <__sfvwrite_r+0x3c0>
   44d5c:	3881200c 	andi	r2,r7,1152
   44d60:	10002726 	beq	r2,zero,44e00 <__sfvwrite_r+0x1d0>
   44d64:	90800517 	ldw	r2,20(r18)
   44d68:	92000417 	ldw	r8,16(r18)
   44d6c:	91400017 	ldw	r5,0(r18)
   44d70:	1087883a 	add	r3,r2,r2
   44d74:	1887883a 	add	r3,r3,r2
   44d78:	1808d7fa 	srli	r4,r3,31
   44d7c:	2a21c83a 	sub	r16,r5,r8
   44d80:	80800044 	addi	r2,r16,1
   44d84:	20c9883a 	add	r4,r4,r3
   44d88:	2027d07a 	srai	r19,r4,1
   44d8c:	a085883a 	add	r2,r20,r2
   44d90:	980d883a 	mov	r6,r19
   44d94:	9880022e 	bgeu	r19,r2,44da0 <__sfvwrite_r+0x170>
   44d98:	1027883a 	mov	r19,r2
   44d9c:	100d883a 	mov	r6,r2
   44da0:	3881000c 	andi	r2,r7,1024
   44da4:	1000b826 	beq	r2,zero,45088 <__sfvwrite_r+0x458>
   44da8:	300b883a 	mov	r5,r6
   44dac:	e009883a 	mov	r4,fp
   44db0:	00454a40 	call	454a4 <_malloc_r>
   44db4:	10003126 	beq	r2,zero,44e7c <__sfvwrite_r+0x24c>
   44db8:	91400417 	ldw	r5,16(r18)
   44dbc:	1009883a 	mov	r4,r2
   44dc0:	800d883a 	mov	r6,r16
   44dc4:	1023883a 	mov	r17,r2
   44dc8:	0045cc80 	call	45cc8 <memcpy>
   44dcc:	90c0030b 	ldhu	r3,12(r18)
   44dd0:	00beffc4 	movi	r2,-1025
   44dd4:	1886703a 	and	r3,r3,r2
   44dd8:	18c02014 	ori	r3,r3,128
   44ddc:	90c0030d 	sth	r3,12(r18)
   44de0:	9c07c83a 	sub	r3,r19,r16
   44de4:	8c05883a 	add	r2,r17,r16
   44de8:	a00d883a 	mov	r6,r20
   44dec:	a021883a 	mov	r16,r20
   44df0:	90800015 	stw	r2,0(r18)
   44df4:	90c00215 	stw	r3,8(r18)
   44df8:	94400415 	stw	r17,16(r18)
   44dfc:	94c00515 	stw	r19,20(r18)
   44e00:	91000017 	ldw	r4,0(r18)
   44e04:	b80b883a 	mov	r5,r23
   44e08:	a023883a 	mov	r17,r20
   44e0c:	0045d680 	call	45d68 <memmove>
   44e10:	90c00217 	ldw	r3,8(r18)
   44e14:	90800017 	ldw	r2,0(r18)
   44e18:	a027883a 	mov	r19,r20
   44e1c:	1c07c83a 	sub	r3,r3,r16
   44e20:	1405883a 	add	r2,r2,r16
   44e24:	90c00215 	stw	r3,8(r18)
   44e28:	a021883a 	mov	r16,r20
   44e2c:	90800015 	stw	r2,0(r18)
   44e30:	b0800217 	ldw	r2,8(r22)
   44e34:	1405c83a 	sub	r2,r2,r16
   44e38:	b0800215 	stw	r2,8(r22)
   44e3c:	103fa826 	beq	r2,zero,44ce0 <__sfvwrite_r+0xb0>
   44e40:	a469c83a 	sub	r20,r20,r17
   44e44:	91c0030b 	ldhu	r7,12(r18)
   44e48:	bcef883a 	add	r23,r23,r19
   44e4c:	a03fbe1e 	bne	r20,zero,44d48 <__sfvwrite_r+0x118>
   44e50:	adc00017 	ldw	r23,0(r21)
   44e54:	ad000117 	ldw	r20,4(r21)
   44e58:	ad400204 	addi	r21,r21,8
   44e5c:	003fb906 	br	44d44 <__sfvwrite_r+0x114>
   44e60:	ac400017 	ldw	r17,0(r21)
   44e64:	ac000117 	ldw	r16,4(r21)
   44e68:	ad400204 	addi	r21,r21,8
   44e6c:	003f8a06 	br	44c98 <__sfvwrite_r+0x68>
   44e70:	91400417 	ldw	r5,16(r18)
   44e74:	e009883a 	mov	r4,fp
   44e78:	004491c0 	call	4491c <_free_r>
   44e7c:	00800304 	movi	r2,12
   44e80:	e0800015 	stw	r2,0(fp)
   44e84:	9080030b 	ldhu	r2,12(r18)
   44e88:	013fffc4 	movi	r4,-1
   44e8c:	10801014 	ori	r2,r2,64
   44e90:	9080030d 	sth	r2,12(r18)
   44e94:	003f9306 	br	44ce4 <__sfvwrite_r+0xb4>
   44e98:	0027883a 	mov	r19,zero
   44e9c:	002f883a 	mov	r23,zero
   44ea0:	d8000015 	stw	zero,0(sp)
   44ea4:	0029883a 	mov	r20,zero
   44ea8:	98001e26 	beq	r19,zero,44f24 <__sfvwrite_r+0x2f4>
   44eac:	d8c00017 	ldw	r3,0(sp)
   44eb0:	1804c03a 	cmpne	r2,r3,zero
   44eb4:	10005e26 	beq	r2,zero,45030 <__sfvwrite_r+0x400>
   44eb8:	9821883a 	mov	r16,r19
   44ebc:	a4c0012e 	bgeu	r20,r19,44ec4 <__sfvwrite_r+0x294>
   44ec0:	a021883a 	mov	r16,r20
   44ec4:	91000017 	ldw	r4,0(r18)
   44ec8:	90800417 	ldw	r2,16(r18)
   44ecc:	91800217 	ldw	r6,8(r18)
   44ed0:	91c00517 	ldw	r7,20(r18)
   44ed4:	1100022e 	bgeu	r2,r4,44ee0 <__sfvwrite_r+0x2b0>
   44ed8:	31e3883a 	add	r17,r6,r7
   44edc:	8c001616 	blt	r17,r16,44f38 <__sfvwrite_r+0x308>
   44ee0:	81c03816 	blt	r16,r7,44fc4 <__sfvwrite_r+0x394>
   44ee4:	90c00917 	ldw	r3,36(r18)
   44ee8:	91400717 	ldw	r5,28(r18)
   44eec:	e009883a 	mov	r4,fp
   44ef0:	b80d883a 	mov	r6,r23
   44ef4:	183ee83a 	callr	r3
   44ef8:	1023883a 	mov	r17,r2
   44efc:	00bfe10e 	bge	zero,r2,44e84 <__sfvwrite_r+0x254>
   44f00:	a469c83a 	sub	r20,r20,r17
   44f04:	a0001826 	beq	r20,zero,44f68 <__sfvwrite_r+0x338>
   44f08:	b0800217 	ldw	r2,8(r22)
   44f0c:	1445c83a 	sub	r2,r2,r17
   44f10:	b0800215 	stw	r2,8(r22)
   44f14:	103f7226 	beq	r2,zero,44ce0 <__sfvwrite_r+0xb0>
   44f18:	9c67c83a 	sub	r19,r19,r17
   44f1c:	bc6f883a 	add	r23,r23,r17
   44f20:	983fe21e 	bne	r19,zero,44eac <__sfvwrite_r+0x27c>
   44f24:	adc00017 	ldw	r23,0(r21)
   44f28:	acc00117 	ldw	r19,4(r21)
   44f2c:	ad400204 	addi	r21,r21,8
   44f30:	d8000015 	stw	zero,0(sp)
   44f34:	003fdc06 	br	44ea8 <__sfvwrite_r+0x278>
   44f38:	b80b883a 	mov	r5,r23
   44f3c:	880d883a 	mov	r6,r17
   44f40:	0045d680 	call	45d68 <memmove>
   44f44:	90c00017 	ldw	r3,0(r18)
   44f48:	e009883a 	mov	r4,fp
   44f4c:	900b883a 	mov	r5,r18
   44f50:	1c47883a 	add	r3,r3,r17
   44f54:	90c00015 	stw	r3,0(r18)
   44f58:	00443000 	call	44300 <_fflush_r>
   44f5c:	103fc91e 	bne	r2,zero,44e84 <__sfvwrite_r+0x254>
   44f60:	a469c83a 	sub	r20,r20,r17
   44f64:	a03fe81e 	bne	r20,zero,44f08 <__sfvwrite_r+0x2d8>
   44f68:	e009883a 	mov	r4,fp
   44f6c:	900b883a 	mov	r5,r18
   44f70:	00443000 	call	44300 <_fflush_r>
   44f74:	103fc31e 	bne	r2,zero,44e84 <__sfvwrite_r+0x254>
   44f78:	d8000015 	stw	zero,0(sp)
   44f7c:	003fe206 	br	44f08 <__sfvwrite_r+0x2d8>
   44f80:	91000017 	ldw	r4,0(r18)
   44f84:	90800417 	ldw	r2,16(r18)
   44f88:	1100022e 	bgeu	r2,r4,44f94 <__sfvwrite_r+0x364>
   44f8c:	8023883a 	mov	r17,r16
   44f90:	85003136 	bltu	r16,r20,45058 <__sfvwrite_r+0x428>
   44f94:	91c00517 	ldw	r7,20(r18)
   44f98:	a1c01836 	bltu	r20,r7,44ffc <__sfvwrite_r+0x3cc>
   44f9c:	90c00917 	ldw	r3,36(r18)
   44fa0:	91400717 	ldw	r5,28(r18)
   44fa4:	e009883a 	mov	r4,fp
   44fa8:	b80d883a 	mov	r6,r23
   44fac:	183ee83a 	callr	r3
   44fb0:	1021883a 	mov	r16,r2
   44fb4:	00bfb30e 	bge	zero,r2,44e84 <__sfvwrite_r+0x254>
   44fb8:	1023883a 	mov	r17,r2
   44fbc:	1027883a 	mov	r19,r2
   44fc0:	003f9b06 	br	44e30 <__sfvwrite_r+0x200>
   44fc4:	b80b883a 	mov	r5,r23
   44fc8:	800d883a 	mov	r6,r16
   44fcc:	0045d680 	call	45d68 <memmove>
   44fd0:	90c00217 	ldw	r3,8(r18)
   44fd4:	90800017 	ldw	r2,0(r18)
   44fd8:	8023883a 	mov	r17,r16
   44fdc:	1c07c83a 	sub	r3,r3,r16
   44fe0:	1405883a 	add	r2,r2,r16
   44fe4:	90c00215 	stw	r3,8(r18)
   44fe8:	90800015 	stw	r2,0(r18)
   44fec:	003fc406 	br	44f00 <__sfvwrite_r+0x2d0>
   44ff0:	a00d883a 	mov	r6,r20
   44ff4:	a021883a 	mov	r16,r20
   44ff8:	003f8106 	br	44e00 <__sfvwrite_r+0x1d0>
   44ffc:	b80b883a 	mov	r5,r23
   45000:	a00d883a 	mov	r6,r20
   45004:	0045d680 	call	45d68 <memmove>
   45008:	90c00217 	ldw	r3,8(r18)
   4500c:	90800017 	ldw	r2,0(r18)
   45010:	a021883a 	mov	r16,r20
   45014:	1d07c83a 	sub	r3,r3,r20
   45018:	1505883a 	add	r2,r2,r20
   4501c:	a023883a 	mov	r17,r20
   45020:	a027883a 	mov	r19,r20
   45024:	90c00215 	stw	r3,8(r18)
   45028:	90800015 	stw	r2,0(r18)
   4502c:	003f8006 	br	44e30 <__sfvwrite_r+0x200>
   45030:	b809883a 	mov	r4,r23
   45034:	01400284 	movi	r5,10
   45038:	980d883a 	mov	r6,r19
   4503c:	0045be40 	call	45be4 <memchr>
   45040:	10001726 	beq	r2,zero,450a0 <__sfvwrite_r+0x470>
   45044:	15c5c83a 	sub	r2,r2,r23
   45048:	15000044 	addi	r20,r2,1
   4504c:	00800044 	movi	r2,1
   45050:	d8800015 	stw	r2,0(sp)
   45054:	003f9806 	br	44eb8 <__sfvwrite_r+0x288>
   45058:	b80b883a 	mov	r5,r23
   4505c:	800d883a 	mov	r6,r16
   45060:	0045d680 	call	45d68 <memmove>
   45064:	90c00017 	ldw	r3,0(r18)
   45068:	e009883a 	mov	r4,fp
   4506c:	900b883a 	mov	r5,r18
   45070:	1c07883a 	add	r3,r3,r16
   45074:	90c00015 	stw	r3,0(r18)
   45078:	8027883a 	mov	r19,r16
   4507c:	00443000 	call	44300 <_fflush_r>
   45080:	103f6b26 	beq	r2,zero,44e30 <__sfvwrite_r+0x200>
   45084:	003f7f06 	br	44e84 <__sfvwrite_r+0x254>
   45088:	400b883a 	mov	r5,r8
   4508c:	e009883a 	mov	r4,fp
   45090:	0046ed40 	call	46ed4 <_realloc_r>
   45094:	103f7626 	beq	r2,zero,44e70 <__sfvwrite_r+0x240>
   45098:	1023883a 	mov	r17,r2
   4509c:	003f5006 	br	44de0 <__sfvwrite_r+0x1b0>
   450a0:	00c00044 	movi	r3,1
   450a4:	9d000044 	addi	r20,r19,1
   450a8:	d8c00015 	stw	r3,0(sp)
   450ac:	003f8206 	br	44eb8 <__sfvwrite_r+0x288>
   450b0:	9080030b 	ldhu	r2,12(r18)
   450b4:	00c00244 	movi	r3,9
   450b8:	013fffc4 	movi	r4,-1
   450bc:	10801014 	ori	r2,r2,64
   450c0:	9080030d 	sth	r2,12(r18)
   450c4:	e0c00015 	stw	r3,0(fp)
   450c8:	003f0606 	br	44ce4 <__sfvwrite_r+0xb4>

000450cc <_fwalk_reent>:
   450cc:	defff704 	addi	sp,sp,-36
   450d0:	dcc00315 	stw	r19,12(sp)
   450d4:	24c0b804 	addi	r19,r4,736
   450d8:	dd800615 	stw	r22,24(sp)
   450dc:	dd400515 	stw	r21,20(sp)
   450e0:	dfc00815 	stw	ra,32(sp)
   450e4:	ddc00715 	stw	r23,28(sp)
   450e8:	dd000415 	stw	r20,16(sp)
   450ec:	dc800215 	stw	r18,8(sp)
   450f0:	dc400115 	stw	r17,4(sp)
   450f4:	dc000015 	stw	r16,0(sp)
   450f8:	202b883a 	mov	r21,r4
   450fc:	282d883a 	mov	r22,r5
   45100:	00445880 	call	44588 <__sfp_lock_acquire>
   45104:	98002126 	beq	r19,zero,4518c <_fwalk_reent+0xc0>
   45108:	002f883a 	mov	r23,zero
   4510c:	9c800117 	ldw	r18,4(r19)
   45110:	9c000217 	ldw	r16,8(r19)
   45114:	90bfffc4 	addi	r2,r18,-1
   45118:	10000d16 	blt	r2,zero,45150 <_fwalk_reent+0x84>
   4511c:	0023883a 	mov	r17,zero
   45120:	053fffc4 	movi	r20,-1
   45124:	8080030f 	ldh	r2,12(r16)
   45128:	8c400044 	addi	r17,r17,1
   4512c:	10000626 	beq	r2,zero,45148 <_fwalk_reent+0x7c>
   45130:	8080038f 	ldh	r2,14(r16)
   45134:	800b883a 	mov	r5,r16
   45138:	a809883a 	mov	r4,r21
   4513c:	15000226 	beq	r2,r20,45148 <_fwalk_reent+0x7c>
   45140:	b03ee83a 	callr	r22
   45144:	b8aeb03a 	or	r23,r23,r2
   45148:	84001704 	addi	r16,r16,92
   4514c:	947ff51e 	bne	r18,r17,45124 <_fwalk_reent+0x58>
   45150:	9cc00017 	ldw	r19,0(r19)
   45154:	983fed1e 	bne	r19,zero,4510c <_fwalk_reent+0x40>
   45158:	004458c0 	call	4458c <__sfp_lock_release>
   4515c:	b805883a 	mov	r2,r23
   45160:	dfc00817 	ldw	ra,32(sp)
   45164:	ddc00717 	ldw	r23,28(sp)
   45168:	dd800617 	ldw	r22,24(sp)
   4516c:	dd400517 	ldw	r21,20(sp)
   45170:	dd000417 	ldw	r20,16(sp)
   45174:	dcc00317 	ldw	r19,12(sp)
   45178:	dc800217 	ldw	r18,8(sp)
   4517c:	dc400117 	ldw	r17,4(sp)
   45180:	dc000017 	ldw	r16,0(sp)
   45184:	dec00904 	addi	sp,sp,36
   45188:	f800283a 	ret
   4518c:	002f883a 	mov	r23,zero
   45190:	003ff106 	br	45158 <_fwalk_reent+0x8c>

00045194 <_fwalk>:
   45194:	defff804 	addi	sp,sp,-32
   45198:	dcc00315 	stw	r19,12(sp)
   4519c:	24c0b804 	addi	r19,r4,736
   451a0:	dd400515 	stw	r21,20(sp)
   451a4:	dfc00715 	stw	ra,28(sp)
   451a8:	dd800615 	stw	r22,24(sp)
   451ac:	dd000415 	stw	r20,16(sp)
   451b0:	dc800215 	stw	r18,8(sp)
   451b4:	dc400115 	stw	r17,4(sp)
   451b8:	dc000015 	stw	r16,0(sp)
   451bc:	282b883a 	mov	r21,r5
   451c0:	00445880 	call	44588 <__sfp_lock_acquire>
   451c4:	98001f26 	beq	r19,zero,45244 <_fwalk+0xb0>
   451c8:	002d883a 	mov	r22,zero
   451cc:	9c800117 	ldw	r18,4(r19)
   451d0:	9c000217 	ldw	r16,8(r19)
   451d4:	90bfffc4 	addi	r2,r18,-1
   451d8:	10000c16 	blt	r2,zero,4520c <_fwalk+0x78>
   451dc:	0023883a 	mov	r17,zero
   451e0:	053fffc4 	movi	r20,-1
   451e4:	8080030f 	ldh	r2,12(r16)
   451e8:	8c400044 	addi	r17,r17,1
   451ec:	10000526 	beq	r2,zero,45204 <_fwalk+0x70>
   451f0:	8080038f 	ldh	r2,14(r16)
   451f4:	8009883a 	mov	r4,r16
   451f8:	15000226 	beq	r2,r20,45204 <_fwalk+0x70>
   451fc:	a83ee83a 	callr	r21
   45200:	b0acb03a 	or	r22,r22,r2
   45204:	84001704 	addi	r16,r16,92
   45208:	947ff61e 	bne	r18,r17,451e4 <_fwalk+0x50>
   4520c:	9cc00017 	ldw	r19,0(r19)
   45210:	983fee1e 	bne	r19,zero,451cc <_fwalk+0x38>
   45214:	004458c0 	call	4458c <__sfp_lock_release>
   45218:	b005883a 	mov	r2,r22
   4521c:	dfc00717 	ldw	ra,28(sp)
   45220:	dd800617 	ldw	r22,24(sp)
   45224:	dd400517 	ldw	r21,20(sp)
   45228:	dd000417 	ldw	r20,16(sp)
   4522c:	dcc00317 	ldw	r19,12(sp)
   45230:	dc800217 	ldw	r18,8(sp)
   45234:	dc400117 	ldw	r17,4(sp)
   45238:	dc000017 	ldw	r16,0(sp)
   4523c:	dec00804 	addi	sp,sp,32
   45240:	f800283a 	ret
   45244:	002d883a 	mov	r22,zero
   45248:	003ff206 	br	45214 <_fwalk+0x80>

0004524c <__locale_charset>:
   4524c:	d0a00317 	ldw	r2,-32756(gp)
   45250:	f800283a 	ret

00045254 <_localeconv_r>:
   45254:	00900034 	movhi	r2,16384
   45258:	10803c04 	addi	r2,r2,240
   4525c:	f800283a 	ret

00045260 <localeconv>:
   45260:	00900034 	movhi	r2,16384
   45264:	10876804 	addi	r2,r2,7584
   45268:	11000017 	ldw	r4,0(r2)
   4526c:	00452541 	jmpi	45254 <_localeconv_r>

00045270 <_setlocale_r>:
   45270:	defffc04 	addi	sp,sp,-16
   45274:	00d00034 	movhi	r3,16384
   45278:	18c03704 	addi	r3,r3,220
   4527c:	dc800215 	stw	r18,8(sp)
   45280:	dc400115 	stw	r17,4(sp)
   45284:	dc000015 	stw	r16,0(sp)
   45288:	2023883a 	mov	r17,r4
   4528c:	2825883a 	mov	r18,r5
   45290:	dfc00315 	stw	ra,12(sp)
   45294:	3021883a 	mov	r16,r6
   45298:	3009883a 	mov	r4,r6
   4529c:	180b883a 	mov	r5,r3
   452a0:	30000926 	beq	r6,zero,452c8 <_setlocale_r+0x58>
   452a4:	00476f40 	call	476f4 <strcmp>
   452a8:	8009883a 	mov	r4,r16
   452ac:	01500034 	movhi	r5,16384
   452b0:	29402204 	addi	r5,r5,136
   452b4:	10000b1e 	bne	r2,zero,452e4 <_setlocale_r+0x74>
   452b8:	8c000d15 	stw	r16,52(r17)
   452bc:	8c800c15 	stw	r18,48(r17)
   452c0:	00d00034 	movhi	r3,16384
   452c4:	18c03704 	addi	r3,r3,220
   452c8:	1805883a 	mov	r2,r3
   452cc:	dfc00317 	ldw	ra,12(sp)
   452d0:	dc800217 	ldw	r18,8(sp)
   452d4:	dc400117 	ldw	r17,4(sp)
   452d8:	dc000017 	ldw	r16,0(sp)
   452dc:	dec00404 	addi	sp,sp,16
   452e0:	f800283a 	ret
   452e4:	00476f40 	call	476f4 <strcmp>
   452e8:	0007883a 	mov	r3,zero
   452ec:	103ff226 	beq	r2,zero,452b8 <_setlocale_r+0x48>
   452f0:	003ff506 	br	452c8 <_setlocale_r+0x58>

000452f4 <setlocale>:
   452f4:	01900034 	movhi	r6,16384
   452f8:	31876804 	addi	r6,r6,7584
   452fc:	2007883a 	mov	r3,r4
   45300:	31000017 	ldw	r4,0(r6)
   45304:	280d883a 	mov	r6,r5
   45308:	180b883a 	mov	r5,r3
   4530c:	00452701 	jmpi	45270 <_setlocale_r>

00045310 <__smakebuf_r>:
   45310:	2880030b 	ldhu	r2,12(r5)
   45314:	deffed04 	addi	sp,sp,-76
   45318:	dc401015 	stw	r17,64(sp)
   4531c:	1080008c 	andi	r2,r2,2
   45320:	dc000f15 	stw	r16,60(sp)
   45324:	dfc01215 	stw	ra,72(sp)
   45328:	dc801115 	stw	r18,68(sp)
   4532c:	2821883a 	mov	r16,r5
   45330:	2023883a 	mov	r17,r4
   45334:	10000b26 	beq	r2,zero,45364 <__smakebuf_r+0x54>
   45338:	28c010c4 	addi	r3,r5,67
   4533c:	00800044 	movi	r2,1
   45340:	28800515 	stw	r2,20(r5)
   45344:	28c00415 	stw	r3,16(r5)
   45348:	28c00015 	stw	r3,0(r5)
   4534c:	dfc01217 	ldw	ra,72(sp)
   45350:	dc801117 	ldw	r18,68(sp)
   45354:	dc401017 	ldw	r17,64(sp)
   45358:	dc000f17 	ldw	r16,60(sp)
   4535c:	dec01304 	addi	sp,sp,76
   45360:	f800283a 	ret
   45364:	2940038f 	ldh	r5,14(r5)
   45368:	28002116 	blt	r5,zero,453f0 <__smakebuf_r+0xe0>
   4536c:	d80d883a 	mov	r6,sp
   45370:	0047a700 	call	47a70 <_fstat_r>
   45374:	10001e16 	blt	r2,zero,453f0 <__smakebuf_r+0xe0>
   45378:	d8800117 	ldw	r2,4(sp)
   4537c:	00e00014 	movui	r3,32768
   45380:	113c000c 	andi	r4,r2,61440
   45384:	20c03126 	beq	r4,r3,4544c <__smakebuf_r+0x13c>
   45388:	8080030b 	ldhu	r2,12(r16)
   4538c:	00c80004 	movi	r3,8192
   45390:	10820014 	ori	r2,r2,2048
   45394:	8080030d 	sth	r2,12(r16)
   45398:	20c01e26 	beq	r4,r3,45414 <__smakebuf_r+0x104>
   4539c:	04810004 	movi	r18,1024
   453a0:	8809883a 	mov	r4,r17
   453a4:	900b883a 	mov	r5,r18
   453a8:	00454a40 	call	454a4 <_malloc_r>
   453ac:	1009883a 	mov	r4,r2
   453b0:	10003126 	beq	r2,zero,45478 <__smakebuf_r+0x168>
   453b4:	80c0030b 	ldhu	r3,12(r16)
   453b8:	00800134 	movhi	r2,4
   453bc:	10919f04 	addi	r2,r2,18044
   453c0:	88800f15 	stw	r2,60(r17)
   453c4:	18c02014 	ori	r3,r3,128
   453c8:	84800515 	stw	r18,20(r16)
   453cc:	80c0030d 	sth	r3,12(r16)
   453d0:	81000415 	stw	r4,16(r16)
   453d4:	81000015 	stw	r4,0(r16)
   453d8:	dfc01217 	ldw	ra,72(sp)
   453dc:	dc801117 	ldw	r18,68(sp)
   453e0:	dc401017 	ldw	r17,64(sp)
   453e4:	dc000f17 	ldw	r16,60(sp)
   453e8:	dec01304 	addi	sp,sp,76
   453ec:	f800283a 	ret
   453f0:	80c0030b 	ldhu	r3,12(r16)
   453f4:	1880200c 	andi	r2,r3,128
   453f8:	10000426 	beq	r2,zero,4540c <__smakebuf_r+0xfc>
   453fc:	04801004 	movi	r18,64
   45400:	18820014 	ori	r2,r3,2048
   45404:	8080030d 	sth	r2,12(r16)
   45408:	003fe506 	br	453a0 <__smakebuf_r+0x90>
   4540c:	04810004 	movi	r18,1024
   45410:	003ffb06 	br	45400 <__smakebuf_r+0xf0>
   45414:	8140038f 	ldh	r5,14(r16)
   45418:	8809883a 	mov	r4,r17
   4541c:	0047ae40 	call	47ae4 <_isatty_r>
   45420:	103fde26 	beq	r2,zero,4539c <__smakebuf_r+0x8c>
   45424:	8080030b 	ldhu	r2,12(r16)
   45428:	80c010c4 	addi	r3,r16,67
   4542c:	04810004 	movi	r18,1024
   45430:	10800054 	ori	r2,r2,1
   45434:	8080030d 	sth	r2,12(r16)
   45438:	00800044 	movi	r2,1
   4543c:	80c00415 	stw	r3,16(r16)
   45440:	80800515 	stw	r2,20(r16)
   45444:	80c00015 	stw	r3,0(r16)
   45448:	003fd506 	br	453a0 <__smakebuf_r+0x90>
   4544c:	80c00a17 	ldw	r3,40(r16)
   45450:	00800134 	movhi	r2,4
   45454:	109d6c04 	addi	r2,r2,30128
   45458:	18bfcb1e 	bne	r3,r2,45388 <__smakebuf_r+0x78>
   4545c:	8080030b 	ldhu	r2,12(r16)
   45460:	00c10004 	movi	r3,1024
   45464:	1825883a 	mov	r18,r3
   45468:	10c4b03a 	or	r2,r2,r3
   4546c:	8080030d 	sth	r2,12(r16)
   45470:	80c01315 	stw	r3,76(r16)
   45474:	003fca06 	br	453a0 <__smakebuf_r+0x90>
   45478:	8100030b 	ldhu	r4,12(r16)
   4547c:	2080800c 	andi	r2,r4,512
   45480:	103fb21e 	bne	r2,zero,4534c <__smakebuf_r+0x3c>
   45484:	80c010c4 	addi	r3,r16,67
   45488:	21000094 	ori	r4,r4,2
   4548c:	00800044 	movi	r2,1
   45490:	80800515 	stw	r2,20(r16)
   45494:	8100030d 	sth	r4,12(r16)
   45498:	80c00415 	stw	r3,16(r16)
   4549c:	80c00015 	stw	r3,0(r16)
   454a0:	003faa06 	br	4534c <__smakebuf_r+0x3c>

000454a4 <_malloc_r>:
   454a4:	defff604 	addi	sp,sp,-40
   454a8:	28c002c4 	addi	r3,r5,11
   454ac:	00800584 	movi	r2,22
   454b0:	dc800215 	stw	r18,8(sp)
   454b4:	dfc00915 	stw	ra,36(sp)
   454b8:	df000815 	stw	fp,32(sp)
   454bc:	ddc00715 	stw	r23,28(sp)
   454c0:	dd800615 	stw	r22,24(sp)
   454c4:	dd400515 	stw	r21,20(sp)
   454c8:	dd000415 	stw	r20,16(sp)
   454cc:	dcc00315 	stw	r19,12(sp)
   454d0:	dc400115 	stw	r17,4(sp)
   454d4:	dc000015 	stw	r16,0(sp)
   454d8:	2025883a 	mov	r18,r4
   454dc:	10c01236 	bltu	r2,r3,45528 <_malloc_r+0x84>
   454e0:	04400404 	movi	r17,16
   454e4:	8940142e 	bgeu	r17,r5,45538 <_malloc_r+0x94>
   454e8:	00800304 	movi	r2,12
   454ec:	0007883a 	mov	r3,zero
   454f0:	90800015 	stw	r2,0(r18)
   454f4:	1805883a 	mov	r2,r3
   454f8:	dfc00917 	ldw	ra,36(sp)
   454fc:	df000817 	ldw	fp,32(sp)
   45500:	ddc00717 	ldw	r23,28(sp)
   45504:	dd800617 	ldw	r22,24(sp)
   45508:	dd400517 	ldw	r21,20(sp)
   4550c:	dd000417 	ldw	r20,16(sp)
   45510:	dcc00317 	ldw	r19,12(sp)
   45514:	dc800217 	ldw	r18,8(sp)
   45518:	dc400117 	ldw	r17,4(sp)
   4551c:	dc000017 	ldw	r16,0(sp)
   45520:	dec00a04 	addi	sp,sp,40
   45524:	f800283a 	ret
   45528:	00bffe04 	movi	r2,-8
   4552c:	18a2703a 	and	r17,r3,r2
   45530:	883fed16 	blt	r17,zero,454e8 <_malloc_r+0x44>
   45534:	897fec36 	bltu	r17,r5,454e8 <_malloc_r+0x44>
   45538:	9009883a 	mov	r4,r18
   4553c:	004a6500 	call	4a650 <__malloc_lock>
   45540:	00807dc4 	movi	r2,503
   45544:	14402b2e 	bgeu	r2,r17,455f4 <_malloc_r+0x150>
   45548:	8806d27a 	srli	r3,r17,9
   4554c:	18003f1e 	bne	r3,zero,4564c <_malloc_r+0x1a8>
   45550:	880cd0fa 	srli	r6,r17,3
   45554:	300490fa 	slli	r2,r6,3
   45558:	02d00034 	movhi	r11,16384
   4555c:	5ac1e404 	addi	r11,r11,1936
   45560:	12cb883a 	add	r5,r2,r11
   45564:	2c000317 	ldw	r16,12(r5)
   45568:	580f883a 	mov	r7,r11
   4556c:	2c00041e 	bne	r5,r16,45580 <_malloc_r+0xdc>
   45570:	00000a06 	br	4559c <_malloc_r+0xf8>
   45574:	1800860e 	bge	r3,zero,45790 <_malloc_r+0x2ec>
   45578:	84000317 	ldw	r16,12(r16)
   4557c:	2c000726 	beq	r5,r16,4559c <_malloc_r+0xf8>
   45580:	80800117 	ldw	r2,4(r16)
   45584:	00ffff04 	movi	r3,-4
   45588:	10c8703a 	and	r4,r2,r3
   4558c:	2447c83a 	sub	r3,r4,r17
   45590:	008003c4 	movi	r2,15
   45594:	10fff70e 	bge	r2,r3,45574 <_malloc_r+0xd0>
   45598:	31bfffc4 	addi	r6,r6,-1
   4559c:	32400044 	addi	r9,r6,1
   455a0:	02900034 	movhi	r10,16384
   455a4:	5281e604 	addi	r10,r10,1944
   455a8:	54000217 	ldw	r16,8(r10)
   455ac:	8280a026 	beq	r16,r10,45830 <_malloc_r+0x38c>
   455b0:	80800117 	ldw	r2,4(r16)
   455b4:	00ffff04 	movi	r3,-4
   455b8:	10ca703a 	and	r5,r2,r3
   455bc:	2c4dc83a 	sub	r6,r5,r17
   455c0:	008003c4 	movi	r2,15
   455c4:	11808316 	blt	r2,r6,457d4 <_malloc_r+0x330>
   455c8:	52800315 	stw	r10,12(r10)
   455cc:	52800215 	stw	r10,8(r10)
   455d0:	30002916 	blt	r6,zero,45678 <_malloc_r+0x1d4>
   455d4:	8147883a 	add	r3,r16,r5
   455d8:	18800117 	ldw	r2,4(r3)
   455dc:	9009883a 	mov	r4,r18
   455e0:	10800054 	ori	r2,r2,1
   455e4:	18800115 	stw	r2,4(r3)
   455e8:	004a6700 	call	4a670 <__malloc_unlock>
   455ec:	80c00204 	addi	r3,r16,8
   455f0:	003fc006 	br	454f4 <_malloc_r+0x50>
   455f4:	02d00034 	movhi	r11,16384
   455f8:	5ac1e404 	addi	r11,r11,1936
   455fc:	8ac5883a 	add	r2,r17,r11
   45600:	14000317 	ldw	r16,12(r2)
   45604:	580f883a 	mov	r7,r11
   45608:	8806d0fa 	srli	r3,r17,3
   4560c:	14006c26 	beq	r2,r16,457c0 <_malloc_r+0x31c>
   45610:	80c00117 	ldw	r3,4(r16)
   45614:	00bfff04 	movi	r2,-4
   45618:	81800317 	ldw	r6,12(r16)
   4561c:	1886703a 	and	r3,r3,r2
   45620:	80c7883a 	add	r3,r16,r3
   45624:	18800117 	ldw	r2,4(r3)
   45628:	81400217 	ldw	r5,8(r16)
   4562c:	9009883a 	mov	r4,r18
   45630:	10800054 	ori	r2,r2,1
   45634:	18800115 	stw	r2,4(r3)
   45638:	31400215 	stw	r5,8(r6)
   4563c:	29800315 	stw	r6,12(r5)
   45640:	004a6700 	call	4a670 <__malloc_unlock>
   45644:	80c00204 	addi	r3,r16,8
   45648:	003faa06 	br	454f4 <_malloc_r+0x50>
   4564c:	00800104 	movi	r2,4
   45650:	10c0052e 	bgeu	r2,r3,45668 <_malloc_r+0x1c4>
   45654:	00800504 	movi	r2,20
   45658:	10c07836 	bltu	r2,r3,4583c <_malloc_r+0x398>
   4565c:	198016c4 	addi	r6,r3,91
   45660:	300490fa 	slli	r2,r6,3
   45664:	003fbc06 	br	45558 <_malloc_r+0xb4>
   45668:	8804d1ba 	srli	r2,r17,6
   4566c:	11800e04 	addi	r6,r2,56
   45670:	300490fa 	slli	r2,r6,3
   45674:	003fb806 	br	45558 <_malloc_r+0xb4>
   45678:	00807fc4 	movi	r2,511
   4567c:	1140bb36 	bltu	r2,r5,4596c <_malloc_r+0x4c8>
   45680:	2806d0fa 	srli	r3,r5,3
   45684:	573ffe04 	addi	fp,r10,-8
   45688:	00800044 	movi	r2,1
   4568c:	180890fa 	slli	r4,r3,3
   45690:	1807d0ba 	srai	r3,r3,2
   45694:	e1c00117 	ldw	r7,4(fp)
   45698:	5909883a 	add	r4,r11,r4
   4569c:	21400217 	ldw	r5,8(r4)
   456a0:	10c4983a 	sll	r2,r2,r3
   456a4:	81000315 	stw	r4,12(r16)
   456a8:	81400215 	stw	r5,8(r16)
   456ac:	388eb03a 	or	r7,r7,r2
   456b0:	2c000315 	stw	r16,12(r5)
   456b4:	24000215 	stw	r16,8(r4)
   456b8:	e1c00115 	stw	r7,4(fp)
   456bc:	4807883a 	mov	r3,r9
   456c0:	4800cd16 	blt	r9,zero,459f8 <_malloc_r+0x554>
   456c4:	1807d0ba 	srai	r3,r3,2
   456c8:	00800044 	movi	r2,1
   456cc:	10c8983a 	sll	r4,r2,r3
   456d0:	39004436 	bltu	r7,r4,457e4 <_malloc_r+0x340>
   456d4:	21c4703a 	and	r2,r4,r7
   456d8:	10000a1e 	bne	r2,zero,45704 <_malloc_r+0x260>
   456dc:	2109883a 	add	r4,r4,r4
   456e0:	00bfff04 	movi	r2,-4
   456e4:	4884703a 	and	r2,r9,r2
   456e8:	3906703a 	and	r3,r7,r4
   456ec:	12400104 	addi	r9,r2,4
   456f0:	1800041e 	bne	r3,zero,45704 <_malloc_r+0x260>
   456f4:	2109883a 	add	r4,r4,r4
   456f8:	3904703a 	and	r2,r7,r4
   456fc:	4a400104 	addi	r9,r9,4
   45700:	103ffc26 	beq	r2,zero,456f4 <_malloc_r+0x250>
   45704:	480490fa 	slli	r2,r9,3
   45708:	4819883a 	mov	r12,r9
   4570c:	023fff04 	movi	r8,-4
   45710:	589b883a 	add	r13,r11,r2
   45714:	6807883a 	mov	r3,r13
   45718:	014003c4 	movi	r5,15
   4571c:	1c000317 	ldw	r16,12(r3)
   45720:	1c00041e 	bne	r3,r16,45734 <_malloc_r+0x290>
   45724:	0000a706 	br	459c4 <_malloc_r+0x520>
   45728:	3000ab0e 	bge	r6,zero,459d8 <_malloc_r+0x534>
   4572c:	84000317 	ldw	r16,12(r16)
   45730:	1c00a426 	beq	r3,r16,459c4 <_malloc_r+0x520>
   45734:	80800117 	ldw	r2,4(r16)
   45738:	1204703a 	and	r2,r2,r8
   4573c:	144dc83a 	sub	r6,r2,r17
   45740:	29bff90e 	bge	r5,r6,45728 <_malloc_r+0x284>
   45744:	81000317 	ldw	r4,12(r16)
   45748:	80c00217 	ldw	r3,8(r16)
   4574c:	89400054 	ori	r5,r17,1
   45750:	8445883a 	add	r2,r16,r17
   45754:	20c00215 	stw	r3,8(r4)
   45758:	19000315 	stw	r4,12(r3)
   4575c:	81400115 	stw	r5,4(r16)
   45760:	1187883a 	add	r3,r2,r6
   45764:	31000054 	ori	r4,r6,1
   45768:	50800315 	stw	r2,12(r10)
   4576c:	50800215 	stw	r2,8(r10)
   45770:	19800015 	stw	r6,0(r3)
   45774:	11000115 	stw	r4,4(r2)
   45778:	12800215 	stw	r10,8(r2)
   4577c:	12800315 	stw	r10,12(r2)
   45780:	9009883a 	mov	r4,r18
   45784:	004a6700 	call	4a670 <__malloc_unlock>
   45788:	80c00204 	addi	r3,r16,8
   4578c:	003f5906 	br	454f4 <_malloc_r+0x50>
   45790:	8109883a 	add	r4,r16,r4
   45794:	20800117 	ldw	r2,4(r4)
   45798:	80c00217 	ldw	r3,8(r16)
   4579c:	81400317 	ldw	r5,12(r16)
   457a0:	10800054 	ori	r2,r2,1
   457a4:	20800115 	stw	r2,4(r4)
   457a8:	28c00215 	stw	r3,8(r5)
   457ac:	19400315 	stw	r5,12(r3)
   457b0:	9009883a 	mov	r4,r18
   457b4:	004a6700 	call	4a670 <__malloc_unlock>
   457b8:	80c00204 	addi	r3,r16,8
   457bc:	003f4d06 	br	454f4 <_malloc_r+0x50>
   457c0:	80800204 	addi	r2,r16,8
   457c4:	14000317 	ldw	r16,12(r2)
   457c8:	143f911e 	bne	r2,r16,45610 <_malloc_r+0x16c>
   457cc:	1a400084 	addi	r9,r3,2
   457d0:	003f7306 	br	455a0 <_malloc_r+0xfc>
   457d4:	88c00054 	ori	r3,r17,1
   457d8:	8445883a 	add	r2,r16,r17
   457dc:	80c00115 	stw	r3,4(r16)
   457e0:	003fdf06 	br	45760 <_malloc_r+0x2bc>
   457e4:	e4000217 	ldw	r16,8(fp)
   457e8:	00bfff04 	movi	r2,-4
   457ec:	80c00117 	ldw	r3,4(r16)
   457f0:	802d883a 	mov	r22,r16
   457f4:	18aa703a 	and	r21,r3,r2
   457f8:	ac401636 	bltu	r21,r17,45854 <_malloc_r+0x3b0>
   457fc:	ac49c83a 	sub	r4,r21,r17
   45800:	008003c4 	movi	r2,15
   45804:	1100130e 	bge	r2,r4,45854 <_malloc_r+0x3b0>
   45808:	88800054 	ori	r2,r17,1
   4580c:	8447883a 	add	r3,r16,r17
   45810:	80800115 	stw	r2,4(r16)
   45814:	20800054 	ori	r2,r4,1
   45818:	18800115 	stw	r2,4(r3)
   4581c:	e0c00215 	stw	r3,8(fp)
   45820:	9009883a 	mov	r4,r18
   45824:	004a6700 	call	4a670 <__malloc_unlock>
   45828:	80c00204 	addi	r3,r16,8
   4582c:	003f3106 	br	454f4 <_malloc_r+0x50>
   45830:	39c00117 	ldw	r7,4(r7)
   45834:	573ffe04 	addi	fp,r10,-8
   45838:	003fa006 	br	456bc <_malloc_r+0x218>
   4583c:	00801504 	movi	r2,84
   45840:	10c06736 	bltu	r2,r3,459e0 <_malloc_r+0x53c>
   45844:	8804d33a 	srli	r2,r17,12
   45848:	11801b84 	addi	r6,r2,110
   4584c:	300490fa 	slli	r2,r6,3
   45850:	003f4106 	br	45558 <_malloc_r+0xb4>
   45854:	d0a01517 	ldw	r2,-32684(gp)
   45858:	d0e00517 	ldw	r3,-32748(gp)
   4585c:	053fffc4 	movi	r20,-1
   45860:	10800404 	addi	r2,r2,16
   45864:	88a7883a 	add	r19,r17,r2
   45868:	1d000326 	beq	r3,r20,45878 <_malloc_r+0x3d4>
   4586c:	98c3ffc4 	addi	r3,r19,4095
   45870:	00bc0004 	movi	r2,-4096
   45874:	18a6703a 	and	r19,r3,r2
   45878:	9009883a 	mov	r4,r18
   4587c:	980b883a 	mov	r5,r19
   45880:	00475380 	call	47538 <_sbrk_r>
   45884:	1009883a 	mov	r4,r2
   45888:	15000426 	beq	r2,r20,4589c <_malloc_r+0x3f8>
   4588c:	854b883a 	add	r5,r16,r21
   45890:	1029883a 	mov	r20,r2
   45894:	11405a2e 	bgeu	r2,r5,45a00 <_malloc_r+0x55c>
   45898:	87000c26 	beq	r16,fp,458cc <_malloc_r+0x428>
   4589c:	e4000217 	ldw	r16,8(fp)
   458a0:	80c00117 	ldw	r3,4(r16)
   458a4:	00bfff04 	movi	r2,-4
   458a8:	1884703a 	and	r2,r3,r2
   458ac:	14400336 	bltu	r2,r17,458bc <_malloc_r+0x418>
   458b0:	1449c83a 	sub	r4,r2,r17
   458b4:	008003c4 	movi	r2,15
   458b8:	113fd316 	blt	r2,r4,45808 <_malloc_r+0x364>
   458bc:	9009883a 	mov	r4,r18
   458c0:	004a6700 	call	4a670 <__malloc_unlock>
   458c4:	0007883a 	mov	r3,zero
   458c8:	003f0a06 	br	454f4 <_malloc_r+0x50>
   458cc:	05d00034 	movhi	r23,16384
   458d0:	bdc78704 	addi	r23,r23,7708
   458d4:	b8800017 	ldw	r2,0(r23)
   458d8:	988d883a 	add	r6,r19,r2
   458dc:	b9800015 	stw	r6,0(r23)
   458e0:	d0e00517 	ldw	r3,-32748(gp)
   458e4:	00bfffc4 	movi	r2,-1
   458e8:	18808e26 	beq	r3,r2,45b24 <_malloc_r+0x680>
   458ec:	2145c83a 	sub	r2,r4,r5
   458f0:	3085883a 	add	r2,r6,r2
   458f4:	b8800015 	stw	r2,0(r23)
   458f8:	20c001cc 	andi	r3,r4,7
   458fc:	18005f1e 	bne	r3,zero,45a7c <_malloc_r+0x5d8>
   45900:	000b883a 	mov	r5,zero
   45904:	a4c5883a 	add	r2,r20,r19
   45908:	1083ffcc 	andi	r2,r2,4095
   4590c:	00c40004 	movi	r3,4096
   45910:	1887c83a 	sub	r3,r3,r2
   45914:	28e7883a 	add	r19,r5,r3
   45918:	9009883a 	mov	r4,r18
   4591c:	980b883a 	mov	r5,r19
   45920:	00475380 	call	47538 <_sbrk_r>
   45924:	1007883a 	mov	r3,r2
   45928:	00bfffc4 	movi	r2,-1
   4592c:	18807a26 	beq	r3,r2,45b18 <_malloc_r+0x674>
   45930:	1d05c83a 	sub	r2,r3,r20
   45934:	9885883a 	add	r2,r19,r2
   45938:	10c00054 	ori	r3,r2,1
   4593c:	b8800017 	ldw	r2,0(r23)
   45940:	a021883a 	mov	r16,r20
   45944:	a0c00115 	stw	r3,4(r20)
   45948:	9885883a 	add	r2,r19,r2
   4594c:	b8800015 	stw	r2,0(r23)
   45950:	e5000215 	stw	r20,8(fp)
   45954:	b7003626 	beq	r22,fp,45a30 <_malloc_r+0x58c>
   45958:	018003c4 	movi	r6,15
   4595c:	35404b36 	bltu	r6,r21,45a8c <_malloc_r+0x5e8>
   45960:	00800044 	movi	r2,1
   45964:	a0800115 	stw	r2,4(r20)
   45968:	003fcd06 	br	458a0 <_malloc_r+0x3fc>
   4596c:	2808d27a 	srli	r4,r5,9
   45970:	2000371e 	bne	r4,zero,45a50 <_malloc_r+0x5ac>
   45974:	2808d0fa 	srli	r4,r5,3
   45978:	200690fa 	slli	r3,r4,3
   4597c:	1ad1883a 	add	r8,r3,r11
   45980:	41800217 	ldw	r6,8(r8)
   45984:	41805b26 	beq	r8,r6,45af4 <_malloc_r+0x650>
   45988:	30800117 	ldw	r2,4(r6)
   4598c:	00ffff04 	movi	r3,-4
   45990:	10c4703a 	and	r2,r2,r3
   45994:	2880022e 	bgeu	r5,r2,459a0 <_malloc_r+0x4fc>
   45998:	31800217 	ldw	r6,8(r6)
   4599c:	41bffa1e 	bne	r8,r6,45988 <_malloc_r+0x4e4>
   459a0:	32000317 	ldw	r8,12(r6)
   459a4:	39c00117 	ldw	r7,4(r7)
   459a8:	82000315 	stw	r8,12(r16)
   459ac:	81800215 	stw	r6,8(r16)
   459b0:	07100034 	movhi	fp,16384
   459b4:	e701e404 	addi	fp,fp,1936
   459b8:	34000315 	stw	r16,12(r6)
   459bc:	44000215 	stw	r16,8(r8)
   459c0:	003f3e06 	br	456bc <_malloc_r+0x218>
   459c4:	63000044 	addi	r12,r12,1
   459c8:	608000cc 	andi	r2,r12,3
   459cc:	10005d26 	beq	r2,zero,45b44 <_malloc_r+0x6a0>
   459d0:	18c00204 	addi	r3,r3,8
   459d4:	003f5106 	br	4571c <_malloc_r+0x278>
   459d8:	8089883a 	add	r4,r16,r2
   459dc:	003f6d06 	br	45794 <_malloc_r+0x2f0>
   459e0:	00805504 	movi	r2,340
   459e4:	10c02036 	bltu	r2,r3,45a68 <_malloc_r+0x5c4>
   459e8:	8804d3fa 	srli	r2,r17,15
   459ec:	11801dc4 	addi	r6,r2,119
   459f0:	300490fa 	slli	r2,r6,3
   459f4:	003ed806 	br	45558 <_malloc_r+0xb4>
   459f8:	48c000c4 	addi	r3,r9,3
   459fc:	003f3106 	br	456c4 <_malloc_r+0x220>
   45a00:	05d00034 	movhi	r23,16384
   45a04:	bdc78704 	addi	r23,r23,7708
   45a08:	b8800017 	ldw	r2,0(r23)
   45a0c:	988d883a 	add	r6,r19,r2
   45a10:	b9800015 	stw	r6,0(r23)
   45a14:	293fb21e 	bne	r5,r4,458e0 <_malloc_r+0x43c>
   45a18:	2083ffcc 	andi	r2,r4,4095
   45a1c:	103fb01e 	bne	r2,zero,458e0 <_malloc_r+0x43c>
   45a20:	e4000217 	ldw	r16,8(fp)
   45a24:	9d45883a 	add	r2,r19,r21
   45a28:	10800054 	ori	r2,r2,1
   45a2c:	80800115 	stw	r2,4(r16)
   45a30:	b8c00017 	ldw	r3,0(r23)
   45a34:	d0a01617 	ldw	r2,-32680(gp)
   45a38:	10c0012e 	bgeu	r2,r3,45a40 <_malloc_r+0x59c>
   45a3c:	d0e01615 	stw	r3,-32680(gp)
   45a40:	d0a01717 	ldw	r2,-32676(gp)
   45a44:	10ff962e 	bgeu	r2,r3,458a0 <_malloc_r+0x3fc>
   45a48:	d0e01715 	stw	r3,-32676(gp)
   45a4c:	003f9406 	br	458a0 <_malloc_r+0x3fc>
   45a50:	00800104 	movi	r2,4
   45a54:	11001e36 	bltu	r2,r4,45ad0 <_malloc_r+0x62c>
   45a58:	2804d1ba 	srli	r2,r5,6
   45a5c:	11000e04 	addi	r4,r2,56
   45a60:	200690fa 	slli	r3,r4,3
   45a64:	003fc506 	br	4597c <_malloc_r+0x4d8>
   45a68:	00815504 	movi	r2,1364
   45a6c:	10c01d2e 	bgeu	r2,r3,45ae4 <_malloc_r+0x640>
   45a70:	01801f84 	movi	r6,126
   45a74:	0080fc04 	movi	r2,1008
   45a78:	003eb706 	br	45558 <_malloc_r+0xb4>
   45a7c:	00800204 	movi	r2,8
   45a80:	10cbc83a 	sub	r5,r2,r3
   45a84:	2169883a 	add	r20,r4,r5
   45a88:	003f9e06 	br	45904 <_malloc_r+0x460>
   45a8c:	00bffe04 	movi	r2,-8
   45a90:	a93ffd04 	addi	r4,r21,-12
   45a94:	2088703a 	and	r4,r4,r2
   45a98:	b10b883a 	add	r5,r22,r4
   45a9c:	00c00144 	movi	r3,5
   45aa0:	28c00215 	stw	r3,8(r5)
   45aa4:	28c00115 	stw	r3,4(r5)
   45aa8:	b0800117 	ldw	r2,4(r22)
   45aac:	1080004c 	andi	r2,r2,1
   45ab0:	2084b03a 	or	r2,r4,r2
   45ab4:	b0800115 	stw	r2,4(r22)
   45ab8:	313fdd2e 	bgeu	r6,r4,45a30 <_malloc_r+0x58c>
   45abc:	b1400204 	addi	r5,r22,8
   45ac0:	9009883a 	mov	r4,r18
   45ac4:	004491c0 	call	4491c <_free_r>
   45ac8:	e4000217 	ldw	r16,8(fp)
   45acc:	003fd806 	br	45a30 <_malloc_r+0x58c>
   45ad0:	00800504 	movi	r2,20
   45ad4:	11001536 	bltu	r2,r4,45b2c <_malloc_r+0x688>
   45ad8:	210016c4 	addi	r4,r4,91
   45adc:	200690fa 	slli	r3,r4,3
   45ae0:	003fa606 	br	4597c <_malloc_r+0x4d8>
   45ae4:	8804d4ba 	srli	r2,r17,18
   45ae8:	11801f04 	addi	r6,r2,124
   45aec:	300490fa 	slli	r2,r6,3
   45af0:	003e9906 	br	45558 <_malloc_r+0xb4>
   45af4:	2009d0ba 	srai	r4,r4,2
   45af8:	01500034 	movhi	r5,16384
   45afc:	2941e404 	addi	r5,r5,1936
   45b00:	00c00044 	movi	r3,1
   45b04:	28800117 	ldw	r2,4(r5)
   45b08:	1906983a 	sll	r3,r3,r4
   45b0c:	10c4b03a 	or	r2,r2,r3
   45b10:	28800115 	stw	r2,4(r5)
   45b14:	003fa306 	br	459a4 <_malloc_r+0x500>
   45b18:	0027883a 	mov	r19,zero
   45b1c:	00c00044 	movi	r3,1
   45b20:	003f8606 	br	4593c <_malloc_r+0x498>
   45b24:	d1200515 	stw	r4,-32748(gp)
   45b28:	003f7306 	br	458f8 <_malloc_r+0x454>
   45b2c:	00801504 	movi	r2,84
   45b30:	11001936 	bltu	r2,r4,45b98 <_malloc_r+0x6f4>
   45b34:	2804d33a 	srli	r2,r5,12
   45b38:	11001b84 	addi	r4,r2,110
   45b3c:	200690fa 	slli	r3,r4,3
   45b40:	003f8e06 	br	4597c <_malloc_r+0x4d8>
   45b44:	480b883a 	mov	r5,r9
   45b48:	6807883a 	mov	r3,r13
   45b4c:	288000cc 	andi	r2,r5,3
   45b50:	18fffe04 	addi	r3,r3,-8
   45b54:	297fffc4 	addi	r5,r5,-1
   45b58:	10001526 	beq	r2,zero,45bb0 <_malloc_r+0x70c>
   45b5c:	18800217 	ldw	r2,8(r3)
   45b60:	10fffa26 	beq	r2,r3,45b4c <_malloc_r+0x6a8>
   45b64:	2109883a 	add	r4,r4,r4
   45b68:	393f1e36 	bltu	r7,r4,457e4 <_malloc_r+0x340>
   45b6c:	203f1d26 	beq	r4,zero,457e4 <_malloc_r+0x340>
   45b70:	21c4703a 	and	r2,r4,r7
   45b74:	10000226 	beq	r2,zero,45b80 <_malloc_r+0x6dc>
   45b78:	6013883a 	mov	r9,r12
   45b7c:	003ee106 	br	45704 <_malloc_r+0x260>
   45b80:	2109883a 	add	r4,r4,r4
   45b84:	3904703a 	and	r2,r7,r4
   45b88:	63000104 	addi	r12,r12,4
   45b8c:	103ffc26 	beq	r2,zero,45b80 <_malloc_r+0x6dc>
   45b90:	6013883a 	mov	r9,r12
   45b94:	003edb06 	br	45704 <_malloc_r+0x260>
   45b98:	00805504 	movi	r2,340
   45b9c:	11000836 	bltu	r2,r4,45bc0 <_malloc_r+0x71c>
   45ba0:	2804d3fa 	srli	r2,r5,15
   45ba4:	11001dc4 	addi	r4,r2,119
   45ba8:	200690fa 	slli	r3,r4,3
   45bac:	003f7306 	br	4597c <_malloc_r+0x4d8>
   45bb0:	0104303a 	nor	r2,zero,r4
   45bb4:	388e703a 	and	r7,r7,r2
   45bb8:	e1c00115 	stw	r7,4(fp)
   45bbc:	003fe906 	br	45b64 <_malloc_r+0x6c0>
   45bc0:	00815504 	movi	r2,1364
   45bc4:	1100032e 	bgeu	r2,r4,45bd4 <_malloc_r+0x730>
   45bc8:	01001f84 	movi	r4,126
   45bcc:	00c0fc04 	movi	r3,1008
   45bd0:	003f6a06 	br	4597c <_malloc_r+0x4d8>
   45bd4:	2804d4ba 	srli	r2,r5,18
   45bd8:	11001f04 	addi	r4,r2,124
   45bdc:	200690fa 	slli	r3,r4,3
   45be0:	003f6606 	br	4597c <_malloc_r+0x4d8>

00045be4 <memchr>:
   45be4:	008000c4 	movi	r2,3
   45be8:	29403fcc 	andi	r5,r5,255
   45bec:	2007883a 	mov	r3,r4
   45bf0:	1180022e 	bgeu	r2,r6,45bfc <memchr+0x18>
   45bf4:	2084703a 	and	r2,r4,r2
   45bf8:	10000b26 	beq	r2,zero,45c28 <memchr+0x44>
   45bfc:	313fffc4 	addi	r4,r6,-1
   45c00:	3000051e 	bne	r6,zero,45c18 <memchr+0x34>
   45c04:	00002c06 	br	45cb8 <memchr+0xd4>
   45c08:	213fffc4 	addi	r4,r4,-1
   45c0c:	00bfffc4 	movi	r2,-1
   45c10:	18c00044 	addi	r3,r3,1
   45c14:	20802826 	beq	r4,r2,45cb8 <memchr+0xd4>
   45c18:	18800003 	ldbu	r2,0(r3)
   45c1c:	28bffa1e 	bne	r5,r2,45c08 <memchr+0x24>
   45c20:	1805883a 	mov	r2,r3
   45c24:	f800283a 	ret
   45c28:	0011883a 	mov	r8,zero
   45c2c:	0007883a 	mov	r3,zero
   45c30:	01c00104 	movi	r7,4
   45c34:	4004923a 	slli	r2,r8,8
   45c38:	18c00044 	addi	r3,r3,1
   45c3c:	1151883a 	add	r8,r2,r5
   45c40:	19fffc1e 	bne	r3,r7,45c34 <memchr+0x50>
   45c44:	02bfbff4 	movhi	r10,65279
   45c48:	52bfbfc4 	addi	r10,r10,-257
   45c4c:	02602074 	movhi	r9,32897
   45c50:	4a602004 	addi	r9,r9,-32640
   45c54:	02c000c4 	movi	r11,3
   45c58:	20800017 	ldw	r2,0(r4)
   45c5c:	31bfff04 	addi	r6,r6,-4
   45c60:	200f883a 	mov	r7,r4
   45c64:	1204f03a 	xor	r2,r2,r8
   45c68:	1287883a 	add	r3,r2,r10
   45c6c:	1a46703a 	and	r3,r3,r9
   45c70:	0084303a 	nor	r2,zero,r2
   45c74:	10c4703a 	and	r2,r2,r3
   45c78:	10000b26 	beq	r2,zero,45ca8 <memchr+0xc4>
   45c7c:	20800003 	ldbu	r2,0(r4)
   45c80:	28800f26 	beq	r5,r2,45cc0 <memchr+0xdc>
   45c84:	20800043 	ldbu	r2,1(r4)
   45c88:	21c00044 	addi	r7,r4,1
   45c8c:	28800c26 	beq	r5,r2,45cc0 <memchr+0xdc>
   45c90:	20800083 	ldbu	r2,2(r4)
   45c94:	21c00084 	addi	r7,r4,2
   45c98:	28800926 	beq	r5,r2,45cc0 <memchr+0xdc>
   45c9c:	208000c3 	ldbu	r2,3(r4)
   45ca0:	21c000c4 	addi	r7,r4,3
   45ca4:	28800626 	beq	r5,r2,45cc0 <memchr+0xdc>
   45ca8:	21000104 	addi	r4,r4,4
   45cac:	59bfea36 	bltu	r11,r6,45c58 <memchr+0x74>
   45cb0:	2007883a 	mov	r3,r4
   45cb4:	003fd106 	br	45bfc <memchr+0x18>
   45cb8:	0005883a 	mov	r2,zero
   45cbc:	f800283a 	ret
   45cc0:	3805883a 	mov	r2,r7
   45cc4:	f800283a 	ret

00045cc8 <memcpy>:
   45cc8:	01c003c4 	movi	r7,15
   45ccc:	2007883a 	mov	r3,r4
   45cd0:	3980032e 	bgeu	r7,r6,45ce0 <memcpy+0x18>
   45cd4:	2904b03a 	or	r2,r5,r4
   45cd8:	108000cc 	andi	r2,r2,3
   45cdc:	10000926 	beq	r2,zero,45d04 <memcpy+0x3c>
   45ce0:	30000626 	beq	r6,zero,45cfc <memcpy+0x34>
   45ce4:	30cd883a 	add	r6,r6,r3
   45ce8:	28800003 	ldbu	r2,0(r5)
   45cec:	29400044 	addi	r5,r5,1
   45cf0:	18800005 	stb	r2,0(r3)
   45cf4:	18c00044 	addi	r3,r3,1
   45cf8:	30fffb1e 	bne	r6,r3,45ce8 <memcpy+0x20>
   45cfc:	2005883a 	mov	r2,r4
   45d00:	f800283a 	ret
   45d04:	3811883a 	mov	r8,r7
   45d08:	200f883a 	mov	r7,r4
   45d0c:	28c00017 	ldw	r3,0(r5)
   45d10:	31bffc04 	addi	r6,r6,-16
   45d14:	38c00015 	stw	r3,0(r7)
   45d18:	28800117 	ldw	r2,4(r5)
   45d1c:	38800115 	stw	r2,4(r7)
   45d20:	28c00217 	ldw	r3,8(r5)
   45d24:	38c00215 	stw	r3,8(r7)
   45d28:	28800317 	ldw	r2,12(r5)
   45d2c:	29400404 	addi	r5,r5,16
   45d30:	38800315 	stw	r2,12(r7)
   45d34:	39c00404 	addi	r7,r7,16
   45d38:	41bff436 	bltu	r8,r6,45d0c <memcpy+0x44>
   45d3c:	008000c4 	movi	r2,3
   45d40:	1180072e 	bgeu	r2,r6,45d60 <memcpy+0x98>
   45d44:	1007883a 	mov	r3,r2
   45d48:	28800017 	ldw	r2,0(r5)
   45d4c:	31bfff04 	addi	r6,r6,-4
   45d50:	29400104 	addi	r5,r5,4
   45d54:	38800015 	stw	r2,0(r7)
   45d58:	39c00104 	addi	r7,r7,4
   45d5c:	19bffa36 	bltu	r3,r6,45d48 <memcpy+0x80>
   45d60:	3807883a 	mov	r3,r7
   45d64:	003fde06 	br	45ce0 <memcpy+0x18>

00045d68 <memmove>:
   45d68:	2807883a 	mov	r3,r5
   45d6c:	2011883a 	mov	r8,r4
   45d70:	29000c2e 	bgeu	r5,r4,45da4 <memmove+0x3c>
   45d74:	298f883a 	add	r7,r5,r6
   45d78:	21c00a2e 	bgeu	r4,r7,45da4 <memmove+0x3c>
   45d7c:	30000726 	beq	r6,zero,45d9c <memmove+0x34>
   45d80:	2187883a 	add	r3,r4,r6
   45d84:	198dc83a 	sub	r6,r3,r6
   45d88:	39ffffc4 	addi	r7,r7,-1
   45d8c:	38800003 	ldbu	r2,0(r7)
   45d90:	18ffffc4 	addi	r3,r3,-1
   45d94:	18800005 	stb	r2,0(r3)
   45d98:	19bffb1e 	bne	r3,r6,45d88 <memmove+0x20>
   45d9c:	2005883a 	mov	r2,r4
   45da0:	f800283a 	ret
   45da4:	01c003c4 	movi	r7,15
   45da8:	39800a36 	bltu	r7,r6,45dd4 <memmove+0x6c>
   45dac:	303ffb26 	beq	r6,zero,45d9c <memmove+0x34>
   45db0:	400f883a 	mov	r7,r8
   45db4:	320d883a 	add	r6,r6,r8
   45db8:	28800003 	ldbu	r2,0(r5)
   45dbc:	29400044 	addi	r5,r5,1
   45dc0:	38800005 	stb	r2,0(r7)
   45dc4:	39c00044 	addi	r7,r7,1
   45dc8:	39bffb1e 	bne	r7,r6,45db8 <memmove+0x50>
   45dcc:	2005883a 	mov	r2,r4
   45dd0:	f800283a 	ret
   45dd4:	1904b03a 	or	r2,r3,r4
   45dd8:	108000cc 	andi	r2,r2,3
   45ddc:	103ff31e 	bne	r2,zero,45dac <memmove+0x44>
   45de0:	3811883a 	mov	r8,r7
   45de4:	180b883a 	mov	r5,r3
   45de8:	200f883a 	mov	r7,r4
   45dec:	28c00017 	ldw	r3,0(r5)
   45df0:	31bffc04 	addi	r6,r6,-16
   45df4:	38c00015 	stw	r3,0(r7)
   45df8:	28800117 	ldw	r2,4(r5)
   45dfc:	38800115 	stw	r2,4(r7)
   45e00:	28c00217 	ldw	r3,8(r5)
   45e04:	38c00215 	stw	r3,8(r7)
   45e08:	28800317 	ldw	r2,12(r5)
   45e0c:	29400404 	addi	r5,r5,16
   45e10:	38800315 	stw	r2,12(r7)
   45e14:	39c00404 	addi	r7,r7,16
   45e18:	41bff436 	bltu	r8,r6,45dec <memmove+0x84>
   45e1c:	008000c4 	movi	r2,3
   45e20:	1180072e 	bgeu	r2,r6,45e40 <memmove+0xd8>
   45e24:	1007883a 	mov	r3,r2
   45e28:	28800017 	ldw	r2,0(r5)
   45e2c:	31bfff04 	addi	r6,r6,-4
   45e30:	29400104 	addi	r5,r5,4
   45e34:	38800015 	stw	r2,0(r7)
   45e38:	39c00104 	addi	r7,r7,4
   45e3c:	19bffa36 	bltu	r3,r6,45e28 <memmove+0xc0>
   45e40:	3811883a 	mov	r8,r7
   45e44:	003fd906 	br	45dac <memmove+0x44>

00045e48 <memset>:
   45e48:	008000c4 	movi	r2,3
   45e4c:	29403fcc 	andi	r5,r5,255
   45e50:	2007883a 	mov	r3,r4
   45e54:	1180022e 	bgeu	r2,r6,45e60 <memset+0x18>
   45e58:	2084703a 	and	r2,r4,r2
   45e5c:	10000826 	beq	r2,zero,45e80 <memset+0x38>
   45e60:	30000526 	beq	r6,zero,45e78 <memset+0x30>
   45e64:	2805883a 	mov	r2,r5
   45e68:	30cd883a 	add	r6,r6,r3
   45e6c:	18800005 	stb	r2,0(r3)
   45e70:	18c00044 	addi	r3,r3,1
   45e74:	19bffd1e 	bne	r3,r6,45e6c <memset+0x24>
   45e78:	2005883a 	mov	r2,r4
   45e7c:	f800283a 	ret
   45e80:	2804923a 	slli	r2,r5,8
   45e84:	020003c4 	movi	r8,15
   45e88:	200f883a 	mov	r7,r4
   45e8c:	2884b03a 	or	r2,r5,r2
   45e90:	1006943a 	slli	r3,r2,16
   45e94:	10c6b03a 	or	r3,r2,r3
   45e98:	41800a2e 	bgeu	r8,r6,45ec4 <memset+0x7c>
   45e9c:	4005883a 	mov	r2,r8
   45ea0:	31bffc04 	addi	r6,r6,-16
   45ea4:	38c00015 	stw	r3,0(r7)
   45ea8:	38c00115 	stw	r3,4(r7)
   45eac:	38c00215 	stw	r3,8(r7)
   45eb0:	38c00315 	stw	r3,12(r7)
   45eb4:	39c00404 	addi	r7,r7,16
   45eb8:	11bff936 	bltu	r2,r6,45ea0 <memset+0x58>
   45ebc:	008000c4 	movi	r2,3
   45ec0:	1180052e 	bgeu	r2,r6,45ed8 <memset+0x90>
   45ec4:	31bfff04 	addi	r6,r6,-4
   45ec8:	008000c4 	movi	r2,3
   45ecc:	38c00015 	stw	r3,0(r7)
   45ed0:	39c00104 	addi	r7,r7,4
   45ed4:	11bffb36 	bltu	r2,r6,45ec4 <memset+0x7c>
   45ed8:	3807883a 	mov	r3,r7
   45edc:	003fe006 	br	45e60 <memset+0x18>

00045ee0 <_Bfree>:
   45ee0:	28000826 	beq	r5,zero,45f04 <_Bfree+0x24>
   45ee4:	28800117 	ldw	r2,4(r5)
   45ee8:	21001317 	ldw	r4,76(r4)
   45eec:	1085883a 	add	r2,r2,r2
   45ef0:	1085883a 	add	r2,r2,r2
   45ef4:	1105883a 	add	r2,r2,r4
   45ef8:	10c00017 	ldw	r3,0(r2)
   45efc:	28c00015 	stw	r3,0(r5)
   45f00:	11400015 	stw	r5,0(r2)
   45f04:	f800283a 	ret

00045f08 <__hi0bits>:
   45f08:	20bfffec 	andhi	r2,r4,65535
   45f0c:	10001426 	beq	r2,zero,45f60 <__hi0bits+0x58>
   45f10:	0007883a 	mov	r3,zero
   45f14:	20bfc02c 	andhi	r2,r4,65280
   45f18:	1000021e 	bne	r2,zero,45f24 <__hi0bits+0x1c>
   45f1c:	2008923a 	slli	r4,r4,8
   45f20:	18c00204 	addi	r3,r3,8
   45f24:	20bc002c 	andhi	r2,r4,61440
   45f28:	1000021e 	bne	r2,zero,45f34 <__hi0bits+0x2c>
   45f2c:	2008913a 	slli	r4,r4,4
   45f30:	18c00104 	addi	r3,r3,4
   45f34:	20b0002c 	andhi	r2,r4,49152
   45f38:	1000031e 	bne	r2,zero,45f48 <__hi0bits+0x40>
   45f3c:	2105883a 	add	r2,r4,r4
   45f40:	18c00084 	addi	r3,r3,2
   45f44:	1089883a 	add	r4,r2,r2
   45f48:	20000316 	blt	r4,zero,45f58 <__hi0bits+0x50>
   45f4c:	2090002c 	andhi	r2,r4,16384
   45f50:	10000626 	beq	r2,zero,45f6c <__hi0bits+0x64>
   45f54:	18c00044 	addi	r3,r3,1
   45f58:	1805883a 	mov	r2,r3
   45f5c:	f800283a 	ret
   45f60:	2008943a 	slli	r4,r4,16
   45f64:	00c00404 	movi	r3,16
   45f68:	003fea06 	br	45f14 <__hi0bits+0xc>
   45f6c:	00c00804 	movi	r3,32
   45f70:	1805883a 	mov	r2,r3
   45f74:	f800283a 	ret

00045f78 <__lo0bits>:
   45f78:	20c00017 	ldw	r3,0(r4)
   45f7c:	188001cc 	andi	r2,r3,7
   45f80:	10000a26 	beq	r2,zero,45fac <__lo0bits+0x34>
   45f84:	1880004c 	andi	r2,r3,1
   45f88:	1005003a 	cmpeq	r2,r2,zero
   45f8c:	10002126 	beq	r2,zero,46014 <__lo0bits+0x9c>
   45f90:	1880008c 	andi	r2,r3,2
   45f94:	1000251e 	bne	r2,zero,4602c <__lo0bits+0xb4>
   45f98:	1804d0ba 	srli	r2,r3,2
   45f9c:	01400084 	movi	r5,2
   45fa0:	20800015 	stw	r2,0(r4)
   45fa4:	2805883a 	mov	r2,r5
   45fa8:	f800283a 	ret
   45fac:	18bfffcc 	andi	r2,r3,65535
   45fb0:	10001526 	beq	r2,zero,46008 <__lo0bits+0x90>
   45fb4:	000b883a 	mov	r5,zero
   45fb8:	18803fcc 	andi	r2,r3,255
   45fbc:	1000021e 	bne	r2,zero,45fc8 <__lo0bits+0x50>
   45fc0:	1806d23a 	srli	r3,r3,8
   45fc4:	29400204 	addi	r5,r5,8
   45fc8:	188003cc 	andi	r2,r3,15
   45fcc:	1000021e 	bne	r2,zero,45fd8 <__lo0bits+0x60>
   45fd0:	1806d13a 	srli	r3,r3,4
   45fd4:	29400104 	addi	r5,r5,4
   45fd8:	188000cc 	andi	r2,r3,3
   45fdc:	1000021e 	bne	r2,zero,45fe8 <__lo0bits+0x70>
   45fe0:	1806d0ba 	srli	r3,r3,2
   45fe4:	29400084 	addi	r5,r5,2
   45fe8:	1880004c 	andi	r2,r3,1
   45fec:	1000031e 	bne	r2,zero,45ffc <__lo0bits+0x84>
   45ff0:	1806d07a 	srli	r3,r3,1
   45ff4:	18000a26 	beq	r3,zero,46020 <__lo0bits+0xa8>
   45ff8:	29400044 	addi	r5,r5,1
   45ffc:	2805883a 	mov	r2,r5
   46000:	20c00015 	stw	r3,0(r4)
   46004:	f800283a 	ret
   46008:	1806d43a 	srli	r3,r3,16
   4600c:	01400404 	movi	r5,16
   46010:	003fe906 	br	45fb8 <__lo0bits+0x40>
   46014:	000b883a 	mov	r5,zero
   46018:	2805883a 	mov	r2,r5
   4601c:	f800283a 	ret
   46020:	01400804 	movi	r5,32
   46024:	2805883a 	mov	r2,r5
   46028:	f800283a 	ret
   4602c:	1804d07a 	srli	r2,r3,1
   46030:	01400044 	movi	r5,1
   46034:	20800015 	stw	r2,0(r4)
   46038:	003fda06 	br	45fa4 <__lo0bits+0x2c>

0004603c <__mcmp>:
   4603c:	20800417 	ldw	r2,16(r4)
   46040:	28c00417 	ldw	r3,16(r5)
   46044:	10cfc83a 	sub	r7,r2,r3
   46048:	38000c1e 	bne	r7,zero,4607c <__mcmp+0x40>
   4604c:	18c5883a 	add	r2,r3,r3
   46050:	1085883a 	add	r2,r2,r2
   46054:	10c00504 	addi	r3,r2,20
   46058:	21000504 	addi	r4,r4,20
   4605c:	28cb883a 	add	r5,r5,r3
   46060:	2085883a 	add	r2,r4,r2
   46064:	10bfff04 	addi	r2,r2,-4
   46068:	297fff04 	addi	r5,r5,-4
   4606c:	11800017 	ldw	r6,0(r2)
   46070:	28c00017 	ldw	r3,0(r5)
   46074:	30c0031e 	bne	r6,r3,46084 <__mcmp+0x48>
   46078:	20bffa36 	bltu	r4,r2,46064 <__mcmp+0x28>
   4607c:	3805883a 	mov	r2,r7
   46080:	f800283a 	ret
   46084:	30c00336 	bltu	r6,r3,46094 <__mcmp+0x58>
   46088:	01c00044 	movi	r7,1
   4608c:	3805883a 	mov	r2,r7
   46090:	f800283a 	ret
   46094:	01ffffc4 	movi	r7,-1
   46098:	003ff806 	br	4607c <__mcmp+0x40>

0004609c <__ulp>:
   4609c:	295ffc2c 	andhi	r5,r5,32752
   460a0:	013f3034 	movhi	r4,64704
   460a4:	290b883a 	add	r5,r5,r4
   460a8:	0145c83a 	sub	r2,zero,r5
   460ac:	1007d53a 	srai	r3,r2,20
   460b0:	000d883a 	mov	r6,zero
   460b4:	0140040e 	bge	zero,r5,460c8 <__ulp+0x2c>
   460b8:	280f883a 	mov	r7,r5
   460bc:	3807883a 	mov	r3,r7
   460c0:	3005883a 	mov	r2,r6
   460c4:	f800283a 	ret
   460c8:	008004c4 	movi	r2,19
   460cc:	193ffb04 	addi	r4,r3,-20
   460d0:	10c00c0e 	bge	r2,r3,46104 <__ulp+0x68>
   460d4:	008007c4 	movi	r2,31
   460d8:	1107c83a 	sub	r3,r2,r4
   460dc:	00800784 	movi	r2,30
   460e0:	01400044 	movi	r5,1
   460e4:	11000216 	blt	r2,r4,460f0 <__ulp+0x54>
   460e8:	00800044 	movi	r2,1
   460ec:	10ca983a 	sll	r5,r2,r3
   460f0:	000f883a 	mov	r7,zero
   460f4:	280d883a 	mov	r6,r5
   460f8:	3807883a 	mov	r3,r7
   460fc:	3005883a 	mov	r2,r6
   46100:	f800283a 	ret
   46104:	00800234 	movhi	r2,8
   46108:	10cfd83a 	sra	r7,r2,r3
   4610c:	000d883a 	mov	r6,zero
   46110:	3005883a 	mov	r2,r6
   46114:	3807883a 	mov	r3,r7
   46118:	f800283a 	ret

0004611c <__b2d>:
   4611c:	20800417 	ldw	r2,16(r4)
   46120:	defff904 	addi	sp,sp,-28
   46124:	dd000415 	stw	r20,16(sp)
   46128:	1085883a 	add	r2,r2,r2
   4612c:	25000504 	addi	r20,r4,20
   46130:	1085883a 	add	r2,r2,r2
   46134:	dc000015 	stw	r16,0(sp)
   46138:	a0a1883a 	add	r16,r20,r2
   4613c:	dd400515 	stw	r21,20(sp)
   46140:	857fff17 	ldw	r21,-4(r16)
   46144:	dc400115 	stw	r17,4(sp)
   46148:	dfc00615 	stw	ra,24(sp)
   4614c:	a809883a 	mov	r4,r21
   46150:	2823883a 	mov	r17,r5
   46154:	dcc00315 	stw	r19,12(sp)
   46158:	dc800215 	stw	r18,8(sp)
   4615c:	0045f080 	call	45f08 <__hi0bits>
   46160:	100b883a 	mov	r5,r2
   46164:	00800804 	movi	r2,32
   46168:	1145c83a 	sub	r2,r2,r5
   4616c:	88800015 	stw	r2,0(r17)
   46170:	00800284 	movi	r2,10
   46174:	80ffff04 	addi	r3,r16,-4
   46178:	11401416 	blt	r2,r5,461cc <__b2d+0xb0>
   4617c:	008002c4 	movi	r2,11
   46180:	1149c83a 	sub	r4,r2,r5
   46184:	a0c02736 	bltu	r20,r3,46224 <__b2d+0x108>
   46188:	000d883a 	mov	r6,zero
   4618c:	28800544 	addi	r2,r5,21
   46190:	a906d83a 	srl	r3,r21,r4
   46194:	a884983a 	sll	r2,r21,r2
   46198:	1ccffc34 	orhi	r19,r3,16368
   4619c:	11a4b03a 	or	r18,r2,r6
   461a0:	9005883a 	mov	r2,r18
   461a4:	9807883a 	mov	r3,r19
   461a8:	dfc00617 	ldw	ra,24(sp)
   461ac:	dd400517 	ldw	r21,20(sp)
   461b0:	dd000417 	ldw	r20,16(sp)
   461b4:	dcc00317 	ldw	r19,12(sp)
   461b8:	dc800217 	ldw	r18,8(sp)
   461bc:	dc400117 	ldw	r17,4(sp)
   461c0:	dc000017 	ldw	r16,0(sp)
   461c4:	dec00704 	addi	sp,sp,28
   461c8:	f800283a 	ret
   461cc:	a0c00e36 	bltu	r20,r3,46208 <__b2d+0xec>
   461d0:	293ffd44 	addi	r4,r5,-11
   461d4:	000d883a 	mov	r6,zero
   461d8:	20000f26 	beq	r4,zero,46218 <__b2d+0xfc>
   461dc:	00800804 	movi	r2,32
   461e0:	110bc83a 	sub	r5,r2,r4
   461e4:	a0c01236 	bltu	r20,r3,46230 <__b2d+0x114>
   461e8:	000f883a 	mov	r7,zero
   461ec:	a904983a 	sll	r2,r21,r4
   461f0:	3146d83a 	srl	r3,r6,r5
   461f4:	3108983a 	sll	r4,r6,r4
   461f8:	108ffc34 	orhi	r2,r2,16368
   461fc:	18a6b03a 	or	r19,r3,r2
   46200:	3924b03a 	or	r18,r7,r4
   46204:	003fe606 	br	461a0 <__b2d+0x84>
   46208:	293ffd44 	addi	r4,r5,-11
   4620c:	81bffe17 	ldw	r6,-8(r16)
   46210:	80fffe04 	addi	r3,r16,-8
   46214:	203ff11e 	bne	r4,zero,461dc <__b2d+0xc0>
   46218:	accffc34 	orhi	r19,r21,16368
   4621c:	3025883a 	mov	r18,r6
   46220:	003fdf06 	br	461a0 <__b2d+0x84>
   46224:	18bfff17 	ldw	r2,-4(r3)
   46228:	110cd83a 	srl	r6,r2,r4
   4622c:	003fd706 	br	4618c <__b2d+0x70>
   46230:	18bfff17 	ldw	r2,-4(r3)
   46234:	114ed83a 	srl	r7,r2,r5
   46238:	003fec06 	br	461ec <__b2d+0xd0>

0004623c <__ratio>:
   4623c:	defff904 	addi	sp,sp,-28
   46240:	dc400215 	stw	r17,8(sp)
   46244:	2823883a 	mov	r17,r5
   46248:	d80b883a 	mov	r5,sp
   4624c:	dfc00615 	stw	ra,24(sp)
   46250:	dd000515 	stw	r20,20(sp)
   46254:	dcc00415 	stw	r19,16(sp)
   46258:	dc800315 	stw	r18,12(sp)
   4625c:	2025883a 	mov	r18,r4
   46260:	004611c0 	call	4611c <__b2d>
   46264:	8809883a 	mov	r4,r17
   46268:	d9400104 	addi	r5,sp,4
   4626c:	1027883a 	mov	r19,r2
   46270:	1829883a 	mov	r20,r3
   46274:	004611c0 	call	4611c <__b2d>
   46278:	89000417 	ldw	r4,16(r17)
   4627c:	91c00417 	ldw	r7,16(r18)
   46280:	d9800117 	ldw	r6,4(sp)
   46284:	180b883a 	mov	r5,r3
   46288:	390fc83a 	sub	r7,r7,r4
   4628c:	1009883a 	mov	r4,r2
   46290:	d8800017 	ldw	r2,0(sp)
   46294:	380e917a 	slli	r7,r7,5
   46298:	2011883a 	mov	r8,r4
   4629c:	1185c83a 	sub	r2,r2,r6
   462a0:	11c5883a 	add	r2,r2,r7
   462a4:	1006953a 	slli	r3,r2,20
   462a8:	2813883a 	mov	r9,r5
   462ac:	00800d0e 	bge	zero,r2,462e4 <__ratio+0xa8>
   462b0:	1d29883a 	add	r20,r3,r20
   462b4:	a00b883a 	mov	r5,r20
   462b8:	480f883a 	mov	r7,r9
   462bc:	9809883a 	mov	r4,r19
   462c0:	400d883a 	mov	r6,r8
   462c4:	00490880 	call	49088 <__divdf3>
   462c8:	dfc00617 	ldw	ra,24(sp)
   462cc:	dd000517 	ldw	r20,20(sp)
   462d0:	dcc00417 	ldw	r19,16(sp)
   462d4:	dc800317 	ldw	r18,12(sp)
   462d8:	dc400217 	ldw	r17,8(sp)
   462dc:	dec00704 	addi	sp,sp,28
   462e0:	f800283a 	ret
   462e4:	28d3c83a 	sub	r9,r5,r3
   462e8:	003ff206 	br	462b4 <__ratio+0x78>

000462ec <_mprec_log10>:
   462ec:	defffe04 	addi	sp,sp,-8
   462f0:	008005c4 	movi	r2,23
   462f4:	dc000015 	stw	r16,0(sp)
   462f8:	dfc00115 	stw	ra,4(sp)
   462fc:	2021883a 	mov	r16,r4
   46300:	11000c16 	blt	r2,r4,46334 <_mprec_log10+0x48>
   46304:	200490fa 	slli	r2,r4,3
   46308:	00d00034 	movhi	r3,16384
   4630c:	18c04804 	addi	r3,r3,288
   46310:	10c5883a 	add	r2,r2,r3
   46314:	12400117 	ldw	r9,4(r2)
   46318:	12000017 	ldw	r8,0(r2)
   4631c:	4807883a 	mov	r3,r9
   46320:	4005883a 	mov	r2,r8
   46324:	dfc00117 	ldw	ra,4(sp)
   46328:	dc000017 	ldw	r16,0(sp)
   4632c:	dec00204 	addi	sp,sp,8
   46330:	f800283a 	ret
   46334:	0011883a 	mov	r8,zero
   46338:	024ffc34 	movhi	r9,16368
   4633c:	0005883a 	mov	r2,zero
   46340:	00d00934 	movhi	r3,16420
   46344:	480b883a 	mov	r5,r9
   46348:	4009883a 	mov	r4,r8
   4634c:	180f883a 	mov	r7,r3
   46350:	100d883a 	mov	r6,r2
   46354:	0048cd40 	call	48cd4 <__muldf3>
   46358:	843fffc4 	addi	r16,r16,-1
   4635c:	1011883a 	mov	r8,r2
   46360:	1813883a 	mov	r9,r3
   46364:	803ff51e 	bne	r16,zero,4633c <_mprec_log10+0x50>
   46368:	4005883a 	mov	r2,r8
   4636c:	4807883a 	mov	r3,r9
   46370:	dfc00117 	ldw	ra,4(sp)
   46374:	dc000017 	ldw	r16,0(sp)
   46378:	dec00204 	addi	sp,sp,8
   4637c:	f800283a 	ret

00046380 <__copybits>:
   46380:	297fffc4 	addi	r5,r5,-1
   46384:	30800417 	ldw	r2,16(r6)
   46388:	280bd17a 	srai	r5,r5,5
   4638c:	31800504 	addi	r6,r6,20
   46390:	1085883a 	add	r2,r2,r2
   46394:	294b883a 	add	r5,r5,r5
   46398:	294b883a 	add	r5,r5,r5
   4639c:	1085883a 	add	r2,r2,r2
   463a0:	290b883a 	add	r5,r5,r4
   463a4:	3087883a 	add	r3,r6,r2
   463a8:	29400104 	addi	r5,r5,4
   463ac:	30c0052e 	bgeu	r6,r3,463c4 <__copybits+0x44>
   463b0:	30800017 	ldw	r2,0(r6)
   463b4:	31800104 	addi	r6,r6,4
   463b8:	20800015 	stw	r2,0(r4)
   463bc:	21000104 	addi	r4,r4,4
   463c0:	30fffb36 	bltu	r6,r3,463b0 <__copybits+0x30>
   463c4:	2140032e 	bgeu	r4,r5,463d4 <__copybits+0x54>
   463c8:	20000015 	stw	zero,0(r4)
   463cc:	21000104 	addi	r4,r4,4
   463d0:	217ffd36 	bltu	r4,r5,463c8 <__copybits+0x48>
   463d4:	f800283a 	ret

000463d8 <__any_on>:
   463d8:	20800417 	ldw	r2,16(r4)
   463dc:	2807d17a 	srai	r3,r5,5
   463e0:	21000504 	addi	r4,r4,20
   463e4:	10c00d0e 	bge	r2,r3,4641c <__any_on+0x44>
   463e8:	1085883a 	add	r2,r2,r2
   463ec:	1085883a 	add	r2,r2,r2
   463f0:	208d883a 	add	r6,r4,r2
   463f4:	2180182e 	bgeu	r4,r6,46458 <__any_on+0x80>
   463f8:	30bfff17 	ldw	r2,-4(r6)
   463fc:	30ffff04 	addi	r3,r6,-4
   46400:	1000041e 	bne	r2,zero,46414 <__any_on+0x3c>
   46404:	20c0142e 	bgeu	r4,r3,46458 <__any_on+0x80>
   46408:	18ffff04 	addi	r3,r3,-4
   4640c:	18800017 	ldw	r2,0(r3)
   46410:	103ffc26 	beq	r2,zero,46404 <__any_on+0x2c>
   46414:	00800044 	movi	r2,1
   46418:	f800283a 	ret
   4641c:	18800a0e 	bge	r3,r2,46448 <__any_on+0x70>
   46420:	294007cc 	andi	r5,r5,31
   46424:	28000826 	beq	r5,zero,46448 <__any_on+0x70>
   46428:	18c5883a 	add	r2,r3,r3
   4642c:	1085883a 	add	r2,r2,r2
   46430:	208d883a 	add	r6,r4,r2
   46434:	30c00017 	ldw	r3,0(r6)
   46438:	1944d83a 	srl	r2,r3,r5
   4643c:	1144983a 	sll	r2,r2,r5
   46440:	18bff41e 	bne	r3,r2,46414 <__any_on+0x3c>
   46444:	003feb06 	br	463f4 <__any_on+0x1c>
   46448:	18c5883a 	add	r2,r3,r3
   4644c:	1085883a 	add	r2,r2,r2
   46450:	208d883a 	add	r6,r4,r2
   46454:	003fe706 	br	463f4 <__any_on+0x1c>
   46458:	0005883a 	mov	r2,zero
   4645c:	f800283a 	ret

00046460 <_Balloc>:
   46460:	20c01317 	ldw	r3,76(r4)
   46464:	defffb04 	addi	sp,sp,-20
   46468:	dcc00315 	stw	r19,12(sp)
   4646c:	dc800215 	stw	r18,8(sp)
   46470:	dfc00415 	stw	ra,16(sp)
   46474:	2825883a 	mov	r18,r5
   46478:	dc400115 	stw	r17,4(sp)
   4647c:	dc000015 	stw	r16,0(sp)
   46480:	2027883a 	mov	r19,r4
   46484:	01800404 	movi	r6,16
   46488:	01400104 	movi	r5,4
   4648c:	18001726 	beq	r3,zero,464ec <_Balloc+0x8c>
   46490:	01400044 	movi	r5,1
   46494:	9485883a 	add	r2,r18,r18
   46498:	2ca2983a 	sll	r17,r5,r18
   4649c:	1085883a 	add	r2,r2,r2
   464a0:	10c7883a 	add	r3,r2,r3
   464a4:	1c000017 	ldw	r16,0(r3)
   464a8:	8c4d883a 	add	r6,r17,r17
   464ac:	318d883a 	add	r6,r6,r6
   464b0:	9809883a 	mov	r4,r19
   464b4:	31800504 	addi	r6,r6,20
   464b8:	80001226 	beq	r16,zero,46504 <_Balloc+0xa4>
   464bc:	80800017 	ldw	r2,0(r16)
   464c0:	18800015 	stw	r2,0(r3)
   464c4:	80000415 	stw	zero,16(r16)
   464c8:	80000315 	stw	zero,12(r16)
   464cc:	8005883a 	mov	r2,r16
   464d0:	dfc00417 	ldw	ra,16(sp)
   464d4:	dcc00317 	ldw	r19,12(sp)
   464d8:	dc800217 	ldw	r18,8(sp)
   464dc:	dc400117 	ldw	r17,4(sp)
   464e0:	dc000017 	ldw	r16,0(sp)
   464e4:	dec00504 	addi	sp,sp,20
   464e8:	f800283a 	ret
   464ec:	00478280 	call	47828 <_calloc_r>
   464f0:	1007883a 	mov	r3,r2
   464f4:	0021883a 	mov	r16,zero
   464f8:	98801315 	stw	r2,76(r19)
   464fc:	103fe41e 	bne	r2,zero,46490 <_Balloc+0x30>
   46500:	003ff206 	br	464cc <_Balloc+0x6c>
   46504:	00478280 	call	47828 <_calloc_r>
   46508:	103ff026 	beq	r2,zero,464cc <_Balloc+0x6c>
   4650c:	1021883a 	mov	r16,r2
   46510:	14800115 	stw	r18,4(r2)
   46514:	14400215 	stw	r17,8(r2)
   46518:	003fea06 	br	464c4 <_Balloc+0x64>

0004651c <__d2b>:
   4651c:	defff504 	addi	sp,sp,-44
   46520:	dcc00515 	stw	r19,20(sp)
   46524:	04c00044 	movi	r19,1
   46528:	dc000215 	stw	r16,8(sp)
   4652c:	2821883a 	mov	r16,r5
   46530:	980b883a 	mov	r5,r19
   46534:	ddc00915 	stw	r23,36(sp)
   46538:	dd800815 	stw	r22,32(sp)
   4653c:	dd400715 	stw	r21,28(sp)
   46540:	dd000615 	stw	r20,24(sp)
   46544:	dc800415 	stw	r18,16(sp)
   46548:	dc400315 	stw	r17,12(sp)
   4654c:	dfc00a15 	stw	ra,40(sp)
   46550:	3023883a 	mov	r17,r6
   46554:	382d883a 	mov	r22,r7
   46558:	ddc00b17 	ldw	r23,44(sp)
   4655c:	00464600 	call	46460 <_Balloc>
   46560:	1025883a 	mov	r18,r2
   46564:	00a00034 	movhi	r2,32768
   46568:	10bfffc4 	addi	r2,r2,-1
   4656c:	8888703a 	and	r4,r17,r2
   46570:	202ad53a 	srli	r21,r4,20
   46574:	00800434 	movhi	r2,16
   46578:	10bfffc4 	addi	r2,r2,-1
   4657c:	8886703a 	and	r3,r17,r2
   46580:	a829003a 	cmpeq	r20,r21,zero
   46584:	800b883a 	mov	r5,r16
   46588:	d8c00115 	stw	r3,4(sp)
   4658c:	94000504 	addi	r16,r18,20
   46590:	a000021e 	bne	r20,zero,4659c <__d2b+0x80>
   46594:	18c00434 	orhi	r3,r3,16
   46598:	d8c00115 	stw	r3,4(sp)
   4659c:	28002726 	beq	r5,zero,4663c <__d2b+0x120>
   465a0:	d809883a 	mov	r4,sp
   465a4:	d9400015 	stw	r5,0(sp)
   465a8:	0045f780 	call	45f78 <__lo0bits>
   465ac:	100d883a 	mov	r6,r2
   465b0:	10003526 	beq	r2,zero,46688 <__d2b+0x16c>
   465b4:	d8c00117 	ldw	r3,4(sp)
   465b8:	00800804 	movi	r2,32
   465bc:	1185c83a 	sub	r2,r2,r6
   465c0:	d9000017 	ldw	r4,0(sp)
   465c4:	1886983a 	sll	r3,r3,r2
   465c8:	1906b03a 	or	r3,r3,r4
   465cc:	90c00515 	stw	r3,20(r18)
   465d0:	d8c00117 	ldw	r3,4(sp)
   465d4:	1986d83a 	srl	r3,r3,r6
   465d8:	d8c00115 	stw	r3,4(sp)
   465dc:	180b003a 	cmpeq	r5,r3,zero
   465e0:	00800084 	movi	r2,2
   465e4:	114bc83a 	sub	r5,r2,r5
   465e8:	80c00115 	stw	r3,4(r16)
   465ec:	91400415 	stw	r5,16(r18)
   465f0:	a0001a1e 	bne	r20,zero,4665c <__d2b+0x140>
   465f4:	3545883a 	add	r2,r6,r21
   465f8:	10bef344 	addi	r2,r2,-1075
   465fc:	00c00d44 	movi	r3,53
   46600:	b0800015 	stw	r2,0(r22)
   46604:	1987c83a 	sub	r3,r3,r6
   46608:	b8c00015 	stw	r3,0(r23)
   4660c:	9005883a 	mov	r2,r18
   46610:	dfc00a17 	ldw	ra,40(sp)
   46614:	ddc00917 	ldw	r23,36(sp)
   46618:	dd800817 	ldw	r22,32(sp)
   4661c:	dd400717 	ldw	r21,28(sp)
   46620:	dd000617 	ldw	r20,24(sp)
   46624:	dcc00517 	ldw	r19,20(sp)
   46628:	dc800417 	ldw	r18,16(sp)
   4662c:	dc400317 	ldw	r17,12(sp)
   46630:	dc000217 	ldw	r16,8(sp)
   46634:	dec00b04 	addi	sp,sp,44
   46638:	f800283a 	ret
   4663c:	d9000104 	addi	r4,sp,4
   46640:	0045f780 	call	45f78 <__lo0bits>
   46644:	11800804 	addi	r6,r2,32
   46648:	d8800117 	ldw	r2,4(sp)
   4664c:	94c00415 	stw	r19,16(r18)
   46650:	980b883a 	mov	r5,r19
   46654:	90800515 	stw	r2,20(r18)
   46658:	a03fe626 	beq	r20,zero,465f4 <__d2b+0xd8>
   4665c:	2945883a 	add	r2,r5,r5
   46660:	1085883a 	add	r2,r2,r2
   46664:	1405883a 	add	r2,r2,r16
   46668:	113fff17 	ldw	r4,-4(r2)
   4666c:	30fef384 	addi	r3,r6,-1074
   46670:	2820917a 	slli	r16,r5,5
   46674:	b0c00015 	stw	r3,0(r22)
   46678:	0045f080 	call	45f08 <__hi0bits>
   4667c:	80a1c83a 	sub	r16,r16,r2
   46680:	bc000015 	stw	r16,0(r23)
   46684:	003fe106 	br	4660c <__d2b+0xf0>
   46688:	d8800017 	ldw	r2,0(sp)
   4668c:	90800515 	stw	r2,20(r18)
   46690:	d8c00117 	ldw	r3,4(sp)
   46694:	003fd106 	br	465dc <__d2b+0xc0>

00046698 <__mdiff>:
   46698:	defffb04 	addi	sp,sp,-20
   4669c:	dc000015 	stw	r16,0(sp)
   466a0:	2821883a 	mov	r16,r5
   466a4:	dc800215 	stw	r18,8(sp)
   466a8:	300b883a 	mov	r5,r6
   466ac:	2025883a 	mov	r18,r4
   466b0:	8009883a 	mov	r4,r16
   466b4:	dc400115 	stw	r17,4(sp)
   466b8:	dfc00415 	stw	ra,16(sp)
   466bc:	dcc00315 	stw	r19,12(sp)
   466c0:	3023883a 	mov	r17,r6
   466c4:	004603c0 	call	4603c <__mcmp>
   466c8:	10004226 	beq	r2,zero,467d4 <__mdiff+0x13c>
   466cc:	10005016 	blt	r2,zero,46810 <__mdiff+0x178>
   466d0:	0027883a 	mov	r19,zero
   466d4:	81400117 	ldw	r5,4(r16)
   466d8:	9009883a 	mov	r4,r18
   466dc:	00464600 	call	46460 <_Balloc>
   466e0:	1019883a 	mov	r12,r2
   466e4:	82800417 	ldw	r10,16(r16)
   466e8:	88800417 	ldw	r2,16(r17)
   466ec:	81800504 	addi	r6,r16,20
   466f0:	5287883a 	add	r3,r10,r10
   466f4:	1085883a 	add	r2,r2,r2
   466f8:	18c7883a 	add	r3,r3,r3
   466fc:	1085883a 	add	r2,r2,r2
   46700:	8a000504 	addi	r8,r17,20
   46704:	64c00315 	stw	r19,12(r12)
   46708:	30db883a 	add	r13,r6,r3
   4670c:	4097883a 	add	r11,r8,r2
   46710:	61c00504 	addi	r7,r12,20
   46714:	0013883a 	mov	r9,zero
   46718:	31000017 	ldw	r4,0(r6)
   4671c:	41400017 	ldw	r5,0(r8)
   46720:	42000104 	addi	r8,r8,4
   46724:	20bfffcc 	andi	r2,r4,65535
   46728:	28ffffcc 	andi	r3,r5,65535
   4672c:	10c5c83a 	sub	r2,r2,r3
   46730:	1245883a 	add	r2,r2,r9
   46734:	2008d43a 	srli	r4,r4,16
   46738:	280ad43a 	srli	r5,r5,16
   4673c:	1007d43a 	srai	r3,r2,16
   46740:	3880000d 	sth	r2,0(r7)
   46744:	2149c83a 	sub	r4,r4,r5
   46748:	20c9883a 	add	r4,r4,r3
   4674c:	3900008d 	sth	r4,2(r7)
   46750:	31800104 	addi	r6,r6,4
   46754:	39c00104 	addi	r7,r7,4
   46758:	2013d43a 	srai	r9,r4,16
   4675c:	42ffee36 	bltu	r8,r11,46718 <__mdiff+0x80>
   46760:	33400c2e 	bgeu	r6,r13,46794 <__mdiff+0xfc>
   46764:	30800017 	ldw	r2,0(r6)
   46768:	31800104 	addi	r6,r6,4
   4676c:	10ffffcc 	andi	r3,r2,65535
   46770:	1a47883a 	add	r3,r3,r9
   46774:	1004d43a 	srli	r2,r2,16
   46778:	1809d43a 	srai	r4,r3,16
   4677c:	38c0000d 	sth	r3,0(r7)
   46780:	1105883a 	add	r2,r2,r4
   46784:	3880008d 	sth	r2,2(r7)
   46788:	1013d43a 	srai	r9,r2,16
   4678c:	39c00104 	addi	r7,r7,4
   46790:	337ff436 	bltu	r6,r13,46764 <__mdiff+0xcc>
   46794:	38bfff17 	ldw	r2,-4(r7)
   46798:	38ffff04 	addi	r3,r7,-4
   4679c:	1000041e 	bne	r2,zero,467b0 <__mdiff+0x118>
   467a0:	18ffff04 	addi	r3,r3,-4
   467a4:	18800017 	ldw	r2,0(r3)
   467a8:	52bfffc4 	addi	r10,r10,-1
   467ac:	103ffc26 	beq	r2,zero,467a0 <__mdiff+0x108>
   467b0:	6005883a 	mov	r2,r12
   467b4:	62800415 	stw	r10,16(r12)
   467b8:	dfc00417 	ldw	ra,16(sp)
   467bc:	dcc00317 	ldw	r19,12(sp)
   467c0:	dc800217 	ldw	r18,8(sp)
   467c4:	dc400117 	ldw	r17,4(sp)
   467c8:	dc000017 	ldw	r16,0(sp)
   467cc:	dec00504 	addi	sp,sp,20
   467d0:	f800283a 	ret
   467d4:	9009883a 	mov	r4,r18
   467d8:	000b883a 	mov	r5,zero
   467dc:	00464600 	call	46460 <_Balloc>
   467e0:	1019883a 	mov	r12,r2
   467e4:	00800044 	movi	r2,1
   467e8:	60800415 	stw	r2,16(r12)
   467ec:	6005883a 	mov	r2,r12
   467f0:	60000515 	stw	zero,20(r12)
   467f4:	dfc00417 	ldw	ra,16(sp)
   467f8:	dcc00317 	ldw	r19,12(sp)
   467fc:	dc800217 	ldw	r18,8(sp)
   46800:	dc400117 	ldw	r17,4(sp)
   46804:	dc000017 	ldw	r16,0(sp)
   46808:	dec00504 	addi	sp,sp,20
   4680c:	f800283a 	ret
   46810:	880d883a 	mov	r6,r17
   46814:	04c00044 	movi	r19,1
   46818:	8023883a 	mov	r17,r16
   4681c:	3021883a 	mov	r16,r6
   46820:	003fac06 	br	466d4 <__mdiff+0x3c>

00046824 <__lshift>:
   46824:	defff904 	addi	sp,sp,-28
   46828:	28800417 	ldw	r2,16(r5)
   4682c:	dc000015 	stw	r16,0(sp)
   46830:	3021d17a 	srai	r16,r6,5
   46834:	28c00217 	ldw	r3,8(r5)
   46838:	10800044 	addi	r2,r2,1
   4683c:	dc400115 	stw	r17,4(sp)
   46840:	80a3883a 	add	r17,r16,r2
   46844:	dd400515 	stw	r21,20(sp)
   46848:	dd000415 	stw	r20,16(sp)
   4684c:	dc800215 	stw	r18,8(sp)
   46850:	dfc00615 	stw	ra,24(sp)
   46854:	2825883a 	mov	r18,r5
   46858:	dcc00315 	stw	r19,12(sp)
   4685c:	3029883a 	mov	r20,r6
   46860:	202b883a 	mov	r21,r4
   46864:	29400117 	ldw	r5,4(r5)
   46868:	1c40030e 	bge	r3,r17,46878 <__lshift+0x54>
   4686c:	18c7883a 	add	r3,r3,r3
   46870:	29400044 	addi	r5,r5,1
   46874:	1c7ffd16 	blt	r3,r17,4686c <__lshift+0x48>
   46878:	a809883a 	mov	r4,r21
   4687c:	00464600 	call	46460 <_Balloc>
   46880:	1027883a 	mov	r19,r2
   46884:	11400504 	addi	r5,r2,20
   46888:	0400090e 	bge	zero,r16,468b0 <__lshift+0x8c>
   4688c:	2805883a 	mov	r2,r5
   46890:	0007883a 	mov	r3,zero
   46894:	18c00044 	addi	r3,r3,1
   46898:	10000015 	stw	zero,0(r2)
   4689c:	10800104 	addi	r2,r2,4
   468a0:	80fffc1e 	bne	r16,r3,46894 <__lshift+0x70>
   468a4:	8405883a 	add	r2,r16,r16
   468a8:	1085883a 	add	r2,r2,r2
   468ac:	288b883a 	add	r5,r5,r2
   468b0:	90800417 	ldw	r2,16(r18)
   468b4:	91000504 	addi	r4,r18,20
   468b8:	a18007cc 	andi	r6,r20,31
   468bc:	1085883a 	add	r2,r2,r2
   468c0:	1085883a 	add	r2,r2,r2
   468c4:	208f883a 	add	r7,r4,r2
   468c8:	30001e26 	beq	r6,zero,46944 <__lshift+0x120>
   468cc:	00800804 	movi	r2,32
   468d0:	1191c83a 	sub	r8,r2,r6
   468d4:	0007883a 	mov	r3,zero
   468d8:	20800017 	ldw	r2,0(r4)
   468dc:	1184983a 	sll	r2,r2,r6
   468e0:	1884b03a 	or	r2,r3,r2
   468e4:	28800015 	stw	r2,0(r5)
   468e8:	20c00017 	ldw	r3,0(r4)
   468ec:	21000104 	addi	r4,r4,4
   468f0:	29400104 	addi	r5,r5,4
   468f4:	1a06d83a 	srl	r3,r3,r8
   468f8:	21fff736 	bltu	r4,r7,468d8 <__lshift+0xb4>
   468fc:	28c00015 	stw	r3,0(r5)
   46900:	18000126 	beq	r3,zero,46908 <__lshift+0xe4>
   46904:	8c400044 	addi	r17,r17,1
   46908:	88bfffc4 	addi	r2,r17,-1
   4690c:	98800415 	stw	r2,16(r19)
   46910:	a809883a 	mov	r4,r21
   46914:	900b883a 	mov	r5,r18
   46918:	0045ee00 	call	45ee0 <_Bfree>
   4691c:	9805883a 	mov	r2,r19
   46920:	dfc00617 	ldw	ra,24(sp)
   46924:	dd400517 	ldw	r21,20(sp)
   46928:	dd000417 	ldw	r20,16(sp)
   4692c:	dcc00317 	ldw	r19,12(sp)
   46930:	dc800217 	ldw	r18,8(sp)
   46934:	dc400117 	ldw	r17,4(sp)
   46938:	dc000017 	ldw	r16,0(sp)
   4693c:	dec00704 	addi	sp,sp,28
   46940:	f800283a 	ret
   46944:	20800017 	ldw	r2,0(r4)
   46948:	21000104 	addi	r4,r4,4
   4694c:	28800015 	stw	r2,0(r5)
   46950:	29400104 	addi	r5,r5,4
   46954:	21ffec2e 	bgeu	r4,r7,46908 <__lshift+0xe4>
   46958:	20800017 	ldw	r2,0(r4)
   4695c:	21000104 	addi	r4,r4,4
   46960:	28800015 	stw	r2,0(r5)
   46964:	29400104 	addi	r5,r5,4
   46968:	21fff636 	bltu	r4,r7,46944 <__lshift+0x120>
   4696c:	003fe606 	br	46908 <__lshift+0xe4>

00046970 <__multiply>:
   46970:	defff904 	addi	sp,sp,-28
   46974:	dcc00315 	stw	r19,12(sp)
   46978:	dc800215 	stw	r18,8(sp)
   4697c:	2cc00417 	ldw	r19,16(r5)
   46980:	34800417 	ldw	r18,16(r6)
   46984:	dd000415 	stw	r20,16(sp)
   46988:	dc400115 	stw	r17,4(sp)
   4698c:	dfc00615 	stw	ra,24(sp)
   46990:	dd400515 	stw	r21,20(sp)
   46994:	dc000015 	stw	r16,0(sp)
   46998:	2823883a 	mov	r17,r5
   4699c:	3029883a 	mov	r20,r6
   469a0:	9c80040e 	bge	r19,r18,469b4 <__multiply+0x44>
   469a4:	9027883a 	mov	r19,r18
   469a8:	2c800417 	ldw	r18,16(r5)
   469ac:	2829883a 	mov	r20,r5
   469b0:	3023883a 	mov	r17,r6
   469b4:	88800217 	ldw	r2,8(r17)
   469b8:	9ca1883a 	add	r16,r19,r18
   469bc:	89400117 	ldw	r5,4(r17)
   469c0:	1400010e 	bge	r2,r16,469c8 <__multiply+0x58>
   469c4:	29400044 	addi	r5,r5,1
   469c8:	00464600 	call	46460 <_Balloc>
   469cc:	102b883a 	mov	r21,r2
   469d0:	8405883a 	add	r2,r16,r16
   469d4:	1085883a 	add	r2,r2,r2
   469d8:	a9000504 	addi	r4,r21,20
   469dc:	209d883a 	add	r14,r4,r2
   469e0:	2380042e 	bgeu	r4,r14,469f4 <__multiply+0x84>
   469e4:	2005883a 	mov	r2,r4
   469e8:	10000015 	stw	zero,0(r2)
   469ec:	10800104 	addi	r2,r2,4
   469f0:	13bffd36 	bltu	r2,r14,469e8 <__multiply+0x78>
   469f4:	9485883a 	add	r2,r18,r18
   469f8:	9cc7883a 	add	r3,r19,r19
   469fc:	a1800504 	addi	r6,r20,20
   46a00:	1085883a 	add	r2,r2,r2
   46a04:	8b400504 	addi	r13,r17,20
   46a08:	18c7883a 	add	r3,r3,r3
   46a0c:	309f883a 	add	r15,r6,r2
   46a10:	68d7883a 	add	r11,r13,r3
   46a14:	33c03b2e 	bgeu	r6,r15,46b04 <__multiply+0x194>
   46a18:	2019883a 	mov	r12,r4
   46a1c:	30800017 	ldw	r2,0(r6)
   46a20:	127fffcc 	andi	r9,r2,65535
   46a24:	48001826 	beq	r9,zero,46a88 <__multiply+0x118>
   46a28:	6811883a 	mov	r8,r13
   46a2c:	600f883a 	mov	r7,r12
   46a30:	0015883a 	mov	r10,zero
   46a34:	40c00017 	ldw	r3,0(r8)
   46a38:	39400017 	ldw	r5,0(r7)
   46a3c:	42000104 	addi	r8,r8,4
   46a40:	193fffcc 	andi	r4,r3,65535
   46a44:	4909383a 	mul	r4,r9,r4
   46a48:	1806d43a 	srli	r3,r3,16
   46a4c:	28bfffcc 	andi	r2,r5,65535
   46a50:	5085883a 	add	r2,r10,r2
   46a54:	2089883a 	add	r4,r4,r2
   46a58:	48c7383a 	mul	r3,r9,r3
   46a5c:	280ad43a 	srli	r5,r5,16
   46a60:	2004d43a 	srli	r2,r4,16
   46a64:	3900000d 	sth	r4,0(r7)
   46a68:	1947883a 	add	r3,r3,r5
   46a6c:	10c5883a 	add	r2,r2,r3
   46a70:	3880008d 	sth	r2,2(r7)
   46a74:	1014d43a 	srli	r10,r2,16
   46a78:	39c00104 	addi	r7,r7,4
   46a7c:	42ffed36 	bltu	r8,r11,46a34 <__multiply+0xc4>
   46a80:	3a800015 	stw	r10,0(r7)
   46a84:	30800017 	ldw	r2,0(r6)
   46a88:	1012d43a 	srli	r9,r2,16
   46a8c:	48001926 	beq	r9,zero,46af4 <__multiply+0x184>
   46a90:	60800017 	ldw	r2,0(r12)
   46a94:	6811883a 	mov	r8,r13
   46a98:	600f883a 	mov	r7,r12
   46a9c:	0015883a 	mov	r10,zero
   46aa0:	100b883a 	mov	r5,r2
   46aa4:	41000017 	ldw	r4,0(r8)
   46aa8:	2806d43a 	srli	r3,r5,16
   46aac:	3880000d 	sth	r2,0(r7)
   46ab0:	20bfffcc 	andi	r2,r4,65535
   46ab4:	4885383a 	mul	r2,r9,r2
   46ab8:	50c7883a 	add	r3,r10,r3
   46abc:	2008d43a 	srli	r4,r4,16
   46ac0:	10c5883a 	add	r2,r2,r3
   46ac4:	3880008d 	sth	r2,2(r7)
   46ac8:	39c00104 	addi	r7,r7,4
   46acc:	39400017 	ldw	r5,0(r7)
   46ad0:	4909383a 	mul	r4,r9,r4
   46ad4:	1004d43a 	srli	r2,r2,16
   46ad8:	28ffffcc 	andi	r3,r5,65535
   46adc:	20c9883a 	add	r4,r4,r3
   46ae0:	1105883a 	add	r2,r2,r4
   46ae4:	42000104 	addi	r8,r8,4
   46ae8:	1014d43a 	srli	r10,r2,16
   46aec:	42ffed36 	bltu	r8,r11,46aa4 <__multiply+0x134>
   46af0:	38800015 	stw	r2,0(r7)
   46af4:	31800104 	addi	r6,r6,4
   46af8:	33c0022e 	bgeu	r6,r15,46b04 <__multiply+0x194>
   46afc:	63000104 	addi	r12,r12,4
   46b00:	003fc606 	br	46a1c <__multiply+0xac>
   46b04:	0400090e 	bge	zero,r16,46b2c <__multiply+0x1bc>
   46b08:	70bfff17 	ldw	r2,-4(r14)
   46b0c:	70ffff04 	addi	r3,r14,-4
   46b10:	10000326 	beq	r2,zero,46b20 <__multiply+0x1b0>
   46b14:	00000506 	br	46b2c <__multiply+0x1bc>
   46b18:	18800017 	ldw	r2,0(r3)
   46b1c:	1000031e 	bne	r2,zero,46b2c <__multiply+0x1bc>
   46b20:	843fffc4 	addi	r16,r16,-1
   46b24:	18ffff04 	addi	r3,r3,-4
   46b28:	803ffb1e 	bne	r16,zero,46b18 <__multiply+0x1a8>
   46b2c:	a805883a 	mov	r2,r21
   46b30:	ac000415 	stw	r16,16(r21)
   46b34:	dfc00617 	ldw	ra,24(sp)
   46b38:	dd400517 	ldw	r21,20(sp)
   46b3c:	dd000417 	ldw	r20,16(sp)
   46b40:	dcc00317 	ldw	r19,12(sp)
   46b44:	dc800217 	ldw	r18,8(sp)
   46b48:	dc400117 	ldw	r17,4(sp)
   46b4c:	dc000017 	ldw	r16,0(sp)
   46b50:	dec00704 	addi	sp,sp,28
   46b54:	f800283a 	ret

00046b58 <__i2b>:
   46b58:	defffd04 	addi	sp,sp,-12
   46b5c:	dc000015 	stw	r16,0(sp)
   46b60:	04000044 	movi	r16,1
   46b64:	dc800115 	stw	r18,4(sp)
   46b68:	2825883a 	mov	r18,r5
   46b6c:	800b883a 	mov	r5,r16
   46b70:	dfc00215 	stw	ra,8(sp)
   46b74:	00464600 	call	46460 <_Balloc>
   46b78:	14000415 	stw	r16,16(r2)
   46b7c:	14800515 	stw	r18,20(r2)
   46b80:	dfc00217 	ldw	ra,8(sp)
   46b84:	dc800117 	ldw	r18,4(sp)
   46b88:	dc000017 	ldw	r16,0(sp)
   46b8c:	dec00304 	addi	sp,sp,12
   46b90:	f800283a 	ret

00046b94 <__multadd>:
   46b94:	defffa04 	addi	sp,sp,-24
   46b98:	dc800215 	stw	r18,8(sp)
   46b9c:	2c800417 	ldw	r18,16(r5)
   46ba0:	dd000415 	stw	r20,16(sp)
   46ba4:	dcc00315 	stw	r19,12(sp)
   46ba8:	dc000015 	stw	r16,0(sp)
   46bac:	dfc00515 	stw	ra,20(sp)
   46bb0:	3821883a 	mov	r16,r7
   46bb4:	dc400115 	stw	r17,4(sp)
   46bb8:	2827883a 	mov	r19,r5
   46bbc:	2029883a 	mov	r20,r4
   46bc0:	2a000504 	addi	r8,r5,20
   46bc4:	000f883a 	mov	r7,zero
   46bc8:	40800017 	ldw	r2,0(r8)
   46bcc:	39c00044 	addi	r7,r7,1
   46bd0:	10ffffcc 	andi	r3,r2,65535
   46bd4:	1987383a 	mul	r3,r3,r6
   46bd8:	1004d43a 	srli	r2,r2,16
   46bdc:	1c07883a 	add	r3,r3,r16
   46be0:	180ad43a 	srli	r5,r3,16
   46be4:	1185383a 	mul	r2,r2,r6
   46be8:	18ffffcc 	andi	r3,r3,65535
   46bec:	1145883a 	add	r2,r2,r5
   46bf0:	1008943a 	slli	r4,r2,16
   46bf4:	1020d43a 	srli	r16,r2,16
   46bf8:	20c9883a 	add	r4,r4,r3
   46bfc:	41000015 	stw	r4,0(r8)
   46c00:	42000104 	addi	r8,r8,4
   46c04:	3cbff016 	blt	r7,r18,46bc8 <__multadd+0x34>
   46c08:	80000826 	beq	r16,zero,46c2c <__multadd+0x98>
   46c0c:	98800217 	ldw	r2,8(r19)
   46c10:	90800f0e 	bge	r18,r2,46c50 <__multadd+0xbc>
   46c14:	9485883a 	add	r2,r18,r18
   46c18:	1085883a 	add	r2,r2,r2
   46c1c:	14c5883a 	add	r2,r2,r19
   46c20:	90c00044 	addi	r3,r18,1
   46c24:	14000515 	stw	r16,20(r2)
   46c28:	98c00415 	stw	r3,16(r19)
   46c2c:	9805883a 	mov	r2,r19
   46c30:	dfc00517 	ldw	ra,20(sp)
   46c34:	dd000417 	ldw	r20,16(sp)
   46c38:	dcc00317 	ldw	r19,12(sp)
   46c3c:	dc800217 	ldw	r18,8(sp)
   46c40:	dc400117 	ldw	r17,4(sp)
   46c44:	dc000017 	ldw	r16,0(sp)
   46c48:	dec00604 	addi	sp,sp,24
   46c4c:	f800283a 	ret
   46c50:	99400117 	ldw	r5,4(r19)
   46c54:	a009883a 	mov	r4,r20
   46c58:	29400044 	addi	r5,r5,1
   46c5c:	00464600 	call	46460 <_Balloc>
   46c60:	99800417 	ldw	r6,16(r19)
   46c64:	99400304 	addi	r5,r19,12
   46c68:	11000304 	addi	r4,r2,12
   46c6c:	318d883a 	add	r6,r6,r6
   46c70:	318d883a 	add	r6,r6,r6
   46c74:	31800204 	addi	r6,r6,8
   46c78:	1023883a 	mov	r17,r2
   46c7c:	0045cc80 	call	45cc8 <memcpy>
   46c80:	980b883a 	mov	r5,r19
   46c84:	a009883a 	mov	r4,r20
   46c88:	0045ee00 	call	45ee0 <_Bfree>
   46c8c:	8827883a 	mov	r19,r17
   46c90:	003fe006 	br	46c14 <__multadd+0x80>

00046c94 <__pow5mult>:
   46c94:	defffa04 	addi	sp,sp,-24
   46c98:	308000cc 	andi	r2,r6,3
   46c9c:	dd000415 	stw	r20,16(sp)
   46ca0:	dcc00315 	stw	r19,12(sp)
   46ca4:	dc000015 	stw	r16,0(sp)
   46ca8:	dfc00515 	stw	ra,20(sp)
   46cac:	dc800215 	stw	r18,8(sp)
   46cb0:	dc400115 	stw	r17,4(sp)
   46cb4:	3021883a 	mov	r16,r6
   46cb8:	2027883a 	mov	r19,r4
   46cbc:	2829883a 	mov	r20,r5
   46cc0:	10002b1e 	bne	r2,zero,46d70 <__pow5mult+0xdc>
   46cc4:	8025d0ba 	srai	r18,r16,2
   46cc8:	90001b26 	beq	r18,zero,46d38 <__pow5mult+0xa4>
   46ccc:	9c001217 	ldw	r16,72(r19)
   46cd0:	8000081e 	bne	r16,zero,46cf4 <__pow5mult+0x60>
   46cd4:	00003006 	br	46d98 <__pow5mult+0x104>
   46cd8:	800b883a 	mov	r5,r16
   46cdc:	800d883a 	mov	r6,r16
   46ce0:	9809883a 	mov	r4,r19
   46ce4:	90001426 	beq	r18,zero,46d38 <__pow5mult+0xa4>
   46ce8:	80800017 	ldw	r2,0(r16)
   46cec:	10001b26 	beq	r2,zero,46d5c <__pow5mult+0xc8>
   46cf0:	1021883a 	mov	r16,r2
   46cf4:	9080004c 	andi	r2,r18,1
   46cf8:	1005003a 	cmpeq	r2,r2,zero
   46cfc:	9025d07a 	srai	r18,r18,1
   46d00:	800d883a 	mov	r6,r16
   46d04:	9809883a 	mov	r4,r19
   46d08:	a00b883a 	mov	r5,r20
   46d0c:	103ff21e 	bne	r2,zero,46cd8 <__pow5mult+0x44>
   46d10:	00469700 	call	46970 <__multiply>
   46d14:	a00b883a 	mov	r5,r20
   46d18:	9809883a 	mov	r4,r19
   46d1c:	1023883a 	mov	r17,r2
   46d20:	0045ee00 	call	45ee0 <_Bfree>
   46d24:	8829883a 	mov	r20,r17
   46d28:	800b883a 	mov	r5,r16
   46d2c:	800d883a 	mov	r6,r16
   46d30:	9809883a 	mov	r4,r19
   46d34:	903fec1e 	bne	r18,zero,46ce8 <__pow5mult+0x54>
   46d38:	a005883a 	mov	r2,r20
   46d3c:	dfc00517 	ldw	ra,20(sp)
   46d40:	dd000417 	ldw	r20,16(sp)
   46d44:	dcc00317 	ldw	r19,12(sp)
   46d48:	dc800217 	ldw	r18,8(sp)
   46d4c:	dc400117 	ldw	r17,4(sp)
   46d50:	dc000017 	ldw	r16,0(sp)
   46d54:	dec00604 	addi	sp,sp,24
   46d58:	f800283a 	ret
   46d5c:	00469700 	call	46970 <__multiply>
   46d60:	80800015 	stw	r2,0(r16)
   46d64:	1021883a 	mov	r16,r2
   46d68:	10000015 	stw	zero,0(r2)
   46d6c:	003fe106 	br	46cf4 <__pow5mult+0x60>
   46d70:	1085883a 	add	r2,r2,r2
   46d74:	00d00034 	movhi	r3,16384
   46d78:	18c08e04 	addi	r3,r3,568
   46d7c:	1085883a 	add	r2,r2,r2
   46d80:	10c5883a 	add	r2,r2,r3
   46d84:	11bfff17 	ldw	r6,-4(r2)
   46d88:	000f883a 	mov	r7,zero
   46d8c:	0046b940 	call	46b94 <__multadd>
   46d90:	1029883a 	mov	r20,r2
   46d94:	003fcb06 	br	46cc4 <__pow5mult+0x30>
   46d98:	9809883a 	mov	r4,r19
   46d9c:	01409c44 	movi	r5,625
   46da0:	0046b580 	call	46b58 <__i2b>
   46da4:	98801215 	stw	r2,72(r19)
   46da8:	1021883a 	mov	r16,r2
   46dac:	10000015 	stw	zero,0(r2)
   46db0:	003fd006 	br	46cf4 <__pow5mult+0x60>

00046db4 <__s2b>:
   46db4:	defff904 	addi	sp,sp,-28
   46db8:	dcc00315 	stw	r19,12(sp)
   46dbc:	dc800215 	stw	r18,8(sp)
   46dc0:	2827883a 	mov	r19,r5
   46dc4:	2025883a 	mov	r18,r4
   46dc8:	01400244 	movi	r5,9
   46dcc:	39000204 	addi	r4,r7,8
   46dd0:	dd000415 	stw	r20,16(sp)
   46dd4:	dc400115 	stw	r17,4(sp)
   46dd8:	dfc00615 	stw	ra,24(sp)
   46ddc:	dd400515 	stw	r21,20(sp)
   46de0:	dc000015 	stw	r16,0(sp)
   46de4:	3829883a 	mov	r20,r7
   46de8:	3023883a 	mov	r17,r6
   46dec:	00499680 	call	49968 <__divsi3>
   46df0:	00c00044 	movi	r3,1
   46df4:	1880350e 	bge	r3,r2,46ecc <__s2b+0x118>
   46df8:	000b883a 	mov	r5,zero
   46dfc:	18c7883a 	add	r3,r3,r3
   46e00:	29400044 	addi	r5,r5,1
   46e04:	18bffd16 	blt	r3,r2,46dfc <__s2b+0x48>
   46e08:	9009883a 	mov	r4,r18
   46e0c:	00464600 	call	46460 <_Balloc>
   46e10:	1011883a 	mov	r8,r2
   46e14:	d8800717 	ldw	r2,28(sp)
   46e18:	00c00044 	movi	r3,1
   46e1c:	01800244 	movi	r6,9
   46e20:	40800515 	stw	r2,20(r8)
   46e24:	40c00415 	stw	r3,16(r8)
   46e28:	3440260e 	bge	r6,r17,46ec4 <__s2b+0x110>
   46e2c:	3021883a 	mov	r16,r6
   46e30:	99ab883a 	add	r21,r19,r6
   46e34:	9c05883a 	add	r2,r19,r16
   46e38:	11c00007 	ldb	r7,0(r2)
   46e3c:	400b883a 	mov	r5,r8
   46e40:	9009883a 	mov	r4,r18
   46e44:	39fff404 	addi	r7,r7,-48
   46e48:	01800284 	movi	r6,10
   46e4c:	0046b940 	call	46b94 <__multadd>
   46e50:	84000044 	addi	r16,r16,1
   46e54:	1011883a 	mov	r8,r2
   46e58:	8c3ff61e 	bne	r17,r16,46e34 <__s2b+0x80>
   46e5c:	ac45883a 	add	r2,r21,r17
   46e60:	117ffe04 	addi	r5,r2,-8
   46e64:	880d883a 	mov	r6,r17
   46e68:	35000c0e 	bge	r6,r20,46e9c <__s2b+0xe8>
   46e6c:	a185c83a 	sub	r2,r20,r6
   46e70:	2821883a 	mov	r16,r5
   46e74:	28a3883a 	add	r17,r5,r2
   46e78:	81c00007 	ldb	r7,0(r16)
   46e7c:	400b883a 	mov	r5,r8
   46e80:	9009883a 	mov	r4,r18
   46e84:	39fff404 	addi	r7,r7,-48
   46e88:	01800284 	movi	r6,10
   46e8c:	0046b940 	call	46b94 <__multadd>
   46e90:	84000044 	addi	r16,r16,1
   46e94:	1011883a 	mov	r8,r2
   46e98:	847ff71e 	bne	r16,r17,46e78 <__s2b+0xc4>
   46e9c:	4005883a 	mov	r2,r8
   46ea0:	dfc00617 	ldw	ra,24(sp)
   46ea4:	dd400517 	ldw	r21,20(sp)
   46ea8:	dd000417 	ldw	r20,16(sp)
   46eac:	dcc00317 	ldw	r19,12(sp)
   46eb0:	dc800217 	ldw	r18,8(sp)
   46eb4:	dc400117 	ldw	r17,4(sp)
   46eb8:	dc000017 	ldw	r16,0(sp)
   46ebc:	dec00704 	addi	sp,sp,28
   46ec0:	f800283a 	ret
   46ec4:	99400284 	addi	r5,r19,10
   46ec8:	003fe706 	br	46e68 <__s2b+0xb4>
   46ecc:	000b883a 	mov	r5,zero
   46ed0:	003fcd06 	br	46e08 <__s2b+0x54>

00046ed4 <_realloc_r>:
   46ed4:	defff404 	addi	sp,sp,-48
   46ed8:	dd800815 	stw	r22,32(sp)
   46edc:	dc800415 	stw	r18,16(sp)
   46ee0:	dc400315 	stw	r17,12(sp)
   46ee4:	dfc00b15 	stw	ra,44(sp)
   46ee8:	df000a15 	stw	fp,40(sp)
   46eec:	ddc00915 	stw	r23,36(sp)
   46ef0:	dd400715 	stw	r21,28(sp)
   46ef4:	dd000615 	stw	r20,24(sp)
   46ef8:	dcc00515 	stw	r19,20(sp)
   46efc:	dc000215 	stw	r16,8(sp)
   46f00:	2825883a 	mov	r18,r5
   46f04:	3023883a 	mov	r17,r6
   46f08:	202d883a 	mov	r22,r4
   46f0c:	2800c926 	beq	r5,zero,47234 <_realloc_r+0x360>
   46f10:	004a6500 	call	4a650 <__malloc_lock>
   46f14:	943ffe04 	addi	r16,r18,-8
   46f18:	88c002c4 	addi	r3,r17,11
   46f1c:	00800584 	movi	r2,22
   46f20:	82000117 	ldw	r8,4(r16)
   46f24:	10c01b2e 	bgeu	r2,r3,46f94 <_realloc_r+0xc0>
   46f28:	00bffe04 	movi	r2,-8
   46f2c:	188e703a 	and	r7,r3,r2
   46f30:	3839883a 	mov	fp,r7
   46f34:	38001a16 	blt	r7,zero,46fa0 <_realloc_r+0xcc>
   46f38:	e4401936 	bltu	fp,r17,46fa0 <_realloc_r+0xcc>
   46f3c:	013fff04 	movi	r4,-4
   46f40:	4126703a 	and	r19,r8,r4
   46f44:	99c02616 	blt	r19,r7,46fe0 <_realloc_r+0x10c>
   46f48:	802b883a 	mov	r21,r16
   46f4c:	9829883a 	mov	r20,r19
   46f50:	84000204 	addi	r16,r16,8
   46f54:	a80f883a 	mov	r7,r21
   46f58:	a70dc83a 	sub	r6,r20,fp
   46f5c:	008003c4 	movi	r2,15
   46f60:	1180c136 	bltu	r2,r6,47268 <_realloc_r+0x394>
   46f64:	38800117 	ldw	r2,4(r7)
   46f68:	a549883a 	add	r4,r20,r21
   46f6c:	1080004c 	andi	r2,r2,1
   46f70:	a084b03a 	or	r2,r20,r2
   46f74:	38800115 	stw	r2,4(r7)
   46f78:	20c00117 	ldw	r3,4(r4)
   46f7c:	18c00054 	ori	r3,r3,1
   46f80:	20c00115 	stw	r3,4(r4)
   46f84:	b009883a 	mov	r4,r22
   46f88:	004a6700 	call	4a670 <__malloc_unlock>
   46f8c:	8023883a 	mov	r17,r16
   46f90:	00000606 	br	46fac <_realloc_r+0xd8>
   46f94:	01c00404 	movi	r7,16
   46f98:	3839883a 	mov	fp,r7
   46f9c:	e47fe72e 	bgeu	fp,r17,46f3c <_realloc_r+0x68>
   46fa0:	00800304 	movi	r2,12
   46fa4:	0023883a 	mov	r17,zero
   46fa8:	b0800015 	stw	r2,0(r22)
   46fac:	8805883a 	mov	r2,r17
   46fb0:	dfc00b17 	ldw	ra,44(sp)
   46fb4:	df000a17 	ldw	fp,40(sp)
   46fb8:	ddc00917 	ldw	r23,36(sp)
   46fbc:	dd800817 	ldw	r22,32(sp)
   46fc0:	dd400717 	ldw	r21,28(sp)
   46fc4:	dd000617 	ldw	r20,24(sp)
   46fc8:	dcc00517 	ldw	r19,20(sp)
   46fcc:	dc800417 	ldw	r18,16(sp)
   46fd0:	dc400317 	ldw	r17,12(sp)
   46fd4:	dc000217 	ldw	r16,8(sp)
   46fd8:	dec00c04 	addi	sp,sp,48
   46fdc:	f800283a 	ret
   46fe0:	00900034 	movhi	r2,16384
   46fe4:	1081e404 	addi	r2,r2,1936
   46fe8:	12400217 	ldw	r9,8(r2)
   46fec:	84cd883a 	add	r6,r16,r19
   46ff0:	802b883a 	mov	r21,r16
   46ff4:	3240b926 	beq	r6,r9,472dc <_realloc_r+0x408>
   46ff8:	31400117 	ldw	r5,4(r6)
   46ffc:	00bfff84 	movi	r2,-2
   47000:	2884703a 	and	r2,r5,r2
   47004:	1185883a 	add	r2,r2,r6
   47008:	10c00117 	ldw	r3,4(r2)
   4700c:	18c0004c 	andi	r3,r3,1
   47010:	1807003a 	cmpeq	r3,r3,zero
   47014:	1800a326 	beq	r3,zero,472a4 <_realloc_r+0x3d0>
   47018:	2908703a 	and	r4,r5,r4
   4701c:	9929883a 	add	r20,r19,r4
   47020:	a1c0a30e 	bge	r20,r7,472b0 <_realloc_r+0x3dc>
   47024:	4080004c 	andi	r2,r8,1
   47028:	1000551e 	bne	r2,zero,47180 <_realloc_r+0x2ac>
   4702c:	80800017 	ldw	r2,0(r16)
   47030:	80afc83a 	sub	r23,r16,r2
   47034:	b8c00117 	ldw	r3,4(r23)
   47038:	00bfff04 	movi	r2,-4
   4703c:	1884703a 	and	r2,r3,r2
   47040:	30002e26 	beq	r6,zero,470fc <_realloc_r+0x228>
   47044:	3240b926 	beq	r6,r9,4732c <_realloc_r+0x458>
   47048:	98a9883a 	add	r20,r19,r2
   4704c:	2509883a 	add	r4,r4,r20
   47050:	d9000015 	stw	r4,0(sp)
   47054:	21c02a16 	blt	r4,r7,47100 <_realloc_r+0x22c>
   47058:	30800317 	ldw	r2,12(r6)
   4705c:	30c00217 	ldw	r3,8(r6)
   47060:	01400904 	movi	r5,36
   47064:	99bfff04 	addi	r6,r19,-4
   47068:	18800315 	stw	r2,12(r3)
   4706c:	10c00215 	stw	r3,8(r2)
   47070:	b9000317 	ldw	r4,12(r23)
   47074:	b8800217 	ldw	r2,8(r23)
   47078:	b82b883a 	mov	r21,r23
   4707c:	bc000204 	addi	r16,r23,8
   47080:	20800215 	stw	r2,8(r4)
   47084:	11000315 	stw	r4,12(r2)
   47088:	2980e436 	bltu	r5,r6,4741c <_realloc_r+0x548>
   4708c:	008004c4 	movi	r2,19
   47090:	9009883a 	mov	r4,r18
   47094:	8011883a 	mov	r8,r16
   47098:	11800f2e 	bgeu	r2,r6,470d8 <_realloc_r+0x204>
   4709c:	90800017 	ldw	r2,0(r18)
   470a0:	ba000404 	addi	r8,r23,16
   470a4:	91000204 	addi	r4,r18,8
   470a8:	b8800215 	stw	r2,8(r23)
   470ac:	90c00117 	ldw	r3,4(r18)
   470b0:	008006c4 	movi	r2,27
   470b4:	b8c00315 	stw	r3,12(r23)
   470b8:	1180072e 	bgeu	r2,r6,470d8 <_realloc_r+0x204>
   470bc:	90c00217 	ldw	r3,8(r18)
   470c0:	ba000604 	addi	r8,r23,24
   470c4:	91000404 	addi	r4,r18,16
   470c8:	b8c00415 	stw	r3,16(r23)
   470cc:	90800317 	ldw	r2,12(r18)
   470d0:	b8800515 	stw	r2,20(r23)
   470d4:	3140e726 	beq	r6,r5,47474 <_realloc_r+0x5a0>
   470d8:	20800017 	ldw	r2,0(r4)
   470dc:	dd000017 	ldw	r20,0(sp)
   470e0:	b80f883a 	mov	r7,r23
   470e4:	40800015 	stw	r2,0(r8)
   470e8:	20c00117 	ldw	r3,4(r4)
   470ec:	40c00115 	stw	r3,4(r8)
   470f0:	20800217 	ldw	r2,8(r4)
   470f4:	40800215 	stw	r2,8(r8)
   470f8:	003f9706 	br	46f58 <_realloc_r+0x84>
   470fc:	98a9883a 	add	r20,r19,r2
   47100:	a1c01f16 	blt	r20,r7,47180 <_realloc_r+0x2ac>
   47104:	b8c00317 	ldw	r3,12(r23)
   47108:	b8800217 	ldw	r2,8(r23)
   4710c:	99bfff04 	addi	r6,r19,-4
   47110:	01400904 	movi	r5,36
   47114:	b82b883a 	mov	r21,r23
   47118:	18800215 	stw	r2,8(r3)
   4711c:	10c00315 	stw	r3,12(r2)
   47120:	bc000204 	addi	r16,r23,8
   47124:	2980c336 	bltu	r5,r6,47434 <_realloc_r+0x560>
   47128:	008004c4 	movi	r2,19
   4712c:	9009883a 	mov	r4,r18
   47130:	8011883a 	mov	r8,r16
   47134:	11800f2e 	bgeu	r2,r6,47174 <_realloc_r+0x2a0>
   47138:	90800017 	ldw	r2,0(r18)
   4713c:	ba000404 	addi	r8,r23,16
   47140:	91000204 	addi	r4,r18,8
   47144:	b8800215 	stw	r2,8(r23)
   47148:	90c00117 	ldw	r3,4(r18)
   4714c:	008006c4 	movi	r2,27
   47150:	b8c00315 	stw	r3,12(r23)
   47154:	1180072e 	bgeu	r2,r6,47174 <_realloc_r+0x2a0>
   47158:	90c00217 	ldw	r3,8(r18)
   4715c:	ba000604 	addi	r8,r23,24
   47160:	91000404 	addi	r4,r18,16
   47164:	b8c00415 	stw	r3,16(r23)
   47168:	90800317 	ldw	r2,12(r18)
   4716c:	b8800515 	stw	r2,20(r23)
   47170:	3140c726 	beq	r6,r5,47490 <_realloc_r+0x5bc>
   47174:	20800017 	ldw	r2,0(r4)
   47178:	b80f883a 	mov	r7,r23
   4717c:	003fd906 	br	470e4 <_realloc_r+0x210>
   47180:	880b883a 	mov	r5,r17
   47184:	b009883a 	mov	r4,r22
   47188:	00454a40 	call	454a4 <_malloc_r>
   4718c:	1023883a 	mov	r17,r2
   47190:	10002526 	beq	r2,zero,47228 <_realloc_r+0x354>
   47194:	80800117 	ldw	r2,4(r16)
   47198:	00ffff84 	movi	r3,-2
   4719c:	893ffe04 	addi	r4,r17,-8
   471a0:	10c4703a 	and	r2,r2,r3
   471a4:	8085883a 	add	r2,r16,r2
   471a8:	20809526 	beq	r4,r2,47400 <_realloc_r+0x52c>
   471ac:	99bfff04 	addi	r6,r19,-4
   471b0:	01c00904 	movi	r7,36
   471b4:	39804536 	bltu	r7,r6,472cc <_realloc_r+0x3f8>
   471b8:	008004c4 	movi	r2,19
   471bc:	9009883a 	mov	r4,r18
   471c0:	880b883a 	mov	r5,r17
   471c4:	11800f2e 	bgeu	r2,r6,47204 <_realloc_r+0x330>
   471c8:	90800017 	ldw	r2,0(r18)
   471cc:	89400204 	addi	r5,r17,8
   471d0:	91000204 	addi	r4,r18,8
   471d4:	88800015 	stw	r2,0(r17)
   471d8:	90c00117 	ldw	r3,4(r18)
   471dc:	008006c4 	movi	r2,27
   471e0:	88c00115 	stw	r3,4(r17)
   471e4:	1180072e 	bgeu	r2,r6,47204 <_realloc_r+0x330>
   471e8:	90c00217 	ldw	r3,8(r18)
   471ec:	89400404 	addi	r5,r17,16
   471f0:	91000404 	addi	r4,r18,16
   471f4:	88c00215 	stw	r3,8(r17)
   471f8:	90800317 	ldw	r2,12(r18)
   471fc:	88800315 	stw	r2,12(r17)
   47200:	31c09126 	beq	r6,r7,47448 <_realloc_r+0x574>
   47204:	20800017 	ldw	r2,0(r4)
   47208:	28800015 	stw	r2,0(r5)
   4720c:	20c00117 	ldw	r3,4(r4)
   47210:	28c00115 	stw	r3,4(r5)
   47214:	20800217 	ldw	r2,8(r4)
   47218:	28800215 	stw	r2,8(r5)
   4721c:	900b883a 	mov	r5,r18
   47220:	b009883a 	mov	r4,r22
   47224:	004491c0 	call	4491c <_free_r>
   47228:	b009883a 	mov	r4,r22
   4722c:	004a6700 	call	4a670 <__malloc_unlock>
   47230:	003f5e06 	br	46fac <_realloc_r+0xd8>
   47234:	300b883a 	mov	r5,r6
   47238:	dfc00b17 	ldw	ra,44(sp)
   4723c:	df000a17 	ldw	fp,40(sp)
   47240:	ddc00917 	ldw	r23,36(sp)
   47244:	dd800817 	ldw	r22,32(sp)
   47248:	dd400717 	ldw	r21,28(sp)
   4724c:	dd000617 	ldw	r20,24(sp)
   47250:	dcc00517 	ldw	r19,20(sp)
   47254:	dc800417 	ldw	r18,16(sp)
   47258:	dc400317 	ldw	r17,12(sp)
   4725c:	dc000217 	ldw	r16,8(sp)
   47260:	dec00c04 	addi	sp,sp,48
   47264:	00454a41 	jmpi	454a4 <_malloc_r>
   47268:	38800117 	ldw	r2,4(r7)
   4726c:	e54b883a 	add	r5,fp,r21
   47270:	31000054 	ori	r4,r6,1
   47274:	1080004c 	andi	r2,r2,1
   47278:	1704b03a 	or	r2,r2,fp
   4727c:	38800115 	stw	r2,4(r7)
   47280:	29000115 	stw	r4,4(r5)
   47284:	2987883a 	add	r3,r5,r6
   47288:	18800117 	ldw	r2,4(r3)
   4728c:	29400204 	addi	r5,r5,8
   47290:	b009883a 	mov	r4,r22
   47294:	10800054 	ori	r2,r2,1
   47298:	18800115 	stw	r2,4(r3)
   4729c:	004491c0 	call	4491c <_free_r>
   472a0:	003f3806 	br	46f84 <_realloc_r+0xb0>
   472a4:	000d883a 	mov	r6,zero
   472a8:	0009883a 	mov	r4,zero
   472ac:	003f5d06 	br	47024 <_realloc_r+0x150>
   472b0:	30c00217 	ldw	r3,8(r6)
   472b4:	30800317 	ldw	r2,12(r6)
   472b8:	800f883a 	mov	r7,r16
   472bc:	84000204 	addi	r16,r16,8
   472c0:	10c00215 	stw	r3,8(r2)
   472c4:	18800315 	stw	r2,12(r3)
   472c8:	003f2306 	br	46f58 <_realloc_r+0x84>
   472cc:	8809883a 	mov	r4,r17
   472d0:	900b883a 	mov	r5,r18
   472d4:	0045d680 	call	45d68 <memmove>
   472d8:	003fd006 	br	4721c <_realloc_r+0x348>
   472dc:	30800117 	ldw	r2,4(r6)
   472e0:	e0c00404 	addi	r3,fp,16
   472e4:	1108703a 	and	r4,r2,r4
   472e8:	9905883a 	add	r2,r19,r4
   472ec:	10ff4d16 	blt	r2,r3,47024 <_realloc_r+0x150>
   472f0:	1705c83a 	sub	r2,r2,fp
   472f4:	870b883a 	add	r5,r16,fp
   472f8:	10800054 	ori	r2,r2,1
   472fc:	28800115 	stw	r2,4(r5)
   47300:	80c00117 	ldw	r3,4(r16)
   47304:	00900034 	movhi	r2,16384
   47308:	1081e404 	addi	r2,r2,1936
   4730c:	b009883a 	mov	r4,r22
   47310:	18c0004c 	andi	r3,r3,1
   47314:	e0c6b03a 	or	r3,fp,r3
   47318:	11400215 	stw	r5,8(r2)
   4731c:	80c00115 	stw	r3,4(r16)
   47320:	004a6700 	call	4a670 <__malloc_unlock>
   47324:	84400204 	addi	r17,r16,8
   47328:	003f2006 	br	46fac <_realloc_r+0xd8>
   4732c:	98a9883a 	add	r20,r19,r2
   47330:	2509883a 	add	r4,r4,r20
   47334:	e0800404 	addi	r2,fp,16
   47338:	d9000115 	stw	r4,4(sp)
   4733c:	20bf7016 	blt	r4,r2,47100 <_realloc_r+0x22c>
   47340:	b8c00317 	ldw	r3,12(r23)
   47344:	b8800217 	ldw	r2,8(r23)
   47348:	99bfff04 	addi	r6,r19,-4
   4734c:	01400904 	movi	r5,36
   47350:	18800215 	stw	r2,8(r3)
   47354:	10c00315 	stw	r3,12(r2)
   47358:	bc400204 	addi	r17,r23,8
   4735c:	29804136 	bltu	r5,r6,47464 <_realloc_r+0x590>
   47360:	008004c4 	movi	r2,19
   47364:	9009883a 	mov	r4,r18
   47368:	880f883a 	mov	r7,r17
   4736c:	11800f2e 	bgeu	r2,r6,473ac <_realloc_r+0x4d8>
   47370:	90800017 	ldw	r2,0(r18)
   47374:	b9c00404 	addi	r7,r23,16
   47378:	91000204 	addi	r4,r18,8
   4737c:	b8800215 	stw	r2,8(r23)
   47380:	90c00117 	ldw	r3,4(r18)
   47384:	008006c4 	movi	r2,27
   47388:	b8c00315 	stw	r3,12(r23)
   4738c:	1180072e 	bgeu	r2,r6,473ac <_realloc_r+0x4d8>
   47390:	90c00217 	ldw	r3,8(r18)
   47394:	b9c00604 	addi	r7,r23,24
   47398:	91000404 	addi	r4,r18,16
   4739c:	b8c00415 	stw	r3,16(r23)
   473a0:	90800317 	ldw	r2,12(r18)
   473a4:	b8800515 	stw	r2,20(r23)
   473a8:	31404026 	beq	r6,r5,474ac <_realloc_r+0x5d8>
   473ac:	20800017 	ldw	r2,0(r4)
   473b0:	38800015 	stw	r2,0(r7)
   473b4:	20c00117 	ldw	r3,4(r4)
   473b8:	38c00115 	stw	r3,4(r7)
   473bc:	20800217 	ldw	r2,8(r4)
   473c0:	38800215 	stw	r2,8(r7)
   473c4:	d8c00117 	ldw	r3,4(sp)
   473c8:	bf0b883a 	add	r5,r23,fp
   473cc:	b009883a 	mov	r4,r22
   473d0:	1f05c83a 	sub	r2,r3,fp
   473d4:	10800054 	ori	r2,r2,1
   473d8:	28800115 	stw	r2,4(r5)
   473dc:	b8c00117 	ldw	r3,4(r23)
   473e0:	00900034 	movhi	r2,16384
   473e4:	1081e404 	addi	r2,r2,1936
   473e8:	11400215 	stw	r5,8(r2)
   473ec:	18c0004c 	andi	r3,r3,1
   473f0:	e0c6b03a 	or	r3,fp,r3
   473f4:	b8c00115 	stw	r3,4(r23)
   473f8:	004a6700 	call	4a670 <__malloc_unlock>
   473fc:	003eeb06 	br	46fac <_realloc_r+0xd8>
   47400:	20800117 	ldw	r2,4(r4)
   47404:	00ffff04 	movi	r3,-4
   47408:	800f883a 	mov	r7,r16
   4740c:	10c4703a 	and	r2,r2,r3
   47410:	98a9883a 	add	r20,r19,r2
   47414:	84000204 	addi	r16,r16,8
   47418:	003ecf06 	br	46f58 <_realloc_r+0x84>
   4741c:	900b883a 	mov	r5,r18
   47420:	8009883a 	mov	r4,r16
   47424:	0045d680 	call	45d68 <memmove>
   47428:	dd000017 	ldw	r20,0(sp)
   4742c:	b80f883a 	mov	r7,r23
   47430:	003ec906 	br	46f58 <_realloc_r+0x84>
   47434:	900b883a 	mov	r5,r18
   47438:	8009883a 	mov	r4,r16
   4743c:	0045d680 	call	45d68 <memmove>
   47440:	b80f883a 	mov	r7,r23
   47444:	003ec406 	br	46f58 <_realloc_r+0x84>
   47448:	90c00417 	ldw	r3,16(r18)
   4744c:	89400604 	addi	r5,r17,24
   47450:	91000604 	addi	r4,r18,24
   47454:	88c00415 	stw	r3,16(r17)
   47458:	90800517 	ldw	r2,20(r18)
   4745c:	88800515 	stw	r2,20(r17)
   47460:	003f6806 	br	47204 <_realloc_r+0x330>
   47464:	900b883a 	mov	r5,r18
   47468:	8809883a 	mov	r4,r17
   4746c:	0045d680 	call	45d68 <memmove>
   47470:	003fd406 	br	473c4 <_realloc_r+0x4f0>
   47474:	90c00417 	ldw	r3,16(r18)
   47478:	91000604 	addi	r4,r18,24
   4747c:	ba000804 	addi	r8,r23,32
   47480:	b8c00615 	stw	r3,24(r23)
   47484:	90800517 	ldw	r2,20(r18)
   47488:	b8800715 	stw	r2,28(r23)
   4748c:	003f1206 	br	470d8 <_realloc_r+0x204>
   47490:	90c00417 	ldw	r3,16(r18)
   47494:	91000604 	addi	r4,r18,24
   47498:	ba000804 	addi	r8,r23,32
   4749c:	b8c00615 	stw	r3,24(r23)
   474a0:	90800517 	ldw	r2,20(r18)
   474a4:	b8800715 	stw	r2,28(r23)
   474a8:	003f3206 	br	47174 <_realloc_r+0x2a0>
   474ac:	90c00417 	ldw	r3,16(r18)
   474b0:	91000604 	addi	r4,r18,24
   474b4:	b9c00804 	addi	r7,r23,32
   474b8:	b8c00615 	stw	r3,24(r23)
   474bc:	90800517 	ldw	r2,20(r18)
   474c0:	b8800715 	stw	r2,28(r23)
   474c4:	003fb906 	br	473ac <_realloc_r+0x4d8>

000474c8 <__isinfd>:
   474c8:	200d883a 	mov	r6,r4
   474cc:	0109c83a 	sub	r4,zero,r4
   474d0:	2188b03a 	or	r4,r4,r6
   474d4:	2008d7fa 	srli	r4,r4,31
   474d8:	00a00034 	movhi	r2,32768
   474dc:	10bfffc4 	addi	r2,r2,-1
   474e0:	1144703a 	and	r2,r2,r5
   474e4:	2088b03a 	or	r4,r4,r2
   474e8:	009ffc34 	movhi	r2,32752
   474ec:	1105c83a 	sub	r2,r2,r4
   474f0:	0087c83a 	sub	r3,zero,r2
   474f4:	10c4b03a 	or	r2,r2,r3
   474f8:	1004d7fa 	srli	r2,r2,31
   474fc:	00c00044 	movi	r3,1
   47500:	1885c83a 	sub	r2,r3,r2
   47504:	f800283a 	ret

00047508 <__isnand>:
   47508:	200d883a 	mov	r6,r4
   4750c:	0109c83a 	sub	r4,zero,r4
   47510:	2188b03a 	or	r4,r4,r6
   47514:	2008d7fa 	srli	r4,r4,31
   47518:	00a00034 	movhi	r2,32768
   4751c:	10bfffc4 	addi	r2,r2,-1
   47520:	1144703a 	and	r2,r2,r5
   47524:	2088b03a 	or	r4,r4,r2
   47528:	009ffc34 	movhi	r2,32752
   4752c:	1105c83a 	sub	r2,r2,r4
   47530:	1004d7fa 	srli	r2,r2,31
   47534:	f800283a 	ret

00047538 <_sbrk_r>:
   47538:	defffd04 	addi	sp,sp,-12
   4753c:	dc000015 	stw	r16,0(sp)
   47540:	04100034 	movhi	r16,16384
   47544:	84078004 	addi	r16,r16,7680
   47548:	dc400115 	stw	r17,4(sp)
   4754c:	80000015 	stw	zero,0(r16)
   47550:	2023883a 	mov	r17,r4
   47554:	2809883a 	mov	r4,r5
   47558:	dfc00215 	stw	ra,8(sp)
   4755c:	004a8700 	call	4a870 <sbrk>
   47560:	1007883a 	mov	r3,r2
   47564:	00bfffc4 	movi	r2,-1
   47568:	18800626 	beq	r3,r2,47584 <_sbrk_r+0x4c>
   4756c:	1805883a 	mov	r2,r3
   47570:	dfc00217 	ldw	ra,8(sp)
   47574:	dc400117 	ldw	r17,4(sp)
   47578:	dc000017 	ldw	r16,0(sp)
   4757c:	dec00304 	addi	sp,sp,12
   47580:	f800283a 	ret
   47584:	80800017 	ldw	r2,0(r16)
   47588:	103ff826 	beq	r2,zero,4756c <_sbrk_r+0x34>
   4758c:	88800015 	stw	r2,0(r17)
   47590:	1805883a 	mov	r2,r3
   47594:	dfc00217 	ldw	ra,8(sp)
   47598:	dc400117 	ldw	r17,4(sp)
   4759c:	dc000017 	ldw	r16,0(sp)
   475a0:	dec00304 	addi	sp,sp,12
   475a4:	f800283a 	ret

000475a8 <__sclose>:
   475a8:	2940038f 	ldh	r5,14(r5)
   475ac:	00478dc1 	jmpi	478dc <_close_r>

000475b0 <__sseek>:
   475b0:	defffe04 	addi	sp,sp,-8
   475b4:	dc000015 	stw	r16,0(sp)
   475b8:	2821883a 	mov	r16,r5
   475bc:	2940038f 	ldh	r5,14(r5)
   475c0:	dfc00115 	stw	ra,4(sp)
   475c4:	0047b540 	call	47b54 <_lseek_r>
   475c8:	1007883a 	mov	r3,r2
   475cc:	00bfffc4 	movi	r2,-1
   475d0:	18800926 	beq	r3,r2,475f8 <__sseek+0x48>
   475d4:	8080030b 	ldhu	r2,12(r16)
   475d8:	80c01415 	stw	r3,80(r16)
   475dc:	10840014 	ori	r2,r2,4096
   475e0:	8080030d 	sth	r2,12(r16)
   475e4:	1805883a 	mov	r2,r3
   475e8:	dfc00117 	ldw	ra,4(sp)
   475ec:	dc000017 	ldw	r16,0(sp)
   475f0:	dec00204 	addi	sp,sp,8
   475f4:	f800283a 	ret
   475f8:	8080030b 	ldhu	r2,12(r16)
   475fc:	10bbffcc 	andi	r2,r2,61439
   47600:	8080030d 	sth	r2,12(r16)
   47604:	1805883a 	mov	r2,r3
   47608:	dfc00117 	ldw	ra,4(sp)
   4760c:	dc000017 	ldw	r16,0(sp)
   47610:	dec00204 	addi	sp,sp,8
   47614:	f800283a 	ret

00047618 <__swrite>:
   47618:	2880030b 	ldhu	r2,12(r5)
   4761c:	defffb04 	addi	sp,sp,-20
   47620:	dcc00315 	stw	r19,12(sp)
   47624:	1080400c 	andi	r2,r2,256
   47628:	dc800215 	stw	r18,8(sp)
   4762c:	dc400115 	stw	r17,4(sp)
   47630:	dc000015 	stw	r16,0(sp)
   47634:	3027883a 	mov	r19,r6
   47638:	3825883a 	mov	r18,r7
   4763c:	dfc00415 	stw	ra,16(sp)
   47640:	2821883a 	mov	r16,r5
   47644:	000d883a 	mov	r6,zero
   47648:	01c00084 	movi	r7,2
   4764c:	2023883a 	mov	r17,r4
   47650:	10000226 	beq	r2,zero,4765c <__swrite+0x44>
   47654:	2940038f 	ldh	r5,14(r5)
   47658:	0047b540 	call	47b54 <_lseek_r>
   4765c:	8080030b 	ldhu	r2,12(r16)
   47660:	8140038f 	ldh	r5,14(r16)
   47664:	8809883a 	mov	r4,r17
   47668:	10bbffcc 	andi	r2,r2,61439
   4766c:	980d883a 	mov	r6,r19
   47670:	900f883a 	mov	r7,r18
   47674:	8080030d 	sth	r2,12(r16)
   47678:	dfc00417 	ldw	ra,16(sp)
   4767c:	dcc00317 	ldw	r19,12(sp)
   47680:	dc800217 	ldw	r18,8(sp)
   47684:	dc400117 	ldw	r17,4(sp)
   47688:	dc000017 	ldw	r16,0(sp)
   4768c:	dec00504 	addi	sp,sp,20
   47690:	00477b01 	jmpi	477b0 <_write_r>

00047694 <__sread>:
   47694:	defffe04 	addi	sp,sp,-8
   47698:	dc000015 	stw	r16,0(sp)
   4769c:	2821883a 	mov	r16,r5
   476a0:	2940038f 	ldh	r5,14(r5)
   476a4:	dfc00115 	stw	ra,4(sp)
   476a8:	0047bcc0 	call	47bcc <_read_r>
   476ac:	1007883a 	mov	r3,r2
   476b0:	10000816 	blt	r2,zero,476d4 <__sread+0x40>
   476b4:	80801417 	ldw	r2,80(r16)
   476b8:	10c5883a 	add	r2,r2,r3
   476bc:	80801415 	stw	r2,80(r16)
   476c0:	1805883a 	mov	r2,r3
   476c4:	dfc00117 	ldw	ra,4(sp)
   476c8:	dc000017 	ldw	r16,0(sp)
   476cc:	dec00204 	addi	sp,sp,8
   476d0:	f800283a 	ret
   476d4:	8080030b 	ldhu	r2,12(r16)
   476d8:	10bbffcc 	andi	r2,r2,61439
   476dc:	8080030d 	sth	r2,12(r16)
   476e0:	1805883a 	mov	r2,r3
   476e4:	dfc00117 	ldw	ra,4(sp)
   476e8:	dc000017 	ldw	r16,0(sp)
   476ec:	dec00204 	addi	sp,sp,8
   476f0:	f800283a 	ret

000476f4 <strcmp>:
   476f4:	2144b03a 	or	r2,r4,r5
   476f8:	108000cc 	andi	r2,r2,3
   476fc:	10001d1e 	bne	r2,zero,47774 <strcmp+0x80>
   47700:	200f883a 	mov	r7,r4
   47704:	28800017 	ldw	r2,0(r5)
   47708:	21000017 	ldw	r4,0(r4)
   4770c:	280d883a 	mov	r6,r5
   47710:	2080161e 	bne	r4,r2,4776c <strcmp+0x78>
   47714:	023fbff4 	movhi	r8,65279
   47718:	423fbfc4 	addi	r8,r8,-257
   4771c:	2207883a 	add	r3,r4,r8
   47720:	01602074 	movhi	r5,32897
   47724:	29602004 	addi	r5,r5,-32640
   47728:	1946703a 	and	r3,r3,r5
   4772c:	0104303a 	nor	r2,zero,r4
   47730:	10c4703a 	and	r2,r2,r3
   47734:	10001c1e 	bne	r2,zero,477a8 <strcmp+0xb4>
   47738:	4013883a 	mov	r9,r8
   4773c:	2811883a 	mov	r8,r5
   47740:	00000106 	br	47748 <strcmp+0x54>
   47744:	1800181e 	bne	r3,zero,477a8 <strcmp+0xb4>
   47748:	39c00104 	addi	r7,r7,4
   4774c:	39000017 	ldw	r4,0(r7)
   47750:	31800104 	addi	r6,r6,4
   47754:	31400017 	ldw	r5,0(r6)
   47758:	2245883a 	add	r2,r4,r9
   4775c:	1204703a 	and	r2,r2,r8
   47760:	0106303a 	nor	r3,zero,r4
   47764:	1886703a 	and	r3,r3,r2
   47768:	217ff626 	beq	r4,r5,47744 <strcmp+0x50>
   4776c:	3809883a 	mov	r4,r7
   47770:	300b883a 	mov	r5,r6
   47774:	20c00007 	ldb	r3,0(r4)
   47778:	1800051e 	bne	r3,zero,47790 <strcmp+0x9c>
   4777c:	00000606 	br	47798 <strcmp+0xa4>
   47780:	21000044 	addi	r4,r4,1
   47784:	20c00007 	ldb	r3,0(r4)
   47788:	29400044 	addi	r5,r5,1
   4778c:	18000226 	beq	r3,zero,47798 <strcmp+0xa4>
   47790:	28800007 	ldb	r2,0(r5)
   47794:	18bffa26 	beq	r3,r2,47780 <strcmp+0x8c>
   47798:	20c00003 	ldbu	r3,0(r4)
   4779c:	28800003 	ldbu	r2,0(r5)
   477a0:	1885c83a 	sub	r2,r3,r2
   477a4:	f800283a 	ret
   477a8:	0005883a 	mov	r2,zero
   477ac:	f800283a 	ret

000477b0 <_write_r>:
   477b0:	defffd04 	addi	sp,sp,-12
   477b4:	dc000015 	stw	r16,0(sp)
   477b8:	04100034 	movhi	r16,16384
   477bc:	84078004 	addi	r16,r16,7680
   477c0:	dc400115 	stw	r17,4(sp)
   477c4:	80000015 	stw	zero,0(r16)
   477c8:	2023883a 	mov	r17,r4
   477cc:	2809883a 	mov	r4,r5
   477d0:	300b883a 	mov	r5,r6
   477d4:	380d883a 	mov	r6,r7
   477d8:	dfc00215 	stw	ra,8(sp)
   477dc:	004a92c0 	call	4a92c <write>
   477e0:	1007883a 	mov	r3,r2
   477e4:	00bfffc4 	movi	r2,-1
   477e8:	18800626 	beq	r3,r2,47804 <_write_r+0x54>
   477ec:	1805883a 	mov	r2,r3
   477f0:	dfc00217 	ldw	ra,8(sp)
   477f4:	dc400117 	ldw	r17,4(sp)
   477f8:	dc000017 	ldw	r16,0(sp)
   477fc:	dec00304 	addi	sp,sp,12
   47800:	f800283a 	ret
   47804:	80800017 	ldw	r2,0(r16)
   47808:	103ff826 	beq	r2,zero,477ec <_write_r+0x3c>
   4780c:	88800015 	stw	r2,0(r17)
   47810:	1805883a 	mov	r2,r3
   47814:	dfc00217 	ldw	ra,8(sp)
   47818:	dc400117 	ldw	r17,4(sp)
   4781c:	dc000017 	ldw	r16,0(sp)
   47820:	dec00304 	addi	sp,sp,12
   47824:	f800283a 	ret

00047828 <_calloc_r>:
   47828:	298b383a 	mul	r5,r5,r6
   4782c:	defffe04 	addi	sp,sp,-8
   47830:	dc000015 	stw	r16,0(sp)
   47834:	dfc00115 	stw	ra,4(sp)
   47838:	00454a40 	call	454a4 <_malloc_r>
   4783c:	1021883a 	mov	r16,r2
   47840:	01c00904 	movi	r7,36
   47844:	10000d26 	beq	r2,zero,4787c <_calloc_r+0x54>
   47848:	10ffff17 	ldw	r3,-4(r2)
   4784c:	1009883a 	mov	r4,r2
   47850:	00bfff04 	movi	r2,-4
   47854:	1886703a 	and	r3,r3,r2
   47858:	1887883a 	add	r3,r3,r2
   4785c:	180d883a 	mov	r6,r3
   47860:	000b883a 	mov	r5,zero
   47864:	38c01736 	bltu	r7,r3,478c4 <_calloc_r+0x9c>
   47868:	008004c4 	movi	r2,19
   4786c:	10c00836 	bltu	r2,r3,47890 <_calloc_r+0x68>
   47870:	20000215 	stw	zero,8(r4)
   47874:	20000015 	stw	zero,0(r4)
   47878:	20000115 	stw	zero,4(r4)
   4787c:	8005883a 	mov	r2,r16
   47880:	dfc00117 	ldw	ra,4(sp)
   47884:	dc000017 	ldw	r16,0(sp)
   47888:	dec00204 	addi	sp,sp,8
   4788c:	f800283a 	ret
   47890:	008006c4 	movi	r2,27
   47894:	80000015 	stw	zero,0(r16)
   47898:	80000115 	stw	zero,4(r16)
   4789c:	81000204 	addi	r4,r16,8
   478a0:	10fff32e 	bgeu	r2,r3,47870 <_calloc_r+0x48>
   478a4:	80000215 	stw	zero,8(r16)
   478a8:	80000315 	stw	zero,12(r16)
   478ac:	81000404 	addi	r4,r16,16
   478b0:	19ffef1e 	bne	r3,r7,47870 <_calloc_r+0x48>
   478b4:	81000604 	addi	r4,r16,24
   478b8:	80000415 	stw	zero,16(r16)
   478bc:	80000515 	stw	zero,20(r16)
   478c0:	003feb06 	br	47870 <_calloc_r+0x48>
   478c4:	0045e480 	call	45e48 <memset>
   478c8:	8005883a 	mov	r2,r16
   478cc:	dfc00117 	ldw	ra,4(sp)
   478d0:	dc000017 	ldw	r16,0(sp)
   478d4:	dec00204 	addi	sp,sp,8
   478d8:	f800283a 	ret

000478dc <_close_r>:
   478dc:	defffd04 	addi	sp,sp,-12
   478e0:	dc000015 	stw	r16,0(sp)
   478e4:	04100034 	movhi	r16,16384
   478e8:	84078004 	addi	r16,r16,7680
   478ec:	dc400115 	stw	r17,4(sp)
   478f0:	80000015 	stw	zero,0(r16)
   478f4:	2023883a 	mov	r17,r4
   478f8:	2809883a 	mov	r4,r5
   478fc:	dfc00215 	stw	ra,8(sp)
   47900:	0049fcc0 	call	49fcc <close>
   47904:	1007883a 	mov	r3,r2
   47908:	00bfffc4 	movi	r2,-1
   4790c:	18800626 	beq	r3,r2,47928 <_close_r+0x4c>
   47910:	1805883a 	mov	r2,r3
   47914:	dfc00217 	ldw	ra,8(sp)
   47918:	dc400117 	ldw	r17,4(sp)
   4791c:	dc000017 	ldw	r16,0(sp)
   47920:	dec00304 	addi	sp,sp,12
   47924:	f800283a 	ret
   47928:	80800017 	ldw	r2,0(r16)
   4792c:	103ff826 	beq	r2,zero,47910 <_close_r+0x34>
   47930:	88800015 	stw	r2,0(r17)
   47934:	1805883a 	mov	r2,r3
   47938:	dfc00217 	ldw	ra,8(sp)
   4793c:	dc400117 	ldw	r17,4(sp)
   47940:	dc000017 	ldw	r16,0(sp)
   47944:	dec00304 	addi	sp,sp,12
   47948:	f800283a 	ret

0004794c <_fclose_r>:
   4794c:	defffc04 	addi	sp,sp,-16
   47950:	dc400115 	stw	r17,4(sp)
   47954:	dc000015 	stw	r16,0(sp)
   47958:	dfc00315 	stw	ra,12(sp)
   4795c:	dc800215 	stw	r18,8(sp)
   47960:	2821883a 	mov	r16,r5
   47964:	2023883a 	mov	r17,r4
   47968:	28002926 	beq	r5,zero,47a10 <_fclose_r+0xc4>
   4796c:	00445880 	call	44588 <__sfp_lock_acquire>
   47970:	88000226 	beq	r17,zero,4797c <_fclose_r+0x30>
   47974:	88800e17 	ldw	r2,56(r17)
   47978:	10002d26 	beq	r2,zero,47a30 <_fclose_r+0xe4>
   4797c:	8080030f 	ldh	r2,12(r16)
   47980:	10002226 	beq	r2,zero,47a0c <_fclose_r+0xc0>
   47984:	8809883a 	mov	r4,r17
   47988:	800b883a 	mov	r5,r16
   4798c:	00443000 	call	44300 <_fflush_r>
   47990:	1025883a 	mov	r18,r2
   47994:	80800b17 	ldw	r2,44(r16)
   47998:	10000426 	beq	r2,zero,479ac <_fclose_r+0x60>
   4799c:	81400717 	ldw	r5,28(r16)
   479a0:	8809883a 	mov	r4,r17
   479a4:	103ee83a 	callr	r2
   479a8:	10002a16 	blt	r2,zero,47a54 <_fclose_r+0x108>
   479ac:	8080030b 	ldhu	r2,12(r16)
   479b0:	1080200c 	andi	r2,r2,128
   479b4:	1000231e 	bne	r2,zero,47a44 <_fclose_r+0xf8>
   479b8:	81400c17 	ldw	r5,48(r16)
   479bc:	28000526 	beq	r5,zero,479d4 <_fclose_r+0x88>
   479c0:	80801004 	addi	r2,r16,64
   479c4:	28800226 	beq	r5,r2,479d0 <_fclose_r+0x84>
   479c8:	8809883a 	mov	r4,r17
   479cc:	004491c0 	call	4491c <_free_r>
   479d0:	80000c15 	stw	zero,48(r16)
   479d4:	81401117 	ldw	r5,68(r16)
   479d8:	28000326 	beq	r5,zero,479e8 <_fclose_r+0x9c>
   479dc:	8809883a 	mov	r4,r17
   479e0:	004491c0 	call	4491c <_free_r>
   479e4:	80001115 	stw	zero,68(r16)
   479e8:	8000030d 	sth	zero,12(r16)
   479ec:	004458c0 	call	4458c <__sfp_lock_release>
   479f0:	9005883a 	mov	r2,r18
   479f4:	dfc00317 	ldw	ra,12(sp)
   479f8:	dc800217 	ldw	r18,8(sp)
   479fc:	dc400117 	ldw	r17,4(sp)
   47a00:	dc000017 	ldw	r16,0(sp)
   47a04:	dec00404 	addi	sp,sp,16
   47a08:	f800283a 	ret
   47a0c:	004458c0 	call	4458c <__sfp_lock_release>
   47a10:	0025883a 	mov	r18,zero
   47a14:	9005883a 	mov	r2,r18
   47a18:	dfc00317 	ldw	ra,12(sp)
   47a1c:	dc800217 	ldw	r18,8(sp)
   47a20:	dc400117 	ldw	r17,4(sp)
   47a24:	dc000017 	ldw	r16,0(sp)
   47a28:	dec00404 	addi	sp,sp,16
   47a2c:	f800283a 	ret
   47a30:	8809883a 	mov	r4,r17
   47a34:	00445980 	call	44598 <__sinit>
   47a38:	8080030f 	ldh	r2,12(r16)
   47a3c:	103fd11e 	bne	r2,zero,47984 <_fclose_r+0x38>
   47a40:	003ff206 	br	47a0c <_fclose_r+0xc0>
   47a44:	81400417 	ldw	r5,16(r16)
   47a48:	8809883a 	mov	r4,r17
   47a4c:	004491c0 	call	4491c <_free_r>
   47a50:	003fd906 	br	479b8 <_fclose_r+0x6c>
   47a54:	04bfffc4 	movi	r18,-1
   47a58:	003fd406 	br	479ac <_fclose_r+0x60>

00047a5c <fclose>:
   47a5c:	00900034 	movhi	r2,16384
   47a60:	10876804 	addi	r2,r2,7584
   47a64:	200b883a 	mov	r5,r4
   47a68:	11000017 	ldw	r4,0(r2)
   47a6c:	004794c1 	jmpi	4794c <_fclose_r>

00047a70 <_fstat_r>:
   47a70:	defffd04 	addi	sp,sp,-12
   47a74:	dc000015 	stw	r16,0(sp)
   47a78:	04100034 	movhi	r16,16384
   47a7c:	84078004 	addi	r16,r16,7680
   47a80:	dc400115 	stw	r17,4(sp)
   47a84:	80000015 	stw	zero,0(r16)
   47a88:	2023883a 	mov	r17,r4
   47a8c:	2809883a 	mov	r4,r5
   47a90:	300b883a 	mov	r5,r6
   47a94:	dfc00215 	stw	ra,8(sp)
   47a98:	004a1540 	call	4a154 <fstat>
   47a9c:	1007883a 	mov	r3,r2
   47aa0:	00bfffc4 	movi	r2,-1
   47aa4:	18800626 	beq	r3,r2,47ac0 <_fstat_r+0x50>
   47aa8:	1805883a 	mov	r2,r3
   47aac:	dfc00217 	ldw	ra,8(sp)
   47ab0:	dc400117 	ldw	r17,4(sp)
   47ab4:	dc000017 	ldw	r16,0(sp)
   47ab8:	dec00304 	addi	sp,sp,12
   47abc:	f800283a 	ret
   47ac0:	80800017 	ldw	r2,0(r16)
   47ac4:	103ff826 	beq	r2,zero,47aa8 <_fstat_r+0x38>
   47ac8:	88800015 	stw	r2,0(r17)
   47acc:	1805883a 	mov	r2,r3
   47ad0:	dfc00217 	ldw	ra,8(sp)
   47ad4:	dc400117 	ldw	r17,4(sp)
   47ad8:	dc000017 	ldw	r16,0(sp)
   47adc:	dec00304 	addi	sp,sp,12
   47ae0:	f800283a 	ret

00047ae4 <_isatty_r>:
   47ae4:	defffd04 	addi	sp,sp,-12
   47ae8:	dc000015 	stw	r16,0(sp)
   47aec:	04100034 	movhi	r16,16384
   47af0:	84078004 	addi	r16,r16,7680
   47af4:	dc400115 	stw	r17,4(sp)
   47af8:	80000015 	stw	zero,0(r16)
   47afc:	2023883a 	mov	r17,r4
   47b00:	2809883a 	mov	r4,r5
   47b04:	dfc00215 	stw	ra,8(sp)
   47b08:	004a2880 	call	4a288 <isatty>
   47b0c:	1007883a 	mov	r3,r2
   47b10:	00bfffc4 	movi	r2,-1
   47b14:	18800626 	beq	r3,r2,47b30 <_isatty_r+0x4c>
   47b18:	1805883a 	mov	r2,r3
   47b1c:	dfc00217 	ldw	ra,8(sp)
   47b20:	dc400117 	ldw	r17,4(sp)
   47b24:	dc000017 	ldw	r16,0(sp)
   47b28:	dec00304 	addi	sp,sp,12
   47b2c:	f800283a 	ret
   47b30:	80800017 	ldw	r2,0(r16)
   47b34:	103ff826 	beq	r2,zero,47b18 <_isatty_r+0x34>
   47b38:	88800015 	stw	r2,0(r17)
   47b3c:	1805883a 	mov	r2,r3
   47b40:	dfc00217 	ldw	ra,8(sp)
   47b44:	dc400117 	ldw	r17,4(sp)
   47b48:	dc000017 	ldw	r16,0(sp)
   47b4c:	dec00304 	addi	sp,sp,12
   47b50:	f800283a 	ret

00047b54 <_lseek_r>:
   47b54:	defffd04 	addi	sp,sp,-12
   47b58:	dc000015 	stw	r16,0(sp)
   47b5c:	04100034 	movhi	r16,16384
   47b60:	84078004 	addi	r16,r16,7680
   47b64:	dc400115 	stw	r17,4(sp)
   47b68:	80000015 	stw	zero,0(r16)
   47b6c:	2023883a 	mov	r17,r4
   47b70:	2809883a 	mov	r4,r5
   47b74:	300b883a 	mov	r5,r6
   47b78:	380d883a 	mov	r6,r7
   47b7c:	dfc00215 	stw	ra,8(sp)
   47b80:	004a4940 	call	4a494 <lseek>
   47b84:	1007883a 	mov	r3,r2
   47b88:	00bfffc4 	movi	r2,-1
   47b8c:	18800626 	beq	r3,r2,47ba8 <_lseek_r+0x54>
   47b90:	1805883a 	mov	r2,r3
   47b94:	dfc00217 	ldw	ra,8(sp)
   47b98:	dc400117 	ldw	r17,4(sp)
   47b9c:	dc000017 	ldw	r16,0(sp)
   47ba0:	dec00304 	addi	sp,sp,12
   47ba4:	f800283a 	ret
   47ba8:	80800017 	ldw	r2,0(r16)
   47bac:	103ff826 	beq	r2,zero,47b90 <_lseek_r+0x3c>
   47bb0:	88800015 	stw	r2,0(r17)
   47bb4:	1805883a 	mov	r2,r3
   47bb8:	dfc00217 	ldw	ra,8(sp)
   47bbc:	dc400117 	ldw	r17,4(sp)
   47bc0:	dc000017 	ldw	r16,0(sp)
   47bc4:	dec00304 	addi	sp,sp,12
   47bc8:	f800283a 	ret

00047bcc <_read_r>:
   47bcc:	defffd04 	addi	sp,sp,-12
   47bd0:	dc000015 	stw	r16,0(sp)
   47bd4:	04100034 	movhi	r16,16384
   47bd8:	84078004 	addi	r16,r16,7680
   47bdc:	dc400115 	stw	r17,4(sp)
   47be0:	80000015 	stw	zero,0(r16)
   47be4:	2023883a 	mov	r17,r4
   47be8:	2809883a 	mov	r4,r5
   47bec:	300b883a 	mov	r5,r6
   47bf0:	380d883a 	mov	r6,r7
   47bf4:	dfc00215 	stw	ra,8(sp)
   47bf8:	004a6900 	call	4a690 <read>
   47bfc:	1007883a 	mov	r3,r2
   47c00:	00bfffc4 	movi	r2,-1
   47c04:	18800626 	beq	r3,r2,47c20 <_read_r+0x54>
   47c08:	1805883a 	mov	r2,r3
   47c0c:	dfc00217 	ldw	ra,8(sp)
   47c10:	dc400117 	ldw	r17,4(sp)
   47c14:	dc000017 	ldw	r16,0(sp)
   47c18:	dec00304 	addi	sp,sp,12
   47c1c:	f800283a 	ret
   47c20:	80800017 	ldw	r2,0(r16)
   47c24:	103ff826 	beq	r2,zero,47c08 <_read_r+0x3c>
   47c28:	88800015 	stw	r2,0(r17)
   47c2c:	1805883a 	mov	r2,r3
   47c30:	dfc00217 	ldw	ra,8(sp)
   47c34:	dc400117 	ldw	r17,4(sp)
   47c38:	dc000017 	ldw	r16,0(sp)
   47c3c:	dec00304 	addi	sp,sp,12
   47c40:	f800283a 	ret

00047c44 <__udivdi3>:
   47c44:	defff004 	addi	sp,sp,-64
   47c48:	2005883a 	mov	r2,r4
   47c4c:	3011883a 	mov	r8,r6
   47c50:	df000e15 	stw	fp,56(sp)
   47c54:	dd000a15 	stw	r20,40(sp)
   47c58:	dc000615 	stw	r16,24(sp)
   47c5c:	dfc00f15 	stw	ra,60(sp)
   47c60:	ddc00d15 	stw	r23,52(sp)
   47c64:	dd800c15 	stw	r22,48(sp)
   47c68:	dd400b15 	stw	r21,44(sp)
   47c6c:	dcc00915 	stw	r19,36(sp)
   47c70:	dc800815 	stw	r18,32(sp)
   47c74:	dc400715 	stw	r17,28(sp)
   47c78:	4021883a 	mov	r16,r8
   47c7c:	1039883a 	mov	fp,r2
   47c80:	2829883a 	mov	r20,r5
   47c84:	38003b1e 	bne	r7,zero,47d74 <__udivdi3+0x130>
   47c88:	2a005c36 	bltu	r5,r8,47dfc <__udivdi3+0x1b8>
   47c8c:	4000a626 	beq	r8,zero,47f28 <__udivdi3+0x2e4>
   47c90:	00bfffd4 	movui	r2,65535
   47c94:	14009e36 	bltu	r2,r16,47f10 <__udivdi3+0x2cc>
   47c98:	00803fc4 	movi	r2,255
   47c9c:	14013d36 	bltu	r2,r16,48194 <__udivdi3+0x550>
   47ca0:	000b883a 	mov	r5,zero
   47ca4:	0005883a 	mov	r2,zero
   47ca8:	8084d83a 	srl	r2,r16,r2
   47cac:	01100034 	movhi	r4,16384
   47cb0:	21009604 	addi	r4,r4,600
   47cb4:	01800804 	movi	r6,32
   47cb8:	1105883a 	add	r2,r2,r4
   47cbc:	10c00003 	ldbu	r3,0(r2)
   47cc0:	28c7883a 	add	r3,r5,r3
   47cc4:	30edc83a 	sub	r22,r6,r3
   47cc8:	b000ee1e 	bne	r22,zero,48084 <__udivdi3+0x440>
   47ccc:	802ad43a 	srli	r21,r16,16
   47cd0:	00800044 	movi	r2,1
   47cd4:	a423c83a 	sub	r17,r20,r16
   47cd8:	85ffffcc 	andi	r23,r16,65535
   47cdc:	d8800315 	stw	r2,12(sp)
   47ce0:	8809883a 	mov	r4,r17
   47ce4:	a80b883a 	mov	r5,r21
   47ce8:	0049a280 	call	49a28 <__udivsi3>
   47cec:	8809883a 	mov	r4,r17
   47cf0:	a80b883a 	mov	r5,r21
   47cf4:	102d883a 	mov	r22,r2
   47cf8:	0049a300 	call	49a30 <__umodsi3>
   47cfc:	1004943a 	slli	r2,r2,16
   47d00:	e006d43a 	srli	r3,fp,16
   47d04:	bda3383a 	mul	r17,r23,r22
   47d08:	10c4b03a 	or	r2,r2,r3
   47d0c:	1440042e 	bgeu	r2,r17,47d20 <__udivdi3+0xdc>
   47d10:	1405883a 	add	r2,r2,r16
   47d14:	b5bfffc4 	addi	r22,r22,-1
   47d18:	14000136 	bltu	r2,r16,47d20 <__udivdi3+0xdc>
   47d1c:	14413d36 	bltu	r2,r17,48214 <__udivdi3+0x5d0>
   47d20:	1463c83a 	sub	r17,r2,r17
   47d24:	8809883a 	mov	r4,r17
   47d28:	a80b883a 	mov	r5,r21
   47d2c:	0049a280 	call	49a28 <__udivsi3>
   47d30:	8809883a 	mov	r4,r17
   47d34:	a80b883a 	mov	r5,r21
   47d38:	1029883a 	mov	r20,r2
   47d3c:	0049a300 	call	49a30 <__umodsi3>
   47d40:	1004943a 	slli	r2,r2,16
   47d44:	bd09383a 	mul	r4,r23,r20
   47d48:	e0ffffcc 	andi	r3,fp,65535
   47d4c:	10c4b03a 	or	r2,r2,r3
   47d50:	1100042e 	bgeu	r2,r4,47d64 <__udivdi3+0x120>
   47d54:	8085883a 	add	r2,r16,r2
   47d58:	a53fffc4 	addi	r20,r20,-1
   47d5c:	14000136 	bltu	r2,r16,47d64 <__udivdi3+0x120>
   47d60:	11012036 	bltu	r2,r4,481e4 <__udivdi3+0x5a0>
   47d64:	b004943a 	slli	r2,r22,16
   47d68:	d9000317 	ldw	r4,12(sp)
   47d6c:	a084b03a 	or	r2,r20,r2
   47d70:	00001506 	br	47dc8 <__udivdi3+0x184>
   47d74:	380d883a 	mov	r6,r7
   47d78:	29c06236 	bltu	r5,r7,47f04 <__udivdi3+0x2c0>
   47d7c:	00bfffd4 	movui	r2,65535
   47d80:	11c05a36 	bltu	r2,r7,47eec <__udivdi3+0x2a8>
   47d84:	00803fc4 	movi	r2,255
   47d88:	11c0fc36 	bltu	r2,r7,4817c <__udivdi3+0x538>
   47d8c:	000b883a 	mov	r5,zero
   47d90:	0005883a 	mov	r2,zero
   47d94:	3084d83a 	srl	r2,r6,r2
   47d98:	01100034 	movhi	r4,16384
   47d9c:	21009604 	addi	r4,r4,600
   47da0:	01c00804 	movi	r7,32
   47da4:	1105883a 	add	r2,r2,r4
   47da8:	10c00003 	ldbu	r3,0(r2)
   47dac:	28c7883a 	add	r3,r5,r3
   47db0:	38efc83a 	sub	r23,r7,r3
   47db4:	b800691e 	bne	r23,zero,47f5c <__udivdi3+0x318>
   47db8:	35000136 	bltu	r6,r20,47dc0 <__udivdi3+0x17c>
   47dbc:	e4005136 	bltu	fp,r16,47f04 <__udivdi3+0x2c0>
   47dc0:	00800044 	movi	r2,1
   47dc4:	0009883a 	mov	r4,zero
   47dc8:	2007883a 	mov	r3,r4
   47dcc:	dfc00f17 	ldw	ra,60(sp)
   47dd0:	df000e17 	ldw	fp,56(sp)
   47dd4:	ddc00d17 	ldw	r23,52(sp)
   47dd8:	dd800c17 	ldw	r22,48(sp)
   47ddc:	dd400b17 	ldw	r21,44(sp)
   47de0:	dd000a17 	ldw	r20,40(sp)
   47de4:	dcc00917 	ldw	r19,36(sp)
   47de8:	dc800817 	ldw	r18,32(sp)
   47dec:	dc400717 	ldw	r17,28(sp)
   47df0:	dc000617 	ldw	r16,24(sp)
   47df4:	dec01004 	addi	sp,sp,64
   47df8:	f800283a 	ret
   47dfc:	00bfffd4 	movui	r2,65535
   47e00:	12005036 	bltu	r2,r8,47f44 <__udivdi3+0x300>
   47e04:	00803fc4 	movi	r2,255
   47e08:	1200e836 	bltu	r2,r8,481ac <__udivdi3+0x568>
   47e0c:	000b883a 	mov	r5,zero
   47e10:	0005883a 	mov	r2,zero
   47e14:	8084d83a 	srl	r2,r16,r2
   47e18:	01100034 	movhi	r4,16384
   47e1c:	21009604 	addi	r4,r4,600
   47e20:	01800804 	movi	r6,32
   47e24:	1105883a 	add	r2,r2,r4
   47e28:	10c00003 	ldbu	r3,0(r2)
   47e2c:	28c7883a 	add	r3,r5,r3
   47e30:	30cbc83a 	sub	r5,r6,r3
   47e34:	28000626 	beq	r5,zero,47e50 <__udivdi3+0x20c>
   47e38:	3145c83a 	sub	r2,r6,r5
   47e3c:	e084d83a 	srl	r2,fp,r2
   47e40:	a146983a 	sll	r3,r20,r5
   47e44:	e178983a 	sll	fp,fp,r5
   47e48:	8160983a 	sll	r16,r16,r5
   47e4c:	18a8b03a 	or	r20,r3,r2
   47e50:	802ad43a 	srli	r21,r16,16
   47e54:	a009883a 	mov	r4,r20
   47e58:	85ffffcc 	andi	r23,r16,65535
   47e5c:	a80b883a 	mov	r5,r21
   47e60:	0049a280 	call	49a28 <__udivsi3>
   47e64:	a009883a 	mov	r4,r20
   47e68:	a80b883a 	mov	r5,r21
   47e6c:	102d883a 	mov	r22,r2
   47e70:	0049a300 	call	49a30 <__umodsi3>
   47e74:	1004943a 	slli	r2,r2,16
   47e78:	e006d43a 	srli	r3,fp,16
   47e7c:	bda3383a 	mul	r17,r23,r22
   47e80:	10c4b03a 	or	r2,r2,r3
   47e84:	1440042e 	bgeu	r2,r17,47e98 <__udivdi3+0x254>
   47e88:	1405883a 	add	r2,r2,r16
   47e8c:	b5bfffc4 	addi	r22,r22,-1
   47e90:	14000136 	bltu	r2,r16,47e98 <__udivdi3+0x254>
   47e94:	1440d536 	bltu	r2,r17,481ec <__udivdi3+0x5a8>
   47e98:	1463c83a 	sub	r17,r2,r17
   47e9c:	8809883a 	mov	r4,r17
   47ea0:	a80b883a 	mov	r5,r21
   47ea4:	0049a280 	call	49a28 <__udivsi3>
   47ea8:	8809883a 	mov	r4,r17
   47eac:	a80b883a 	mov	r5,r21
   47eb0:	1029883a 	mov	r20,r2
   47eb4:	0049a300 	call	49a30 <__umodsi3>
   47eb8:	1004943a 	slli	r2,r2,16
   47ebc:	bd09383a 	mul	r4,r23,r20
   47ec0:	e0ffffcc 	andi	r3,fp,65535
   47ec4:	10c4b03a 	or	r2,r2,r3
   47ec8:	1100042e 	bgeu	r2,r4,47edc <__udivdi3+0x298>
   47ecc:	8085883a 	add	r2,r16,r2
   47ed0:	a53fffc4 	addi	r20,r20,-1
   47ed4:	14000136 	bltu	r2,r16,47edc <__udivdi3+0x298>
   47ed8:	1100c736 	bltu	r2,r4,481f8 <__udivdi3+0x5b4>
   47edc:	b004943a 	slli	r2,r22,16
   47ee0:	0009883a 	mov	r4,zero
   47ee4:	a084b03a 	or	r2,r20,r2
   47ee8:	003fb706 	br	47dc8 <__udivdi3+0x184>
   47eec:	00804034 	movhi	r2,256
   47ef0:	10bfffc4 	addi	r2,r2,-1
   47ef4:	11c0a436 	bltu	r2,r7,48188 <__udivdi3+0x544>
   47ef8:	01400404 	movi	r5,16
   47efc:	2805883a 	mov	r2,r5
   47f00:	003fa406 	br	47d94 <__udivdi3+0x150>
   47f04:	0005883a 	mov	r2,zero
   47f08:	0009883a 	mov	r4,zero
   47f0c:	003fae06 	br	47dc8 <__udivdi3+0x184>
   47f10:	00804034 	movhi	r2,256
   47f14:	10bfffc4 	addi	r2,r2,-1
   47f18:	1400a136 	bltu	r2,r16,481a0 <__udivdi3+0x55c>
   47f1c:	01400404 	movi	r5,16
   47f20:	2805883a 	mov	r2,r5
   47f24:	003f6006 	br	47ca8 <__udivdi3+0x64>
   47f28:	01000044 	movi	r4,1
   47f2c:	000b883a 	mov	r5,zero
   47f30:	0049a280 	call	49a28 <__udivsi3>
   47f34:	1021883a 	mov	r16,r2
   47f38:	00bfffd4 	movui	r2,65535
   47f3c:	143ff436 	bltu	r2,r16,47f10 <__udivdi3+0x2cc>
   47f40:	003f5506 	br	47c98 <__udivdi3+0x54>
   47f44:	00804034 	movhi	r2,256
   47f48:	10bfffc4 	addi	r2,r2,-1
   47f4c:	12009a36 	bltu	r2,r8,481b8 <__udivdi3+0x574>
   47f50:	01400404 	movi	r5,16
   47f54:	2805883a 	mov	r2,r5
   47f58:	003fae06 	br	47e14 <__udivdi3+0x1d0>
   47f5c:	3dc5c83a 	sub	r2,r7,r23
   47f60:	35c8983a 	sll	r4,r6,r23
   47f64:	8086d83a 	srl	r3,r16,r2
   47f68:	a0a2d83a 	srl	r17,r20,r2
   47f6c:	e084d83a 	srl	r2,fp,r2
   47f70:	20eab03a 	or	r21,r4,r3
   47f74:	a82cd43a 	srli	r22,r21,16
   47f78:	a5c6983a 	sll	r3,r20,r23
   47f7c:	8809883a 	mov	r4,r17
   47f80:	b00b883a 	mov	r5,r22
   47f84:	1886b03a 	or	r3,r3,r2
   47f88:	d8c00215 	stw	r3,8(sp)
   47f8c:	0049a280 	call	49a28 <__udivsi3>
   47f90:	8809883a 	mov	r4,r17
   47f94:	b00b883a 	mov	r5,r22
   47f98:	1029883a 	mov	r20,r2
   47f9c:	0049a300 	call	49a30 <__umodsi3>
   47fa0:	a8ffffcc 	andi	r3,r21,65535
   47fa4:	d8c00515 	stw	r3,20(sp)
   47fa8:	d9000217 	ldw	r4,8(sp)
   47fac:	d9400517 	ldw	r5,20(sp)
   47fb0:	1004943a 	slli	r2,r2,16
   47fb4:	2006d43a 	srli	r3,r4,16
   47fb8:	85e0983a 	sll	r16,r16,r23
   47fbc:	2d23383a 	mul	r17,r5,r20
   47fc0:	10c4b03a 	or	r2,r2,r3
   47fc4:	dc000015 	stw	r16,0(sp)
   47fc8:	1440032e 	bgeu	r2,r17,47fd8 <__udivdi3+0x394>
   47fcc:	1545883a 	add	r2,r2,r21
   47fd0:	a53fffc4 	addi	r20,r20,-1
   47fd4:	15407f2e 	bgeu	r2,r21,481d4 <__udivdi3+0x590>
   47fd8:	1463c83a 	sub	r17,r2,r17
   47fdc:	8809883a 	mov	r4,r17
   47fe0:	b00b883a 	mov	r5,r22
   47fe4:	0049a280 	call	49a28 <__udivsi3>
   47fe8:	8809883a 	mov	r4,r17
   47fec:	b00b883a 	mov	r5,r22
   47ff0:	1021883a 	mov	r16,r2
   47ff4:	0049a300 	call	49a30 <__umodsi3>
   47ff8:	d8c00517 	ldw	r3,20(sp)
   47ffc:	d9000217 	ldw	r4,8(sp)
   48000:	1004943a 	slli	r2,r2,16
   48004:	1c0f383a 	mul	r7,r3,r16
   48008:	20ffffcc 	andi	r3,r4,65535
   4800c:	10e2b03a 	or	r17,r2,r3
   48010:	89c0032e 	bgeu	r17,r7,48020 <__udivdi3+0x3dc>
   48014:	8d63883a 	add	r17,r17,r21
   48018:	843fffc4 	addi	r16,r16,-1
   4801c:	8d40692e 	bgeu	r17,r21,481c4 <__udivdi3+0x580>
   48020:	a008943a 	slli	r4,r20,16
   48024:	d9400017 	ldw	r5,0(sp)
   48028:	89e3c83a 	sub	r17,r17,r7
   4802c:	8110b03a 	or	r8,r16,r4
   48030:	280cd43a 	srli	r6,r5,16
   48034:	28ffffcc 	andi	r3,r5,65535
   48038:	40bfffcc 	andi	r2,r8,65535
   4803c:	400ad43a 	srli	r5,r8,16
   48040:	10d3383a 	mul	r9,r2,r3
   48044:	1185383a 	mul	r2,r2,r6
   48048:	28c7383a 	mul	r3,r5,r3
   4804c:	4808d43a 	srli	r4,r9,16
   48050:	298b383a 	mul	r5,r5,r6
   48054:	10c5883a 	add	r2,r2,r3
   48058:	2089883a 	add	r4,r4,r2
   4805c:	20c0022e 	bgeu	r4,r3,48068 <__udivdi3+0x424>
   48060:	00800074 	movhi	r2,1
   48064:	288b883a 	add	r5,r5,r2
   48068:	2004d43a 	srli	r2,r4,16
   4806c:	288b883a 	add	r5,r5,r2
   48070:	89403f36 	bltu	r17,r5,48170 <__udivdi3+0x52c>
   48074:	89403926 	beq	r17,r5,4815c <__udivdi3+0x518>
   48078:	4005883a 	mov	r2,r8
   4807c:	0009883a 	mov	r4,zero
   48080:	003f5106 	br	47dc8 <__udivdi3+0x184>
   48084:	85a0983a 	sll	r16,r16,r22
   48088:	3585c83a 	sub	r2,r6,r22
   4808c:	a0a2d83a 	srl	r17,r20,r2
   48090:	802ad43a 	srli	r21,r16,16
   48094:	e084d83a 	srl	r2,fp,r2
   48098:	a586983a 	sll	r3,r20,r22
   4809c:	8809883a 	mov	r4,r17
   480a0:	a80b883a 	mov	r5,r21
   480a4:	1886b03a 	or	r3,r3,r2
   480a8:	d8c00115 	stw	r3,4(sp)
   480ac:	0049a280 	call	49a28 <__udivsi3>
   480b0:	8809883a 	mov	r4,r17
   480b4:	a80b883a 	mov	r5,r21
   480b8:	d8800415 	stw	r2,16(sp)
   480bc:	0049a300 	call	49a30 <__umodsi3>
   480c0:	d9000117 	ldw	r4,4(sp)
   480c4:	d9400417 	ldw	r5,16(sp)
   480c8:	1004943a 	slli	r2,r2,16
   480cc:	85ffffcc 	andi	r23,r16,65535
   480d0:	2006d43a 	srli	r3,r4,16
   480d4:	b963383a 	mul	r17,r23,r5
   480d8:	10c4b03a 	or	r2,r2,r3
   480dc:	1440042e 	bgeu	r2,r17,480f0 <__udivdi3+0x4ac>
   480e0:	297fffc4 	addi	r5,r5,-1
   480e4:	1405883a 	add	r2,r2,r16
   480e8:	d9400415 	stw	r5,16(sp)
   480ec:	1400442e 	bgeu	r2,r16,48200 <__udivdi3+0x5bc>
   480f0:	1463c83a 	sub	r17,r2,r17
   480f4:	8809883a 	mov	r4,r17
   480f8:	a80b883a 	mov	r5,r21
   480fc:	0049a280 	call	49a28 <__udivsi3>
   48100:	8809883a 	mov	r4,r17
   48104:	a80b883a 	mov	r5,r21
   48108:	1029883a 	mov	r20,r2
   4810c:	0049a300 	call	49a30 <__umodsi3>
   48110:	d9400117 	ldw	r5,4(sp)
   48114:	1004943a 	slli	r2,r2,16
   48118:	bd09383a 	mul	r4,r23,r20
   4811c:	28ffffcc 	andi	r3,r5,65535
   48120:	10c6b03a 	or	r3,r2,r3
   48124:	1900062e 	bgeu	r3,r4,48140 <__udivdi3+0x4fc>
   48128:	1c07883a 	add	r3,r3,r16
   4812c:	a53fffc4 	addi	r20,r20,-1
   48130:	1c000336 	bltu	r3,r16,48140 <__udivdi3+0x4fc>
   48134:	1900022e 	bgeu	r3,r4,48140 <__udivdi3+0x4fc>
   48138:	a53fffc4 	addi	r20,r20,-1
   4813c:	1c07883a 	add	r3,r3,r16
   48140:	d9400417 	ldw	r5,16(sp)
   48144:	e5b8983a 	sll	fp,fp,r22
   48148:	1923c83a 	sub	r17,r3,r4
   4814c:	2804943a 	slli	r2,r5,16
   48150:	a0a8b03a 	or	r20,r20,r2
   48154:	dd000315 	stw	r20,12(sp)
   48158:	003ee106 	br	47ce0 <__udivdi3+0x9c>
   4815c:	2004943a 	slli	r2,r4,16
   48160:	e5c8983a 	sll	r4,fp,r23
   48164:	48ffffcc 	andi	r3,r9,65535
   48168:	10c5883a 	add	r2,r2,r3
   4816c:	20bfc22e 	bgeu	r4,r2,48078 <__udivdi3+0x434>
   48170:	40bfffc4 	addi	r2,r8,-1
   48174:	0009883a 	mov	r4,zero
   48178:	003f1306 	br	47dc8 <__udivdi3+0x184>
   4817c:	01400204 	movi	r5,8
   48180:	2805883a 	mov	r2,r5
   48184:	003f0306 	br	47d94 <__udivdi3+0x150>
   48188:	01400604 	movi	r5,24
   4818c:	2805883a 	mov	r2,r5
   48190:	003f0006 	br	47d94 <__udivdi3+0x150>
   48194:	01400204 	movi	r5,8
   48198:	2805883a 	mov	r2,r5
   4819c:	003ec206 	br	47ca8 <__udivdi3+0x64>
   481a0:	01400604 	movi	r5,24
   481a4:	2805883a 	mov	r2,r5
   481a8:	003ebf06 	br	47ca8 <__udivdi3+0x64>
   481ac:	01400204 	movi	r5,8
   481b0:	2805883a 	mov	r2,r5
   481b4:	003f1706 	br	47e14 <__udivdi3+0x1d0>
   481b8:	01400604 	movi	r5,24
   481bc:	2805883a 	mov	r2,r5
   481c0:	003f1406 	br	47e14 <__udivdi3+0x1d0>
   481c4:	89ff962e 	bgeu	r17,r7,48020 <__udivdi3+0x3dc>
   481c8:	8d63883a 	add	r17,r17,r21
   481cc:	843fffc4 	addi	r16,r16,-1
   481d0:	003f9306 	br	48020 <__udivdi3+0x3dc>
   481d4:	147f802e 	bgeu	r2,r17,47fd8 <__udivdi3+0x394>
   481d8:	a53fffc4 	addi	r20,r20,-1
   481dc:	1545883a 	add	r2,r2,r21
   481e0:	003f7d06 	br	47fd8 <__udivdi3+0x394>
   481e4:	a53fffc4 	addi	r20,r20,-1
   481e8:	003ede06 	br	47d64 <__udivdi3+0x120>
   481ec:	b5bfffc4 	addi	r22,r22,-1
   481f0:	1405883a 	add	r2,r2,r16
   481f4:	003f2806 	br	47e98 <__udivdi3+0x254>
   481f8:	a53fffc4 	addi	r20,r20,-1
   481fc:	003f3706 	br	47edc <__udivdi3+0x298>
   48200:	147fbb2e 	bgeu	r2,r17,480f0 <__udivdi3+0x4ac>
   48204:	297fffc4 	addi	r5,r5,-1
   48208:	1405883a 	add	r2,r2,r16
   4820c:	d9400415 	stw	r5,16(sp)
   48210:	003fb706 	br	480f0 <__udivdi3+0x4ac>
   48214:	b5bfffc4 	addi	r22,r22,-1
   48218:	1405883a 	add	r2,r2,r16
   4821c:	003ec006 	br	47d20 <__udivdi3+0xdc>

00048220 <__umoddi3>:
   48220:	defff104 	addi	sp,sp,-60
   48224:	dd800b15 	stw	r22,44(sp)
   48228:	dd000915 	stw	r20,36(sp)
   4822c:	dc000515 	stw	r16,20(sp)
   48230:	dfc00e15 	stw	ra,56(sp)
   48234:	df000d15 	stw	fp,52(sp)
   48238:	ddc00c15 	stw	r23,48(sp)
   4823c:	dd400a15 	stw	r21,40(sp)
   48240:	dcc00815 	stw	r19,32(sp)
   48244:	dc800715 	stw	r18,28(sp)
   48248:	dc400615 	stw	r17,24(sp)
   4824c:	3021883a 	mov	r16,r6
   48250:	202d883a 	mov	r22,r4
   48254:	2829883a 	mov	r20,r5
   48258:	38002b1e 	bne	r7,zero,48308 <__umoddi3+0xe8>
   4825c:	29805036 	bltu	r5,r6,483a0 <__umoddi3+0x180>
   48260:	30008a26 	beq	r6,zero,4848c <__umoddi3+0x26c>
   48264:	00bfffd4 	movui	r2,65535
   48268:	14008236 	bltu	r2,r16,48474 <__umoddi3+0x254>
   4826c:	00803fc4 	movi	r2,255
   48270:	14013636 	bltu	r2,r16,4874c <__umoddi3+0x52c>
   48274:	000b883a 	mov	r5,zero
   48278:	0005883a 	mov	r2,zero
   4827c:	8084d83a 	srl	r2,r16,r2
   48280:	01100034 	movhi	r4,16384
   48284:	21009604 	addi	r4,r4,600
   48288:	01800804 	movi	r6,32
   4828c:	1105883a 	add	r2,r2,r4
   48290:	10c00003 	ldbu	r3,0(r2)
   48294:	28c7883a 	add	r3,r5,r3
   48298:	30efc83a 	sub	r23,r6,r3
   4829c:	b800941e 	bne	r23,zero,484f0 <__umoddi3+0x2d0>
   482a0:	802ad43a 	srli	r21,r16,16
   482a4:	a423c83a 	sub	r17,r20,r16
   482a8:	0039883a 	mov	fp,zero
   482ac:	853fffcc 	andi	r20,r16,65535
   482b0:	8809883a 	mov	r4,r17
   482b4:	a80b883a 	mov	r5,r21
   482b8:	0049a280 	call	49a28 <__udivsi3>
   482bc:	8809883a 	mov	r4,r17
   482c0:	a80b883a 	mov	r5,r21
   482c4:	a0a3383a 	mul	r17,r20,r2
   482c8:	0049a300 	call	49a30 <__umodsi3>
   482cc:	1004943a 	slli	r2,r2,16
   482d0:	b006d43a 	srli	r3,r22,16
   482d4:	10c4b03a 	or	r2,r2,r3
   482d8:	1440032e 	bgeu	r2,r17,482e8 <__umoddi3+0xc8>
   482dc:	1405883a 	add	r2,r2,r16
   482e0:	14000136 	bltu	r2,r16,482e8 <__umoddi3+0xc8>
   482e4:	14413536 	bltu	r2,r17,487bc <__umoddi3+0x59c>
   482e8:	1463c83a 	sub	r17,r2,r17
   482ec:	8809883a 	mov	r4,r17
   482f0:	a80b883a 	mov	r5,r21
   482f4:	0049a280 	call	49a28 <__udivsi3>
   482f8:	8809883a 	mov	r4,r17
   482fc:	a0a3383a 	mul	r17,r20,r2
   48300:	a80b883a 	mov	r5,r21
   48304:	00004d06 	br	4843c <__umoddi3+0x21c>
   48308:	380d883a 	mov	r6,r7
   4830c:	29c0102e 	bgeu	r5,r7,48350 <__umoddi3+0x130>
   48310:	2011883a 	mov	r8,r4
   48314:	2813883a 	mov	r9,r5
   48318:	4005883a 	mov	r2,r8
   4831c:	4807883a 	mov	r3,r9
   48320:	dfc00e17 	ldw	ra,56(sp)
   48324:	df000d17 	ldw	fp,52(sp)
   48328:	ddc00c17 	ldw	r23,48(sp)
   4832c:	dd800b17 	ldw	r22,44(sp)
   48330:	dd400a17 	ldw	r21,40(sp)
   48334:	dd000917 	ldw	r20,36(sp)
   48338:	dcc00817 	ldw	r19,32(sp)
   4833c:	dc800717 	ldw	r18,28(sp)
   48340:	dc400617 	ldw	r17,24(sp)
   48344:	dc000517 	ldw	r16,20(sp)
   48348:	dec00f04 	addi	sp,sp,60
   4834c:	f800283a 	ret
   48350:	00bfffd4 	movui	r2,65535
   48354:	11c05a36 	bltu	r2,r7,484c0 <__umoddi3+0x2a0>
   48358:	00803fc4 	movi	r2,255
   4835c:	11c0fe36 	bltu	r2,r7,48758 <__umoddi3+0x538>
   48360:	000b883a 	mov	r5,zero
   48364:	0005883a 	mov	r2,zero
   48368:	3084d83a 	srl	r2,r6,r2
   4836c:	01100034 	movhi	r4,16384
   48370:	21009604 	addi	r4,r4,600
   48374:	01c00804 	movi	r7,32
   48378:	1105883a 	add	r2,r2,r4
   4837c:	10c00003 	ldbu	r3,0(r2)
   48380:	28c7883a 	add	r3,r5,r3
   48384:	38ebc83a 	sub	r21,r7,r3
   48388:	a800851e 	bne	r21,zero,485a0 <__umoddi3+0x380>
   4838c:	35005236 	bltu	r6,r20,484d8 <__umoddi3+0x2b8>
   48390:	b400512e 	bgeu	r22,r16,484d8 <__umoddi3+0x2b8>
   48394:	b011883a 	mov	r8,r22
   48398:	a013883a 	mov	r9,r20
   4839c:	003fde06 	br	48318 <__umoddi3+0xf8>
   483a0:	00bfffd4 	movui	r2,65535
   483a4:	11804036 	bltu	r2,r6,484a8 <__umoddi3+0x288>
   483a8:	00803fc4 	movi	r2,255
   483ac:	1180ed36 	bltu	r2,r6,48764 <__umoddi3+0x544>
   483b0:	000b883a 	mov	r5,zero
   483b4:	0005883a 	mov	r2,zero
   483b8:	8084d83a 	srl	r2,r16,r2
   483bc:	01100034 	movhi	r4,16384
   483c0:	21009604 	addi	r4,r4,600
   483c4:	01800804 	movi	r6,32
   483c8:	1105883a 	add	r2,r2,r4
   483cc:	10c00003 	ldbu	r3,0(r2)
   483d0:	28c7883a 	add	r3,r5,r3
   483d4:	30c7c83a 	sub	r3,r6,r3
   483d8:	1800bf1e 	bne	r3,zero,486d8 <__umoddi3+0x4b8>
   483dc:	0039883a 	mov	fp,zero
   483e0:	802ad43a 	srli	r21,r16,16
   483e4:	a009883a 	mov	r4,r20
   483e8:	85ffffcc 	andi	r23,r16,65535
   483ec:	a80b883a 	mov	r5,r21
   483f0:	0049a280 	call	49a28 <__udivsi3>
   483f4:	a009883a 	mov	r4,r20
   483f8:	a80b883a 	mov	r5,r21
   483fc:	b8a3383a 	mul	r17,r23,r2
   48400:	0049a300 	call	49a30 <__umodsi3>
   48404:	1004943a 	slli	r2,r2,16
   48408:	b006d43a 	srli	r3,r22,16
   4840c:	10c4b03a 	or	r2,r2,r3
   48410:	1440032e 	bgeu	r2,r17,48420 <__umoddi3+0x200>
   48414:	1405883a 	add	r2,r2,r16
   48418:	14000136 	bltu	r2,r16,48420 <__umoddi3+0x200>
   4841c:	1440e536 	bltu	r2,r17,487b4 <__umoddi3+0x594>
   48420:	1463c83a 	sub	r17,r2,r17
   48424:	8809883a 	mov	r4,r17
   48428:	a80b883a 	mov	r5,r21
   4842c:	0049a280 	call	49a28 <__udivsi3>
   48430:	8809883a 	mov	r4,r17
   48434:	b8a3383a 	mul	r17,r23,r2
   48438:	a80b883a 	mov	r5,r21
   4843c:	0049a300 	call	49a30 <__umodsi3>
   48440:	1004943a 	slli	r2,r2,16
   48444:	b0ffffcc 	andi	r3,r22,65535
   48448:	10c4b03a 	or	r2,r2,r3
   4844c:	1440042e 	bgeu	r2,r17,48460 <__umoddi3+0x240>
   48450:	1405883a 	add	r2,r2,r16
   48454:	14000236 	bltu	r2,r16,48460 <__umoddi3+0x240>
   48458:	1440012e 	bgeu	r2,r17,48460 <__umoddi3+0x240>
   4845c:	1405883a 	add	r2,r2,r16
   48460:	1445c83a 	sub	r2,r2,r17
   48464:	1724d83a 	srl	r18,r2,fp
   48468:	0013883a 	mov	r9,zero
   4846c:	9011883a 	mov	r8,r18
   48470:	003fa906 	br	48318 <__umoddi3+0xf8>
   48474:	00804034 	movhi	r2,256
   48478:	10bfffc4 	addi	r2,r2,-1
   4847c:	1400b036 	bltu	r2,r16,48740 <__umoddi3+0x520>
   48480:	01400404 	movi	r5,16
   48484:	2805883a 	mov	r2,r5
   48488:	003f7c06 	br	4827c <__umoddi3+0x5c>
   4848c:	01000044 	movi	r4,1
   48490:	000b883a 	mov	r5,zero
   48494:	0049a280 	call	49a28 <__udivsi3>
   48498:	1021883a 	mov	r16,r2
   4849c:	00bfffd4 	movui	r2,65535
   484a0:	143ff436 	bltu	r2,r16,48474 <__umoddi3+0x254>
   484a4:	003f7106 	br	4826c <__umoddi3+0x4c>
   484a8:	00804034 	movhi	r2,256
   484ac:	10bfffc4 	addi	r2,r2,-1
   484b0:	1180af36 	bltu	r2,r6,48770 <__umoddi3+0x550>
   484b4:	01400404 	movi	r5,16
   484b8:	2805883a 	mov	r2,r5
   484bc:	003fbe06 	br	483b8 <__umoddi3+0x198>
   484c0:	00804034 	movhi	r2,256
   484c4:	10bfffc4 	addi	r2,r2,-1
   484c8:	11c0ac36 	bltu	r2,r7,4877c <__umoddi3+0x55c>
   484cc:	01400404 	movi	r5,16
   484d0:	2805883a 	mov	r2,r5
   484d4:	003fa406 	br	48368 <__umoddi3+0x148>
   484d8:	b409c83a 	sub	r4,r22,r16
   484dc:	b105803a 	cmpltu	r2,r22,r4
   484e0:	a187c83a 	sub	r3,r20,r6
   484e4:	18a9c83a 	sub	r20,r3,r2
   484e8:	202d883a 	mov	r22,r4
   484ec:	003fa906 	br	48394 <__umoddi3+0x174>
   484f0:	85e0983a 	sll	r16,r16,r23
   484f4:	35c5c83a 	sub	r2,r6,r23
   484f8:	a0a2d83a 	srl	r17,r20,r2
   484fc:	802ad43a 	srli	r21,r16,16
   48500:	b084d83a 	srl	r2,r22,r2
   48504:	a5c6983a 	sll	r3,r20,r23
   48508:	8809883a 	mov	r4,r17
   4850c:	a80b883a 	mov	r5,r21
   48510:	1886b03a 	or	r3,r3,r2
   48514:	d8c00115 	stw	r3,4(sp)
   48518:	853fffcc 	andi	r20,r16,65535
   4851c:	0049a280 	call	49a28 <__udivsi3>
   48520:	8809883a 	mov	r4,r17
   48524:	a80b883a 	mov	r5,r21
   48528:	a0a3383a 	mul	r17,r20,r2
   4852c:	0049a300 	call	49a30 <__umodsi3>
   48530:	d9000117 	ldw	r4,4(sp)
   48534:	1004943a 	slli	r2,r2,16
   48538:	b839883a 	mov	fp,r23
   4853c:	2006d43a 	srli	r3,r4,16
   48540:	10c4b03a 	or	r2,r2,r3
   48544:	1440022e 	bgeu	r2,r17,48550 <__umoddi3+0x330>
   48548:	1405883a 	add	r2,r2,r16
   4854c:	1400962e 	bgeu	r2,r16,487a8 <__umoddi3+0x588>
   48550:	1463c83a 	sub	r17,r2,r17
   48554:	8809883a 	mov	r4,r17
   48558:	a80b883a 	mov	r5,r21
   4855c:	0049a280 	call	49a28 <__udivsi3>
   48560:	8809883a 	mov	r4,r17
   48564:	a80b883a 	mov	r5,r21
   48568:	a0a3383a 	mul	r17,r20,r2
   4856c:	0049a300 	call	49a30 <__umodsi3>
   48570:	d9400117 	ldw	r5,4(sp)
   48574:	1004943a 	slli	r2,r2,16
   48578:	28ffffcc 	andi	r3,r5,65535
   4857c:	10c4b03a 	or	r2,r2,r3
   48580:	1440042e 	bgeu	r2,r17,48594 <__umoddi3+0x374>
   48584:	1405883a 	add	r2,r2,r16
   48588:	14000236 	bltu	r2,r16,48594 <__umoddi3+0x374>
   4858c:	1440012e 	bgeu	r2,r17,48594 <__umoddi3+0x374>
   48590:	1405883a 	add	r2,r2,r16
   48594:	b5ec983a 	sll	r22,r22,r23
   48598:	1463c83a 	sub	r17,r2,r17
   4859c:	003f4406 	br	482b0 <__umoddi3+0x90>
   485a0:	3d4fc83a 	sub	r7,r7,r21
   485a4:	3546983a 	sll	r3,r6,r21
   485a8:	81c4d83a 	srl	r2,r16,r7
   485ac:	a1e2d83a 	srl	r17,r20,r7
   485b0:	a54c983a 	sll	r6,r20,r21
   485b4:	18aeb03a 	or	r23,r3,r2
   485b8:	b828d43a 	srli	r20,r23,16
   485bc:	b1c4d83a 	srl	r2,r22,r7
   485c0:	8809883a 	mov	r4,r17
   485c4:	a00b883a 	mov	r5,r20
   485c8:	308cb03a 	or	r6,r6,r2
   485cc:	d9c00315 	stw	r7,12(sp)
   485d0:	d9800215 	stw	r6,8(sp)
   485d4:	0049a280 	call	49a28 <__udivsi3>
   485d8:	8809883a 	mov	r4,r17
   485dc:	a00b883a 	mov	r5,r20
   485e0:	1039883a 	mov	fp,r2
   485e4:	0049a300 	call	49a30 <__umodsi3>
   485e8:	b8ffffcc 	andi	r3,r23,65535
   485ec:	d8c00415 	stw	r3,16(sp)
   485f0:	d9000217 	ldw	r4,8(sp)
   485f4:	d9400417 	ldw	r5,16(sp)
   485f8:	1004943a 	slli	r2,r2,16
   485fc:	2006d43a 	srli	r3,r4,16
   48600:	8560983a 	sll	r16,r16,r21
   48604:	2f23383a 	mul	r17,r5,fp
   48608:	10c4b03a 	or	r2,r2,r3
   4860c:	dc000015 	stw	r16,0(sp)
   48610:	b56c983a 	sll	r22,r22,r21
   48614:	1440032e 	bgeu	r2,r17,48624 <__umoddi3+0x404>
   48618:	15c5883a 	add	r2,r2,r23
   4861c:	e73fffc4 	addi	fp,fp,-1
   48620:	15c05d2e 	bgeu	r2,r23,48798 <__umoddi3+0x578>
   48624:	1463c83a 	sub	r17,r2,r17
   48628:	8809883a 	mov	r4,r17
   4862c:	a00b883a 	mov	r5,r20
   48630:	0049a280 	call	49a28 <__udivsi3>
   48634:	8809883a 	mov	r4,r17
   48638:	a00b883a 	mov	r5,r20
   4863c:	1021883a 	mov	r16,r2
   48640:	0049a300 	call	49a30 <__umodsi3>
   48644:	d8c00417 	ldw	r3,16(sp)
   48648:	d9000217 	ldw	r4,8(sp)
   4864c:	1004943a 	slli	r2,r2,16
   48650:	1c23383a 	mul	r17,r3,r16
   48654:	20ffffcc 	andi	r3,r4,65535
   48658:	10ceb03a 	or	r7,r2,r3
   4865c:	3c40032e 	bgeu	r7,r17,4866c <__umoddi3+0x44c>
   48660:	3dcf883a 	add	r7,r7,r23
   48664:	843fffc4 	addi	r16,r16,-1
   48668:	3dc0472e 	bgeu	r7,r23,48788 <__umoddi3+0x568>
   4866c:	e004943a 	slli	r2,fp,16
   48670:	d9400017 	ldw	r5,0(sp)
   48674:	3c4fc83a 	sub	r7,r7,r17
   48678:	8084b03a 	or	r2,r16,r2
   4867c:	28ffffcc 	andi	r3,r5,65535
   48680:	280cd43a 	srli	r6,r5,16
   48684:	100ad43a 	srli	r5,r2,16
   48688:	10bfffcc 	andi	r2,r2,65535
   4868c:	10d1383a 	mul	r8,r2,r3
   48690:	28c7383a 	mul	r3,r5,r3
   48694:	1185383a 	mul	r2,r2,r6
   48698:	4008d43a 	srli	r4,r8,16
   4869c:	298b383a 	mul	r5,r5,r6
   486a0:	10c5883a 	add	r2,r2,r3
   486a4:	2089883a 	add	r4,r4,r2
   486a8:	20c0022e 	bgeu	r4,r3,486b4 <__umoddi3+0x494>
   486ac:	00800074 	movhi	r2,1
   486b0:	288b883a 	add	r5,r5,r2
   486b4:	2004d43a 	srli	r2,r4,16
   486b8:	2008943a 	slli	r4,r4,16
   486bc:	40ffffcc 	andi	r3,r8,65535
   486c0:	288b883a 	add	r5,r5,r2
   486c4:	20c9883a 	add	r4,r4,r3
   486c8:	39400b36 	bltu	r7,r5,486f8 <__umoddi3+0x4d8>
   486cc:	39403d26 	beq	r7,r5,487c4 <__umoddi3+0x5a4>
   486d0:	394bc83a 	sub	r5,r7,r5
   486d4:	00000f06 	br	48714 <__umoddi3+0x4f4>
   486d8:	30c5c83a 	sub	r2,r6,r3
   486dc:	1839883a 	mov	fp,r3
   486e0:	b084d83a 	srl	r2,r22,r2
   486e4:	a0c6983a 	sll	r3,r20,r3
   486e8:	8720983a 	sll	r16,r16,fp
   486ec:	b72c983a 	sll	r22,r22,fp
   486f0:	18a8b03a 	or	r20,r3,r2
   486f4:	003f3a06 	br	483e0 <__umoddi3+0x1c0>
   486f8:	d8c00017 	ldw	r3,0(sp)
   486fc:	20c5c83a 	sub	r2,r4,r3
   48700:	2089803a 	cmpltu	r4,r4,r2
   48704:	2dc7c83a 	sub	r3,r5,r23
   48708:	1907c83a 	sub	r3,r3,r4
   4870c:	38cbc83a 	sub	r5,r7,r3
   48710:	1009883a 	mov	r4,r2
   48714:	b105c83a 	sub	r2,r22,r4
   48718:	b087803a 	cmpltu	r3,r22,r2
   4871c:	28c7c83a 	sub	r3,r5,r3
   48720:	d9400317 	ldw	r5,12(sp)
   48724:	1544d83a 	srl	r2,r2,r21
   48728:	1948983a 	sll	r4,r3,r5
   4872c:	1d46d83a 	srl	r3,r3,r21
   48730:	20a4b03a 	or	r18,r4,r2
   48734:	9011883a 	mov	r8,r18
   48738:	1813883a 	mov	r9,r3
   4873c:	003ef606 	br	48318 <__umoddi3+0xf8>
   48740:	01400604 	movi	r5,24
   48744:	2805883a 	mov	r2,r5
   48748:	003ecc06 	br	4827c <__umoddi3+0x5c>
   4874c:	01400204 	movi	r5,8
   48750:	2805883a 	mov	r2,r5
   48754:	003ec906 	br	4827c <__umoddi3+0x5c>
   48758:	01400204 	movi	r5,8
   4875c:	2805883a 	mov	r2,r5
   48760:	003f0106 	br	48368 <__umoddi3+0x148>
   48764:	01400204 	movi	r5,8
   48768:	2805883a 	mov	r2,r5
   4876c:	003f1206 	br	483b8 <__umoddi3+0x198>
   48770:	01400604 	movi	r5,24
   48774:	2805883a 	mov	r2,r5
   48778:	003f0f06 	br	483b8 <__umoddi3+0x198>
   4877c:	01400604 	movi	r5,24
   48780:	2805883a 	mov	r2,r5
   48784:	003ef806 	br	48368 <__umoddi3+0x148>
   48788:	3c7fb82e 	bgeu	r7,r17,4866c <__umoddi3+0x44c>
   4878c:	843fffc4 	addi	r16,r16,-1
   48790:	3dcf883a 	add	r7,r7,r23
   48794:	003fb506 	br	4866c <__umoddi3+0x44c>
   48798:	147fa22e 	bgeu	r2,r17,48624 <__umoddi3+0x404>
   4879c:	e73fffc4 	addi	fp,fp,-1
   487a0:	15c5883a 	add	r2,r2,r23
   487a4:	003f9f06 	br	48624 <__umoddi3+0x404>
   487a8:	147f692e 	bgeu	r2,r17,48550 <__umoddi3+0x330>
   487ac:	1405883a 	add	r2,r2,r16
   487b0:	003f6706 	br	48550 <__umoddi3+0x330>
   487b4:	1405883a 	add	r2,r2,r16
   487b8:	003f1906 	br	48420 <__umoddi3+0x200>
   487bc:	1405883a 	add	r2,r2,r16
   487c0:	003ec906 	br	482e8 <__umoddi3+0xc8>
   487c4:	b13fcc36 	bltu	r22,r4,486f8 <__umoddi3+0x4d8>
   487c8:	000b883a 	mov	r5,zero
   487cc:	003fd106 	br	48714 <__umoddi3+0x4f4>

000487d0 <_fpadd_parts>:
   487d0:	defff804 	addi	sp,sp,-32
   487d4:	dcc00315 	stw	r19,12(sp)
   487d8:	2027883a 	mov	r19,r4
   487dc:	21000017 	ldw	r4,0(r4)
   487e0:	00c00044 	movi	r3,1
   487e4:	dd400515 	stw	r21,20(sp)
   487e8:	dd000415 	stw	r20,16(sp)
   487ec:	ddc00715 	stw	r23,28(sp)
   487f0:	dd800615 	stw	r22,24(sp)
   487f4:	dc800215 	stw	r18,8(sp)
   487f8:	dc400115 	stw	r17,4(sp)
   487fc:	dc000015 	stw	r16,0(sp)
   48800:	282b883a 	mov	r21,r5
   48804:	3029883a 	mov	r20,r6
   48808:	1900632e 	bgeu	r3,r4,48998 <_fpadd_parts+0x1c8>
   4880c:	28800017 	ldw	r2,0(r5)
   48810:	1880812e 	bgeu	r3,r2,48a18 <_fpadd_parts+0x248>
   48814:	00c00104 	movi	r3,4
   48818:	20c0dc26 	beq	r4,r3,48b8c <_fpadd_parts+0x3bc>
   4881c:	10c07e26 	beq	r2,r3,48a18 <_fpadd_parts+0x248>
   48820:	00c00084 	movi	r3,2
   48824:	10c06726 	beq	r2,r3,489c4 <_fpadd_parts+0x1f4>
   48828:	20c07b26 	beq	r4,r3,48a18 <_fpadd_parts+0x248>
   4882c:	9dc00217 	ldw	r23,8(r19)
   48830:	28c00217 	ldw	r3,8(r5)
   48834:	9c400317 	ldw	r17,12(r19)
   48838:	2bc00317 	ldw	r15,12(r5)
   4883c:	b8cdc83a 	sub	r6,r23,r3
   48840:	9c800417 	ldw	r18,16(r19)
   48844:	2c000417 	ldw	r16,16(r5)
   48848:	3009883a 	mov	r4,r6
   4884c:	30009716 	blt	r6,zero,48aac <_fpadd_parts+0x2dc>
   48850:	00800fc4 	movi	r2,63
   48854:	11806b16 	blt	r2,r6,48a04 <_fpadd_parts+0x234>
   48858:	0100a40e 	bge	zero,r4,48aec <_fpadd_parts+0x31c>
   4885c:	35bff804 	addi	r22,r6,-32
   48860:	b000bc16 	blt	r22,zero,48b54 <_fpadd_parts+0x384>
   48864:	8596d83a 	srl	r11,r16,r22
   48868:	0019883a 	mov	r12,zero
   4886c:	0013883a 	mov	r9,zero
   48870:	01000044 	movi	r4,1
   48874:	0015883a 	mov	r10,zero
   48878:	b000be16 	blt	r22,zero,48b74 <_fpadd_parts+0x3a4>
   4887c:	2590983a 	sll	r8,r4,r22
   48880:	000f883a 	mov	r7,zero
   48884:	00bfffc4 	movi	r2,-1
   48888:	3889883a 	add	r4,r7,r2
   4888c:	408b883a 	add	r5,r8,r2
   48890:	21cd803a 	cmpltu	r6,r4,r7
   48894:	314b883a 	add	r5,r6,r5
   48898:	7904703a 	and	r2,r15,r4
   4889c:	8146703a 	and	r3,r16,r5
   488a0:	10c4b03a 	or	r2,r2,r3
   488a4:	10000226 	beq	r2,zero,488b0 <_fpadd_parts+0xe0>
   488a8:	02400044 	movi	r9,1
   488ac:	0015883a 	mov	r10,zero
   488b0:	5a5eb03a 	or	r15,r11,r9
   488b4:	62a0b03a 	or	r16,r12,r10
   488b8:	99400117 	ldw	r5,4(r19)
   488bc:	a8800117 	ldw	r2,4(r21)
   488c0:	28806e26 	beq	r5,r2,48a7c <_fpadd_parts+0x2ac>
   488c4:	28006626 	beq	r5,zero,48a60 <_fpadd_parts+0x290>
   488c8:	7c45c83a 	sub	r2,r15,r17
   488cc:	7889803a 	cmpltu	r4,r15,r2
   488d0:	8487c83a 	sub	r3,r16,r18
   488d4:	1909c83a 	sub	r4,r3,r4
   488d8:	100d883a 	mov	r6,r2
   488dc:	200f883a 	mov	r7,r4
   488e0:	38007716 	blt	r7,zero,48ac0 <_fpadd_parts+0x2f0>
   488e4:	a5c00215 	stw	r23,8(r20)
   488e8:	a1c00415 	stw	r7,16(r20)
   488ec:	a0000115 	stw	zero,4(r20)
   488f0:	a1800315 	stw	r6,12(r20)
   488f4:	a2000317 	ldw	r8,12(r20)
   488f8:	a2400417 	ldw	r9,16(r20)
   488fc:	00bfffc4 	movi	r2,-1
   48900:	408b883a 	add	r5,r8,r2
   48904:	2a09803a 	cmpltu	r4,r5,r8
   48908:	488d883a 	add	r6,r9,r2
   4890c:	01c40034 	movhi	r7,4096
   48910:	39ffffc4 	addi	r7,r7,-1
   48914:	218d883a 	add	r6,r4,r6
   48918:	39801736 	bltu	r7,r6,48978 <_fpadd_parts+0x1a8>
   4891c:	31c06526 	beq	r6,r7,48ab4 <_fpadd_parts+0x2e4>
   48920:	a3000217 	ldw	r12,8(r20)
   48924:	4209883a 	add	r4,r8,r8
   48928:	00bfffc4 	movi	r2,-1
   4892c:	220f803a 	cmpltu	r7,r4,r8
   48930:	4a4b883a 	add	r5,r9,r9
   48934:	394f883a 	add	r7,r7,r5
   48938:	2095883a 	add	r10,r4,r2
   4893c:	3897883a 	add	r11,r7,r2
   48940:	510d803a 	cmpltu	r6,r10,r4
   48944:	6099883a 	add	r12,r12,r2
   48948:	32d7883a 	add	r11,r6,r11
   4894c:	00840034 	movhi	r2,4096
   48950:	10bfffc4 	addi	r2,r2,-1
   48954:	2011883a 	mov	r8,r4
   48958:	3813883a 	mov	r9,r7
   4895c:	a1000315 	stw	r4,12(r20)
   48960:	a1c00415 	stw	r7,16(r20)
   48964:	a3000215 	stw	r12,8(r20)
   48968:	12c00336 	bltu	r2,r11,48978 <_fpadd_parts+0x1a8>
   4896c:	58bfed1e 	bne	r11,r2,48924 <_fpadd_parts+0x154>
   48970:	00bfff84 	movi	r2,-2
   48974:	12bfeb2e 	bgeu	r2,r10,48924 <_fpadd_parts+0x154>
   48978:	a2800417 	ldw	r10,16(r20)
   4897c:	008000c4 	movi	r2,3
   48980:	00c80034 	movhi	r3,8192
   48984:	18ffffc4 	addi	r3,r3,-1
   48988:	a2400317 	ldw	r9,12(r20)
   4898c:	a0800015 	stw	r2,0(r20)
   48990:	1a802336 	bltu	r3,r10,48a20 <_fpadd_parts+0x250>
   48994:	a027883a 	mov	r19,r20
   48998:	9805883a 	mov	r2,r19
   4899c:	ddc00717 	ldw	r23,28(sp)
   489a0:	dd800617 	ldw	r22,24(sp)
   489a4:	dd400517 	ldw	r21,20(sp)
   489a8:	dd000417 	ldw	r20,16(sp)
   489ac:	dcc00317 	ldw	r19,12(sp)
   489b0:	dc800217 	ldw	r18,8(sp)
   489b4:	dc400117 	ldw	r17,4(sp)
   489b8:	dc000017 	ldw	r16,0(sp)
   489bc:	dec00804 	addi	sp,sp,32
   489c0:	f800283a 	ret
   489c4:	20fff41e 	bne	r4,r3,48998 <_fpadd_parts+0x1c8>
   489c8:	31000015 	stw	r4,0(r6)
   489cc:	98800117 	ldw	r2,4(r19)
   489d0:	30800115 	stw	r2,4(r6)
   489d4:	98c00217 	ldw	r3,8(r19)
   489d8:	30c00215 	stw	r3,8(r6)
   489dc:	98800317 	ldw	r2,12(r19)
   489e0:	30800315 	stw	r2,12(r6)
   489e4:	98c00417 	ldw	r3,16(r19)
   489e8:	30c00415 	stw	r3,16(r6)
   489ec:	98800117 	ldw	r2,4(r19)
   489f0:	28c00117 	ldw	r3,4(r5)
   489f4:	3027883a 	mov	r19,r6
   489f8:	10c4703a 	and	r2,r2,r3
   489fc:	30800115 	stw	r2,4(r6)
   48a00:	003fe506 	br	48998 <_fpadd_parts+0x1c8>
   48a04:	1dc02616 	blt	r3,r23,48aa0 <_fpadd_parts+0x2d0>
   48a08:	0023883a 	mov	r17,zero
   48a0c:	182f883a 	mov	r23,r3
   48a10:	0025883a 	mov	r18,zero
   48a14:	003fa806 	br	488b8 <_fpadd_parts+0xe8>
   48a18:	a827883a 	mov	r19,r21
   48a1c:	003fde06 	br	48998 <_fpadd_parts+0x1c8>
   48a20:	01800044 	movi	r6,1
   48a24:	500497fa 	slli	r2,r10,31
   48a28:	4808d07a 	srli	r4,r9,1
   48a2c:	518ad83a 	srl	r5,r10,r6
   48a30:	a2000217 	ldw	r8,8(r20)
   48a34:	1108b03a 	or	r4,r2,r4
   48a38:	0007883a 	mov	r3,zero
   48a3c:	4984703a 	and	r2,r9,r6
   48a40:	208cb03a 	or	r6,r4,r2
   48a44:	28ceb03a 	or	r7,r5,r3
   48a48:	42000044 	addi	r8,r8,1
   48a4c:	a027883a 	mov	r19,r20
   48a50:	a1c00415 	stw	r7,16(r20)
   48a54:	a2000215 	stw	r8,8(r20)
   48a58:	a1800315 	stw	r6,12(r20)
   48a5c:	003fce06 	br	48998 <_fpadd_parts+0x1c8>
   48a60:	8bc5c83a 	sub	r2,r17,r15
   48a64:	8889803a 	cmpltu	r4,r17,r2
   48a68:	9407c83a 	sub	r3,r18,r16
   48a6c:	1909c83a 	sub	r4,r3,r4
   48a70:	100d883a 	mov	r6,r2
   48a74:	200f883a 	mov	r7,r4
   48a78:	003f9906 	br	488e0 <_fpadd_parts+0x110>
   48a7c:	7c45883a 	add	r2,r15,r17
   48a80:	13c9803a 	cmpltu	r4,r2,r15
   48a84:	8487883a 	add	r3,r16,r18
   48a88:	20c9883a 	add	r4,r4,r3
   48a8c:	a1400115 	stw	r5,4(r20)
   48a90:	a5c00215 	stw	r23,8(r20)
   48a94:	a0800315 	stw	r2,12(r20)
   48a98:	a1000415 	stw	r4,16(r20)
   48a9c:	003fb606 	br	48978 <_fpadd_parts+0x1a8>
   48aa0:	001f883a 	mov	r15,zero
   48aa4:	0021883a 	mov	r16,zero
   48aa8:	003f8306 	br	488b8 <_fpadd_parts+0xe8>
   48aac:	018dc83a 	sub	r6,zero,r6
   48ab0:	003f6706 	br	48850 <_fpadd_parts+0x80>
   48ab4:	00bfff84 	movi	r2,-2
   48ab8:	117faf36 	bltu	r2,r5,48978 <_fpadd_parts+0x1a8>
   48abc:	003f9806 	br	48920 <_fpadd_parts+0x150>
   48ac0:	0005883a 	mov	r2,zero
   48ac4:	1189c83a 	sub	r4,r2,r6
   48ac8:	1105803a 	cmpltu	r2,r2,r4
   48acc:	01cbc83a 	sub	r5,zero,r7
   48ad0:	2885c83a 	sub	r2,r5,r2
   48ad4:	01800044 	movi	r6,1
   48ad8:	a1800115 	stw	r6,4(r20)
   48adc:	a5c00215 	stw	r23,8(r20)
   48ae0:	a1000315 	stw	r4,12(r20)
   48ae4:	a0800415 	stw	r2,16(r20)
   48ae8:	003f8206 	br	488f4 <_fpadd_parts+0x124>
   48aec:	203f7226 	beq	r4,zero,488b8 <_fpadd_parts+0xe8>
   48af0:	35bff804 	addi	r22,r6,-32
   48af4:	b9af883a 	add	r23,r23,r6
   48af8:	b0003116 	blt	r22,zero,48bc0 <_fpadd_parts+0x3f0>
   48afc:	959ad83a 	srl	r13,r18,r22
   48b00:	001d883a 	mov	r14,zero
   48b04:	000f883a 	mov	r7,zero
   48b08:	01000044 	movi	r4,1
   48b0c:	0011883a 	mov	r8,zero
   48b10:	b0002516 	blt	r22,zero,48ba8 <_fpadd_parts+0x3d8>
   48b14:	2594983a 	sll	r10,r4,r22
   48b18:	0013883a 	mov	r9,zero
   48b1c:	00bfffc4 	movi	r2,-1
   48b20:	4889883a 	add	r4,r9,r2
   48b24:	508b883a 	add	r5,r10,r2
   48b28:	224d803a 	cmpltu	r6,r4,r9
   48b2c:	314b883a 	add	r5,r6,r5
   48b30:	8904703a 	and	r2,r17,r4
   48b34:	9146703a 	and	r3,r18,r5
   48b38:	10c4b03a 	or	r2,r2,r3
   48b3c:	10000226 	beq	r2,zero,48b48 <_fpadd_parts+0x378>
   48b40:	01c00044 	movi	r7,1
   48b44:	0011883a 	mov	r8,zero
   48b48:	69e2b03a 	or	r17,r13,r7
   48b4c:	7224b03a 	or	r18,r14,r8
   48b50:	003f5906 	br	488b8 <_fpadd_parts+0xe8>
   48b54:	8407883a 	add	r3,r16,r16
   48b58:	008007c4 	movi	r2,31
   48b5c:	1185c83a 	sub	r2,r2,r6
   48b60:	1886983a 	sll	r3,r3,r2
   48b64:	7996d83a 	srl	r11,r15,r6
   48b68:	8198d83a 	srl	r12,r16,r6
   48b6c:	1ad6b03a 	or	r11,r3,r11
   48b70:	003f3e06 	br	4886c <_fpadd_parts+0x9c>
   48b74:	2006d07a 	srli	r3,r4,1
   48b78:	008007c4 	movi	r2,31
   48b7c:	1185c83a 	sub	r2,r2,r6
   48b80:	1890d83a 	srl	r8,r3,r2
   48b84:	218e983a 	sll	r7,r4,r6
   48b88:	003f3e06 	br	48884 <_fpadd_parts+0xb4>
   48b8c:	113f821e 	bne	r2,r4,48998 <_fpadd_parts+0x1c8>
   48b90:	28c00117 	ldw	r3,4(r5)
   48b94:	98800117 	ldw	r2,4(r19)
   48b98:	10ff7f26 	beq	r2,r3,48998 <_fpadd_parts+0x1c8>
   48b9c:	04d00034 	movhi	r19,16384
   48ba0:	9cc09104 	addi	r19,r19,580
   48ba4:	003f7c06 	br	48998 <_fpadd_parts+0x1c8>
   48ba8:	2006d07a 	srli	r3,r4,1
   48bac:	008007c4 	movi	r2,31
   48bb0:	1185c83a 	sub	r2,r2,r6
   48bb4:	1894d83a 	srl	r10,r3,r2
   48bb8:	2192983a 	sll	r9,r4,r6
   48bbc:	003fd706 	br	48b1c <_fpadd_parts+0x34c>
   48bc0:	9487883a 	add	r3,r18,r18
   48bc4:	008007c4 	movi	r2,31
   48bc8:	1185c83a 	sub	r2,r2,r6
   48bcc:	1886983a 	sll	r3,r3,r2
   48bd0:	899ad83a 	srl	r13,r17,r6
   48bd4:	919cd83a 	srl	r14,r18,r6
   48bd8:	1b5ab03a 	or	r13,r3,r13
   48bdc:	003fc906 	br	48b04 <_fpadd_parts+0x334>

00048be0 <__subdf3>:
   48be0:	deffea04 	addi	sp,sp,-88
   48be4:	dcc01415 	stw	r19,80(sp)
   48be8:	dcc00404 	addi	r19,sp,16
   48bec:	2011883a 	mov	r8,r4
   48bf0:	2813883a 	mov	r9,r5
   48bf4:	dc401315 	stw	r17,76(sp)
   48bf8:	d809883a 	mov	r4,sp
   48bfc:	980b883a 	mov	r5,r19
   48c00:	dc400904 	addi	r17,sp,36
   48c04:	dfc01515 	stw	ra,84(sp)
   48c08:	da400115 	stw	r9,4(sp)
   48c0c:	d9c00315 	stw	r7,12(sp)
   48c10:	da000015 	stw	r8,0(sp)
   48c14:	d9800215 	stw	r6,8(sp)
   48c18:	0049dcc0 	call	49dcc <__unpack_d>
   48c1c:	d9000204 	addi	r4,sp,8
   48c20:	880b883a 	mov	r5,r17
   48c24:	0049dcc0 	call	49dcc <__unpack_d>
   48c28:	d8800a17 	ldw	r2,40(sp)
   48c2c:	880b883a 	mov	r5,r17
   48c30:	9809883a 	mov	r4,r19
   48c34:	d9800e04 	addi	r6,sp,56
   48c38:	1080005c 	xori	r2,r2,1
   48c3c:	d8800a15 	stw	r2,40(sp)
   48c40:	00487d00 	call	487d0 <_fpadd_parts>
   48c44:	1009883a 	mov	r4,r2
   48c48:	0049ab80 	call	49ab8 <__pack_d>
   48c4c:	dfc01517 	ldw	ra,84(sp)
   48c50:	dcc01417 	ldw	r19,80(sp)
   48c54:	dc401317 	ldw	r17,76(sp)
   48c58:	dec01604 	addi	sp,sp,88
   48c5c:	f800283a 	ret

00048c60 <__adddf3>:
   48c60:	deffea04 	addi	sp,sp,-88
   48c64:	dcc01415 	stw	r19,80(sp)
   48c68:	dcc00404 	addi	r19,sp,16
   48c6c:	2011883a 	mov	r8,r4
   48c70:	2813883a 	mov	r9,r5
   48c74:	dc401315 	stw	r17,76(sp)
   48c78:	d809883a 	mov	r4,sp
   48c7c:	980b883a 	mov	r5,r19
   48c80:	dc400904 	addi	r17,sp,36
   48c84:	dfc01515 	stw	ra,84(sp)
   48c88:	da400115 	stw	r9,4(sp)
   48c8c:	d9c00315 	stw	r7,12(sp)
   48c90:	da000015 	stw	r8,0(sp)
   48c94:	d9800215 	stw	r6,8(sp)
   48c98:	0049dcc0 	call	49dcc <__unpack_d>
   48c9c:	d9000204 	addi	r4,sp,8
   48ca0:	880b883a 	mov	r5,r17
   48ca4:	0049dcc0 	call	49dcc <__unpack_d>
   48ca8:	d9800e04 	addi	r6,sp,56
   48cac:	9809883a 	mov	r4,r19
   48cb0:	880b883a 	mov	r5,r17
   48cb4:	00487d00 	call	487d0 <_fpadd_parts>
   48cb8:	1009883a 	mov	r4,r2
   48cbc:	0049ab80 	call	49ab8 <__pack_d>
   48cc0:	dfc01517 	ldw	ra,84(sp)
   48cc4:	dcc01417 	ldw	r19,80(sp)
   48cc8:	dc401317 	ldw	r17,76(sp)
   48ccc:	dec01604 	addi	sp,sp,88
   48cd0:	f800283a 	ret

00048cd4 <__muldf3>:
   48cd4:	deffdd04 	addi	sp,sp,-140
   48cd8:	df002115 	stw	fp,132(sp)
   48cdc:	df000404 	addi	fp,sp,16
   48ce0:	2011883a 	mov	r8,r4
   48ce4:	2813883a 	mov	r9,r5
   48ce8:	d809883a 	mov	r4,sp
   48cec:	e00b883a 	mov	r5,fp
   48cf0:	dfc02215 	stw	ra,136(sp)
   48cf4:	da400115 	stw	r9,4(sp)
   48cf8:	d9c00315 	stw	r7,12(sp)
   48cfc:	da000015 	stw	r8,0(sp)
   48d00:	d9800215 	stw	r6,8(sp)
   48d04:	ddc02015 	stw	r23,128(sp)
   48d08:	dd801f15 	stw	r22,124(sp)
   48d0c:	dd401e15 	stw	r21,120(sp)
   48d10:	dd001d15 	stw	r20,116(sp)
   48d14:	dcc01c15 	stw	r19,112(sp)
   48d18:	dc801b15 	stw	r18,108(sp)
   48d1c:	dc401a15 	stw	r17,104(sp)
   48d20:	dc001915 	stw	r16,100(sp)
   48d24:	0049dcc0 	call	49dcc <__unpack_d>
   48d28:	d9000204 	addi	r4,sp,8
   48d2c:	d9400904 	addi	r5,sp,36
   48d30:	0049dcc0 	call	49dcc <__unpack_d>
   48d34:	d9000417 	ldw	r4,16(sp)
   48d38:	00800044 	movi	r2,1
   48d3c:	1100102e 	bgeu	r2,r4,48d80 <__muldf3+0xac>
   48d40:	d8c00917 	ldw	r3,36(sp)
   48d44:	10c0062e 	bgeu	r2,r3,48d60 <__muldf3+0x8c>
   48d48:	00800104 	movi	r2,4
   48d4c:	20800a26 	beq	r4,r2,48d78 <__muldf3+0xa4>
   48d50:	1880c826 	beq	r3,r2,49074 <__muldf3+0x3a0>
   48d54:	00800084 	movi	r2,2
   48d58:	20800926 	beq	r4,r2,48d80 <__muldf3+0xac>
   48d5c:	18801a1e 	bne	r3,r2,48dc8 <__muldf3+0xf4>
   48d60:	d8c00a17 	ldw	r3,40(sp)
   48d64:	d8800517 	ldw	r2,20(sp)
   48d68:	d9000904 	addi	r4,sp,36
   48d6c:	10c4c03a 	cmpne	r2,r2,r3
   48d70:	d8800a15 	stw	r2,40(sp)
   48d74:	00000706 	br	48d94 <__muldf3+0xc0>
   48d78:	00800084 	movi	r2,2
   48d7c:	1880bf26 	beq	r3,r2,4907c <__muldf3+0x3a8>
   48d80:	d8800517 	ldw	r2,20(sp)
   48d84:	d8c00a17 	ldw	r3,40(sp)
   48d88:	e009883a 	mov	r4,fp
   48d8c:	10c4c03a 	cmpne	r2,r2,r3
   48d90:	d8800515 	stw	r2,20(sp)
   48d94:	0049ab80 	call	49ab8 <__pack_d>
   48d98:	dfc02217 	ldw	ra,136(sp)
   48d9c:	df002117 	ldw	fp,132(sp)
   48da0:	ddc02017 	ldw	r23,128(sp)
   48da4:	dd801f17 	ldw	r22,124(sp)
   48da8:	dd401e17 	ldw	r21,120(sp)
   48dac:	dd001d17 	ldw	r20,116(sp)
   48db0:	dcc01c17 	ldw	r19,112(sp)
   48db4:	dc801b17 	ldw	r18,108(sp)
   48db8:	dc401a17 	ldw	r17,104(sp)
   48dbc:	dc001917 	ldw	r16,100(sp)
   48dc0:	dec02304 	addi	sp,sp,140
   48dc4:	f800283a 	ret
   48dc8:	db000c17 	ldw	r12,48(sp)
   48dcc:	db800717 	ldw	r14,28(sp)
   48dd0:	dbc00817 	ldw	r15,32(sp)
   48dd4:	db400d17 	ldw	r13,52(sp)
   48dd8:	6009883a 	mov	r4,r12
   48ddc:	000d883a 	mov	r6,zero
   48de0:	0011883a 	mov	r8,zero
   48de4:	000b883a 	mov	r5,zero
   48de8:	0007883a 	mov	r3,zero
   48dec:	0019883a 	mov	r12,zero
   48df0:	4393383a 	mul	r9,r8,r14
   48df4:	d9801415 	stw	r6,80(sp)
   48df8:	6111383a 	mul	r8,r12,r4
   48dfc:	d9801615 	stw	r6,88(sp)
   48e00:	1b4f383a 	mul	r7,r3,r13
   48e04:	2bcd383a 	mul	r6,r5,r15
   48e08:	7361383a 	mul	r16,r14,r13
   48e0c:	23e5383a 	mul	r18,r4,r15
   48e10:	7362383a 	mulxuu	r17,r14,r13
   48e14:	23e6383a 	mulxuu	r19,r4,r15
   48e18:	3a4f883a 	add	r7,r7,r9
   48e1c:	320d883a 	add	r6,r6,r8
   48e20:	3c63883a 	add	r17,r7,r17
   48e24:	34e7883a 	add	r19,r6,r19
   48e28:	8495883a 	add	r10,r16,r18
   48e2c:	23aa383a 	mulxuu	r21,r4,r14
   48e30:	540f803a 	cmpltu	r7,r10,r16
   48e34:	8cd7883a 	add	r11,r17,r19
   48e38:	3acf883a 	add	r7,r7,r11
   48e3c:	4a0d883a 	add	r6,r9,r8
   48e40:	db401315 	stw	r13,76(sp)
   48e44:	dbc01515 	stw	r15,84(sp)
   48e48:	23a9383a 	mul	r20,r4,r14
   48e4c:	da801715 	stw	r10,92(sp)
   48e50:	d9c01815 	stw	r7,96(sp)
   48e54:	356b883a 	add	r21,r6,r21
   48e58:	3c40682e 	bgeu	r7,r17,48ffc <__muldf3+0x328>
   48e5c:	000f883a 	mov	r7,zero
   48e60:	02000044 	movi	r8,1
   48e64:	d9401717 	ldw	r5,92(sp)
   48e68:	0009883a 	mov	r4,zero
   48e6c:	a105883a 	add	r2,r20,r4
   48e70:	150d803a 	cmpltu	r6,r2,r20
   48e74:	a947883a 	add	r3,r21,r5
   48e78:	30cd883a 	add	r6,r6,r3
   48e7c:	101f883a 	mov	r15,r2
   48e80:	3021883a 	mov	r16,r6
   48e84:	35406236 	bltu	r6,r21,49010 <__muldf3+0x33c>
   48e88:	a9806026 	beq	r21,r6,4900c <__muldf3+0x338>
   48e8c:	d9801317 	ldw	r6,76(sp)
   48e90:	db001517 	ldw	r12,84(sp)
   48e94:	d8c01417 	ldw	r3,80(sp)
   48e98:	d9401617 	ldw	r5,88(sp)
   48e9c:	6009883a 	mov	r4,r12
   48ea0:	1b05383a 	mul	r2,r3,r12
   48ea4:	2987383a 	mul	r3,r5,r6
   48ea8:	332d383a 	mul	r22,r6,r12
   48eac:	312e383a 	mulxuu	r23,r6,r4
   48eb0:	d9801817 	ldw	r6,96(sp)
   48eb4:	10c5883a 	add	r2,r2,r3
   48eb8:	15ef883a 	add	r23,r2,r23
   48ebc:	000b883a 	mov	r5,zero
   48ec0:	b185883a 	add	r2,r22,r6
   48ec4:	158d803a 	cmpltu	r6,r2,r22
   48ec8:	b947883a 	add	r3,r23,r5
   48ecc:	30c7883a 	add	r3,r6,r3
   48ed0:	40cb883a 	add	r5,r8,r3
   48ed4:	d8c00617 	ldw	r3,24(sp)
   48ed8:	3889883a 	add	r4,r7,r2
   48edc:	d8800b17 	ldw	r2,44(sp)
   48ee0:	18c00104 	addi	r3,r3,4
   48ee4:	21cd803a 	cmpltu	r6,r4,r7
   48ee8:	10c7883a 	add	r3,r2,r3
   48eec:	2013883a 	mov	r9,r4
   48ef0:	d8800a17 	ldw	r2,40(sp)
   48ef4:	d9000517 	ldw	r4,20(sp)
   48ef8:	314d883a 	add	r6,r6,r5
   48efc:	3015883a 	mov	r10,r6
   48f00:	2088c03a 	cmpne	r4,r4,r2
   48f04:	00880034 	movhi	r2,8192
   48f08:	10bfffc4 	addi	r2,r2,-1
   48f0c:	d9000f15 	stw	r4,60(sp)
   48f10:	d8c01015 	stw	r3,64(sp)
   48f14:	1180162e 	bgeu	r2,r6,48f70 <__muldf3+0x29c>
   48f18:	1811883a 	mov	r8,r3
   48f1c:	1023883a 	mov	r17,r2
   48f20:	800497fa 	slli	r2,r16,31
   48f24:	7816d07a 	srli	r11,r15,1
   48f28:	500697fa 	slli	r3,r10,31
   48f2c:	480cd07a 	srli	r6,r9,1
   48f30:	500ed07a 	srli	r7,r10,1
   48f34:	12d6b03a 	or	r11,r2,r11
   48f38:	00800044 	movi	r2,1
   48f3c:	198cb03a 	or	r6,r3,r6
   48f40:	4888703a 	and	r4,r9,r2
   48f44:	8018d07a 	srli	r12,r16,1
   48f48:	001b883a 	mov	r13,zero
   48f4c:	03a00034 	movhi	r14,32768
   48f50:	3013883a 	mov	r9,r6
   48f54:	3815883a 	mov	r10,r7
   48f58:	4091883a 	add	r8,r8,r2
   48f5c:	20000226 	beq	r4,zero,48f68 <__muldf3+0x294>
   48f60:	5b5eb03a 	or	r15,r11,r13
   48f64:	63a0b03a 	or	r16,r12,r14
   48f68:	8abfed36 	bltu	r17,r10,48f20 <__muldf3+0x24c>
   48f6c:	da001015 	stw	r8,64(sp)
   48f70:	00840034 	movhi	r2,4096
   48f74:	10bfffc4 	addi	r2,r2,-1
   48f78:	12801436 	bltu	r2,r10,48fcc <__muldf3+0x2f8>
   48f7c:	da001017 	ldw	r8,64(sp)
   48f80:	1023883a 	mov	r17,r2
   48f84:	4a45883a 	add	r2,r9,r9
   48f88:	124d803a 	cmpltu	r6,r2,r9
   48f8c:	5287883a 	add	r3,r10,r10
   48f90:	7bd7883a 	add	r11,r15,r15
   48f94:	5bcf803a 	cmpltu	r7,r11,r15
   48f98:	8419883a 	add	r12,r16,r16
   48f9c:	01000044 	movi	r4,1
   48fa0:	30cd883a 	add	r6,r6,r3
   48fa4:	3b0f883a 	add	r7,r7,r12
   48fa8:	423fffc4 	addi	r8,r8,-1
   48fac:	1013883a 	mov	r9,r2
   48fb0:	3015883a 	mov	r10,r6
   48fb4:	111ab03a 	or	r13,r2,r4
   48fb8:	80002a16 	blt	r16,zero,49064 <__muldf3+0x390>
   48fbc:	581f883a 	mov	r15,r11
   48fc0:	3821883a 	mov	r16,r7
   48fc4:	8abfef2e 	bgeu	r17,r10,48f84 <__muldf3+0x2b0>
   48fc8:	da001015 	stw	r8,64(sp)
   48fcc:	00803fc4 	movi	r2,255
   48fd0:	488e703a 	and	r7,r9,r2
   48fd4:	00802004 	movi	r2,128
   48fd8:	0007883a 	mov	r3,zero
   48fdc:	0011883a 	mov	r8,zero
   48fe0:	38801226 	beq	r7,r2,4902c <__muldf3+0x358>
   48fe4:	008000c4 	movi	r2,3
   48fe8:	d9000e04 	addi	r4,sp,56
   48fec:	da801215 	stw	r10,72(sp)
   48ff0:	d8800e15 	stw	r2,56(sp)
   48ff4:	da401115 	stw	r9,68(sp)
   48ff8:	003f6606 	br	48d94 <__muldf3+0xc0>
   48ffc:	89c01b26 	beq	r17,r7,4906c <__muldf3+0x398>
   49000:	000f883a 	mov	r7,zero
   49004:	0011883a 	mov	r8,zero
   49008:	003f9606 	br	48e64 <__muldf3+0x190>
   4900c:	153f9f2e 	bgeu	r2,r20,48e8c <__muldf3+0x1b8>
   49010:	00800044 	movi	r2,1
   49014:	3889883a 	add	r4,r7,r2
   49018:	21cd803a 	cmpltu	r6,r4,r7
   4901c:	320d883a 	add	r6,r6,r8
   49020:	200f883a 	mov	r7,r4
   49024:	3011883a 	mov	r8,r6
   49028:	003f9806 	br	48e8c <__muldf3+0x1b8>
   4902c:	403fed1e 	bne	r8,zero,48fe4 <__muldf3+0x310>
   49030:	01004004 	movi	r4,256
   49034:	4904703a 	and	r2,r9,r4
   49038:	10c4b03a 	or	r2,r2,r3
   4903c:	103fe91e 	bne	r2,zero,48fe4 <__muldf3+0x310>
   49040:	7c04b03a 	or	r2,r15,r16
   49044:	103fe726 	beq	r2,zero,48fe4 <__muldf3+0x310>
   49048:	49c5883a 	add	r2,r9,r7
   4904c:	1251803a 	cmpltu	r8,r2,r9
   49050:	4291883a 	add	r8,r8,r10
   49054:	013fc004 	movi	r4,-256
   49058:	1112703a 	and	r9,r2,r4
   4905c:	4015883a 	mov	r10,r8
   49060:	003fe006 	br	48fe4 <__muldf3+0x310>
   49064:	6813883a 	mov	r9,r13
   49068:	003fd406 	br	48fbc <__muldf3+0x2e8>
   4906c:	543f7b36 	bltu	r10,r16,48e5c <__muldf3+0x188>
   49070:	003fe306 	br	49000 <__muldf3+0x32c>
   49074:	00800084 	movi	r2,2
   49078:	20bf391e 	bne	r4,r2,48d60 <__muldf3+0x8c>
   4907c:	01100034 	movhi	r4,16384
   49080:	21009104 	addi	r4,r4,580
   49084:	003f4306 	br	48d94 <__muldf3+0xc0>

00049088 <__divdf3>:
   49088:	deffed04 	addi	sp,sp,-76
   4908c:	dcc01115 	stw	r19,68(sp)
   49090:	dcc00404 	addi	r19,sp,16
   49094:	2011883a 	mov	r8,r4
   49098:	2813883a 	mov	r9,r5
   4909c:	dc000e15 	stw	r16,56(sp)
   490a0:	d809883a 	mov	r4,sp
   490a4:	980b883a 	mov	r5,r19
   490a8:	dc000904 	addi	r16,sp,36
   490ac:	dfc01215 	stw	ra,72(sp)
   490b0:	da400115 	stw	r9,4(sp)
   490b4:	d9c00315 	stw	r7,12(sp)
   490b8:	da000015 	stw	r8,0(sp)
   490bc:	d9800215 	stw	r6,8(sp)
   490c0:	dc801015 	stw	r18,64(sp)
   490c4:	dc400f15 	stw	r17,60(sp)
   490c8:	0049dcc0 	call	49dcc <__unpack_d>
   490cc:	d9000204 	addi	r4,sp,8
   490d0:	800b883a 	mov	r5,r16
   490d4:	0049dcc0 	call	49dcc <__unpack_d>
   490d8:	d9000417 	ldw	r4,16(sp)
   490dc:	00800044 	movi	r2,1
   490e0:	11000b2e 	bgeu	r2,r4,49110 <__divdf3+0x88>
   490e4:	d9400917 	ldw	r5,36(sp)
   490e8:	1140762e 	bgeu	r2,r5,492c4 <__divdf3+0x23c>
   490ec:	d8800517 	ldw	r2,20(sp)
   490f0:	d8c00a17 	ldw	r3,40(sp)
   490f4:	01800104 	movi	r6,4
   490f8:	10c4f03a 	xor	r2,r2,r3
   490fc:	d8800515 	stw	r2,20(sp)
   49100:	21800226 	beq	r4,r6,4910c <__divdf3+0x84>
   49104:	00800084 	movi	r2,2
   49108:	2080141e 	bne	r4,r2,4915c <__divdf3+0xd4>
   4910c:	29000926 	beq	r5,r4,49134 <__divdf3+0xac>
   49110:	9809883a 	mov	r4,r19
   49114:	0049ab80 	call	49ab8 <__pack_d>
   49118:	dfc01217 	ldw	ra,72(sp)
   4911c:	dcc01117 	ldw	r19,68(sp)
   49120:	dc801017 	ldw	r18,64(sp)
   49124:	dc400f17 	ldw	r17,60(sp)
   49128:	dc000e17 	ldw	r16,56(sp)
   4912c:	dec01304 	addi	sp,sp,76
   49130:	f800283a 	ret
   49134:	01100034 	movhi	r4,16384
   49138:	21009104 	addi	r4,r4,580
   4913c:	0049ab80 	call	49ab8 <__pack_d>
   49140:	dfc01217 	ldw	ra,72(sp)
   49144:	dcc01117 	ldw	r19,68(sp)
   49148:	dc801017 	ldw	r18,64(sp)
   4914c:	dc400f17 	ldw	r17,60(sp)
   49150:	dc000e17 	ldw	r16,56(sp)
   49154:	dec01304 	addi	sp,sp,76
   49158:	f800283a 	ret
   4915c:	29805b26 	beq	r5,r6,492cc <__divdf3+0x244>
   49160:	28802d26 	beq	r5,r2,49218 <__divdf3+0x190>
   49164:	d8c00617 	ldw	r3,24(sp)
   49168:	d8800b17 	ldw	r2,44(sp)
   4916c:	d9c00817 	ldw	r7,32(sp)
   49170:	dc400d17 	ldw	r17,52(sp)
   49174:	188bc83a 	sub	r5,r3,r2
   49178:	d9800717 	ldw	r6,28(sp)
   4917c:	dc000c17 	ldw	r16,48(sp)
   49180:	d9400615 	stw	r5,24(sp)
   49184:	3c403836 	bltu	r7,r17,49268 <__divdf3+0x1e0>
   49188:	89c03626 	beq	r17,r7,49264 <__divdf3+0x1dc>
   4918c:	0015883a 	mov	r10,zero
   49190:	001d883a 	mov	r14,zero
   49194:	02c40034 	movhi	r11,4096
   49198:	001f883a 	mov	r15,zero
   4919c:	003f883a 	mov	ra,zero
   491a0:	04800f44 	movi	r18,61
   491a4:	00000f06 	br	491e4 <__divdf3+0x15c>
   491a8:	601d883a 	mov	r14,r12
   491ac:	681f883a 	mov	r15,r13
   491b0:	400d883a 	mov	r6,r8
   491b4:	100f883a 	mov	r7,r2
   491b8:	3191883a 	add	r8,r6,r6
   491bc:	5808d07a 	srli	r4,r11,1
   491c0:	4185803a 	cmpltu	r2,r8,r6
   491c4:	39d3883a 	add	r9,r7,r7
   491c8:	28c6b03a 	or	r3,r5,r3
   491cc:	1245883a 	add	r2,r2,r9
   491d0:	1815883a 	mov	r10,r3
   491d4:	2017883a 	mov	r11,r4
   491d8:	400d883a 	mov	r6,r8
   491dc:	100f883a 	mov	r7,r2
   491e0:	fc801726 	beq	ra,r18,49240 <__divdf3+0x1b8>
   491e4:	580a97fa 	slli	r5,r11,31
   491e8:	5006d07a 	srli	r3,r10,1
   491ec:	ffc00044 	addi	ra,ra,1
   491f0:	3c7ff136 	bltu	r7,r17,491b8 <__divdf3+0x130>
   491f4:	3411c83a 	sub	r8,r6,r16
   491f8:	3205803a 	cmpltu	r2,r6,r8
   491fc:	3c53c83a 	sub	r9,r7,r17
   49200:	7298b03a 	or	r12,r14,r10
   49204:	7adab03a 	or	r13,r15,r11
   49208:	4885c83a 	sub	r2,r9,r2
   4920c:	89ffe61e 	bne	r17,r7,491a8 <__divdf3+0x120>
   49210:	343fe936 	bltu	r6,r16,491b8 <__divdf3+0x130>
   49214:	003fe406 	br	491a8 <__divdf3+0x120>
   49218:	9809883a 	mov	r4,r19
   4921c:	d9800415 	stw	r6,16(sp)
   49220:	0049ab80 	call	49ab8 <__pack_d>
   49224:	dfc01217 	ldw	ra,72(sp)
   49228:	dcc01117 	ldw	r19,68(sp)
   4922c:	dc801017 	ldw	r18,64(sp)
   49230:	dc400f17 	ldw	r17,60(sp)
   49234:	dc000e17 	ldw	r16,56(sp)
   49238:	dec01304 	addi	sp,sp,76
   4923c:	f800283a 	ret
   49240:	00803fc4 	movi	r2,255
   49244:	7090703a 	and	r8,r14,r2
   49248:	00802004 	movi	r2,128
   4924c:	0007883a 	mov	r3,zero
   49250:	0013883a 	mov	r9,zero
   49254:	40800d26 	beq	r8,r2,4928c <__divdf3+0x204>
   49258:	dbc00815 	stw	r15,32(sp)
   4925c:	db800715 	stw	r14,28(sp)
   49260:	003fab06 	br	49110 <__divdf3+0x88>
   49264:	343fc92e 	bgeu	r6,r16,4918c <__divdf3+0x104>
   49268:	3185883a 	add	r2,r6,r6
   4926c:	1189803a 	cmpltu	r4,r2,r6
   49270:	39c7883a 	add	r3,r7,r7
   49274:	20c9883a 	add	r4,r4,r3
   49278:	297fffc4 	addi	r5,r5,-1
   4927c:	100d883a 	mov	r6,r2
   49280:	200f883a 	mov	r7,r4
   49284:	d9400615 	stw	r5,24(sp)
   49288:	003fc006 	br	4918c <__divdf3+0x104>
   4928c:	483ff21e 	bne	r9,zero,49258 <__divdf3+0x1d0>
   49290:	01004004 	movi	r4,256
   49294:	7104703a 	and	r2,r14,r4
   49298:	10c4b03a 	or	r2,r2,r3
   4929c:	103fee1e 	bne	r2,zero,49258 <__divdf3+0x1d0>
   492a0:	31c4b03a 	or	r2,r6,r7
   492a4:	103fec26 	beq	r2,zero,49258 <__divdf3+0x1d0>
   492a8:	7205883a 	add	r2,r14,r8
   492ac:	1391803a 	cmpltu	r8,r2,r14
   492b0:	43d1883a 	add	r8,r8,r15
   492b4:	013fc004 	movi	r4,-256
   492b8:	111c703a 	and	r14,r2,r4
   492bc:	401f883a 	mov	r15,r8
   492c0:	003fe506 	br	49258 <__divdf3+0x1d0>
   492c4:	8009883a 	mov	r4,r16
   492c8:	003f9206 	br	49114 <__divdf3+0x8c>
   492cc:	9809883a 	mov	r4,r19
   492d0:	d8000715 	stw	zero,28(sp)
   492d4:	d8000815 	stw	zero,32(sp)
   492d8:	d8000615 	stw	zero,24(sp)
   492dc:	003f8d06 	br	49114 <__divdf3+0x8c>

000492e0 <__eqdf2>:
   492e0:	deffef04 	addi	sp,sp,-68
   492e4:	dc400f15 	stw	r17,60(sp)
   492e8:	dc400404 	addi	r17,sp,16
   492ec:	2005883a 	mov	r2,r4
   492f0:	2807883a 	mov	r3,r5
   492f4:	dc000e15 	stw	r16,56(sp)
   492f8:	d809883a 	mov	r4,sp
   492fc:	880b883a 	mov	r5,r17
   49300:	dc000904 	addi	r16,sp,36
   49304:	d8c00115 	stw	r3,4(sp)
   49308:	d8800015 	stw	r2,0(sp)
   4930c:	d9800215 	stw	r6,8(sp)
   49310:	dfc01015 	stw	ra,64(sp)
   49314:	d9c00315 	stw	r7,12(sp)
   49318:	0049dcc0 	call	49dcc <__unpack_d>
   4931c:	d9000204 	addi	r4,sp,8
   49320:	800b883a 	mov	r5,r16
   49324:	0049dcc0 	call	49dcc <__unpack_d>
   49328:	d8800417 	ldw	r2,16(sp)
   4932c:	00c00044 	movi	r3,1
   49330:	180d883a 	mov	r6,r3
   49334:	1880062e 	bgeu	r3,r2,49350 <__eqdf2+0x70>
   49338:	d8800917 	ldw	r2,36(sp)
   4933c:	8809883a 	mov	r4,r17
   49340:	800b883a 	mov	r5,r16
   49344:	1880022e 	bgeu	r3,r2,49350 <__eqdf2+0x70>
   49348:	0049f040 	call	49f04 <__fpcmp_parts_d>
   4934c:	100d883a 	mov	r6,r2
   49350:	3005883a 	mov	r2,r6
   49354:	dfc01017 	ldw	ra,64(sp)
   49358:	dc400f17 	ldw	r17,60(sp)
   4935c:	dc000e17 	ldw	r16,56(sp)
   49360:	dec01104 	addi	sp,sp,68
   49364:	f800283a 	ret

00049368 <__nedf2>:
   49368:	deffef04 	addi	sp,sp,-68
   4936c:	dc400f15 	stw	r17,60(sp)
   49370:	dc400404 	addi	r17,sp,16
   49374:	2005883a 	mov	r2,r4
   49378:	2807883a 	mov	r3,r5
   4937c:	dc000e15 	stw	r16,56(sp)
   49380:	d809883a 	mov	r4,sp
   49384:	880b883a 	mov	r5,r17
   49388:	dc000904 	addi	r16,sp,36
   4938c:	d8c00115 	stw	r3,4(sp)
   49390:	d8800015 	stw	r2,0(sp)
   49394:	d9800215 	stw	r6,8(sp)
   49398:	dfc01015 	stw	ra,64(sp)
   4939c:	d9c00315 	stw	r7,12(sp)
   493a0:	0049dcc0 	call	49dcc <__unpack_d>
   493a4:	d9000204 	addi	r4,sp,8
   493a8:	800b883a 	mov	r5,r16
   493ac:	0049dcc0 	call	49dcc <__unpack_d>
   493b0:	d8800417 	ldw	r2,16(sp)
   493b4:	00c00044 	movi	r3,1
   493b8:	180d883a 	mov	r6,r3
   493bc:	1880062e 	bgeu	r3,r2,493d8 <__nedf2+0x70>
   493c0:	d8800917 	ldw	r2,36(sp)
   493c4:	8809883a 	mov	r4,r17
   493c8:	800b883a 	mov	r5,r16
   493cc:	1880022e 	bgeu	r3,r2,493d8 <__nedf2+0x70>
   493d0:	0049f040 	call	49f04 <__fpcmp_parts_d>
   493d4:	100d883a 	mov	r6,r2
   493d8:	3005883a 	mov	r2,r6
   493dc:	dfc01017 	ldw	ra,64(sp)
   493e0:	dc400f17 	ldw	r17,60(sp)
   493e4:	dc000e17 	ldw	r16,56(sp)
   493e8:	dec01104 	addi	sp,sp,68
   493ec:	f800283a 	ret

000493f0 <__gtdf2>:
   493f0:	deffef04 	addi	sp,sp,-68
   493f4:	dc400f15 	stw	r17,60(sp)
   493f8:	dc400404 	addi	r17,sp,16
   493fc:	2005883a 	mov	r2,r4
   49400:	2807883a 	mov	r3,r5
   49404:	dc000e15 	stw	r16,56(sp)
   49408:	d809883a 	mov	r4,sp
   4940c:	880b883a 	mov	r5,r17
   49410:	dc000904 	addi	r16,sp,36
   49414:	d8c00115 	stw	r3,4(sp)
   49418:	d8800015 	stw	r2,0(sp)
   4941c:	d9800215 	stw	r6,8(sp)
   49420:	dfc01015 	stw	ra,64(sp)
   49424:	d9c00315 	stw	r7,12(sp)
   49428:	0049dcc0 	call	49dcc <__unpack_d>
   4942c:	d9000204 	addi	r4,sp,8
   49430:	800b883a 	mov	r5,r16
   49434:	0049dcc0 	call	49dcc <__unpack_d>
   49438:	d8800417 	ldw	r2,16(sp)
   4943c:	00c00044 	movi	r3,1
   49440:	01bfffc4 	movi	r6,-1
   49444:	1880062e 	bgeu	r3,r2,49460 <__gtdf2+0x70>
   49448:	d8800917 	ldw	r2,36(sp)
   4944c:	8809883a 	mov	r4,r17
   49450:	800b883a 	mov	r5,r16
   49454:	1880022e 	bgeu	r3,r2,49460 <__gtdf2+0x70>
   49458:	0049f040 	call	49f04 <__fpcmp_parts_d>
   4945c:	100d883a 	mov	r6,r2
   49460:	3005883a 	mov	r2,r6
   49464:	dfc01017 	ldw	ra,64(sp)
   49468:	dc400f17 	ldw	r17,60(sp)
   4946c:	dc000e17 	ldw	r16,56(sp)
   49470:	dec01104 	addi	sp,sp,68
   49474:	f800283a 	ret

00049478 <__gedf2>:
   49478:	deffef04 	addi	sp,sp,-68
   4947c:	dc400f15 	stw	r17,60(sp)
   49480:	dc400404 	addi	r17,sp,16
   49484:	2005883a 	mov	r2,r4
   49488:	2807883a 	mov	r3,r5
   4948c:	dc000e15 	stw	r16,56(sp)
   49490:	d809883a 	mov	r4,sp
   49494:	880b883a 	mov	r5,r17
   49498:	dc000904 	addi	r16,sp,36
   4949c:	d8c00115 	stw	r3,4(sp)
   494a0:	d8800015 	stw	r2,0(sp)
   494a4:	d9800215 	stw	r6,8(sp)
   494a8:	dfc01015 	stw	ra,64(sp)
   494ac:	d9c00315 	stw	r7,12(sp)
   494b0:	0049dcc0 	call	49dcc <__unpack_d>
   494b4:	d9000204 	addi	r4,sp,8
   494b8:	800b883a 	mov	r5,r16
   494bc:	0049dcc0 	call	49dcc <__unpack_d>
   494c0:	d8800417 	ldw	r2,16(sp)
   494c4:	00c00044 	movi	r3,1
   494c8:	01bfffc4 	movi	r6,-1
   494cc:	1880062e 	bgeu	r3,r2,494e8 <__gedf2+0x70>
   494d0:	d8800917 	ldw	r2,36(sp)
   494d4:	8809883a 	mov	r4,r17
   494d8:	800b883a 	mov	r5,r16
   494dc:	1880022e 	bgeu	r3,r2,494e8 <__gedf2+0x70>
   494e0:	0049f040 	call	49f04 <__fpcmp_parts_d>
   494e4:	100d883a 	mov	r6,r2
   494e8:	3005883a 	mov	r2,r6
   494ec:	dfc01017 	ldw	ra,64(sp)
   494f0:	dc400f17 	ldw	r17,60(sp)
   494f4:	dc000e17 	ldw	r16,56(sp)
   494f8:	dec01104 	addi	sp,sp,68
   494fc:	f800283a 	ret

00049500 <__ltdf2>:
   49500:	deffef04 	addi	sp,sp,-68
   49504:	dc400f15 	stw	r17,60(sp)
   49508:	dc400404 	addi	r17,sp,16
   4950c:	2005883a 	mov	r2,r4
   49510:	2807883a 	mov	r3,r5
   49514:	dc000e15 	stw	r16,56(sp)
   49518:	d809883a 	mov	r4,sp
   4951c:	880b883a 	mov	r5,r17
   49520:	dc000904 	addi	r16,sp,36
   49524:	d8c00115 	stw	r3,4(sp)
   49528:	d8800015 	stw	r2,0(sp)
   4952c:	d9800215 	stw	r6,8(sp)
   49530:	dfc01015 	stw	ra,64(sp)
   49534:	d9c00315 	stw	r7,12(sp)
   49538:	0049dcc0 	call	49dcc <__unpack_d>
   4953c:	d9000204 	addi	r4,sp,8
   49540:	800b883a 	mov	r5,r16
   49544:	0049dcc0 	call	49dcc <__unpack_d>
   49548:	d8800417 	ldw	r2,16(sp)
   4954c:	00c00044 	movi	r3,1
   49550:	180d883a 	mov	r6,r3
   49554:	1880062e 	bgeu	r3,r2,49570 <__ltdf2+0x70>
   49558:	d8800917 	ldw	r2,36(sp)
   4955c:	8809883a 	mov	r4,r17
   49560:	800b883a 	mov	r5,r16
   49564:	1880022e 	bgeu	r3,r2,49570 <__ltdf2+0x70>
   49568:	0049f040 	call	49f04 <__fpcmp_parts_d>
   4956c:	100d883a 	mov	r6,r2
   49570:	3005883a 	mov	r2,r6
   49574:	dfc01017 	ldw	ra,64(sp)
   49578:	dc400f17 	ldw	r17,60(sp)
   4957c:	dc000e17 	ldw	r16,56(sp)
   49580:	dec01104 	addi	sp,sp,68
   49584:	f800283a 	ret

00049588 <__floatsidf>:
   49588:	2006d7fa 	srli	r3,r4,31
   4958c:	defff604 	addi	sp,sp,-40
   49590:	008000c4 	movi	r2,3
   49594:	dfc00915 	stw	ra,36(sp)
   49598:	dcc00815 	stw	r19,32(sp)
   4959c:	dc800715 	stw	r18,28(sp)
   495a0:	dc400615 	stw	r17,24(sp)
   495a4:	dc000515 	stw	r16,20(sp)
   495a8:	d8800015 	stw	r2,0(sp)
   495ac:	d8c00115 	stw	r3,4(sp)
   495b0:	20000f1e 	bne	r4,zero,495f0 <__floatsidf+0x68>
   495b4:	00800084 	movi	r2,2
   495b8:	d8800015 	stw	r2,0(sp)
   495bc:	d809883a 	mov	r4,sp
   495c0:	0049ab80 	call	49ab8 <__pack_d>
   495c4:	1009883a 	mov	r4,r2
   495c8:	180b883a 	mov	r5,r3
   495cc:	2005883a 	mov	r2,r4
   495d0:	2807883a 	mov	r3,r5
   495d4:	dfc00917 	ldw	ra,36(sp)
   495d8:	dcc00817 	ldw	r19,32(sp)
   495dc:	dc800717 	ldw	r18,28(sp)
   495e0:	dc400617 	ldw	r17,24(sp)
   495e4:	dc000517 	ldw	r16,20(sp)
   495e8:	dec00a04 	addi	sp,sp,40
   495ec:	f800283a 	ret
   495f0:	00800f04 	movi	r2,60
   495f4:	1807003a 	cmpeq	r3,r3,zero
   495f8:	d8800215 	stw	r2,8(sp)
   495fc:	18001126 	beq	r3,zero,49644 <__floatsidf+0xbc>
   49600:	0027883a 	mov	r19,zero
   49604:	2025883a 	mov	r18,r4
   49608:	d9000315 	stw	r4,12(sp)
   4960c:	dcc00415 	stw	r19,16(sp)
   49610:	0049a380 	call	49a38 <__clzsi2>
   49614:	11000744 	addi	r4,r2,29
   49618:	013fe80e 	bge	zero,r4,495bc <__floatsidf+0x34>
   4961c:	10bfff44 	addi	r2,r2,-3
   49620:	10000c16 	blt	r2,zero,49654 <__floatsidf+0xcc>
   49624:	90a2983a 	sll	r17,r18,r2
   49628:	0021883a 	mov	r16,zero
   4962c:	d8800217 	ldw	r2,8(sp)
   49630:	dc400415 	stw	r17,16(sp)
   49634:	dc000315 	stw	r16,12(sp)
   49638:	1105c83a 	sub	r2,r2,r4
   4963c:	d8800215 	stw	r2,8(sp)
   49640:	003fde06 	br	495bc <__floatsidf+0x34>
   49644:	00a00034 	movhi	r2,32768
   49648:	20800a26 	beq	r4,r2,49674 <__floatsidf+0xec>
   4964c:	0109c83a 	sub	r4,zero,r4
   49650:	003feb06 	br	49600 <__floatsidf+0x78>
   49654:	9006d07a 	srli	r3,r18,1
   49658:	008007c4 	movi	r2,31
   4965c:	1105c83a 	sub	r2,r2,r4
   49660:	1886d83a 	srl	r3,r3,r2
   49664:	9922983a 	sll	r17,r19,r4
   49668:	9120983a 	sll	r16,r18,r4
   4966c:	1c62b03a 	or	r17,r3,r17
   49670:	003fee06 	br	4962c <__floatsidf+0xa4>
   49674:	0009883a 	mov	r4,zero
   49678:	01707834 	movhi	r5,49632
   4967c:	003fd306 	br	495cc <__floatsidf+0x44>

00049680 <__fixdfsi>:
   49680:	defff804 	addi	sp,sp,-32
   49684:	2005883a 	mov	r2,r4
   49688:	2807883a 	mov	r3,r5
   4968c:	d809883a 	mov	r4,sp
   49690:	d9400204 	addi	r5,sp,8
   49694:	d8c00115 	stw	r3,4(sp)
   49698:	d8800015 	stw	r2,0(sp)
   4969c:	dfc00715 	stw	ra,28(sp)
   496a0:	0049dcc0 	call	49dcc <__unpack_d>
   496a4:	d8c00217 	ldw	r3,8(sp)
   496a8:	00800084 	movi	r2,2
   496ac:	1880051e 	bne	r3,r2,496c4 <__fixdfsi+0x44>
   496b0:	0007883a 	mov	r3,zero
   496b4:	1805883a 	mov	r2,r3
   496b8:	dfc00717 	ldw	ra,28(sp)
   496bc:	dec00804 	addi	sp,sp,32
   496c0:	f800283a 	ret
   496c4:	00800044 	movi	r2,1
   496c8:	10fff92e 	bgeu	r2,r3,496b0 <__fixdfsi+0x30>
   496cc:	00800104 	movi	r2,4
   496d0:	18800426 	beq	r3,r2,496e4 <__fixdfsi+0x64>
   496d4:	d8c00417 	ldw	r3,16(sp)
   496d8:	183ff516 	blt	r3,zero,496b0 <__fixdfsi+0x30>
   496dc:	00800784 	movi	r2,30
   496e0:	10c0080e 	bge	r2,r3,49704 <__fixdfsi+0x84>
   496e4:	d8800317 	ldw	r2,12(sp)
   496e8:	1000121e 	bne	r2,zero,49734 <__fixdfsi+0xb4>
   496ec:	00e00034 	movhi	r3,32768
   496f0:	18ffffc4 	addi	r3,r3,-1
   496f4:	1805883a 	mov	r2,r3
   496f8:	dfc00717 	ldw	ra,28(sp)
   496fc:	dec00804 	addi	sp,sp,32
   49700:	f800283a 	ret
   49704:	00800f04 	movi	r2,60
   49708:	10d1c83a 	sub	r8,r2,r3
   4970c:	40bff804 	addi	r2,r8,-32
   49710:	d9800517 	ldw	r6,20(sp)
   49714:	d9c00617 	ldw	r7,24(sp)
   49718:	10000816 	blt	r2,zero,4973c <__fixdfsi+0xbc>
   4971c:	3888d83a 	srl	r4,r7,r2
   49720:	d8800317 	ldw	r2,12(sp)
   49724:	2007883a 	mov	r3,r4
   49728:	103fe226 	beq	r2,zero,496b4 <__fixdfsi+0x34>
   4972c:	0107c83a 	sub	r3,zero,r4
   49730:	003fe006 	br	496b4 <__fixdfsi+0x34>
   49734:	00e00034 	movhi	r3,32768
   49738:	003fde06 	br	496b4 <__fixdfsi+0x34>
   4973c:	39c7883a 	add	r3,r7,r7
   49740:	008007c4 	movi	r2,31
   49744:	1205c83a 	sub	r2,r2,r8
   49748:	1886983a 	sll	r3,r3,r2
   4974c:	3208d83a 	srl	r4,r6,r8
   49750:	1908b03a 	or	r4,r3,r4
   49754:	003ff206 	br	49720 <__fixdfsi+0xa0>

00049758 <__floatunsidf>:
   49758:	defff204 	addi	sp,sp,-56
   4975c:	dfc00d15 	stw	ra,52(sp)
   49760:	ddc00c15 	stw	r23,48(sp)
   49764:	dd800b15 	stw	r22,44(sp)
   49768:	dd400a15 	stw	r21,40(sp)
   4976c:	dd000915 	stw	r20,36(sp)
   49770:	dcc00815 	stw	r19,32(sp)
   49774:	dc800715 	stw	r18,28(sp)
   49778:	dc400615 	stw	r17,24(sp)
   4977c:	dc000515 	stw	r16,20(sp)
   49780:	d8000115 	stw	zero,4(sp)
   49784:	20000f1e 	bne	r4,zero,497c4 <__floatunsidf+0x6c>
   49788:	00800084 	movi	r2,2
   4978c:	d8800015 	stw	r2,0(sp)
   49790:	d809883a 	mov	r4,sp
   49794:	0049ab80 	call	49ab8 <__pack_d>
   49798:	dfc00d17 	ldw	ra,52(sp)
   4979c:	ddc00c17 	ldw	r23,48(sp)
   497a0:	dd800b17 	ldw	r22,44(sp)
   497a4:	dd400a17 	ldw	r21,40(sp)
   497a8:	dd000917 	ldw	r20,36(sp)
   497ac:	dcc00817 	ldw	r19,32(sp)
   497b0:	dc800717 	ldw	r18,28(sp)
   497b4:	dc400617 	ldw	r17,24(sp)
   497b8:	dc000517 	ldw	r16,20(sp)
   497bc:	dec00e04 	addi	sp,sp,56
   497c0:	f800283a 	ret
   497c4:	008000c4 	movi	r2,3
   497c8:	00c00f04 	movi	r3,60
   497cc:	002f883a 	mov	r23,zero
   497d0:	202d883a 	mov	r22,r4
   497d4:	d8800015 	stw	r2,0(sp)
   497d8:	d8c00215 	stw	r3,8(sp)
   497dc:	d9000315 	stw	r4,12(sp)
   497e0:	ddc00415 	stw	r23,16(sp)
   497e4:	0049a380 	call	49a38 <__clzsi2>
   497e8:	12400744 	addi	r9,r2,29
   497ec:	48000b16 	blt	r9,zero,4981c <__floatunsidf+0xc4>
   497f0:	483fe726 	beq	r9,zero,49790 <__floatunsidf+0x38>
   497f4:	10bfff44 	addi	r2,r2,-3
   497f8:	10002e16 	blt	r2,zero,498b4 <__floatunsidf+0x15c>
   497fc:	b0a2983a 	sll	r17,r22,r2
   49800:	0021883a 	mov	r16,zero
   49804:	d8800217 	ldw	r2,8(sp)
   49808:	dc400415 	stw	r17,16(sp)
   4980c:	dc000315 	stw	r16,12(sp)
   49810:	1245c83a 	sub	r2,r2,r9
   49814:	d8800215 	stw	r2,8(sp)
   49818:	003fdd06 	br	49790 <__floatunsidf+0x38>
   4981c:	0255c83a 	sub	r10,zero,r9
   49820:	51bff804 	addi	r6,r10,-32
   49824:	30001b16 	blt	r6,zero,49894 <__floatunsidf+0x13c>
   49828:	b9a8d83a 	srl	r20,r23,r6
   4982c:	002b883a 	mov	r21,zero
   49830:	000f883a 	mov	r7,zero
   49834:	01000044 	movi	r4,1
   49838:	0011883a 	mov	r8,zero
   4983c:	30002516 	blt	r6,zero,498d4 <__floatunsidf+0x17c>
   49840:	21a6983a 	sll	r19,r4,r6
   49844:	0025883a 	mov	r18,zero
   49848:	00bfffc4 	movi	r2,-1
   4984c:	9089883a 	add	r4,r18,r2
   49850:	988b883a 	add	r5,r19,r2
   49854:	248d803a 	cmpltu	r6,r4,r18
   49858:	314b883a 	add	r5,r6,r5
   4985c:	b104703a 	and	r2,r22,r4
   49860:	b946703a 	and	r3,r23,r5
   49864:	10c4b03a 	or	r2,r2,r3
   49868:	10000226 	beq	r2,zero,49874 <__floatunsidf+0x11c>
   4986c:	01c00044 	movi	r7,1
   49870:	0011883a 	mov	r8,zero
   49874:	d9000217 	ldw	r4,8(sp)
   49878:	a1c4b03a 	or	r2,r20,r7
   4987c:	aa06b03a 	or	r3,r21,r8
   49880:	2249c83a 	sub	r4,r4,r9
   49884:	d8c00415 	stw	r3,16(sp)
   49888:	d9000215 	stw	r4,8(sp)
   4988c:	d8800315 	stw	r2,12(sp)
   49890:	003fbf06 	br	49790 <__floatunsidf+0x38>
   49894:	bdc7883a 	add	r3,r23,r23
   49898:	008007c4 	movi	r2,31
   4989c:	1285c83a 	sub	r2,r2,r10
   498a0:	1886983a 	sll	r3,r3,r2
   498a4:	b2a8d83a 	srl	r20,r22,r10
   498a8:	baaad83a 	srl	r21,r23,r10
   498ac:	1d28b03a 	or	r20,r3,r20
   498b0:	003fdf06 	br	49830 <__floatunsidf+0xd8>
   498b4:	b006d07a 	srli	r3,r22,1
   498b8:	008007c4 	movi	r2,31
   498bc:	1245c83a 	sub	r2,r2,r9
   498c0:	1886d83a 	srl	r3,r3,r2
   498c4:	ba62983a 	sll	r17,r23,r9
   498c8:	b260983a 	sll	r16,r22,r9
   498cc:	1c62b03a 	or	r17,r3,r17
   498d0:	003fcc06 	br	49804 <__floatunsidf+0xac>
   498d4:	2006d07a 	srli	r3,r4,1
   498d8:	008007c4 	movi	r2,31
   498dc:	1285c83a 	sub	r2,r2,r10
   498e0:	18a6d83a 	srl	r19,r3,r2
   498e4:	22a4983a 	sll	r18,r4,r10
   498e8:	003fd706 	br	49848 <__floatunsidf+0xf0>

000498ec <udivmodsi4>:
   498ec:	29001b2e 	bgeu	r5,r4,4995c <udivmodsi4+0x70>
   498f0:	28001a16 	blt	r5,zero,4995c <udivmodsi4+0x70>
   498f4:	00800044 	movi	r2,1
   498f8:	0007883a 	mov	r3,zero
   498fc:	01c007c4 	movi	r7,31
   49900:	00000306 	br	49910 <udivmodsi4+0x24>
   49904:	19c01326 	beq	r3,r7,49954 <udivmodsi4+0x68>
   49908:	18c00044 	addi	r3,r3,1
   4990c:	28000416 	blt	r5,zero,49920 <udivmodsi4+0x34>
   49910:	294b883a 	add	r5,r5,r5
   49914:	1085883a 	add	r2,r2,r2
   49918:	293ffa36 	bltu	r5,r4,49904 <udivmodsi4+0x18>
   4991c:	10000d26 	beq	r2,zero,49954 <udivmodsi4+0x68>
   49920:	0007883a 	mov	r3,zero
   49924:	21400236 	bltu	r4,r5,49930 <udivmodsi4+0x44>
   49928:	2149c83a 	sub	r4,r4,r5
   4992c:	1886b03a 	or	r3,r3,r2
   49930:	1004d07a 	srli	r2,r2,1
   49934:	280ad07a 	srli	r5,r5,1
   49938:	103ffa1e 	bne	r2,zero,49924 <udivmodsi4+0x38>
   4993c:	30000226 	beq	r6,zero,49948 <udivmodsi4+0x5c>
   49940:	2005883a 	mov	r2,r4
   49944:	f800283a 	ret
   49948:	1809883a 	mov	r4,r3
   4994c:	2005883a 	mov	r2,r4
   49950:	f800283a 	ret
   49954:	0007883a 	mov	r3,zero
   49958:	003ff806 	br	4993c <udivmodsi4+0x50>
   4995c:	00800044 	movi	r2,1
   49960:	0007883a 	mov	r3,zero
   49964:	003fef06 	br	49924 <udivmodsi4+0x38>

00049968 <__divsi3>:
   49968:	defffe04 	addi	sp,sp,-8
   4996c:	dc000015 	stw	r16,0(sp)
   49970:	dfc00115 	stw	ra,4(sp)
   49974:	0021883a 	mov	r16,zero
   49978:	20000c16 	blt	r4,zero,499ac <__divsi3+0x44>
   4997c:	000d883a 	mov	r6,zero
   49980:	28000e16 	blt	r5,zero,499bc <__divsi3+0x54>
   49984:	00498ec0 	call	498ec <udivmodsi4>
   49988:	1007883a 	mov	r3,r2
   4998c:	8005003a 	cmpeq	r2,r16,zero
   49990:	1000011e 	bne	r2,zero,49998 <__divsi3+0x30>
   49994:	00c7c83a 	sub	r3,zero,r3
   49998:	1805883a 	mov	r2,r3
   4999c:	dfc00117 	ldw	ra,4(sp)
   499a0:	dc000017 	ldw	r16,0(sp)
   499a4:	dec00204 	addi	sp,sp,8
   499a8:	f800283a 	ret
   499ac:	0109c83a 	sub	r4,zero,r4
   499b0:	04000044 	movi	r16,1
   499b4:	000d883a 	mov	r6,zero
   499b8:	283ff20e 	bge	r5,zero,49984 <__divsi3+0x1c>
   499bc:	014bc83a 	sub	r5,zero,r5
   499c0:	8021003a 	cmpeq	r16,r16,zero
   499c4:	003fef06 	br	49984 <__divsi3+0x1c>

000499c8 <__modsi3>:
   499c8:	deffff04 	addi	sp,sp,-4
   499cc:	dfc00015 	stw	ra,0(sp)
   499d0:	01800044 	movi	r6,1
   499d4:	2807883a 	mov	r3,r5
   499d8:	20000416 	blt	r4,zero,499ec <__modsi3+0x24>
   499dc:	28000c16 	blt	r5,zero,49a10 <__modsi3+0x48>
   499e0:	dfc00017 	ldw	ra,0(sp)
   499e4:	dec00104 	addi	sp,sp,4
   499e8:	00498ec1 	jmpi	498ec <udivmodsi4>
   499ec:	0109c83a 	sub	r4,zero,r4
   499f0:	28000b16 	blt	r5,zero,49a20 <__modsi3+0x58>
   499f4:	180b883a 	mov	r5,r3
   499f8:	01800044 	movi	r6,1
   499fc:	00498ec0 	call	498ec <udivmodsi4>
   49a00:	0085c83a 	sub	r2,zero,r2
   49a04:	dfc00017 	ldw	ra,0(sp)
   49a08:	dec00104 	addi	sp,sp,4
   49a0c:	f800283a 	ret
   49a10:	014bc83a 	sub	r5,zero,r5
   49a14:	dfc00017 	ldw	ra,0(sp)
   49a18:	dec00104 	addi	sp,sp,4
   49a1c:	00498ec1 	jmpi	498ec <udivmodsi4>
   49a20:	0147c83a 	sub	r3,zero,r5
   49a24:	003ff306 	br	499f4 <__modsi3+0x2c>

00049a28 <__udivsi3>:
   49a28:	000d883a 	mov	r6,zero
   49a2c:	00498ec1 	jmpi	498ec <udivmodsi4>

00049a30 <__umodsi3>:
   49a30:	01800044 	movi	r6,1
   49a34:	00498ec1 	jmpi	498ec <udivmodsi4>

00049a38 <__clzsi2>:
   49a38:	00bfffd4 	movui	r2,65535
   49a3c:	11000e36 	bltu	r2,r4,49a78 <__clzsi2+0x40>
   49a40:	00803fc4 	movi	r2,255
   49a44:	01400204 	movi	r5,8
   49a48:	0007883a 	mov	r3,zero
   49a4c:	11001036 	bltu	r2,r4,49a90 <__clzsi2+0x58>
   49a50:	000b883a 	mov	r5,zero
   49a54:	20c6d83a 	srl	r3,r4,r3
   49a58:	00900034 	movhi	r2,16384
   49a5c:	10809604 	addi	r2,r2,600
   49a60:	1887883a 	add	r3,r3,r2
   49a64:	18800003 	ldbu	r2,0(r3)
   49a68:	00c00804 	movi	r3,32
   49a6c:	2885883a 	add	r2,r5,r2
   49a70:	1885c83a 	sub	r2,r3,r2
   49a74:	f800283a 	ret
   49a78:	01400404 	movi	r5,16
   49a7c:	00804034 	movhi	r2,256
   49a80:	10bfffc4 	addi	r2,r2,-1
   49a84:	2807883a 	mov	r3,r5
   49a88:	113ff22e 	bgeu	r2,r4,49a54 <__clzsi2+0x1c>
   49a8c:	01400604 	movi	r5,24
   49a90:	2807883a 	mov	r3,r5
   49a94:	20c6d83a 	srl	r3,r4,r3
   49a98:	00900034 	movhi	r2,16384
   49a9c:	10809604 	addi	r2,r2,600
   49aa0:	1887883a 	add	r3,r3,r2
   49aa4:	18800003 	ldbu	r2,0(r3)
   49aa8:	00c00804 	movi	r3,32
   49aac:	2885883a 	add	r2,r5,r2
   49ab0:	1885c83a 	sub	r2,r3,r2
   49ab4:	f800283a 	ret

00049ab8 <__pack_d>:
   49ab8:	20c00017 	ldw	r3,0(r4)
   49abc:	defffd04 	addi	sp,sp,-12
   49ac0:	dc000015 	stw	r16,0(sp)
   49ac4:	dc800215 	stw	r18,8(sp)
   49ac8:	dc400115 	stw	r17,4(sp)
   49acc:	00800044 	movi	r2,1
   49ad0:	22000317 	ldw	r8,12(r4)
   49ad4:	001f883a 	mov	r15,zero
   49ad8:	22400417 	ldw	r9,16(r4)
   49adc:	24000117 	ldw	r16,4(r4)
   49ae0:	10c0552e 	bgeu	r2,r3,49c38 <__pack_d+0x180>
   49ae4:	00800104 	movi	r2,4
   49ae8:	18804f26 	beq	r3,r2,49c28 <__pack_d+0x170>
   49aec:	00800084 	movi	r2,2
   49af0:	18800226 	beq	r3,r2,49afc <__pack_d+0x44>
   49af4:	4244b03a 	or	r2,r8,r9
   49af8:	10001a1e 	bne	r2,zero,49b64 <__pack_d+0xac>
   49afc:	000d883a 	mov	r6,zero
   49b00:	000f883a 	mov	r7,zero
   49b04:	0011883a 	mov	r8,zero
   49b08:	00800434 	movhi	r2,16
   49b0c:	10bfffc4 	addi	r2,r2,-1
   49b10:	301d883a 	mov	r14,r6
   49b14:	3884703a 	and	r2,r7,r2
   49b18:	400a953a 	slli	r5,r8,20
   49b1c:	79bffc2c 	andhi	r6,r15,65520
   49b20:	308cb03a 	or	r6,r6,r2
   49b24:	00e00434 	movhi	r3,32784
   49b28:	18ffffc4 	addi	r3,r3,-1
   49b2c:	800497fa 	slli	r2,r16,31
   49b30:	30c6703a 	and	r3,r6,r3
   49b34:	1946b03a 	or	r3,r3,r5
   49b38:	01600034 	movhi	r5,32768
   49b3c:	297fffc4 	addi	r5,r5,-1
   49b40:	194a703a 	and	r5,r3,r5
   49b44:	288ab03a 	or	r5,r5,r2
   49b48:	2807883a 	mov	r3,r5
   49b4c:	7005883a 	mov	r2,r14
   49b50:	dc800217 	ldw	r18,8(sp)
   49b54:	dc400117 	ldw	r17,4(sp)
   49b58:	dc000017 	ldw	r16,0(sp)
   49b5c:	dec00304 	addi	sp,sp,12
   49b60:	f800283a 	ret
   49b64:	21000217 	ldw	r4,8(r4)
   49b68:	00bf0084 	movi	r2,-1022
   49b6c:	20803f16 	blt	r4,r2,49c6c <__pack_d+0x1b4>
   49b70:	0080ffc4 	movi	r2,1023
   49b74:	11002c16 	blt	r2,r4,49c28 <__pack_d+0x170>
   49b78:	00803fc4 	movi	r2,255
   49b7c:	408c703a 	and	r6,r8,r2
   49b80:	00802004 	movi	r2,128
   49b84:	0007883a 	mov	r3,zero
   49b88:	000f883a 	mov	r7,zero
   49b8c:	2280ffc4 	addi	r10,r4,1023
   49b90:	30801e26 	beq	r6,r2,49c0c <__pack_d+0x154>
   49b94:	00801fc4 	movi	r2,127
   49b98:	4089883a 	add	r4,r8,r2
   49b9c:	220d803a 	cmpltu	r6,r4,r8
   49ba0:	324d883a 	add	r6,r6,r9
   49ba4:	2011883a 	mov	r8,r4
   49ba8:	3013883a 	mov	r9,r6
   49bac:	00880034 	movhi	r2,8192
   49bb0:	10bfffc4 	addi	r2,r2,-1
   49bb4:	12400d36 	bltu	r2,r9,49bec <__pack_d+0x134>
   49bb8:	4804963a 	slli	r2,r9,24
   49bbc:	400cd23a 	srli	r6,r8,8
   49bc0:	480ed23a 	srli	r7,r9,8
   49bc4:	013fffc4 	movi	r4,-1
   49bc8:	118cb03a 	or	r6,r2,r6
   49bcc:	01400434 	movhi	r5,16
   49bd0:	297fffc4 	addi	r5,r5,-1
   49bd4:	3104703a 	and	r2,r6,r4
   49bd8:	3946703a 	and	r3,r7,r5
   49bdc:	5201ffcc 	andi	r8,r10,2047
   49be0:	100d883a 	mov	r6,r2
   49be4:	180f883a 	mov	r7,r3
   49be8:	003fc706 	br	49b08 <__pack_d+0x50>
   49bec:	480897fa 	slli	r4,r9,31
   49bf0:	4004d07a 	srli	r2,r8,1
   49bf4:	4806d07a 	srli	r3,r9,1
   49bf8:	52800044 	addi	r10,r10,1
   49bfc:	2084b03a 	or	r2,r4,r2
   49c00:	1011883a 	mov	r8,r2
   49c04:	1813883a 	mov	r9,r3
   49c08:	003feb06 	br	49bb8 <__pack_d+0x100>
   49c0c:	383fe11e 	bne	r7,zero,49b94 <__pack_d+0xdc>
   49c10:	01004004 	movi	r4,256
   49c14:	4104703a 	and	r2,r8,r4
   49c18:	10c4b03a 	or	r2,r2,r3
   49c1c:	103fe326 	beq	r2,zero,49bac <__pack_d+0xf4>
   49c20:	3005883a 	mov	r2,r6
   49c24:	003fdc06 	br	49b98 <__pack_d+0xe0>
   49c28:	000d883a 	mov	r6,zero
   49c2c:	000f883a 	mov	r7,zero
   49c30:	0201ffc4 	movi	r8,2047
   49c34:	003fb406 	br	49b08 <__pack_d+0x50>
   49c38:	0005883a 	mov	r2,zero
   49c3c:	00c00234 	movhi	r3,8
   49c40:	408cb03a 	or	r6,r8,r2
   49c44:	48ceb03a 	or	r7,r9,r3
   49c48:	013fffc4 	movi	r4,-1
   49c4c:	01400434 	movhi	r5,16
   49c50:	297fffc4 	addi	r5,r5,-1
   49c54:	3104703a 	and	r2,r6,r4
   49c58:	3946703a 	and	r3,r7,r5
   49c5c:	100d883a 	mov	r6,r2
   49c60:	180f883a 	mov	r7,r3
   49c64:	0201ffc4 	movi	r8,2047
   49c68:	003fa706 	br	49b08 <__pack_d+0x50>
   49c6c:	1109c83a 	sub	r4,r2,r4
   49c70:	00800e04 	movi	r2,56
   49c74:	11004316 	blt	r2,r4,49d84 <__pack_d+0x2cc>
   49c78:	21fff804 	addi	r7,r4,-32
   49c7c:	38004516 	blt	r7,zero,49d94 <__pack_d+0x2dc>
   49c80:	49d8d83a 	srl	r12,r9,r7
   49c84:	001b883a 	mov	r13,zero
   49c88:	0023883a 	mov	r17,zero
   49c8c:	01400044 	movi	r5,1
   49c90:	0025883a 	mov	r18,zero
   49c94:	38004716 	blt	r7,zero,49db4 <__pack_d+0x2fc>
   49c98:	29d6983a 	sll	r11,r5,r7
   49c9c:	0015883a 	mov	r10,zero
   49ca0:	00bfffc4 	movi	r2,-1
   49ca4:	5089883a 	add	r4,r10,r2
   49ca8:	588b883a 	add	r5,r11,r2
   49cac:	228d803a 	cmpltu	r6,r4,r10
   49cb0:	314b883a 	add	r5,r6,r5
   49cb4:	4104703a 	and	r2,r8,r4
   49cb8:	4946703a 	and	r3,r9,r5
   49cbc:	10c4b03a 	or	r2,r2,r3
   49cc0:	10000226 	beq	r2,zero,49ccc <__pack_d+0x214>
   49cc4:	04400044 	movi	r17,1
   49cc8:	0025883a 	mov	r18,zero
   49ccc:	00803fc4 	movi	r2,255
   49cd0:	644eb03a 	or	r7,r12,r17
   49cd4:	3892703a 	and	r9,r7,r2
   49cd8:	00802004 	movi	r2,128
   49cdc:	6c90b03a 	or	r8,r13,r18
   49ce0:	0015883a 	mov	r10,zero
   49ce4:	48801626 	beq	r9,r2,49d40 <__pack_d+0x288>
   49ce8:	01001fc4 	movi	r4,127
   49cec:	3905883a 	add	r2,r7,r4
   49cf0:	11cd803a 	cmpltu	r6,r2,r7
   49cf4:	320d883a 	add	r6,r6,r8
   49cf8:	100f883a 	mov	r7,r2
   49cfc:	00840034 	movhi	r2,4096
   49d00:	10bfffc4 	addi	r2,r2,-1
   49d04:	3011883a 	mov	r8,r6
   49d08:	0007883a 	mov	r3,zero
   49d0c:	11801b36 	bltu	r2,r6,49d7c <__pack_d+0x2c4>
   49d10:	4004963a 	slli	r2,r8,24
   49d14:	3808d23a 	srli	r4,r7,8
   49d18:	400ad23a 	srli	r5,r8,8
   49d1c:	1813883a 	mov	r9,r3
   49d20:	1108b03a 	or	r4,r2,r4
   49d24:	00bfffc4 	movi	r2,-1
   49d28:	00c00434 	movhi	r3,16
   49d2c:	18ffffc4 	addi	r3,r3,-1
   49d30:	208c703a 	and	r6,r4,r2
   49d34:	28ce703a 	and	r7,r5,r3
   49d38:	4a01ffcc 	andi	r8,r9,2047
   49d3c:	003f7206 	br	49b08 <__pack_d+0x50>
   49d40:	503fe91e 	bne	r10,zero,49ce8 <__pack_d+0x230>
   49d44:	01004004 	movi	r4,256
   49d48:	3904703a 	and	r2,r7,r4
   49d4c:	0007883a 	mov	r3,zero
   49d50:	10c4b03a 	or	r2,r2,r3
   49d54:	10000626 	beq	r2,zero,49d70 <__pack_d+0x2b8>
   49d58:	3a45883a 	add	r2,r7,r9
   49d5c:	11cd803a 	cmpltu	r6,r2,r7
   49d60:	320d883a 	add	r6,r6,r8
   49d64:	100f883a 	mov	r7,r2
   49d68:	3011883a 	mov	r8,r6
   49d6c:	0007883a 	mov	r3,zero
   49d70:	00840034 	movhi	r2,4096
   49d74:	10bfffc4 	addi	r2,r2,-1
   49d78:	123fe52e 	bgeu	r2,r8,49d10 <__pack_d+0x258>
   49d7c:	00c00044 	movi	r3,1
   49d80:	003fe306 	br	49d10 <__pack_d+0x258>
   49d84:	0009883a 	mov	r4,zero
   49d88:	0013883a 	mov	r9,zero
   49d8c:	000b883a 	mov	r5,zero
   49d90:	003fe406 	br	49d24 <__pack_d+0x26c>
   49d94:	4a47883a 	add	r3,r9,r9
   49d98:	008007c4 	movi	r2,31
   49d9c:	1105c83a 	sub	r2,r2,r4
   49da0:	1886983a 	sll	r3,r3,r2
   49da4:	4118d83a 	srl	r12,r8,r4
   49da8:	491ad83a 	srl	r13,r9,r4
   49dac:	1b18b03a 	or	r12,r3,r12
   49db0:	003fb506 	br	49c88 <__pack_d+0x1d0>
   49db4:	2806d07a 	srli	r3,r5,1
   49db8:	008007c4 	movi	r2,31
   49dbc:	1105c83a 	sub	r2,r2,r4
   49dc0:	1896d83a 	srl	r11,r3,r2
   49dc4:	2914983a 	sll	r10,r5,r4
   49dc8:	003fb506 	br	49ca0 <__pack_d+0x1e8>

00049dcc <__unpack_d>:
   49dcc:	20c00117 	ldw	r3,4(r4)
   49dd0:	22400017 	ldw	r9,0(r4)
   49dd4:	00800434 	movhi	r2,16
   49dd8:	10bfffc4 	addi	r2,r2,-1
   49ddc:	1808d53a 	srli	r4,r3,20
   49de0:	180cd7fa 	srli	r6,r3,31
   49de4:	1894703a 	and	r10,r3,r2
   49de8:	2201ffcc 	andi	r8,r4,2047
   49dec:	281b883a 	mov	r13,r5
   49df0:	4817883a 	mov	r11,r9
   49df4:	29800115 	stw	r6,4(r5)
   49df8:	5019883a 	mov	r12,r10
   49dfc:	40001e1e 	bne	r8,zero,49e78 <__unpack_d+0xac>
   49e00:	4a84b03a 	or	r2,r9,r10
   49e04:	10001926 	beq	r2,zero,49e6c <__unpack_d+0xa0>
   49e08:	4804d63a 	srli	r2,r9,24
   49e0c:	500c923a 	slli	r6,r10,8
   49e10:	013f0084 	movi	r4,-1022
   49e14:	00c40034 	movhi	r3,4096
   49e18:	18ffffc4 	addi	r3,r3,-1
   49e1c:	118cb03a 	or	r6,r2,r6
   49e20:	008000c4 	movi	r2,3
   49e24:	480a923a 	slli	r5,r9,8
   49e28:	68800015 	stw	r2,0(r13)
   49e2c:	69000215 	stw	r4,8(r13)
   49e30:	19800b36 	bltu	r3,r6,49e60 <__unpack_d+0x94>
   49e34:	200f883a 	mov	r7,r4
   49e38:	1811883a 	mov	r8,r3
   49e3c:	2945883a 	add	r2,r5,r5
   49e40:	1149803a 	cmpltu	r4,r2,r5
   49e44:	3187883a 	add	r3,r6,r6
   49e48:	20c9883a 	add	r4,r4,r3
   49e4c:	100b883a 	mov	r5,r2
   49e50:	200d883a 	mov	r6,r4
   49e54:	39ffffc4 	addi	r7,r7,-1
   49e58:	413ff82e 	bgeu	r8,r4,49e3c <__unpack_d+0x70>
   49e5c:	69c00215 	stw	r7,8(r13)
   49e60:	69800415 	stw	r6,16(r13)
   49e64:	69400315 	stw	r5,12(r13)
   49e68:	f800283a 	ret
   49e6c:	00800084 	movi	r2,2
   49e70:	28800015 	stw	r2,0(r5)
   49e74:	f800283a 	ret
   49e78:	0081ffc4 	movi	r2,2047
   49e7c:	40800f26 	beq	r8,r2,49ebc <__unpack_d+0xf0>
   49e80:	480cd63a 	srli	r6,r9,24
   49e84:	5006923a 	slli	r3,r10,8
   49e88:	4804923a 	slli	r2,r9,8
   49e8c:	0009883a 	mov	r4,zero
   49e90:	30c6b03a 	or	r3,r6,r3
   49e94:	01440034 	movhi	r5,4096
   49e98:	110cb03a 	or	r6,r2,r4
   49e9c:	423f0044 	addi	r8,r8,-1023
   49ea0:	194eb03a 	or	r7,r3,r5
   49ea4:	008000c4 	movi	r2,3
   49ea8:	69c00415 	stw	r7,16(r13)
   49eac:	6a000215 	stw	r8,8(r13)
   49eb0:	68800015 	stw	r2,0(r13)
   49eb4:	69800315 	stw	r6,12(r13)
   49eb8:	f800283a 	ret
   49ebc:	4a84b03a 	or	r2,r9,r10
   49ec0:	1000031e 	bne	r2,zero,49ed0 <__unpack_d+0x104>
   49ec4:	00800104 	movi	r2,4
   49ec8:	28800015 	stw	r2,0(r5)
   49ecc:	f800283a 	ret
   49ed0:	0009883a 	mov	r4,zero
   49ed4:	01400234 	movhi	r5,8
   49ed8:	4904703a 	and	r2,r9,r4
   49edc:	5146703a 	and	r3,r10,r5
   49ee0:	10c4b03a 	or	r2,r2,r3
   49ee4:	10000526 	beq	r2,zero,49efc <__unpack_d+0x130>
   49ee8:	00800044 	movi	r2,1
   49eec:	68800015 	stw	r2,0(r13)
   49ef0:	6b000415 	stw	r12,16(r13)
   49ef4:	6ac00315 	stw	r11,12(r13)
   49ef8:	f800283a 	ret
   49efc:	68000015 	stw	zero,0(r13)
   49f00:	003ffb06 	br	49ef0 <__unpack_d+0x124>

00049f04 <__fpcmp_parts_d>:
   49f04:	21800017 	ldw	r6,0(r4)
   49f08:	00c00044 	movi	r3,1
   49f0c:	19800a2e 	bgeu	r3,r6,49f38 <__fpcmp_parts_d+0x34>
   49f10:	28800017 	ldw	r2,0(r5)
   49f14:	1880082e 	bgeu	r3,r2,49f38 <__fpcmp_parts_d+0x34>
   49f18:	00c00104 	movi	r3,4
   49f1c:	30c02626 	beq	r6,r3,49fb8 <__fpcmp_parts_d+0xb4>
   49f20:	10c02226 	beq	r2,r3,49fac <__fpcmp_parts_d+0xa8>
   49f24:	00c00084 	movi	r3,2
   49f28:	30c00526 	beq	r6,r3,49f40 <__fpcmp_parts_d+0x3c>
   49f2c:	10c0071e 	bne	r2,r3,49f4c <__fpcmp_parts_d+0x48>
   49f30:	20800117 	ldw	r2,4(r4)
   49f34:	1000091e 	bne	r2,zero,49f5c <__fpcmp_parts_d+0x58>
   49f38:	00800044 	movi	r2,1
   49f3c:	f800283a 	ret
   49f40:	10c01a1e 	bne	r2,r3,49fac <__fpcmp_parts_d+0xa8>
   49f44:	0005883a 	mov	r2,zero
   49f48:	f800283a 	ret
   49f4c:	22000117 	ldw	r8,4(r4)
   49f50:	28800117 	ldw	r2,4(r5)
   49f54:	40800326 	beq	r8,r2,49f64 <__fpcmp_parts_d+0x60>
   49f58:	403ff726 	beq	r8,zero,49f38 <__fpcmp_parts_d+0x34>
   49f5c:	00bfffc4 	movi	r2,-1
   49f60:	f800283a 	ret
   49f64:	20c00217 	ldw	r3,8(r4)
   49f68:	28800217 	ldw	r2,8(r5)
   49f6c:	10fffa16 	blt	r2,r3,49f58 <__fpcmp_parts_d+0x54>
   49f70:	18800916 	blt	r3,r2,49f98 <__fpcmp_parts_d+0x94>
   49f74:	21c00417 	ldw	r7,16(r4)
   49f78:	28c00417 	ldw	r3,16(r5)
   49f7c:	21800317 	ldw	r6,12(r4)
   49f80:	28800317 	ldw	r2,12(r5)
   49f84:	19fff436 	bltu	r3,r7,49f58 <__fpcmp_parts_d+0x54>
   49f88:	38c00526 	beq	r7,r3,49fa0 <__fpcmp_parts_d+0x9c>
   49f8c:	38c00236 	bltu	r7,r3,49f98 <__fpcmp_parts_d+0x94>
   49f90:	19ffec1e 	bne	r3,r7,49f44 <__fpcmp_parts_d+0x40>
   49f94:	30bfeb2e 	bgeu	r6,r2,49f44 <__fpcmp_parts_d+0x40>
   49f98:	403fe71e 	bne	r8,zero,49f38 <__fpcmp_parts_d+0x34>
   49f9c:	003fef06 	br	49f5c <__fpcmp_parts_d+0x58>
   49fa0:	11bffa2e 	bgeu	r2,r6,49f8c <__fpcmp_parts_d+0x88>
   49fa4:	403fe426 	beq	r8,zero,49f38 <__fpcmp_parts_d+0x34>
   49fa8:	003fec06 	br	49f5c <__fpcmp_parts_d+0x58>
   49fac:	28800117 	ldw	r2,4(r5)
   49fb0:	103fe11e 	bne	r2,zero,49f38 <__fpcmp_parts_d+0x34>
   49fb4:	003fe906 	br	49f5c <__fpcmp_parts_d+0x58>
   49fb8:	11bfdd1e 	bne	r2,r6,49f30 <__fpcmp_parts_d+0x2c>
   49fbc:	28c00117 	ldw	r3,4(r5)
   49fc0:	20800117 	ldw	r2,4(r4)
   49fc4:	1885c83a 	sub	r2,r3,r2
   49fc8:	f800283a 	ret

00049fcc <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   49fcc:	defff804 	addi	sp,sp,-32
   49fd0:	dfc00715 	stw	ra,28(sp)
   49fd4:	df000615 	stw	fp,24(sp)
   49fd8:	df000604 	addi	fp,sp,24
   49fdc:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   49fe0:	e0bffc17 	ldw	r2,-16(fp)
   49fe4:	1004803a 	cmplt	r2,r2,zero
   49fe8:	1000081e 	bne	r2,zero,4a00c <close+0x40>
   49fec:	e0bffc17 	ldw	r2,-16(fp)
   49ff0:	10800324 	muli	r2,r2,12
   49ff4:	1007883a 	mov	r3,r2
   49ff8:	00900034 	movhi	r2,16384
   49ffc:	1082f004 	addi	r2,r2,3008
   4a000:	1887883a 	add	r3,r3,r2
   4a004:	e0ffff15 	stw	r3,-4(fp)
   4a008:	00000106 	br	4a010 <close+0x44>
   4a00c:	e03fff15 	stw	zero,-4(fp)
   4a010:	e0bfff17 	ldw	r2,-4(fp)
   4a014:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
   4a018:	e0bffb17 	ldw	r2,-20(fp)
   4a01c:	1005003a 	cmpeq	r2,r2,zero
   4a020:	10001d1e 	bne	r2,zero,4a098 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   4a024:	e0bffb17 	ldw	r2,-20(fp)
   4a028:	10800017 	ldw	r2,0(r2)
   4a02c:	10800417 	ldw	r2,16(r2)
   4a030:	1005003a 	cmpeq	r2,r2,zero
   4a034:	1000071e 	bne	r2,zero,4a054 <close+0x88>
   4a038:	e0bffb17 	ldw	r2,-20(fp)
   4a03c:	10800017 	ldw	r2,0(r2)
   4a040:	10800417 	ldw	r2,16(r2)
   4a044:	e13ffb17 	ldw	r4,-20(fp)
   4a048:	103ee83a 	callr	r2
   4a04c:	e0bffe15 	stw	r2,-8(fp)
   4a050:	00000106 	br	4a058 <close+0x8c>
   4a054:	e03ffe15 	stw	zero,-8(fp)
   4a058:	e0bffe17 	ldw	r2,-8(fp)
   4a05c:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   4a060:	e13ffc17 	ldw	r4,-16(fp)
   4a064:	004a8100 	call	4a810 <alt_release_fd>
    if (rval < 0)
   4a068:	e0bffa17 	ldw	r2,-24(fp)
   4a06c:	1004403a 	cmpge	r2,r2,zero
   4a070:	1000071e 	bne	r2,zero,4a090 <close+0xc4>
    {
      ALT_ERRNO = -rval;
   4a074:	004a0c80 	call	4a0c8 <alt_get_errno>
   4a078:	e0fffa17 	ldw	r3,-24(fp)
   4a07c:	00c7c83a 	sub	r3,zero,r3
   4a080:	10c00015 	stw	r3,0(r2)
      return -1;
   4a084:	00bfffc4 	movi	r2,-1
   4a088:	e0bffd15 	stw	r2,-12(fp)
   4a08c:	00000806 	br	4a0b0 <close+0xe4>
    }
    return 0;
   4a090:	e03ffd15 	stw	zero,-12(fp)
   4a094:	00000606 	br	4a0b0 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   4a098:	004a0c80 	call	4a0c8 <alt_get_errno>
   4a09c:	1007883a 	mov	r3,r2
   4a0a0:	00801444 	movi	r2,81
   4a0a4:	18800015 	stw	r2,0(r3)
    return -1;
   4a0a8:	00bfffc4 	movi	r2,-1
   4a0ac:	e0bffd15 	stw	r2,-12(fp)
   4a0b0:	e0bffd17 	ldw	r2,-12(fp)
  }
}
   4a0b4:	e037883a 	mov	sp,fp
   4a0b8:	dfc00117 	ldw	ra,4(sp)
   4a0bc:	df000017 	ldw	fp,0(sp)
   4a0c0:	dec00204 	addi	sp,sp,8
   4a0c4:	f800283a 	ret

0004a0c8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4a0c8:	defffd04 	addi	sp,sp,-12
   4a0cc:	dfc00215 	stw	ra,8(sp)
   4a0d0:	df000115 	stw	fp,4(sp)
   4a0d4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   4a0d8:	00900034 	movhi	r2,16384
   4a0dc:	10877304 	addi	r2,r2,7628
   4a0e0:	10800017 	ldw	r2,0(r2)
   4a0e4:	1005003a 	cmpeq	r2,r2,zero
   4a0e8:	1000061e 	bne	r2,zero,4a104 <alt_get_errno+0x3c>
   4a0ec:	00900034 	movhi	r2,16384
   4a0f0:	10877304 	addi	r2,r2,7628
   4a0f4:	10800017 	ldw	r2,0(r2)
   4a0f8:	103ee83a 	callr	r2
   4a0fc:	e0bfff15 	stw	r2,-4(fp)
   4a100:	00000306 	br	4a110 <alt_get_errno+0x48>
   4a104:	00900034 	movhi	r2,16384
   4a108:	10878004 	addi	r2,r2,7680
   4a10c:	e0bfff15 	stw	r2,-4(fp)
   4a110:	e0bfff17 	ldw	r2,-4(fp)
}
   4a114:	e037883a 	mov	sp,fp
   4a118:	dfc00117 	ldw	ra,4(sp)
   4a11c:	df000017 	ldw	fp,0(sp)
   4a120:	dec00204 	addi	sp,sp,8
   4a124:	f800283a 	ret

0004a128 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   4a128:	defffc04 	addi	sp,sp,-16
   4a12c:	df000315 	stw	fp,12(sp)
   4a130:	df000304 	addi	fp,sp,12
   4a134:	e13ffd15 	stw	r4,-12(fp)
   4a138:	e17ffe15 	stw	r5,-8(fp)
   4a13c:	e1bfff15 	stw	r6,-4(fp)
  return len;
   4a140:	e0bfff17 	ldw	r2,-4(fp)
}
   4a144:	e037883a 	mov	sp,fp
   4a148:	df000017 	ldw	fp,0(sp)
   4a14c:	dec00104 	addi	sp,sp,4
   4a150:	f800283a 	ret

0004a154 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   4a154:	defff904 	addi	sp,sp,-28
   4a158:	dfc00615 	stw	ra,24(sp)
   4a15c:	df000515 	stw	fp,20(sp)
   4a160:	df000504 	addi	fp,sp,20
   4a164:	e13ffc15 	stw	r4,-16(fp)
   4a168:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4a16c:	e0bffc17 	ldw	r2,-16(fp)
   4a170:	1004803a 	cmplt	r2,r2,zero
   4a174:	1000081e 	bne	r2,zero,4a198 <fstat+0x44>
   4a178:	e0bffc17 	ldw	r2,-16(fp)
   4a17c:	10800324 	muli	r2,r2,12
   4a180:	1007883a 	mov	r3,r2
   4a184:	00900034 	movhi	r2,16384
   4a188:	1082f004 	addi	r2,r2,3008
   4a18c:	1887883a 	add	r3,r3,r2
   4a190:	e0ffff15 	stw	r3,-4(fp)
   4a194:	00000106 	br	4a19c <fstat+0x48>
   4a198:	e03fff15 	stw	zero,-4(fp)
   4a19c:	e0bfff17 	ldw	r2,-4(fp)
   4a1a0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   4a1a4:	e0bffb17 	ldw	r2,-20(fp)
   4a1a8:	1005003a 	cmpeq	r2,r2,zero
   4a1ac:	1000121e 	bne	r2,zero,4a1f8 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   4a1b0:	e0bffb17 	ldw	r2,-20(fp)
   4a1b4:	10800017 	ldw	r2,0(r2)
   4a1b8:	10800817 	ldw	r2,32(r2)
   4a1bc:	1005003a 	cmpeq	r2,r2,zero
   4a1c0:	1000081e 	bne	r2,zero,4a1e4 <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
   4a1c4:	e0bffb17 	ldw	r2,-20(fp)
   4a1c8:	10800017 	ldw	r2,0(r2)
   4a1cc:	10800817 	ldw	r2,32(r2)
   4a1d0:	e13ffb17 	ldw	r4,-20(fp)
   4a1d4:	e17ffd17 	ldw	r5,-12(fp)
   4a1d8:	103ee83a 	callr	r2
   4a1dc:	e0bffe15 	stw	r2,-8(fp)
   4a1e0:	00000b06 	br	4a210 <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   4a1e4:	e0fffd17 	ldw	r3,-12(fp)
   4a1e8:	00880004 	movi	r2,8192
   4a1ec:	18800115 	stw	r2,4(r3)
      return 0;
   4a1f0:	e03ffe15 	stw	zero,-8(fp)
   4a1f4:	00000606 	br	4a210 <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   4a1f8:	004a2280 	call	4a228 <alt_get_errno>
   4a1fc:	1007883a 	mov	r3,r2
   4a200:	00801444 	movi	r2,81
   4a204:	18800015 	stw	r2,0(r3)
    return -1;
   4a208:	00bfffc4 	movi	r2,-1
   4a20c:	e0bffe15 	stw	r2,-8(fp)
   4a210:	e0bffe17 	ldw	r2,-8(fp)
  }
}
   4a214:	e037883a 	mov	sp,fp
   4a218:	dfc00117 	ldw	ra,4(sp)
   4a21c:	df000017 	ldw	fp,0(sp)
   4a220:	dec00204 	addi	sp,sp,8
   4a224:	f800283a 	ret

0004a228 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4a228:	defffd04 	addi	sp,sp,-12
   4a22c:	dfc00215 	stw	ra,8(sp)
   4a230:	df000115 	stw	fp,4(sp)
   4a234:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   4a238:	00900034 	movhi	r2,16384
   4a23c:	10877304 	addi	r2,r2,7628
   4a240:	10800017 	ldw	r2,0(r2)
   4a244:	1005003a 	cmpeq	r2,r2,zero
   4a248:	1000061e 	bne	r2,zero,4a264 <alt_get_errno+0x3c>
   4a24c:	00900034 	movhi	r2,16384
   4a250:	10877304 	addi	r2,r2,7628
   4a254:	10800017 	ldw	r2,0(r2)
   4a258:	103ee83a 	callr	r2
   4a25c:	e0bfff15 	stw	r2,-4(fp)
   4a260:	00000306 	br	4a270 <alt_get_errno+0x48>
   4a264:	00900034 	movhi	r2,16384
   4a268:	10878004 	addi	r2,r2,7680
   4a26c:	e0bfff15 	stw	r2,-4(fp)
   4a270:	e0bfff17 	ldw	r2,-4(fp)
}
   4a274:	e037883a 	mov	sp,fp
   4a278:	dfc00117 	ldw	ra,4(sp)
   4a27c:	df000017 	ldw	fp,0(sp)
   4a280:	dec00204 	addi	sp,sp,8
   4a284:	f800283a 	ret

0004a288 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   4a288:	deffeb04 	addi	sp,sp,-84
   4a28c:	dfc01415 	stw	ra,80(sp)
   4a290:	df001315 	stw	fp,76(sp)
   4a294:	df001304 	addi	fp,sp,76
   4a298:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4a29c:	e0bffd17 	ldw	r2,-12(fp)
   4a2a0:	1004803a 	cmplt	r2,r2,zero
   4a2a4:	1000081e 	bne	r2,zero,4a2c8 <isatty+0x40>
   4a2a8:	e0bffd17 	ldw	r2,-12(fp)
   4a2ac:	10800324 	muli	r2,r2,12
   4a2b0:	1007883a 	mov	r3,r2
   4a2b4:	00900034 	movhi	r2,16384
   4a2b8:	1082f004 	addi	r2,r2,3008
   4a2bc:	1887883a 	add	r3,r3,r2
   4a2c0:	e0ffff15 	stw	r3,-4(fp)
   4a2c4:	00000106 	br	4a2cc <isatty+0x44>
   4a2c8:	e03fff15 	stw	zero,-4(fp)
   4a2cc:	e0bfff17 	ldw	r2,-4(fp)
   4a2d0:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
   4a2d4:	e0bfed17 	ldw	r2,-76(fp)
   4a2d8:	1005003a 	cmpeq	r2,r2,zero
   4a2dc:	10000f1e 	bne	r2,zero,4a31c <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   4a2e0:	e0bfed17 	ldw	r2,-76(fp)
   4a2e4:	10800017 	ldw	r2,0(r2)
   4a2e8:	10800817 	ldw	r2,32(r2)
   4a2ec:	1004c03a 	cmpne	r2,r2,zero
   4a2f0:	1000031e 	bne	r2,zero,4a300 <isatty+0x78>
    {
      return 1;
   4a2f4:	00800044 	movi	r2,1
   4a2f8:	e0bffe15 	stw	r2,-8(fp)
   4a2fc:	00000c06 	br	4a330 <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   4a300:	e17fee04 	addi	r5,fp,-72
   4a304:	e13ffd17 	ldw	r4,-12(fp)
   4a308:	004a1540 	call	4a154 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   4a30c:	e0bfef17 	ldw	r2,-68(fp)
   4a310:	10880020 	cmpeqi	r2,r2,8192
   4a314:	e0bffe15 	stw	r2,-8(fp)
   4a318:	00000506 	br	4a330 <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   4a31c:	004a3480 	call	4a348 <alt_get_errno>
   4a320:	1007883a 	mov	r3,r2
   4a324:	00801444 	movi	r2,81
   4a328:	18800015 	stw	r2,0(r3)
    return 0;
   4a32c:	e03ffe15 	stw	zero,-8(fp)
   4a330:	e0bffe17 	ldw	r2,-8(fp)
  }
}
   4a334:	e037883a 	mov	sp,fp
   4a338:	dfc00117 	ldw	ra,4(sp)
   4a33c:	df000017 	ldw	fp,0(sp)
   4a340:	dec00204 	addi	sp,sp,8
   4a344:	f800283a 	ret

0004a348 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4a348:	defffd04 	addi	sp,sp,-12
   4a34c:	dfc00215 	stw	ra,8(sp)
   4a350:	df000115 	stw	fp,4(sp)
   4a354:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   4a358:	00900034 	movhi	r2,16384
   4a35c:	10877304 	addi	r2,r2,7628
   4a360:	10800017 	ldw	r2,0(r2)
   4a364:	1005003a 	cmpeq	r2,r2,zero
   4a368:	1000061e 	bne	r2,zero,4a384 <alt_get_errno+0x3c>
   4a36c:	00900034 	movhi	r2,16384
   4a370:	10877304 	addi	r2,r2,7628
   4a374:	10800017 	ldw	r2,0(r2)
   4a378:	103ee83a 	callr	r2
   4a37c:	e0bfff15 	stw	r2,-4(fp)
   4a380:	00000306 	br	4a390 <alt_get_errno+0x48>
   4a384:	00900034 	movhi	r2,16384
   4a388:	10878004 	addi	r2,r2,7680
   4a38c:	e0bfff15 	stw	r2,-4(fp)
   4a390:	e0bfff17 	ldw	r2,-4(fp)
}
   4a394:	e037883a 	mov	sp,fp
   4a398:	dfc00117 	ldw	ra,4(sp)
   4a39c:	df000017 	ldw	fp,0(sp)
   4a3a0:	dec00204 	addi	sp,sp,8
   4a3a4:	f800283a 	ret

0004a3a8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   4a3a8:	defffe04 	addi	sp,sp,-8
   4a3ac:	dfc00115 	stw	ra,4(sp)
   4a3b0:	df000015 	stw	fp,0(sp)
   4a3b4:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   4a3b8:	01000174 	movhi	r4,5
   4a3bc:	21340604 	addi	r4,r4,-12264
   4a3c0:	01500034 	movhi	r5,16384
   4a3c4:	2940e104 	addi	r5,r5,900
   4a3c8:	01900034 	movhi	r6,16384
   4a3cc:	31877804 	addi	r6,r6,7648
   4a3d0:	004a4280 	call	4a428 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   4a3d4:	01000134 	movhi	r4,4
   4a3d8:	21000804 	addi	r4,r4,32
   4a3dc:	01400134 	movhi	r5,4
   4a3e0:	29400804 	addi	r5,r5,32
   4a3e4:	01800134 	movhi	r6,4
   4a3e8:	31806d04 	addi	r6,r6,436
   4a3ec:	004a4280 	call	4a428 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   4a3f0:	01000174 	movhi	r4,5
   4a3f4:	21332504 	addi	r4,r4,-13164
   4a3f8:	01500034 	movhi	r5,16384
   4a3fc:	29400004 	addi	r5,r5,0
   4a400:	01900034 	movhi	r6,16384
   4a404:	3180e104 	addi	r6,r6,900
   4a408:	004a4280 	call	4a428 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   4a40c:	004baac0 	call	4baac <alt_dcache_flush_all>
  alt_icache_flush_all();
   4a410:	004bccc0 	call	4bccc <alt_icache_flush_all>
}
   4a414:	e037883a 	mov	sp,fp
   4a418:	dfc00117 	ldw	ra,4(sp)
   4a41c:	df000017 	ldw	fp,0(sp)
   4a420:	dec00204 	addi	sp,sp,8
   4a424:	f800283a 	ret

0004a428 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   4a428:	defffc04 	addi	sp,sp,-16
   4a42c:	df000315 	stw	fp,12(sp)
   4a430:	df000304 	addi	fp,sp,12
   4a434:	e13ffd15 	stw	r4,-12(fp)
   4a438:	e17ffe15 	stw	r5,-8(fp)
   4a43c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   4a440:	e0fffe17 	ldw	r3,-8(fp)
   4a444:	e0bffd17 	ldw	r2,-12(fp)
   4a448:	18800e26 	beq	r3,r2,4a484 <alt_load_section+0x5c>
  {
    while( to != end )
   4a44c:	00000a06 	br	4a478 <alt_load_section+0x50>
    {
      *to++ = *from++;
   4a450:	e0bffd17 	ldw	r2,-12(fp)
   4a454:	10c00017 	ldw	r3,0(r2)
   4a458:	e0bffe17 	ldw	r2,-8(fp)
   4a45c:	10c00015 	stw	r3,0(r2)
   4a460:	e0bffe17 	ldw	r2,-8(fp)
   4a464:	10800104 	addi	r2,r2,4
   4a468:	e0bffe15 	stw	r2,-8(fp)
   4a46c:	e0bffd17 	ldw	r2,-12(fp)
   4a470:	10800104 	addi	r2,r2,4
   4a474:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   4a478:	e0fffe17 	ldw	r3,-8(fp)
   4a47c:	e0bfff17 	ldw	r2,-4(fp)
   4a480:	18bff31e 	bne	r3,r2,4a450 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   4a484:	e037883a 	mov	sp,fp
   4a488:	df000017 	ldw	fp,0(sp)
   4a48c:	dec00104 	addi	sp,sp,4
   4a490:	f800283a 	ret

0004a494 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   4a494:	defff804 	addi	sp,sp,-32
   4a498:	dfc00715 	stw	ra,28(sp)
   4a49c:	df000615 	stw	fp,24(sp)
   4a4a0:	df000604 	addi	fp,sp,24
   4a4a4:	e13ffc15 	stw	r4,-16(fp)
   4a4a8:	e17ffd15 	stw	r5,-12(fp)
   4a4ac:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   4a4b0:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4a4b4:	e0bffc17 	ldw	r2,-16(fp)
   4a4b8:	1004803a 	cmplt	r2,r2,zero
   4a4bc:	1000081e 	bne	r2,zero,4a4e0 <lseek+0x4c>
   4a4c0:	e0bffc17 	ldw	r2,-16(fp)
   4a4c4:	10800324 	muli	r2,r2,12
   4a4c8:	1007883a 	mov	r3,r2
   4a4cc:	00900034 	movhi	r2,16384
   4a4d0:	1082f004 	addi	r2,r2,3008
   4a4d4:	1887883a 	add	r3,r3,r2
   4a4d8:	e0ffff15 	stw	r3,-4(fp)
   4a4dc:	00000106 	br	4a4e4 <lseek+0x50>
   4a4e0:	e03fff15 	stw	zero,-4(fp)
   4a4e4:	e0bfff17 	ldw	r2,-4(fp)
   4a4e8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
   4a4ec:	e0bffb17 	ldw	r2,-20(fp)
   4a4f0:	1005003a 	cmpeq	r2,r2,zero
   4a4f4:	1000111e 	bne	r2,zero,4a53c <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   4a4f8:	e0bffb17 	ldw	r2,-20(fp)
   4a4fc:	10800017 	ldw	r2,0(r2)
   4a500:	10800717 	ldw	r2,28(r2)
   4a504:	1005003a 	cmpeq	r2,r2,zero
   4a508:	1000091e 	bne	r2,zero,4a530 <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   4a50c:	e0bffb17 	ldw	r2,-20(fp)
   4a510:	10800017 	ldw	r2,0(r2)
   4a514:	10800717 	ldw	r2,28(r2)
   4a518:	e13ffb17 	ldw	r4,-20(fp)
   4a51c:	e17ffd17 	ldw	r5,-12(fp)
   4a520:	e1bffe17 	ldw	r6,-8(fp)
   4a524:	103ee83a 	callr	r2
   4a528:	e0bffa15 	stw	r2,-24(fp)
   4a52c:	00000506 	br	4a544 <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   4a530:	00bfde84 	movi	r2,-134
   4a534:	e0bffa15 	stw	r2,-24(fp)
   4a538:	00000206 	br	4a544 <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
   4a53c:	00bfebc4 	movi	r2,-81
   4a540:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
   4a544:	e0bffa17 	ldw	r2,-24(fp)
   4a548:	1004403a 	cmpge	r2,r2,zero
   4a54c:	1000071e 	bne	r2,zero,4a56c <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
   4a550:	004a5840 	call	4a584 <alt_get_errno>
   4a554:	1007883a 	mov	r3,r2
   4a558:	e0bffa17 	ldw	r2,-24(fp)
   4a55c:	0085c83a 	sub	r2,zero,r2
   4a560:	18800015 	stw	r2,0(r3)
    rc = -1;
   4a564:	00bfffc4 	movi	r2,-1
   4a568:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
   4a56c:	e0bffa17 	ldw	r2,-24(fp)
}
   4a570:	e037883a 	mov	sp,fp
   4a574:	dfc00117 	ldw	ra,4(sp)
   4a578:	df000017 	ldw	fp,0(sp)
   4a57c:	dec00204 	addi	sp,sp,8
   4a580:	f800283a 	ret

0004a584 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4a584:	defffd04 	addi	sp,sp,-12
   4a588:	dfc00215 	stw	ra,8(sp)
   4a58c:	df000115 	stw	fp,4(sp)
   4a590:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   4a594:	00900034 	movhi	r2,16384
   4a598:	10877304 	addi	r2,r2,7628
   4a59c:	10800017 	ldw	r2,0(r2)
   4a5a0:	1005003a 	cmpeq	r2,r2,zero
   4a5a4:	1000061e 	bne	r2,zero,4a5c0 <alt_get_errno+0x3c>
   4a5a8:	00900034 	movhi	r2,16384
   4a5ac:	10877304 	addi	r2,r2,7628
   4a5b0:	10800017 	ldw	r2,0(r2)
   4a5b4:	103ee83a 	callr	r2
   4a5b8:	e0bfff15 	stw	r2,-4(fp)
   4a5bc:	00000306 	br	4a5cc <alt_get_errno+0x48>
   4a5c0:	00900034 	movhi	r2,16384
   4a5c4:	10878004 	addi	r2,r2,7680
   4a5c8:	e0bfff15 	stw	r2,-4(fp)
   4a5cc:	e0bfff17 	ldw	r2,-4(fp)
}
   4a5d0:	e037883a 	mov	sp,fp
   4a5d4:	dfc00117 	ldw	ra,4(sp)
   4a5d8:	df000017 	ldw	fp,0(sp)
   4a5dc:	dec00204 	addi	sp,sp,8
   4a5e0:	f800283a 	ret

0004a5e4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   4a5e4:	defffd04 	addi	sp,sp,-12
   4a5e8:	dfc00215 	stw	ra,8(sp)
   4a5ec:	df000115 	stw	fp,4(sp)
   4a5f0:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   4a5f4:	0009883a 	mov	r4,zero
   4a5f8:	004aaac0 	call	4aaac <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   4a5fc:	004aae00 	call	4aae0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   4a600:	01100034 	movhi	r4,16384
   4a604:	2100d904 	addi	r4,r4,868
   4a608:	01500034 	movhi	r5,16384
   4a60c:	2940d904 	addi	r5,r5,868
   4a610:	01900034 	movhi	r6,16384
   4a614:	3180d904 	addi	r6,r6,868
   4a618:	004c08c0 	call	4c08c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   4a61c:	004bc040 	call	4bc04 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   4a620:	01000174 	movhi	r4,5
   4a624:	212f1a04 	addi	r4,r4,-17304
   4a628:	004c8880 	call	4c888 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   4a62c:	d1201917 	ldw	r4,-32668(gp)
   4a630:	d1601a17 	ldw	r5,-32664(gp)
   4a634:	d1a01b17 	ldw	r6,-32660(gp)
   4a638:	00407fc0 	call	407fc <main>
   4a63c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   4a640:	01000044 	movi	r4,1
   4a644:	0049fcc0 	call	49fcc <close>
  exit (result);
   4a648:	e13fff17 	ldw	r4,-4(fp)
   4a64c:	004c89c0 	call	4c89c <exit>

0004a650 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   4a650:	defffe04 	addi	sp,sp,-8
   4a654:	df000115 	stw	fp,4(sp)
   4a658:	df000104 	addi	fp,sp,4
   4a65c:	e13fff15 	stw	r4,-4(fp)
}
   4a660:	e037883a 	mov	sp,fp
   4a664:	df000017 	ldw	fp,0(sp)
   4a668:	dec00104 	addi	sp,sp,4
   4a66c:	f800283a 	ret

0004a670 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   4a670:	defffe04 	addi	sp,sp,-8
   4a674:	df000115 	stw	fp,4(sp)
   4a678:	df000104 	addi	fp,sp,4
   4a67c:	e13fff15 	stw	r4,-4(fp)
}
   4a680:	e037883a 	mov	sp,fp
   4a684:	df000017 	ldw	fp,0(sp)
   4a688:	dec00104 	addi	sp,sp,4
   4a68c:	f800283a 	ret

0004a690 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   4a690:	defff704 	addi	sp,sp,-36
   4a694:	dfc00815 	stw	ra,32(sp)
   4a698:	df000715 	stw	fp,28(sp)
   4a69c:	df000704 	addi	fp,sp,28
   4a6a0:	e13ffb15 	stw	r4,-20(fp)
   4a6a4:	e17ffc15 	stw	r5,-16(fp)
   4a6a8:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4a6ac:	e0bffb17 	ldw	r2,-20(fp)
   4a6b0:	1004803a 	cmplt	r2,r2,zero
   4a6b4:	1000081e 	bne	r2,zero,4a6d8 <read+0x48>
   4a6b8:	e0bffb17 	ldw	r2,-20(fp)
   4a6bc:	10800324 	muli	r2,r2,12
   4a6c0:	1007883a 	mov	r3,r2
   4a6c4:	00900034 	movhi	r2,16384
   4a6c8:	1082f004 	addi	r2,r2,3008
   4a6cc:	1887883a 	add	r3,r3,r2
   4a6d0:	e0ffff15 	stw	r3,-4(fp)
   4a6d4:	00000106 	br	4a6dc <read+0x4c>
   4a6d8:	e03fff15 	stw	zero,-4(fp)
   4a6dc:	e0bfff17 	ldw	r2,-4(fp)
   4a6e0:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   4a6e4:	e0bffa17 	ldw	r2,-24(fp)
   4a6e8:	1005003a 	cmpeq	r2,r2,zero
   4a6ec:	1000241e 	bne	r2,zero,4a780 <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   4a6f0:	e0bffa17 	ldw	r2,-24(fp)
   4a6f4:	10800217 	ldw	r2,8(r2)
   4a6f8:	108000cc 	andi	r2,r2,3
   4a6fc:	10800060 	cmpeqi	r2,r2,1
   4a700:	10001a1e 	bne	r2,zero,4a76c <read+0xdc>
   4a704:	e0bffa17 	ldw	r2,-24(fp)
   4a708:	10800017 	ldw	r2,0(r2)
   4a70c:	10800517 	ldw	r2,20(r2)
   4a710:	1005003a 	cmpeq	r2,r2,zero
   4a714:	1000151e 	bne	r2,zero,4a76c <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   4a718:	e0bffa17 	ldw	r2,-24(fp)
   4a71c:	10800017 	ldw	r2,0(r2)
   4a720:	10800517 	ldw	r2,20(r2)
   4a724:	e17ffc17 	ldw	r5,-16(fp)
   4a728:	e1bffd17 	ldw	r6,-12(fp)
   4a72c:	e13ffa17 	ldw	r4,-24(fp)
   4a730:	103ee83a 	callr	r2
   4a734:	e0bff915 	stw	r2,-28(fp)
   4a738:	e0bff917 	ldw	r2,-28(fp)
   4a73c:	1004403a 	cmpge	r2,r2,zero
   4a740:	1000071e 	bne	r2,zero,4a760 <read+0xd0>
        {
          ALT_ERRNO = -rval;
   4a744:	004a7b00 	call	4a7b0 <alt_get_errno>
   4a748:	e0fff917 	ldw	r3,-28(fp)
   4a74c:	00c7c83a 	sub	r3,zero,r3
   4a750:	10c00015 	stw	r3,0(r2)
          return -1;
   4a754:	00bfffc4 	movi	r2,-1
   4a758:	e0bffe15 	stw	r2,-8(fp)
   4a75c:	00000e06 	br	4a798 <read+0x108>
        }
        return rval;
   4a760:	e0bff917 	ldw	r2,-28(fp)
   4a764:	e0bffe15 	stw	r2,-8(fp)
   4a768:	00000b06 	br	4a798 <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
   4a76c:	004a7b00 	call	4a7b0 <alt_get_errno>
   4a770:	1007883a 	mov	r3,r2
   4a774:	00800344 	movi	r2,13
   4a778:	18800015 	stw	r2,0(r3)
   4a77c:	00000406 	br	4a790 <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   4a780:	004a7b00 	call	4a7b0 <alt_get_errno>
   4a784:	1007883a 	mov	r3,r2
   4a788:	00801444 	movi	r2,81
   4a78c:	18800015 	stw	r2,0(r3)
  }
  return -1;
   4a790:	00bfffc4 	movi	r2,-1
   4a794:	e0bffe15 	stw	r2,-8(fp)
   4a798:	e0bffe17 	ldw	r2,-8(fp)
}
   4a79c:	e037883a 	mov	sp,fp
   4a7a0:	dfc00117 	ldw	ra,4(sp)
   4a7a4:	df000017 	ldw	fp,0(sp)
   4a7a8:	dec00204 	addi	sp,sp,8
   4a7ac:	f800283a 	ret

0004a7b0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4a7b0:	defffd04 	addi	sp,sp,-12
   4a7b4:	dfc00215 	stw	ra,8(sp)
   4a7b8:	df000115 	stw	fp,4(sp)
   4a7bc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   4a7c0:	00900034 	movhi	r2,16384
   4a7c4:	10877304 	addi	r2,r2,7628
   4a7c8:	10800017 	ldw	r2,0(r2)
   4a7cc:	1005003a 	cmpeq	r2,r2,zero
   4a7d0:	1000061e 	bne	r2,zero,4a7ec <alt_get_errno+0x3c>
   4a7d4:	00900034 	movhi	r2,16384
   4a7d8:	10877304 	addi	r2,r2,7628
   4a7dc:	10800017 	ldw	r2,0(r2)
   4a7e0:	103ee83a 	callr	r2
   4a7e4:	e0bfff15 	stw	r2,-4(fp)
   4a7e8:	00000306 	br	4a7f8 <alt_get_errno+0x48>
   4a7ec:	00900034 	movhi	r2,16384
   4a7f0:	10878004 	addi	r2,r2,7680
   4a7f4:	e0bfff15 	stw	r2,-4(fp)
   4a7f8:	e0bfff17 	ldw	r2,-4(fp)
}
   4a7fc:	e037883a 	mov	sp,fp
   4a800:	dfc00117 	ldw	ra,4(sp)
   4a804:	df000017 	ldw	fp,0(sp)
   4a808:	dec00204 	addi	sp,sp,8
   4a80c:	f800283a 	ret

0004a810 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   4a810:	defffe04 	addi	sp,sp,-8
   4a814:	df000115 	stw	fp,4(sp)
   4a818:	df000104 	addi	fp,sp,4
   4a81c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   4a820:	e0bfff17 	ldw	r2,-4(fp)
   4a824:	108000d0 	cmplti	r2,r2,3
   4a828:	10000d1e 	bne	r2,zero,4a860 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   4a82c:	e0bfff17 	ldw	r2,-4(fp)
   4a830:	00d00034 	movhi	r3,16384
   4a834:	18c2f004 	addi	r3,r3,3008
   4a838:	10800324 	muli	r2,r2,12
   4a83c:	10c5883a 	add	r2,r2,r3
   4a840:	10800204 	addi	r2,r2,8
   4a844:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   4a848:	e0bfff17 	ldw	r2,-4(fp)
   4a84c:	00d00034 	movhi	r3,16384
   4a850:	18c2f004 	addi	r3,r3,3008
   4a854:	10800324 	muli	r2,r2,12
   4a858:	10c5883a 	add	r2,r2,r3
   4a85c:	10000015 	stw	zero,0(r2)
  }
}
   4a860:	e037883a 	mov	sp,fp
   4a864:	df000017 	ldw	fp,0(sp)
   4a868:	dec00104 	addi	sp,sp,4
   4a86c:	f800283a 	ret

0004a870 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   4a870:	defff804 	addi	sp,sp,-32
   4a874:	df000715 	stw	fp,28(sp)
   4a878:	df000704 	addi	fp,sp,28
   4a87c:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4a880:	0005303a 	rdctl	r2,status
   4a884:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4a888:	e0fffb17 	ldw	r3,-20(fp)
   4a88c:	00bfff84 	movi	r2,-2
   4a890:	1884703a 	and	r2,r3,r2
   4a894:	1001703a 	wrctl	status,r2
  
  return context;
   4a898:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   4a89c:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   4a8a0:	d0a00c17 	ldw	r2,-32720(gp)
   4a8a4:	10c000c4 	addi	r3,r2,3
   4a8a8:	00bfff04 	movi	r2,-4
   4a8ac:	1884703a 	and	r2,r3,r2
   4a8b0:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   4a8b4:	d0e00c17 	ldw	r3,-32720(gp)
   4a8b8:	e0bffe17 	ldw	r2,-8(fp)
   4a8bc:	1887883a 	add	r3,r3,r2
   4a8c0:	00a00034 	movhi	r2,32768
   4a8c4:	10800004 	addi	r2,r2,0
   4a8c8:	10c0072e 	bgeu	r2,r3,4a8e8 <sbrk+0x78>
   4a8cc:	e0bffd17 	ldw	r2,-12(fp)
   4a8d0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4a8d4:	e0bffa17 	ldw	r2,-24(fp)
   4a8d8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   4a8dc:	00bfffc4 	movi	r2,-1
   4a8e0:	e0bfff15 	stw	r2,-4(fp)
   4a8e4:	00000c06 	br	4a918 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
   4a8e8:	d0a00c17 	ldw	r2,-32720(gp)
   4a8ec:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
   4a8f0:	d0e00c17 	ldw	r3,-32720(gp)
   4a8f4:	e0bffe17 	ldw	r2,-8(fp)
   4a8f8:	1885883a 	add	r2,r3,r2
   4a8fc:	d0a00c15 	stw	r2,-32720(gp)
   4a900:	e0bffd17 	ldw	r2,-12(fp)
   4a904:	e0bff915 	stw	r2,-28(fp)
   4a908:	e0bff917 	ldw	r2,-28(fp)
   4a90c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   4a910:	e0bffc17 	ldw	r2,-16(fp)
   4a914:	e0bfff15 	stw	r2,-4(fp)
   4a918:	e0bfff17 	ldw	r2,-4(fp)
} 
   4a91c:	e037883a 	mov	sp,fp
   4a920:	df000017 	ldw	fp,0(sp)
   4a924:	dec00104 	addi	sp,sp,4
   4a928:	f800283a 	ret

0004a92c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   4a92c:	defff704 	addi	sp,sp,-36
   4a930:	dfc00815 	stw	ra,32(sp)
   4a934:	df000715 	stw	fp,28(sp)
   4a938:	df000704 	addi	fp,sp,28
   4a93c:	e13ffb15 	stw	r4,-20(fp)
   4a940:	e17ffc15 	stw	r5,-16(fp)
   4a944:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4a948:	e0bffb17 	ldw	r2,-20(fp)
   4a94c:	1004803a 	cmplt	r2,r2,zero
   4a950:	1000081e 	bne	r2,zero,4a974 <write+0x48>
   4a954:	e0bffb17 	ldw	r2,-20(fp)
   4a958:	10800324 	muli	r2,r2,12
   4a95c:	1007883a 	mov	r3,r2
   4a960:	00900034 	movhi	r2,16384
   4a964:	1082f004 	addi	r2,r2,3008
   4a968:	1887883a 	add	r3,r3,r2
   4a96c:	e0ffff15 	stw	r3,-4(fp)
   4a970:	00000106 	br	4a978 <write+0x4c>
   4a974:	e03fff15 	stw	zero,-4(fp)
   4a978:	e0bfff17 	ldw	r2,-4(fp)
   4a97c:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   4a980:	e0bffa17 	ldw	r2,-24(fp)
   4a984:	1005003a 	cmpeq	r2,r2,zero
   4a988:	1000241e 	bne	r2,zero,4aa1c <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   4a98c:	e0bffa17 	ldw	r2,-24(fp)
   4a990:	10800217 	ldw	r2,8(r2)
   4a994:	108000cc 	andi	r2,r2,3
   4a998:	1005003a 	cmpeq	r2,r2,zero
   4a99c:	10001a1e 	bne	r2,zero,4aa08 <write+0xdc>
   4a9a0:	e0bffa17 	ldw	r2,-24(fp)
   4a9a4:	10800017 	ldw	r2,0(r2)
   4a9a8:	10800617 	ldw	r2,24(r2)
   4a9ac:	1005003a 	cmpeq	r2,r2,zero
   4a9b0:	1000151e 	bne	r2,zero,4aa08 <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   4a9b4:	e0bffa17 	ldw	r2,-24(fp)
   4a9b8:	10800017 	ldw	r2,0(r2)
   4a9bc:	10800617 	ldw	r2,24(r2)
   4a9c0:	e17ffc17 	ldw	r5,-16(fp)
   4a9c4:	e1bffd17 	ldw	r6,-12(fp)
   4a9c8:	e13ffa17 	ldw	r4,-24(fp)
   4a9cc:	103ee83a 	callr	r2
   4a9d0:	e0bff915 	stw	r2,-28(fp)
   4a9d4:	e0bff917 	ldw	r2,-28(fp)
   4a9d8:	1004403a 	cmpge	r2,r2,zero
   4a9dc:	1000071e 	bne	r2,zero,4a9fc <write+0xd0>
      {
        ALT_ERRNO = -rval;
   4a9e0:	004aa4c0 	call	4aa4c <alt_get_errno>
   4a9e4:	e0fff917 	ldw	r3,-28(fp)
   4a9e8:	00c7c83a 	sub	r3,zero,r3
   4a9ec:	10c00015 	stw	r3,0(r2)
        return -1;
   4a9f0:	00bfffc4 	movi	r2,-1
   4a9f4:	e0bffe15 	stw	r2,-8(fp)
   4a9f8:	00000e06 	br	4aa34 <write+0x108>
      }
      return rval;
   4a9fc:	e0bff917 	ldw	r2,-28(fp)
   4aa00:	e0bffe15 	stw	r2,-8(fp)
   4aa04:	00000b06 	br	4aa34 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
   4aa08:	004aa4c0 	call	4aa4c <alt_get_errno>
   4aa0c:	1007883a 	mov	r3,r2
   4aa10:	00800344 	movi	r2,13
   4aa14:	18800015 	stw	r2,0(r3)
   4aa18:	00000406 	br	4aa2c <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   4aa1c:	004aa4c0 	call	4aa4c <alt_get_errno>
   4aa20:	1007883a 	mov	r3,r2
   4aa24:	00801444 	movi	r2,81
   4aa28:	18800015 	stw	r2,0(r3)
  }
  return -1;
   4aa2c:	00bfffc4 	movi	r2,-1
   4aa30:	e0bffe15 	stw	r2,-8(fp)
   4aa34:	e0bffe17 	ldw	r2,-8(fp)
}
   4aa38:	e037883a 	mov	sp,fp
   4aa3c:	dfc00117 	ldw	ra,4(sp)
   4aa40:	df000017 	ldw	fp,0(sp)
   4aa44:	dec00204 	addi	sp,sp,8
   4aa48:	f800283a 	ret

0004aa4c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4aa4c:	defffd04 	addi	sp,sp,-12
   4aa50:	dfc00215 	stw	ra,8(sp)
   4aa54:	df000115 	stw	fp,4(sp)
   4aa58:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   4aa5c:	00900034 	movhi	r2,16384
   4aa60:	10877304 	addi	r2,r2,7628
   4aa64:	10800017 	ldw	r2,0(r2)
   4aa68:	1005003a 	cmpeq	r2,r2,zero
   4aa6c:	1000061e 	bne	r2,zero,4aa88 <alt_get_errno+0x3c>
   4aa70:	00900034 	movhi	r2,16384
   4aa74:	10877304 	addi	r2,r2,7628
   4aa78:	10800017 	ldw	r2,0(r2)
   4aa7c:	103ee83a 	callr	r2
   4aa80:	e0bfff15 	stw	r2,-4(fp)
   4aa84:	00000306 	br	4aa94 <alt_get_errno+0x48>
   4aa88:	00900034 	movhi	r2,16384
   4aa8c:	10878004 	addi	r2,r2,7680
   4aa90:	e0bfff15 	stw	r2,-4(fp)
   4aa94:	e0bfff17 	ldw	r2,-4(fp)
}
   4aa98:	e037883a 	mov	sp,fp
   4aa9c:	dfc00117 	ldw	ra,4(sp)
   4aaa0:	df000017 	ldw	fp,0(sp)
   4aaa4:	dec00204 	addi	sp,sp,8
   4aaa8:	f800283a 	ret

0004aaac <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   4aaac:	defffd04 	addi	sp,sp,-12
   4aab0:	dfc00215 	stw	ra,8(sp)
   4aab4:	df000115 	stw	fp,4(sp)
   4aab8:	df000104 	addi	fp,sp,4
   4aabc:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS, nios2_qsys);
   4aac0:	004c56c0 	call	4c56c <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   4aac4:	00800044 	movi	r2,1
   4aac8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   4aacc:	e037883a 	mov	sp,fp
   4aad0:	dfc00117 	ldw	ra,4(sp)
   4aad4:	df000017 	ldw	fp,0(sp)
   4aad8:	dec00204 	addi	sp,sp,8
   4aadc:	f800283a 	ret

0004aae0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   4aae0:	defffe04 	addi	sp,sp,-8
   4aae4:	dfc00115 	stw	ra,4(sp)
   4aae8:	df000015 	stw	fp,0(sp)
   4aaec:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
   4aaf0:	01004034 	movhi	r4,256
   4aaf4:	21001004 	addi	r4,r4,64
   4aaf8:	000b883a 	mov	r5,zero
   4aafc:	01800044 	movi	r6,1
   4ab00:	01c0fa04 	movi	r7,1000
   4ab04:	004b8c80 	call	4b8c8 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   4ab08:	01100034 	movhi	r4,16384
   4ab0c:	21035a04 	addi	r4,r4,3432
   4ab10:	000b883a 	mov	r5,zero
   4ab14:	000d883a 	mov	r6,zero
   4ab18:	004acbc0 	call	4acbc <altera_avalon_jtag_uart_init>
   4ab1c:	01100034 	movhi	r4,16384
   4ab20:	21035004 	addi	r4,r4,3392
   4ab24:	004ab3c0 	call	4ab3c <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SPI_1, spi_1);
    ALTERA_AVALON_SPI_INIT ( SPI_2, spi_2);
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
}
   4ab28:	e037883a 	mov	sp,fp
   4ab2c:	dfc00117 	ldw	ra,4(sp)
   4ab30:	df000017 	ldw	fp,0(sp)
   4ab34:	dec00204 	addi	sp,sp,8
   4ab38:	f800283a 	ret

0004ab3c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   4ab3c:	defffd04 	addi	sp,sp,-12
   4ab40:	dfc00215 	stw	ra,8(sp)
   4ab44:	df000115 	stw	fp,4(sp)
   4ab48:	df000104 	addi	fp,sp,4
   4ab4c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   4ab50:	e13fff17 	ldw	r4,-4(fp)
   4ab54:	01500034 	movhi	r5,16384
   4ab58:	29477004 	addi	r5,r5,7616
   4ab5c:	004baf00 	call	4baf0 <alt_dev_llist_insert>
}
   4ab60:	e037883a 	mov	sp,fp
   4ab64:	dfc00117 	ldw	ra,4(sp)
   4ab68:	df000017 	ldw	fp,0(sp)
   4ab6c:	dec00204 	addi	sp,sp,8
   4ab70:	f800283a 	ret

0004ab74 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   4ab74:	defffa04 	addi	sp,sp,-24
   4ab78:	dfc00515 	stw	ra,20(sp)
   4ab7c:	df000415 	stw	fp,16(sp)
   4ab80:	df000404 	addi	fp,sp,16
   4ab84:	e13ffd15 	stw	r4,-12(fp)
   4ab88:	e17ffe15 	stw	r5,-8(fp)
   4ab8c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   4ab90:	e0bffd17 	ldw	r2,-12(fp)
   4ab94:	10800017 	ldw	r2,0(r2)
   4ab98:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   4ab9c:	e0bffc17 	ldw	r2,-16(fp)
   4aba0:	11000a04 	addi	r4,r2,40
   4aba4:	e0bffd17 	ldw	r2,-12(fp)
   4aba8:	11c00217 	ldw	r7,8(r2)
   4abac:	e17ffe17 	ldw	r5,-8(fp)
   4abb0:	e1bfff17 	ldw	r6,-4(fp)
   4abb4:	004b1bc0 	call	4b1bc <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   4abb8:	e037883a 	mov	sp,fp
   4abbc:	dfc00117 	ldw	ra,4(sp)
   4abc0:	df000017 	ldw	fp,0(sp)
   4abc4:	dec00204 	addi	sp,sp,8
   4abc8:	f800283a 	ret

0004abcc <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   4abcc:	defffa04 	addi	sp,sp,-24
   4abd0:	dfc00515 	stw	ra,20(sp)
   4abd4:	df000415 	stw	fp,16(sp)
   4abd8:	df000404 	addi	fp,sp,16
   4abdc:	e13ffd15 	stw	r4,-12(fp)
   4abe0:	e17ffe15 	stw	r5,-8(fp)
   4abe4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   4abe8:	e0bffd17 	ldw	r2,-12(fp)
   4abec:	10800017 	ldw	r2,0(r2)
   4abf0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   4abf4:	e0bffc17 	ldw	r2,-16(fp)
   4abf8:	11000a04 	addi	r4,r2,40
   4abfc:	e0bffd17 	ldw	r2,-12(fp)
   4ac00:	11c00217 	ldw	r7,8(r2)
   4ac04:	e17ffe17 	ldw	r5,-8(fp)
   4ac08:	e1bfff17 	ldw	r6,-4(fp)
   4ac0c:	004b3e00 	call	4b3e0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   4ac10:	e037883a 	mov	sp,fp
   4ac14:	dfc00117 	ldw	ra,4(sp)
   4ac18:	df000017 	ldw	fp,0(sp)
   4ac1c:	dec00204 	addi	sp,sp,8
   4ac20:	f800283a 	ret

0004ac24 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   4ac24:	defffc04 	addi	sp,sp,-16
   4ac28:	dfc00315 	stw	ra,12(sp)
   4ac2c:	df000215 	stw	fp,8(sp)
   4ac30:	df000204 	addi	fp,sp,8
   4ac34:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   4ac38:	e0bfff17 	ldw	r2,-4(fp)
   4ac3c:	10800017 	ldw	r2,0(r2)
   4ac40:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   4ac44:	e0bffe17 	ldw	r2,-8(fp)
   4ac48:	11000a04 	addi	r4,r2,40
   4ac4c:	e0bfff17 	ldw	r2,-4(fp)
   4ac50:	11400217 	ldw	r5,8(r2)
   4ac54:	004b0540 	call	4b054 <altera_avalon_jtag_uart_close>
}
   4ac58:	e037883a 	mov	sp,fp
   4ac5c:	dfc00117 	ldw	ra,4(sp)
   4ac60:	df000017 	ldw	fp,0(sp)
   4ac64:	dec00204 	addi	sp,sp,8
   4ac68:	f800283a 	ret

0004ac6c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   4ac6c:	defffa04 	addi	sp,sp,-24
   4ac70:	dfc00515 	stw	ra,20(sp)
   4ac74:	df000415 	stw	fp,16(sp)
   4ac78:	df000404 	addi	fp,sp,16
   4ac7c:	e13ffd15 	stw	r4,-12(fp)
   4ac80:	e17ffe15 	stw	r5,-8(fp)
   4ac84:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   4ac88:	e0bffd17 	ldw	r2,-12(fp)
   4ac8c:	10800017 	ldw	r2,0(r2)
   4ac90:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   4ac94:	e0bffc17 	ldw	r2,-16(fp)
   4ac98:	11000a04 	addi	r4,r2,40
   4ac9c:	e17ffe17 	ldw	r5,-8(fp)
   4aca0:	e1bfff17 	ldw	r6,-4(fp)
   4aca4:	004b0c80 	call	4b0c8 <altera_avalon_jtag_uart_ioctl>
}
   4aca8:	e037883a 	mov	sp,fp
   4acac:	dfc00117 	ldw	ra,4(sp)
   4acb0:	df000017 	ldw	fp,0(sp)
   4acb4:	dec00204 	addi	sp,sp,8
   4acb8:	f800283a 	ret

0004acbc <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   4acbc:	defffa04 	addi	sp,sp,-24
   4acc0:	dfc00515 	stw	ra,20(sp)
   4acc4:	df000415 	stw	fp,16(sp)
   4acc8:	df000404 	addi	fp,sp,16
   4accc:	e13ffd15 	stw	r4,-12(fp)
   4acd0:	e17ffe15 	stw	r5,-8(fp)
   4acd4:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   4acd8:	e0fffd17 	ldw	r3,-12(fp)
   4acdc:	00800044 	movi	r2,1
   4ace0:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   4ace4:	e0bffd17 	ldw	r2,-12(fp)
   4ace8:	10800017 	ldw	r2,0(r2)
   4acec:	11000104 	addi	r4,r2,4
   4acf0:	e0bffd17 	ldw	r2,-12(fp)
   4acf4:	10800817 	ldw	r2,32(r2)
   4acf8:	1007883a 	mov	r3,r2
   4acfc:	2005883a 	mov	r2,r4
   4ad00:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   4ad04:	e13ffe17 	ldw	r4,-8(fp)
   4ad08:	e17fff17 	ldw	r5,-4(fp)
   4ad0c:	d8000015 	stw	zero,0(sp)
   4ad10:	01800174 	movhi	r6,5
   4ad14:	31ab5f04 	addi	r6,r6,-21124
   4ad18:	e1fffd17 	ldw	r7,-12(fp)
   4ad1c:	004bcfc0 	call	4bcfc <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   4ad20:	e0bffd17 	ldw	r2,-12(fp)
   4ad24:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   4ad28:	e0bffd17 	ldw	r2,-12(fp)
   4ad2c:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   4ad30:	00900034 	movhi	r2,16384
   4ad34:	10878504 	addi	r2,r2,7700
   4ad38:	10800017 	ldw	r2,0(r2)
   4ad3c:	100b883a 	mov	r5,r2
   4ad40:	01800174 	movhi	r6,5
   4ad44:	31abe904 	addi	r6,r6,-20572
   4ad48:	e1fffd17 	ldw	r7,-12(fp)
   4ad4c:	004b9580 	call	4b958 <alt_alarm_start>
   4ad50:	1004403a 	cmpge	r2,r2,zero
   4ad54:	1000041e 	bne	r2,zero,4ad68 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   4ad58:	e0fffd17 	ldw	r3,-12(fp)
   4ad5c:	00a00034 	movhi	r2,32768
   4ad60:	10bfffc4 	addi	r2,r2,-1
   4ad64:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   4ad68:	e037883a 	mov	sp,fp
   4ad6c:	dfc00117 	ldw	ra,4(sp)
   4ad70:	df000017 	ldw	fp,0(sp)
   4ad74:	dec00204 	addi	sp,sp,8
   4ad78:	f800283a 	ret

0004ad7c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   4ad7c:	defff804 	addi	sp,sp,-32
   4ad80:	df000715 	stw	fp,28(sp)
   4ad84:	df000704 	addi	fp,sp,28
   4ad88:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   4ad8c:	e0bfff17 	ldw	r2,-4(fp)
   4ad90:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
   4ad94:	e0bffe17 	ldw	r2,-8(fp)
   4ad98:	10800017 	ldw	r2,0(r2)
   4ad9c:	e0bffd15 	stw	r2,-12(fp)
   4ada0:	00000006 	br	4ada4 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   4ada4:	e0bffd17 	ldw	r2,-12(fp)
   4ada8:	10800104 	addi	r2,r2,4
   4adac:	10800037 	ldwio	r2,0(r2)
   4adb0:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   4adb4:	e0bffc17 	ldw	r2,-16(fp)
   4adb8:	1080c00c 	andi	r2,r2,768
   4adbc:	1005003a 	cmpeq	r2,r2,zero
   4adc0:	1000741e 	bne	r2,zero,4af94 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   4adc4:	e0bffc17 	ldw	r2,-16(fp)
   4adc8:	1080400c 	andi	r2,r2,256
   4adcc:	1005003a 	cmpeq	r2,r2,zero
   4add0:	1000351e 	bne	r2,zero,4aea8 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   4add4:	00800074 	movhi	r2,1
   4add8:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4addc:	e0bffe17 	ldw	r2,-8(fp)
   4ade0:	10800a17 	ldw	r2,40(r2)
   4ade4:	10800044 	addi	r2,r2,1
   4ade8:	1081ffcc 	andi	r2,r2,2047
   4adec:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
   4adf0:	e0bffe17 	ldw	r2,-8(fp)
   4adf4:	10c00b17 	ldw	r3,44(r2)
   4adf8:	e0bffa17 	ldw	r2,-24(fp)
   4adfc:	18801626 	beq	r3,r2,4ae58 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   4ae00:	e0bffd17 	ldw	r2,-12(fp)
   4ae04:	10800037 	ldwio	r2,0(r2)
   4ae08:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   4ae0c:	e0bffb17 	ldw	r2,-20(fp)
   4ae10:	10a0000c 	andi	r2,r2,32768
   4ae14:	1005003a 	cmpeq	r2,r2,zero
   4ae18:	10000f1e 	bne	r2,zero,4ae58 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   4ae1c:	e0bffe17 	ldw	r2,-8(fp)
   4ae20:	10c00a17 	ldw	r3,40(r2)
   4ae24:	e0bffb17 	ldw	r2,-20(fp)
   4ae28:	1009883a 	mov	r4,r2
   4ae2c:	e0bffe17 	ldw	r2,-8(fp)
   4ae30:	1885883a 	add	r2,r3,r2
   4ae34:	10800e04 	addi	r2,r2,56
   4ae38:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4ae3c:	e0bffe17 	ldw	r2,-8(fp)
   4ae40:	10800a17 	ldw	r2,40(r2)
   4ae44:	10800044 	addi	r2,r2,1
   4ae48:	10c1ffcc 	andi	r3,r2,2047
   4ae4c:	e0bffe17 	ldw	r2,-8(fp)
   4ae50:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   4ae54:	003fe106 	br	4addc <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   4ae58:	e0bffb17 	ldw	r2,-20(fp)
   4ae5c:	10bfffec 	andhi	r2,r2,65535
   4ae60:	1005003a 	cmpeq	r2,r2,zero
   4ae64:	1000101e 	bne	r2,zero,4aea8 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   4ae68:	e0bffe17 	ldw	r2,-8(fp)
   4ae6c:	10c00817 	ldw	r3,32(r2)
   4ae70:	00bfff84 	movi	r2,-2
   4ae74:	1886703a 	and	r3,r3,r2
   4ae78:	e0bffe17 	ldw	r2,-8(fp)
   4ae7c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   4ae80:	e0bffd17 	ldw	r2,-12(fp)
   4ae84:	11000104 	addi	r4,r2,4
   4ae88:	e0bffe17 	ldw	r2,-8(fp)
   4ae8c:	10800817 	ldw	r2,32(r2)
   4ae90:	1007883a 	mov	r3,r2
   4ae94:	2005883a 	mov	r2,r4
   4ae98:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   4ae9c:	e0bffd17 	ldw	r2,-12(fp)
   4aea0:	10800104 	addi	r2,r2,4
   4aea4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   4aea8:	e0bffc17 	ldw	r2,-16(fp)
   4aeac:	1080800c 	andi	r2,r2,512
   4aeb0:	1005003a 	cmpeq	r2,r2,zero
   4aeb4:	103fbb1e 	bne	r2,zero,4ada4 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   4aeb8:	e0bffc17 	ldw	r2,-16(fp)
   4aebc:	10bfffec 	andhi	r2,r2,65535
   4aec0:	1004d43a 	srli	r2,r2,16
   4aec4:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   4aec8:	00001506 	br	4af20 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   4aecc:	e13ffd17 	ldw	r4,-12(fp)
   4aed0:	e0bffe17 	ldw	r2,-8(fp)
   4aed4:	10c00d17 	ldw	r3,52(r2)
   4aed8:	e0bffe17 	ldw	r2,-8(fp)
   4aedc:	1885883a 	add	r2,r3,r2
   4aee0:	10820e04 	addi	r2,r2,2104
   4aee4:	10800003 	ldbu	r2,0(r2)
   4aee8:	10c03fcc 	andi	r3,r2,255
   4aeec:	18c0201c 	xori	r3,r3,128
   4aef0:	18ffe004 	addi	r3,r3,-128
   4aef4:	2005883a 	mov	r2,r4
   4aef8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4aefc:	e0bffe17 	ldw	r2,-8(fp)
   4af00:	10800d17 	ldw	r2,52(r2)
   4af04:	10800044 	addi	r2,r2,1
   4af08:	10c1ffcc 	andi	r3,r2,2047
   4af0c:	e0bffe17 	ldw	r2,-8(fp)
   4af10:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   4af14:	e0bff917 	ldw	r2,-28(fp)
   4af18:	10bfffc4 	addi	r2,r2,-1
   4af1c:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   4af20:	e0bff917 	ldw	r2,-28(fp)
   4af24:	1005003a 	cmpeq	r2,r2,zero
   4af28:	1000051e 	bne	r2,zero,4af40 <altera_avalon_jtag_uart_irq+0x1c4>
   4af2c:	e0bffe17 	ldw	r2,-8(fp)
   4af30:	10c00d17 	ldw	r3,52(r2)
   4af34:	e0bffe17 	ldw	r2,-8(fp)
   4af38:	10800c17 	ldw	r2,48(r2)
   4af3c:	18bfe31e 	bne	r3,r2,4aecc <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   4af40:	e0bff917 	ldw	r2,-28(fp)
   4af44:	1005003a 	cmpeq	r2,r2,zero
   4af48:	103f961e 	bne	r2,zero,4ada4 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   4af4c:	e0bffe17 	ldw	r2,-8(fp)
   4af50:	10c00817 	ldw	r3,32(r2)
   4af54:	00bfff44 	movi	r2,-3
   4af58:	1886703a 	and	r3,r3,r2
   4af5c:	e0bffe17 	ldw	r2,-8(fp)
   4af60:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   4af64:	e0bffe17 	ldw	r2,-8(fp)
   4af68:	10800017 	ldw	r2,0(r2)
   4af6c:	11000104 	addi	r4,r2,4
   4af70:	e0bffe17 	ldw	r2,-8(fp)
   4af74:	10800817 	ldw	r2,32(r2)
   4af78:	1007883a 	mov	r3,r2
   4af7c:	2005883a 	mov	r2,r4
   4af80:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   4af84:	e0bffd17 	ldw	r2,-12(fp)
   4af88:	10800104 	addi	r2,r2,4
   4af8c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   4af90:	003f8406 	br	4ada4 <altera_avalon_jtag_uart_irq+0x28>
}
   4af94:	e037883a 	mov	sp,fp
   4af98:	df000017 	ldw	fp,0(sp)
   4af9c:	dec00104 	addi	sp,sp,4
   4afa0:	f800283a 	ret

0004afa4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   4afa4:	defffc04 	addi	sp,sp,-16
   4afa8:	df000315 	stw	fp,12(sp)
   4afac:	df000304 	addi	fp,sp,12
   4afb0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   4afb4:	e0bfff17 	ldw	r2,-4(fp)
   4afb8:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   4afbc:	e0bffe17 	ldw	r2,-8(fp)
   4afc0:	10800017 	ldw	r2,0(r2)
   4afc4:	10800104 	addi	r2,r2,4
   4afc8:	10800037 	ldwio	r2,0(r2)
   4afcc:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   4afd0:	e0bffd17 	ldw	r2,-12(fp)
   4afd4:	1081000c 	andi	r2,r2,1024
   4afd8:	1005003a 	cmpeq	r2,r2,zero
   4afdc:	10000c1e 	bne	r2,zero,4b010 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   4afe0:	e0bffe17 	ldw	r2,-8(fp)
   4afe4:	10800017 	ldw	r2,0(r2)
   4afe8:	11000104 	addi	r4,r2,4
   4afec:	e0bffe17 	ldw	r2,-8(fp)
   4aff0:	10800817 	ldw	r2,32(r2)
   4aff4:	10810014 	ori	r2,r2,1024
   4aff8:	1007883a 	mov	r3,r2
   4affc:	2005883a 	mov	r2,r4
   4b000:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
   4b004:	e0bffe17 	ldw	r2,-8(fp)
   4b008:	10000915 	stw	zero,36(r2)
   4b00c:	00000a06 	br	4b038 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   4b010:	e0bffe17 	ldw	r2,-8(fp)
   4b014:	10c00917 	ldw	r3,36(r2)
   4b018:	00a00034 	movhi	r2,32768
   4b01c:	10bfff04 	addi	r2,r2,-4
   4b020:	10c00536 	bltu	r2,r3,4b038 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
   4b024:	e0bffe17 	ldw	r2,-8(fp)
   4b028:	10800917 	ldw	r2,36(r2)
   4b02c:	10c00044 	addi	r3,r2,1
   4b030:	e0bffe17 	ldw	r2,-8(fp)
   4b034:	10c00915 	stw	r3,36(r2)
   4b038:	00900034 	movhi	r2,16384
   4b03c:	10878504 	addi	r2,r2,7700
   4b040:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   4b044:	e037883a 	mov	sp,fp
   4b048:	df000017 	ldw	fp,0(sp)
   4b04c:	dec00104 	addi	sp,sp,4
   4b050:	f800283a 	ret

0004b054 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   4b054:	defffc04 	addi	sp,sp,-16
   4b058:	df000315 	stw	fp,12(sp)
   4b05c:	df000304 	addi	fp,sp,12
   4b060:	e13ffd15 	stw	r4,-12(fp)
   4b064:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   4b068:	00000706 	br	4b088 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
   4b06c:	e0bffe17 	ldw	r2,-8(fp)
   4b070:	1090000c 	andi	r2,r2,16384
   4b074:	1005003a 	cmpeq	r2,r2,zero
   4b078:	1000031e 	bne	r2,zero,4b088 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
   4b07c:	00bffd44 	movi	r2,-11
   4b080:	e0bfff15 	stw	r2,-4(fp)
   4b084:	00000b06 	br	4b0b4 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   4b088:	e0bffd17 	ldw	r2,-12(fp)
   4b08c:	10c00d17 	ldw	r3,52(r2)
   4b090:	e0bffd17 	ldw	r2,-12(fp)
   4b094:	10800c17 	ldw	r2,48(r2)
   4b098:	18800526 	beq	r3,r2,4b0b0 <altera_avalon_jtag_uart_close+0x5c>
   4b09c:	e0bffd17 	ldw	r2,-12(fp)
   4b0a0:	10c00917 	ldw	r3,36(r2)
   4b0a4:	e0bffd17 	ldw	r2,-12(fp)
   4b0a8:	10800117 	ldw	r2,4(r2)
   4b0ac:	18bfef36 	bltu	r3,r2,4b06c <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   4b0b0:	e03fff15 	stw	zero,-4(fp)
   4b0b4:	e0bfff17 	ldw	r2,-4(fp)
}
   4b0b8:	e037883a 	mov	sp,fp
   4b0bc:	df000017 	ldw	fp,0(sp)
   4b0c0:	dec00104 	addi	sp,sp,4
   4b0c4:	f800283a 	ret

0004b0c8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   4b0c8:	defff804 	addi	sp,sp,-32
   4b0cc:	df000715 	stw	fp,28(sp)
   4b0d0:	df000704 	addi	fp,sp,28
   4b0d4:	e13ffb15 	stw	r4,-20(fp)
   4b0d8:	e17ffc15 	stw	r5,-16(fp)
   4b0dc:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
   4b0e0:	00bff9c4 	movi	r2,-25
   4b0e4:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
   4b0e8:	e0bffc17 	ldw	r2,-16(fp)
   4b0ec:	e0bfff15 	stw	r2,-4(fp)
   4b0f0:	e0ffff17 	ldw	r3,-4(fp)
   4b0f4:	189a8060 	cmpeqi	r2,r3,27137
   4b0f8:	1000041e 	bne	r2,zero,4b10c <altera_avalon_jtag_uart_ioctl+0x44>
   4b0fc:	e0ffff17 	ldw	r3,-4(fp)
   4b100:	189a80a0 	cmpeqi	r2,r3,27138
   4b104:	10001b1e 	bne	r2,zero,4b174 <altera_avalon_jtag_uart_ioctl+0xac>
   4b108:	00002706 	br	4b1a8 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   4b10c:	e0bffb17 	ldw	r2,-20(fp)
   4b110:	10c00117 	ldw	r3,4(r2)
   4b114:	00a00034 	movhi	r2,32768
   4b118:	10bfffc4 	addi	r2,r2,-1
   4b11c:	18802226 	beq	r3,r2,4b1a8 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
   4b120:	e0bffd17 	ldw	r2,-12(fp)
   4b124:	10800017 	ldw	r2,0(r2)
   4b128:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   4b12c:	e0bff917 	ldw	r2,-28(fp)
   4b130:	10800090 	cmplti	r2,r2,2
   4b134:	1000071e 	bne	r2,zero,4b154 <altera_avalon_jtag_uart_ioctl+0x8c>
   4b138:	e0fff917 	ldw	r3,-28(fp)
   4b13c:	00a00034 	movhi	r2,32768
   4b140:	10bfffc4 	addi	r2,r2,-1
   4b144:	18800326 	beq	r3,r2,4b154 <altera_avalon_jtag_uart_ioctl+0x8c>
   4b148:	e0bff917 	ldw	r2,-28(fp)
   4b14c:	e0bffe15 	stw	r2,-8(fp)
   4b150:	00000306 	br	4b160 <altera_avalon_jtag_uart_ioctl+0x98>
   4b154:	00e00034 	movhi	r3,32768
   4b158:	18ffff84 	addi	r3,r3,-2
   4b15c:	e0fffe15 	stw	r3,-8(fp)
   4b160:	e0bffb17 	ldw	r2,-20(fp)
   4b164:	e0fffe17 	ldw	r3,-8(fp)
   4b168:	10c00115 	stw	r3,4(r2)
      rc = 0;
   4b16c:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
   4b170:	00000d06 	br	4b1a8 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   4b174:	e0bffb17 	ldw	r2,-20(fp)
   4b178:	10c00117 	ldw	r3,4(r2)
   4b17c:	00a00034 	movhi	r2,32768
   4b180:	10bfffc4 	addi	r2,r2,-1
   4b184:	18800826 	beq	r3,r2,4b1a8 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   4b188:	e13ffd17 	ldw	r4,-12(fp)
   4b18c:	e0bffb17 	ldw	r2,-20(fp)
   4b190:	10c00917 	ldw	r3,36(r2)
   4b194:	e0bffb17 	ldw	r2,-20(fp)
   4b198:	10800117 	ldw	r2,4(r2)
   4b19c:	1885803a 	cmpltu	r2,r3,r2
   4b1a0:	20800015 	stw	r2,0(r4)
      rc = 0;
   4b1a4:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
   4b1a8:	e0bffa17 	ldw	r2,-24(fp)
}
   4b1ac:	e037883a 	mov	sp,fp
   4b1b0:	df000017 	ldw	fp,0(sp)
   4b1b4:	dec00104 	addi	sp,sp,4
   4b1b8:	f800283a 	ret

0004b1bc <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   4b1bc:	defff204 	addi	sp,sp,-56
   4b1c0:	dfc00d15 	stw	ra,52(sp)
   4b1c4:	df000c15 	stw	fp,48(sp)
   4b1c8:	df000c04 	addi	fp,sp,48
   4b1cc:	e13ffb15 	stw	r4,-20(fp)
   4b1d0:	e17ffc15 	stw	r5,-16(fp)
   4b1d4:	e1bffd15 	stw	r6,-12(fp)
   4b1d8:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
   4b1dc:	e0bffc17 	ldw	r2,-16(fp)
   4b1e0:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   4b1e4:	00004806 	br	4b308 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   4b1e8:	e0bffb17 	ldw	r2,-20(fp)
   4b1ec:	10800a17 	ldw	r2,40(r2)
   4b1f0:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   4b1f4:	e0bffb17 	ldw	r2,-20(fp)
   4b1f8:	10800b17 	ldw	r2,44(r2)
   4b1fc:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
   4b200:	e0fff717 	ldw	r3,-36(fp)
   4b204:	e0bff617 	ldw	r2,-40(fp)
   4b208:	18800536 	bltu	r3,r2,4b220 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   4b20c:	e0bff717 	ldw	r2,-36(fp)
   4b210:	e0fff617 	ldw	r3,-40(fp)
   4b214:	10c5c83a 	sub	r2,r2,r3
   4b218:	e0bff815 	stw	r2,-32(fp)
   4b21c:	00000406 	br	4b230 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   4b220:	00820004 	movi	r2,2048
   4b224:	e0fff617 	ldw	r3,-40(fp)
   4b228:	10c5c83a 	sub	r2,r2,r3
   4b22c:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
   4b230:	e0bff817 	ldw	r2,-32(fp)
   4b234:	1005003a 	cmpeq	r2,r2,zero
   4b238:	10001f1e 	bne	r2,zero,4b2b8 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
   4b23c:	e0fffd17 	ldw	r3,-12(fp)
   4b240:	e0bff817 	ldw	r2,-32(fp)
   4b244:	1880022e 	bgeu	r3,r2,4b250 <altera_avalon_jtag_uart_read+0x94>
        n = space;
   4b248:	e0bffd17 	ldw	r2,-12(fp)
   4b24c:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   4b250:	e0bffb17 	ldw	r2,-20(fp)
   4b254:	10c00e04 	addi	r3,r2,56
   4b258:	e0bff617 	ldw	r2,-40(fp)
   4b25c:	1887883a 	add	r3,r3,r2
   4b260:	e0bffa17 	ldw	r2,-24(fp)
   4b264:	1009883a 	mov	r4,r2
   4b268:	180b883a 	mov	r5,r3
   4b26c:	e1bff817 	ldw	r6,-32(fp)
   4b270:	0045cc80 	call	45cc8 <memcpy>
      ptr   += n;
   4b274:	e0fff817 	ldw	r3,-32(fp)
   4b278:	e0bffa17 	ldw	r2,-24(fp)
   4b27c:	10c5883a 	add	r2,r2,r3
   4b280:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
   4b284:	e0fffd17 	ldw	r3,-12(fp)
   4b288:	e0bff817 	ldw	r2,-32(fp)
   4b28c:	1885c83a 	sub	r2,r3,r2
   4b290:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4b294:	e0fff617 	ldw	r3,-40(fp)
   4b298:	e0bff817 	ldw	r2,-32(fp)
   4b29c:	1885883a 	add	r2,r3,r2
   4b2a0:	10c1ffcc 	andi	r3,r2,2047
   4b2a4:	e0bffb17 	ldw	r2,-20(fp)
   4b2a8:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   4b2ac:	e0bffd17 	ldw	r2,-12(fp)
   4b2b0:	10800048 	cmpgei	r2,r2,1
   4b2b4:	103fcc1e 	bne	r2,zero,4b1e8 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
   4b2b8:	e0fffa17 	ldw	r3,-24(fp)
   4b2bc:	e0bffc17 	ldw	r2,-16(fp)
   4b2c0:	1880141e 	bne	r3,r2,4b314 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   4b2c4:	e0bffe17 	ldw	r2,-8(fp)
   4b2c8:	1090000c 	andi	r2,r2,16384
   4b2cc:	1004c03a 	cmpne	r2,r2,zero
   4b2d0:	1000101e 	bne	r2,zero,4b314 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   4b2d4:	e0bffb17 	ldw	r2,-20(fp)
   4b2d8:	10c00a17 	ldw	r3,40(r2)
   4b2dc:	e0bff717 	ldw	r2,-36(fp)
   4b2e0:	1880051e 	bne	r3,r2,4b2f8 <altera_avalon_jtag_uart_read+0x13c>
   4b2e4:	e0bffb17 	ldw	r2,-20(fp)
   4b2e8:	10c00917 	ldw	r3,36(r2)
   4b2ec:	e0bffb17 	ldw	r2,-20(fp)
   4b2f0:	10800117 	ldw	r2,4(r2)
   4b2f4:	18bff736 	bltu	r3,r2,4b2d4 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   4b2f8:	e0bffb17 	ldw	r2,-20(fp)
   4b2fc:	10c00a17 	ldw	r3,40(r2)
   4b300:	e0bff717 	ldw	r2,-36(fp)
   4b304:	18800326 	beq	r3,r2,4b314 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   4b308:	e0bffd17 	ldw	r2,-12(fp)
   4b30c:	10800048 	cmpgei	r2,r2,1
   4b310:	103fb51e 	bne	r2,zero,4b1e8 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   4b314:	e0fffa17 	ldw	r3,-24(fp)
   4b318:	e0bffc17 	ldw	r2,-16(fp)
   4b31c:	18801926 	beq	r3,r2,4b384 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4b320:	0005303a 	rdctl	r2,status
   4b324:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4b328:	e0fff517 	ldw	r3,-44(fp)
   4b32c:	00bfff84 	movi	r2,-2
   4b330:	1884703a 	and	r2,r3,r2
   4b334:	1001703a 	wrctl	status,r2
  
  return context;
   4b338:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   4b33c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   4b340:	e0bffb17 	ldw	r2,-20(fp)
   4b344:	10800817 	ldw	r2,32(r2)
   4b348:	10c00054 	ori	r3,r2,1
   4b34c:	e0bffb17 	ldw	r2,-20(fp)
   4b350:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   4b354:	e0bffb17 	ldw	r2,-20(fp)
   4b358:	10800017 	ldw	r2,0(r2)
   4b35c:	11000104 	addi	r4,r2,4
   4b360:	e0bffb17 	ldw	r2,-20(fp)
   4b364:	10800817 	ldw	r2,32(r2)
   4b368:	1007883a 	mov	r3,r2
   4b36c:	2005883a 	mov	r2,r4
   4b370:	10c00035 	stwio	r3,0(r2)
   4b374:	e0bff917 	ldw	r2,-28(fp)
   4b378:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4b37c:	e0bff417 	ldw	r2,-48(fp)
   4b380:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   4b384:	e0fffa17 	ldw	r3,-24(fp)
   4b388:	e0bffc17 	ldw	r2,-16(fp)
   4b38c:	18800526 	beq	r3,r2,4b3a4 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
   4b390:	e0fffa17 	ldw	r3,-24(fp)
   4b394:	e0bffc17 	ldw	r2,-16(fp)
   4b398:	1887c83a 	sub	r3,r3,r2
   4b39c:	e0ffff15 	stw	r3,-4(fp)
   4b3a0:	00000906 	br	4b3c8 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
   4b3a4:	e0bffe17 	ldw	r2,-8(fp)
   4b3a8:	1090000c 	andi	r2,r2,16384
   4b3ac:	1005003a 	cmpeq	r2,r2,zero
   4b3b0:	1000031e 	bne	r2,zero,4b3c0 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   4b3b4:	00bffd44 	movi	r2,-11
   4b3b8:	e0bfff15 	stw	r2,-4(fp)
   4b3bc:	00000206 	br	4b3c8 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
   4b3c0:	00bffec4 	movi	r2,-5
   4b3c4:	e0bfff15 	stw	r2,-4(fp)
   4b3c8:	e0bfff17 	ldw	r2,-4(fp)
}
   4b3cc:	e037883a 	mov	sp,fp
   4b3d0:	dfc00117 	ldw	ra,4(sp)
   4b3d4:	df000017 	ldw	fp,0(sp)
   4b3d8:	dec00204 	addi	sp,sp,8
   4b3dc:	f800283a 	ret

0004b3e0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   4b3e0:	defff204 	addi	sp,sp,-56
   4b3e4:	dfc00d15 	stw	ra,52(sp)
   4b3e8:	df000c15 	stw	fp,48(sp)
   4b3ec:	df000c04 	addi	fp,sp,48
   4b3f0:	e13ffb15 	stw	r4,-20(fp)
   4b3f4:	e17ffc15 	stw	r5,-16(fp)
   4b3f8:	e1bffd15 	stw	r6,-12(fp)
   4b3fc:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   4b400:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   4b404:	e0bffc17 	ldw	r2,-16(fp)
   4b408:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   4b40c:	00003a06 	br	4b4f8 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   4b410:	e0bffb17 	ldw	r2,-20(fp)
   4b414:	10800c17 	ldw	r2,48(r2)
   4b418:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
   4b41c:	e0bffb17 	ldw	r2,-20(fp)
   4b420:	10800d17 	ldw	r2,52(r2)
   4b424:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
   4b428:	e0fffa17 	ldw	r3,-24(fp)
   4b42c:	e0bff917 	ldw	r2,-28(fp)
   4b430:	1880062e 	bgeu	r3,r2,4b44c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   4b434:	e0fff917 	ldw	r3,-28(fp)
   4b438:	e0bffa17 	ldw	r2,-24(fp)
   4b43c:	1885c83a 	sub	r2,r3,r2
   4b440:	10bfffc4 	addi	r2,r2,-1
   4b444:	e0bff815 	stw	r2,-32(fp)
   4b448:	00000c06 	br	4b47c <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
   4b44c:	e0bff917 	ldw	r2,-28(fp)
   4b450:	1005003a 	cmpeq	r2,r2,zero
   4b454:	1000051e 	bne	r2,zero,4b46c <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   4b458:	00820004 	movi	r2,2048
   4b45c:	e0fffa17 	ldw	r3,-24(fp)
   4b460:	10c5c83a 	sub	r2,r2,r3
   4b464:	e0bff815 	stw	r2,-32(fp)
   4b468:	00000406 	br	4b47c <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   4b46c:	0081ffc4 	movi	r2,2047
   4b470:	e0fffa17 	ldw	r3,-24(fp)
   4b474:	10c5c83a 	sub	r2,r2,r3
   4b478:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
   4b47c:	e0bff817 	ldw	r2,-32(fp)
   4b480:	1005003a 	cmpeq	r2,r2,zero
   4b484:	10001f1e 	bne	r2,zero,4b504 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
   4b488:	e0fffd17 	ldw	r3,-12(fp)
   4b48c:	e0bff817 	ldw	r2,-32(fp)
   4b490:	1880022e 	bgeu	r3,r2,4b49c <altera_avalon_jtag_uart_write+0xbc>
        n = count;
   4b494:	e0bffd17 	ldw	r2,-12(fp)
   4b498:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   4b49c:	e0bffb17 	ldw	r2,-20(fp)
   4b4a0:	10c20e04 	addi	r3,r2,2104
   4b4a4:	e0bffa17 	ldw	r2,-24(fp)
   4b4a8:	1885883a 	add	r2,r3,r2
   4b4ac:	e0fffc17 	ldw	r3,-16(fp)
   4b4b0:	1009883a 	mov	r4,r2
   4b4b4:	180b883a 	mov	r5,r3
   4b4b8:	e1bff817 	ldw	r6,-32(fp)
   4b4bc:	0045cc80 	call	45cc8 <memcpy>
      ptr   += n;
   4b4c0:	e0fff817 	ldw	r3,-32(fp)
   4b4c4:	e0bffc17 	ldw	r2,-16(fp)
   4b4c8:	10c5883a 	add	r2,r2,r3
   4b4cc:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
   4b4d0:	e0fffd17 	ldw	r3,-12(fp)
   4b4d4:	e0bff817 	ldw	r2,-32(fp)
   4b4d8:	1885c83a 	sub	r2,r3,r2
   4b4dc:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4b4e0:	e0fffa17 	ldw	r3,-24(fp)
   4b4e4:	e0bff817 	ldw	r2,-32(fp)
   4b4e8:	1885883a 	add	r2,r3,r2
   4b4ec:	10c1ffcc 	andi	r3,r2,2047
   4b4f0:	e0bffb17 	ldw	r2,-20(fp)
   4b4f4:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   4b4f8:	e0bffd17 	ldw	r2,-12(fp)
   4b4fc:	10800048 	cmpgei	r2,r2,1
   4b500:	103fc31e 	bne	r2,zero,4b410 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4b504:	0005303a 	rdctl	r2,status
   4b508:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4b50c:	e0fff517 	ldw	r3,-44(fp)
   4b510:	00bfff84 	movi	r2,-2
   4b514:	1884703a 	and	r2,r3,r2
   4b518:	1001703a 	wrctl	status,r2
  
  return context;
   4b51c:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   4b520:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   4b524:	e0bffb17 	ldw	r2,-20(fp)
   4b528:	10800817 	ldw	r2,32(r2)
   4b52c:	10c00094 	ori	r3,r2,2
   4b530:	e0bffb17 	ldw	r2,-20(fp)
   4b534:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   4b538:	e0bffb17 	ldw	r2,-20(fp)
   4b53c:	10800017 	ldw	r2,0(r2)
   4b540:	11000104 	addi	r4,r2,4
   4b544:	e0bffb17 	ldw	r2,-20(fp)
   4b548:	10800817 	ldw	r2,32(r2)
   4b54c:	1007883a 	mov	r3,r2
   4b550:	2005883a 	mov	r2,r4
   4b554:	10c00035 	stwio	r3,0(r2)
   4b558:	e0bff717 	ldw	r2,-36(fp)
   4b55c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4b560:	e0bff417 	ldw	r2,-48(fp)
   4b564:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   4b568:	e0bffd17 	ldw	r2,-12(fp)
   4b56c:	10800050 	cmplti	r2,r2,1
   4b570:	1000111e 	bne	r2,zero,4b5b8 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
   4b574:	e0bffe17 	ldw	r2,-8(fp)
   4b578:	1090000c 	andi	r2,r2,16384
   4b57c:	1004c03a 	cmpne	r2,r2,zero
   4b580:	1000101e 	bne	r2,zero,4b5c4 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   4b584:	e0bffb17 	ldw	r2,-20(fp)
   4b588:	10c00d17 	ldw	r3,52(r2)
   4b58c:	e0bff917 	ldw	r2,-28(fp)
   4b590:	1880051e 	bne	r3,r2,4b5a8 <altera_avalon_jtag_uart_write+0x1c8>
   4b594:	e0bffb17 	ldw	r2,-20(fp)
   4b598:	10c00917 	ldw	r3,36(r2)
   4b59c:	e0bffb17 	ldw	r2,-20(fp)
   4b5a0:	10800117 	ldw	r2,4(r2)
   4b5a4:	18bff736 	bltu	r3,r2,4b584 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
   4b5a8:	e0bffb17 	ldw	r2,-20(fp)
   4b5ac:	10c00d17 	ldw	r3,52(r2)
   4b5b0:	e0bff917 	ldw	r2,-28(fp)
   4b5b4:	18800326 	beq	r3,r2,4b5c4 <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
   4b5b8:	e0bffd17 	ldw	r2,-12(fp)
   4b5bc:	10800048 	cmpgei	r2,r2,1
   4b5c0:	103fcd1e 	bne	r2,zero,4b4f8 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   4b5c4:	e0fffc17 	ldw	r3,-16(fp)
   4b5c8:	e0bff617 	ldw	r2,-40(fp)
   4b5cc:	18800526 	beq	r3,r2,4b5e4 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
   4b5d0:	e0fffc17 	ldw	r3,-16(fp)
   4b5d4:	e0bff617 	ldw	r2,-40(fp)
   4b5d8:	1887c83a 	sub	r3,r3,r2
   4b5dc:	e0ffff15 	stw	r3,-4(fp)
   4b5e0:	00000906 	br	4b608 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
   4b5e4:	e0bffe17 	ldw	r2,-8(fp)
   4b5e8:	1090000c 	andi	r2,r2,16384
   4b5ec:	1005003a 	cmpeq	r2,r2,zero
   4b5f0:	1000031e 	bne	r2,zero,4b600 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
   4b5f4:	00bffd44 	movi	r2,-11
   4b5f8:	e0bfff15 	stw	r2,-4(fp)
   4b5fc:	00000206 	br	4b608 <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
   4b600:	00bffec4 	movi	r2,-5
   4b604:	e0bfff15 	stw	r2,-4(fp)
   4b608:	e0bfff17 	ldw	r2,-4(fp)
}
   4b60c:	e037883a 	mov	sp,fp
   4b610:	dfc00117 	ldw	ra,4(sp)
   4b614:	df000017 	ldw	fp,0(sp)
   4b618:	dec00204 	addi	sp,sp,8
   4b61c:	f800283a 	ret

0004b620 <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
   4b620:	defff404 	addi	sp,sp,-48
   4b624:	df000b15 	stw	fp,44(sp)
   4b628:	df000b04 	addi	fp,sp,44
   4b62c:	e13ffc15 	stw	r4,-16(fp)
   4b630:	e17ffd15 	stw	r5,-12(fp)
   4b634:	e1bffe15 	stw	r6,-8(fp)
   4b638:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
   4b63c:	e0fffe17 	ldw	r3,-8(fp)
   4b640:	e0bfff17 	ldw	r2,-4(fp)
   4b644:	10c5883a 	add	r2,r2,r3
   4b648:	e0bffb15 	stw	r2,-20(fp)
  alt_u8 * read_end = read_data + read_length;
   4b64c:	e0c00117 	ldw	r3,4(fp)
   4b650:	e0800217 	ldw	r2,8(fp)
   4b654:	10c5883a 	add	r2,r2,r3
   4b658:	e0bffa15 	stw	r2,-24(fp)

  alt_u32 write_zeros = read_length;
   4b65c:	e0800117 	ldw	r2,4(fp)
   4b660:	e0bff915 	stw	r2,-28(fp)
  alt_u32 read_ignore = write_length;
   4b664:	e0bffe17 	ldw	r2,-8(fp)
   4b668:	e0bff815 	stw	r2,-32(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
   4b66c:	00800044 	movi	r2,1
   4b670:	e0bff615 	stw	r2,-40(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
   4b674:	e0bffc17 	ldw	r2,-16(fp)
   4b678:	11000504 	addi	r4,r2,20
   4b67c:	e0fffd17 	ldw	r3,-12(fp)
   4b680:	00800044 	movi	r2,1
   4b684:	10c6983a 	sll	r3,r2,r3
   4b688:	2005883a 	mov	r2,r4
   4b68c:	10c00035 	stwio	r3,0(r2)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
   4b690:	e0800317 	ldw	r2,12(fp)
   4b694:	1080008c 	andi	r2,r2,2
   4b698:	1004c03a 	cmpne	r2,r2,zero
   4b69c:	1000051e 	bne	r2,zero,4b6b4 <alt_avalon_spi_command+0x94>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
   4b6a0:	e0bffc17 	ldw	r2,-16(fp)
   4b6a4:	10800304 	addi	r2,r2,12
   4b6a8:	1007883a 	mov	r3,r2
   4b6ac:	00810004 	movi	r2,1024
   4b6b0:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
   4b6b4:	e0bffc17 	ldw	r2,-16(fp)
   4b6b8:	10800037 	ldwio	r2,0(r2)
   4b6bc:	00000006 	br	4b6c0 <alt_avalon_spi_command+0xa0>
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
   4b6c0:	e0bffc17 	ldw	r2,-16(fp)
   4b6c4:	10800204 	addi	r2,r2,8
   4b6c8:	10800037 	ldwio	r2,0(r2)
   4b6cc:	e0bff715 	stw	r2,-36(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
   4b6d0:	e0bff717 	ldw	r2,-36(fp)
   4b6d4:	1080100c 	andi	r2,r2,64
   4b6d8:	1005003a 	cmpeq	r2,r2,zero
   4b6dc:	1000031e 	bne	r2,zero,4b6ec <alt_avalon_spi_command+0xcc>
   4b6e0:	e0bff617 	ldw	r2,-40(fp)
   4b6e4:	1004c03a 	cmpne	r2,r2,zero
   4b6e8:	1000041e 	bne	r2,zero,4b6fc <alt_avalon_spi_command+0xdc>
   4b6ec:	e0bff717 	ldw	r2,-36(fp)
   4b6f0:	1080200c 	andi	r2,r2,128
   4b6f4:	1005003a 	cmpeq	r2,r2,zero
   4b6f8:	103ff11e 	bne	r2,zero,4b6c0 <alt_avalon_spi_command+0xa0>

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
   4b6fc:	e0bff717 	ldw	r2,-36(fp)
   4b700:	1080100c 	andi	r2,r2,64
   4b704:	1005003a 	cmpeq	r2,r2,zero
   4b708:	1000201e 	bne	r2,zero,4b78c <alt_avalon_spi_command+0x16c>
   4b70c:	e0bff617 	ldw	r2,-40(fp)
   4b710:	10800050 	cmplti	r2,r2,1
   4b714:	10001d1e 	bne	r2,zero,4b78c <alt_avalon_spi_command+0x16c>
    {
      credits--;
   4b718:	e0bff617 	ldw	r2,-40(fp)
   4b71c:	10bfffc4 	addi	r2,r2,-1
   4b720:	e0bff615 	stw	r2,-40(fp)

      if (write_data < write_end)
   4b724:	e0ffff17 	ldw	r3,-4(fp)
   4b728:	e0bffb17 	ldw	r2,-20(fp)
   4b72c:	18800b2e 	bgeu	r3,r2,4b75c <alt_avalon_spi_command+0x13c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
   4b730:	e0bffc17 	ldw	r2,-16(fp)
   4b734:	11000104 	addi	r4,r2,4
   4b738:	e0bfff17 	ldw	r2,-4(fp)
   4b73c:	10800003 	ldbu	r2,0(r2)
   4b740:	10c03fcc 	andi	r3,r2,255
   4b744:	e0bfff17 	ldw	r2,-4(fp)
   4b748:	10800044 	addi	r2,r2,1
   4b74c:	e0bfff15 	stw	r2,-4(fp)
   4b750:	2005883a 	mov	r2,r4
   4b754:	10c00035 	stwio	r3,0(r2)
   4b758:	00000c06 	br	4b78c <alt_avalon_spi_command+0x16c>
      else if (write_zeros > 0)
   4b75c:	e0bff917 	ldw	r2,-28(fp)
   4b760:	1005003a 	cmpeq	r2,r2,zero
   4b764:	1000071e 	bne	r2,zero,4b784 <alt_avalon_spi_command+0x164>
      {
        write_zeros--;
   4b768:	e0bff917 	ldw	r2,-28(fp)
   4b76c:	10bfffc4 	addi	r2,r2,-1
   4b770:	e0bff915 	stw	r2,-28(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
   4b774:	e0bffc17 	ldw	r2,-16(fp)
   4b778:	10800104 	addi	r2,r2,4
   4b77c:	10000035 	stwio	zero,0(r2)
   4b780:	00000206 	br	4b78c <alt_avalon_spi_command+0x16c>
      }
      else
        credits = -1024;
   4b784:	00bf0004 	movi	r2,-1024
   4b788:	e0bff615 	stw	r2,-40(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
   4b78c:	e0bff717 	ldw	r2,-36(fp)
   4b790:	1080200c 	andi	r2,r2,128
   4b794:	1005003a 	cmpeq	r2,r2,zero
   4b798:	103fc91e 	bne	r2,zero,4b6c0 <alt_avalon_spi_command+0xa0>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
   4b79c:	e0bffc17 	ldw	r2,-16(fp)
   4b7a0:	10800037 	ldwio	r2,0(r2)
   4b7a4:	e0bff515 	stw	r2,-44(fp)

      if (read_ignore > 0)
   4b7a8:	e0bff817 	ldw	r2,-32(fp)
   4b7ac:	1005003a 	cmpeq	r2,r2,zero
   4b7b0:	1000041e 	bne	r2,zero,4b7c4 <alt_avalon_spi_command+0x1a4>
        read_ignore--;
   4b7b4:	e0bff817 	ldw	r2,-32(fp)
   4b7b8:	10bfffc4 	addi	r2,r2,-1
   4b7bc:	e0bff815 	stw	r2,-32(fp)
   4b7c0:	00000706 	br	4b7e0 <alt_avalon_spi_command+0x1c0>
      else
        *read_data++ = (alt_u8)rxdata;
   4b7c4:	e0bff517 	ldw	r2,-44(fp)
   4b7c8:	1007883a 	mov	r3,r2
   4b7cc:	e0800217 	ldw	r2,8(fp)
   4b7d0:	10c00005 	stb	r3,0(r2)
   4b7d4:	e0800217 	ldw	r2,8(fp)
   4b7d8:	10800044 	addi	r2,r2,1
   4b7dc:	e0800215 	stw	r2,8(fp)
      credits++;
   4b7e0:	e0bff617 	ldw	r2,-40(fp)
   4b7e4:	10800044 	addi	r2,r2,1
   4b7e8:	e0bff615 	stw	r2,-40(fp)

      if (read_ignore == 0 && read_data == read_end)
   4b7ec:	e0bff817 	ldw	r2,-32(fp)
   4b7f0:	1004c03a 	cmpne	r2,r2,zero
   4b7f4:	103fb21e 	bne	r2,zero,4b6c0 <alt_avalon_spi_command+0xa0>
   4b7f8:	e0c00217 	ldw	r3,8(fp)
   4b7fc:	e0bffa17 	ldw	r2,-24(fp)
   4b800:	18800126 	beq	r3,r2,4b808 <alt_avalon_spi_command+0x1e8>
        break;
    }
    
  }
   4b804:	003fae06 	br	4b6c0 <alt_avalon_spi_command+0xa0>

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
   4b808:	e0bffc17 	ldw	r2,-16(fp)
   4b80c:	10800204 	addi	r2,r2,8
   4b810:	10800037 	ldwio	r2,0(r2)
   4b814:	e0bff715 	stw	r2,-36(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
   4b818:	e0bff717 	ldw	r2,-36(fp)
   4b81c:	1080080c 	andi	r2,r2,32
   4b820:	1005003a 	cmpeq	r2,r2,zero
   4b824:	103ff81e 	bne	r2,zero,4b808 <alt_avalon_spi_command+0x1e8>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
   4b828:	e0800317 	ldw	r2,12(fp)
   4b82c:	1080004c 	andi	r2,r2,1
   4b830:	1004c03a 	cmpne	r2,r2,zero
   4b834:	1000031e 	bne	r2,zero,4b844 <alt_avalon_spi_command+0x224>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
   4b838:	e0bffc17 	ldw	r2,-16(fp)
   4b83c:	10800304 	addi	r2,r2,12
   4b840:	10000035 	stwio	zero,0(r2)

  return read_length;
   4b844:	e0800117 	ldw	r2,4(fp)
}
   4b848:	e037883a 	mov	sp,fp
   4b84c:	df000017 	ldw	fp,0(sp)
   4b850:	dec00104 	addi	sp,sp,4
   4b854:	f800283a 	ret

0004b858 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   4b858:	defffa04 	addi	sp,sp,-24
   4b85c:	dfc00515 	stw	ra,20(sp)
   4b860:	df000415 	stw	fp,16(sp)
   4b864:	df000404 	addi	fp,sp,16
   4b868:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   4b86c:	e0bfff17 	ldw	r2,-4(fp)
   4b870:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   4b874:	e0bfff17 	ldw	r2,-4(fp)
   4b878:	10800104 	addi	r2,r2,4
   4b87c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4b880:	0005303a 	rdctl	r2,status
   4b884:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4b888:	e0fffd17 	ldw	r3,-12(fp)
   4b88c:	00bfff84 	movi	r2,-2
   4b890:	1884703a 	and	r2,r3,r2
   4b894:	1001703a 	wrctl	status,r2
  
  return context;
   4b898:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   4b89c:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
   4b8a0:	004c4600 	call	4c460 <alt_tick>
   4b8a4:	e0bffe17 	ldw	r2,-8(fp)
   4b8a8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4b8ac:	e0bffc17 	ldw	r2,-16(fp)
   4b8b0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   4b8b4:	e037883a 	mov	sp,fp
   4b8b8:	dfc00117 	ldw	ra,4(sp)
   4b8bc:	df000017 	ldw	fp,0(sp)
   4b8c0:	dec00204 	addi	sp,sp,8
   4b8c4:	f800283a 	ret

0004b8c8 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   4b8c8:	defff804 	addi	sp,sp,-32
   4b8cc:	dfc00715 	stw	ra,28(sp)
   4b8d0:	df000615 	stw	fp,24(sp)
   4b8d4:	df000604 	addi	fp,sp,24
   4b8d8:	e13ffc15 	stw	r4,-16(fp)
   4b8dc:	e17ffd15 	stw	r5,-12(fp)
   4b8e0:	e1bffe15 	stw	r6,-8(fp)
   4b8e4:	e1ffff15 	stw	r7,-4(fp)
   4b8e8:	e0bfff17 	ldw	r2,-4(fp)
   4b8ec:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   4b8f0:	00900034 	movhi	r2,16384
   4b8f4:	10878504 	addi	r2,r2,7700
   4b8f8:	10800017 	ldw	r2,0(r2)
   4b8fc:	1004c03a 	cmpne	r2,r2,zero
   4b900:	1000041e 	bne	r2,zero,4b914 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
   4b904:	00d00034 	movhi	r3,16384
   4b908:	18c78504 	addi	r3,r3,7700
   4b90c:	e0bffb17 	ldw	r2,-20(fp)
   4b910:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   4b914:	e0bffc17 	ldw	r2,-16(fp)
   4b918:	10800104 	addi	r2,r2,4
   4b91c:	1007883a 	mov	r3,r2
   4b920:	008001c4 	movi	r2,7
   4b924:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   4b928:	d8000015 	stw	zero,0(sp)
   4b92c:	e13ffd17 	ldw	r4,-12(fp)
   4b930:	e17ffe17 	ldw	r5,-8(fp)
   4b934:	01800174 	movhi	r6,5
   4b938:	31ae1604 	addi	r6,r6,-18344
   4b93c:	e1fffc17 	ldw	r7,-16(fp)
   4b940:	004bcfc0 	call	4bcfc <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   4b944:	e037883a 	mov	sp,fp
   4b948:	dfc00117 	ldw	ra,4(sp)
   4b94c:	df000017 	ldw	fp,0(sp)
   4b950:	dec00204 	addi	sp,sp,8
   4b954:	f800283a 	ret

0004b958 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   4b958:	defff404 	addi	sp,sp,-48
   4b95c:	df000b15 	stw	fp,44(sp)
   4b960:	df000b04 	addi	fp,sp,44
   4b964:	e13ffb15 	stw	r4,-20(fp)
   4b968:	e17ffc15 	stw	r5,-16(fp)
   4b96c:	e1bffd15 	stw	r6,-12(fp)
   4b970:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   4b974:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   4b978:	00900034 	movhi	r2,16384
   4b97c:	10878504 	addi	r2,r2,7700
   4b980:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   4b984:	1005003a 	cmpeq	r2,r2,zero
   4b988:	1000411e 	bne	r2,zero,4ba90 <alt_alarm_start+0x138>
  {
    if (alarm)
   4b98c:	e0bffb17 	ldw	r2,-20(fp)
   4b990:	1005003a 	cmpeq	r2,r2,zero
   4b994:	10003b1e 	bne	r2,zero,4ba84 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
   4b998:	e0fffb17 	ldw	r3,-20(fp)
   4b99c:	e0bffd17 	ldw	r2,-12(fp)
   4b9a0:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
   4b9a4:	e0fffb17 	ldw	r3,-20(fp)
   4b9a8:	e0bffe17 	ldw	r2,-8(fp)
   4b9ac:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4b9b0:	0005303a 	rdctl	r2,status
   4b9b4:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4b9b8:	e0fff817 	ldw	r3,-32(fp)
   4b9bc:	00bfff84 	movi	r2,-2
   4b9c0:	1884703a 	and	r2,r3,r2
   4b9c4:	1001703a 	wrctl	status,r2
  
  return context;
   4b9c8:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   4b9cc:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   4b9d0:	00900034 	movhi	r2,16384
   4b9d4:	10878604 	addi	r2,r2,7704
   4b9d8:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   4b9dc:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   4b9e0:	e0fffc17 	ldw	r3,-16(fp)
   4b9e4:	e0bff917 	ldw	r2,-28(fp)
   4b9e8:	1885883a 	add	r2,r3,r2
   4b9ec:	10c00044 	addi	r3,r2,1
   4b9f0:	e0bffb17 	ldw	r2,-20(fp)
   4b9f4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   4b9f8:	e0bffb17 	ldw	r2,-20(fp)
   4b9fc:	10c00217 	ldw	r3,8(r2)
   4ba00:	e0bff917 	ldw	r2,-28(fp)
   4ba04:	1880042e 	bgeu	r3,r2,4ba18 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
   4ba08:	e0fffb17 	ldw	r3,-20(fp)
   4ba0c:	00800044 	movi	r2,1
   4ba10:	18800405 	stb	r2,16(r3)
   4ba14:	00000206 	br	4ba20 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
   4ba18:	e0bffb17 	ldw	r2,-20(fp)
   4ba1c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   4ba20:	e0fffb17 	ldw	r3,-20(fp)
   4ba24:	00900034 	movhi	r2,16384
   4ba28:	10877604 	addi	r2,r2,7640
   4ba2c:	e0bff615 	stw	r2,-40(fp)
   4ba30:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   4ba34:	e0fff717 	ldw	r3,-36(fp)
   4ba38:	e0bff617 	ldw	r2,-40(fp)
   4ba3c:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   4ba40:	e0bff617 	ldw	r2,-40(fp)
   4ba44:	10c00017 	ldw	r3,0(r2)
   4ba48:	e0bff717 	ldw	r2,-36(fp)
   4ba4c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   4ba50:	e0bff617 	ldw	r2,-40(fp)
   4ba54:	10c00017 	ldw	r3,0(r2)
   4ba58:	e0bff717 	ldw	r2,-36(fp)
   4ba5c:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   4ba60:	e0fff617 	ldw	r3,-40(fp)
   4ba64:	e0bff717 	ldw	r2,-36(fp)
   4ba68:	18800015 	stw	r2,0(r3)
   4ba6c:	e0bffa17 	ldw	r2,-24(fp)
   4ba70:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4ba74:	e0bff517 	ldw	r2,-44(fp)
   4ba78:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   4ba7c:	e03fff15 	stw	zero,-4(fp)
   4ba80:	00000506 	br	4ba98 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
   4ba84:	00bffa84 	movi	r2,-22
   4ba88:	e0bfff15 	stw	r2,-4(fp)
   4ba8c:	00000206 	br	4ba98 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
   4ba90:	00bfde84 	movi	r2,-134
   4ba94:	e0bfff15 	stw	r2,-4(fp)
   4ba98:	e0bfff17 	ldw	r2,-4(fp)
  }
}
   4ba9c:	e037883a 	mov	sp,fp
   4baa0:	df000017 	ldw	fp,0(sp)
   4baa4:	dec00104 	addi	sp,sp,4
   4baa8:	f800283a 	ret

0004baac <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   4baac:	defffe04 	addi	sp,sp,-8
   4bab0:	df000115 	stw	fp,4(sp)
   4bab4:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   4bab8:	e03fff15 	stw	zero,-4(fp)
   4babc:	00000506 	br	4bad4 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   4bac0:	e0bfff17 	ldw	r2,-4(fp)
   4bac4:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   4bac8:	e0bfff17 	ldw	r2,-4(fp)
   4bacc:	10800804 	addi	r2,r2,32
   4bad0:	e0bfff15 	stw	r2,-4(fp)
   4bad4:	e0bfff17 	ldw	r2,-4(fp)
   4bad8:	10820030 	cmpltui	r2,r2,2048
   4badc:	103ff81e 	bne	r2,zero,4bac0 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   4bae0:	e037883a 	mov	sp,fp
   4bae4:	df000017 	ldw	fp,0(sp)
   4bae8:	dec00104 	addi	sp,sp,4
   4baec:	f800283a 	ret

0004baf0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   4baf0:	defff904 	addi	sp,sp,-28
   4baf4:	dfc00615 	stw	ra,24(sp)
   4baf8:	df000515 	stw	fp,20(sp)
   4bafc:	df000504 	addi	fp,sp,20
   4bb00:	e13ffd15 	stw	r4,-12(fp)
   4bb04:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   4bb08:	e0bffd17 	ldw	r2,-12(fp)
   4bb0c:	1005003a 	cmpeq	r2,r2,zero
   4bb10:	1000041e 	bne	r2,zero,4bb24 <alt_dev_llist_insert+0x34>
   4bb14:	e0bffd17 	ldw	r2,-12(fp)
   4bb18:	10800217 	ldw	r2,8(r2)
   4bb1c:	1004c03a 	cmpne	r2,r2,zero
   4bb20:	1000071e 	bne	r2,zero,4bb40 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
   4bb24:	004bba40 	call	4bba4 <alt_get_errno>
   4bb28:	1007883a 	mov	r3,r2
   4bb2c:	00800584 	movi	r2,22
   4bb30:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   4bb34:	00bffa84 	movi	r2,-22
   4bb38:	e0bfff15 	stw	r2,-4(fp)
   4bb3c:	00001306 	br	4bb8c <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   4bb40:	e0fffd17 	ldw	r3,-12(fp)
   4bb44:	e0bffe17 	ldw	r2,-8(fp)
   4bb48:	e0bffb15 	stw	r2,-20(fp)
   4bb4c:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   4bb50:	e0fffc17 	ldw	r3,-16(fp)
   4bb54:	e0bffb17 	ldw	r2,-20(fp)
   4bb58:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   4bb5c:	e0bffb17 	ldw	r2,-20(fp)
   4bb60:	10c00017 	ldw	r3,0(r2)
   4bb64:	e0bffc17 	ldw	r2,-16(fp)
   4bb68:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   4bb6c:	e0bffb17 	ldw	r2,-20(fp)
   4bb70:	10c00017 	ldw	r3,0(r2)
   4bb74:	e0bffc17 	ldw	r2,-16(fp)
   4bb78:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   4bb7c:	e0fffb17 	ldw	r3,-20(fp)
   4bb80:	e0bffc17 	ldw	r2,-16(fp)
   4bb84:	18800015 	stw	r2,0(r3)

  return 0;  
   4bb88:	e03fff15 	stw	zero,-4(fp)
   4bb8c:	e0bfff17 	ldw	r2,-4(fp)
}
   4bb90:	e037883a 	mov	sp,fp
   4bb94:	dfc00117 	ldw	ra,4(sp)
   4bb98:	df000017 	ldw	fp,0(sp)
   4bb9c:	dec00204 	addi	sp,sp,8
   4bba0:	f800283a 	ret

0004bba4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4bba4:	defffd04 	addi	sp,sp,-12
   4bba8:	dfc00215 	stw	ra,8(sp)
   4bbac:	df000115 	stw	fp,4(sp)
   4bbb0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   4bbb4:	00900034 	movhi	r2,16384
   4bbb8:	10877304 	addi	r2,r2,7628
   4bbbc:	10800017 	ldw	r2,0(r2)
   4bbc0:	1005003a 	cmpeq	r2,r2,zero
   4bbc4:	1000061e 	bne	r2,zero,4bbe0 <alt_get_errno+0x3c>
   4bbc8:	00900034 	movhi	r2,16384
   4bbcc:	10877304 	addi	r2,r2,7628
   4bbd0:	10800017 	ldw	r2,0(r2)
   4bbd4:	103ee83a 	callr	r2
   4bbd8:	e0bfff15 	stw	r2,-4(fp)
   4bbdc:	00000306 	br	4bbec <alt_get_errno+0x48>
   4bbe0:	00900034 	movhi	r2,16384
   4bbe4:	10878004 	addi	r2,r2,7680
   4bbe8:	e0bfff15 	stw	r2,-4(fp)
   4bbec:	e0bfff17 	ldw	r2,-4(fp)
}
   4bbf0:	e037883a 	mov	sp,fp
   4bbf4:	dfc00117 	ldw	ra,4(sp)
   4bbf8:	df000017 	ldw	fp,0(sp)
   4bbfc:	dec00204 	addi	sp,sp,8
   4bc00:	f800283a 	ret

0004bc04 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   4bc04:	defffd04 	addi	sp,sp,-12
   4bc08:	dfc00215 	stw	ra,8(sp)
   4bc0c:	df000115 	stw	fp,4(sp)
   4bc10:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   4bc14:	00bfff04 	movi	r2,-4
   4bc18:	00c00174 	movhi	r3,5
   4bc1c:	18f32504 	addi	r3,r3,-13164
   4bc20:	1885883a 	add	r2,r3,r2
   4bc24:	e0bfff15 	stw	r2,-4(fp)
   4bc28:	00000606 	br	4bc44 <_do_ctors+0x40>
        (*ctor) (); 
   4bc2c:	e0bfff17 	ldw	r2,-4(fp)
   4bc30:	10800017 	ldw	r2,0(r2)
   4bc34:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   4bc38:	e0bfff17 	ldw	r2,-4(fp)
   4bc3c:	10bfff04 	addi	r2,r2,-4
   4bc40:	e0bfff15 	stw	r2,-4(fp)
   4bc44:	e0ffff17 	ldw	r3,-4(fp)
   4bc48:	00800174 	movhi	r2,5
   4bc4c:	10b32404 	addi	r2,r2,-13168
   4bc50:	18bff62e 	bgeu	r3,r2,4bc2c <_do_ctors+0x28>
        (*ctor) (); 
}
   4bc54:	e037883a 	mov	sp,fp
   4bc58:	dfc00117 	ldw	ra,4(sp)
   4bc5c:	df000017 	ldw	fp,0(sp)
   4bc60:	dec00204 	addi	sp,sp,8
   4bc64:	f800283a 	ret

0004bc68 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   4bc68:	defffd04 	addi	sp,sp,-12
   4bc6c:	dfc00215 	stw	ra,8(sp)
   4bc70:	df000115 	stw	fp,4(sp)
   4bc74:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   4bc78:	00bfff04 	movi	r2,-4
   4bc7c:	00c00174 	movhi	r3,5
   4bc80:	18f32504 	addi	r3,r3,-13164
   4bc84:	1885883a 	add	r2,r3,r2
   4bc88:	e0bfff15 	stw	r2,-4(fp)
   4bc8c:	00000606 	br	4bca8 <_do_dtors+0x40>
        (*dtor) (); 
   4bc90:	e0bfff17 	ldw	r2,-4(fp)
   4bc94:	10800017 	ldw	r2,0(r2)
   4bc98:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   4bc9c:	e0bfff17 	ldw	r2,-4(fp)
   4bca0:	10bfff04 	addi	r2,r2,-4
   4bca4:	e0bfff15 	stw	r2,-4(fp)
   4bca8:	e0ffff17 	ldw	r3,-4(fp)
   4bcac:	00800174 	movhi	r2,5
   4bcb0:	10b32504 	addi	r2,r2,-13164
   4bcb4:	18bff62e 	bgeu	r3,r2,4bc90 <_do_dtors+0x28>
        (*dtor) (); 
}
   4bcb8:	e037883a 	mov	sp,fp
   4bcbc:	dfc00117 	ldw	ra,4(sp)
   4bcc0:	df000017 	ldw	fp,0(sp)
   4bcc4:	dec00204 	addi	sp,sp,8
   4bcc8:	f800283a 	ret

0004bccc <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   4bccc:	defffe04 	addi	sp,sp,-8
   4bcd0:	dfc00115 	stw	ra,4(sp)
   4bcd4:	df000015 	stw	fp,0(sp)
   4bcd8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   4bcdc:	0009883a 	mov	r4,zero
   4bce0:	01440004 	movi	r5,4096
   4bce4:	004c7f80 	call	4c7f8 <alt_icache_flush>
#endif
}
   4bce8:	e037883a 	mov	sp,fp
   4bcec:	dfc00117 	ldw	ra,4(sp)
   4bcf0:	df000017 	ldw	fp,0(sp)
   4bcf4:	dec00204 	addi	sp,sp,8
   4bcf8:	f800283a 	ret

0004bcfc <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   4bcfc:	defff904 	addi	sp,sp,-28
   4bd00:	dfc00615 	stw	ra,24(sp)
   4bd04:	df000515 	stw	fp,20(sp)
   4bd08:	df000504 	addi	fp,sp,20
   4bd0c:	e13ffc15 	stw	r4,-16(fp)
   4bd10:	e17ffd15 	stw	r5,-12(fp)
   4bd14:	e1bffe15 	stw	r6,-8(fp)
   4bd18:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   4bd1c:	e0800217 	ldw	r2,8(fp)
   4bd20:	d8800015 	stw	r2,0(sp)
   4bd24:	e13ffc17 	ldw	r4,-16(fp)
   4bd28:	e17ffd17 	ldw	r5,-12(fp)
   4bd2c:	e1bffe17 	ldw	r6,-8(fp)
   4bd30:	e1ffff17 	ldw	r7,-4(fp)
   4bd34:	004bed00 	call	4bed0 <alt_iic_isr_register>
}  
   4bd38:	e037883a 	mov	sp,fp
   4bd3c:	dfc00117 	ldw	ra,4(sp)
   4bd40:	df000017 	ldw	fp,0(sp)
   4bd44:	dec00204 	addi	sp,sp,8
   4bd48:	f800283a 	ret

0004bd4c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   4bd4c:	defff904 	addi	sp,sp,-28
   4bd50:	df000615 	stw	fp,24(sp)
   4bd54:	df000604 	addi	fp,sp,24
   4bd58:	e13ffe15 	stw	r4,-8(fp)
   4bd5c:	e17fff15 	stw	r5,-4(fp)
   4bd60:	e0bfff17 	ldw	r2,-4(fp)
   4bd64:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4bd68:	0005303a 	rdctl	r2,status
   4bd6c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4bd70:	e0fffb17 	ldw	r3,-20(fp)
   4bd74:	00bfff84 	movi	r2,-2
   4bd78:	1884703a 	and	r2,r3,r2
   4bd7c:	1001703a 	wrctl	status,r2
  
  return context;
   4bd80:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   4bd84:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
   4bd88:	e0fffc17 	ldw	r3,-16(fp)
   4bd8c:	00800044 	movi	r2,1
   4bd90:	10c4983a 	sll	r2,r2,r3
   4bd94:	1007883a 	mov	r3,r2
   4bd98:	00900034 	movhi	r2,16384
   4bd9c:	10878404 	addi	r2,r2,7696
   4bda0:	10800017 	ldw	r2,0(r2)
   4bda4:	1886b03a 	or	r3,r3,r2
   4bda8:	00900034 	movhi	r2,16384
   4bdac:	10878404 	addi	r2,r2,7696
   4bdb0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   4bdb4:	00900034 	movhi	r2,16384
   4bdb8:	10878404 	addi	r2,r2,7696
   4bdbc:	10800017 	ldw	r2,0(r2)
   4bdc0:	100170fa 	wrctl	ienable,r2
   4bdc4:	e0bffd17 	ldw	r2,-12(fp)
   4bdc8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4bdcc:	e0bffa17 	ldw	r2,-24(fp)
   4bdd0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   4bdd4:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   4bdd8:	e037883a 	mov	sp,fp
   4bddc:	df000017 	ldw	fp,0(sp)
   4bde0:	dec00104 	addi	sp,sp,4
   4bde4:	f800283a 	ret

0004bde8 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   4bde8:	defff904 	addi	sp,sp,-28
   4bdec:	df000615 	stw	fp,24(sp)
   4bdf0:	df000604 	addi	fp,sp,24
   4bdf4:	e13ffe15 	stw	r4,-8(fp)
   4bdf8:	e17fff15 	stw	r5,-4(fp)
   4bdfc:	e0bfff17 	ldw	r2,-4(fp)
   4be00:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4be04:	0005303a 	rdctl	r2,status
   4be08:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4be0c:	e0fffb17 	ldw	r3,-20(fp)
   4be10:	00bfff84 	movi	r2,-2
   4be14:	1884703a 	and	r2,r3,r2
   4be18:	1001703a 	wrctl	status,r2
  
  return context;
   4be1c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   4be20:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
   4be24:	e0fffc17 	ldw	r3,-16(fp)
   4be28:	00800044 	movi	r2,1
   4be2c:	10c4983a 	sll	r2,r2,r3
   4be30:	0084303a 	nor	r2,zero,r2
   4be34:	1007883a 	mov	r3,r2
   4be38:	00900034 	movhi	r2,16384
   4be3c:	10878404 	addi	r2,r2,7696
   4be40:	10800017 	ldw	r2,0(r2)
   4be44:	1886703a 	and	r3,r3,r2
   4be48:	00900034 	movhi	r2,16384
   4be4c:	10878404 	addi	r2,r2,7696
   4be50:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   4be54:	00900034 	movhi	r2,16384
   4be58:	10878404 	addi	r2,r2,7696
   4be5c:	10800017 	ldw	r2,0(r2)
   4be60:	100170fa 	wrctl	ienable,r2
   4be64:	e0bffd17 	ldw	r2,-12(fp)
   4be68:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4be6c:	e0bffa17 	ldw	r2,-24(fp)
   4be70:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   4be74:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   4be78:	e037883a 	mov	sp,fp
   4be7c:	df000017 	ldw	fp,0(sp)
   4be80:	dec00104 	addi	sp,sp,4
   4be84:	f800283a 	ret

0004be88 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   4be88:	defffc04 	addi	sp,sp,-16
   4be8c:	df000315 	stw	fp,12(sp)
   4be90:	df000304 	addi	fp,sp,12
   4be94:	e13ffe15 	stw	r4,-8(fp)
   4be98:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   4be9c:	000530fa 	rdctl	r2,ienable
   4bea0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   4bea4:	e0ffff17 	ldw	r3,-4(fp)
   4bea8:	00800044 	movi	r2,1
   4beac:	10c4983a 	sll	r2,r2,r3
   4beb0:	1007883a 	mov	r3,r2
   4beb4:	e0bffd17 	ldw	r2,-12(fp)
   4beb8:	1884703a 	and	r2,r3,r2
   4bebc:	1004c03a 	cmpne	r2,r2,zero
}
   4bec0:	e037883a 	mov	sp,fp
   4bec4:	df000017 	ldw	fp,0(sp)
   4bec8:	dec00104 	addi	sp,sp,4
   4becc:	f800283a 	ret

0004bed0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   4bed0:	defff404 	addi	sp,sp,-48
   4bed4:	dfc00b15 	stw	ra,44(sp)
   4bed8:	df000a15 	stw	fp,40(sp)
   4bedc:	df000a04 	addi	fp,sp,40
   4bee0:	e13ffb15 	stw	r4,-20(fp)
   4bee4:	e17ffc15 	stw	r5,-16(fp)
   4bee8:	e1bffd15 	stw	r6,-12(fp)
   4beec:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
   4bef0:	00bffa84 	movi	r2,-22
   4bef4:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   4bef8:	e0bffc17 	ldw	r2,-16(fp)
   4befc:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   4bf00:	e0bff917 	ldw	r2,-28(fp)
   4bf04:	10800808 	cmpgei	r2,r2,32
   4bf08:	1000291e 	bne	r2,zero,4bfb0 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4bf0c:	0005303a 	rdctl	r2,status
   4bf10:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4bf14:	e0fff717 	ldw	r3,-36(fp)
   4bf18:	00bfff84 	movi	r2,-2
   4bf1c:	1884703a 	and	r2,r3,r2
   4bf20:	1001703a 	wrctl	status,r2
  
  return context;
   4bf24:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   4bf28:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
   4bf2c:	e0bff917 	ldw	r2,-28(fp)
   4bf30:	00d00034 	movhi	r3,16384
   4bf34:	18c79104 	addi	r3,r3,7748
   4bf38:	100490fa 	slli	r2,r2,3
   4bf3c:	10c7883a 	add	r3,r2,r3
   4bf40:	e0bffd17 	ldw	r2,-12(fp)
   4bf44:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
   4bf48:	e0bff917 	ldw	r2,-28(fp)
   4bf4c:	00d00034 	movhi	r3,16384
   4bf50:	18c79104 	addi	r3,r3,7748
   4bf54:	100490fa 	slli	r2,r2,3
   4bf58:	10c5883a 	add	r2,r2,r3
   4bf5c:	10c00104 	addi	r3,r2,4
   4bf60:	e0bffe17 	ldw	r2,-8(fp)
   4bf64:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   4bf68:	e0bffd17 	ldw	r2,-12(fp)
   4bf6c:	1005003a 	cmpeq	r2,r2,zero
   4bf70:	1000051e 	bne	r2,zero,4bf88 <alt_iic_isr_register+0xb8>
   4bf74:	e17ff917 	ldw	r5,-28(fp)
   4bf78:	e13ffb17 	ldw	r4,-20(fp)
   4bf7c:	004bd4c0 	call	4bd4c <alt_ic_irq_enable>
   4bf80:	e0bfff15 	stw	r2,-4(fp)
   4bf84:	00000406 	br	4bf98 <alt_iic_isr_register+0xc8>
   4bf88:	e17ff917 	ldw	r5,-28(fp)
   4bf8c:	e13ffb17 	ldw	r4,-20(fp)
   4bf90:	004bde80 	call	4bde8 <alt_ic_irq_disable>
   4bf94:	e0bfff15 	stw	r2,-4(fp)
   4bf98:	e0bfff17 	ldw	r2,-4(fp)
   4bf9c:	e0bffa15 	stw	r2,-24(fp)
   4bfa0:	e0bff817 	ldw	r2,-32(fp)
   4bfa4:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4bfa8:	e0bff617 	ldw	r2,-40(fp)
   4bfac:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   4bfb0:	e0bffa17 	ldw	r2,-24(fp)
}
   4bfb4:	e037883a 	mov	sp,fp
   4bfb8:	dfc00117 	ldw	ra,4(sp)
   4bfbc:	df000017 	ldw	fp,0(sp)
   4bfc0:	dec00204 	addi	sp,sp,8
   4bfc4:	f800283a 	ret

0004bfc8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   4bfc8:	defff904 	addi	sp,sp,-28
   4bfcc:	dfc00615 	stw	ra,24(sp)
   4bfd0:	df000515 	stw	fp,20(sp)
   4bfd4:	df000504 	addi	fp,sp,20
   4bfd8:	e13ffc15 	stw	r4,-16(fp)
   4bfdc:	e17ffd15 	stw	r5,-12(fp)
   4bfe0:	e1bffe15 	stw	r6,-8(fp)
   4bfe4:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   4bfe8:	e13ffd17 	ldw	r4,-12(fp)
   4bfec:	e17ffe17 	ldw	r5,-8(fp)
   4bff0:	e1bfff17 	ldw	r6,-4(fp)
   4bff4:	004c1e00 	call	4c1e0 <open>
   4bff8:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   4bffc:	e0bffb17 	ldw	r2,-20(fp)
   4c000:	1004803a 	cmplt	r2,r2,zero
   4c004:	10001c1e 	bne	r2,zero,4c078 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
   4c008:	e0bffb17 	ldw	r2,-20(fp)
   4c00c:	00d00034 	movhi	r3,16384
   4c010:	18c2f004 	addi	r3,r3,3008
   4c014:	10800324 	muli	r2,r2,12
   4c018:	10c5883a 	add	r2,r2,r3
   4c01c:	10c00017 	ldw	r3,0(r2)
   4c020:	e0bffc17 	ldw	r2,-16(fp)
   4c024:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   4c028:	e0bffb17 	ldw	r2,-20(fp)
   4c02c:	00d00034 	movhi	r3,16384
   4c030:	18c2f004 	addi	r3,r3,3008
   4c034:	10800324 	muli	r2,r2,12
   4c038:	10c5883a 	add	r2,r2,r3
   4c03c:	10800104 	addi	r2,r2,4
   4c040:	10c00017 	ldw	r3,0(r2)
   4c044:	e0bffc17 	ldw	r2,-16(fp)
   4c048:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   4c04c:	e0bffb17 	ldw	r2,-20(fp)
   4c050:	00d00034 	movhi	r3,16384
   4c054:	18c2f004 	addi	r3,r3,3008
   4c058:	10800324 	muli	r2,r2,12
   4c05c:	10c5883a 	add	r2,r2,r3
   4c060:	10800204 	addi	r2,r2,8
   4c064:	10c00017 	ldw	r3,0(r2)
   4c068:	e0bffc17 	ldw	r2,-16(fp)
   4c06c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   4c070:	e13ffb17 	ldw	r4,-20(fp)
   4c074:	004a8100 	call	4a810 <alt_release_fd>
  }
} 
   4c078:	e037883a 	mov	sp,fp
   4c07c:	dfc00117 	ldw	ra,4(sp)
   4c080:	df000017 	ldw	fp,0(sp)
   4c084:	dec00204 	addi	sp,sp,8
   4c088:	f800283a 	ret

0004c08c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   4c08c:	defffb04 	addi	sp,sp,-20
   4c090:	dfc00415 	stw	ra,16(sp)
   4c094:	df000315 	stw	fp,12(sp)
   4c098:	df000304 	addi	fp,sp,12
   4c09c:	e13ffd15 	stw	r4,-12(fp)
   4c0a0:	e17ffe15 	stw	r5,-8(fp)
   4c0a4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   4c0a8:	01100034 	movhi	r4,16384
   4c0ac:	2102f304 	addi	r4,r4,3020
   4c0b0:	e17ffd17 	ldw	r5,-12(fp)
   4c0b4:	01800044 	movi	r6,1
   4c0b8:	01c07fc4 	movi	r7,511
   4c0bc:	004bfc80 	call	4bfc8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   4c0c0:	01100034 	movhi	r4,16384
   4c0c4:	2102f004 	addi	r4,r4,3008
   4c0c8:	e17ffe17 	ldw	r5,-8(fp)
   4c0cc:	000d883a 	mov	r6,zero
   4c0d0:	01c07fc4 	movi	r7,511
   4c0d4:	004bfc80 	call	4bfc8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   4c0d8:	01100034 	movhi	r4,16384
   4c0dc:	2102f604 	addi	r4,r4,3032
   4c0e0:	e17fff17 	ldw	r5,-4(fp)
   4c0e4:	01800044 	movi	r6,1
   4c0e8:	01c07fc4 	movi	r7,511
   4c0ec:	004bfc80 	call	4bfc8 <alt_open_fd>
}  
   4c0f0:	e037883a 	mov	sp,fp
   4c0f4:	dfc00117 	ldw	ra,4(sp)
   4c0f8:	df000017 	ldw	fp,0(sp)
   4c0fc:	dec00204 	addi	sp,sp,8
   4c100:	f800283a 	ret

0004c104 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   4c104:	defffc04 	addi	sp,sp,-16
   4c108:	df000315 	stw	fp,12(sp)
   4c10c:	df000304 	addi	fp,sp,12
   4c110:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   4c114:	e0bffe17 	ldw	r2,-8(fp)
   4c118:	10800217 	ldw	r2,8(r2)
   4c11c:	10d00034 	orhi	r3,r2,16384
   4c120:	e0bffe17 	ldw	r2,-8(fp)
   4c124:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   4c128:	e03ffd15 	stw	zero,-12(fp)
   4c12c:	00002006 	br	4c1b0 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   4c130:	e0bffd17 	ldw	r2,-12(fp)
   4c134:	00d00034 	movhi	r3,16384
   4c138:	18c2f004 	addi	r3,r3,3008
   4c13c:	10800324 	muli	r2,r2,12
   4c140:	10c5883a 	add	r2,r2,r3
   4c144:	10c00017 	ldw	r3,0(r2)
   4c148:	e0bffe17 	ldw	r2,-8(fp)
   4c14c:	10800017 	ldw	r2,0(r2)
   4c150:	1880141e 	bne	r3,r2,4c1a4 <alt_file_locked+0xa0>
   4c154:	e0bffd17 	ldw	r2,-12(fp)
   4c158:	00d00034 	movhi	r3,16384
   4c15c:	18c2f004 	addi	r3,r3,3008
   4c160:	10800324 	muli	r2,r2,12
   4c164:	10c5883a 	add	r2,r2,r3
   4c168:	10800204 	addi	r2,r2,8
   4c16c:	10800017 	ldw	r2,0(r2)
   4c170:	1004403a 	cmpge	r2,r2,zero
   4c174:	10000b1e 	bne	r2,zero,4c1a4 <alt_file_locked+0xa0>
   4c178:	e0bffd17 	ldw	r2,-12(fp)
   4c17c:	10800324 	muli	r2,r2,12
   4c180:	1007883a 	mov	r3,r2
   4c184:	00900034 	movhi	r2,16384
   4c188:	1082f004 	addi	r2,r2,3008
   4c18c:	1887883a 	add	r3,r3,r2
   4c190:	e0bffe17 	ldw	r2,-8(fp)
   4c194:	18800326 	beq	r3,r2,4c1a4 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   4c198:	00bffcc4 	movi	r2,-13
   4c19c:	e0bfff15 	stw	r2,-4(fp)
   4c1a0:	00000a06 	br	4c1cc <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   4c1a4:	e0bffd17 	ldw	r2,-12(fp)
   4c1a8:	10800044 	addi	r2,r2,1
   4c1ac:	e0bffd15 	stw	r2,-12(fp)
   4c1b0:	00900034 	movhi	r2,16384
   4c1b4:	10877204 	addi	r2,r2,7624
   4c1b8:	10800017 	ldw	r2,0(r2)
   4c1bc:	1007883a 	mov	r3,r2
   4c1c0:	e0bffd17 	ldw	r2,-12(fp)
   4c1c4:	18bfda2e 	bgeu	r3,r2,4c130 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   4c1c8:	e03fff15 	stw	zero,-4(fp)
   4c1cc:	e0bfff17 	ldw	r2,-4(fp)
}
   4c1d0:	e037883a 	mov	sp,fp
   4c1d4:	df000017 	ldw	fp,0(sp)
   4c1d8:	dec00104 	addi	sp,sp,4
   4c1dc:	f800283a 	ret

0004c1e0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   4c1e0:	defff404 	addi	sp,sp,-48
   4c1e4:	dfc00b15 	stw	ra,44(sp)
   4c1e8:	df000a15 	stw	fp,40(sp)
   4c1ec:	df000a04 	addi	fp,sp,40
   4c1f0:	e13ffb15 	stw	r4,-20(fp)
   4c1f4:	e17ffc15 	stw	r5,-16(fp)
   4c1f8:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   4c1fc:	00bfffc4 	movi	r2,-1
   4c200:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
   4c204:	00bffb44 	movi	r2,-19
   4c208:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
   4c20c:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   4c210:	e13ffb17 	ldw	r4,-20(fp)
   4c214:	01500034 	movhi	r5,16384
   4c218:	29477004 	addi	r5,r5,7616
   4c21c:	004c58c0 	call	4c58c <alt_find_dev>
   4c220:	e0bffa15 	stw	r2,-24(fp)
   4c224:	e0bffa17 	ldw	r2,-24(fp)
   4c228:	1004c03a 	cmpne	r2,r2,zero
   4c22c:	1000051e 	bne	r2,zero,4c244 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   4c230:	e13ffb17 	ldw	r4,-20(fp)
   4c234:	004c6200 	call	4c620 <alt_find_file>
   4c238:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
   4c23c:	00800044 	movi	r2,1
   4c240:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   4c244:	e0bffa17 	ldw	r2,-24(fp)
   4c248:	1005003a 	cmpeq	r2,r2,zero
   4c24c:	1000301e 	bne	r2,zero,4c310 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
   4c250:	e13ffa17 	ldw	r4,-24(fp)
   4c254:	004c7400 	call	4c740 <alt_get_fd>
   4c258:	e0bff815 	stw	r2,-32(fp)
   4c25c:	e0bff817 	ldw	r2,-32(fp)
   4c260:	1004403a 	cmpge	r2,r2,zero
   4c264:	1000031e 	bne	r2,zero,4c274 <open+0x94>
    {
      status = index;
   4c268:	e0bff817 	ldw	r2,-32(fp)
   4c26c:	e0bff715 	stw	r2,-36(fp)
   4c270:	00002906 	br	4c318 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
   4c274:	e0bff817 	ldw	r2,-32(fp)
   4c278:	10800324 	muli	r2,r2,12
   4c27c:	1007883a 	mov	r3,r2
   4c280:	00900034 	movhi	r2,16384
   4c284:	1082f004 	addi	r2,r2,3008
   4c288:	1885883a 	add	r2,r3,r2
   4c28c:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   4c290:	e0fffc17 	ldw	r3,-16(fp)
   4c294:	00900034 	movhi	r2,16384
   4c298:	10bfffc4 	addi	r2,r2,-1
   4c29c:	1886703a 	and	r3,r3,r2
   4c2a0:	e0bff917 	ldw	r2,-28(fp)
   4c2a4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   4c2a8:	e0bff617 	ldw	r2,-40(fp)
   4c2ac:	1004c03a 	cmpne	r2,r2,zero
   4c2b0:	1000061e 	bne	r2,zero,4c2cc <open+0xec>
   4c2b4:	e13ff917 	ldw	r4,-28(fp)
   4c2b8:	004c1040 	call	4c104 <alt_file_locked>
   4c2bc:	e0bff715 	stw	r2,-36(fp)
   4c2c0:	e0bff717 	ldw	r2,-36(fp)
   4c2c4:	1004803a 	cmplt	r2,r2,zero
   4c2c8:	1000131e 	bne	r2,zero,4c318 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   4c2cc:	e0bffa17 	ldw	r2,-24(fp)
   4c2d0:	10800317 	ldw	r2,12(r2)
   4c2d4:	1005003a 	cmpeq	r2,r2,zero
   4c2d8:	1000091e 	bne	r2,zero,4c300 <open+0x120>
   4c2dc:	e0bffa17 	ldw	r2,-24(fp)
   4c2e0:	10800317 	ldw	r2,12(r2)
   4c2e4:	e13ff917 	ldw	r4,-28(fp)
   4c2e8:	e17ffb17 	ldw	r5,-20(fp)
   4c2ec:	e1bffc17 	ldw	r6,-16(fp)
   4c2f0:	e1fffd17 	ldw	r7,-12(fp)
   4c2f4:	103ee83a 	callr	r2
   4c2f8:	e0bfff15 	stw	r2,-4(fp)
   4c2fc:	00000106 	br	4c304 <open+0x124>
   4c300:	e03fff15 	stw	zero,-4(fp)
   4c304:	e0bfff17 	ldw	r2,-4(fp)
   4c308:	e0bff715 	stw	r2,-36(fp)
   4c30c:	00000206 	br	4c318 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
   4c310:	00bffb44 	movi	r2,-19
   4c314:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   4c318:	e0bff717 	ldw	r2,-36(fp)
   4c31c:	1004403a 	cmpge	r2,r2,zero
   4c320:	1000091e 	bne	r2,zero,4c348 <open+0x168>
  {
    alt_release_fd (index);  
   4c324:	e13ff817 	ldw	r4,-32(fp)
   4c328:	004a8100 	call	4a810 <alt_release_fd>
    ALT_ERRNO = -status;
   4c32c:	004c3680 	call	4c368 <alt_get_errno>
   4c330:	e0fff717 	ldw	r3,-36(fp)
   4c334:	00c7c83a 	sub	r3,zero,r3
   4c338:	10c00015 	stw	r3,0(r2)
    return -1;
   4c33c:	00bfffc4 	movi	r2,-1
   4c340:	e0bffe15 	stw	r2,-8(fp)
   4c344:	00000206 	br	4c350 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
   4c348:	e0bff817 	ldw	r2,-32(fp)
   4c34c:	e0bffe15 	stw	r2,-8(fp)
   4c350:	e0bffe17 	ldw	r2,-8(fp)
}
   4c354:	e037883a 	mov	sp,fp
   4c358:	dfc00117 	ldw	ra,4(sp)
   4c35c:	df000017 	ldw	fp,0(sp)
   4c360:	dec00204 	addi	sp,sp,8
   4c364:	f800283a 	ret

0004c368 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4c368:	defffd04 	addi	sp,sp,-12
   4c36c:	dfc00215 	stw	ra,8(sp)
   4c370:	df000115 	stw	fp,4(sp)
   4c374:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   4c378:	00900034 	movhi	r2,16384
   4c37c:	10877304 	addi	r2,r2,7628
   4c380:	10800017 	ldw	r2,0(r2)
   4c384:	1005003a 	cmpeq	r2,r2,zero
   4c388:	1000061e 	bne	r2,zero,4c3a4 <alt_get_errno+0x3c>
   4c38c:	00900034 	movhi	r2,16384
   4c390:	10877304 	addi	r2,r2,7628
   4c394:	10800017 	ldw	r2,0(r2)
   4c398:	103ee83a 	callr	r2
   4c39c:	e0bfff15 	stw	r2,-4(fp)
   4c3a0:	00000306 	br	4c3b0 <alt_get_errno+0x48>
   4c3a4:	00900034 	movhi	r2,16384
   4c3a8:	10878004 	addi	r2,r2,7680
   4c3ac:	e0bfff15 	stw	r2,-4(fp)
   4c3b0:	e0bfff17 	ldw	r2,-4(fp)
}
   4c3b4:	e037883a 	mov	sp,fp
   4c3b8:	dfc00117 	ldw	ra,4(sp)
   4c3bc:	df000017 	ldw	fp,0(sp)
   4c3c0:	dec00204 	addi	sp,sp,8
   4c3c4:	f800283a 	ret

0004c3c8 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   4c3c8:	defffa04 	addi	sp,sp,-24
   4c3cc:	df000515 	stw	fp,20(sp)
   4c3d0:	df000504 	addi	fp,sp,20
   4c3d4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4c3d8:	0005303a 	rdctl	r2,status
   4c3dc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4c3e0:	e0fffd17 	ldw	r3,-12(fp)
   4c3e4:	00bfff84 	movi	r2,-2
   4c3e8:	1884703a 	and	r2,r3,r2
   4c3ec:	1001703a 	wrctl	status,r2
  
  return context;
   4c3f0:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   4c3f4:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
   4c3f8:	e0bfff17 	ldw	r2,-4(fp)
   4c3fc:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   4c400:	e0bffc17 	ldw	r2,-16(fp)
   4c404:	10c00017 	ldw	r3,0(r2)
   4c408:	e0bffc17 	ldw	r2,-16(fp)
   4c40c:	10800117 	ldw	r2,4(r2)
   4c410:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
   4c414:	e0bffc17 	ldw	r2,-16(fp)
   4c418:	10c00117 	ldw	r3,4(r2)
   4c41c:	e0bffc17 	ldw	r2,-16(fp)
   4c420:	10800017 	ldw	r2,0(r2)
   4c424:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   4c428:	e0fffc17 	ldw	r3,-16(fp)
   4c42c:	e0bffc17 	ldw	r2,-16(fp)
   4c430:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
   4c434:	e0fffc17 	ldw	r3,-16(fp)
   4c438:	e0bffc17 	ldw	r2,-16(fp)
   4c43c:	18800015 	stw	r2,0(r3)
   4c440:	e0bffe17 	ldw	r2,-8(fp)
   4c444:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4c448:	e0bffb17 	ldw	r2,-20(fp)
   4c44c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   4c450:	e037883a 	mov	sp,fp
   4c454:	df000017 	ldw	fp,0(sp)
   4c458:	dec00104 	addi	sp,sp,4
   4c45c:	f800283a 	ret

0004c460 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   4c460:	defffb04 	addi	sp,sp,-20
   4c464:	dfc00415 	stw	ra,16(sp)
   4c468:	df000315 	stw	fp,12(sp)
   4c46c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   4c470:	d0a00e17 	ldw	r2,-32712(gp)
   4c474:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   4c478:	d0a01e17 	ldw	r2,-32648(gp)
   4c47c:	10800044 	addi	r2,r2,1
   4c480:	d0a01e15 	stw	r2,-32648(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   4c484:	00003106 	br	4c54c <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
   4c488:	e0bffe17 	ldw	r2,-8(fp)
   4c48c:	10800017 	ldw	r2,0(r2)
   4c490:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   4c494:	e0bffe17 	ldw	r2,-8(fp)
   4c498:	10800403 	ldbu	r2,16(r2)
   4c49c:	10803fcc 	andi	r2,r2,255
   4c4a0:	1005003a 	cmpeq	r2,r2,zero
   4c4a4:	1000051e 	bne	r2,zero,4c4bc <alt_tick+0x5c>
   4c4a8:	d0a01e17 	ldw	r2,-32648(gp)
   4c4ac:	1004c03a 	cmpne	r2,r2,zero
   4c4b0:	1000021e 	bne	r2,zero,4c4bc <alt_tick+0x5c>
    {
      alarm->rollover = 0;
   4c4b4:	e0bffe17 	ldw	r2,-8(fp)
   4c4b8:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   4c4bc:	e0bffe17 	ldw	r2,-8(fp)
   4c4c0:	10c00217 	ldw	r3,8(r2)
   4c4c4:	d0a01e17 	ldw	r2,-32648(gp)
   4c4c8:	10c01e36 	bltu	r2,r3,4c544 <alt_tick+0xe4>
   4c4cc:	e0bffe17 	ldw	r2,-8(fp)
   4c4d0:	10800403 	ldbu	r2,16(r2)
   4c4d4:	10803fcc 	andi	r2,r2,255
   4c4d8:	1004c03a 	cmpne	r2,r2,zero
   4c4dc:	1000191e 	bne	r2,zero,4c544 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
   4c4e0:	e0bffe17 	ldw	r2,-8(fp)
   4c4e4:	10c00317 	ldw	r3,12(r2)
   4c4e8:	e0bffe17 	ldw	r2,-8(fp)
   4c4ec:	11000517 	ldw	r4,20(r2)
   4c4f0:	183ee83a 	callr	r3
   4c4f4:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   4c4f8:	e0bffd17 	ldw	r2,-12(fp)
   4c4fc:	1004c03a 	cmpne	r2,r2,zero
   4c500:	1000031e 	bne	r2,zero,4c510 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
   4c504:	e13ffe17 	ldw	r4,-8(fp)
   4c508:	004c3c80 	call	4c3c8 <alt_alarm_stop>
   4c50c:	00000d06 	br	4c544 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
   4c510:	e0bffe17 	ldw	r2,-8(fp)
   4c514:	10c00217 	ldw	r3,8(r2)
   4c518:	e0bffd17 	ldw	r2,-12(fp)
   4c51c:	1887883a 	add	r3,r3,r2
   4c520:	e0bffe17 	ldw	r2,-8(fp)
   4c524:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   4c528:	e0bffe17 	ldw	r2,-8(fp)
   4c52c:	10c00217 	ldw	r3,8(r2)
   4c530:	d0a01e17 	ldw	r2,-32648(gp)
   4c534:	1880032e 	bgeu	r3,r2,4c544 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
   4c538:	e0fffe17 	ldw	r3,-8(fp)
   4c53c:	00800044 	movi	r2,1
   4c540:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
   4c544:	e0bfff17 	ldw	r2,-4(fp)
   4c548:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   4c54c:	d0e00e04 	addi	r3,gp,-32712
   4c550:	e0bffe17 	ldw	r2,-8(fp)
   4c554:	10ffcc1e 	bne	r2,r3,4c488 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
   4c558:	e037883a 	mov	sp,fp
   4c55c:	dfc00117 	ldw	ra,4(sp)
   4c560:	df000017 	ldw	fp,0(sp)
   4c564:	dec00204 	addi	sp,sp,8
   4c568:	f800283a 	ret

0004c56c <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   4c56c:	deffff04 	addi	sp,sp,-4
   4c570:	df000015 	stw	fp,0(sp)
   4c574:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   4c578:	000170fa 	wrctl	ienable,zero
}
   4c57c:	e037883a 	mov	sp,fp
   4c580:	df000017 	ldw	fp,0(sp)
   4c584:	dec00104 	addi	sp,sp,4
   4c588:	f800283a 	ret

0004c58c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   4c58c:	defff904 	addi	sp,sp,-28
   4c590:	dfc00615 	stw	ra,24(sp)
   4c594:	df000515 	stw	fp,20(sp)
   4c598:	df000504 	addi	fp,sp,20
   4c59c:	e13ffd15 	stw	r4,-12(fp)
   4c5a0:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
   4c5a4:	e0bffe17 	ldw	r2,-8(fp)
   4c5a8:	10800017 	ldw	r2,0(r2)
   4c5ac:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   4c5b0:	e13ffd17 	ldw	r4,-12(fp)
   4c5b4:	0040a5c0 	call	40a5c <strlen>
   4c5b8:	10800044 	addi	r2,r2,1
   4c5bc:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   4c5c0:	00000d06 	br	4c5f8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   4c5c4:	e0bffc17 	ldw	r2,-16(fp)
   4c5c8:	11000217 	ldw	r4,8(r2)
   4c5cc:	e1bffb17 	ldw	r6,-20(fp)
   4c5d0:	e17ffd17 	ldw	r5,-12(fp)
   4c5d4:	004c8d40 	call	4c8d4 <memcmp>
   4c5d8:	1004c03a 	cmpne	r2,r2,zero
   4c5dc:	1000031e 	bne	r2,zero,4c5ec <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   4c5e0:	e0bffc17 	ldw	r2,-16(fp)
   4c5e4:	e0bfff15 	stw	r2,-4(fp)
   4c5e8:	00000706 	br	4c608 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   4c5ec:	e0bffc17 	ldw	r2,-16(fp)
   4c5f0:	10800017 	ldw	r2,0(r2)
   4c5f4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   4c5f8:	e0fffe17 	ldw	r3,-8(fp)
   4c5fc:	e0bffc17 	ldw	r2,-16(fp)
   4c600:	10fff01e 	bne	r2,r3,4c5c4 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   4c604:	e03fff15 	stw	zero,-4(fp)
   4c608:	e0bfff17 	ldw	r2,-4(fp)
}
   4c60c:	e037883a 	mov	sp,fp
   4c610:	dfc00117 	ldw	ra,4(sp)
   4c614:	df000017 	ldw	fp,0(sp)
   4c618:	dec00204 	addi	sp,sp,8
   4c61c:	f800283a 	ret

0004c620 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   4c620:	defffa04 	addi	sp,sp,-24
   4c624:	dfc00515 	stw	ra,20(sp)
   4c628:	df000415 	stw	fp,16(sp)
   4c62c:	df000404 	addi	fp,sp,16
   4c630:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   4c634:	00900034 	movhi	r2,16384
   4c638:	10876e04 	addi	r2,r2,7608
   4c63c:	10800017 	ldw	r2,0(r2)
   4c640:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   4c644:	00003306 	br	4c714 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
   4c648:	e0bffd17 	ldw	r2,-12(fp)
   4c64c:	11000217 	ldw	r4,8(r2)
   4c650:	0040a5c0 	call	40a5c <strlen>
   4c654:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
   4c658:	e0bffd17 	ldw	r2,-12(fp)
   4c65c:	10c00217 	ldw	r3,8(r2)
   4c660:	e0bffc17 	ldw	r2,-16(fp)
   4c664:	1885883a 	add	r2,r3,r2
   4c668:	10bfffc4 	addi	r2,r2,-1
   4c66c:	10800003 	ldbu	r2,0(r2)
   4c670:	10803fcc 	andi	r2,r2,255
   4c674:	1080201c 	xori	r2,r2,128
   4c678:	10bfe004 	addi	r2,r2,-128
   4c67c:	10800bd8 	cmpnei	r2,r2,47
   4c680:	1000031e 	bne	r2,zero,4c690 <alt_find_file+0x70>
    {
      len -= 1;
   4c684:	e0bffc17 	ldw	r2,-16(fp)
   4c688:	10bfffc4 	addi	r2,r2,-1
   4c68c:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   4c690:	e0bffc17 	ldw	r2,-16(fp)
   4c694:	1007883a 	mov	r3,r2
   4c698:	e0bffe17 	ldw	r2,-8(fp)
   4c69c:	1885883a 	add	r2,r3,r2
   4c6a0:	10800003 	ldbu	r2,0(r2)
   4c6a4:	10803fcc 	andi	r2,r2,255
   4c6a8:	1080201c 	xori	r2,r2,128
   4c6ac:	10bfe004 	addi	r2,r2,-128
   4c6b0:	10800be0 	cmpeqi	r2,r2,47
   4c6b4:	10000a1e 	bne	r2,zero,4c6e0 <alt_find_file+0xc0>
   4c6b8:	e0bffc17 	ldw	r2,-16(fp)
   4c6bc:	1007883a 	mov	r3,r2
   4c6c0:	e0bffe17 	ldw	r2,-8(fp)
   4c6c4:	1885883a 	add	r2,r3,r2
   4c6c8:	10800003 	ldbu	r2,0(r2)
   4c6cc:	10803fcc 	andi	r2,r2,255
   4c6d0:	1080201c 	xori	r2,r2,128
   4c6d4:	10bfe004 	addi	r2,r2,-128
   4c6d8:	1004c03a 	cmpne	r2,r2,zero
   4c6dc:	10000a1e 	bne	r2,zero,4c708 <alt_find_file+0xe8>
   4c6e0:	e0bffd17 	ldw	r2,-12(fp)
   4c6e4:	11000217 	ldw	r4,8(r2)
   4c6e8:	e1bffc17 	ldw	r6,-16(fp)
   4c6ec:	e17ffe17 	ldw	r5,-8(fp)
   4c6f0:	004c8d40 	call	4c8d4 <memcmp>
   4c6f4:	1004c03a 	cmpne	r2,r2,zero
   4c6f8:	1000031e 	bne	r2,zero,4c708 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   4c6fc:	e0bffd17 	ldw	r2,-12(fp)
   4c700:	e0bfff15 	stw	r2,-4(fp)
   4c704:	00000806 	br	4c728 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
   4c708:	e0bffd17 	ldw	r2,-12(fp)
   4c70c:	10800017 	ldw	r2,0(r2)
   4c710:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   4c714:	00d00034 	movhi	r3,16384
   4c718:	18c76e04 	addi	r3,r3,7608
   4c71c:	e0bffd17 	ldw	r2,-12(fp)
   4c720:	10ffc91e 	bne	r2,r3,4c648 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   4c724:	e03fff15 	stw	zero,-4(fp)
   4c728:	e0bfff17 	ldw	r2,-4(fp)
}
   4c72c:	e037883a 	mov	sp,fp
   4c730:	dfc00117 	ldw	ra,4(sp)
   4c734:	df000017 	ldw	fp,0(sp)
   4c738:	dec00204 	addi	sp,sp,8
   4c73c:	f800283a 	ret

0004c740 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   4c740:	defffc04 	addi	sp,sp,-16
   4c744:	df000315 	stw	fp,12(sp)
   4c748:	df000304 	addi	fp,sp,12
   4c74c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   4c750:	00bffa04 	movi	r2,-24
   4c754:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   4c758:	e03ffe15 	stw	zero,-8(fp)
   4c75c:	00001e06 	br	4c7d8 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
   4c760:	e0bffe17 	ldw	r2,-8(fp)
   4c764:	00d00034 	movhi	r3,16384
   4c768:	18c2f004 	addi	r3,r3,3008
   4c76c:	10800324 	muli	r2,r2,12
   4c770:	10c5883a 	add	r2,r2,r3
   4c774:	10800017 	ldw	r2,0(r2)
   4c778:	1004c03a 	cmpne	r2,r2,zero
   4c77c:	1000131e 	bne	r2,zero,4c7cc <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
   4c780:	e0bffe17 	ldw	r2,-8(fp)
   4c784:	00d00034 	movhi	r3,16384
   4c788:	18c2f004 	addi	r3,r3,3008
   4c78c:	10800324 	muli	r2,r2,12
   4c790:	10c7883a 	add	r3,r2,r3
   4c794:	e0bfff17 	ldw	r2,-4(fp)
   4c798:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
   4c79c:	00900034 	movhi	r2,16384
   4c7a0:	10877204 	addi	r2,r2,7624
   4c7a4:	10c00017 	ldw	r3,0(r2)
   4c7a8:	e0bffe17 	ldw	r2,-8(fp)
   4c7ac:	1880040e 	bge	r3,r2,4c7c0 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
   4c7b0:	00d00034 	movhi	r3,16384
   4c7b4:	18c77204 	addi	r3,r3,7624
   4c7b8:	e0bffe17 	ldw	r2,-8(fp)
   4c7bc:	18800015 	stw	r2,0(r3)
      }
      rc = i;
   4c7c0:	e0bffe17 	ldw	r2,-8(fp)
   4c7c4:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   4c7c8:	00000606 	br	4c7e4 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   4c7cc:	e0bffe17 	ldw	r2,-8(fp)
   4c7d0:	10800044 	addi	r2,r2,1
   4c7d4:	e0bffe15 	stw	r2,-8(fp)
   4c7d8:	e0bffe17 	ldw	r2,-8(fp)
   4c7dc:	10800810 	cmplti	r2,r2,32
   4c7e0:	103fdf1e 	bne	r2,zero,4c760 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   4c7e4:	e0bffd17 	ldw	r2,-12(fp)
}
   4c7e8:	e037883a 	mov	sp,fp
   4c7ec:	df000017 	ldw	fp,0(sp)
   4c7f0:	dec00104 	addi	sp,sp,4
   4c7f4:	f800283a 	ret

0004c7f8 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   4c7f8:	defffb04 	addi	sp,sp,-20
   4c7fc:	df000415 	stw	fp,16(sp)
   4c800:	df000404 	addi	fp,sp,16
   4c804:	e13ffe15 	stw	r4,-8(fp)
   4c808:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   4c80c:	e0bfff17 	ldw	r2,-4(fp)
   4c810:	10840070 	cmpltui	r2,r2,4097
   4c814:	1000021e 	bne	r2,zero,4c820 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   4c818:	00840004 	movi	r2,4096
   4c81c:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   4c820:	e0fffe17 	ldw	r3,-8(fp)
   4c824:	e0bfff17 	ldw	r2,-4(fp)
   4c828:	1885883a 	add	r2,r3,r2
   4c82c:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   4c830:	e0bffe17 	ldw	r2,-8(fp)
   4c834:	e0bffd15 	stw	r2,-12(fp)
   4c838:	00000506 	br	4c850 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   4c83c:	e0bffd17 	ldw	r2,-12(fp)
   4c840:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   4c844:	e0bffd17 	ldw	r2,-12(fp)
   4c848:	10800804 	addi	r2,r2,32
   4c84c:	e0bffd15 	stw	r2,-12(fp)
   4c850:	e0fffd17 	ldw	r3,-12(fp)
   4c854:	e0bffc17 	ldw	r2,-16(fp)
   4c858:	18bff836 	bltu	r3,r2,4c83c <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   4c85c:	e0bffe17 	ldw	r2,-8(fp)
   4c860:	108007cc 	andi	r2,r2,31
   4c864:	1005003a 	cmpeq	r2,r2,zero
   4c868:	1000021e 	bne	r2,zero,4c874 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   4c86c:	e0bffd17 	ldw	r2,-12(fp)
   4c870:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   4c874:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   4c878:	e037883a 	mov	sp,fp
   4c87c:	df000017 	ldw	fp,0(sp)
   4c880:	dec00104 	addi	sp,sp,4
   4c884:	f800283a 	ret

0004c888 <atexit>:
   4c888:	200b883a 	mov	r5,r4
   4c88c:	000d883a 	mov	r6,zero
   4c890:	0009883a 	mov	r4,zero
   4c894:	000f883a 	mov	r7,zero
   4c898:	004c9481 	jmpi	4c948 <__register_exitproc>

0004c89c <exit>:
   4c89c:	defffe04 	addi	sp,sp,-8
   4c8a0:	000b883a 	mov	r5,zero
   4c8a4:	dc000015 	stw	r16,0(sp)
   4c8a8:	dfc00115 	stw	ra,4(sp)
   4c8ac:	2021883a 	mov	r16,r4
   4c8b0:	004ca800 	call	4ca80 <__call_exitprocs>
   4c8b4:	00900034 	movhi	r2,16384
   4c8b8:	10876904 	addi	r2,r2,7588
   4c8bc:	11000017 	ldw	r4,0(r2)
   4c8c0:	20800f17 	ldw	r2,60(r4)
   4c8c4:	10000126 	beq	r2,zero,4c8cc <exit+0x30>
   4c8c8:	103ee83a 	callr	r2
   4c8cc:	8009883a 	mov	r4,r16
   4c8d0:	004cc700 	call	4cc70 <_exit>

0004c8d4 <memcmp>:
   4c8d4:	00c000c4 	movi	r3,3
   4c8d8:	1980032e 	bgeu	r3,r6,4c8e8 <memcmp+0x14>
   4c8dc:	2144b03a 	or	r2,r4,r5
   4c8e0:	10c4703a 	and	r2,r2,r3
   4c8e4:	10000f26 	beq	r2,zero,4c924 <memcmp+0x50>
   4c8e8:	31ffffc4 	addi	r7,r6,-1
   4c8ec:	3000061e 	bne	r6,zero,4c908 <memcmp+0x34>
   4c8f0:	00000a06 	br	4c91c <memcmp+0x48>
   4c8f4:	39ffffc4 	addi	r7,r7,-1
   4c8f8:	00bfffc4 	movi	r2,-1
   4c8fc:	21000044 	addi	r4,r4,1
   4c900:	29400044 	addi	r5,r5,1
   4c904:	38800526 	beq	r7,r2,4c91c <memcmp+0x48>
   4c908:	20c00003 	ldbu	r3,0(r4)
   4c90c:	28800003 	ldbu	r2,0(r5)
   4c910:	18bff826 	beq	r3,r2,4c8f4 <memcmp+0x20>
   4c914:	1885c83a 	sub	r2,r3,r2
   4c918:	f800283a 	ret
   4c91c:	0005883a 	mov	r2,zero
   4c920:	f800283a 	ret
   4c924:	180f883a 	mov	r7,r3
   4c928:	20c00017 	ldw	r3,0(r4)
   4c92c:	28800017 	ldw	r2,0(r5)
   4c930:	18bfed1e 	bne	r3,r2,4c8e8 <memcmp+0x14>
   4c934:	31bfff04 	addi	r6,r6,-4
   4c938:	21000104 	addi	r4,r4,4
   4c93c:	29400104 	addi	r5,r5,4
   4c940:	39bff936 	bltu	r7,r6,4c928 <memcmp+0x54>
   4c944:	003fe806 	br	4c8e8 <memcmp+0x14>

0004c948 <__register_exitproc>:
   4c948:	defffa04 	addi	sp,sp,-24
   4c94c:	00900034 	movhi	r2,16384
   4c950:	10876904 	addi	r2,r2,7588
   4c954:	dc000015 	stw	r16,0(sp)
   4c958:	14000017 	ldw	r16,0(r2)
   4c95c:	dd000415 	stw	r20,16(sp)
   4c960:	2829883a 	mov	r20,r5
   4c964:	81405217 	ldw	r5,328(r16)
   4c968:	dcc00315 	stw	r19,12(sp)
   4c96c:	dc800215 	stw	r18,8(sp)
   4c970:	dc400115 	stw	r17,4(sp)
   4c974:	dfc00515 	stw	ra,20(sp)
   4c978:	2023883a 	mov	r17,r4
   4c97c:	3027883a 	mov	r19,r6
   4c980:	3825883a 	mov	r18,r7
   4c984:	28002526 	beq	r5,zero,4ca1c <__register_exitproc+0xd4>
   4c988:	29000117 	ldw	r4,4(r5)
   4c98c:	008007c4 	movi	r2,31
   4c990:	11002716 	blt	r2,r4,4ca30 <__register_exitproc+0xe8>
   4c994:	8800101e 	bne	r17,zero,4c9d8 <__register_exitproc+0x90>
   4c998:	2105883a 	add	r2,r4,r4
   4c99c:	1085883a 	add	r2,r2,r2
   4c9a0:	20c00044 	addi	r3,r4,1
   4c9a4:	1145883a 	add	r2,r2,r5
   4c9a8:	0009883a 	mov	r4,zero
   4c9ac:	15000215 	stw	r20,8(r2)
   4c9b0:	28c00115 	stw	r3,4(r5)
   4c9b4:	2005883a 	mov	r2,r4
   4c9b8:	dfc00517 	ldw	ra,20(sp)
   4c9bc:	dd000417 	ldw	r20,16(sp)
   4c9c0:	dcc00317 	ldw	r19,12(sp)
   4c9c4:	dc800217 	ldw	r18,8(sp)
   4c9c8:	dc400117 	ldw	r17,4(sp)
   4c9cc:	dc000017 	ldw	r16,0(sp)
   4c9d0:	dec00604 	addi	sp,sp,24
   4c9d4:	f800283a 	ret
   4c9d8:	29802204 	addi	r6,r5,136
   4c9dc:	00800044 	movi	r2,1
   4c9e0:	110e983a 	sll	r7,r2,r4
   4c9e4:	30c04017 	ldw	r3,256(r6)
   4c9e8:	2105883a 	add	r2,r4,r4
   4c9ec:	1085883a 	add	r2,r2,r2
   4c9f0:	1185883a 	add	r2,r2,r6
   4c9f4:	19c6b03a 	or	r3,r3,r7
   4c9f8:	14802015 	stw	r18,128(r2)
   4c9fc:	14c00015 	stw	r19,0(r2)
   4ca00:	00800084 	movi	r2,2
   4ca04:	30c04015 	stw	r3,256(r6)
   4ca08:	88bfe31e 	bne	r17,r2,4c998 <__register_exitproc+0x50>
   4ca0c:	30804117 	ldw	r2,260(r6)
   4ca10:	11c4b03a 	or	r2,r2,r7
   4ca14:	30804115 	stw	r2,260(r6)
   4ca18:	003fdf06 	br	4c998 <__register_exitproc+0x50>
   4ca1c:	00900034 	movhi	r2,16384
   4ca20:	1087d104 	addi	r2,r2,8004
   4ca24:	100b883a 	mov	r5,r2
   4ca28:	80805215 	stw	r2,328(r16)
   4ca2c:	003fd606 	br	4c988 <__register_exitproc+0x40>
   4ca30:	00800034 	movhi	r2,0
   4ca34:	10800004 	addi	r2,r2,0
   4ca38:	1000021e 	bne	r2,zero,4ca44 <__register_exitproc+0xfc>
   4ca3c:	013fffc4 	movi	r4,-1
   4ca40:	003fdc06 	br	4c9b4 <__register_exitproc+0x6c>
   4ca44:	01006404 	movi	r4,400
   4ca48:	103ee83a 	callr	r2
   4ca4c:	1007883a 	mov	r3,r2
   4ca50:	103ffa26 	beq	r2,zero,4ca3c <__register_exitproc+0xf4>
   4ca54:	80805217 	ldw	r2,328(r16)
   4ca58:	180b883a 	mov	r5,r3
   4ca5c:	18000115 	stw	zero,4(r3)
   4ca60:	18800015 	stw	r2,0(r3)
   4ca64:	80c05215 	stw	r3,328(r16)
   4ca68:	18006215 	stw	zero,392(r3)
   4ca6c:	18006315 	stw	zero,396(r3)
   4ca70:	0009883a 	mov	r4,zero
   4ca74:	883fc826 	beq	r17,zero,4c998 <__register_exitproc+0x50>
   4ca78:	003fd706 	br	4c9d8 <__register_exitproc+0x90>

0004ca7c <register_fini>:
   4ca7c:	f800283a 	ret

0004ca80 <__call_exitprocs>:
   4ca80:	00900034 	movhi	r2,16384
   4ca84:	10876904 	addi	r2,r2,7588
   4ca88:	10800017 	ldw	r2,0(r2)
   4ca8c:	defff304 	addi	sp,sp,-52
   4ca90:	df000b15 	stw	fp,44(sp)
   4ca94:	d8800115 	stw	r2,4(sp)
   4ca98:	00800034 	movhi	r2,0
   4ca9c:	10800004 	addi	r2,r2,0
   4caa0:	1005003a 	cmpeq	r2,r2,zero
   4caa4:	d8800215 	stw	r2,8(sp)
   4caa8:	d8800117 	ldw	r2,4(sp)
   4caac:	dd400815 	stw	r21,32(sp)
   4cab0:	dd000715 	stw	r20,28(sp)
   4cab4:	10805204 	addi	r2,r2,328
   4cab8:	dfc00c15 	stw	ra,48(sp)
   4cabc:	ddc00a15 	stw	r23,40(sp)
   4cac0:	dd800915 	stw	r22,36(sp)
   4cac4:	dcc00615 	stw	r19,24(sp)
   4cac8:	dc800515 	stw	r18,20(sp)
   4cacc:	dc400415 	stw	r17,16(sp)
   4cad0:	dc000315 	stw	r16,12(sp)
   4cad4:	282b883a 	mov	r21,r5
   4cad8:	2039883a 	mov	fp,r4
   4cadc:	d8800015 	stw	r2,0(sp)
   4cae0:	2829003a 	cmpeq	r20,r5,zero
   4cae4:	d8800117 	ldw	r2,4(sp)
   4cae8:	14405217 	ldw	r17,328(r2)
   4caec:	88001026 	beq	r17,zero,4cb30 <__call_exitprocs+0xb0>
   4caf0:	ddc00017 	ldw	r23,0(sp)
   4caf4:	88800117 	ldw	r2,4(r17)
   4caf8:	8c802204 	addi	r18,r17,136
   4cafc:	143fffc4 	addi	r16,r2,-1
   4cb00:	80000916 	blt	r16,zero,4cb28 <__call_exitprocs+0xa8>
   4cb04:	05bfffc4 	movi	r22,-1
   4cb08:	a000151e 	bne	r20,zero,4cb60 <__call_exitprocs+0xe0>
   4cb0c:	8409883a 	add	r4,r16,r16
   4cb10:	2105883a 	add	r2,r4,r4
   4cb14:	1485883a 	add	r2,r2,r18
   4cb18:	10c02017 	ldw	r3,128(r2)
   4cb1c:	a8c01126 	beq	r21,r3,4cb64 <__call_exitprocs+0xe4>
   4cb20:	843fffc4 	addi	r16,r16,-1
   4cb24:	85bff81e 	bne	r16,r22,4cb08 <__call_exitprocs+0x88>
   4cb28:	d8800217 	ldw	r2,8(sp)
   4cb2c:	10003126 	beq	r2,zero,4cbf4 <__call_exitprocs+0x174>
   4cb30:	dfc00c17 	ldw	ra,48(sp)
   4cb34:	df000b17 	ldw	fp,44(sp)
   4cb38:	ddc00a17 	ldw	r23,40(sp)
   4cb3c:	dd800917 	ldw	r22,36(sp)
   4cb40:	dd400817 	ldw	r21,32(sp)
   4cb44:	dd000717 	ldw	r20,28(sp)
   4cb48:	dcc00617 	ldw	r19,24(sp)
   4cb4c:	dc800517 	ldw	r18,20(sp)
   4cb50:	dc400417 	ldw	r17,16(sp)
   4cb54:	dc000317 	ldw	r16,12(sp)
   4cb58:	dec00d04 	addi	sp,sp,52
   4cb5c:	f800283a 	ret
   4cb60:	8409883a 	add	r4,r16,r16
   4cb64:	88c00117 	ldw	r3,4(r17)
   4cb68:	2105883a 	add	r2,r4,r4
   4cb6c:	1445883a 	add	r2,r2,r17
   4cb70:	18ffffc4 	addi	r3,r3,-1
   4cb74:	11800217 	ldw	r6,8(r2)
   4cb78:	1c001526 	beq	r3,r16,4cbd0 <__call_exitprocs+0x150>
   4cb7c:	10000215 	stw	zero,8(r2)
   4cb80:	303fe726 	beq	r6,zero,4cb20 <__call_exitprocs+0xa0>
   4cb84:	00c00044 	movi	r3,1
   4cb88:	1c06983a 	sll	r3,r3,r16
   4cb8c:	90804017 	ldw	r2,256(r18)
   4cb90:	8cc00117 	ldw	r19,4(r17)
   4cb94:	1884703a 	and	r2,r3,r2
   4cb98:	10001426 	beq	r2,zero,4cbec <__call_exitprocs+0x16c>
   4cb9c:	90804117 	ldw	r2,260(r18)
   4cba0:	1884703a 	and	r2,r3,r2
   4cba4:	10000c1e 	bne	r2,zero,4cbd8 <__call_exitprocs+0x158>
   4cba8:	2105883a 	add	r2,r4,r4
   4cbac:	1485883a 	add	r2,r2,r18
   4cbb0:	11400017 	ldw	r5,0(r2)
   4cbb4:	e009883a 	mov	r4,fp
   4cbb8:	303ee83a 	callr	r6
   4cbbc:	88800117 	ldw	r2,4(r17)
   4cbc0:	98bfc81e 	bne	r19,r2,4cae4 <__call_exitprocs+0x64>
   4cbc4:	b8800017 	ldw	r2,0(r23)
   4cbc8:	147fd526 	beq	r2,r17,4cb20 <__call_exitprocs+0xa0>
   4cbcc:	003fc506 	br	4cae4 <__call_exitprocs+0x64>
   4cbd0:	8c000115 	stw	r16,4(r17)
   4cbd4:	003fea06 	br	4cb80 <__call_exitprocs+0x100>
   4cbd8:	2105883a 	add	r2,r4,r4
   4cbdc:	1485883a 	add	r2,r2,r18
   4cbe0:	11000017 	ldw	r4,0(r2)
   4cbe4:	303ee83a 	callr	r6
   4cbe8:	003ff406 	br	4cbbc <__call_exitprocs+0x13c>
   4cbec:	303ee83a 	callr	r6
   4cbf0:	003ff206 	br	4cbbc <__call_exitprocs+0x13c>
   4cbf4:	88800117 	ldw	r2,4(r17)
   4cbf8:	1000081e 	bne	r2,zero,4cc1c <__call_exitprocs+0x19c>
   4cbfc:	89000017 	ldw	r4,0(r17)
   4cc00:	20000726 	beq	r4,zero,4cc20 <__call_exitprocs+0x1a0>
   4cc04:	b9000015 	stw	r4,0(r23)
   4cc08:	8809883a 	mov	r4,r17
   4cc0c:	00000000 	call	0 <__alt_mem_onchip_memory-0x40000>
   4cc10:	bc400017 	ldw	r17,0(r23)
   4cc14:	883fb71e 	bne	r17,zero,4caf4 <__call_exitprocs+0x74>
   4cc18:	003fc506 	br	4cb30 <__call_exitprocs+0xb0>
   4cc1c:	89000017 	ldw	r4,0(r17)
   4cc20:	882f883a 	mov	r23,r17
   4cc24:	2023883a 	mov	r17,r4
   4cc28:	883fb21e 	bne	r17,zero,4caf4 <__call_exitprocs+0x74>
   4cc2c:	003fc006 	br	4cb30 <__call_exitprocs+0xb0>

0004cc30 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
   4cc30:	defffd04 	addi	sp,sp,-12
   4cc34:	df000215 	stw	fp,8(sp)
   4cc38:	df000204 	addi	fp,sp,8
   4cc3c:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
   4cc40:	e0bfff17 	ldw	r2,-4(fp)
   4cc44:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   4cc48:	e0bffe17 	ldw	r2,-8(fp)
   4cc4c:	1005003a 	cmpeq	r2,r2,zero
   4cc50:	1000021e 	bne	r2,zero,4cc5c <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
   4cc54:	002af070 	cmpltui	zero,zero,43969
   4cc58:	00000106 	br	4cc60 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
   4cc5c:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
   4cc60:	e037883a 	mov	sp,fp
   4cc64:	df000017 	ldw	fp,0(sp)
   4cc68:	dec00104 	addi	sp,sp,4
   4cc6c:	f800283a 	ret

0004cc70 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   4cc70:	defffd04 	addi	sp,sp,-12
   4cc74:	dfc00215 	stw	ra,8(sp)
   4cc78:	df000115 	stw	fp,4(sp)
   4cc7c:	df000104 	addi	fp,sp,4
   4cc80:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
   4cc84:	e13fff17 	ldw	r4,-4(fp)
   4cc88:	004cc300 	call	4cc30 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   4cc8c:	003fff06 	br	4cc8c <_exit+0x1c>
   4cc90:	0004ca7c 	xorhi	zero,zero,4905
