
DE4_DDR2_test.elf:     file format elf32-littlenios2
DE4_DDR2_test.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x610201b4

Program Header:
    LOAD off    0x00001000 vaddr 0x61020000 paddr 0x61020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x61020020 paddr 0x61020020 align 2**12
         filesz 0x0000e0ac memsz 0x0000e0ac flags r-x
    LOAD off    0x0000f0cc vaddr 0x6102e0cc paddr 0x6102fb28 align 2**12
         filesz 0x00001a5c memsz 0x00001a5c flags rw-
    LOAD off    0x00011584 vaddr 0x61031584 paddr 0x61031584 align 2**12
         filesz 0x00000000 memsz 0x000002ec flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  61020000  61020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  61020020  61020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000d9cc  610201b4  610201b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000054c  6102db80  6102db80  0000eb80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a5c  6102e0cc  6102fb28  0000f0cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002ec  61031584  61031584  00011584  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00010b28  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000e18  00000000  00000000  00010b50  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001587  00000000  00000000  00011968  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00026206  00000000  00000000  00012eef  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000089ec  00000000  00000000  000390f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0001570e  00000000  00000000  00041ae1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001b24  00000000  00000000  000571f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000023b2  00000000  00000000  00058d14  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000c576  00000000  00000000  0005b0c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  0006763c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000009e0  00000000  00000000  000676a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0006b307  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000a  00000000  00000000  0006b30a  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0006b314  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0006b315  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0006b316  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0006b31a  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0006b31e  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0006b322  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0006b32b  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0006b334  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000008  00000000  00000000  0006b33d  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000012  00000000  00000000  0006b345  2**0
                  CONTENTS, READONLY
 29 .jdi          00004d22  00000000  00000000  0006b357  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
61020000 l    d  .entry	00000000 .entry
61020020 l    d  .exceptions	00000000 .exceptions
610201b4 l    d  .text	00000000 .text
6102db80 l    d  .rodata	00000000 .rodata
6102e0cc l    d  .rwdata	00000000 .rwdata
61031584 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
610201fc l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 I2C.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 mem_test.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
61021354 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
61021cc0 l     F .text	00000058 __sprint_r
6102df02 l     O .rodata	00000010 blanks.3452
6102def2 l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
61023d24 l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
61025720 l     F .text	00000058 std
6102582c l     F .text	00000008 __fp_lock
61025834 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
6102e0cc l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 locale.c
6102faf4 l     O .rwdata	00000004 charset
6102df38 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
6102e080 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
61029c58 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
6102b070 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
6102b114 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
6102b214 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
6102b334 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
6102b414 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
6102b570 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
6102b79c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
6102fb18 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
6102bc0c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
6102ea88 l     O .rwdata	00001060 jtag_uart
6102bcfc l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
6102bf3c l     F .text	00000228 altera_avalon_jtag_uart_irq
6102c164 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
6102c7e0 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
6102cc34 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
6102d058 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
6102d194 l     F .text	000000dc alt_file_locked
6102d3f8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
6102d968 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
6102db1c l     F .text	00000040 alt_sim_halt
61021b74 g     F .text	0000001c putchar
6102743c g     F .text	00000094 _mprec_log10
610202d8 g     F .text	00000104 I2C_Read
61027528 g     F .text	00000088 __any_on
61028f6c g     F .text	00000070 _isatty_r
6102e058 g     O .rodata	00000028 __mprec_tinytens
6102b5d0 g     F .text	0000006c alt_main
61021b98 g     F .text	000000a0 _puts_r
610315e0 g     O .bss	00000100 alt_irq
61028fdc g     F .text	00000078 _lseek_r
6102fb28 g       *ABS*	00000000 __flash_rwdata_start
6102a768 g     F .text	00000088 __eqdf2
61031870 g       *ABS*	00000000 __alt_heap_start
61021afc g     F .text	00000044 printf
610288ec g     F .text	00000068 __sseek
61025788 g     F .text	000000a4 __sinit
61028aec g     F .text	00000130 __swbuf_r
61026460 g     F .text	00000084 _setlocale_r
61025888 g     F .text	00000068 __sfmoreglue
6102b65c g     F .text	00000020 __malloc_unlock
61020ffc g     F .text	00000174 __divsf3
61026eb8 g     F .text	000000e0 memmove
610208ac g     F .text	000000d4 DDR2_RepeatRead
61025878 g     F .text	00000010 _cleanup
610275b0 g     F .text	000000bc _Balloc
6102a878 g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
6102063c g     F .text	00000124 i2c_write
61020000 g     F .entry	0000001c __reset
61020020 g       *ABS*	00000000 __flash_exceptions_start
61028ef8 g     F .text	00000074 _fstat_r
6103159c g     O .bss	00000004 errno
6102131c g     F .text	00000038 __make_dp
610315a4 g     O .bss	00000004 alt_argv
61037ae8 g       *ABS*	00000000 _gp
6102babc g     F .text	00000030 usleep
6102e908 g     O .rwdata	00000180 alt_fd_list
61021b90 g     F .text	00000008 _putchar_r
6102d478 g     F .text	00000094 alt_find_dev
61021a5c g     F .text	000000a0 memcpy
61020b44 g     F .text	000004b8 TMEM_Verify
6102586c g     F .text	0000000c _cleanup_r
6102aa10 g     F .text	000000f8 __floatsidf
6102d11c g     F .text	00000078 alt_io_redirect
6102a988 g     F .text	00000088 __ltdf2
6102db80 g       *ABS*	00000000 __DTOR_END__
61021c38 g     F .text	00000014 puts
6102738c g     F .text	000000b0 __ratio
6102c37c g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
61021b40 g     F .text	00000034 _printf_r
61021490 g     F .text	00000008 __udivsi3
6102b274 g     F .text	000000c0 isatty
6102df68 g     O .rodata	000000c8 __mprec_tens
6102643c g     F .text	00000008 __locale_charset
6102d6e4 g     F .text	00000090 alt_icache_flush
610203dc g     F .text	00000160 I2C_MultipleRead
61031590 g     O .bss	00000004 __malloc_top_pad
6102faf0 g     O .rwdata	00000004 __mb_cur_max
61026444 g     F .text	0000000c _localeconv_r
61027ca8 g     F .text	0000003c __i2b
61025e20 g     F .text	0000049c __sfvwrite_r
61028874 g     F .text	00000070 _sbrk_r
61029054 g     F .text	00000078 _read_r
6102e4cc g     O .rwdata	0000000c __lc_ctype
6102fb10 g     O .rwdata	00000004 alt_max_fd
6102ad74 g     F .text	00000138 __unpack_d
61028dd4 g     F .text	00000110 _fclose_r
610256ec g     F .text	00000034 fflush
61031594 g     O .bss	00000004 __malloc_max_sbrked_mem
61021208 g     F .text	00000054 __extendsfdf2
6102a0e8 g     F .text	00000074 __adddf3
6102726c g     F .text	00000120 __b2d
610296a8 g     F .text	000005b0 __umoddi3
6102b480 g     F .text	000000f0 lseek
6102faec g     O .rwdata	00000004 _global_impure_ptr
61028210 g     F .text	000005f4 _realloc_r
61031870 g       *ABS*	00000000 __bss_end
6102cf60 g     F .text	000000f8 alt_iic_isr_register
6102b9b0 g     F .text	0000010c alt_tick
610290cc g     F .text	000005dc __udivdi3
6102e030 g     O .rodata	00000028 __mprec_bigtens
61027f04 g     F .text	00000120 __s2b
6102abe0 g     F .text	00000194 __floatunsidf
6102718c g     F .text	00000060 __mcmp
61025854 g     F .text	00000018 __fp_lock_all
6102cf18 g     F .text	00000048 alt_ic_irq_enabled
61020200 g     F .text	000000d8 I2C_Write
6102b918 g     F .text	00000098 alt_alarm_stop
610315b4 g     O .bss	00000004 alt_irq_active
610200ec g     F .exceptions	000000c8 alt_irq_handler
6102e8e0 g     O .rwdata	00000028 alt_dev_null
61021680 g     F .text	000000c8 __unpack_f
6102053c g     F .text	00000088 i2c_start
6102b0d0 g     F .text	00000044 alt_dcache_flush_all
61027058 g     F .text	00000070 __hi0bits
6102ab08 g     F .text	000000d8 __fixdfsi
6102fb28 g       *ABS*	00000000 __ram_rwdata_end
61020000 g       *ABS*	00000000 __alt_mem_onchip_memory
6102fb08 g     O .rwdata	00000008 alt_dev_list
6102baec g     F .text	00000120 write
61028128 g     F .text	000000e8 _putc_r
6102e0cc g       *ABS*	00000000 __ram_rodata_end
6102b140 g     F .text	000000d4 fstat
61027de4 g     F .text	00000120 __pow5mult
61031584 g     O .bss	00000004 __nlocale_changed
61021498 g     F .text	00000008 __umodsi3
61031870 g       *ABS*	00000000 end
61021520 g     F .text	00000160 __pack_f
6102be7c g     F .text	000000c0 altera_avalon_jtag_uart_init
6102db7c g       *ABS*	00000000 __CTOR_LIST__
6103f400 g       *ABS*	00000000 __alt_stack_pointer
6102c850 g     F .text	00000090 alt_avalon_timer_sc_init
610214a0 g     F .text	00000080 __clzsi2
6102c5a0 g     F .text	00000240 altera_avalon_jtag_uart_write
61025778 g     F .text	00000004 __sfp_lock_acquire
61026dd4 g     F .text	000000e4 memchr
61021d18 g     F .text	00001eac ___vfprintf_internal_r
61025b0c g     F .text	00000314 _free_r
6102d96c g     F .text	000001b0 __call_exitprocs
61031588 g     O .bss	00000004 __mlocale_changed
6102fafc g     O .rwdata	00000004 __malloc_sbrk_base
610201b4 g     F .text	0000004c _start
610315ac g     O .bss	00000004 _alt_tick_rate
61027974 g     F .text	0000014c __lshift
610315b0 g     O .bss	00000004 _alt_nticks
6102b67c g     F .text	00000120 read
6102bca0 g     F .text	0000005c alt_sys_init
61021170 g     F .text	00000098 __floatsisf
6102d834 g     F .text	00000134 __register_exitproc
61027ac0 g     F .text	000001e8 __multiply
6102c214 g     F .text	00000074 altera_avalon_jtag_uart_close
6102e0cc g       *ABS*	00000000 __ram_rwdata_start
6102db80 g       *ABS*	00000000 __ram_rodata_start
610315b8 g     O .bss	00000028 __malloc_current_mallinfo
6102766c g     F .text	0000017c __d2b
6102bd34 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
6102d62c g     F .text	000000b8 alt_get_fd
6102ca34 g     F .text	0000014c alt_busy_sleep
6102aeac g     F .text	000000c8 __fpcmp_parts_d
61028d64 g     F .text	00000070 _close_r
6102d7c0 g     F .text	00000074 memcmp
6102bde4 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
61031870 g       *ABS*	00000000 __alt_stack_base
6102be2c g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
61023be8 g     F .text	0000013c __swsetup_r
6102a510 g     F .text	00000258 __divdf3
610258f0 g     F .text	000000f0 __sfp
610274d0 g     F .text	00000058 __copybits
6102e4d8 g     O .rwdata	00000408 __malloc_av_
61025784 g     F .text	00000004 __sinit_lock_release
610205c4 g     F .text	00000078 i2c_stop
6102a15c g     F .text	000003b4 __muldf3
610289d0 g     F .text	00000060 __sread
6102dd80 g     O .rodata	00000010 __thenan_sf
6102d50c g     F .text	00000120 alt_find_file
6102cb80 g     F .text	000000b4 alt_dev_llist_insert
6102b63c g     F .text	00000020 __malloc_lock
6102b85c g     F .text	000000bc sbrk
610254f0 g     F .text	000001fc _fflush_r
61028cb0 g     F .text	000000b4 _calloc_r
61031584 g       *ABS*	00000000 __bss_start
61026f98 g     F .text	00000098 memset
61020980 g     F .text	000001c4 main
610315a8 g     O .bss	00000004 alt_envp
61031598 g     O .bss	00000004 __malloc_max_total_mem
6102bd8c g     F .text	00000058 altera_avalon_jtag_uart_write_fd
61020760 g     F .text	0000014c i2c_read
61028c1c g     F .text	0000001c __swbuf
610288e4 g     F .text	00000008 __sclose
6103f400 g       *ABS*	00000000 __alt_heap_limit
61028ee4 g     F .text	00000014 fclose
610316e0 g     O .bss	00000190 _atexit0
61023f3c g     F .text	000015b4 _dtoa_r
61026694 g     F .text	00000740 _malloc_r
6102fb14 g     O .rwdata	00000004 alt_errno
00000000 g       *ABS*	00000000 __alt_mem_mem_if_ddr2_emif
61026384 g     F .text	000000b8 _fwalk
61028024 g     F .text	00000104 putc
610213d0 g     F .text	00000060 __divsi3
6102e08c g     O .rodata	00000014 __thenan_df
610259e0 g     F .text	0000012c _malloc_trim_r
6102db80 g       *ABS*	00000000 __CTOR_END__
61028a30 g     F .text	000000bc strcmp
6102db80 g       *ABS*	00000000 __flash_rodata_start
6102db80 g       *ABS*	00000000 __DTOR_LIST__
6102a7f0 g     F .text	00000088 __nedf2
6102bc6c g     F .text	00000034 alt_irq_init
6102b7fc g     F .text	00000060 alt_release_fd
6102dd90 g     O .rodata	00000100 __clz_tab
6103158c g     O .bss	00000004 _PathLocale
6102d774 g     F .text	00000014 atexit
61028c38 g     F .text	00000078 _write_r
610264e4 g     F .text	0000001c setlocale
6102fae8 g     O .rwdata	00000004 _impure_ptr
610315a0 g     O .bss	00000004 alt_argc
6102ccf8 g     F .text	00000064 _do_dtors
61020020 g       .exceptions	00000000 alt_irq_entry
610271ec g     F .text	00000080 __ulp
61028804 g     F .text	00000040 __isinfd
6102583c g     F .text	00000018 __fp_unlock_all
6102fb00 g     O .rwdata	00000008 alt_fs_list
61020020 g       *ABS*	00000000 __ram_exceptions_start
61026450 g     F .text	00000010 localeconv
6102cd8c g     F .text	00000050 alt_ic_isr_register
6102fb28 g       *ABS*	00000000 _edata
61031870 g       *ABS*	00000000 _end
610201b4 g       *ABS*	00000000 __ram_exceptions_end
6102c288 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
6102ce78 g     F .text	000000a0 alt_ic_irq_disable
61028954 g     F .text	0000007c __swrite
6102faf8 g     O .rwdata	00000004 __malloc_trim_threshold
6102d458 g     F .text	00000020 altera_nios2_qsys_irq_init
6102d788 g     F .text	00000038 exit
610262bc g     F .text	000000c8 _fwalk_reent
6102125c g     F .text	000000c0 __floatunsisf
610277e8 g     F .text	0000018c __mdiff
61021430 g     F .text	00000060 __modsi3
6103f400 g       *ABS*	00000000 __alt_data_end
61020020 g     F .exceptions	00000000 alt_exception
6102577c g     F .text	00000004 __sfp_lock_release
6102db5c g     F .text	00000020 _exit
61028844 g     F .text	00000030 __isnand
6102c8e0 g     F .text	00000154 alt_alarm_start
61026500 g     F .text	00000194 __smakebuf_r
61021c4c g     F .text	00000074 strlen
6102d270 g     F .text	00000188 open
6102a900 g     F .text	00000088 __gedf2
6102cd5c g     F .text	00000030 alt_icache_flush_all
6102fb24 g     O .rwdata	00000004 alt_priority_mask
6102cddc g     F .text	0000009c alt_ic_irq_enable
61023bc4 g     F .text	00000024 __vfprintf_internal
6102a068 g     F .text	00000080 __subdf3
610270c8 g     F .text	000000c4 __lo0bits
6102fb1c g     O .rwdata	00000008 alt_alarm_list
6102cc94 g     F .text	00000064 _do_ctors
6102af74 g     F .text	000000fc close
40000000 g       *ABS*	00000000 __alt_mem_mem_if_ddr2_emif_0
6102b394 g     F .text	00000080 alt_load
61021748 g     F .text	00000314 __pack_d
00000000  w      *UND*	00000000 free
61025780 g     F .text	00000004 __sinit_lock_acquire
61027ce4 g     F .text	00000100 __multadd
61027030 g     F .text	00000028 _Bfree



Disassembly of section .entry:

61020000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
61020000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
61020004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
61020008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
6102000c:	00bffd16 	blt	zero,r2,61020004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
61020010:	005840b4 	movhi	at,24834
    ori r1, r1, %lo(_start)
61020014:	08406d14 	ori	at,at,436
    jmp r1
61020018:	0800683a 	jmp	at
6102001c:	00000000 	call	60000000 <__alt_mem_mem_if_ddr2_emif_0+0x20000000>

Disassembly of section .exceptions:

61020020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
61020020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
61020024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
61020028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
6102002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
61020030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
61020034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
61020038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
6102003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
61020040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
61020044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
61020048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
6102004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
61020050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
61020054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
61020058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
6102005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
61020060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
61020064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
61020068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
6102006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
61020070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
61020074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
61020078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
6102007c:	10000326 	beq	r2,zero,6102008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
61020080:	20000226 	beq	r4,zero,6102008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
61020084:	10200ec0 	call	610200ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
61020088:	00000306 	br	61020098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
6102008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
61020090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
61020094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
61020098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
6102009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
610200a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
610200a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
610200a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
610200ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
610200b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
610200b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
610200b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
610200bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
610200c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
610200c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
610200c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
610200cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
610200d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
610200d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
610200d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
610200dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
610200e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
610200e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
610200e8:	ef80083a 	eret

610200ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
610200ec:	defff904 	addi	sp,sp,-28
610200f0:	dfc00615 	stw	ra,24(sp)
610200f4:	df000515 	stw	fp,20(sp)
610200f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
610200fc:	0005313a 	rdctl	r2,ipending
61020100:	e0bffc15 	stw	r2,-16(fp)

  return active;
61020104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
61020108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
6102010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
61020110:	00800044 	movi	r2,1
61020114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
61020118:	e0ffff17 	ldw	r3,-4(fp)
6102011c:	e0bffe17 	ldw	r2,-8(fp)
61020120:	1884703a 	and	r2,r3,r2
61020124:	1005003a 	cmpeq	r2,r2,zero
61020128:	1000161e 	bne	r2,zero,61020184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
6102012c:	e0bffd17 	ldw	r2,-12(fp)
61020130:	00d840f4 	movhi	r3,24835
61020134:	18c57804 	addi	r3,r3,5600
61020138:	100490fa 	slli	r2,r2,3
6102013c:	10c5883a 	add	r2,r2,r3
61020140:	11400017 	ldw	r5,0(r2)
61020144:	e0bffd17 	ldw	r2,-12(fp)
61020148:	00d840f4 	movhi	r3,24835
6102014c:	18c57804 	addi	r3,r3,5600
61020150:	100490fa 	slli	r2,r2,3
61020154:	10c5883a 	add	r2,r2,r3
61020158:	10800104 	addi	r2,r2,4
6102015c:	11000017 	ldw	r4,0(r2)
61020160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
61020164:	0005313a 	rdctl	r2,ipending
61020168:	e0bffb15 	stw	r2,-20(fp)

  return active;
6102016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
61020170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
61020174:	e0bfff17 	ldw	r2,-4(fp)
61020178:	1004c03a 	cmpne	r2,r2,zero
6102017c:	103fe31e 	bne	r2,zero,6102010c <alt_irq_handler+0x20>
61020180:	00000706 	br	610201a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
61020184:	e0bffe17 	ldw	r2,-8(fp)
61020188:	1085883a 	add	r2,r2,r2
6102018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
61020190:	e0bffd17 	ldw	r2,-12(fp)
61020194:	10800044 	addi	r2,r2,1
61020198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
6102019c:	003fde06 	br	61020118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
610201a0:	e037883a 	mov	sp,fp
610201a4:	dfc00117 	ldw	ra,4(sp)
610201a8:	df000017 	ldw	fp,0(sp)
610201ac:	dec00204 	addi	sp,sp,8
610201b0:	f800283a 	ret

Disassembly of section .text:

610201b4 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
610201b4:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
610201b8:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
610201bc:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
610201c0:	00bffd16 	blt	zero,r2,610201b8 <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
610201c4:	06d840f4 	movhi	sp,24835
    ori sp, sp, %lo(__alt_stack_pointer)
610201c8:	defd0014 	ori	sp,sp,62464

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
610201cc:	069840f4 	movhi	gp,24835
    ori gp, gp, %lo(_gp)
610201d0:	d69eba14 	ori	gp,gp,31464
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
610201d4:	009840f4 	movhi	r2,24835
    ori r2, r2, %lo(__bss_start)
610201d8:	10856114 	ori	r2,r2,5508

    movhi r3, %hi(__bss_end)
610201dc:	00d840f4 	movhi	r3,24835
    ori r3, r3, %lo(__bss_end)
610201e0:	18c61c14 	ori	r3,r3,6256

    beq r2, r3, 1f
610201e4:	10c00326 	beq	r2,r3,610201f4 <_start+0x40>

0:
    stw zero, (r2)
610201e8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
610201ec:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
610201f0:	10fffd36 	bltu	r2,r3,610201e8 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
610201f4:	102b3940 	call	6102b394 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
610201f8:	102b5d00 	call	6102b5d0 <alt_main>

610201fc <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
610201fc:	003fff06 	br	610201fc <alt_after_alt_main>

61020200 <I2C_Write>:
bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data);
void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck);



bool I2C_Write(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 ControlData){
61020200:	defff804 	addi	sp,sp,-32
61020204:	dfc00715 	stw	ra,28(sp)
61020208:	df000615 	stw	fp,24(sp)
6102020c:	df000604 	addi	fp,sp,24
61020210:	e13ffb15 	stw	r4,-20(fp)
61020214:	e17ffc15 	stw	r5,-16(fp)
61020218:	e0800217 	ldw	r2,8(fp)
6102021c:	e1bffd05 	stb	r6,-12(fp)
61020220:	e1fffe05 	stb	r7,-8(fp)
61020224:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
61020228:	00800044 	movi	r2,1
6102022c:	e0bffa15 	stw	r2,-24(fp)
    //alt_u8 DeviceAddr;
    
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
61020230:	e13ffb17 	ldw	r4,-20(fp)
61020234:	e17ffc17 	ldw	r5,-16(fp)
61020238:	102053c0 	call	6102053c <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
6102023c:	e0bffd03 	ldbu	r2,-12(fp)
61020240:	11803fcc 	andi	r6,r2,255
61020244:	e13ffb17 	ldw	r4,-20(fp)
61020248:	e17ffc17 	ldw	r5,-16(fp)
6102024c:	102063c0 	call	6102063c <i2c_write>
61020250:	1004c03a 	cmpne	r2,r2,zero
61020254:	1000011e 	bne	r2,zero,6102025c <I2C_Write+0x5c>
        bSuccess = FALSE;
61020258:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
6102025c:	e0bffa17 	ldw	r2,-24(fp)
61020260:	1005003a 	cmpeq	r2,r2,zero
61020264:	1000071e 	bne	r2,zero,61020284 <I2C_Write+0x84>
61020268:	e1bffe03 	ldbu	r6,-8(fp)
6102026c:	e13ffb17 	ldw	r4,-20(fp)
61020270:	e17ffc17 	ldw	r5,-16(fp)
61020274:	102063c0 	call	6102063c <i2c_write>
61020278:	1004c03a 	cmpne	r2,r2,zero
6102027c:	1000011e 	bne	r2,zero,61020284 <I2C_Write+0x84>
        bSuccess = FALSE;
61020280:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, ControlData)){  
61020284:	e0bffa17 	ldw	r2,-24(fp)
61020288:	1005003a 	cmpeq	r2,r2,zero
6102028c:	1000071e 	bne	r2,zero,610202ac <I2C_Write+0xac>
61020290:	e1bfff03 	ldbu	r6,-4(fp)
61020294:	e13ffb17 	ldw	r4,-20(fp)
61020298:	e17ffc17 	ldw	r5,-16(fp)
6102029c:	102063c0 	call	6102063c <i2c_write>
610202a0:	1004c03a 	cmpne	r2,r2,zero
610202a4:	1000011e 	bne	r2,zero,610202ac <I2C_Write+0xac>
        bSuccess = FALSE;
610202a8:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
    }
    i2c_stop(clk_base, data_base);
610202ac:	e13ffb17 	ldw	r4,-20(fp)
610202b0:	e17ffc17 	ldw	r5,-16(fp)
610202b4:	10205c40 	call	610205c4 <i2c_stop>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
610202b8:	0106d604 	movi	r4,7000
610202bc:	102babc0 	call	6102babc <usleep>
    
    return bSuccess;
610202c0:	e0bffa17 	ldw	r2,-24(fp)

    
}
610202c4:	e037883a 	mov	sp,fp
610202c8:	dfc00117 	ldw	ra,4(sp)
610202cc:	df000017 	ldw	fp,0(sp)
610202d0:	dec00204 	addi	sp,sp,8
610202d4:	f800283a 	ret

610202d8 <I2C_Read>:

bool I2C_Read(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 *pControlData){
610202d8:	defff904 	addi	sp,sp,-28
610202dc:	dfc00615 	stw	ra,24(sp)
610202e0:	df000515 	stw	fp,20(sp)
610202e4:	df000504 	addi	fp,sp,20
610202e8:	e13ffc15 	stw	r4,-16(fp)
610202ec:	e17ffd15 	stw	r5,-12(fp)
610202f0:	e1bffe05 	stb	r6,-8(fp)
610202f4:	e1ffff05 	stb	r7,-4(fp)
    bool bSuccess = TRUE;
610202f8:	00800044 	movi	r2,1
610202fc:	e0bffb15 	stw	r2,-20(fp)
    //alt_u8 DeviceAddr;
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
61020300:	e13ffc17 	ldw	r4,-16(fp)
61020304:	e17ffd17 	ldw	r5,-12(fp)
61020308:	102053c0 	call	6102053c <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
6102030c:	e0bffe03 	ldbu	r2,-8(fp)
61020310:	11803fcc 	andi	r6,r2,255
61020314:	e13ffc17 	ldw	r4,-16(fp)
61020318:	e17ffd17 	ldw	r5,-12(fp)
6102031c:	102063c0 	call	6102063c <i2c_write>
61020320:	1004c03a 	cmpne	r2,r2,zero
61020324:	1000011e 	bne	r2,zero,6102032c <I2C_Read+0x54>
        bSuccess = FALSE;
61020328:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
6102032c:	e0bffb17 	ldw	r2,-20(fp)
61020330:	1005003a 	cmpeq	r2,r2,zero
61020334:	1000071e 	bne	r2,zero,61020354 <I2C_Read+0x7c>
61020338:	e1bfff03 	ldbu	r6,-4(fp)
6102033c:	e13ffc17 	ldw	r4,-16(fp)
61020340:	e17ffd17 	ldw	r5,-12(fp)
61020344:	102063c0 	call	6102063c <i2c_write>
61020348:	1004c03a 	cmpne	r2,r2,zero
6102034c:	1000011e 	bne	r2,zero,61020354 <I2C_Read+0x7c>
        bSuccess = FALSE;
61020350:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }            
    i2c_start(clk_base, data_base);  // restart
61020354:	e13ffc17 	ldw	r4,-16(fp)
61020358:	e17ffd17 	ldw	r5,-12(fp)
6102035c:	102053c0 	call	6102053c <i2c_start>
    DeviceAddr |= 1; // Read
61020360:	e0bffe03 	ldbu	r2,-8(fp)
61020364:	10800054 	ori	r2,r2,1
61020368:	e0bffe05 	stb	r2,-8(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
6102036c:	e0bffb17 	ldw	r2,-20(fp)
61020370:	1005003a 	cmpeq	r2,r2,zero
61020374:	1000081e 	bne	r2,zero,61020398 <I2C_Read+0xc0>
61020378:	e0bffe03 	ldbu	r2,-8(fp)
6102037c:	11803fcc 	andi	r6,r2,255
61020380:	e13ffc17 	ldw	r4,-16(fp)
61020384:	e17ffd17 	ldw	r5,-12(fp)
61020388:	102063c0 	call	6102063c <i2c_write>
6102038c:	1004c03a 	cmpne	r2,r2,zero
61020390:	1000011e 	bne	r2,zero,61020398 <I2C_Read+0xc0>
        bSuccess = FALSE;
61020394:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
61020398:	e0bffb17 	ldw	r2,-20(fp)
6102039c:	1005003a 	cmpeq	r2,r2,zero
610203a0:	1000051e 	bne	r2,zero,610203b8 <I2C_Read+0xe0>
        i2c_read(clk_base, data_base, pControlData, FALSE);  // read
610203a4:	e13ffc17 	ldw	r4,-16(fp)
610203a8:	e17ffd17 	ldw	r5,-12(fp)
610203ac:	e1800217 	ldw	r6,8(fp)
610203b0:	000f883a 	mov	r7,zero
610203b4:	10207600 	call	61020760 <i2c_read>
    }        
    i2c_stop(clk_base, data_base);
610203b8:	e13ffc17 	ldw	r4,-16(fp)
610203bc:	e17ffd17 	ldw	r5,-12(fp)
610203c0:	10205c40 	call	610205c4 <i2c_stop>
    
    return bSuccess;
610203c4:	e0bffb17 	ldw	r2,-20(fp)
}
610203c8:	e037883a 	mov	sp,fp
610203cc:	dfc00117 	ldw	ra,4(sp)
610203d0:	df000017 	ldw	fp,0(sp)
610203d4:	dec00204 	addi	sp,sp,8
610203d8:	f800283a 	ret

610203dc <I2C_MultipleRead>:

bool I2C_MultipleRead(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 szData[], alt_u16 len){
610203dc:	defff604 	addi	sp,sp,-40
610203e0:	dfc00915 	stw	ra,36(sp)
610203e4:	df000815 	stw	fp,32(sp)
610203e8:	df000804 	addi	fp,sp,32
610203ec:	e13ffb15 	stw	r4,-20(fp)
610203f0:	e17ffc15 	stw	r5,-16(fp)
610203f4:	e1fffe15 	stw	r7,-8(fp)
610203f8:	e0800217 	ldw	r2,8(fp)
610203fc:	e1bffd05 	stb	r6,-12(fp)
61020400:	e0bfff0d 	sth	r2,-4(fp)
    int i;
    bool bSuccess = TRUE;
61020404:	00800044 	movi	r2,1
61020408:	e0bff915 	stw	r2,-28(fp)
    //alt_u8 DeviceAddr, 
    alt_u8 ControlAddr = 0;
6102040c:	e03ff805 	stb	zero,-32(fp)
    
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
61020410:	e13ffb17 	ldw	r4,-20(fp)
61020414:	e17ffc17 	ldw	r5,-16(fp)
61020418:	102053c0 	call	6102053c <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
6102041c:	e0bffd03 	ldbu	r2,-12(fp)
61020420:	11803fcc 	andi	r6,r2,255
61020424:	e13ffb17 	ldw	r4,-20(fp)
61020428:	e17ffc17 	ldw	r5,-16(fp)
6102042c:	102063c0 	call	6102063c <i2c_write>
61020430:	1004c03a 	cmpne	r2,r2,zero
61020434:	1000011e 	bne	r2,zero,6102043c <I2C_MultipleRead+0x60>
        bSuccess = FALSE;
61020438:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
6102043c:	e0bff917 	ldw	r2,-28(fp)
61020440:	1005003a 	cmpeq	r2,r2,zero
61020444:	1000071e 	bne	r2,zero,61020464 <I2C_MultipleRead+0x88>
61020448:	e1bff803 	ldbu	r6,-32(fp)
6102044c:	e13ffb17 	ldw	r4,-20(fp)
61020450:	e17ffc17 	ldw	r5,-16(fp)
61020454:	102063c0 	call	6102063c <i2c_write>
61020458:	1004c03a 	cmpne	r2,r2,zero
6102045c:	1000011e 	bne	r2,zero,61020464 <I2C_MultipleRead+0x88>
        bSuccess = FALSE;
61020460:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }    
    if (bSuccess)        
61020464:	e0bff917 	ldw	r2,-28(fp)
61020468:	1005003a 	cmpeq	r2,r2,zero
6102046c:	1000031e 	bne	r2,zero,6102047c <I2C_MultipleRead+0xa0>
        i2c_start(clk_base, data_base);  // restart
61020470:	e13ffb17 	ldw	r4,-20(fp)
61020474:	e17ffc17 	ldw	r5,-16(fp)
61020478:	102053c0 	call	6102053c <i2c_start>
    DeviceAddr |= 1; // Read
6102047c:	e0bffd03 	ldbu	r2,-12(fp)
61020480:	10800054 	ori	r2,r2,1
61020484:	e0bffd05 	stb	r2,-12(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
61020488:	e0bff917 	ldw	r2,-28(fp)
6102048c:	1005003a 	cmpeq	r2,r2,zero
61020490:	1000081e 	bne	r2,zero,610204b4 <I2C_MultipleRead+0xd8>
61020494:	e0bffd03 	ldbu	r2,-12(fp)
61020498:	11803fcc 	andi	r6,r2,255
6102049c:	e13ffb17 	ldw	r4,-20(fp)
610204a0:	e17ffc17 	ldw	r5,-16(fp)
610204a4:	102063c0 	call	6102063c <i2c_write>
610204a8:	1004c03a 	cmpne	r2,r2,zero
610204ac:	1000011e 	bne	r2,zero,610204b4 <I2C_MultipleRead+0xd8>
        bSuccess = FALSE;
610204b0:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
610204b4:	e0bff917 	ldw	r2,-28(fp)
610204b8:	1005003a 	cmpeq	r2,r2,zero
610204bc:	1000161e 	bne	r2,zero,61020518 <I2C_MultipleRead+0x13c>
        for(i=0;i<len && bSuccess;i++){
610204c0:	e03ffa15 	stw	zero,-24(fp)
610204c4:	00000e06 	br	61020500 <I2C_MultipleRead+0x124>
            i2c_read(clk_base, data_base, &szData[i], (i==(len-1))?FALSE:TRUE);  // read
610204c8:	e0bffa17 	ldw	r2,-24(fp)
610204cc:	1007883a 	mov	r3,r2
610204d0:	e0bffe17 	ldw	r2,-8(fp)
610204d4:	188d883a 	add	r6,r3,r2
610204d8:	e0bfff0b 	ldhu	r2,-4(fp)
610204dc:	10ffffc4 	addi	r3,r2,-1
610204e0:	e0bffa17 	ldw	r2,-24(fp)
610204e4:	188ec03a 	cmpne	r7,r3,r2
610204e8:	e13ffb17 	ldw	r4,-20(fp)
610204ec:	e17ffc17 	ldw	r5,-16(fp)
610204f0:	10207600 	call	61020760 <i2c_read>
        bSuccess = FALSE;
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
        for(i=0;i<len && bSuccess;i++){
610204f4:	e0bffa17 	ldw	r2,-24(fp)
610204f8:	10800044 	addi	r2,r2,1
610204fc:	e0bffa15 	stw	r2,-24(fp)
61020500:	e0ffff0b 	ldhu	r3,-4(fp)
61020504:	e0bffa17 	ldw	r2,-24(fp)
61020508:	10c0030e 	bge	r2,r3,61020518 <I2C_MultipleRead+0x13c>
6102050c:	e0bff917 	ldw	r2,-28(fp)
61020510:	1004c03a 	cmpne	r2,r2,zero
61020514:	103fec1e 	bne	r2,zero,610204c8 <I2C_MultipleRead+0xec>
            i2c_read(clk_base, data_base, &szData[i], (i==(len-1))?FALSE:TRUE);  // read
        }            
    }        
    i2c_stop(clk_base, data_base);
61020518:	e13ffb17 	ldw	r4,-20(fp)
6102051c:	e17ffc17 	ldw	r5,-16(fp)
61020520:	10205c40 	call	610205c4 <i2c_stop>
    
    return bSuccess;    
61020524:	e0bff917 	ldw	r2,-28(fp)
    
}
61020528:	e037883a 	mov	sp,fp
6102052c:	dfc00117 	ldw	ra,4(sp)
61020530:	df000017 	ldw	fp,0(sp)
61020534:	dec00204 	addi	sp,sp,8
61020538:	f800283a 	ret

6102053c <i2c_start>:
///////////// Interncal function (i2cXXX) body //////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////


//SDA 1->0 while SCL=1
void i2c_start(alt_u32 clk_base, alt_u32 data_base){
6102053c:	defffc04 	addi	sp,sp,-16
61020540:	dfc00315 	stw	ra,12(sp)
61020544:	df000215 	stw	fp,8(sp)
61020548:	df000204 	addi	fp,sp,8
6102054c:	e13ffe15 	stw	r4,-8(fp)
61020550:	e17fff15 	stw	r5,-4(fp)
    
    // make sure it is in normal state
    SDA_DIR_OUT(data_base);  // data output enabled
61020554:	e0bfff17 	ldw	r2,-4(fp)
61020558:	10800104 	addi	r2,r2,4
6102055c:	1007883a 	mov	r3,r2
61020560:	00800044 	movi	r2,1
61020564:	18800035 	stwio	r2,0(r3)
    
    
    
    // start condition
    SDA_HIGH(data_base); // data high
61020568:	e0bfff17 	ldw	r2,-4(fp)
6102056c:	1007883a 	mov	r3,r2
61020570:	00800044 	movi	r2,1
61020574:	18800035 	stwio	r2,0(r3)
    SCL_HIGH(clk_base);
61020578:	e0bffe17 	ldw	r2,-8(fp)
6102057c:	1007883a 	mov	r3,r2
61020580:	00800044 	movi	r2,1
61020584:	18800035 	stwio	r2,0(r3)
    SCL_DELAY;
61020588:	01000044 	movi	r4,1
6102058c:	102babc0 	call	6102babc <usleep>
     
    SDA_LOW(data_base); // data low
61020590:	e0bfff17 	ldw	r2,-4(fp)
61020594:	10000035 	stwio	zero,0(r2)
    SCL_DELAY; 
61020598:	01000044 	movi	r4,1
6102059c:	102babc0 	call	6102babc <usleep>
    SCL_LOW(clk_base); // clock low
610205a0:	e0bffe17 	ldw	r2,-8(fp)
610205a4:	10000035 	stwio	zero,0(r2)
    SCL_DELAY;
610205a8:	01000044 	movi	r4,1
610205ac:	102babc0 	call	6102babc <usleep>
}
610205b0:	e037883a 	mov	sp,fp
610205b4:	dfc00117 	ldw	ra,4(sp)
610205b8:	df000017 	ldw	fp,0(sp)
610205bc:	dec00204 	addi	sp,sp,8
610205c0:	f800283a 	ret

610205c4 <i2c_stop>:

// SDA 0->1 while SCL=1
void i2c_stop(alt_u32 clk_base, alt_u32 data_base){
610205c4:	defffc04 	addi	sp,sp,-16
610205c8:	dfc00315 	stw	ra,12(sp)
610205cc:	df000215 	stw	fp,8(sp)
610205d0:	df000204 	addi	fp,sp,8
610205d4:	e13ffe15 	stw	r4,-8(fp)
610205d8:	e17fff15 	stw	r5,-4(fp)
    // assume SCL = 0
    
    SDA_DIR_OUT(data_base);  // data output enabled
610205dc:	e0bfff17 	ldw	r2,-4(fp)
610205e0:	10800104 	addi	r2,r2,4
610205e4:	1007883a 	mov	r3,r2
610205e8:	00800044 	movi	r2,1
610205ec:	18800035 	stwio	r2,0(r3)
    SDA_LOW(data_base); // Data Low
610205f0:	e0bfff17 	ldw	r2,-4(fp)
610205f4:	10000035 	stwio	zero,0(r2)
    //SCL_DELAY; 
    SCL_HIGH(clk_base);  // clock high
610205f8:	e0bffe17 	ldw	r2,-8(fp)
610205fc:	1007883a 	mov	r3,r2
61020600:	00800044 	movi	r2,1
61020604:	18800035 	stwio	r2,0(r3)
    SCL_DELAY; // clock high long delay
61020608:	01000044 	movi	r4,1
6102060c:	102babc0 	call	6102babc <usleep>
    SDA_HIGH(data_base); // data high
61020610:	e0bfff17 	ldw	r2,-4(fp)
61020614:	1007883a 	mov	r3,r2
61020618:	00800044 	movi	r2,1
6102061c:	18800035 	stwio	r2,0(r3)
    SCL_DELAY; // data high delay
61020620:	01000044 	movi	r4,1
61020624:	102babc0 	call	6102babc <usleep>
    

    
}
61020628:	e037883a 	mov	sp,fp
6102062c:	dfc00117 	ldw	ra,4(sp)
61020630:	df000017 	ldw	fp,0(sp)
61020634:	dec00204 	addi	sp,sp,8
61020638:	f800283a 	ret

6102063c <i2c_write>:

bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data){ // return true if device response ack
6102063c:	defff804 	addi	sp,sp,-32
61020640:	dfc00715 	stw	ra,28(sp)
61020644:	df000615 	stw	fp,24(sp)
61020648:	df000604 	addi	fp,sp,24
6102064c:	e13ffd15 	stw	r4,-12(fp)
61020650:	e17ffe15 	stw	r5,-8(fp)
61020654:	e1bfff05 	stb	r6,-4(fp)
    alt_u8 Mask = 0x80;
61020658:	00bfe004 	movi	r2,-128
6102065c:	e0bffc05 	stb	r2,-16(fp)
    bool bAck;
    int i;
    
    // assume, SCL = 0
    
    SDA_DIR_OUT(data_base);  // data write mode
61020660:	e0bffe17 	ldw	r2,-8(fp)
61020664:	10800104 	addi	r2,r2,4
61020668:	1007883a 	mov	r3,r2
6102066c:	00800044 	movi	r2,1
61020670:	18800035 	stwio	r2,0(r3)
    
    for(i=0;i<8;i++){
61020674:	e03ffa15 	stw	zero,-24(fp)
61020678:	00001f06 	br	610206f8 <i2c_write+0xbc>
        SCL_LOW(clk_base);  // new, make sure data change at clk low
6102067c:	e0bffd17 	ldw	r2,-12(fp)
61020680:	10000035 	stwio	zero,0(r2)
        // output data on bus
        if (Data & Mask){ // there is a delay in this command
61020684:	e0ffff03 	ldbu	r3,-4(fp)
61020688:	e0bffc03 	ldbu	r2,-16(fp)
6102068c:	1884703a 	and	r2,r3,r2
61020690:	10803fcc 	andi	r2,r2,255
61020694:	1005003a 	cmpeq	r2,r2,zero
61020698:	1000051e 	bne	r2,zero,610206b0 <i2c_write+0x74>
            SDA_HIGH(data_base);
6102069c:	e0bffe17 	ldw	r2,-8(fp)
610206a0:	1007883a 	mov	r3,r2
610206a4:	00800044 	movi	r2,1
610206a8:	18800035 	stwio	r2,0(r3)
610206ac:	00000206 	br	610206b8 <i2c_write+0x7c>
        }else{    
            SDA_LOW(data_base);
610206b0:	e0bffe17 	ldw	r2,-8(fp)
610206b4:	10000035 	stwio	zero,0(r2)
        }
        Mask >>= 1; // there is a delay in this command
610206b8:	e0bffc03 	ldbu	r2,-16(fp)
610206bc:	1004d07a 	srli	r2,r2,1
610206c0:	e0bffc05 	stb	r2,-16(fp)
        // clock high
        SCL_HIGH(clk_base);
610206c4:	e0bffd17 	ldw	r2,-12(fp)
610206c8:	1007883a 	mov	r3,r2
610206cc:	00800044 	movi	r2,1
610206d0:	18800035 	stwio	r2,0(r3)
        SCL_DELAY;
610206d4:	01000044 	movi	r4,1
610206d8:	102babc0 	call	6102babc <usleep>
        SCL_LOW(clk_base);
610206dc:	e0bffd17 	ldw	r2,-12(fp)
610206e0:	10000035 	stwio	zero,0(r2)
        SCL_DELAY;
610206e4:	01000044 	movi	r4,1
610206e8:	102babc0 	call	6102babc <usleep>
    
    // assume, SCL = 0
    
    SDA_DIR_OUT(data_base);  // data write mode
    
    for(i=0;i<8;i++){
610206ec:	e0bffa17 	ldw	r2,-24(fp)
610206f0:	10800044 	addi	r2,r2,1
610206f4:	e0bffa15 	stw	r2,-24(fp)
610206f8:	e0bffa17 	ldw	r2,-24(fp)
610206fc:	10800210 	cmplti	r2,r2,8
61020700:	103fde1e 	bne	r2,zero,6102067c <i2c_write+0x40>
        SCL_LOW(clk_base);
        SCL_DELAY;
    }
    
    //===== get ack
    SDA_DIR_IN(data_base);  // data read mode
61020704:	e0bffe17 	ldw	r2,-8(fp)
61020708:	10800104 	addi	r2,r2,4
6102070c:	10000035 	stwio	zero,0(r2)
    //SCL_DELAY;
    // clock high
    SCL_HIGH(clk_base);  // clock high
61020710:	e0bffd17 	ldw	r2,-12(fp)
61020714:	1007883a 	mov	r3,r2
61020718:	00800044 	movi	r2,1
6102071c:	18800035 	stwio	r2,0(r3)
    SCL_DELAY;  // clock high delay
61020720:	01000044 	movi	r4,1
61020724:	102babc0 	call	6102babc <usleep>
    bAck = SDA_READ(data_base)?FALSE:TRUE;  // get ack
61020728:	e0bffe17 	ldw	r2,-8(fp)
6102072c:	10800037 	ldwio	r2,0(r2)
61020730:	1005003a 	cmpeq	r2,r2,zero
61020734:	e0bffb15 	stw	r2,-20(fp)
    //SCL_DELAY;
    //SDA_DIR_OUT;
    SCL_LOW(clk_base); // clock low         
61020738:	e0bffd17 	ldw	r2,-12(fp)
6102073c:	10000035 	stwio	zero,0(r2)
    SCL_DELAY; // clock low delay
61020740:	01000044 	movi	r4,1
61020744:	102babc0 	call	6102babc <usleep>
    return bAck;
61020748:	e0bffb17 	ldw	r2,-20(fp)
}    
6102074c:	e037883a 	mov	sp,fp
61020750:	dfc00117 	ldw	ra,4(sp)
61020754:	df000017 	ldw	fp,0(sp)
61020758:	dec00204 	addi	sp,sp,8
6102075c:	f800283a 	ret

61020760 <i2c_read>:

void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck){ // return true if device response ack
61020760:	defff804 	addi	sp,sp,-32
61020764:	dfc00715 	stw	ra,28(sp)
61020768:	df000615 	stw	fp,24(sp)
6102076c:	df000604 	addi	fp,sp,24
61020770:	e13ffc15 	stw	r4,-16(fp)
61020774:	e17ffd15 	stw	r5,-12(fp)
61020778:	e1bffe15 	stw	r6,-8(fp)
6102077c:	e1ffff15 	stw	r7,-4(fp)
    alt_u8 Data=0;
61020780:	e03ffb05 	stb	zero,-20(fp)
    int i;
    
    // assume SCL = low
    
    SDA_DIR_IN(data_base);  // set data read mode
61020784:	e0bffd17 	ldw	r2,-12(fp)
61020788:	10800104 	addi	r2,r2,4
6102078c:	10000035 	stwio	zero,0(r2)
    SCL_LOW(clk_base); // clock low
61020790:	e0bffc17 	ldw	r2,-16(fp)
61020794:	10000035 	stwio	zero,0(r2)
    SCL_DELAY; // clock low delay
61020798:	01000044 	movi	r4,1
6102079c:	102babc0 	call	6102babc <usleep>

    for(i=0;i<8;i++){
610207a0:	e03ffa15 	stw	zero,-24(fp)
610207a4:	00001706 	br	61020804 <i2c_read+0xa4>
        Data <<= 1;
610207a8:	e0bffb03 	ldbu	r2,-20(fp)
610207ac:	1085883a 	add	r2,r2,r2
610207b0:	e0bffb05 	stb	r2,-20(fp)
        SCL_HIGH(clk_base);  // clock high
610207b4:	e0bffc17 	ldw	r2,-16(fp)
610207b8:	1007883a 	mov	r3,r2
610207bc:	00800044 	movi	r2,1
610207c0:	18800035 	stwio	r2,0(r3)
        SCL_DELAY;
610207c4:	01000044 	movi	r4,1
610207c8:	102babc0 	call	6102babc <usleep>
        if (SDA_READ(data_base))  // read data   
610207cc:	e0bffd17 	ldw	r2,-12(fp)
610207d0:	10800037 	ldwio	r2,0(r2)
610207d4:	1005003a 	cmpeq	r2,r2,zero
610207d8:	1000031e 	bne	r2,zero,610207e8 <i2c_read+0x88>
            Data |= 0x01;
610207dc:	e0bffb03 	ldbu	r2,-20(fp)
610207e0:	10800054 	ori	r2,r2,1
610207e4:	e0bffb05 	stb	r2,-20(fp)
        SCL_LOW(clk_base);  // clock log  
610207e8:	e0bffc17 	ldw	r2,-16(fp)
610207ec:	10000035 	stwio	zero,0(r2)
        SCL_DELAY;
610207f0:	01000044 	movi	r4,1
610207f4:	102babc0 	call	6102babc <usleep>
    
    SDA_DIR_IN(data_base);  // set data read mode
    SCL_LOW(clk_base); // clock low
    SCL_DELAY; // clock low delay

    for(i=0;i<8;i++){
610207f8:	e0bffa17 	ldw	r2,-24(fp)
610207fc:	10800044 	addi	r2,r2,1
61020800:	e0bffa15 	stw	r2,-24(fp)
61020804:	e0bffa17 	ldw	r2,-24(fp)
61020808:	10800210 	cmplti	r2,r2,8
6102080c:	103fe61e 	bne	r2,zero,610207a8 <i2c_read+0x48>
        SCL_LOW(clk_base);  // clock log  
        SCL_DELAY;
    }
    
    // send ACK
    SCL_LOW(clk_base);  // new, make sure data change at clk low
61020810:	e0bffc17 	ldw	r2,-16(fp)
61020814:	10000035 	stwio	zero,0(r2)
    SDA_DIR_OUT(data_base);  // set data write mode
61020818:	e0bffd17 	ldw	r2,-12(fp)
6102081c:	10800104 	addi	r2,r2,4
61020820:	1007883a 	mov	r3,r2
61020824:	00800044 	movi	r2,1
61020828:	18800035 	stwio	r2,0(r3)
    if (bAck)
6102082c:	e0bfff17 	ldw	r2,-4(fp)
61020830:	1005003a 	cmpeq	r2,r2,zero
61020834:	1000031e 	bne	r2,zero,61020844 <i2c_read+0xe4>
        SDA_LOW(data_base);
61020838:	e0bffd17 	ldw	r2,-12(fp)
6102083c:	10000035 	stwio	zero,0(r2)
61020840:	00000406 	br	61020854 <i2c_read+0xf4>
    else
        SDA_HIGH(data_base);
61020844:	e0bffd17 	ldw	r2,-12(fp)
61020848:	1007883a 	mov	r3,r2
6102084c:	00800044 	movi	r2,1
61020850:	18800035 	stwio	r2,0(r3)
    SCL_HIGH(clk_base); // clock high
61020854:	e0bffc17 	ldw	r2,-16(fp)
61020858:	1007883a 	mov	r3,r2
6102085c:	00800044 	movi	r2,1
61020860:	18800035 	stwio	r2,0(r3)
    SCL_DELAY; // clock high  delay
61020864:	01000044 	movi	r4,1
61020868:	102babc0 	call	6102babc <usleep>
    SCL_LOW(clk_base); // clock low
6102086c:	e0bffc17 	ldw	r2,-16(fp)
61020870:	10000035 	stwio	zero,0(r2)
    SCL_DELAY; // clock low delay
61020874:	01000044 	movi	r4,1
61020878:	102babc0 	call	6102babc <usleep>
    SDA_LOW(data_base);  // data low
6102087c:	e0bffd17 	ldw	r2,-12(fp)
61020880:	10000035 	stwio	zero,0(r2)
    SCL_DELAY; // data low delay
61020884:	01000044 	movi	r4,1
61020888:	102babc0 	call	6102babc <usleep>
//    SDA_DIR_IN;  // set data read mode
    
    *pData = Data;
6102088c:	e0fffe17 	ldw	r3,-8(fp)
61020890:	e0bffb03 	ldbu	r2,-20(fp)
61020894:	18800005 	stb	r2,0(r3)
}
61020898:	e037883a 	mov	sp,fp
6102089c:	dfc00117 	ldw	ra,4(sp)
610208a0:	df000017 	ldw	fp,0(sp)
610208a4:	dec00204 	addi	sp,sp,8
610208a8:	f800283a 	ret

610208ac <DDR2_RepeatRead>:
#include <io.h>

#define SHOW_PROGRESS
#define xTEST_I2C

bool DDR2_RepeatRead(int Addr, int nNum){
610208ac:	defff704 	addi	sp,sp,-36
610208b0:	dfc00815 	stw	ra,32(sp)
610208b4:	df000715 	stw	fp,28(sp)
610208b8:	df000704 	addi	fp,sp,28
610208bc:	e13ffe15 	stw	r4,-8(fp)
610208c0:	e17fff15 	stw	r5,-4(fp)
    bool bSuccess = TRUE;
610208c4:	00800044 	movi	r2,1
610208c8:	e0bffd15 	stw	r2,-12(fp)
    int i, Value, FirstValue;
    FirstValue = IORD(MEM_IF_DDR2_EMIF_BASE, Addr);
610208cc:	e0bffe17 	ldw	r2,-8(fp)
610208d0:	1085883a 	add	r2,r2,r2
610208d4:	1085883a 	add	r2,r2,r2
610208d8:	10800037 	ldwio	r2,0(r2)
610208dc:	e0bffa15 	stw	r2,-24(fp)
    for(i=0;i<nNum;i++){
610208e0:	e03ffc15 	stw	zero,-16(fp)
610208e4:	00001406 	br	61020938 <DDR2_RepeatRead+0x8c>
        Value = IORD(MEM_IF_DDR2_EMIF_BASE, Addr);
610208e8:	e0bffe17 	ldw	r2,-8(fp)
610208ec:	1085883a 	add	r2,r2,r2
610208f0:	1085883a 	add	r2,r2,r2
610208f4:	10800037 	ldwio	r2,0(r2)
610208f8:	e0bffb15 	stw	r2,-20(fp)
        if (Value != FirstValue){
610208fc:	e0fffb17 	ldw	r3,-20(fp)
61020900:	e0bffa17 	ldw	r2,-24(fp)
61020904:	18800926 	beq	r3,r2,6102092c <DDR2_RepeatRead+0x80>
            printf("Data mismatch at try=%d/%d, Read=%08Xh, Expected=%08Xh\n", i, nNum, Value, FirstValue);
61020908:	e0bffa17 	ldw	r2,-24(fp)
6102090c:	d8800015 	stw	r2,0(sp)
61020910:	011840f4 	movhi	r4,24835
61020914:	2136e004 	addi	r4,r4,-9344
61020918:	e17ffc17 	ldw	r5,-16(fp)
6102091c:	e1bfff17 	ldw	r6,-4(fp)
61020920:	e1fffb17 	ldw	r7,-20(fp)
61020924:	1021afc0 	call	61021afc <printf>
            bSuccess = FALSE;
61020928:	e03ffd15 	stw	zero,-12(fp)

bool DDR2_RepeatRead(int Addr, int nNum){
    bool bSuccess = TRUE;
    int i, Value, FirstValue;
    FirstValue = IORD(MEM_IF_DDR2_EMIF_BASE, Addr);
    for(i=0;i<nNum;i++){
6102092c:	e0bffc17 	ldw	r2,-16(fp)
61020930:	10800044 	addi	r2,r2,1
61020934:	e0bffc15 	stw	r2,-16(fp)
61020938:	e0fffc17 	ldw	r3,-16(fp)
6102093c:	e0bfff17 	ldw	r2,-4(fp)
61020940:	18bfe916 	blt	r3,r2,610208e8 <DDR2_RepeatRead+0x3c>
            printf("Data mismatch at try=%d/%d, Read=%08Xh, Expected=%08Xh\n", i, nNum, Value, FirstValue);
            bSuccess = FALSE;
        }            
    }
    
    if (bSuccess)
61020944:	e0bffd17 	ldw	r2,-12(fp)
61020948:	1005003a 	cmpeq	r2,r2,zero
6102094c:	1000061e 	bne	r2,zero,61020968 <DDR2_RepeatRead+0xbc>
        printf("Repeat read  success, addr=%d, repeat=%d, value=%08Xh\n", Addr, nNum, FirstValue); 
61020950:	011840f4 	movhi	r4,24835
61020954:	2136ee04 	addi	r4,r4,-9288
61020958:	e17ffe17 	ldw	r5,-8(fp)
6102095c:	e1bfff17 	ldw	r6,-4(fp)
61020960:	e1fffa17 	ldw	r7,-24(fp)
61020964:	1021afc0 	call	61021afc <printf>
    return bSuccess;
61020968:	e0bffd17 	ldw	r2,-12(fp)
}
6102096c:	e037883a 	mov	sp,fp
61020970:	dfc00117 	ldw	ra,4(sp)
61020974:	df000017 	ldw	fp,0(sp)
61020978:	dec00204 	addi	sp,sp,8
6102097c:	f800283a 	ret

61020980 <main>:
}

#endif //TEST_I2C


int main(){
61020980:	defff404 	addi	sp,sp,-48
61020984:	dfc00b15 	stw	ra,44(sp)
61020988:	df000a15 	stw	fp,40(sp)
6102098c:	dc000915 	stw	r16,36(sp)
61020990:	df000904 	addi	fp,sp,36

    bool bPass, bLoop = FALSE;
61020994:	e03ffe15 	stw	zero,-8(fp)
    int MemSize = MEM_IF_DDR2_EMIF_SPAN;
61020998:	00900034 	movhi	r2,16384
6102099c:	e0bffd15 	stw	r2,-12(fp)
    int TimeStart, TimeElapsed, TestIndex = 0;
610209a0:	e03ffa15 	stw	zero,-24(fp)
    void *ddr2_base = (void *)MEM_IF_DDR2_EMIF_BASE;
610209a4:	e03ff915 	stw	zero,-28(fp)
    alt_u32 InitValue;
    alt_u8 ButtonMask;
    
    
    printf("===== DE4 DDR2 Test Program (UniPHY) =====\n");
610209a8:	011840f4 	movhi	r4,24835
610209ac:	2136fc04 	addi	r4,r4,-9232
610209b0:	1021c380 	call	61021c38 <puts>
    printf("DDR2 Clock: 400 MHZ\n");
610209b4:	011840f4 	movhi	r4,24835
610209b8:	21370704 	addi	r4,r4,-9188
610209bc:	1021c380 	call	61021c38 <puts>
    printf("DDR2  Size: %d MBytes\n", MEM_IF_DDR2_EMIF_SPAN/1024/1024);
610209c0:	011840f4 	movhi	r4,24835
610209c4:	21370c04 	addi	r4,r4,-9168
610209c8:	01410004 	movi	r5,1024
610209cc:	1021afc0 	call	61021afc <printf>
610209d0:	00000006 	br	610209d4 <main+0x54>
#ifdef TEST_I2C    
    printf("DDR2 PSD Test: Yes\n");
#endif    
    
    while(1){
        printf("\n==========================================================\n");
610209d4:	011840f4 	movhi	r4,24835
610209d8:	21371204 	addi	r4,r4,-9144
610209dc:	1021c380 	call	61021c38 <puts>
        printf("Press any BUTTON to start test [BUTTON0 for continued test] \n");
610209e0:	011840f4 	movhi	r4,24835
610209e4:	21372104 	addi	r4,r4,-9084
610209e8:	1021c380 	call	61021c38 <puts>
        ButtonMask = 0x0F;
610209ec:	008003c4 	movi	r2,15
610209f0:	e0bff705 	stb	r2,-36(fp)
        while((ButtonMask & 0x0F) == 0x0F){
610209f4:	00000506 	br	61020a0c <main+0x8c>
            ButtonMask = IORD(BUTTON_BASE, 0) & 0x0F;
610209f8:	00980034 	movhi	r2,24576
610209fc:	10801404 	addi	r2,r2,80
61020a00:	10800037 	ldwio	r2,0(r2)
61020a04:	108003cc 	andi	r2,r2,15
61020a08:	e0bff705 	stb	r2,-36(fp)
    
    while(1){
        printf("\n==========================================================\n");
        printf("Press any BUTTON to start test [BUTTON0 for continued test] \n");
        ButtonMask = 0x0F;
        while((ButtonMask & 0x0F) == 0x0F){
61020a0c:	e0bff703 	ldbu	r2,-36(fp)
61020a10:	108003cc 	andi	r2,r2,15
61020a14:	108003e0 	cmpeqi	r2,r2,15
61020a18:	103ff71e 	bne	r2,zero,610209f8 <main+0x78>
            ButtonMask = IORD(BUTTON_BASE, 0) & 0x0F;
        }
        
        if ((ButtonMask & 0x01) == 0x00){
61020a1c:	e0bff703 	ldbu	r2,-36(fp)
61020a20:	1080004c 	andi	r2,r2,1
61020a24:	1004c03a 	cmpne	r2,r2,zero
61020a28:	1000031e 	bne	r2,zero,61020a38 <main+0xb8>
            bLoop = TRUE;
61020a2c:	00800044 	movi	r2,1
61020a30:	e0bffe15 	stw	r2,-8(fp)
61020a34:	00000106 	br	61020a3c <main+0xbc>
        }else{
            bLoop = FALSE;
61020a38:	e03ffe15 	stw	zero,-8(fp)
        }                    
        
        bPass = TRUE;
61020a3c:	00800044 	movi	r2,1
61020a40:	e0bfff15 	stw	r2,-4(fp)
        TestIndex = 0;
61020a44:	e03ffa15 	stw	zero,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
61020a48:	009840f4 	movhi	r2,24835
61020a4c:	10856c04 	addi	r2,r2,5552
61020a50:	10800017 	ldw	r2,0(r2)
        
        do{
        
            TimeStart = alt_nticks();
61020a54:	e0bffc15 	stw	r2,-16(fp)
            TestIndex++;
61020a58:	e0bffa17 	ldw	r2,-24(fp)
61020a5c:	10800044 	addi	r2,r2,1
61020a60:	e0bffa15 	stw	r2,-24(fp)
            else        
                printf("I2C NG\n");
#endif                
    
            // memory test
            printf("=====> DDR2 Testing, Iteration: %d\n", TestIndex);
61020a64:	011840f4 	movhi	r4,24835
61020a68:	21373104 	addi	r4,r4,-9020
61020a6c:	e17ffa17 	ldw	r5,-24(fp)
61020a70:	1021afc0 	call	61021afc <printf>
61020a74:	009840f4 	movhi	r2,24835
61020a78:	10856c04 	addi	r2,r2,5552
61020a7c:	10800017 	ldw	r2,0(r2)
            InitValue = alt_nticks();
61020a80:	e0bff815 	stw	r2,-32(fp)
            bPass = TMEM_Verify((alt_u32)ddr2_base, MemSize, InitValue);
61020a84:	e0bff917 	ldw	r2,-28(fp)
61020a88:	1009883a 	mov	r4,r2
61020a8c:	e17ffd17 	ldw	r5,-12(fp)
61020a90:	e1bff817 	ldw	r6,-32(fp)
61020a94:	1020b440 	call	61020b44 <TMEM_Verify>
61020a98:	e0bfff15 	stw	r2,-4(fp)
61020a9c:	009840f4 	movhi	r2,24835
61020aa0:	10856c04 	addi	r2,r2,5552
61020aa4:	10800017 	ldw	r2,0(r2)
61020aa8:	1007883a 	mov	r3,r2
            TimeElapsed = alt_nticks()-TimeStart;
61020aac:	e0bffc17 	ldw	r2,-16(fp)
61020ab0:	1885c83a 	sub	r2,r3,r2
61020ab4:	e0bffb15 	stw	r2,-20(fp)
            if (bPass){
61020ab8:	e0bfff17 	ldw	r2,-4(fp)
61020abc:	1005003a 	cmpeq	r2,r2,zero
61020ac0:	1000161e 	bne	r2,zero,61020b1c <main+0x19c>
                printf("DDR2 test pass, size=%d bytes, %.3f sec\n", MemSize, (float)TimeElapsed/(float)alt_ticks_per_second());
61020ac4:	e13ffb17 	ldw	r4,-20(fp)
61020ac8:	10211700 	call	61021170 <__floatsisf>
61020acc:	1021883a 	mov	r16,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
61020ad0:	009840f4 	movhi	r2,24835
61020ad4:	10856b04 	addi	r2,r2,5548
61020ad8:	10800017 	ldw	r2,0(r2)
61020adc:	1009883a 	mov	r4,r2
61020ae0:	102125c0 	call	6102125c <__floatunsisf>
61020ae4:	8009883a 	mov	r4,r16
61020ae8:	100b883a 	mov	r5,r2
61020aec:	1020ffc0 	call	61020ffc <__divsf3>
61020af0:	1009883a 	mov	r4,r2
61020af4:	10212080 	call	61021208 <__extendsfdf2>
61020af8:	100f883a 	mov	r7,r2
61020afc:	1811883a 	mov	r8,r3
61020b00:	011840f4 	movhi	r4,24835
61020b04:	21373a04 	addi	r4,r4,-8984
61020b08:	e17ffd17 	ldw	r5,-12(fp)
61020b0c:	380d883a 	mov	r6,r7
61020b10:	400f883a 	mov	r7,r8
61020b14:	1021afc0 	call	61021afc <printf>
61020b18:	00000306 	br	61020b28 <main+0x1a8>
            }else{
                printf("DDR2 test fail\n");
61020b1c:	011840f4 	movhi	r4,24835
61020b20:	21374504 	addi	r4,r4,-8940
61020b24:	1021c380 	call	61021c38 <puts>
            }
        }while(bLoop && bPass);
61020b28:	e0bffe17 	ldw	r2,-8(fp)
61020b2c:	1005003a 	cmpeq	r2,r2,zero
61020b30:	103fa81e 	bne	r2,zero,610209d4 <main+0x54>
61020b34:	e0bfff17 	ldw	r2,-4(fp)
61020b38:	1004c03a 	cmpne	r2,r2,zero
61020b3c:	103fc21e 	bne	r2,zero,61020a48 <main+0xc8>
    }        
61020b40:	003fa406 	br	610209d4 <main+0x54>

61020b44 <TMEM_Verify>:
#include "terasic_includes.h"
#include "mem_test.h"

#define SHOW_PROGRESS

bool TMEM_Verify(alt_u32 BaseAddr, alt_u32 ByteLen, alt_u32 InitValue){
61020b44:	defee204 	addi	sp,sp,-1144
61020b48:	dfc11d15 	stw	ra,1140(sp)
61020b4c:	df011c15 	stw	fp,1136(sp)
61020b50:	dc411b15 	stw	r17,1132(sp)
61020b54:	dc011a15 	stw	r16,1128(sp)
61020b58:	df011a04 	addi	fp,sp,1128
61020b5c:	e13ffb15 	stw	r4,-20(fp)
61020b60:	e17ffc15 	stw	r5,-16(fp)
61020b64:	e1bffd15 	stw	r6,-12(fp)
    bool bPass = TRUE;
61020b68:	00800044 	movi	r2,1
61020b6c:	e0beef15 	stw	r2,-1092(fp)
    typedef alt_u32 my_data;
    my_data szData[257];
    int i, nRemainedLen, nAccessLen;
    my_data *pDes, *pSrc;
    int nItemNum, nPos;
    const int my_data_size = sizeof(my_data);
61020b70:	00800104 	movi	r2,4
61020b74:	e0bee715 	stw	r2,-1124(fp)
#ifdef SHOW_PROGRESS
    int nProgressIndex=0;
61020b78:	e03ee615 	stw	zero,-1128(fp)
    alt_u32 szProgress[10];
    
    for(i=0;i<10;i++){
61020b7c:	e03eee15 	stw	zero,-1096(fp)
61020b80:	00001606 	br	61020bdc <TMEM_Verify+0x98>
        szProgress[i] = ByteLen/10*(i+1);     
61020b84:	e13eee17 	ldw	r4,-1096(fp)
61020b88:	e0fffc17 	ldw	r3,-16(fp)
61020b8c:	00b33374 	movhi	r2,52429
61020b90:	10b33344 	addi	r2,r2,-13107
61020b94:	188b383a 	mul	r5,r3,r2
61020b98:	e17ffe15 	stw	r5,-8(fp)
61020b9c:	1886383a 	mulxuu	r3,r3,r2
61020ba0:	e0ffff15 	stw	r3,-4(fp)
61020ba4:	e0bfff17 	ldw	r2,-4(fp)
61020ba8:	1006d0fa 	srli	r3,r2,3
61020bac:	e0beee17 	ldw	r2,-1096(fp)
61020bb0:	10800044 	addi	r2,r2,1
61020bb4:	1887383a 	mul	r3,r3,r2
61020bb8:	2105883a 	add	r2,r4,r4
61020bbc:	1085883a 	add	r2,r2,r2
61020bc0:	e13ee604 	addi	r4,fp,-1128
61020bc4:	1105883a 	add	r2,r2,r4
61020bc8:	10810b04 	addi	r2,r2,1068
61020bcc:	10c00015 	stw	r3,0(r2)
    const int my_data_size = sizeof(my_data);
#ifdef SHOW_PROGRESS
    int nProgressIndex=0;
    alt_u32 szProgress[10];
    
    for(i=0;i<10;i++){
61020bd0:	e0beee17 	ldw	r2,-1096(fp)
61020bd4:	10800044 	addi	r2,r2,1
61020bd8:	e0beee15 	stw	r2,-1096(fp)
61020bdc:	e0beee17 	ldw	r2,-1096(fp)
61020be0:	10800290 	cmplti	r2,r2,10
61020be4:	103fe71e 	bne	r2,zero,61020b84 <TMEM_Verify+0x40>
        szProgress[i] = ByteLen/10*(i+1);     
    }
    
#endif    
    
    nItemNum = sizeof(szData)/sizeof(szData[0]);
61020be8:	00804044 	movi	r2,257
61020bec:	e0bee915 	stw	r2,-1116(fp)
    for(i=0;i<nItemNum;i++){
61020bf0:	e03eee15 	stw	zero,-1096(fp)
61020bf4:	00001f06 	br	61020c74 <TMEM_Verify+0x130>
        if (i == 0)
61020bf8:	e0beee17 	ldw	r2,-1096(fp)
61020bfc:	1004c03a 	cmpne	r2,r2,zero
61020c00:	1000091e 	bne	r2,zero,61020c28 <TMEM_Verify+0xe4>
            szData[i] = InitValue;
61020c04:	e0beee17 	ldw	r2,-1096(fp)
61020c08:	1085883a 	add	r2,r2,r2
61020c0c:	1085883a 	add	r2,r2,r2
61020c10:	e17ee604 	addi	r5,fp,-1128
61020c14:	1145883a 	add	r2,r2,r5
61020c18:	10c00a04 	addi	r3,r2,40
61020c1c:	e0bffd17 	ldw	r2,-12(fp)
61020c20:	18800015 	stw	r2,0(r3)
61020c24:	00001006 	br	61020c68 <TMEM_Verify+0x124>
        else     
            szData[i] = szData[i-1] * 13;
61020c28:	e13eee17 	ldw	r4,-1096(fp)
61020c2c:	e0beee17 	ldw	r2,-1096(fp)
61020c30:	10bfffc4 	addi	r2,r2,-1
61020c34:	1085883a 	add	r2,r2,r2
61020c38:	1085883a 	add	r2,r2,r2
61020c3c:	e0fee604 	addi	r3,fp,-1128
61020c40:	10c5883a 	add	r2,r2,r3
61020c44:	10800a04 	addi	r2,r2,40
61020c48:	10800017 	ldw	r2,0(r2)
61020c4c:	10c00364 	muli	r3,r2,13
61020c50:	2105883a 	add	r2,r4,r4
61020c54:	1085883a 	add	r2,r2,r2
61020c58:	e13ee604 	addi	r4,fp,-1128
61020c5c:	1105883a 	add	r2,r2,r4
61020c60:	10800a04 	addi	r2,r2,40
61020c64:	10c00015 	stw	r3,0(r2)
    }
    
#endif    
    
    nItemNum = sizeof(szData)/sizeof(szData[0]);
    for(i=0;i<nItemNum;i++){
61020c68:	e0beee17 	ldw	r2,-1096(fp)
61020c6c:	10800044 	addi	r2,r2,1
61020c70:	e0beee15 	stw	r2,-1096(fp)
61020c74:	e0feee17 	ldw	r3,-1096(fp)
61020c78:	e0bee917 	ldw	r2,-1116(fp)
61020c7c:	18bfde16 	blt	r3,r2,61020bf8 <TMEM_Verify+0xb4>
        if (i == 0)
            szData[i] = InitValue;
        else     
            szData[i] = szData[i-1] * 13;
    }
    szData[nItemNum-1] = 0xAAAAAAAA;
61020c80:	e0bee917 	ldw	r2,-1116(fp)
61020c84:	10bfffc4 	addi	r2,r2,-1
61020c88:	1085883a 	add	r2,r2,r2
61020c8c:	1085883a 	add	r2,r2,r2
61020c90:	e17ee604 	addi	r5,fp,-1128
61020c94:	1145883a 	add	r2,r2,r5
61020c98:	10c00a04 	addi	r3,r2,40
61020c9c:	00aaaaf4 	movhi	r2,43691
61020ca0:	10aaaa84 	addi	r2,r2,-21846
61020ca4:	18800015 	stw	r2,0(r3)
    szData[nItemNum-2] = 0x55555555;
61020ca8:	e0bee917 	ldw	r2,-1116(fp)
61020cac:	10bfff84 	addi	r2,r2,-2
61020cb0:	1085883a 	add	r2,r2,r2
61020cb4:	1085883a 	add	r2,r2,r2
61020cb8:	e0fee604 	addi	r3,fp,-1128
61020cbc:	10c5883a 	add	r2,r2,r3
61020cc0:	10c00a04 	addi	r3,r2,40
61020cc4:	00955574 	movhi	r2,21845
61020cc8:	10955544 	addi	r2,r2,21845
61020ccc:	18800015 	stw	r2,0(r3)
    szData[nItemNum-3] = 0x00000000;
61020cd0:	e0bee917 	ldw	r2,-1116(fp)
61020cd4:	10bfff44 	addi	r2,r2,-3
61020cd8:	1085883a 	add	r2,r2,r2
61020cdc:	1085883a 	add	r2,r2,r2
61020ce0:	e13ee604 	addi	r4,fp,-1128
61020ce4:	1105883a 	add	r2,r2,r4
61020ce8:	10800a04 	addi	r2,r2,40
61020cec:	10000015 	stw	zero,0(r2)
    szData[nItemNum-4] = 0xFFFFFFFF;
61020cf0:	e0bee917 	ldw	r2,-1116(fp)
61020cf4:	10bfff04 	addi	r2,r2,-4
61020cf8:	1085883a 	add	r2,r2,r2
61020cfc:	1085883a 	add	r2,r2,r2
61020d00:	e17ee604 	addi	r5,fp,-1128
61020d04:	1145883a 	add	r2,r2,r5
61020d08:	10c00a04 	addi	r3,r2,40
61020d0c:	00bfffc4 	movi	r2,-1
61020d10:	18800015 	stw	r2,0(r3)
    
#ifdef SHOW_PROGRESS
    printf("write...\n");
61020d14:	011840f4 	movhi	r4,24835
61020d18:	21374904 	addi	r4,r4,-8924
61020d1c:	1021c380 	call	61021c38 <puts>
#endif      
    // write
    pDes = (my_data *)BaseAddr;
61020d20:	e0bffb17 	ldw	r2,-20(fp)
61020d24:	e0beeb15 	stw	r2,-1108(fp)
    nAccessLen = sizeof(szData);
61020d28:	00810104 	movi	r2,1028
61020d2c:	e0beec15 	stw	r2,-1104(fp)
    nItemNum = nAccessLen / my_data_size;
61020d30:	e13eec17 	ldw	r4,-1104(fp)
61020d34:	e17ee717 	ldw	r5,-1124(fp)
61020d38:	10213d00 	call	610213d0 <__divsi3>
61020d3c:	e0bee915 	stw	r2,-1116(fp)
    nPos = 0;
61020d40:	e03ee815 	stw	zero,-1120(fp)
    while(nPos < ByteLen){
61020d44:	00003206 	br	61020e10 <TMEM_Verify+0x2cc>
        nRemainedLen = ByteLen - nPos;
61020d48:	e0fee817 	ldw	r3,-1120(fp)
61020d4c:	e0bffc17 	ldw	r2,-16(fp)
61020d50:	10c5c83a 	sub	r2,r2,r3
61020d54:	e0beed15 	stw	r2,-1100(fp)
        if (nAccessLen > nRemainedLen){
61020d58:	e0feec17 	ldw	r3,-1104(fp)
61020d5c:	e0beed17 	ldw	r2,-1100(fp)
61020d60:	10c0060e 	bge	r2,r3,61020d7c <TMEM_Verify+0x238>
            nAccessLen = nRemainedLen;
61020d64:	e0beed17 	ldw	r2,-1100(fp)
61020d68:	e0beec15 	stw	r2,-1104(fp)
            nItemNum = nAccessLen / my_data_size;
61020d6c:	e13eec17 	ldw	r4,-1104(fp)
61020d70:	e17ee717 	ldw	r5,-1124(fp)
61020d74:	10213d00 	call	610213d0 <__divsi3>
61020d78:	e0bee915 	stw	r2,-1116(fp)
        }    
        memcpy(pDes, szData, nAccessLen);
61020d7c:	e1beec17 	ldw	r6,-1104(fp)
61020d80:	e0beeb17 	ldw	r2,-1108(fp)
61020d84:	e0fef004 	addi	r3,fp,-1088
61020d88:	1009883a 	mov	r4,r2
61020d8c:	180b883a 	mov	r5,r3
61020d90:	1021a5c0 	call	61021a5c <memcpy>
        pDes += nItemNum;
61020d94:	e0bee917 	ldw	r2,-1116(fp)
61020d98:	1085883a 	add	r2,r2,r2
61020d9c:	1085883a 	add	r2,r2,r2
61020da0:	1007883a 	mov	r3,r2
61020da4:	e0beeb17 	ldw	r2,-1108(fp)
61020da8:	10c5883a 	add	r2,r2,r3
61020dac:	e0beeb15 	stw	r2,-1108(fp)
        nPos += nAccessLen;
61020db0:	e0fee817 	ldw	r3,-1120(fp)
61020db4:	e0beec17 	ldw	r2,-1104(fp)
61020db8:	1885883a 	add	r2,r3,r2
61020dbc:	e0bee815 	stw	r2,-1120(fp)
#ifdef SHOW_PROGRESS
        if (nProgressIndex <= 9 && nPos >= szProgress[nProgressIndex]){
61020dc0:	e0bee617 	ldw	r2,-1128(fp)
61020dc4:	10800288 	cmpgei	r2,r2,10
61020dc8:	1000111e 	bne	r2,zero,61020e10 <TMEM_Verify+0x2cc>
61020dcc:	e0fee817 	ldw	r3,-1120(fp)
61020dd0:	e0bee617 	ldw	r2,-1128(fp)
61020dd4:	1085883a 	add	r2,r2,r2
61020dd8:	1085883a 	add	r2,r2,r2
61020ddc:	e13ee604 	addi	r4,fp,-1128
61020de0:	1105883a 	add	r2,r2,r4
61020de4:	10810b04 	addi	r2,r2,1068
61020de8:	10800017 	ldw	r2,0(r2)
61020dec:	18800836 	bltu	r3,r2,61020e10 <TMEM_Verify+0x2cc>
            nProgressIndex++;
61020df0:	e0bee617 	ldw	r2,-1128(fp)
61020df4:	10800044 	addi	r2,r2,1
61020df8:	e0bee615 	stw	r2,-1128(fp)
            printf("%02d%% ", nProgressIndex*10);
61020dfc:	e0bee617 	ldw	r2,-1128(fp)
61020e00:	114002a4 	muli	r5,r2,10
61020e04:	011840f4 	movhi	r4,24835
61020e08:	21374c04 	addi	r4,r4,-8912
61020e0c:	1021afc0 	call	61021afc <printf>
    // write
    pDes = (my_data *)BaseAddr;
    nAccessLen = sizeof(szData);
    nItemNum = nAccessLen / my_data_size;
    nPos = 0;
    while(nPos < ByteLen){
61020e10:	e0fee817 	ldw	r3,-1120(fp)
61020e14:	e0bffc17 	ldw	r2,-16(fp)
61020e18:	18bfcb36 	bltu	r3,r2,61020d48 <TMEM_Verify+0x204>
            printf("%02d%% ", nProgressIndex*10);
        }
#endif           
    } 
    
    alt_dcache_flush_all();
61020e1c:	102b0d00 	call	6102b0d0 <alt_dcache_flush_all>
    
#ifdef SHOW_PROGRESS
    nProgressIndex = 0;
61020e20:	e03ee615 	stw	zero,-1128(fp)
    printf("\nread/verify...\n");
61020e24:	011840f4 	movhi	r4,24835
61020e28:	21374e04 	addi	r4,r4,-8904
61020e2c:	1021c380 	call	61021c38 <puts>
#endif      
    
    // read & verify
    pSrc = (my_data *)BaseAddr;
61020e30:	e0bffb17 	ldw	r2,-20(fp)
61020e34:	e0beea15 	stw	r2,-1112(fp)
    nAccessLen = sizeof(szData);
61020e38:	00810104 	movi	r2,1028
61020e3c:	e0beec15 	stw	r2,-1104(fp)
    nItemNum = nAccessLen / my_data_size;
61020e40:	e13eec17 	ldw	r4,-1104(fp)
61020e44:	e17ee717 	ldw	r5,-1124(fp)
61020e48:	10213d00 	call	610213d0 <__divsi3>
61020e4c:	e0bee915 	stw	r2,-1116(fp)
    nPos = 0;
61020e50:	e03ee815 	stw	zero,-1120(fp)
    while(bPass && nPos < ByteLen){
61020e54:	00005906 	br	61020fbc <TMEM_Verify+0x478>
        nRemainedLen = ByteLen - nPos;
61020e58:	e0fee817 	ldw	r3,-1120(fp)
61020e5c:	e0bffc17 	ldw	r2,-16(fp)
61020e60:	10c5c83a 	sub	r2,r2,r3
61020e64:	e0beed15 	stw	r2,-1100(fp)
        if (nAccessLen > nRemainedLen){
61020e68:	e0feec17 	ldw	r3,-1104(fp)
61020e6c:	e0beed17 	ldw	r2,-1100(fp)
61020e70:	10c0060e 	bge	r2,r3,61020e8c <TMEM_Verify+0x348>
            nAccessLen = nRemainedLen;
61020e74:	e0beed17 	ldw	r2,-1100(fp)
61020e78:	e0beec15 	stw	r2,-1104(fp)
            nItemNum = nAccessLen / my_data_size;
61020e7c:	e13eec17 	ldw	r4,-1104(fp)
61020e80:	e17ee717 	ldw	r5,-1124(fp)
61020e84:	10213d00 	call	610213d0 <__divsi3>
61020e88:	e0bee915 	stw	r2,-1116(fp)
        }            
        pDes = szData;
61020e8c:	e0bef004 	addi	r2,fp,-1088
61020e90:	e0beeb15 	stw	r2,-1108(fp)
        for(i=0;i<nItemNum && bPass;i++){
61020e94:	e03eee15 	stw	zero,-1096(fp)
61020e98:	00002a06 	br	61020f44 <TMEM_Verify+0x400>
            if (*pSrc++ != *pDes++){ 
61020e9c:	e0beea17 	ldw	r2,-1112(fp)
61020ea0:	10c00017 	ldw	r3,0(r2)
61020ea4:	e0beeb17 	ldw	r2,-1108(fp)
61020ea8:	10800017 	ldw	r2,0(r2)
61020eac:	1884c03a 	cmpne	r2,r3,r2
61020eb0:	1007883a 	mov	r3,r2
61020eb4:	e0beea17 	ldw	r2,-1112(fp)
61020eb8:	10800104 	addi	r2,r2,4
61020ebc:	e0beea15 	stw	r2,-1112(fp)
61020ec0:	e0beeb17 	ldw	r2,-1108(fp)
61020ec4:	10800104 	addi	r2,r2,4
61020ec8:	e0beeb15 	stw	r2,-1108(fp)
61020ecc:	18803fcc 	andi	r2,r3,255
61020ed0:	1005003a 	cmpeq	r2,r2,zero
61020ed4:	1000181e 	bne	r2,zero,61020f38 <TMEM_Verify+0x3f4>
#ifdef SHOW_PROGRESS                
               printf("verify ng, read=%08Xh, expected=%08Xh, WordIndex=%Xh\n", (int)*(pSrc-1), (int)szData[i], (nPos/my_data_size)+i);
61020ed8:	e0beea17 	ldw	r2,-1112(fp)
61020edc:	10bfff04 	addi	r2,r2,-4
61020ee0:	10800017 	ldw	r2,0(r2)
61020ee4:	1023883a 	mov	r17,r2
61020ee8:	e0beee17 	ldw	r2,-1096(fp)
61020eec:	1085883a 	add	r2,r2,r2
61020ef0:	1085883a 	add	r2,r2,r2
61020ef4:	e17ee604 	addi	r5,fp,-1128
61020ef8:	1145883a 	add	r2,r2,r5
61020efc:	10800a04 	addi	r2,r2,40
61020f00:	10800017 	ldw	r2,0(r2)
61020f04:	1021883a 	mov	r16,r2
61020f08:	e13ee817 	ldw	r4,-1120(fp)
61020f0c:	e17ee717 	ldw	r5,-1124(fp)
61020f10:	10213d00 	call	610213d0 <__divsi3>
61020f14:	1007883a 	mov	r3,r2
61020f18:	e0beee17 	ldw	r2,-1096(fp)
61020f1c:	188f883a 	add	r7,r3,r2
61020f20:	011840f4 	movhi	r4,24835
61020f24:	21375204 	addi	r4,r4,-8888
61020f28:	880b883a 	mov	r5,r17
61020f2c:	800d883a 	mov	r6,r16
61020f30:	1021afc0 	call	61021afc <printf>
#endif               
                bPass = FALSE;
61020f34:	e03eef15 	stw	zero,-1092(fp)
        if (nAccessLen > nRemainedLen){
            nAccessLen = nRemainedLen;
            nItemNum = nAccessLen / my_data_size;
        }            
        pDes = szData;
        for(i=0;i<nItemNum && bPass;i++){
61020f38:	e0beee17 	ldw	r2,-1096(fp)
61020f3c:	10800044 	addi	r2,r2,1
61020f40:	e0beee15 	stw	r2,-1096(fp)
61020f44:	e0feee17 	ldw	r3,-1096(fp)
61020f48:	e0bee917 	ldw	r2,-1116(fp)
61020f4c:	1880030e 	bge	r3,r2,61020f5c <TMEM_Verify+0x418>
61020f50:	e0beef17 	ldw	r2,-1092(fp)
61020f54:	1004c03a 	cmpne	r2,r2,zero
61020f58:	103fd01e 	bne	r2,zero,61020e9c <TMEM_Verify+0x358>
               printf("verify ng, read=%08Xh, expected=%08Xh, WordIndex=%Xh\n", (int)*(pSrc-1), (int)szData[i], (nPos/my_data_size)+i);
#endif               
                bPass = FALSE;
            }    
        }
        nPos += nAccessLen;
61020f5c:	e0fee817 	ldw	r3,-1120(fp)
61020f60:	e0beec17 	ldw	r2,-1104(fp)
61020f64:	1885883a 	add	r2,r3,r2
61020f68:	e0bee815 	stw	r2,-1120(fp)
#ifdef SHOW_PROGRESS
        if (nProgressIndex <= 9 && nPos >= szProgress[nProgressIndex]){
61020f6c:	e0bee617 	ldw	r2,-1128(fp)
61020f70:	10800288 	cmpgei	r2,r2,10
61020f74:	1000111e 	bne	r2,zero,61020fbc <TMEM_Verify+0x478>
61020f78:	e0fee817 	ldw	r3,-1120(fp)
61020f7c:	e0bee617 	ldw	r2,-1128(fp)
61020f80:	1085883a 	add	r2,r2,r2
61020f84:	1085883a 	add	r2,r2,r2
61020f88:	e13ee604 	addi	r4,fp,-1128
61020f8c:	1105883a 	add	r2,r2,r4
61020f90:	10810b04 	addi	r2,r2,1068
61020f94:	10800017 	ldw	r2,0(r2)
61020f98:	18800836 	bltu	r3,r2,61020fbc <TMEM_Verify+0x478>
            nProgressIndex++;
61020f9c:	e0bee617 	ldw	r2,-1128(fp)
61020fa0:	10800044 	addi	r2,r2,1
61020fa4:	e0bee615 	stw	r2,-1128(fp)
            printf("%02d%% ", nProgressIndex*10);
61020fa8:	e0bee617 	ldw	r2,-1128(fp)
61020fac:	114002a4 	muli	r5,r2,10
61020fb0:	011840f4 	movhi	r4,24835
61020fb4:	21374c04 	addi	r4,r4,-8912
61020fb8:	1021afc0 	call	61021afc <printf>
    // read & verify
    pSrc = (my_data *)BaseAddr;
    nAccessLen = sizeof(szData);
    nItemNum = nAccessLen / my_data_size;
    nPos = 0;
    while(bPass && nPos < ByteLen){
61020fbc:	e0beef17 	ldw	r2,-1092(fp)
61020fc0:	1005003a 	cmpeq	r2,r2,zero
61020fc4:	1000031e 	bne	r2,zero,61020fd4 <TMEM_Verify+0x490>
61020fc8:	e0fee817 	ldw	r3,-1120(fp)
61020fcc:	e0bffc17 	ldw	r2,-16(fp)
61020fd0:	18bfa136 	bltu	r3,r2,61020e58 <TMEM_Verify+0x314>
        }
#endif          
    }     
    
#ifdef SHOW_PROGRESS
    printf("\n");
61020fd4:	01000284 	movi	r4,10
61020fd8:	1021b740 	call	61021b74 <putchar>
#endif     
    
    
    return bPass;
61020fdc:	e0beef17 	ldw	r2,-1092(fp)
}
61020fe0:	e037883a 	mov	sp,fp
61020fe4:	dfc00317 	ldw	ra,12(sp)
61020fe8:	df000217 	ldw	fp,8(sp)
61020fec:	dc400117 	ldw	r17,4(sp)
61020ff0:	dc000017 	ldw	r16,0(sp)
61020ff4:	dec00404 	addi	sp,sp,16
61020ff8:	f800283a 	ret

61020ffc <__divsf3>:
61020ffc:	defff304 	addi	sp,sp,-52
61021000:	dc400b15 	stw	r17,44(sp)
61021004:	dc400204 	addi	r17,sp,8
61021008:	dc000a15 	stw	r16,40(sp)
6102100c:	d9000015 	stw	r4,0(sp)
61021010:	d9400115 	stw	r5,4(sp)
61021014:	d809883a 	mov	r4,sp
61021018:	880b883a 	mov	r5,r17
6102101c:	dc000604 	addi	r16,sp,24
61021020:	dfc00c15 	stw	ra,48(sp)
61021024:	10216800 	call	61021680 <__unpack_f>
61021028:	d9000104 	addi	r4,sp,4
6102102c:	800b883a 	mov	r5,r16
61021030:	10216800 	call	61021680 <__unpack_f>
61021034:	d9000217 	ldw	r4,8(sp)
61021038:	00800044 	movi	r2,1
6102103c:	01800104 	movi	r6,4
61021040:	11000a2e 	bgeu	r2,r4,6102106c <__divsf3+0x70>
61021044:	d9400617 	ldw	r5,24(sp)
61021048:	1140432e 	bgeu	r2,r5,61021158 <__divsf3+0x15c>
6102104c:	d8800317 	ldw	r2,12(sp)
61021050:	d8c00717 	ldw	r3,28(sp)
61021054:	10c4f03a 	xor	r2,r2,r3
61021058:	d8800315 	stw	r2,12(sp)
6102105c:	21800226 	beq	r4,r6,61021068 <__divsf3+0x6c>
61021060:	00800084 	movi	r2,2
61021064:	2080101e 	bne	r4,r2,610210a8 <__divsf3+0xac>
61021068:	29000726 	beq	r5,r4,61021088 <__divsf3+0x8c>
6102106c:	8809883a 	mov	r4,r17
61021070:	10215200 	call	61021520 <__pack_f>
61021074:	dfc00c17 	ldw	ra,48(sp)
61021078:	dc400b17 	ldw	r17,44(sp)
6102107c:	dc000a17 	ldw	r16,40(sp)
61021080:	dec00d04 	addi	sp,sp,52
61021084:	f800283a 	ret
61021088:	011840f4 	movhi	r4,24835
6102108c:	21376004 	addi	r4,r4,-8832
61021090:	10215200 	call	61021520 <__pack_f>
61021094:	dfc00c17 	ldw	ra,48(sp)
61021098:	dc400b17 	ldw	r17,44(sp)
6102109c:	dc000a17 	ldw	r16,40(sp)
610210a0:	dec00d04 	addi	sp,sp,52
610210a4:	f800283a 	ret
610210a8:	29802d26 	beq	r5,r6,61021160 <__divsf3+0x164>
610210ac:	28801a26 	beq	r5,r2,61021118 <__divsf3+0x11c>
610210b0:	d8c00417 	ldw	r3,16(sp)
610210b4:	d8800817 	ldw	r2,32(sp)
610210b8:	d9000517 	ldw	r4,20(sp)
610210bc:	d9800917 	ldw	r6,36(sp)
610210c0:	1885c83a 	sub	r2,r3,r2
610210c4:	d8800415 	stw	r2,16(sp)
610210c8:	2180032e 	bgeu	r4,r6,610210d8 <__divsf3+0xdc>
610210cc:	10bfffc4 	addi	r2,r2,-1
610210d0:	d8800415 	stw	r2,16(sp)
610210d4:	2109883a 	add	r4,r4,r4
610210d8:	01500034 	movhi	r5,16384
610210dc:	0007883a 	mov	r3,zero
610210e0:	0005883a 	mov	r2,zero
610210e4:	01c007c4 	movi	r7,31
610210e8:	10800044 	addi	r2,r2,1
610210ec:	21800236 	bltu	r4,r6,610210f8 <__divsf3+0xfc>
610210f0:	1946b03a 	or	r3,r3,r5
610210f4:	2189c83a 	sub	r4,r4,r6
610210f8:	280ad07a 	srli	r5,r5,1
610210fc:	2109883a 	add	r4,r4,r4
61021100:	11fff91e 	bne	r2,r7,610210e8 <__divsf3+0xec>
61021104:	19401fcc 	andi	r5,r3,127
61021108:	00801004 	movi	r2,64
6102110c:	28800a26 	beq	r5,r2,61021138 <__divsf3+0x13c>
61021110:	d8c00515 	stw	r3,20(sp)
61021114:	003fd506 	br	6102106c <__divsf3+0x70>
61021118:	8809883a 	mov	r4,r17
6102111c:	d9800215 	stw	r6,8(sp)
61021120:	10215200 	call	61021520 <__pack_f>
61021124:	dfc00c17 	ldw	ra,48(sp)
61021128:	dc400b17 	ldw	r17,44(sp)
6102112c:	dc000a17 	ldw	r16,40(sp)
61021130:	dec00d04 	addi	sp,sp,52
61021134:	f800283a 	ret
61021138:	1880200c 	andi	r2,r3,128
6102113c:	103ff41e 	bne	r2,zero,61021110 <__divsf3+0x114>
61021140:	203ff326 	beq	r4,zero,61021110 <__divsf3+0x114>
61021144:	1947883a 	add	r3,r3,r5
61021148:	00bfe004 	movi	r2,-128
6102114c:	1886703a 	and	r3,r3,r2
61021150:	d8c00515 	stw	r3,20(sp)
61021154:	003fc506 	br	6102106c <__divsf3+0x70>
61021158:	8009883a 	mov	r4,r16
6102115c:	003fc406 	br	61021070 <__divsf3+0x74>
61021160:	8809883a 	mov	r4,r17
61021164:	d8000515 	stw	zero,20(sp)
61021168:	d8000415 	stw	zero,16(sp)
6102116c:	003fc006 	br	61021070 <__divsf3+0x74>

61021170 <__floatsisf>:
61021170:	2006d7fa 	srli	r3,r4,31
61021174:	defffa04 	addi	sp,sp,-24
61021178:	008000c4 	movi	r2,3
6102117c:	dfc00515 	stw	ra,20(sp)
61021180:	dc000415 	stw	r16,16(sp)
61021184:	d8800015 	stw	r2,0(sp)
61021188:	d8c00115 	stw	r3,4(sp)
6102118c:	2000081e 	bne	r4,zero,610211b0 <__floatsisf+0x40>
61021190:	00800084 	movi	r2,2
61021194:	d8800015 	stw	r2,0(sp)
61021198:	d809883a 	mov	r4,sp
6102119c:	10215200 	call	61021520 <__pack_f>
610211a0:	dfc00517 	ldw	ra,20(sp)
610211a4:	dc000417 	ldw	r16,16(sp)
610211a8:	dec00604 	addi	sp,sp,24
610211ac:	f800283a 	ret
610211b0:	00800784 	movi	r2,30
610211b4:	1807003a 	cmpeq	r3,r3,zero
610211b8:	d8800215 	stw	r2,8(sp)
610211bc:	18000e1e 	bne	r3,zero,610211f8 <__floatsisf+0x88>
610211c0:	00a00034 	movhi	r2,32768
610211c4:	20800e26 	beq	r4,r2,61021200 <__floatsisf+0x90>
610211c8:	0121c83a 	sub	r16,zero,r4
610211cc:	8009883a 	mov	r4,r16
610211d0:	dc000315 	stw	r16,12(sp)
610211d4:	10214a00 	call	610214a0 <__clzsi2>
610211d8:	117fffc4 	addi	r5,r2,-1
610211dc:	017fee0e 	bge	zero,r5,61021198 <__floatsisf+0x28>
610211e0:	d8800217 	ldw	r2,8(sp)
610211e4:	8146983a 	sll	r3,r16,r5
610211e8:	1145c83a 	sub	r2,r2,r5
610211ec:	d8c00315 	stw	r3,12(sp)
610211f0:	d8800215 	stw	r2,8(sp)
610211f4:	003fe806 	br	61021198 <__floatsisf+0x28>
610211f8:	2021883a 	mov	r16,r4
610211fc:	003ff306 	br	610211cc <__floatsisf+0x5c>
61021200:	00b3c034 	movhi	r2,52992
61021204:	003fe606 	br	610211a0 <__floatsisf+0x30>

61021208 <__extendsfdf2>:
61021208:	defff904 	addi	sp,sp,-28
6102120c:	d9000115 	stw	r4,4(sp)
61021210:	d9400204 	addi	r5,sp,8
61021214:	d9000104 	addi	r4,sp,4
61021218:	dfc00615 	stw	ra,24(sp)
6102121c:	10216800 	call	61021680 <__unpack_f>
61021220:	d9c00517 	ldw	r7,20(sp)
61021224:	0011883a 	mov	r8,zero
61021228:	400697ba 	slli	r3,r8,30
6102122c:	3812d0ba 	srli	r9,r7,2
61021230:	380497ba 	slli	r2,r7,30
61021234:	d9000217 	ldw	r4,8(sp)
61021238:	d9400317 	ldw	r5,12(sp)
6102123c:	d9800417 	ldw	r6,16(sp)
61021240:	48c6b03a 	or	r3,r9,r3
61021244:	100f883a 	mov	r7,r2
61021248:	d8c00015 	stw	r3,0(sp)
6102124c:	102131c0 	call	6102131c <__make_dp>
61021250:	dfc00617 	ldw	ra,24(sp)
61021254:	dec00704 	addi	sp,sp,28
61021258:	f800283a 	ret

6102125c <__floatunsisf>:
6102125c:	defff904 	addi	sp,sp,-28
61021260:	dc400515 	stw	r17,20(sp)
61021264:	dc000415 	stw	r16,16(sp)
61021268:	dfc00615 	stw	ra,24(sp)
6102126c:	04400784 	movi	r17,30
61021270:	2021883a 	mov	r16,r4
61021274:	d8000115 	stw	zero,4(sp)
61021278:	2000091e 	bne	r4,zero,610212a0 <__floatunsisf+0x44>
6102127c:	00800084 	movi	r2,2
61021280:	d8800015 	stw	r2,0(sp)
61021284:	d809883a 	mov	r4,sp
61021288:	10215200 	call	61021520 <__pack_f>
6102128c:	dfc00617 	ldw	ra,24(sp)
61021290:	dc400517 	ldw	r17,20(sp)
61021294:	dc000417 	ldw	r16,16(sp)
61021298:	dec00704 	addi	sp,sp,28
6102129c:	f800283a 	ret
610212a0:	008000c4 	movi	r2,3
610212a4:	d9000315 	stw	r4,12(sp)
610212a8:	d8800015 	stw	r2,0(sp)
610212ac:	dc400215 	stw	r17,8(sp)
610212b0:	10214a00 	call	610214a0 <__clzsi2>
610212b4:	117fffc4 	addi	r5,r2,-1
610212b8:	0147c83a 	sub	r3,zero,r5
610212bc:	00800044 	movi	r2,1
610212c0:	10c4983a 	sll	r2,r2,r3
610212c4:	80c6d83a 	srl	r3,r16,r3
610212c8:	8949c83a 	sub	r4,r17,r5
610212cc:	10bfffc4 	addi	r2,r2,-1
610212d0:	8084703a 	and	r2,r16,r2
610212d4:	1004c03a 	cmpne	r2,r2,zero
610212d8:	1886b03a 	or	r3,r3,r2
610212dc:	28000c16 	blt	r5,zero,61021310 <__floatunsisf+0xb4>
610212e0:	8144983a 	sll	r2,r16,r5
610212e4:	8947c83a 	sub	r3,r17,r5
610212e8:	283fe626 	beq	r5,zero,61021284 <__floatunsisf+0x28>
610212ec:	d809883a 	mov	r4,sp
610212f0:	d8800315 	stw	r2,12(sp)
610212f4:	d8c00215 	stw	r3,8(sp)
610212f8:	10215200 	call	61021520 <__pack_f>
610212fc:	dfc00617 	ldw	ra,24(sp)
61021300:	dc400517 	ldw	r17,20(sp)
61021304:	dc000417 	ldw	r16,16(sp)
61021308:	dec00704 	addi	sp,sp,28
6102130c:	f800283a 	ret
61021310:	d8c00315 	stw	r3,12(sp)
61021314:	d9000215 	stw	r4,8(sp)
61021318:	003fda06 	br	61021284 <__floatunsisf+0x28>

6102131c <__make_dp>:
6102131c:	defff904 	addi	sp,sp,-28
61021320:	d8c00717 	ldw	r3,28(sp)
61021324:	d9000015 	stw	r4,0(sp)
61021328:	d809883a 	mov	r4,sp
6102132c:	dfc00515 	stw	ra,20(sp)
61021330:	d9c00615 	stw	r7,24(sp)
61021334:	d9400115 	stw	r5,4(sp)
61021338:	d9800215 	stw	r6,8(sp)
6102133c:	d8c00415 	stw	r3,16(sp)
61021340:	d9c00315 	stw	r7,12(sp)
61021344:	10217480 	call	61021748 <__pack_d>
61021348:	dfc00517 	ldw	ra,20(sp)
6102134c:	dec00704 	addi	sp,sp,28
61021350:	f800283a 	ret

61021354 <udivmodsi4>:
61021354:	29001b2e 	bgeu	r5,r4,610213c4 <udivmodsi4+0x70>
61021358:	28001a16 	blt	r5,zero,610213c4 <udivmodsi4+0x70>
6102135c:	00800044 	movi	r2,1
61021360:	0007883a 	mov	r3,zero
61021364:	01c007c4 	movi	r7,31
61021368:	00000306 	br	61021378 <udivmodsi4+0x24>
6102136c:	19c01326 	beq	r3,r7,610213bc <udivmodsi4+0x68>
61021370:	18c00044 	addi	r3,r3,1
61021374:	28000416 	blt	r5,zero,61021388 <udivmodsi4+0x34>
61021378:	294b883a 	add	r5,r5,r5
6102137c:	1085883a 	add	r2,r2,r2
61021380:	293ffa36 	bltu	r5,r4,6102136c <udivmodsi4+0x18>
61021384:	10000d26 	beq	r2,zero,610213bc <udivmodsi4+0x68>
61021388:	0007883a 	mov	r3,zero
6102138c:	21400236 	bltu	r4,r5,61021398 <udivmodsi4+0x44>
61021390:	2149c83a 	sub	r4,r4,r5
61021394:	1886b03a 	or	r3,r3,r2
61021398:	1004d07a 	srli	r2,r2,1
6102139c:	280ad07a 	srli	r5,r5,1
610213a0:	103ffa1e 	bne	r2,zero,6102138c <udivmodsi4+0x38>
610213a4:	30000226 	beq	r6,zero,610213b0 <udivmodsi4+0x5c>
610213a8:	2005883a 	mov	r2,r4
610213ac:	f800283a 	ret
610213b0:	1809883a 	mov	r4,r3
610213b4:	2005883a 	mov	r2,r4
610213b8:	f800283a 	ret
610213bc:	0007883a 	mov	r3,zero
610213c0:	003ff806 	br	610213a4 <udivmodsi4+0x50>
610213c4:	00800044 	movi	r2,1
610213c8:	0007883a 	mov	r3,zero
610213cc:	003fef06 	br	6102138c <udivmodsi4+0x38>

610213d0 <__divsi3>:
610213d0:	defffe04 	addi	sp,sp,-8
610213d4:	dc000015 	stw	r16,0(sp)
610213d8:	dfc00115 	stw	ra,4(sp)
610213dc:	0021883a 	mov	r16,zero
610213e0:	20000c16 	blt	r4,zero,61021414 <__divsi3+0x44>
610213e4:	000d883a 	mov	r6,zero
610213e8:	28000e16 	blt	r5,zero,61021424 <__divsi3+0x54>
610213ec:	10213540 	call	61021354 <udivmodsi4>
610213f0:	1007883a 	mov	r3,r2
610213f4:	8005003a 	cmpeq	r2,r16,zero
610213f8:	1000011e 	bne	r2,zero,61021400 <__divsi3+0x30>
610213fc:	00c7c83a 	sub	r3,zero,r3
61021400:	1805883a 	mov	r2,r3
61021404:	dfc00117 	ldw	ra,4(sp)
61021408:	dc000017 	ldw	r16,0(sp)
6102140c:	dec00204 	addi	sp,sp,8
61021410:	f800283a 	ret
61021414:	0109c83a 	sub	r4,zero,r4
61021418:	04000044 	movi	r16,1
6102141c:	000d883a 	mov	r6,zero
61021420:	283ff20e 	bge	r5,zero,610213ec <__divsi3+0x1c>
61021424:	014bc83a 	sub	r5,zero,r5
61021428:	8021003a 	cmpeq	r16,r16,zero
6102142c:	003fef06 	br	610213ec <__divsi3+0x1c>

61021430 <__modsi3>:
61021430:	deffff04 	addi	sp,sp,-4
61021434:	dfc00015 	stw	ra,0(sp)
61021438:	01800044 	movi	r6,1
6102143c:	2807883a 	mov	r3,r5
61021440:	20000416 	blt	r4,zero,61021454 <__modsi3+0x24>
61021444:	28000c16 	blt	r5,zero,61021478 <__modsi3+0x48>
61021448:	dfc00017 	ldw	ra,0(sp)
6102144c:	dec00104 	addi	sp,sp,4
61021450:	10213541 	jmpi	61021354 <udivmodsi4>
61021454:	0109c83a 	sub	r4,zero,r4
61021458:	28000b16 	blt	r5,zero,61021488 <__modsi3+0x58>
6102145c:	180b883a 	mov	r5,r3
61021460:	01800044 	movi	r6,1
61021464:	10213540 	call	61021354 <udivmodsi4>
61021468:	0085c83a 	sub	r2,zero,r2
6102146c:	dfc00017 	ldw	ra,0(sp)
61021470:	dec00104 	addi	sp,sp,4
61021474:	f800283a 	ret
61021478:	014bc83a 	sub	r5,zero,r5
6102147c:	dfc00017 	ldw	ra,0(sp)
61021480:	dec00104 	addi	sp,sp,4
61021484:	10213541 	jmpi	61021354 <udivmodsi4>
61021488:	0147c83a 	sub	r3,zero,r5
6102148c:	003ff306 	br	6102145c <__modsi3+0x2c>

61021490 <__udivsi3>:
61021490:	000d883a 	mov	r6,zero
61021494:	10213541 	jmpi	61021354 <udivmodsi4>

61021498 <__umodsi3>:
61021498:	01800044 	movi	r6,1
6102149c:	10213541 	jmpi	61021354 <udivmodsi4>

610214a0 <__clzsi2>:
610214a0:	00bfffd4 	movui	r2,65535
610214a4:	11000e36 	bltu	r2,r4,610214e0 <__clzsi2+0x40>
610214a8:	00803fc4 	movi	r2,255
610214ac:	01400204 	movi	r5,8
610214b0:	0007883a 	mov	r3,zero
610214b4:	11001036 	bltu	r2,r4,610214f8 <__clzsi2+0x58>
610214b8:	000b883a 	mov	r5,zero
610214bc:	20c6d83a 	srl	r3,r4,r3
610214c0:	009840f4 	movhi	r2,24835
610214c4:	10b76404 	addi	r2,r2,-8816
610214c8:	1887883a 	add	r3,r3,r2
610214cc:	18800003 	ldbu	r2,0(r3)
610214d0:	00c00804 	movi	r3,32
610214d4:	2885883a 	add	r2,r5,r2
610214d8:	1885c83a 	sub	r2,r3,r2
610214dc:	f800283a 	ret
610214e0:	01400404 	movi	r5,16
610214e4:	00804034 	movhi	r2,256
610214e8:	10bfffc4 	addi	r2,r2,-1
610214ec:	2807883a 	mov	r3,r5
610214f0:	113ff22e 	bgeu	r2,r4,610214bc <__clzsi2+0x1c>
610214f4:	01400604 	movi	r5,24
610214f8:	2807883a 	mov	r3,r5
610214fc:	20c6d83a 	srl	r3,r4,r3
61021500:	009840f4 	movhi	r2,24835
61021504:	10b76404 	addi	r2,r2,-8816
61021508:	1887883a 	add	r3,r3,r2
6102150c:	18800003 	ldbu	r2,0(r3)
61021510:	00c00804 	movi	r3,32
61021514:	2885883a 	add	r2,r5,r2
61021518:	1885c83a 	sub	r2,r3,r2
6102151c:	f800283a 	ret

61021520 <__pack_f>:
61021520:	20c00017 	ldw	r3,0(r4)
61021524:	01c00044 	movi	r7,1
61021528:	21800317 	ldw	r6,12(r4)
6102152c:	21400117 	ldw	r5,4(r4)
61021530:	38c02d2e 	bgeu	r7,r3,610215e8 <__pack_f+0xc8>
61021534:	00800104 	movi	r2,4
61021538:	18802826 	beq	r3,r2,610215dc <__pack_f+0xbc>
6102153c:	00800084 	movi	r2,2
61021540:	18800126 	beq	r3,r2,61021548 <__pack_f+0x28>
61021544:	3000101e 	bne	r6,zero,61021588 <__pack_f+0x68>
61021548:	000d883a 	mov	r6,zero
6102154c:	0007883a 	mov	r3,zero
61021550:	19003fcc 	andi	r4,r3,255
61021554:	200895fa 	slli	r4,r4,23
61021558:	00c02034 	movhi	r3,128
6102155c:	18ffffc4 	addi	r3,r3,-1
61021560:	30c6703a 	and	r3,r6,r3
61021564:	10a0002c 	andhi	r2,r2,32768
61021568:	10c4b03a 	or	r2,r2,r3
6102156c:	280a97fa 	slli	r5,r5,31
61021570:	1104b03a 	or	r2,r2,r4
61021574:	00e00034 	movhi	r3,32768
61021578:	18ffffc4 	addi	r3,r3,-1
6102157c:	10c4703a 	and	r2,r2,r3
61021580:	1144b03a 	or	r2,r2,r5
61021584:	f800283a 	ret
61021588:	21000217 	ldw	r4,8(r4)
6102158c:	00bfe084 	movi	r2,-126
61021590:	20801b16 	blt	r4,r2,61021600 <__pack_f+0xe0>
61021594:	00801fc4 	movi	r2,127
61021598:	11001016 	blt	r2,r4,610215dc <__pack_f+0xbc>
6102159c:	308e703a 	and	r7,r6,r2
610215a0:	2087883a 	add	r3,r4,r2
610215a4:	00801004 	movi	r2,64
610215a8:	38800526 	beq	r7,r2,610215c0 <__pack_f+0xa0>
610215ac:	31800fc4 	addi	r6,r6,63
610215b0:	30000716 	blt	r6,zero,610215d0 <__pack_f+0xb0>
610215b4:	300490ba 	slli	r2,r6,2
610215b8:	100cd27a 	srli	r6,r2,9
610215bc:	003fe406 	br	61021550 <__pack_f+0x30>
610215c0:	3080200c 	andi	r2,r6,128
610215c4:	103ffa26 	beq	r2,zero,610215b0 <__pack_f+0x90>
610215c8:	31cd883a 	add	r6,r6,r7
610215cc:	003ff806 	br	610215b0 <__pack_f+0x90>
610215d0:	300cd07a 	srli	r6,r6,1
610215d4:	18c00044 	addi	r3,r3,1
610215d8:	003ff606 	br	610215b4 <__pack_f+0x94>
610215dc:	000d883a 	mov	r6,zero
610215e0:	00ffffc4 	movi	r3,-1
610215e4:	003fda06 	br	61021550 <__pack_f+0x30>
610215e8:	31800434 	orhi	r6,r6,16
610215ec:	00802034 	movhi	r2,128
610215f0:	10bfffc4 	addi	r2,r2,-1
610215f4:	308c703a 	and	r6,r6,r2
610215f8:	00ffffc4 	movi	r3,-1
610215fc:	003fd406 	br	61021550 <__pack_f+0x30>
61021600:	1109c83a 	sub	r4,r2,r4
61021604:	00800644 	movi	r2,25
61021608:	11001216 	blt	r2,r4,61021654 <__pack_f+0x134>
6102160c:	3904983a 	sll	r2,r7,r4
61021610:	3106d83a 	srl	r3,r6,r4
61021614:	10bfffc4 	addi	r2,r2,-1
61021618:	3084703a 	and	r2,r6,r2
6102161c:	1004c03a 	cmpne	r2,r2,zero
61021620:	1886b03a 	or	r3,r3,r2
61021624:	19001fcc 	andi	r4,r3,127
61021628:	00801004 	movi	r2,64
6102162c:	20800c26 	beq	r4,r2,61021660 <__pack_f+0x140>
61021630:	18c00fc4 	addi	r3,r3,63
61021634:	00900034 	movhi	r2,16384
61021638:	10bfffc4 	addi	r2,r2,-1
6102163c:	180cd1fa 	srli	r6,r3,7
61021640:	10c7803a 	cmpltu	r3,r2,r3
61021644:	00802034 	movhi	r2,128
61021648:	10bfffc4 	addi	r2,r2,-1
6102164c:	308c703a 	and	r6,r6,r2
61021650:	003fbf06 	br	61021550 <__pack_f+0x30>
61021654:	0007883a 	mov	r3,zero
61021658:	000d883a 	mov	r6,zero
6102165c:	003ff906 	br	61021644 <__pack_f+0x124>
61021660:	1880200c 	andi	r2,r3,128
61021664:	10000126 	beq	r2,zero,6102166c <__pack_f+0x14c>
61021668:	1907883a 	add	r3,r3,r4
6102166c:	180cd1fa 	srli	r6,r3,7
61021670:	00900034 	movhi	r2,16384
61021674:	10bfffc4 	addi	r2,r2,-1
61021678:	10c7803a 	cmpltu	r3,r2,r3
6102167c:	003ff106 	br	61021644 <__pack_f+0x124>

61021680 <__unpack_f>:
61021680:	21800017 	ldw	r6,0(r4)
61021684:	00c02034 	movhi	r3,128
61021688:	18ffffc4 	addi	r3,r3,-1
6102168c:	3004d5fa 	srli	r2,r6,23
61021690:	3008d7fa 	srli	r4,r6,31
61021694:	30ce703a 	and	r7,r6,r3
61021698:	10c03fcc 	andi	r3,r2,255
6102169c:	29000115 	stw	r4,4(r5)
610216a0:	1800131e 	bne	r3,zero,610216f0 <__unpack_f+0x70>
610216a4:	38000f26 	beq	r7,zero,610216e4 <__unpack_f+0x64>
610216a8:	380691fa 	slli	r3,r7,7
610216ac:	01bfe084 	movi	r6,-126
610216b0:	008000c4 	movi	r2,3
610216b4:	01100034 	movhi	r4,16384
610216b8:	213fffc4 	addi	r4,r4,-1
610216bc:	28800015 	stw	r2,0(r5)
610216c0:	29800215 	stw	r6,8(r5)
610216c4:	20c00536 	bltu	r4,r3,610216dc <__unpack_f+0x5c>
610216c8:	3005883a 	mov	r2,r6
610216cc:	18c7883a 	add	r3,r3,r3
610216d0:	10bfffc4 	addi	r2,r2,-1
610216d4:	20fffd2e 	bgeu	r4,r3,610216cc <__unpack_f+0x4c>
610216d8:	28800215 	stw	r2,8(r5)
610216dc:	28c00315 	stw	r3,12(r5)
610216e0:	f800283a 	ret
610216e4:	00800084 	movi	r2,2
610216e8:	28800015 	stw	r2,0(r5)
610216ec:	f800283a 	ret
610216f0:	00803fc4 	movi	r2,255
610216f4:	18800826 	beq	r3,r2,61021718 <__unpack_f+0x98>
610216f8:	380491fa 	slli	r2,r7,7
610216fc:	18ffe044 	addi	r3,r3,-127
61021700:	28c00215 	stw	r3,8(r5)
61021704:	10900034 	orhi	r2,r2,16384
61021708:	28800315 	stw	r2,12(r5)
6102170c:	008000c4 	movi	r2,3
61021710:	28800015 	stw	r2,0(r5)
61021714:	f800283a 	ret
61021718:	3800031e 	bne	r7,zero,61021728 <__unpack_f+0xa8>
6102171c:	00800104 	movi	r2,4
61021720:	28800015 	stw	r2,0(r5)
61021724:	f800283a 	ret
61021728:	3080042c 	andhi	r2,r6,16
6102172c:	10000426 	beq	r2,zero,61021740 <__unpack_f+0xc0>
61021730:	00800044 	movi	r2,1
61021734:	28800015 	stw	r2,0(r5)
61021738:	29c00315 	stw	r7,12(r5)
6102173c:	f800283a 	ret
61021740:	28000015 	stw	zero,0(r5)
61021744:	003ffc06 	br	61021738 <__unpack_f+0xb8>

61021748 <__pack_d>:
61021748:	20c00017 	ldw	r3,0(r4)
6102174c:	defffd04 	addi	sp,sp,-12
61021750:	dc000015 	stw	r16,0(sp)
61021754:	dc800215 	stw	r18,8(sp)
61021758:	dc400115 	stw	r17,4(sp)
6102175c:	00800044 	movi	r2,1
61021760:	22000317 	ldw	r8,12(r4)
61021764:	001f883a 	mov	r15,zero
61021768:	22400417 	ldw	r9,16(r4)
6102176c:	24000117 	ldw	r16,4(r4)
61021770:	10c0552e 	bgeu	r2,r3,610218c8 <__pack_d+0x180>
61021774:	00800104 	movi	r2,4
61021778:	18804f26 	beq	r3,r2,610218b8 <__pack_d+0x170>
6102177c:	00800084 	movi	r2,2
61021780:	18800226 	beq	r3,r2,6102178c <__pack_d+0x44>
61021784:	4244b03a 	or	r2,r8,r9
61021788:	10001a1e 	bne	r2,zero,610217f4 <__pack_d+0xac>
6102178c:	000d883a 	mov	r6,zero
61021790:	000f883a 	mov	r7,zero
61021794:	0011883a 	mov	r8,zero
61021798:	00800434 	movhi	r2,16
6102179c:	10bfffc4 	addi	r2,r2,-1
610217a0:	301d883a 	mov	r14,r6
610217a4:	3884703a 	and	r2,r7,r2
610217a8:	400a953a 	slli	r5,r8,20
610217ac:	79bffc2c 	andhi	r6,r15,65520
610217b0:	308cb03a 	or	r6,r6,r2
610217b4:	00e00434 	movhi	r3,32784
610217b8:	18ffffc4 	addi	r3,r3,-1
610217bc:	800497fa 	slli	r2,r16,31
610217c0:	30c6703a 	and	r3,r6,r3
610217c4:	1946b03a 	or	r3,r3,r5
610217c8:	01600034 	movhi	r5,32768
610217cc:	297fffc4 	addi	r5,r5,-1
610217d0:	194a703a 	and	r5,r3,r5
610217d4:	288ab03a 	or	r5,r5,r2
610217d8:	2807883a 	mov	r3,r5
610217dc:	7005883a 	mov	r2,r14
610217e0:	dc800217 	ldw	r18,8(sp)
610217e4:	dc400117 	ldw	r17,4(sp)
610217e8:	dc000017 	ldw	r16,0(sp)
610217ec:	dec00304 	addi	sp,sp,12
610217f0:	f800283a 	ret
610217f4:	21000217 	ldw	r4,8(r4)
610217f8:	00bf0084 	movi	r2,-1022
610217fc:	20803f16 	blt	r4,r2,610218fc <__pack_d+0x1b4>
61021800:	0080ffc4 	movi	r2,1023
61021804:	11002c16 	blt	r2,r4,610218b8 <__pack_d+0x170>
61021808:	00803fc4 	movi	r2,255
6102180c:	408c703a 	and	r6,r8,r2
61021810:	00802004 	movi	r2,128
61021814:	0007883a 	mov	r3,zero
61021818:	000f883a 	mov	r7,zero
6102181c:	2280ffc4 	addi	r10,r4,1023
61021820:	30801e26 	beq	r6,r2,6102189c <__pack_d+0x154>
61021824:	00801fc4 	movi	r2,127
61021828:	4089883a 	add	r4,r8,r2
6102182c:	220d803a 	cmpltu	r6,r4,r8
61021830:	324d883a 	add	r6,r6,r9
61021834:	2011883a 	mov	r8,r4
61021838:	3013883a 	mov	r9,r6
6102183c:	00880034 	movhi	r2,8192
61021840:	10bfffc4 	addi	r2,r2,-1
61021844:	12400d36 	bltu	r2,r9,6102187c <__pack_d+0x134>
61021848:	4804963a 	slli	r2,r9,24
6102184c:	400cd23a 	srli	r6,r8,8
61021850:	480ed23a 	srli	r7,r9,8
61021854:	013fffc4 	movi	r4,-1
61021858:	118cb03a 	or	r6,r2,r6
6102185c:	01400434 	movhi	r5,16
61021860:	297fffc4 	addi	r5,r5,-1
61021864:	3104703a 	and	r2,r6,r4
61021868:	3946703a 	and	r3,r7,r5
6102186c:	5201ffcc 	andi	r8,r10,2047
61021870:	100d883a 	mov	r6,r2
61021874:	180f883a 	mov	r7,r3
61021878:	003fc706 	br	61021798 <__pack_d+0x50>
6102187c:	480897fa 	slli	r4,r9,31
61021880:	4004d07a 	srli	r2,r8,1
61021884:	4806d07a 	srli	r3,r9,1
61021888:	52800044 	addi	r10,r10,1
6102188c:	2084b03a 	or	r2,r4,r2
61021890:	1011883a 	mov	r8,r2
61021894:	1813883a 	mov	r9,r3
61021898:	003feb06 	br	61021848 <__pack_d+0x100>
6102189c:	383fe11e 	bne	r7,zero,61021824 <__pack_d+0xdc>
610218a0:	01004004 	movi	r4,256
610218a4:	4104703a 	and	r2,r8,r4
610218a8:	10c4b03a 	or	r2,r2,r3
610218ac:	103fe326 	beq	r2,zero,6102183c <__pack_d+0xf4>
610218b0:	3005883a 	mov	r2,r6
610218b4:	003fdc06 	br	61021828 <__pack_d+0xe0>
610218b8:	000d883a 	mov	r6,zero
610218bc:	000f883a 	mov	r7,zero
610218c0:	0201ffc4 	movi	r8,2047
610218c4:	003fb406 	br	61021798 <__pack_d+0x50>
610218c8:	0005883a 	mov	r2,zero
610218cc:	00c00234 	movhi	r3,8
610218d0:	408cb03a 	or	r6,r8,r2
610218d4:	48ceb03a 	or	r7,r9,r3
610218d8:	013fffc4 	movi	r4,-1
610218dc:	01400434 	movhi	r5,16
610218e0:	297fffc4 	addi	r5,r5,-1
610218e4:	3104703a 	and	r2,r6,r4
610218e8:	3946703a 	and	r3,r7,r5
610218ec:	100d883a 	mov	r6,r2
610218f0:	180f883a 	mov	r7,r3
610218f4:	0201ffc4 	movi	r8,2047
610218f8:	003fa706 	br	61021798 <__pack_d+0x50>
610218fc:	1109c83a 	sub	r4,r2,r4
61021900:	00800e04 	movi	r2,56
61021904:	11004316 	blt	r2,r4,61021a14 <__pack_d+0x2cc>
61021908:	21fff804 	addi	r7,r4,-32
6102190c:	38004516 	blt	r7,zero,61021a24 <__pack_d+0x2dc>
61021910:	49d8d83a 	srl	r12,r9,r7
61021914:	001b883a 	mov	r13,zero
61021918:	0023883a 	mov	r17,zero
6102191c:	01400044 	movi	r5,1
61021920:	0025883a 	mov	r18,zero
61021924:	38004716 	blt	r7,zero,61021a44 <__pack_d+0x2fc>
61021928:	29d6983a 	sll	r11,r5,r7
6102192c:	0015883a 	mov	r10,zero
61021930:	00bfffc4 	movi	r2,-1
61021934:	5089883a 	add	r4,r10,r2
61021938:	588b883a 	add	r5,r11,r2
6102193c:	228d803a 	cmpltu	r6,r4,r10
61021940:	314b883a 	add	r5,r6,r5
61021944:	4104703a 	and	r2,r8,r4
61021948:	4946703a 	and	r3,r9,r5
6102194c:	10c4b03a 	or	r2,r2,r3
61021950:	10000226 	beq	r2,zero,6102195c <__pack_d+0x214>
61021954:	04400044 	movi	r17,1
61021958:	0025883a 	mov	r18,zero
6102195c:	00803fc4 	movi	r2,255
61021960:	644eb03a 	or	r7,r12,r17
61021964:	3892703a 	and	r9,r7,r2
61021968:	00802004 	movi	r2,128
6102196c:	6c90b03a 	or	r8,r13,r18
61021970:	0015883a 	mov	r10,zero
61021974:	48801626 	beq	r9,r2,610219d0 <__pack_d+0x288>
61021978:	01001fc4 	movi	r4,127
6102197c:	3905883a 	add	r2,r7,r4
61021980:	11cd803a 	cmpltu	r6,r2,r7
61021984:	320d883a 	add	r6,r6,r8
61021988:	100f883a 	mov	r7,r2
6102198c:	00840034 	movhi	r2,4096
61021990:	10bfffc4 	addi	r2,r2,-1
61021994:	3011883a 	mov	r8,r6
61021998:	0007883a 	mov	r3,zero
6102199c:	11801b36 	bltu	r2,r6,61021a0c <__pack_d+0x2c4>
610219a0:	4004963a 	slli	r2,r8,24
610219a4:	3808d23a 	srli	r4,r7,8
610219a8:	400ad23a 	srli	r5,r8,8
610219ac:	1813883a 	mov	r9,r3
610219b0:	1108b03a 	or	r4,r2,r4
610219b4:	00bfffc4 	movi	r2,-1
610219b8:	00c00434 	movhi	r3,16
610219bc:	18ffffc4 	addi	r3,r3,-1
610219c0:	208c703a 	and	r6,r4,r2
610219c4:	28ce703a 	and	r7,r5,r3
610219c8:	4a01ffcc 	andi	r8,r9,2047
610219cc:	003f7206 	br	61021798 <__pack_d+0x50>
610219d0:	503fe91e 	bne	r10,zero,61021978 <__pack_d+0x230>
610219d4:	01004004 	movi	r4,256
610219d8:	3904703a 	and	r2,r7,r4
610219dc:	0007883a 	mov	r3,zero
610219e0:	10c4b03a 	or	r2,r2,r3
610219e4:	10000626 	beq	r2,zero,61021a00 <__pack_d+0x2b8>
610219e8:	3a45883a 	add	r2,r7,r9
610219ec:	11cd803a 	cmpltu	r6,r2,r7
610219f0:	320d883a 	add	r6,r6,r8
610219f4:	100f883a 	mov	r7,r2
610219f8:	3011883a 	mov	r8,r6
610219fc:	0007883a 	mov	r3,zero
61021a00:	00840034 	movhi	r2,4096
61021a04:	10bfffc4 	addi	r2,r2,-1
61021a08:	123fe52e 	bgeu	r2,r8,610219a0 <__pack_d+0x258>
61021a0c:	00c00044 	movi	r3,1
61021a10:	003fe306 	br	610219a0 <__pack_d+0x258>
61021a14:	0009883a 	mov	r4,zero
61021a18:	0013883a 	mov	r9,zero
61021a1c:	000b883a 	mov	r5,zero
61021a20:	003fe406 	br	610219b4 <__pack_d+0x26c>
61021a24:	4a47883a 	add	r3,r9,r9
61021a28:	008007c4 	movi	r2,31
61021a2c:	1105c83a 	sub	r2,r2,r4
61021a30:	1886983a 	sll	r3,r3,r2
61021a34:	4118d83a 	srl	r12,r8,r4
61021a38:	491ad83a 	srl	r13,r9,r4
61021a3c:	1b18b03a 	or	r12,r3,r12
61021a40:	003fb506 	br	61021918 <__pack_d+0x1d0>
61021a44:	2806d07a 	srli	r3,r5,1
61021a48:	008007c4 	movi	r2,31
61021a4c:	1105c83a 	sub	r2,r2,r4
61021a50:	1896d83a 	srl	r11,r3,r2
61021a54:	2914983a 	sll	r10,r5,r4
61021a58:	003fb506 	br	61021930 <__pack_d+0x1e8>

61021a5c <memcpy>:
61021a5c:	01c003c4 	movi	r7,15
61021a60:	2007883a 	mov	r3,r4
61021a64:	3980032e 	bgeu	r7,r6,61021a74 <memcpy+0x18>
61021a68:	2904b03a 	or	r2,r5,r4
61021a6c:	108000cc 	andi	r2,r2,3
61021a70:	10000926 	beq	r2,zero,61021a98 <memcpy+0x3c>
61021a74:	30000626 	beq	r6,zero,61021a90 <memcpy+0x34>
61021a78:	30cd883a 	add	r6,r6,r3
61021a7c:	28800003 	ldbu	r2,0(r5)
61021a80:	29400044 	addi	r5,r5,1
61021a84:	18800005 	stb	r2,0(r3)
61021a88:	18c00044 	addi	r3,r3,1
61021a8c:	30fffb1e 	bne	r6,r3,61021a7c <memcpy+0x20>
61021a90:	2005883a 	mov	r2,r4
61021a94:	f800283a 	ret
61021a98:	3811883a 	mov	r8,r7
61021a9c:	200f883a 	mov	r7,r4
61021aa0:	28c00017 	ldw	r3,0(r5)
61021aa4:	31bffc04 	addi	r6,r6,-16
61021aa8:	38c00015 	stw	r3,0(r7)
61021aac:	28800117 	ldw	r2,4(r5)
61021ab0:	38800115 	stw	r2,4(r7)
61021ab4:	28c00217 	ldw	r3,8(r5)
61021ab8:	38c00215 	stw	r3,8(r7)
61021abc:	28800317 	ldw	r2,12(r5)
61021ac0:	29400404 	addi	r5,r5,16
61021ac4:	38800315 	stw	r2,12(r7)
61021ac8:	39c00404 	addi	r7,r7,16
61021acc:	41bff436 	bltu	r8,r6,61021aa0 <memcpy+0x44>
61021ad0:	008000c4 	movi	r2,3
61021ad4:	1180072e 	bgeu	r2,r6,61021af4 <memcpy+0x98>
61021ad8:	1007883a 	mov	r3,r2
61021adc:	28800017 	ldw	r2,0(r5)
61021ae0:	31bfff04 	addi	r6,r6,-4
61021ae4:	29400104 	addi	r5,r5,4
61021ae8:	38800015 	stw	r2,0(r7)
61021aec:	39c00104 	addi	r7,r7,4
61021af0:	19bffa36 	bltu	r3,r6,61021adc <memcpy+0x80>
61021af4:	3807883a 	mov	r3,r7
61021af8:	003fde06 	br	61021a74 <memcpy+0x18>

61021afc <printf>:
61021afc:	defffb04 	addi	sp,sp,-20
61021b00:	dfc00115 	stw	ra,4(sp)
61021b04:	d9400215 	stw	r5,8(sp)
61021b08:	d9800315 	stw	r6,12(sp)
61021b0c:	d9c00415 	stw	r7,16(sp)
61021b10:	009840f4 	movhi	r2,24835
61021b14:	10beba04 	addi	r2,r2,-1304
61021b18:	10c00017 	ldw	r3,0(r2)
61021b1c:	200b883a 	mov	r5,r4
61021b20:	d8800204 	addi	r2,sp,8
61021b24:	19000217 	ldw	r4,8(r3)
61021b28:	100d883a 	mov	r6,r2
61021b2c:	d8800015 	stw	r2,0(sp)
61021b30:	1023bc40 	call	61023bc4 <__vfprintf_internal>
61021b34:	dfc00117 	ldw	ra,4(sp)
61021b38:	dec00504 	addi	sp,sp,20
61021b3c:	f800283a 	ret

61021b40 <_printf_r>:
61021b40:	defffc04 	addi	sp,sp,-16
61021b44:	dfc00115 	stw	ra,4(sp)
61021b48:	d9800215 	stw	r6,8(sp)
61021b4c:	d9c00315 	stw	r7,12(sp)
61021b50:	280d883a 	mov	r6,r5
61021b54:	21400217 	ldw	r5,8(r4)
61021b58:	d8c00204 	addi	r3,sp,8
61021b5c:	180f883a 	mov	r7,r3
61021b60:	d8c00015 	stw	r3,0(sp)
61021b64:	1021d180 	call	61021d18 <___vfprintf_internal_r>
61021b68:	dfc00117 	ldw	ra,4(sp)
61021b6c:	dec00404 	addi	sp,sp,16
61021b70:	f800283a 	ret

61021b74 <putchar>:
61021b74:	009840f4 	movhi	r2,24835
61021b78:	10beba04 	addi	r2,r2,-1304
61021b7c:	11800017 	ldw	r6,0(r2)
61021b80:	200b883a 	mov	r5,r4
61021b84:	3009883a 	mov	r4,r6
61021b88:	31800217 	ldw	r6,8(r6)
61021b8c:	10281281 	jmpi	61028128 <_putc_r>

61021b90 <_putchar_r>:
61021b90:	21800217 	ldw	r6,8(r4)
61021b94:	10281281 	jmpi	61028128 <_putc_r>

61021b98 <_puts_r>:
61021b98:	defff604 	addi	sp,sp,-40
61021b9c:	dc400715 	stw	r17,28(sp)
61021ba0:	2023883a 	mov	r17,r4
61021ba4:	2809883a 	mov	r4,r5
61021ba8:	dfc00915 	stw	ra,36(sp)
61021bac:	dcc00815 	stw	r19,32(sp)
61021bb0:	2827883a 	mov	r19,r5
61021bb4:	1021c4c0 	call	61021c4c <strlen>
61021bb8:	89400217 	ldw	r5,8(r17)
61021bbc:	00d840f4 	movhi	r3,24835
61021bc0:	18f7a404 	addi	r3,r3,-8560
61021bc4:	01c00044 	movi	r7,1
61021bc8:	12000044 	addi	r8,r2,1
61021bcc:	d8c00515 	stw	r3,20(sp)
61021bd0:	d9c00615 	stw	r7,24(sp)
61021bd4:	d8c00304 	addi	r3,sp,12
61021bd8:	01c00084 	movi	r7,2
61021bdc:	8809883a 	mov	r4,r17
61021be0:	d80d883a 	mov	r6,sp
61021be4:	d8c00015 	stw	r3,0(sp)
61021be8:	dcc00315 	stw	r19,12(sp)
61021bec:	da000215 	stw	r8,8(sp)
61021bf0:	d9c00115 	stw	r7,4(sp)
61021bf4:	d8800415 	stw	r2,16(sp)
61021bf8:	1025e200 	call	61025e20 <__sfvwrite_r>
61021bfc:	00ffffc4 	movi	r3,-1
61021c00:	10000626 	beq	r2,zero,61021c1c <_puts_r+0x84>
61021c04:	1805883a 	mov	r2,r3
61021c08:	dfc00917 	ldw	ra,36(sp)
61021c0c:	dcc00817 	ldw	r19,32(sp)
61021c10:	dc400717 	ldw	r17,28(sp)
61021c14:	dec00a04 	addi	sp,sp,40
61021c18:	f800283a 	ret
61021c1c:	00c00284 	movi	r3,10
61021c20:	1805883a 	mov	r2,r3
61021c24:	dfc00917 	ldw	ra,36(sp)
61021c28:	dcc00817 	ldw	r19,32(sp)
61021c2c:	dc400717 	ldw	r17,28(sp)
61021c30:	dec00a04 	addi	sp,sp,40
61021c34:	f800283a 	ret

61021c38 <puts>:
61021c38:	009840f4 	movhi	r2,24835
61021c3c:	10beba04 	addi	r2,r2,-1304
61021c40:	200b883a 	mov	r5,r4
61021c44:	11000017 	ldw	r4,0(r2)
61021c48:	1021b981 	jmpi	61021b98 <_puts_r>

61021c4c <strlen>:
61021c4c:	208000cc 	andi	r2,r4,3
61021c50:	2011883a 	mov	r8,r4
61021c54:	1000161e 	bne	r2,zero,61021cb0 <strlen+0x64>
61021c58:	20c00017 	ldw	r3,0(r4)
61021c5c:	017fbff4 	movhi	r5,65279
61021c60:	297fbfc4 	addi	r5,r5,-257
61021c64:	01e02074 	movhi	r7,32897
61021c68:	39e02004 	addi	r7,r7,-32640
61021c6c:	1945883a 	add	r2,r3,r5
61021c70:	11c4703a 	and	r2,r2,r7
61021c74:	00c6303a 	nor	r3,zero,r3
61021c78:	1886703a 	and	r3,r3,r2
61021c7c:	18000c1e 	bne	r3,zero,61021cb0 <strlen+0x64>
61021c80:	280d883a 	mov	r6,r5
61021c84:	380b883a 	mov	r5,r7
61021c88:	21000104 	addi	r4,r4,4
61021c8c:	20800017 	ldw	r2,0(r4)
61021c90:	1187883a 	add	r3,r2,r6
61021c94:	1946703a 	and	r3,r3,r5
61021c98:	0084303a 	nor	r2,zero,r2
61021c9c:	10c4703a 	and	r2,r2,r3
61021ca0:	103ff926 	beq	r2,zero,61021c88 <strlen+0x3c>
61021ca4:	20800007 	ldb	r2,0(r4)
61021ca8:	10000326 	beq	r2,zero,61021cb8 <strlen+0x6c>
61021cac:	21000044 	addi	r4,r4,1
61021cb0:	20800007 	ldb	r2,0(r4)
61021cb4:	103ffd1e 	bne	r2,zero,61021cac <strlen+0x60>
61021cb8:	2205c83a 	sub	r2,r4,r8
61021cbc:	f800283a 	ret

61021cc0 <__sprint_r>:
61021cc0:	30800217 	ldw	r2,8(r6)
61021cc4:	defffe04 	addi	sp,sp,-8
61021cc8:	dc000015 	stw	r16,0(sp)
61021ccc:	dfc00115 	stw	ra,4(sp)
61021cd0:	3021883a 	mov	r16,r6
61021cd4:	0007883a 	mov	r3,zero
61021cd8:	1000061e 	bne	r2,zero,61021cf4 <__sprint_r+0x34>
61021cdc:	1805883a 	mov	r2,r3
61021ce0:	30000115 	stw	zero,4(r6)
61021ce4:	dfc00117 	ldw	ra,4(sp)
61021ce8:	dc000017 	ldw	r16,0(sp)
61021cec:	dec00204 	addi	sp,sp,8
61021cf0:	f800283a 	ret
61021cf4:	1025e200 	call	61025e20 <__sfvwrite_r>
61021cf8:	1007883a 	mov	r3,r2
61021cfc:	1805883a 	mov	r2,r3
61021d00:	80000115 	stw	zero,4(r16)
61021d04:	80000215 	stw	zero,8(r16)
61021d08:	dfc00117 	ldw	ra,4(sp)
61021d0c:	dc000017 	ldw	r16,0(sp)
61021d10:	dec00204 	addi	sp,sp,8
61021d14:	f800283a 	ret

61021d18 <___vfprintf_internal_r>:
61021d18:	defea404 	addi	sp,sp,-1392
61021d1c:	dd815815 	stw	r22,1376(sp)
61021d20:	dc015215 	stw	r16,1352(sp)
61021d24:	d9c15115 	stw	r7,1348(sp)
61021d28:	dfc15b15 	stw	ra,1388(sp)
61021d2c:	df015a15 	stw	fp,1384(sp)
61021d30:	ddc15915 	stw	r23,1380(sp)
61021d34:	dd415715 	stw	r21,1372(sp)
61021d38:	dd015615 	stw	r20,1368(sp)
61021d3c:	dcc15515 	stw	r19,1364(sp)
61021d40:	dc815415 	stw	r18,1360(sp)
61021d44:	dc415315 	stw	r17,1356(sp)
61021d48:	282d883a 	mov	r22,r5
61021d4c:	3021883a 	mov	r16,r6
61021d50:	d9014f15 	stw	r4,1340(sp)
61021d54:	10264440 	call	61026444 <_localeconv_r>
61021d58:	10800017 	ldw	r2,0(r2)
61021d5c:	d9c15117 	ldw	r7,1348(sp)
61021d60:	d8814915 	stw	r2,1316(sp)
61021d64:	d8814f17 	ldw	r2,1340(sp)
61021d68:	10000226 	beq	r2,zero,61021d74 <___vfprintf_internal_r+0x5c>
61021d6c:	10800e17 	ldw	r2,56(r2)
61021d70:	10020d26 	beq	r2,zero,610225a8 <___vfprintf_internal_r+0x890>
61021d74:	b080030b 	ldhu	r2,12(r22)
61021d78:	1080020c 	andi	r2,r2,8
61021d7c:	10020e26 	beq	r2,zero,610225b8 <___vfprintf_internal_r+0x8a0>
61021d80:	b0800417 	ldw	r2,16(r22)
61021d84:	10020c26 	beq	r2,zero,610225b8 <___vfprintf_internal_r+0x8a0>
61021d88:	b200030b 	ldhu	r8,12(r22)
61021d8c:	00800284 	movi	r2,10
61021d90:	40c0068c 	andi	r3,r8,26
61021d94:	18802f1e 	bne	r3,r2,61021e54 <___vfprintf_internal_r+0x13c>
61021d98:	b080038f 	ldh	r2,14(r22)
61021d9c:	10002d16 	blt	r2,zero,61021e54 <___vfprintf_internal_r+0x13c>
61021da0:	b240038b 	ldhu	r9,14(r22)
61021da4:	b2800717 	ldw	r10,28(r22)
61021da8:	b2c00917 	ldw	r11,36(r22)
61021dac:	d9014f17 	ldw	r4,1340(sp)
61021db0:	dc402904 	addi	r17,sp,164
61021db4:	d8804004 	addi	r2,sp,256
61021db8:	00c10004 	movi	r3,1024
61021dbc:	423fff4c 	andi	r8,r8,65533
61021dc0:	800d883a 	mov	r6,r16
61021dc4:	880b883a 	mov	r5,r17
61021dc8:	da002c0d 	sth	r8,176(sp)
61021dcc:	da402c8d 	sth	r9,178(sp)
61021dd0:	da803015 	stw	r10,192(sp)
61021dd4:	dac03215 	stw	r11,200(sp)
61021dd8:	d8802d15 	stw	r2,180(sp)
61021ddc:	d8c02e15 	stw	r3,184(sp)
61021de0:	d8802915 	stw	r2,164(sp)
61021de4:	d8c02b15 	stw	r3,172(sp)
61021de8:	d8002f15 	stw	zero,188(sp)
61021dec:	1021d180 	call	61021d18 <___vfprintf_internal_r>
61021df0:	d8814b15 	stw	r2,1324(sp)
61021df4:	10000416 	blt	r2,zero,61021e08 <___vfprintf_internal_r+0xf0>
61021df8:	d9014f17 	ldw	r4,1340(sp)
61021dfc:	880b883a 	mov	r5,r17
61021e00:	10254f00 	call	610254f0 <_fflush_r>
61021e04:	1002321e 	bne	r2,zero,610226d0 <___vfprintf_internal_r+0x9b8>
61021e08:	d8802c0b 	ldhu	r2,176(sp)
61021e0c:	1080100c 	andi	r2,r2,64
61021e10:	10000326 	beq	r2,zero,61021e20 <___vfprintf_internal_r+0x108>
61021e14:	b080030b 	ldhu	r2,12(r22)
61021e18:	10801014 	ori	r2,r2,64
61021e1c:	b080030d 	sth	r2,12(r22)
61021e20:	d8814b17 	ldw	r2,1324(sp)
61021e24:	dfc15b17 	ldw	ra,1388(sp)
61021e28:	df015a17 	ldw	fp,1384(sp)
61021e2c:	ddc15917 	ldw	r23,1380(sp)
61021e30:	dd815817 	ldw	r22,1376(sp)
61021e34:	dd415717 	ldw	r21,1372(sp)
61021e38:	dd015617 	ldw	r20,1368(sp)
61021e3c:	dcc15517 	ldw	r19,1364(sp)
61021e40:	dc815417 	ldw	r18,1360(sp)
61021e44:	dc415317 	ldw	r17,1356(sp)
61021e48:	dc015217 	ldw	r16,1352(sp)
61021e4c:	dec15c04 	addi	sp,sp,1392
61021e50:	f800283a 	ret
61021e54:	0005883a 	mov	r2,zero
61021e58:	0007883a 	mov	r3,zero
61021e5c:	dd401904 	addi	r21,sp,100
61021e60:	d8814215 	stw	r2,1288(sp)
61021e64:	802f883a 	mov	r23,r16
61021e68:	d8c14315 	stw	r3,1292(sp)
61021e6c:	d8014b15 	stw	zero,1324(sp)
61021e70:	d8014815 	stw	zero,1312(sp)
61021e74:	d8014415 	stw	zero,1296(sp)
61021e78:	d8014715 	stw	zero,1308(sp)
61021e7c:	dd400c15 	stw	r21,48(sp)
61021e80:	d8000e15 	stw	zero,56(sp)
61021e84:	d8000d15 	stw	zero,52(sp)
61021e88:	b8800007 	ldb	r2,0(r23)
61021e8c:	10001926 	beq	r2,zero,61021ef4 <___vfprintf_internal_r+0x1dc>
61021e90:	00c00944 	movi	r3,37
61021e94:	10c01726 	beq	r2,r3,61021ef4 <___vfprintf_internal_r+0x1dc>
61021e98:	b821883a 	mov	r16,r23
61021e9c:	00000106 	br	61021ea4 <___vfprintf_internal_r+0x18c>
61021ea0:	10c00326 	beq	r2,r3,61021eb0 <___vfprintf_internal_r+0x198>
61021ea4:	84000044 	addi	r16,r16,1
61021ea8:	80800007 	ldb	r2,0(r16)
61021eac:	103ffc1e 	bne	r2,zero,61021ea0 <___vfprintf_internal_r+0x188>
61021eb0:	85e7c83a 	sub	r19,r16,r23
61021eb4:	98000e26 	beq	r19,zero,61021ef0 <___vfprintf_internal_r+0x1d8>
61021eb8:	dc800e17 	ldw	r18,56(sp)
61021ebc:	dc400d17 	ldw	r17,52(sp)
61021ec0:	008001c4 	movi	r2,7
61021ec4:	94e5883a 	add	r18,r18,r19
61021ec8:	8c400044 	addi	r17,r17,1
61021ecc:	adc00015 	stw	r23,0(r21)
61021ed0:	dc800e15 	stw	r18,56(sp)
61021ed4:	acc00115 	stw	r19,4(r21)
61021ed8:	dc400d15 	stw	r17,52(sp)
61021edc:	14428b16 	blt	r2,r17,6102290c <___vfprintf_internal_r+0xbf4>
61021ee0:	ad400204 	addi	r21,r21,8
61021ee4:	d9014b17 	ldw	r4,1324(sp)
61021ee8:	24c9883a 	add	r4,r4,r19
61021eec:	d9014b15 	stw	r4,1324(sp)
61021ef0:	802f883a 	mov	r23,r16
61021ef4:	b8800007 	ldb	r2,0(r23)
61021ef8:	10013c26 	beq	r2,zero,610223ec <___vfprintf_internal_r+0x6d4>
61021efc:	bdc00044 	addi	r23,r23,1
61021f00:	d8000405 	stb	zero,16(sp)
61021f04:	b8c00007 	ldb	r3,0(r23)
61021f08:	04ffffc4 	movi	r19,-1
61021f0c:	d8014c15 	stw	zero,1328(sp)
61021f10:	d8014a15 	stw	zero,1320(sp)
61021f14:	d8c14d15 	stw	r3,1332(sp)
61021f18:	bdc00044 	addi	r23,r23,1
61021f1c:	d9414d17 	ldw	r5,1332(sp)
61021f20:	00801604 	movi	r2,88
61021f24:	28fff804 	addi	r3,r5,-32
61021f28:	10c06036 	bltu	r2,r3,610220ac <___vfprintf_internal_r+0x394>
61021f2c:	18c5883a 	add	r2,r3,r3
61021f30:	1085883a 	add	r2,r2,r2
61021f34:	00d840b4 	movhi	r3,24834
61021f38:	18c7d204 	addi	r3,r3,8008
61021f3c:	10c5883a 	add	r2,r2,r3
61021f40:	11000017 	ldw	r4,0(r2)
61021f44:	2000683a 	jmp	r4
61021f48:	61022ebc 	xorhi	r4,r12,2234
61021f4c:	610220ac 	andhi	r4,r12,2178
61021f50:	610220ac 	andhi	r4,r12,2178
61021f54:	61022ea8 	cmpgeui	r4,r12,2234
61021f58:	610220ac 	andhi	r4,r12,2178
61021f5c:	610220ac 	andhi	r4,r12,2178
61021f60:	610220ac 	andhi	r4,r12,2178
61021f64:	610220ac 	andhi	r4,r12,2178
61021f68:	610220ac 	andhi	r4,r12,2178
61021f6c:	610220ac 	andhi	r4,r12,2178
61021f70:	61022c88 	cmpgei	r4,r12,2226
61021f74:	61022e98 	cmpnei	r4,r12,2234
61021f78:	610220ac 	andhi	r4,r12,2178
61021f7c:	61022ca0 	cmpeqi	r4,r12,2226
61021f80:	61022f34 	orhi	r4,r12,2236
61021f84:	610220ac 	andhi	r4,r12,2178
61021f88:	61022f20 	cmpeqi	r4,r12,2236
61021f8c:	61022ee8 	cmpgeui	r4,r12,2235
61021f90:	61022ee8 	cmpgeui	r4,r12,2235
61021f94:	61022ee8 	cmpgeui	r4,r12,2235
61021f98:	61022ee8 	cmpgeui	r4,r12,2235
61021f9c:	61022ee8 	cmpgeui	r4,r12,2235
61021fa0:	61022ee8 	cmpgeui	r4,r12,2235
61021fa4:	61022ee8 	cmpgeui	r4,r12,2235
61021fa8:	61022ee8 	cmpgeui	r4,r12,2235
61021fac:	61022ee8 	cmpgeui	r4,r12,2235
61021fb0:	610220ac 	andhi	r4,r12,2178
61021fb4:	610220ac 	andhi	r4,r12,2178
61021fb8:	610220ac 	andhi	r4,r12,2178
61021fbc:	610220ac 	andhi	r4,r12,2178
61021fc0:	610220ac 	andhi	r4,r12,2178
61021fc4:	610220ac 	andhi	r4,r12,2178
61021fc8:	610220ac 	andhi	r4,r12,2178
61021fcc:	610220ac 	andhi	r4,r12,2178
61021fd0:	610220ac 	andhi	r4,r12,2178
61021fd4:	610220ac 	andhi	r4,r12,2178
61021fd8:	61022704 	addi	r4,r12,2204
61021fdc:	61022d70 	cmpltui	r4,r12,2229
61021fe0:	610220ac 	andhi	r4,r12,2178
61021fe4:	61022d70 	cmpltui	r4,r12,2229
61021fe8:	610220ac 	andhi	r4,r12,2178
61021fec:	610220ac 	andhi	r4,r12,2178
61021ff0:	610220ac 	andhi	r4,r12,2178
61021ff4:	610220ac 	andhi	r4,r12,2178
61021ff8:	61022ed4 	ori	r4,r12,2235
61021ffc:	610220ac 	andhi	r4,r12,2178
61022000:	610220ac 	andhi	r4,r12,2178
61022004:	610227b8 	rdprs	r4,r12,2206
61022008:	610220ac 	andhi	r4,r12,2178
6102200c:	610220ac 	andhi	r4,r12,2178
61022010:	610220ac 	andhi	r4,r12,2178
61022014:	610220ac 	andhi	r4,r12,2178
61022018:	610220ac 	andhi	r4,r12,2178
6102201c:	61022804 	addi	r4,r12,2208
61022020:	610220ac 	andhi	r4,r12,2178
61022024:	610220ac 	andhi	r4,r12,2178
61022028:	61022e24 	muli	r4,r12,2232
6102202c:	610220ac 	andhi	r4,r12,2178
61022030:	610220ac 	andhi	r4,r12,2178
61022034:	610220ac 	andhi	r4,r12,2178
61022038:	610220ac 	andhi	r4,r12,2178
6102203c:	610220ac 	andhi	r4,r12,2178
61022040:	610220ac 	andhi	r4,r12,2178
61022044:	610220ac 	andhi	r4,r12,2178
61022048:	610220ac 	andhi	r4,r12,2178
6102204c:	610220ac 	andhi	r4,r12,2178
61022050:	610220ac 	andhi	r4,r12,2178
61022054:	61022df8 	rdprs	r4,r12,2231
61022058:	61022710 	cmplti	r4,r12,2204
6102205c:	61022d70 	cmpltui	r4,r12,2229
61022060:	61022d70 	cmpltui	r4,r12,2229
61022064:	61022d70 	cmpltui	r4,r12,2229
61022068:	61022d5c 	xori	r4,r12,2229
6102206c:	61022710 	cmplti	r4,r12,2204
61022070:	610220ac 	andhi	r4,r12,2178
61022074:	610220ac 	andhi	r4,r12,2178
61022078:	61022ce4 	muli	r4,r12,2227
6102207c:	610220ac 	andhi	r4,r12,2178
61022080:	61022cb4 	orhi	r4,r12,2226
61022084:	610227c4 	addi	r4,r12,2207
61022088:	61022d14 	ori	r4,r12,2228
6102208c:	61022d00 	call	661022d0 <__alt_data_end+0x50c2ed0>
61022090:	610220ac 	andhi	r4,r12,2178
61022094:	61022f90 	cmplti	r4,r12,2238
61022098:	610220ac 	andhi	r4,r12,2178
6102209c:	61022810 	cmplti	r4,r12,2208
610220a0:	610220ac 	andhi	r4,r12,2178
610220a4:	610220ac 	andhi	r4,r12,2178
610220a8:	61022e88 	cmpgei	r4,r12,2234
610220ac:	d9014d17 	ldw	r4,1332(sp)
610220b0:	2000ce26 	beq	r4,zero,610223ec <___vfprintf_internal_r+0x6d4>
610220b4:	01400044 	movi	r5,1
610220b8:	d9800f04 	addi	r6,sp,60
610220bc:	d9c14015 	stw	r7,1280(sp)
610220c0:	d9414515 	stw	r5,1300(sp)
610220c4:	d9814115 	stw	r6,1284(sp)
610220c8:	280f883a 	mov	r7,r5
610220cc:	d9000f05 	stb	r4,60(sp)
610220d0:	d8000405 	stb	zero,16(sp)
610220d4:	d8014615 	stw	zero,1304(sp)
610220d8:	d8c14c17 	ldw	r3,1328(sp)
610220dc:	1880008c 	andi	r2,r3,2
610220e0:	1005003a 	cmpeq	r2,r2,zero
610220e4:	d8815015 	stw	r2,1344(sp)
610220e8:	1000031e 	bne	r2,zero,610220f8 <___vfprintf_internal_r+0x3e0>
610220ec:	d9014517 	ldw	r4,1300(sp)
610220f0:	21000084 	addi	r4,r4,2
610220f4:	d9014515 	stw	r4,1300(sp)
610220f8:	d9414c17 	ldw	r5,1328(sp)
610220fc:	2940210c 	andi	r5,r5,132
61022100:	d9414e15 	stw	r5,1336(sp)
61022104:	28002d1e 	bne	r5,zero,610221bc <___vfprintf_internal_r+0x4a4>
61022108:	d9814a17 	ldw	r6,1320(sp)
6102210c:	d8814517 	ldw	r2,1300(sp)
61022110:	30a1c83a 	sub	r16,r6,r2
61022114:	0400290e 	bge	zero,r16,610221bc <___vfprintf_internal_r+0x4a4>
61022118:	00800404 	movi	r2,16
6102211c:	1404580e 	bge	r2,r16,61023280 <___vfprintf_internal_r+0x1568>
61022120:	dc800e17 	ldw	r18,56(sp)
61022124:	dc400d17 	ldw	r17,52(sp)
61022128:	1027883a 	mov	r19,r2
6102212c:	071840f4 	movhi	fp,24835
61022130:	e737c084 	addi	fp,fp,-8446
61022134:	050001c4 	movi	r20,7
61022138:	00000306 	br	61022148 <___vfprintf_internal_r+0x430>
6102213c:	843ffc04 	addi	r16,r16,-16
61022140:	ad400204 	addi	r21,r21,8
61022144:	9c00130e 	bge	r19,r16,61022194 <___vfprintf_internal_r+0x47c>
61022148:	94800404 	addi	r18,r18,16
6102214c:	8c400044 	addi	r17,r17,1
61022150:	af000015 	stw	fp,0(r21)
61022154:	acc00115 	stw	r19,4(r21)
61022158:	dc800e15 	stw	r18,56(sp)
6102215c:	dc400d15 	stw	r17,52(sp)
61022160:	a47ff60e 	bge	r20,r17,6102213c <___vfprintf_internal_r+0x424>
61022164:	d9014f17 	ldw	r4,1340(sp)
61022168:	b00b883a 	mov	r5,r22
6102216c:	d9800c04 	addi	r6,sp,48
61022170:	d9c15115 	stw	r7,1348(sp)
61022174:	1021cc00 	call	61021cc0 <__sprint_r>
61022178:	d9c15117 	ldw	r7,1348(sp)
6102217c:	10009e1e 	bne	r2,zero,610223f8 <___vfprintf_internal_r+0x6e0>
61022180:	843ffc04 	addi	r16,r16,-16
61022184:	dc800e17 	ldw	r18,56(sp)
61022188:	dc400d17 	ldw	r17,52(sp)
6102218c:	dd401904 	addi	r21,sp,100
61022190:	9c3fed16 	blt	r19,r16,61022148 <___vfprintf_internal_r+0x430>
61022194:	9425883a 	add	r18,r18,r16
61022198:	8c400044 	addi	r17,r17,1
6102219c:	008001c4 	movi	r2,7
610221a0:	af000015 	stw	fp,0(r21)
610221a4:	ac000115 	stw	r16,4(r21)
610221a8:	dc800e15 	stw	r18,56(sp)
610221ac:	dc400d15 	stw	r17,52(sp)
610221b0:	1441f516 	blt	r2,r17,61022988 <___vfprintf_internal_r+0xc70>
610221b4:	ad400204 	addi	r21,r21,8
610221b8:	00000206 	br	610221c4 <___vfprintf_internal_r+0x4ac>
610221bc:	dc800e17 	ldw	r18,56(sp)
610221c0:	dc400d17 	ldw	r17,52(sp)
610221c4:	d8800407 	ldb	r2,16(sp)
610221c8:	10000b26 	beq	r2,zero,610221f8 <___vfprintf_internal_r+0x4e0>
610221cc:	00800044 	movi	r2,1
610221d0:	94800044 	addi	r18,r18,1
610221d4:	8c400044 	addi	r17,r17,1
610221d8:	a8800115 	stw	r2,4(r21)
610221dc:	d8c00404 	addi	r3,sp,16
610221e0:	008001c4 	movi	r2,7
610221e4:	a8c00015 	stw	r3,0(r21)
610221e8:	dc800e15 	stw	r18,56(sp)
610221ec:	dc400d15 	stw	r17,52(sp)
610221f0:	1441da16 	blt	r2,r17,6102295c <___vfprintf_internal_r+0xc44>
610221f4:	ad400204 	addi	r21,r21,8
610221f8:	d9015017 	ldw	r4,1344(sp)
610221fc:	20000b1e 	bne	r4,zero,6102222c <___vfprintf_internal_r+0x514>
61022200:	d8800444 	addi	r2,sp,17
61022204:	94800084 	addi	r18,r18,2
61022208:	8c400044 	addi	r17,r17,1
6102220c:	a8800015 	stw	r2,0(r21)
61022210:	00c00084 	movi	r3,2
61022214:	008001c4 	movi	r2,7
61022218:	a8c00115 	stw	r3,4(r21)
6102221c:	dc800e15 	stw	r18,56(sp)
61022220:	dc400d15 	stw	r17,52(sp)
61022224:	1441c216 	blt	r2,r17,61022930 <___vfprintf_internal_r+0xc18>
61022228:	ad400204 	addi	r21,r21,8
6102222c:	d9414e17 	ldw	r5,1336(sp)
61022230:	00802004 	movi	r2,128
61022234:	2880b126 	beq	r5,r2,610224fc <___vfprintf_internal_r+0x7e4>
61022238:	d8c14617 	ldw	r3,1304(sp)
6102223c:	19e1c83a 	sub	r16,r3,r7
61022240:	0400260e 	bge	zero,r16,610222dc <___vfprintf_internal_r+0x5c4>
61022244:	00800404 	movi	r2,16
61022248:	1403c90e 	bge	r2,r16,61023170 <___vfprintf_internal_r+0x1458>
6102224c:	1027883a 	mov	r19,r2
61022250:	071840f4 	movhi	fp,24835
61022254:	e737bc84 	addi	fp,fp,-8462
61022258:	050001c4 	movi	r20,7
6102225c:	00000306 	br	6102226c <___vfprintf_internal_r+0x554>
61022260:	843ffc04 	addi	r16,r16,-16
61022264:	ad400204 	addi	r21,r21,8
61022268:	9c00130e 	bge	r19,r16,610222b8 <___vfprintf_internal_r+0x5a0>
6102226c:	94800404 	addi	r18,r18,16
61022270:	8c400044 	addi	r17,r17,1
61022274:	af000015 	stw	fp,0(r21)
61022278:	acc00115 	stw	r19,4(r21)
6102227c:	dc800e15 	stw	r18,56(sp)
61022280:	dc400d15 	stw	r17,52(sp)
61022284:	a47ff60e 	bge	r20,r17,61022260 <___vfprintf_internal_r+0x548>
61022288:	d9014f17 	ldw	r4,1340(sp)
6102228c:	b00b883a 	mov	r5,r22
61022290:	d9800c04 	addi	r6,sp,48
61022294:	d9c15115 	stw	r7,1348(sp)
61022298:	1021cc00 	call	61021cc0 <__sprint_r>
6102229c:	d9c15117 	ldw	r7,1348(sp)
610222a0:	1000551e 	bne	r2,zero,610223f8 <___vfprintf_internal_r+0x6e0>
610222a4:	843ffc04 	addi	r16,r16,-16
610222a8:	dc800e17 	ldw	r18,56(sp)
610222ac:	dc400d17 	ldw	r17,52(sp)
610222b0:	dd401904 	addi	r21,sp,100
610222b4:	9c3fed16 	blt	r19,r16,6102226c <___vfprintf_internal_r+0x554>
610222b8:	9425883a 	add	r18,r18,r16
610222bc:	8c400044 	addi	r17,r17,1
610222c0:	008001c4 	movi	r2,7
610222c4:	af000015 	stw	fp,0(r21)
610222c8:	ac000115 	stw	r16,4(r21)
610222cc:	dc800e15 	stw	r18,56(sp)
610222d0:	dc400d15 	stw	r17,52(sp)
610222d4:	14418216 	blt	r2,r17,610228e0 <___vfprintf_internal_r+0xbc8>
610222d8:	ad400204 	addi	r21,r21,8
610222dc:	d9014c17 	ldw	r4,1328(sp)
610222e0:	2080400c 	andi	r2,r4,256
610222e4:	10004a1e 	bne	r2,zero,61022410 <___vfprintf_internal_r+0x6f8>
610222e8:	d9414117 	ldw	r5,1284(sp)
610222ec:	91e5883a 	add	r18,r18,r7
610222f0:	8c400044 	addi	r17,r17,1
610222f4:	008001c4 	movi	r2,7
610222f8:	a9400015 	stw	r5,0(r21)
610222fc:	a9c00115 	stw	r7,4(r21)
61022300:	dc800e15 	stw	r18,56(sp)
61022304:	dc400d15 	stw	r17,52(sp)
61022308:	14416716 	blt	r2,r17,610228a8 <___vfprintf_internal_r+0xb90>
6102230c:	a8c00204 	addi	r3,r21,8
61022310:	d9814c17 	ldw	r6,1328(sp)
61022314:	3080010c 	andi	r2,r6,4
61022318:	10002826 	beq	r2,zero,610223bc <___vfprintf_internal_r+0x6a4>
6102231c:	d8814a17 	ldw	r2,1320(sp)
61022320:	d9014517 	ldw	r4,1300(sp)
61022324:	1121c83a 	sub	r16,r2,r4
61022328:	0400240e 	bge	zero,r16,610223bc <___vfprintf_internal_r+0x6a4>
6102232c:	00800404 	movi	r2,16
61022330:	14044f0e 	bge	r2,r16,61023470 <___vfprintf_internal_r+0x1758>
61022334:	dc400d17 	ldw	r17,52(sp)
61022338:	1027883a 	mov	r19,r2
6102233c:	071840f4 	movhi	fp,24835
61022340:	e737c084 	addi	fp,fp,-8446
61022344:	050001c4 	movi	r20,7
61022348:	00000306 	br	61022358 <___vfprintf_internal_r+0x640>
6102234c:	843ffc04 	addi	r16,r16,-16
61022350:	18c00204 	addi	r3,r3,8
61022354:	9c00110e 	bge	r19,r16,6102239c <___vfprintf_internal_r+0x684>
61022358:	94800404 	addi	r18,r18,16
6102235c:	8c400044 	addi	r17,r17,1
61022360:	1f000015 	stw	fp,0(r3)
61022364:	1cc00115 	stw	r19,4(r3)
61022368:	dc800e15 	stw	r18,56(sp)
6102236c:	dc400d15 	stw	r17,52(sp)
61022370:	a47ff60e 	bge	r20,r17,6102234c <___vfprintf_internal_r+0x634>
61022374:	d9014f17 	ldw	r4,1340(sp)
61022378:	b00b883a 	mov	r5,r22
6102237c:	d9800c04 	addi	r6,sp,48
61022380:	1021cc00 	call	61021cc0 <__sprint_r>
61022384:	10001c1e 	bne	r2,zero,610223f8 <___vfprintf_internal_r+0x6e0>
61022388:	843ffc04 	addi	r16,r16,-16
6102238c:	dc800e17 	ldw	r18,56(sp)
61022390:	dc400d17 	ldw	r17,52(sp)
61022394:	d8c01904 	addi	r3,sp,100
61022398:	9c3fef16 	blt	r19,r16,61022358 <___vfprintf_internal_r+0x640>
6102239c:	9425883a 	add	r18,r18,r16
610223a0:	8c400044 	addi	r17,r17,1
610223a4:	008001c4 	movi	r2,7
610223a8:	1f000015 	stw	fp,0(r3)
610223ac:	1c000115 	stw	r16,4(r3)
610223b0:	dc800e15 	stw	r18,56(sp)
610223b4:	dc400d15 	stw	r17,52(sp)
610223b8:	1440cb16 	blt	r2,r17,610226e8 <___vfprintf_internal_r+0x9d0>
610223bc:	d8814a17 	ldw	r2,1320(sp)
610223c0:	d9414517 	ldw	r5,1300(sp)
610223c4:	1140010e 	bge	r2,r5,610223cc <___vfprintf_internal_r+0x6b4>
610223c8:	2805883a 	mov	r2,r5
610223cc:	d9814b17 	ldw	r6,1324(sp)
610223d0:	308d883a 	add	r6,r6,r2
610223d4:	d9814b15 	stw	r6,1324(sp)
610223d8:	90013b1e 	bne	r18,zero,610228c8 <___vfprintf_internal_r+0xbb0>
610223dc:	d9c14017 	ldw	r7,1280(sp)
610223e0:	dd401904 	addi	r21,sp,100
610223e4:	d8000d15 	stw	zero,52(sp)
610223e8:	003ea706 	br	61021e88 <___vfprintf_internal_r+0x170>
610223ec:	d8800e17 	ldw	r2,56(sp)
610223f0:	10053f1e 	bne	r2,zero,610238f0 <___vfprintf_internal_r+0x1bd8>
610223f4:	d8000d15 	stw	zero,52(sp)
610223f8:	b080030b 	ldhu	r2,12(r22)
610223fc:	1080100c 	andi	r2,r2,64
61022400:	103e8726 	beq	r2,zero,61021e20 <___vfprintf_internal_r+0x108>
61022404:	00bfffc4 	movi	r2,-1
61022408:	d8814b15 	stw	r2,1324(sp)
6102240c:	003e8406 	br	61021e20 <___vfprintf_internal_r+0x108>
61022410:	d9814d17 	ldw	r6,1332(sp)
61022414:	00801944 	movi	r2,101
61022418:	11806e16 	blt	r2,r6,610225d4 <___vfprintf_internal_r+0x8bc>
6102241c:	d9414717 	ldw	r5,1308(sp)
61022420:	00c00044 	movi	r3,1
61022424:	1943430e 	bge	r3,r5,61023134 <___vfprintf_internal_r+0x141c>
61022428:	d8814117 	ldw	r2,1284(sp)
6102242c:	94800044 	addi	r18,r18,1
61022430:	8c400044 	addi	r17,r17,1
61022434:	a8800015 	stw	r2,0(r21)
61022438:	008001c4 	movi	r2,7
6102243c:	a8c00115 	stw	r3,4(r21)
61022440:	dc800e15 	stw	r18,56(sp)
61022444:	dc400d15 	stw	r17,52(sp)
61022448:	1441ca16 	blt	r2,r17,61022b74 <___vfprintf_internal_r+0xe5c>
6102244c:	a8c00204 	addi	r3,r21,8
61022450:	d9014917 	ldw	r4,1316(sp)
61022454:	00800044 	movi	r2,1
61022458:	94800044 	addi	r18,r18,1
6102245c:	8c400044 	addi	r17,r17,1
61022460:	18800115 	stw	r2,4(r3)
61022464:	008001c4 	movi	r2,7
61022468:	19000015 	stw	r4,0(r3)
6102246c:	dc800e15 	stw	r18,56(sp)
61022470:	dc400d15 	stw	r17,52(sp)
61022474:	1441b616 	blt	r2,r17,61022b50 <___vfprintf_internal_r+0xe38>
61022478:	1cc00204 	addi	r19,r3,8
6102247c:	d9014217 	ldw	r4,1288(sp)
61022480:	d9414317 	ldw	r5,1292(sp)
61022484:	000d883a 	mov	r6,zero
61022488:	000f883a 	mov	r7,zero
6102248c:	102a7f00 	call	6102a7f0 <__nedf2>
61022490:	10017426 	beq	r2,zero,61022a64 <___vfprintf_internal_r+0xd4c>
61022494:	d9414717 	ldw	r5,1308(sp)
61022498:	d9814117 	ldw	r6,1284(sp)
6102249c:	8c400044 	addi	r17,r17,1
610224a0:	2c85883a 	add	r2,r5,r18
610224a4:	14bfffc4 	addi	r18,r2,-1
610224a8:	28bfffc4 	addi	r2,r5,-1
610224ac:	30c00044 	addi	r3,r6,1
610224b0:	98800115 	stw	r2,4(r19)
610224b4:	008001c4 	movi	r2,7
610224b8:	98c00015 	stw	r3,0(r19)
610224bc:	dc800e15 	stw	r18,56(sp)
610224c0:	dc400d15 	stw	r17,52(sp)
610224c4:	14418e16 	blt	r2,r17,61022b00 <___vfprintf_internal_r+0xde8>
610224c8:	9cc00204 	addi	r19,r19,8
610224cc:	d9414817 	ldw	r5,1312(sp)
610224d0:	d8800804 	addi	r2,sp,32
610224d4:	8c400044 	addi	r17,r17,1
610224d8:	9165883a 	add	r18,r18,r5
610224dc:	98800015 	stw	r2,0(r19)
610224e0:	008001c4 	movi	r2,7
610224e4:	99400115 	stw	r5,4(r19)
610224e8:	dc800e15 	stw	r18,56(sp)
610224ec:	dc400d15 	stw	r17,52(sp)
610224f0:	1440ed16 	blt	r2,r17,610228a8 <___vfprintf_internal_r+0xb90>
610224f4:	98c00204 	addi	r3,r19,8
610224f8:	003f8506 	br	61022310 <___vfprintf_internal_r+0x5f8>
610224fc:	d9814a17 	ldw	r6,1320(sp)
61022500:	d8814517 	ldw	r2,1300(sp)
61022504:	30a1c83a 	sub	r16,r6,r2
61022508:	043f4b0e 	bge	zero,r16,61022238 <___vfprintf_internal_r+0x520>
6102250c:	00800404 	movi	r2,16
61022510:	1404340e 	bge	r2,r16,610235e4 <___vfprintf_internal_r+0x18cc>
61022514:	1027883a 	mov	r19,r2
61022518:	071840f4 	movhi	fp,24835
6102251c:	e737bc84 	addi	fp,fp,-8462
61022520:	050001c4 	movi	r20,7
61022524:	00000306 	br	61022534 <___vfprintf_internal_r+0x81c>
61022528:	843ffc04 	addi	r16,r16,-16
6102252c:	ad400204 	addi	r21,r21,8
61022530:	9c00130e 	bge	r19,r16,61022580 <___vfprintf_internal_r+0x868>
61022534:	94800404 	addi	r18,r18,16
61022538:	8c400044 	addi	r17,r17,1
6102253c:	af000015 	stw	fp,0(r21)
61022540:	acc00115 	stw	r19,4(r21)
61022544:	dc800e15 	stw	r18,56(sp)
61022548:	dc400d15 	stw	r17,52(sp)
6102254c:	a47ff60e 	bge	r20,r17,61022528 <___vfprintf_internal_r+0x810>
61022550:	d9014f17 	ldw	r4,1340(sp)
61022554:	b00b883a 	mov	r5,r22
61022558:	d9800c04 	addi	r6,sp,48
6102255c:	d9c15115 	stw	r7,1348(sp)
61022560:	1021cc00 	call	61021cc0 <__sprint_r>
61022564:	d9c15117 	ldw	r7,1348(sp)
61022568:	103fa31e 	bne	r2,zero,610223f8 <___vfprintf_internal_r+0x6e0>
6102256c:	843ffc04 	addi	r16,r16,-16
61022570:	dc800e17 	ldw	r18,56(sp)
61022574:	dc400d17 	ldw	r17,52(sp)
61022578:	dd401904 	addi	r21,sp,100
6102257c:	9c3fed16 	blt	r19,r16,61022534 <___vfprintf_internal_r+0x81c>
61022580:	9425883a 	add	r18,r18,r16
61022584:	8c400044 	addi	r17,r17,1
61022588:	008001c4 	movi	r2,7
6102258c:	af000015 	stw	fp,0(r21)
61022590:	ac000115 	stw	r16,4(r21)
61022594:	dc800e15 	stw	r18,56(sp)
61022598:	dc400d15 	stw	r17,52(sp)
6102259c:	14416116 	blt	r2,r17,61022b24 <___vfprintf_internal_r+0xe0c>
610225a0:	ad400204 	addi	r21,r21,8
610225a4:	003f2406 	br	61022238 <___vfprintf_internal_r+0x520>
610225a8:	d9014f17 	ldw	r4,1340(sp)
610225ac:	10257880 	call	61025788 <__sinit>
610225b0:	d9c15117 	ldw	r7,1348(sp)
610225b4:	003def06 	br	61021d74 <___vfprintf_internal_r+0x5c>
610225b8:	d9014f17 	ldw	r4,1340(sp)
610225bc:	b00b883a 	mov	r5,r22
610225c0:	d9c15115 	stw	r7,1348(sp)
610225c4:	1023be80 	call	61023be8 <__swsetup_r>
610225c8:	d9c15117 	ldw	r7,1348(sp)
610225cc:	103dee26 	beq	r2,zero,61021d88 <___vfprintf_internal_r+0x70>
610225d0:	003f8c06 	br	61022404 <___vfprintf_internal_r+0x6ec>
610225d4:	d9014217 	ldw	r4,1288(sp)
610225d8:	d9414317 	ldw	r5,1292(sp)
610225dc:	000d883a 	mov	r6,zero
610225e0:	000f883a 	mov	r7,zero
610225e4:	102a7680 	call	6102a768 <__eqdf2>
610225e8:	1000f21e 	bne	r2,zero,610229b4 <___vfprintf_internal_r+0xc9c>
610225ec:	009840f4 	movhi	r2,24835
610225f0:	10b7bc04 	addi	r2,r2,-8464
610225f4:	94800044 	addi	r18,r18,1
610225f8:	8c400044 	addi	r17,r17,1
610225fc:	a8800015 	stw	r2,0(r21)
61022600:	00c00044 	movi	r3,1
61022604:	008001c4 	movi	r2,7
61022608:	a8c00115 	stw	r3,4(r21)
6102260c:	dc800e15 	stw	r18,56(sp)
61022610:	dc400d15 	stw	r17,52(sp)
61022614:	1442fa16 	blt	r2,r17,61023200 <___vfprintf_internal_r+0x14e8>
61022618:	a8c00204 	addi	r3,r21,8
6102261c:	d8800517 	ldw	r2,20(sp)
61022620:	d9014717 	ldw	r4,1308(sp)
61022624:	11015c0e 	bge	r2,r4,61022b98 <___vfprintf_internal_r+0xe80>
61022628:	dc400d17 	ldw	r17,52(sp)
6102262c:	d9814917 	ldw	r6,1316(sp)
61022630:	00800044 	movi	r2,1
61022634:	94800044 	addi	r18,r18,1
61022638:	8c400044 	addi	r17,r17,1
6102263c:	18800115 	stw	r2,4(r3)
61022640:	008001c4 	movi	r2,7
61022644:	19800015 	stw	r6,0(r3)
61022648:	dc800e15 	stw	r18,56(sp)
6102264c:	dc400d15 	stw	r17,52(sp)
61022650:	14431016 	blt	r2,r17,61023294 <___vfprintf_internal_r+0x157c>
61022654:	18c00204 	addi	r3,r3,8
61022658:	d8814717 	ldw	r2,1308(sp)
6102265c:	143fffc4 	addi	r16,r2,-1
61022660:	043f2b0e 	bge	zero,r16,61022310 <___vfprintf_internal_r+0x5f8>
61022664:	00800404 	movi	r2,16
61022668:	1402a20e 	bge	r2,r16,610230f4 <___vfprintf_internal_r+0x13dc>
6102266c:	dc400d17 	ldw	r17,52(sp)
61022670:	1027883a 	mov	r19,r2
61022674:	071840f4 	movhi	fp,24835
61022678:	e737bc84 	addi	fp,fp,-8462
6102267c:	050001c4 	movi	r20,7
61022680:	00000306 	br	61022690 <___vfprintf_internal_r+0x978>
61022684:	18c00204 	addi	r3,r3,8
61022688:	843ffc04 	addi	r16,r16,-16
6102268c:	9c029c0e 	bge	r19,r16,61023100 <___vfprintf_internal_r+0x13e8>
61022690:	94800404 	addi	r18,r18,16
61022694:	8c400044 	addi	r17,r17,1
61022698:	1f000015 	stw	fp,0(r3)
6102269c:	1cc00115 	stw	r19,4(r3)
610226a0:	dc800e15 	stw	r18,56(sp)
610226a4:	dc400d15 	stw	r17,52(sp)
610226a8:	a47ff60e 	bge	r20,r17,61022684 <___vfprintf_internal_r+0x96c>
610226ac:	d9014f17 	ldw	r4,1340(sp)
610226b0:	b00b883a 	mov	r5,r22
610226b4:	d9800c04 	addi	r6,sp,48
610226b8:	1021cc00 	call	61021cc0 <__sprint_r>
610226bc:	103f4e1e 	bne	r2,zero,610223f8 <___vfprintf_internal_r+0x6e0>
610226c0:	dc800e17 	ldw	r18,56(sp)
610226c4:	dc400d17 	ldw	r17,52(sp)
610226c8:	d8c01904 	addi	r3,sp,100
610226cc:	003fee06 	br	61022688 <___vfprintf_internal_r+0x970>
610226d0:	d8802c0b 	ldhu	r2,176(sp)
610226d4:	00ffffc4 	movi	r3,-1
610226d8:	d8c14b15 	stw	r3,1324(sp)
610226dc:	1080100c 	andi	r2,r2,64
610226e0:	103dcc1e 	bne	r2,zero,61021e14 <___vfprintf_internal_r+0xfc>
610226e4:	003dce06 	br	61021e20 <___vfprintf_internal_r+0x108>
610226e8:	d9014f17 	ldw	r4,1340(sp)
610226ec:	b00b883a 	mov	r5,r22
610226f0:	d9800c04 	addi	r6,sp,48
610226f4:	1021cc00 	call	61021cc0 <__sprint_r>
610226f8:	103f3f1e 	bne	r2,zero,610223f8 <___vfprintf_internal_r+0x6e0>
610226fc:	dc800e17 	ldw	r18,56(sp)
61022700:	003f2e06 	br	610223bc <___vfprintf_internal_r+0x6a4>
61022704:	d9414c17 	ldw	r5,1328(sp)
61022708:	29400414 	ori	r5,r5,16
6102270c:	d9414c15 	stw	r5,1328(sp)
61022710:	d9814c17 	ldw	r6,1328(sp)
61022714:	3080080c 	andi	r2,r6,32
61022718:	10014f1e 	bne	r2,zero,61022c58 <___vfprintf_internal_r+0xf40>
6102271c:	d8c14c17 	ldw	r3,1328(sp)
61022720:	1880040c 	andi	r2,r3,16
61022724:	1002ea1e 	bne	r2,zero,610232d0 <___vfprintf_internal_r+0x15b8>
61022728:	d9014c17 	ldw	r4,1328(sp)
6102272c:	2080100c 	andi	r2,r4,64
61022730:	1002e726 	beq	r2,zero,610232d0 <___vfprintf_internal_r+0x15b8>
61022734:	3880000f 	ldh	r2,0(r7)
61022738:	39c00104 	addi	r7,r7,4
6102273c:	d9c14015 	stw	r7,1280(sp)
61022740:	1023d7fa 	srai	r17,r2,31
61022744:	1021883a 	mov	r16,r2
61022748:	88037216 	blt	r17,zero,61023514 <___vfprintf_internal_r+0x17fc>
6102274c:	01000044 	movi	r4,1
61022750:	98000416 	blt	r19,zero,61022764 <___vfprintf_internal_r+0xa4c>
61022754:	d8c14c17 	ldw	r3,1328(sp)
61022758:	00bfdfc4 	movi	r2,-129
6102275c:	1886703a 	and	r3,r3,r2
61022760:	d8c14c15 	stw	r3,1328(sp)
61022764:	8444b03a 	or	r2,r16,r17
61022768:	1002261e 	bne	r2,zero,61023004 <___vfprintf_internal_r+0x12ec>
6102276c:	9802251e 	bne	r19,zero,61023004 <___vfprintf_internal_r+0x12ec>
61022770:	20803fcc 	andi	r2,r4,255
61022774:	10029b26 	beq	r2,zero,610231e4 <___vfprintf_internal_r+0x14cc>
61022778:	d8c01904 	addi	r3,sp,100
6102277c:	dd000f04 	addi	r20,sp,60
61022780:	d8c14115 	stw	r3,1284(sp)
61022784:	d8c14117 	ldw	r3,1284(sp)
61022788:	dcc14515 	stw	r19,1300(sp)
6102278c:	a0c5c83a 	sub	r2,r20,r3
61022790:	11c00a04 	addi	r7,r2,40
61022794:	99c0010e 	bge	r19,r7,6102279c <___vfprintf_internal_r+0xa84>
61022798:	d9c14515 	stw	r7,1300(sp)
6102279c:	dcc14615 	stw	r19,1304(sp)
610227a0:	d8800407 	ldb	r2,16(sp)
610227a4:	103e4c26 	beq	r2,zero,610220d8 <___vfprintf_internal_r+0x3c0>
610227a8:	d8814517 	ldw	r2,1300(sp)
610227ac:	10800044 	addi	r2,r2,1
610227b0:	d8814515 	stw	r2,1300(sp)
610227b4:	003e4806 	br	610220d8 <___vfprintf_internal_r+0x3c0>
610227b8:	d9814c17 	ldw	r6,1328(sp)
610227bc:	31800414 	ori	r6,r6,16
610227c0:	d9814c15 	stw	r6,1328(sp)
610227c4:	d8c14c17 	ldw	r3,1328(sp)
610227c8:	1880080c 	andi	r2,r3,32
610227cc:	1001271e 	bne	r2,zero,61022c6c <___vfprintf_internal_r+0xf54>
610227d0:	d9414c17 	ldw	r5,1328(sp)
610227d4:	2880040c 	andi	r2,r5,16
610227d8:	1002b61e 	bne	r2,zero,610232b4 <___vfprintf_internal_r+0x159c>
610227dc:	d9814c17 	ldw	r6,1328(sp)
610227e0:	3080100c 	andi	r2,r6,64
610227e4:	1002b326 	beq	r2,zero,610232b4 <___vfprintf_internal_r+0x159c>
610227e8:	3c00000b 	ldhu	r16,0(r7)
610227ec:	0009883a 	mov	r4,zero
610227f0:	39c00104 	addi	r7,r7,4
610227f4:	0023883a 	mov	r17,zero
610227f8:	d9c14015 	stw	r7,1280(sp)
610227fc:	d8000405 	stb	zero,16(sp)
61022800:	003fd306 	br	61022750 <___vfprintf_internal_r+0xa38>
61022804:	d9014c17 	ldw	r4,1328(sp)
61022808:	21000414 	ori	r4,r4,16
6102280c:	d9014c15 	stw	r4,1328(sp)
61022810:	d9414c17 	ldw	r5,1328(sp)
61022814:	2880080c 	andi	r2,r5,32
61022818:	1001081e 	bne	r2,zero,61022c3c <___vfprintf_internal_r+0xf24>
6102281c:	d8c14c17 	ldw	r3,1328(sp)
61022820:	1880040c 	andi	r2,r3,16
61022824:	1002b01e 	bne	r2,zero,610232e8 <___vfprintf_internal_r+0x15d0>
61022828:	d9014c17 	ldw	r4,1328(sp)
6102282c:	2080100c 	andi	r2,r4,64
61022830:	1002ad26 	beq	r2,zero,610232e8 <___vfprintf_internal_r+0x15d0>
61022834:	3c00000b 	ldhu	r16,0(r7)
61022838:	01000044 	movi	r4,1
6102283c:	39c00104 	addi	r7,r7,4
61022840:	0023883a 	mov	r17,zero
61022844:	d9c14015 	stw	r7,1280(sp)
61022848:	d8000405 	stb	zero,16(sp)
6102284c:	003fc006 	br	61022750 <___vfprintf_internal_r+0xa38>
61022850:	d9014f17 	ldw	r4,1340(sp)
61022854:	b00b883a 	mov	r5,r22
61022858:	d9800c04 	addi	r6,sp,48
6102285c:	1021cc00 	call	61021cc0 <__sprint_r>
61022860:	103ee51e 	bne	r2,zero,610223f8 <___vfprintf_internal_r+0x6e0>
61022864:	dc800e17 	ldw	r18,56(sp)
61022868:	d8c01904 	addi	r3,sp,100
6102286c:	d9814c17 	ldw	r6,1328(sp)
61022870:	3080004c 	andi	r2,r6,1
61022874:	1005003a 	cmpeq	r2,r2,zero
61022878:	103ea51e 	bne	r2,zero,61022310 <___vfprintf_internal_r+0x5f8>
6102287c:	00800044 	movi	r2,1
61022880:	dc400d17 	ldw	r17,52(sp)
61022884:	18800115 	stw	r2,4(r3)
61022888:	d8814917 	ldw	r2,1316(sp)
6102288c:	94800044 	addi	r18,r18,1
61022890:	8c400044 	addi	r17,r17,1
61022894:	18800015 	stw	r2,0(r3)
61022898:	008001c4 	movi	r2,7
6102289c:	dc800e15 	stw	r18,56(sp)
610228a0:	dc400d15 	stw	r17,52(sp)
610228a4:	14421e0e 	bge	r2,r17,61023120 <___vfprintf_internal_r+0x1408>
610228a8:	d9014f17 	ldw	r4,1340(sp)
610228ac:	b00b883a 	mov	r5,r22
610228b0:	d9800c04 	addi	r6,sp,48
610228b4:	1021cc00 	call	61021cc0 <__sprint_r>
610228b8:	103ecf1e 	bne	r2,zero,610223f8 <___vfprintf_internal_r+0x6e0>
610228bc:	dc800e17 	ldw	r18,56(sp)
610228c0:	d8c01904 	addi	r3,sp,100
610228c4:	003e9206 	br	61022310 <___vfprintf_internal_r+0x5f8>
610228c8:	d9014f17 	ldw	r4,1340(sp)
610228cc:	b00b883a 	mov	r5,r22
610228d0:	d9800c04 	addi	r6,sp,48
610228d4:	1021cc00 	call	61021cc0 <__sprint_r>
610228d8:	103ec026 	beq	r2,zero,610223dc <___vfprintf_internal_r+0x6c4>
610228dc:	003ec606 	br	610223f8 <___vfprintf_internal_r+0x6e0>
610228e0:	d9014f17 	ldw	r4,1340(sp)
610228e4:	b00b883a 	mov	r5,r22
610228e8:	d9800c04 	addi	r6,sp,48
610228ec:	d9c15115 	stw	r7,1348(sp)
610228f0:	1021cc00 	call	61021cc0 <__sprint_r>
610228f4:	d9c15117 	ldw	r7,1348(sp)
610228f8:	103ebf1e 	bne	r2,zero,610223f8 <___vfprintf_internal_r+0x6e0>
610228fc:	dc800e17 	ldw	r18,56(sp)
61022900:	dc400d17 	ldw	r17,52(sp)
61022904:	dd401904 	addi	r21,sp,100
61022908:	003e7406 	br	610222dc <___vfprintf_internal_r+0x5c4>
6102290c:	d9014f17 	ldw	r4,1340(sp)
61022910:	b00b883a 	mov	r5,r22
61022914:	d9800c04 	addi	r6,sp,48
61022918:	d9c15115 	stw	r7,1348(sp)
6102291c:	1021cc00 	call	61021cc0 <__sprint_r>
61022920:	d9c15117 	ldw	r7,1348(sp)
61022924:	103eb41e 	bne	r2,zero,610223f8 <___vfprintf_internal_r+0x6e0>
61022928:	dd401904 	addi	r21,sp,100
6102292c:	003d6d06 	br	61021ee4 <___vfprintf_internal_r+0x1cc>
61022930:	d9014f17 	ldw	r4,1340(sp)
61022934:	b00b883a 	mov	r5,r22
61022938:	d9800c04 	addi	r6,sp,48
6102293c:	d9c15115 	stw	r7,1348(sp)
61022940:	1021cc00 	call	61021cc0 <__sprint_r>
61022944:	d9c15117 	ldw	r7,1348(sp)
61022948:	103eab1e 	bne	r2,zero,610223f8 <___vfprintf_internal_r+0x6e0>
6102294c:	dc800e17 	ldw	r18,56(sp)
61022950:	dc400d17 	ldw	r17,52(sp)
61022954:	dd401904 	addi	r21,sp,100
61022958:	003e3406 	br	6102222c <___vfprintf_internal_r+0x514>
6102295c:	d9014f17 	ldw	r4,1340(sp)
61022960:	b00b883a 	mov	r5,r22
61022964:	d9800c04 	addi	r6,sp,48
61022968:	d9c15115 	stw	r7,1348(sp)
6102296c:	1021cc00 	call	61021cc0 <__sprint_r>
61022970:	d9c15117 	ldw	r7,1348(sp)
61022974:	103ea01e 	bne	r2,zero,610223f8 <___vfprintf_internal_r+0x6e0>
61022978:	dc800e17 	ldw	r18,56(sp)
6102297c:	dc400d17 	ldw	r17,52(sp)
61022980:	dd401904 	addi	r21,sp,100
61022984:	003e1c06 	br	610221f8 <___vfprintf_internal_r+0x4e0>
61022988:	d9014f17 	ldw	r4,1340(sp)
6102298c:	b00b883a 	mov	r5,r22
61022990:	d9800c04 	addi	r6,sp,48
61022994:	d9c15115 	stw	r7,1348(sp)
61022998:	1021cc00 	call	61021cc0 <__sprint_r>
6102299c:	d9c15117 	ldw	r7,1348(sp)
610229a0:	103e951e 	bne	r2,zero,610223f8 <___vfprintf_internal_r+0x6e0>
610229a4:	dc800e17 	ldw	r18,56(sp)
610229a8:	dc400d17 	ldw	r17,52(sp)
610229ac:	dd401904 	addi	r21,sp,100
610229b0:	003e0406 	br	610221c4 <___vfprintf_internal_r+0x4ac>
610229b4:	d9000517 	ldw	r4,20(sp)
610229b8:	0102520e 	bge	zero,r4,61023304 <___vfprintf_internal_r+0x15ec>
610229bc:	d9814717 	ldw	r6,1308(sp)
610229c0:	21807a16 	blt	r4,r6,61022bac <___vfprintf_internal_r+0xe94>
610229c4:	d8814117 	ldw	r2,1284(sp)
610229c8:	91a5883a 	add	r18,r18,r6
610229cc:	8c400044 	addi	r17,r17,1
610229d0:	a8800015 	stw	r2,0(r21)
610229d4:	008001c4 	movi	r2,7
610229d8:	a9800115 	stw	r6,4(r21)
610229dc:	dc800e15 	stw	r18,56(sp)
610229e0:	dc400d15 	stw	r17,52(sp)
610229e4:	1442f616 	blt	r2,r17,610235c0 <___vfprintf_internal_r+0x18a8>
610229e8:	a8c00204 	addi	r3,r21,8
610229ec:	d9414717 	ldw	r5,1308(sp)
610229f0:	2161c83a 	sub	r16,r4,r5
610229f4:	043f9d0e 	bge	zero,r16,6102286c <___vfprintf_internal_r+0xb54>
610229f8:	00800404 	movi	r2,16
610229fc:	1402130e 	bge	r2,r16,6102324c <___vfprintf_internal_r+0x1534>
61022a00:	dc400d17 	ldw	r17,52(sp)
61022a04:	1027883a 	mov	r19,r2
61022a08:	071840f4 	movhi	fp,24835
61022a0c:	e737bc84 	addi	fp,fp,-8462
61022a10:	050001c4 	movi	r20,7
61022a14:	00000306 	br	61022a24 <___vfprintf_internal_r+0xd0c>
61022a18:	18c00204 	addi	r3,r3,8
61022a1c:	843ffc04 	addi	r16,r16,-16
61022a20:	9c020d0e 	bge	r19,r16,61023258 <___vfprintf_internal_r+0x1540>
61022a24:	94800404 	addi	r18,r18,16
61022a28:	8c400044 	addi	r17,r17,1
61022a2c:	1f000015 	stw	fp,0(r3)
61022a30:	1cc00115 	stw	r19,4(r3)
61022a34:	dc800e15 	stw	r18,56(sp)
61022a38:	dc400d15 	stw	r17,52(sp)
61022a3c:	a47ff60e 	bge	r20,r17,61022a18 <___vfprintf_internal_r+0xd00>
61022a40:	d9014f17 	ldw	r4,1340(sp)
61022a44:	b00b883a 	mov	r5,r22
61022a48:	d9800c04 	addi	r6,sp,48
61022a4c:	1021cc00 	call	61021cc0 <__sprint_r>
61022a50:	103e691e 	bne	r2,zero,610223f8 <___vfprintf_internal_r+0x6e0>
61022a54:	dc800e17 	ldw	r18,56(sp)
61022a58:	dc400d17 	ldw	r17,52(sp)
61022a5c:	d8c01904 	addi	r3,sp,100
61022a60:	003fee06 	br	61022a1c <___vfprintf_internal_r+0xd04>
61022a64:	d8814717 	ldw	r2,1308(sp)
61022a68:	143fffc4 	addi	r16,r2,-1
61022a6c:	043e970e 	bge	zero,r16,610224cc <___vfprintf_internal_r+0x7b4>
61022a70:	00800404 	movi	r2,16
61022a74:	1400180e 	bge	r2,r16,61022ad8 <___vfprintf_internal_r+0xdc0>
61022a78:	1029883a 	mov	r20,r2
61022a7c:	071840f4 	movhi	fp,24835
61022a80:	e737bc84 	addi	fp,fp,-8462
61022a84:	054001c4 	movi	r21,7
61022a88:	00000306 	br	61022a98 <___vfprintf_internal_r+0xd80>
61022a8c:	9cc00204 	addi	r19,r19,8
61022a90:	843ffc04 	addi	r16,r16,-16
61022a94:	a400120e 	bge	r20,r16,61022ae0 <___vfprintf_internal_r+0xdc8>
61022a98:	94800404 	addi	r18,r18,16
61022a9c:	8c400044 	addi	r17,r17,1
61022aa0:	9f000015 	stw	fp,0(r19)
61022aa4:	9d000115 	stw	r20,4(r19)
61022aa8:	dc800e15 	stw	r18,56(sp)
61022aac:	dc400d15 	stw	r17,52(sp)
61022ab0:	ac7ff60e 	bge	r21,r17,61022a8c <___vfprintf_internal_r+0xd74>
61022ab4:	d9014f17 	ldw	r4,1340(sp)
61022ab8:	b00b883a 	mov	r5,r22
61022abc:	d9800c04 	addi	r6,sp,48
61022ac0:	1021cc00 	call	61021cc0 <__sprint_r>
61022ac4:	103e4c1e 	bne	r2,zero,610223f8 <___vfprintf_internal_r+0x6e0>
61022ac8:	dc800e17 	ldw	r18,56(sp)
61022acc:	dc400d17 	ldw	r17,52(sp)
61022ad0:	dcc01904 	addi	r19,sp,100
61022ad4:	003fee06 	br	61022a90 <___vfprintf_internal_r+0xd78>
61022ad8:	071840f4 	movhi	fp,24835
61022adc:	e737bc84 	addi	fp,fp,-8462
61022ae0:	9425883a 	add	r18,r18,r16
61022ae4:	8c400044 	addi	r17,r17,1
61022ae8:	008001c4 	movi	r2,7
61022aec:	9f000015 	stw	fp,0(r19)
61022af0:	9c000115 	stw	r16,4(r19)
61022af4:	dc800e15 	stw	r18,56(sp)
61022af8:	dc400d15 	stw	r17,52(sp)
61022afc:	147e720e 	bge	r2,r17,610224c8 <___vfprintf_internal_r+0x7b0>
61022b00:	d9014f17 	ldw	r4,1340(sp)
61022b04:	b00b883a 	mov	r5,r22
61022b08:	d9800c04 	addi	r6,sp,48
61022b0c:	1021cc00 	call	61021cc0 <__sprint_r>
61022b10:	103e391e 	bne	r2,zero,610223f8 <___vfprintf_internal_r+0x6e0>
61022b14:	dc800e17 	ldw	r18,56(sp)
61022b18:	dc400d17 	ldw	r17,52(sp)
61022b1c:	dcc01904 	addi	r19,sp,100
61022b20:	003e6a06 	br	610224cc <___vfprintf_internal_r+0x7b4>
61022b24:	d9014f17 	ldw	r4,1340(sp)
61022b28:	b00b883a 	mov	r5,r22
61022b2c:	d9800c04 	addi	r6,sp,48
61022b30:	d9c15115 	stw	r7,1348(sp)
61022b34:	1021cc00 	call	61021cc0 <__sprint_r>
61022b38:	d9c15117 	ldw	r7,1348(sp)
61022b3c:	103e2e1e 	bne	r2,zero,610223f8 <___vfprintf_internal_r+0x6e0>
61022b40:	dc800e17 	ldw	r18,56(sp)
61022b44:	dc400d17 	ldw	r17,52(sp)
61022b48:	dd401904 	addi	r21,sp,100
61022b4c:	003dba06 	br	61022238 <___vfprintf_internal_r+0x520>
61022b50:	d9014f17 	ldw	r4,1340(sp)
61022b54:	b00b883a 	mov	r5,r22
61022b58:	d9800c04 	addi	r6,sp,48
61022b5c:	1021cc00 	call	61021cc0 <__sprint_r>
61022b60:	103e251e 	bne	r2,zero,610223f8 <___vfprintf_internal_r+0x6e0>
61022b64:	dc800e17 	ldw	r18,56(sp)
61022b68:	dc400d17 	ldw	r17,52(sp)
61022b6c:	dcc01904 	addi	r19,sp,100
61022b70:	003e4206 	br	6102247c <___vfprintf_internal_r+0x764>
61022b74:	d9014f17 	ldw	r4,1340(sp)
61022b78:	b00b883a 	mov	r5,r22
61022b7c:	d9800c04 	addi	r6,sp,48
61022b80:	1021cc00 	call	61021cc0 <__sprint_r>
61022b84:	103e1c1e 	bne	r2,zero,610223f8 <___vfprintf_internal_r+0x6e0>
61022b88:	dc800e17 	ldw	r18,56(sp)
61022b8c:	dc400d17 	ldw	r17,52(sp)
61022b90:	d8c01904 	addi	r3,sp,100
61022b94:	003e2e06 	br	61022450 <___vfprintf_internal_r+0x738>
61022b98:	d9414c17 	ldw	r5,1328(sp)
61022b9c:	2880004c 	andi	r2,r5,1
61022ba0:	1005003a 	cmpeq	r2,r2,zero
61022ba4:	103dda1e 	bne	r2,zero,61022310 <___vfprintf_internal_r+0x5f8>
61022ba8:	003e9f06 	br	61022628 <___vfprintf_internal_r+0x910>
61022bac:	d8c14117 	ldw	r3,1284(sp)
61022bb0:	9125883a 	add	r18,r18,r4
61022bb4:	8c400044 	addi	r17,r17,1
61022bb8:	008001c4 	movi	r2,7
61022bbc:	a8c00015 	stw	r3,0(r21)
61022bc0:	a9000115 	stw	r4,4(r21)
61022bc4:	dc800e15 	stw	r18,56(sp)
61022bc8:	dc400d15 	stw	r17,52(sp)
61022bcc:	14426616 	blt	r2,r17,61023568 <___vfprintf_internal_r+0x1850>
61022bd0:	a8c00204 	addi	r3,r21,8
61022bd4:	d9414917 	ldw	r5,1316(sp)
61022bd8:	00800044 	movi	r2,1
61022bdc:	94800044 	addi	r18,r18,1
61022be0:	8c400044 	addi	r17,r17,1
61022be4:	18800115 	stw	r2,4(r3)
61022be8:	008001c4 	movi	r2,7
61022bec:	19400015 	stw	r5,0(r3)
61022bf0:	dc800e15 	stw	r18,56(sp)
61022bf4:	dc400d15 	stw	r17,52(sp)
61022bf8:	2021883a 	mov	r16,r4
61022bfc:	14425016 	blt	r2,r17,61023540 <___vfprintf_internal_r+0x1828>
61022c00:	19400204 	addi	r5,r3,8
61022c04:	d9814717 	ldw	r6,1308(sp)
61022c08:	8c400044 	addi	r17,r17,1
61022c0c:	dc400d15 	stw	r17,52(sp)
61022c10:	3107c83a 	sub	r3,r6,r4
61022c14:	d9014117 	ldw	r4,1284(sp)
61022c18:	90e5883a 	add	r18,r18,r3
61022c1c:	28c00115 	stw	r3,4(r5)
61022c20:	8105883a 	add	r2,r16,r4
61022c24:	28800015 	stw	r2,0(r5)
61022c28:	008001c4 	movi	r2,7
61022c2c:	dc800e15 	stw	r18,56(sp)
61022c30:	147f1d16 	blt	r2,r17,610228a8 <___vfprintf_internal_r+0xb90>
61022c34:	28c00204 	addi	r3,r5,8
61022c38:	003db506 	br	61022310 <___vfprintf_internal_r+0x5f8>
61022c3c:	3c000017 	ldw	r16,0(r7)
61022c40:	3c400117 	ldw	r17,4(r7)
61022c44:	39800204 	addi	r6,r7,8
61022c48:	01000044 	movi	r4,1
61022c4c:	d9814015 	stw	r6,1280(sp)
61022c50:	d8000405 	stb	zero,16(sp)
61022c54:	003ebe06 	br	61022750 <___vfprintf_internal_r+0xa38>
61022c58:	3c000017 	ldw	r16,0(r7)
61022c5c:	3c400117 	ldw	r17,4(r7)
61022c60:	38800204 	addi	r2,r7,8
61022c64:	d8814015 	stw	r2,1280(sp)
61022c68:	003eb706 	br	61022748 <___vfprintf_internal_r+0xa30>
61022c6c:	3c000017 	ldw	r16,0(r7)
61022c70:	3c400117 	ldw	r17,4(r7)
61022c74:	39000204 	addi	r4,r7,8
61022c78:	d9014015 	stw	r4,1280(sp)
61022c7c:	0009883a 	mov	r4,zero
61022c80:	d8000405 	stb	zero,16(sp)
61022c84:	003eb206 	br	61022750 <___vfprintf_internal_r+0xa38>
61022c88:	38c00017 	ldw	r3,0(r7)
61022c8c:	39c00104 	addi	r7,r7,4
61022c90:	d8c14a15 	stw	r3,1320(sp)
61022c94:	1800d10e 	bge	r3,zero,61022fdc <___vfprintf_internal_r+0x12c4>
61022c98:	00c7c83a 	sub	r3,zero,r3
61022c9c:	d8c14a15 	stw	r3,1320(sp)
61022ca0:	d9014c17 	ldw	r4,1328(sp)
61022ca4:	b8c00007 	ldb	r3,0(r23)
61022ca8:	21000114 	ori	r4,r4,4
61022cac:	d9014c15 	stw	r4,1328(sp)
61022cb0:	003c9806 	br	61021f14 <___vfprintf_internal_r+0x1fc>
61022cb4:	d9814c17 	ldw	r6,1328(sp)
61022cb8:	3080080c 	andi	r2,r6,32
61022cbc:	1001f026 	beq	r2,zero,61023480 <___vfprintf_internal_r+0x1768>
61022cc0:	d9014b17 	ldw	r4,1324(sp)
61022cc4:	38800017 	ldw	r2,0(r7)
61022cc8:	39c00104 	addi	r7,r7,4
61022ccc:	d9c14015 	stw	r7,1280(sp)
61022cd0:	2007d7fa 	srai	r3,r4,31
61022cd4:	d9c14017 	ldw	r7,1280(sp)
61022cd8:	11000015 	stw	r4,0(r2)
61022cdc:	10c00115 	stw	r3,4(r2)
61022ce0:	003c6906 	br	61021e88 <___vfprintf_internal_r+0x170>
61022ce4:	b8c00007 	ldb	r3,0(r23)
61022ce8:	00801b04 	movi	r2,108
61022cec:	18824f26 	beq	r3,r2,6102362c <___vfprintf_internal_r+0x1914>
61022cf0:	d9414c17 	ldw	r5,1328(sp)
61022cf4:	29400414 	ori	r5,r5,16
61022cf8:	d9414c15 	stw	r5,1328(sp)
61022cfc:	003c8506 	br	61021f14 <___vfprintf_internal_r+0x1fc>
61022d00:	d9814c17 	ldw	r6,1328(sp)
61022d04:	b8c00007 	ldb	r3,0(r23)
61022d08:	31800814 	ori	r6,r6,32
61022d0c:	d9814c15 	stw	r6,1328(sp)
61022d10:	003c8006 	br	61021f14 <___vfprintf_internal_r+0x1fc>
61022d14:	d8814c17 	ldw	r2,1328(sp)
61022d18:	3c000017 	ldw	r16,0(r7)
61022d1c:	00c01e04 	movi	r3,120
61022d20:	10800094 	ori	r2,r2,2
61022d24:	d8814c15 	stw	r2,1328(sp)
61022d28:	39c00104 	addi	r7,r7,4
61022d2c:	015840f4 	movhi	r5,24835
61022d30:	2977a504 	addi	r5,r5,-8556
61022d34:	00800c04 	movi	r2,48
61022d38:	0023883a 	mov	r17,zero
61022d3c:	01000084 	movi	r4,2
61022d40:	d9c14015 	stw	r7,1280(sp)
61022d44:	d8c14d15 	stw	r3,1332(sp)
61022d48:	d9414415 	stw	r5,1296(sp)
61022d4c:	d8800445 	stb	r2,17(sp)
61022d50:	d8c00485 	stb	r3,18(sp)
61022d54:	d8000405 	stb	zero,16(sp)
61022d58:	003e7d06 	br	61022750 <___vfprintf_internal_r+0xa38>
61022d5c:	d8814c17 	ldw	r2,1328(sp)
61022d60:	b8c00007 	ldb	r3,0(r23)
61022d64:	10801014 	ori	r2,r2,64
61022d68:	d8814c15 	stw	r2,1328(sp)
61022d6c:	003c6906 	br	61021f14 <___vfprintf_internal_r+0x1fc>
61022d70:	d9414c17 	ldw	r5,1328(sp)
61022d74:	2880020c 	andi	r2,r5,8
61022d78:	1001df26 	beq	r2,zero,610234f8 <___vfprintf_internal_r+0x17e0>
61022d7c:	39800017 	ldw	r6,0(r7)
61022d80:	38800204 	addi	r2,r7,8
61022d84:	d8814015 	stw	r2,1280(sp)
61022d88:	d9814215 	stw	r6,1288(sp)
61022d8c:	39c00117 	ldw	r7,4(r7)
61022d90:	d9c14315 	stw	r7,1292(sp)
61022d94:	d9014217 	ldw	r4,1288(sp)
61022d98:	d9414317 	ldw	r5,1292(sp)
61022d9c:	10288040 	call	61028804 <__isinfd>
61022da0:	10021726 	beq	r2,zero,61023600 <___vfprintf_internal_r+0x18e8>
61022da4:	d9014217 	ldw	r4,1288(sp)
61022da8:	d9414317 	ldw	r5,1292(sp)
61022dac:	000d883a 	mov	r6,zero
61022db0:	000f883a 	mov	r7,zero
61022db4:	102a9880 	call	6102a988 <__ltdf2>
61022db8:	1002ca16 	blt	r2,zero,610238e4 <___vfprintf_internal_r+0x1bcc>
61022dbc:	d9414d17 	ldw	r5,1332(sp)
61022dc0:	008011c4 	movi	r2,71
61022dc4:	11420a16 	blt	r2,r5,610235f0 <___vfprintf_internal_r+0x18d8>
61022dc8:	019840f4 	movhi	r6,24835
61022dcc:	31b7aa04 	addi	r6,r6,-8536
61022dd0:	d9814115 	stw	r6,1284(sp)
61022dd4:	d9014c17 	ldw	r4,1328(sp)
61022dd8:	00c000c4 	movi	r3,3
61022ddc:	00bfdfc4 	movi	r2,-129
61022de0:	2088703a 	and	r4,r4,r2
61022de4:	180f883a 	mov	r7,r3
61022de8:	d8c14515 	stw	r3,1300(sp)
61022dec:	d9014c15 	stw	r4,1328(sp)
61022df0:	d8014615 	stw	zero,1304(sp)
61022df4:	003e6a06 	br	610227a0 <___vfprintf_internal_r+0xa88>
61022df8:	38800017 	ldw	r2,0(r7)
61022dfc:	00c00044 	movi	r3,1
61022e00:	39c00104 	addi	r7,r7,4
61022e04:	d9c14015 	stw	r7,1280(sp)
61022e08:	d9000f04 	addi	r4,sp,60
61022e0c:	180f883a 	mov	r7,r3
61022e10:	d8c14515 	stw	r3,1300(sp)
61022e14:	d9014115 	stw	r4,1284(sp)
61022e18:	d8800f05 	stb	r2,60(sp)
61022e1c:	d8000405 	stb	zero,16(sp)
61022e20:	003cac06 	br	610220d4 <___vfprintf_internal_r+0x3bc>
61022e24:	015840f4 	movhi	r5,24835
61022e28:	2977b004 	addi	r5,r5,-8512
61022e2c:	d9414415 	stw	r5,1296(sp)
61022e30:	d9814c17 	ldw	r6,1328(sp)
61022e34:	3080080c 	andi	r2,r6,32
61022e38:	1000f926 	beq	r2,zero,61023220 <___vfprintf_internal_r+0x1508>
61022e3c:	3c000017 	ldw	r16,0(r7)
61022e40:	3c400117 	ldw	r17,4(r7)
61022e44:	38800204 	addi	r2,r7,8
61022e48:	d8814015 	stw	r2,1280(sp)
61022e4c:	d9414c17 	ldw	r5,1328(sp)
61022e50:	2880004c 	andi	r2,r5,1
61022e54:	1005003a 	cmpeq	r2,r2,zero
61022e58:	1000b31e 	bne	r2,zero,61023128 <___vfprintf_internal_r+0x1410>
61022e5c:	8444b03a 	or	r2,r16,r17
61022e60:	1000b126 	beq	r2,zero,61023128 <___vfprintf_internal_r+0x1410>
61022e64:	d9814d17 	ldw	r6,1332(sp)
61022e68:	29400094 	ori	r5,r5,2
61022e6c:	00800c04 	movi	r2,48
61022e70:	01000084 	movi	r4,2
61022e74:	d9414c15 	stw	r5,1328(sp)
61022e78:	d8800445 	stb	r2,17(sp)
61022e7c:	d9800485 	stb	r6,18(sp)
61022e80:	d8000405 	stb	zero,16(sp)
61022e84:	003e3206 	br	61022750 <___vfprintf_internal_r+0xa38>
61022e88:	019840f4 	movhi	r6,24835
61022e8c:	31b7a504 	addi	r6,r6,-8556
61022e90:	d9814415 	stw	r6,1296(sp)
61022e94:	003fe606 	br	61022e30 <___vfprintf_internal_r+0x1118>
61022e98:	00800ac4 	movi	r2,43
61022e9c:	d8800405 	stb	r2,16(sp)
61022ea0:	b8c00007 	ldb	r3,0(r23)
61022ea4:	003c1b06 	br	61021f14 <___vfprintf_internal_r+0x1fc>
61022ea8:	d8814c17 	ldw	r2,1328(sp)
61022eac:	b8c00007 	ldb	r3,0(r23)
61022eb0:	10800054 	ori	r2,r2,1
61022eb4:	d8814c15 	stw	r2,1328(sp)
61022eb8:	003c1606 	br	61021f14 <___vfprintf_internal_r+0x1fc>
61022ebc:	d8800407 	ldb	r2,16(sp)
61022ec0:	1000461e 	bne	r2,zero,61022fdc <___vfprintf_internal_r+0x12c4>
61022ec4:	00800804 	movi	r2,32
61022ec8:	d8800405 	stb	r2,16(sp)
61022ecc:	b8c00007 	ldb	r3,0(r23)
61022ed0:	003c1006 	br	61021f14 <___vfprintf_internal_r+0x1fc>
61022ed4:	d9814c17 	ldw	r6,1328(sp)
61022ed8:	b8c00007 	ldb	r3,0(r23)
61022edc:	31800214 	ori	r6,r6,8
61022ee0:	d9814c15 	stw	r6,1328(sp)
61022ee4:	003c0b06 	br	61021f14 <___vfprintf_internal_r+0x1fc>
61022ee8:	0007883a 	mov	r3,zero
61022eec:	01000244 	movi	r4,9
61022ef0:	188002a4 	muli	r2,r3,10
61022ef4:	b8c00007 	ldb	r3,0(r23)
61022ef8:	d9814d17 	ldw	r6,1332(sp)
61022efc:	bdc00044 	addi	r23,r23,1
61022f00:	d8c14d15 	stw	r3,1332(sp)
61022f04:	d9414d17 	ldw	r5,1332(sp)
61022f08:	3085883a 	add	r2,r6,r2
61022f0c:	10fff404 	addi	r3,r2,-48
61022f10:	28bff404 	addi	r2,r5,-48
61022f14:	20bff62e 	bgeu	r4,r2,61022ef0 <___vfprintf_internal_r+0x11d8>
61022f18:	d8c14a15 	stw	r3,1320(sp)
61022f1c:	003bff06 	br	61021f1c <___vfprintf_internal_r+0x204>
61022f20:	d9414c17 	ldw	r5,1328(sp)
61022f24:	b8c00007 	ldb	r3,0(r23)
61022f28:	29402014 	ori	r5,r5,128
61022f2c:	d9414c15 	stw	r5,1328(sp)
61022f30:	003bf806 	br	61021f14 <___vfprintf_internal_r+0x1fc>
61022f34:	b8c00007 	ldb	r3,0(r23)
61022f38:	00800a84 	movi	r2,42
61022f3c:	bdc00044 	addi	r23,r23,1
61022f40:	18831526 	beq	r3,r2,61023b98 <___vfprintf_internal_r+0x1e80>
61022f44:	d8c14d15 	stw	r3,1332(sp)
61022f48:	18bff404 	addi	r2,r3,-48
61022f4c:	00c00244 	movi	r3,9
61022f50:	18827836 	bltu	r3,r2,61023934 <___vfprintf_internal_r+0x1c1c>
61022f54:	000d883a 	mov	r6,zero
61022f58:	308002a4 	muli	r2,r6,10
61022f5c:	b9800007 	ldb	r6,0(r23)
61022f60:	d9414d17 	ldw	r5,1332(sp)
61022f64:	bdc00044 	addi	r23,r23,1
61022f68:	d9814d15 	stw	r6,1332(sp)
61022f6c:	d9014d17 	ldw	r4,1332(sp)
61022f70:	1145883a 	add	r2,r2,r5
61022f74:	11bff404 	addi	r6,r2,-48
61022f78:	20bff404 	addi	r2,r4,-48
61022f7c:	18bff62e 	bgeu	r3,r2,61022f58 <___vfprintf_internal_r+0x1240>
61022f80:	3027883a 	mov	r19,r6
61022f84:	303be50e 	bge	r6,zero,61021f1c <___vfprintf_internal_r+0x204>
61022f88:	04ffffc4 	movi	r19,-1
61022f8c:	003be306 	br	61021f1c <___vfprintf_internal_r+0x204>
61022f90:	d8000405 	stb	zero,16(sp)
61022f94:	39800017 	ldw	r6,0(r7)
61022f98:	39c00104 	addi	r7,r7,4
61022f9c:	d9c14015 	stw	r7,1280(sp)
61022fa0:	d9814115 	stw	r6,1284(sp)
61022fa4:	3001c926 	beq	r6,zero,610236cc <___vfprintf_internal_r+0x19b4>
61022fa8:	98000e16 	blt	r19,zero,61022fe4 <___vfprintf_internal_r+0x12cc>
61022fac:	d9014117 	ldw	r4,1284(sp)
61022fb0:	000b883a 	mov	r5,zero
61022fb4:	980d883a 	mov	r6,r19
61022fb8:	1026dd40 	call	61026dd4 <memchr>
61022fbc:	10025926 	beq	r2,zero,61023924 <___vfprintf_internal_r+0x1c0c>
61022fc0:	d8c14117 	ldw	r3,1284(sp)
61022fc4:	10cfc83a 	sub	r7,r2,r3
61022fc8:	99c19e16 	blt	r19,r7,61023644 <___vfprintf_internal_r+0x192c>
61022fcc:	d9c14515 	stw	r7,1300(sp)
61022fd0:	38000916 	blt	r7,zero,61022ff8 <___vfprintf_internal_r+0x12e0>
61022fd4:	d8014615 	stw	zero,1304(sp)
61022fd8:	003df106 	br	610227a0 <___vfprintf_internal_r+0xa88>
61022fdc:	b8c00007 	ldb	r3,0(r23)
61022fe0:	003bcc06 	br	61021f14 <___vfprintf_internal_r+0x1fc>
61022fe4:	d9014117 	ldw	r4,1284(sp)
61022fe8:	1021c4c0 	call	61021c4c <strlen>
61022fec:	d8814515 	stw	r2,1300(sp)
61022ff0:	100f883a 	mov	r7,r2
61022ff4:	103ff70e 	bge	r2,zero,61022fd4 <___vfprintf_internal_r+0x12bc>
61022ff8:	d8014515 	stw	zero,1300(sp)
61022ffc:	d8014615 	stw	zero,1304(sp)
61023000:	003de706 	br	610227a0 <___vfprintf_internal_r+0xa88>
61023004:	20c03fcc 	andi	r3,r4,255
61023008:	00800044 	movi	r2,1
6102300c:	18802d26 	beq	r3,r2,610230c4 <___vfprintf_internal_r+0x13ac>
61023010:	18800e36 	bltu	r3,r2,6102304c <___vfprintf_internal_r+0x1334>
61023014:	00800084 	movi	r2,2
61023018:	1880fa26 	beq	r3,r2,61023404 <___vfprintf_internal_r+0x16ec>
6102301c:	011840f4 	movhi	r4,24835
61023020:	2137b504 	addi	r4,r4,-8492
61023024:	1021c4c0 	call	61021c4c <strlen>
61023028:	100f883a 	mov	r7,r2
6102302c:	dcc14515 	stw	r19,1300(sp)
61023030:	9880010e 	bge	r19,r2,61023038 <___vfprintf_internal_r+0x1320>
61023034:	d8814515 	stw	r2,1300(sp)
61023038:	009840f4 	movhi	r2,24835
6102303c:	10b7b504 	addi	r2,r2,-8492
61023040:	dcc14615 	stw	r19,1304(sp)
61023044:	d8814115 	stw	r2,1284(sp)
61023048:	003dd506 	br	610227a0 <___vfprintf_internal_r+0xa88>
6102304c:	d9401904 	addi	r5,sp,100
61023050:	dd000f04 	addi	r20,sp,60
61023054:	d9414115 	stw	r5,1284(sp)
61023058:	880a977a 	slli	r5,r17,29
6102305c:	d9814117 	ldw	r6,1284(sp)
61023060:	8004d0fa 	srli	r2,r16,3
61023064:	8806d0fa 	srli	r3,r17,3
61023068:	810001cc 	andi	r4,r16,7
6102306c:	2884b03a 	or	r2,r5,r2
61023070:	31bfffc4 	addi	r6,r6,-1
61023074:	21000c04 	addi	r4,r4,48
61023078:	d9814115 	stw	r6,1284(sp)
6102307c:	10cab03a 	or	r5,r2,r3
61023080:	31000005 	stb	r4,0(r6)
61023084:	1021883a 	mov	r16,r2
61023088:	1823883a 	mov	r17,r3
6102308c:	283ff21e 	bne	r5,zero,61023058 <___vfprintf_internal_r+0x1340>
61023090:	d8c14c17 	ldw	r3,1328(sp)
61023094:	1880004c 	andi	r2,r3,1
61023098:	1005003a 	cmpeq	r2,r2,zero
6102309c:	103db91e 	bne	r2,zero,61022784 <___vfprintf_internal_r+0xa6c>
610230a0:	20803fcc 	andi	r2,r4,255
610230a4:	1080201c 	xori	r2,r2,128
610230a8:	10bfe004 	addi	r2,r2,-128
610230ac:	00c00c04 	movi	r3,48
610230b0:	10fdb426 	beq	r2,r3,61022784 <___vfprintf_internal_r+0xa6c>
610230b4:	31bfffc4 	addi	r6,r6,-1
610230b8:	d9814115 	stw	r6,1284(sp)
610230bc:	30c00005 	stb	r3,0(r6)
610230c0:	003db006 	br	61022784 <___vfprintf_internal_r+0xa6c>
610230c4:	88800068 	cmpgeui	r2,r17,1
610230c8:	10002c1e 	bne	r2,zero,6102317c <___vfprintf_internal_r+0x1464>
610230cc:	8800021e 	bne	r17,zero,610230d8 <___vfprintf_internal_r+0x13c0>
610230d0:	00800244 	movi	r2,9
610230d4:	14002936 	bltu	r2,r16,6102317c <___vfprintf_internal_r+0x1464>
610230d8:	d90018c4 	addi	r4,sp,99
610230dc:	dd000f04 	addi	r20,sp,60
610230e0:	d9014115 	stw	r4,1284(sp)
610230e4:	d9014117 	ldw	r4,1284(sp)
610230e8:	80800c04 	addi	r2,r16,48
610230ec:	20800005 	stb	r2,0(r4)
610230f0:	003da406 	br	61022784 <___vfprintf_internal_r+0xa6c>
610230f4:	dc400d17 	ldw	r17,52(sp)
610230f8:	071840f4 	movhi	fp,24835
610230fc:	e737bc84 	addi	fp,fp,-8462
61023100:	9425883a 	add	r18,r18,r16
61023104:	8c400044 	addi	r17,r17,1
61023108:	008001c4 	movi	r2,7
6102310c:	1f000015 	stw	fp,0(r3)
61023110:	1c000115 	stw	r16,4(r3)
61023114:	dc800e15 	stw	r18,56(sp)
61023118:	dc400d15 	stw	r17,52(sp)
6102311c:	147de216 	blt	r2,r17,610228a8 <___vfprintf_internal_r+0xb90>
61023120:	18c00204 	addi	r3,r3,8
61023124:	003c7a06 	br	61022310 <___vfprintf_internal_r+0x5f8>
61023128:	01000084 	movi	r4,2
6102312c:	d8000405 	stb	zero,16(sp)
61023130:	003d8706 	br	61022750 <___vfprintf_internal_r+0xa38>
61023134:	d9814c17 	ldw	r6,1328(sp)
61023138:	30c4703a 	and	r2,r6,r3
6102313c:	1005003a 	cmpeq	r2,r2,zero
61023140:	103cb926 	beq	r2,zero,61022428 <___vfprintf_internal_r+0x710>
61023144:	d9014117 	ldw	r4,1284(sp)
61023148:	94800044 	addi	r18,r18,1
6102314c:	8c400044 	addi	r17,r17,1
61023150:	008001c4 	movi	r2,7
61023154:	a9000015 	stw	r4,0(r21)
61023158:	a8c00115 	stw	r3,4(r21)
6102315c:	dc800e15 	stw	r18,56(sp)
61023160:	dc400d15 	stw	r17,52(sp)
61023164:	147e6616 	blt	r2,r17,61022b00 <___vfprintf_internal_r+0xde8>
61023168:	acc00204 	addi	r19,r21,8
6102316c:	003cd706 	br	610224cc <___vfprintf_internal_r+0x7b4>
61023170:	071840f4 	movhi	fp,24835
61023174:	e737bc84 	addi	fp,fp,-8462
61023178:	003c4f06 	br	610222b8 <___vfprintf_internal_r+0x5a0>
6102317c:	dd000f04 	addi	r20,sp,60
61023180:	dc801904 	addi	r18,sp,100
61023184:	8009883a 	mov	r4,r16
61023188:	880b883a 	mov	r5,r17
6102318c:	01800284 	movi	r6,10
61023190:	000f883a 	mov	r7,zero
61023194:	10296a80 	call	610296a8 <__umoddi3>
61023198:	12000c04 	addi	r8,r2,48
6102319c:	94bfffc4 	addi	r18,r18,-1
610231a0:	8009883a 	mov	r4,r16
610231a4:	880b883a 	mov	r5,r17
610231a8:	01800284 	movi	r6,10
610231ac:	000f883a 	mov	r7,zero
610231b0:	92000005 	stb	r8,0(r18)
610231b4:	10290cc0 	call	610290cc <__udivdi3>
610231b8:	1009883a 	mov	r4,r2
610231bc:	1021883a 	mov	r16,r2
610231c0:	18800068 	cmpgeui	r2,r3,1
610231c4:	1823883a 	mov	r17,r3
610231c8:	103fee1e 	bne	r2,zero,61023184 <___vfprintf_internal_r+0x146c>
610231cc:	1800021e 	bne	r3,zero,610231d8 <___vfprintf_internal_r+0x14c0>
610231d0:	00800244 	movi	r2,9
610231d4:	113feb36 	bltu	r2,r4,61023184 <___vfprintf_internal_r+0x146c>
610231d8:	94bfffc4 	addi	r18,r18,-1
610231dc:	dc814115 	stw	r18,1284(sp)
610231e0:	003fc006 	br	610230e4 <___vfprintf_internal_r+0x13cc>
610231e4:	d9014c17 	ldw	r4,1328(sp)
610231e8:	2080004c 	andi	r2,r4,1
610231ec:	10009a1e 	bne	r2,zero,61023458 <___vfprintf_internal_r+0x1740>
610231f0:	d9401904 	addi	r5,sp,100
610231f4:	dd000f04 	addi	r20,sp,60
610231f8:	d9414115 	stw	r5,1284(sp)
610231fc:	003d6106 	br	61022784 <___vfprintf_internal_r+0xa6c>
61023200:	d9014f17 	ldw	r4,1340(sp)
61023204:	b00b883a 	mov	r5,r22
61023208:	d9800c04 	addi	r6,sp,48
6102320c:	1021cc00 	call	61021cc0 <__sprint_r>
61023210:	103c791e 	bne	r2,zero,610223f8 <___vfprintf_internal_r+0x6e0>
61023214:	dc800e17 	ldw	r18,56(sp)
61023218:	d8c01904 	addi	r3,sp,100
6102321c:	003cff06 	br	6102261c <___vfprintf_internal_r+0x904>
61023220:	d8c14c17 	ldw	r3,1328(sp)
61023224:	1880040c 	andi	r2,r3,16
61023228:	1000711e 	bne	r2,zero,610233f0 <___vfprintf_internal_r+0x16d8>
6102322c:	d9014c17 	ldw	r4,1328(sp)
61023230:	2080100c 	andi	r2,r4,64
61023234:	10006e26 	beq	r2,zero,610233f0 <___vfprintf_internal_r+0x16d8>
61023238:	3c00000b 	ldhu	r16,0(r7)
6102323c:	0023883a 	mov	r17,zero
61023240:	39c00104 	addi	r7,r7,4
61023244:	d9c14015 	stw	r7,1280(sp)
61023248:	003f0006 	br	61022e4c <___vfprintf_internal_r+0x1134>
6102324c:	dc400d17 	ldw	r17,52(sp)
61023250:	071840f4 	movhi	fp,24835
61023254:	e737bc84 	addi	fp,fp,-8462
61023258:	9425883a 	add	r18,r18,r16
6102325c:	8c400044 	addi	r17,r17,1
61023260:	008001c4 	movi	r2,7
61023264:	1f000015 	stw	fp,0(r3)
61023268:	1c000115 	stw	r16,4(r3)
6102326c:	dc800e15 	stw	r18,56(sp)
61023270:	dc400d15 	stw	r17,52(sp)
61023274:	147d7616 	blt	r2,r17,61022850 <___vfprintf_internal_r+0xb38>
61023278:	18c00204 	addi	r3,r3,8
6102327c:	003d7b06 	br	6102286c <___vfprintf_internal_r+0xb54>
61023280:	dc800e17 	ldw	r18,56(sp)
61023284:	dc400d17 	ldw	r17,52(sp)
61023288:	071840f4 	movhi	fp,24835
6102328c:	e737c084 	addi	fp,fp,-8446
61023290:	003bc006 	br	61022194 <___vfprintf_internal_r+0x47c>
61023294:	d9014f17 	ldw	r4,1340(sp)
61023298:	b00b883a 	mov	r5,r22
6102329c:	d9800c04 	addi	r6,sp,48
610232a0:	1021cc00 	call	61021cc0 <__sprint_r>
610232a4:	103c541e 	bne	r2,zero,610223f8 <___vfprintf_internal_r+0x6e0>
610232a8:	dc800e17 	ldw	r18,56(sp)
610232ac:	d8c01904 	addi	r3,sp,100
610232b0:	003ce906 	br	61022658 <___vfprintf_internal_r+0x940>
610232b4:	3c000017 	ldw	r16,0(r7)
610232b8:	0009883a 	mov	r4,zero
610232bc:	39c00104 	addi	r7,r7,4
610232c0:	0023883a 	mov	r17,zero
610232c4:	d9c14015 	stw	r7,1280(sp)
610232c8:	d8000405 	stb	zero,16(sp)
610232cc:	003d2006 	br	61022750 <___vfprintf_internal_r+0xa38>
610232d0:	38800017 	ldw	r2,0(r7)
610232d4:	39c00104 	addi	r7,r7,4
610232d8:	d9c14015 	stw	r7,1280(sp)
610232dc:	1023d7fa 	srai	r17,r2,31
610232e0:	1021883a 	mov	r16,r2
610232e4:	003d1806 	br	61022748 <___vfprintf_internal_r+0xa30>
610232e8:	3c000017 	ldw	r16,0(r7)
610232ec:	01000044 	movi	r4,1
610232f0:	39c00104 	addi	r7,r7,4
610232f4:	0023883a 	mov	r17,zero
610232f8:	d9c14015 	stw	r7,1280(sp)
610232fc:	d8000405 	stb	zero,16(sp)
61023300:	003d1306 	br	61022750 <___vfprintf_internal_r+0xa38>
61023304:	009840f4 	movhi	r2,24835
61023308:	10b7bc04 	addi	r2,r2,-8464
6102330c:	94800044 	addi	r18,r18,1
61023310:	8c400044 	addi	r17,r17,1
61023314:	a8800015 	stw	r2,0(r21)
61023318:	00c00044 	movi	r3,1
6102331c:	008001c4 	movi	r2,7
61023320:	a8c00115 	stw	r3,4(r21)
61023324:	dc800e15 	stw	r18,56(sp)
61023328:	dc400d15 	stw	r17,52(sp)
6102332c:	1440ca16 	blt	r2,r17,61023658 <___vfprintf_internal_r+0x1940>
61023330:	a8c00204 	addi	r3,r21,8
61023334:	2000061e 	bne	r4,zero,61023350 <___vfprintf_internal_r+0x1638>
61023338:	d9414717 	ldw	r5,1308(sp)
6102333c:	2800041e 	bne	r5,zero,61023350 <___vfprintf_internal_r+0x1638>
61023340:	d9814c17 	ldw	r6,1328(sp)
61023344:	3080004c 	andi	r2,r6,1
61023348:	1005003a 	cmpeq	r2,r2,zero
6102334c:	103bf01e 	bne	r2,zero,61022310 <___vfprintf_internal_r+0x5f8>
61023350:	00800044 	movi	r2,1
61023354:	dc400d17 	ldw	r17,52(sp)
61023358:	18800115 	stw	r2,4(r3)
6102335c:	d8814917 	ldw	r2,1316(sp)
61023360:	94800044 	addi	r18,r18,1
61023364:	8c400044 	addi	r17,r17,1
61023368:	18800015 	stw	r2,0(r3)
6102336c:	008001c4 	movi	r2,7
61023370:	dc800e15 	stw	r18,56(sp)
61023374:	dc400d15 	stw	r17,52(sp)
61023378:	1440ca16 	blt	r2,r17,610236a4 <___vfprintf_internal_r+0x198c>
6102337c:	18c00204 	addi	r3,r3,8
61023380:	0121c83a 	sub	r16,zero,r4
61023384:	0400500e 	bge	zero,r16,610234c8 <___vfprintf_internal_r+0x17b0>
61023388:	00800404 	movi	r2,16
6102338c:	1400800e 	bge	r2,r16,61023590 <___vfprintf_internal_r+0x1878>
61023390:	1027883a 	mov	r19,r2
61023394:	071840f4 	movhi	fp,24835
61023398:	e737bc84 	addi	fp,fp,-8462
6102339c:	050001c4 	movi	r20,7
610233a0:	00000306 	br	610233b0 <___vfprintf_internal_r+0x1698>
610233a4:	18c00204 	addi	r3,r3,8
610233a8:	843ffc04 	addi	r16,r16,-16
610233ac:	9c007a0e 	bge	r19,r16,61023598 <___vfprintf_internal_r+0x1880>
610233b0:	94800404 	addi	r18,r18,16
610233b4:	8c400044 	addi	r17,r17,1
610233b8:	1f000015 	stw	fp,0(r3)
610233bc:	1cc00115 	stw	r19,4(r3)
610233c0:	dc800e15 	stw	r18,56(sp)
610233c4:	dc400d15 	stw	r17,52(sp)
610233c8:	a47ff60e 	bge	r20,r17,610233a4 <___vfprintf_internal_r+0x168c>
610233cc:	d9014f17 	ldw	r4,1340(sp)
610233d0:	b00b883a 	mov	r5,r22
610233d4:	d9800c04 	addi	r6,sp,48
610233d8:	1021cc00 	call	61021cc0 <__sprint_r>
610233dc:	103c061e 	bne	r2,zero,610223f8 <___vfprintf_internal_r+0x6e0>
610233e0:	dc800e17 	ldw	r18,56(sp)
610233e4:	dc400d17 	ldw	r17,52(sp)
610233e8:	d8c01904 	addi	r3,sp,100
610233ec:	003fee06 	br	610233a8 <___vfprintf_internal_r+0x1690>
610233f0:	3c000017 	ldw	r16,0(r7)
610233f4:	0023883a 	mov	r17,zero
610233f8:	39c00104 	addi	r7,r7,4
610233fc:	d9c14015 	stw	r7,1280(sp)
61023400:	003e9206 	br	61022e4c <___vfprintf_internal_r+0x1134>
61023404:	d9401904 	addi	r5,sp,100
61023408:	dd000f04 	addi	r20,sp,60
6102340c:	d9414115 	stw	r5,1284(sp)
61023410:	d9814417 	ldw	r6,1296(sp)
61023414:	880a973a 	slli	r5,r17,28
61023418:	8004d13a 	srli	r2,r16,4
6102341c:	810003cc 	andi	r4,r16,15
61023420:	3109883a 	add	r4,r6,r4
61023424:	2884b03a 	or	r2,r5,r2
61023428:	21400003 	ldbu	r5,0(r4)
6102342c:	d9014117 	ldw	r4,1284(sp)
61023430:	8806d13a 	srli	r3,r17,4
61023434:	1021883a 	mov	r16,r2
61023438:	213fffc4 	addi	r4,r4,-1
6102343c:	d9014115 	stw	r4,1284(sp)
61023440:	d9814117 	ldw	r6,1284(sp)
61023444:	10c8b03a 	or	r4,r2,r3
61023448:	1823883a 	mov	r17,r3
6102344c:	31400005 	stb	r5,0(r6)
61023450:	203fef1e 	bne	r4,zero,61023410 <___vfprintf_internal_r+0x16f8>
61023454:	003ccb06 	br	61022784 <___vfprintf_internal_r+0xa6c>
61023458:	00800c04 	movi	r2,48
6102345c:	d98018c4 	addi	r6,sp,99
61023460:	dd000f04 	addi	r20,sp,60
61023464:	d88018c5 	stb	r2,99(sp)
61023468:	d9814115 	stw	r6,1284(sp)
6102346c:	003cc506 	br	61022784 <___vfprintf_internal_r+0xa6c>
61023470:	dc400d17 	ldw	r17,52(sp)
61023474:	071840f4 	movhi	fp,24835
61023478:	e737c084 	addi	fp,fp,-8446
6102347c:	003bc706 	br	6102239c <___vfprintf_internal_r+0x684>
61023480:	d9414c17 	ldw	r5,1328(sp)
61023484:	2880040c 	andi	r2,r5,16
61023488:	10007c26 	beq	r2,zero,6102367c <___vfprintf_internal_r+0x1964>
6102348c:	38800017 	ldw	r2,0(r7)
61023490:	39c00104 	addi	r7,r7,4
61023494:	d9c14015 	stw	r7,1280(sp)
61023498:	d9814b17 	ldw	r6,1324(sp)
6102349c:	d9c14017 	ldw	r7,1280(sp)
610234a0:	11800015 	stw	r6,0(r2)
610234a4:	003a7806 	br	61021e88 <___vfprintf_internal_r+0x170>
610234a8:	d9014f17 	ldw	r4,1340(sp)
610234ac:	b00b883a 	mov	r5,r22
610234b0:	d9800c04 	addi	r6,sp,48
610234b4:	1021cc00 	call	61021cc0 <__sprint_r>
610234b8:	103bcf1e 	bne	r2,zero,610223f8 <___vfprintf_internal_r+0x6e0>
610234bc:	dc800e17 	ldw	r18,56(sp)
610234c0:	dc400d17 	ldw	r17,52(sp)
610234c4:	d8c01904 	addi	r3,sp,100
610234c8:	d9014717 	ldw	r4,1308(sp)
610234cc:	d9414117 	ldw	r5,1284(sp)
610234d0:	8c400044 	addi	r17,r17,1
610234d4:	9125883a 	add	r18,r18,r4
610234d8:	008001c4 	movi	r2,7
610234dc:	19400015 	stw	r5,0(r3)
610234e0:	19000115 	stw	r4,4(r3)
610234e4:	dc800e15 	stw	r18,56(sp)
610234e8:	dc400d15 	stw	r17,52(sp)
610234ec:	147cee16 	blt	r2,r17,610228a8 <___vfprintf_internal_r+0xb90>
610234f0:	18c00204 	addi	r3,r3,8
610234f4:	003b8606 	br	61022310 <___vfprintf_internal_r+0x5f8>
610234f8:	38c00017 	ldw	r3,0(r7)
610234fc:	39000204 	addi	r4,r7,8
61023500:	d9014015 	stw	r4,1280(sp)
61023504:	d8c14215 	stw	r3,1288(sp)
61023508:	39c00117 	ldw	r7,4(r7)
6102350c:	d9c14315 	stw	r7,1292(sp)
61023510:	003e2006 	br	61022d94 <___vfprintf_internal_r+0x107c>
61023514:	0005883a 	mov	r2,zero
61023518:	1409c83a 	sub	r4,r2,r16
6102351c:	1105803a 	cmpltu	r2,r2,r4
61023520:	044bc83a 	sub	r5,zero,r17
61023524:	2885c83a 	sub	r2,r5,r2
61023528:	2021883a 	mov	r16,r4
6102352c:	1023883a 	mov	r17,r2
61023530:	01000044 	movi	r4,1
61023534:	00800b44 	movi	r2,45
61023538:	d8800405 	stb	r2,16(sp)
6102353c:	003c8406 	br	61022750 <___vfprintf_internal_r+0xa38>
61023540:	d9014f17 	ldw	r4,1340(sp)
61023544:	b00b883a 	mov	r5,r22
61023548:	d9800c04 	addi	r6,sp,48
6102354c:	1021cc00 	call	61021cc0 <__sprint_r>
61023550:	103ba91e 	bne	r2,zero,610223f8 <___vfprintf_internal_r+0x6e0>
61023554:	dc800e17 	ldw	r18,56(sp)
61023558:	dc400d17 	ldw	r17,52(sp)
6102355c:	d9000517 	ldw	r4,20(sp)
61023560:	d9401904 	addi	r5,sp,100
61023564:	003da706 	br	61022c04 <___vfprintf_internal_r+0xeec>
61023568:	d9014f17 	ldw	r4,1340(sp)
6102356c:	b00b883a 	mov	r5,r22
61023570:	d9800c04 	addi	r6,sp,48
61023574:	1021cc00 	call	61021cc0 <__sprint_r>
61023578:	103b9f1e 	bne	r2,zero,610223f8 <___vfprintf_internal_r+0x6e0>
6102357c:	dc800e17 	ldw	r18,56(sp)
61023580:	dc400d17 	ldw	r17,52(sp)
61023584:	d9000517 	ldw	r4,20(sp)
61023588:	d8c01904 	addi	r3,sp,100
6102358c:	003d9106 	br	61022bd4 <___vfprintf_internal_r+0xebc>
61023590:	071840f4 	movhi	fp,24835
61023594:	e737bc84 	addi	fp,fp,-8462
61023598:	9425883a 	add	r18,r18,r16
6102359c:	8c400044 	addi	r17,r17,1
610235a0:	008001c4 	movi	r2,7
610235a4:	1f000015 	stw	fp,0(r3)
610235a8:	1c000115 	stw	r16,4(r3)
610235ac:	dc800e15 	stw	r18,56(sp)
610235b0:	dc400d15 	stw	r17,52(sp)
610235b4:	147fbc16 	blt	r2,r17,610234a8 <___vfprintf_internal_r+0x1790>
610235b8:	18c00204 	addi	r3,r3,8
610235bc:	003fc206 	br	610234c8 <___vfprintf_internal_r+0x17b0>
610235c0:	d9014f17 	ldw	r4,1340(sp)
610235c4:	b00b883a 	mov	r5,r22
610235c8:	d9800c04 	addi	r6,sp,48
610235cc:	1021cc00 	call	61021cc0 <__sprint_r>
610235d0:	103b891e 	bne	r2,zero,610223f8 <___vfprintf_internal_r+0x6e0>
610235d4:	dc800e17 	ldw	r18,56(sp)
610235d8:	d9000517 	ldw	r4,20(sp)
610235dc:	d8c01904 	addi	r3,sp,100
610235e0:	003d0206 	br	610229ec <___vfprintf_internal_r+0xcd4>
610235e4:	071840f4 	movhi	fp,24835
610235e8:	e737bc84 	addi	fp,fp,-8462
610235ec:	003be406 	br	61022580 <___vfprintf_internal_r+0x868>
610235f0:	009840f4 	movhi	r2,24835
610235f4:	10b7ab04 	addi	r2,r2,-8532
610235f8:	d8814115 	stw	r2,1284(sp)
610235fc:	003df506 	br	61022dd4 <___vfprintf_internal_r+0x10bc>
61023600:	d9014217 	ldw	r4,1288(sp)
61023604:	d9414317 	ldw	r5,1292(sp)
61023608:	10288440 	call	61028844 <__isnand>
6102360c:	10003926 	beq	r2,zero,610236f4 <___vfprintf_internal_r+0x19dc>
61023610:	d9414d17 	ldw	r5,1332(sp)
61023614:	008011c4 	movi	r2,71
61023618:	1140ce16 	blt	r2,r5,61023954 <___vfprintf_internal_r+0x1c3c>
6102361c:	019840f4 	movhi	r6,24835
61023620:	31b7ac04 	addi	r6,r6,-8528
61023624:	d9814115 	stw	r6,1284(sp)
61023628:	003dea06 	br	61022dd4 <___vfprintf_internal_r+0x10bc>
6102362c:	d9014c17 	ldw	r4,1328(sp)
61023630:	bdc00044 	addi	r23,r23,1
61023634:	b8c00007 	ldb	r3,0(r23)
61023638:	21000814 	ori	r4,r4,32
6102363c:	d9014c15 	stw	r4,1328(sp)
61023640:	003a3406 	br	61021f14 <___vfprintf_internal_r+0x1fc>
61023644:	dcc14515 	stw	r19,1300(sp)
61023648:	98011016 	blt	r19,zero,61023a8c <___vfprintf_internal_r+0x1d74>
6102364c:	980f883a 	mov	r7,r19
61023650:	d8014615 	stw	zero,1304(sp)
61023654:	003c5206 	br	610227a0 <___vfprintf_internal_r+0xa88>
61023658:	d9014f17 	ldw	r4,1340(sp)
6102365c:	b00b883a 	mov	r5,r22
61023660:	d9800c04 	addi	r6,sp,48
61023664:	1021cc00 	call	61021cc0 <__sprint_r>
61023668:	103b631e 	bne	r2,zero,610223f8 <___vfprintf_internal_r+0x6e0>
6102366c:	dc800e17 	ldw	r18,56(sp)
61023670:	d9000517 	ldw	r4,20(sp)
61023674:	d8c01904 	addi	r3,sp,100
61023678:	003f2e06 	br	61023334 <___vfprintf_internal_r+0x161c>
6102367c:	d8c14c17 	ldw	r3,1328(sp)
61023680:	1880100c 	andi	r2,r3,64
61023684:	1000a026 	beq	r2,zero,61023908 <___vfprintf_internal_r+0x1bf0>
61023688:	38800017 	ldw	r2,0(r7)
6102368c:	39c00104 	addi	r7,r7,4
61023690:	d9c14015 	stw	r7,1280(sp)
61023694:	d9014b17 	ldw	r4,1324(sp)
61023698:	d9c14017 	ldw	r7,1280(sp)
6102369c:	1100000d 	sth	r4,0(r2)
610236a0:	0039f906 	br	61021e88 <___vfprintf_internal_r+0x170>
610236a4:	d9014f17 	ldw	r4,1340(sp)
610236a8:	b00b883a 	mov	r5,r22
610236ac:	d9800c04 	addi	r6,sp,48
610236b0:	1021cc00 	call	61021cc0 <__sprint_r>
610236b4:	103b501e 	bne	r2,zero,610223f8 <___vfprintf_internal_r+0x6e0>
610236b8:	dc800e17 	ldw	r18,56(sp)
610236bc:	dc400d17 	ldw	r17,52(sp)
610236c0:	d9000517 	ldw	r4,20(sp)
610236c4:	d8c01904 	addi	r3,sp,100
610236c8:	003f2d06 	br	61023380 <___vfprintf_internal_r+0x1668>
610236cc:	00800184 	movi	r2,6
610236d0:	14c09a36 	bltu	r2,r19,6102393c <___vfprintf_internal_r+0x1c24>
610236d4:	dcc14515 	stw	r19,1300(sp)
610236d8:	9800010e 	bge	r19,zero,610236e0 <___vfprintf_internal_r+0x19c8>
610236dc:	d8014515 	stw	zero,1300(sp)
610236e0:	009840f4 	movhi	r2,24835
610236e4:	10b7ae04 	addi	r2,r2,-8520
610236e8:	980f883a 	mov	r7,r19
610236ec:	d8814115 	stw	r2,1284(sp)
610236f0:	003a7806 	br	610220d4 <___vfprintf_internal_r+0x3bc>
610236f4:	00bfffc4 	movi	r2,-1
610236f8:	9880e226 	beq	r19,r2,61023a84 <___vfprintf_internal_r+0x1d6c>
610236fc:	d9414d17 	ldw	r5,1332(sp)
61023700:	008019c4 	movi	r2,103
61023704:	2880dc26 	beq	r5,r2,61023a78 <___vfprintf_internal_r+0x1d60>
61023708:	008011c4 	movi	r2,71
6102370c:	2880da26 	beq	r5,r2,61023a78 <___vfprintf_internal_r+0x1d60>
61023710:	d9414c17 	ldw	r5,1328(sp)
61023714:	d9014317 	ldw	r4,1292(sp)
61023718:	d9814217 	ldw	r6,1288(sp)
6102371c:	29404014 	ori	r5,r5,256
61023720:	d9414c15 	stw	r5,1328(sp)
61023724:	2000cc16 	blt	r4,zero,61023a58 <___vfprintf_internal_r+0x1d40>
61023728:	3021883a 	mov	r16,r6
6102372c:	2023883a 	mov	r17,r4
61023730:	0039883a 	mov	fp,zero
61023734:	d9414d17 	ldw	r5,1332(sp)
61023738:	00801984 	movi	r2,102
6102373c:	2880b726 	beq	r5,r2,61023a1c <___vfprintf_internal_r+0x1d04>
61023740:	00801184 	movi	r2,70
61023744:	2880b526 	beq	r5,r2,61023a1c <___vfprintf_internal_r+0x1d04>
61023748:	00801944 	movi	r2,101
6102374c:	2880c826 	beq	r5,r2,61023a70 <___vfprintf_internal_r+0x1d58>
61023750:	00801144 	movi	r2,69
61023754:	2880c626 	beq	r5,r2,61023a70 <___vfprintf_internal_r+0x1d58>
61023758:	9829883a 	mov	r20,r19
6102375c:	d9014f17 	ldw	r4,1340(sp)
61023760:	d8800504 	addi	r2,sp,20
61023764:	880d883a 	mov	r6,r17
61023768:	d8800115 	stw	r2,4(sp)
6102376c:	d8c00604 	addi	r3,sp,24
61023770:	d8800704 	addi	r2,sp,28
61023774:	800b883a 	mov	r5,r16
61023778:	01c00084 	movi	r7,2
6102377c:	d8c00215 	stw	r3,8(sp)
61023780:	d8800315 	stw	r2,12(sp)
61023784:	dd000015 	stw	r20,0(sp)
61023788:	1023f3c0 	call	61023f3c <_dtoa_r>
6102378c:	d9814d17 	ldw	r6,1332(sp)
61023790:	d8814115 	stw	r2,1284(sp)
61023794:	008019c4 	movi	r2,103
61023798:	30809526 	beq	r6,r2,610239f0 <___vfprintf_internal_r+0x1cd8>
6102379c:	d8c14d17 	ldw	r3,1332(sp)
610237a0:	008011c4 	movi	r2,71
610237a4:	18809226 	beq	r3,r2,610239f0 <___vfprintf_internal_r+0x1cd8>
610237a8:	d9414117 	ldw	r5,1284(sp)
610237ac:	d9814d17 	ldw	r6,1332(sp)
610237b0:	00801984 	movi	r2,102
610237b4:	2d25883a 	add	r18,r5,r20
610237b8:	30808626 	beq	r6,r2,610239d4 <___vfprintf_internal_r+0x1cbc>
610237bc:	00801184 	movi	r2,70
610237c0:	30808426 	beq	r6,r2,610239d4 <___vfprintf_internal_r+0x1cbc>
610237c4:	000d883a 	mov	r6,zero
610237c8:	000f883a 	mov	r7,zero
610237cc:	880b883a 	mov	r5,r17
610237d0:	8009883a 	mov	r4,r16
610237d4:	102a7680 	call	6102a768 <__eqdf2>
610237d8:	1000751e 	bne	r2,zero,610239b0 <___vfprintf_internal_r+0x1c98>
610237dc:	9005883a 	mov	r2,r18
610237e0:	dc800715 	stw	r18,28(sp)
610237e4:	d9014117 	ldw	r4,1284(sp)
610237e8:	d9414d17 	ldw	r5,1332(sp)
610237ec:	00c019c4 	movi	r3,103
610237f0:	1125c83a 	sub	r18,r2,r4
610237f4:	28c06826 	beq	r5,r3,61023998 <___vfprintf_internal_r+0x1c80>
610237f8:	008011c4 	movi	r2,71
610237fc:	28806626 	beq	r5,r2,61023998 <___vfprintf_internal_r+0x1c80>
61023800:	d9000517 	ldw	r4,20(sp)
61023804:	d8c14d17 	ldw	r3,1332(sp)
61023808:	00801944 	movi	r2,101
6102380c:	10c05516 	blt	r2,r3,61023964 <___vfprintf_internal_r+0x1c4c>
61023810:	213fffc4 	addi	r4,r4,-1
61023814:	d9000515 	stw	r4,20(sp)
61023818:	d8c00805 	stb	r3,32(sp)
6102381c:	2021883a 	mov	r16,r4
61023820:	2000c116 	blt	r4,zero,61023b28 <___vfprintf_internal_r+0x1e10>
61023824:	00800ac4 	movi	r2,43
61023828:	d8800845 	stb	r2,33(sp)
6102382c:	00800244 	movi	r2,9
61023830:	1400af0e 	bge	r2,r16,61023af0 <___vfprintf_internal_r+0x1dd8>
61023834:	1027883a 	mov	r19,r2
61023838:	dc400b84 	addi	r17,sp,46
6102383c:	8009883a 	mov	r4,r16
61023840:	01400284 	movi	r5,10
61023844:	10214300 	call	61021430 <__modsi3>
61023848:	10800c04 	addi	r2,r2,48
6102384c:	8c7fffc4 	addi	r17,r17,-1
61023850:	8009883a 	mov	r4,r16
61023854:	01400284 	movi	r5,10
61023858:	88800005 	stb	r2,0(r17)
6102385c:	10213d00 	call	610213d0 <__divsi3>
61023860:	1021883a 	mov	r16,r2
61023864:	98bff516 	blt	r19,r2,6102383c <___vfprintf_internal_r+0x1b24>
61023868:	10c00c04 	addi	r3,r2,48
6102386c:	d88009c4 	addi	r2,sp,39
61023870:	108001c4 	addi	r2,r2,7
61023874:	897fffc4 	addi	r5,r17,-1
61023878:	88ffffc5 	stb	r3,-1(r17)
6102387c:	2880a72e 	bgeu	r5,r2,61023b1c <___vfprintf_internal_r+0x1e04>
61023880:	1009883a 	mov	r4,r2
61023884:	d9800804 	addi	r6,sp,32
61023888:	d8c00884 	addi	r3,sp,34
6102388c:	28800003 	ldbu	r2,0(r5)
61023890:	29400044 	addi	r5,r5,1
61023894:	18800005 	stb	r2,0(r3)
61023898:	18c00044 	addi	r3,r3,1
6102389c:	293ffb36 	bltu	r5,r4,6102388c <___vfprintf_internal_r+0x1b74>
610238a0:	1987c83a 	sub	r3,r3,r6
610238a4:	00800044 	movi	r2,1
610238a8:	d8c14815 	stw	r3,1312(sp)
610238ac:	90cf883a 	add	r7,r18,r3
610238b0:	1480960e 	bge	r2,r18,61023b0c <___vfprintf_internal_r+0x1df4>
610238b4:	39c00044 	addi	r7,r7,1
610238b8:	d9c14515 	stw	r7,1300(sp)
610238bc:	38003416 	blt	r7,zero,61023990 <___vfprintf_internal_r+0x1c78>
610238c0:	e0803fcc 	andi	r2,fp,255
610238c4:	1080201c 	xori	r2,r2,128
610238c8:	10bfe004 	addi	r2,r2,-128
610238cc:	10004e26 	beq	r2,zero,61023a08 <___vfprintf_internal_r+0x1cf0>
610238d0:	00800b44 	movi	r2,45
610238d4:	dc814715 	stw	r18,1308(sp)
610238d8:	d8014615 	stw	zero,1304(sp)
610238dc:	d8800405 	stb	r2,16(sp)
610238e0:	003bb106 	br	610227a8 <___vfprintf_internal_r+0xa90>
610238e4:	00800b44 	movi	r2,45
610238e8:	d8800405 	stb	r2,16(sp)
610238ec:	003d3306 	br	61022dbc <___vfprintf_internal_r+0x10a4>
610238f0:	d9014f17 	ldw	r4,1340(sp)
610238f4:	b00b883a 	mov	r5,r22
610238f8:	d9800c04 	addi	r6,sp,48
610238fc:	1021cc00 	call	61021cc0 <__sprint_r>
61023900:	103abd1e 	bne	r2,zero,610223f8 <___vfprintf_internal_r+0x6e0>
61023904:	003abb06 	br	610223f4 <___vfprintf_internal_r+0x6dc>
61023908:	38800017 	ldw	r2,0(r7)
6102390c:	39c00104 	addi	r7,r7,4
61023910:	d9c14015 	stw	r7,1280(sp)
61023914:	d9414b17 	ldw	r5,1324(sp)
61023918:	d9c14017 	ldw	r7,1280(sp)
6102391c:	11400015 	stw	r5,0(r2)
61023920:	00395906 	br	61021e88 <___vfprintf_internal_r+0x170>
61023924:	980f883a 	mov	r7,r19
61023928:	dcc14515 	stw	r19,1300(sp)
6102392c:	d8014615 	stw	zero,1304(sp)
61023930:	003b9b06 	br	610227a0 <___vfprintf_internal_r+0xa88>
61023934:	0027883a 	mov	r19,zero
61023938:	00397806 	br	61021f1c <___vfprintf_internal_r+0x204>
6102393c:	00d840f4 	movhi	r3,24835
61023940:	18f7ae04 	addi	r3,r3,-8520
61023944:	100f883a 	mov	r7,r2
61023948:	d8814515 	stw	r2,1300(sp)
6102394c:	d8c14115 	stw	r3,1284(sp)
61023950:	0039e006 	br	610220d4 <___vfprintf_internal_r+0x3bc>
61023954:	009840f4 	movhi	r2,24835
61023958:	10b7ad04 	addi	r2,r2,-8524
6102395c:	d8814115 	stw	r2,1284(sp)
61023960:	003d1c06 	br	61022dd4 <___vfprintf_internal_r+0x10bc>
61023964:	d9414d17 	ldw	r5,1332(sp)
61023968:	00801984 	movi	r2,102
6102396c:	28804926 	beq	r5,r2,61023a94 <___vfprintf_internal_r+0x1d7c>
61023970:	200f883a 	mov	r7,r4
61023974:	24805716 	blt	r4,r18,61023ad4 <___vfprintf_internal_r+0x1dbc>
61023978:	d9414c17 	ldw	r5,1328(sp)
6102397c:	2880004c 	andi	r2,r5,1
61023980:	10000126 	beq	r2,zero,61023988 <___vfprintf_internal_r+0x1c70>
61023984:	21c00044 	addi	r7,r4,1
61023988:	d9c14515 	stw	r7,1300(sp)
6102398c:	383fcc0e 	bge	r7,zero,610238c0 <___vfprintf_internal_r+0x1ba8>
61023990:	d8014515 	stw	zero,1300(sp)
61023994:	003fca06 	br	610238c0 <___vfprintf_internal_r+0x1ba8>
61023998:	d9000517 	ldw	r4,20(sp)
6102399c:	00bfff04 	movi	r2,-4
610239a0:	1100480e 	bge	r2,r4,61023ac4 <___vfprintf_internal_r+0x1dac>
610239a4:	99004716 	blt	r19,r4,61023ac4 <___vfprintf_internal_r+0x1dac>
610239a8:	d8c14d15 	stw	r3,1332(sp)
610239ac:	003ff006 	br	61023970 <___vfprintf_internal_r+0x1c58>
610239b0:	d8800717 	ldw	r2,28(sp)
610239b4:	14bf8b2e 	bgeu	r2,r18,610237e4 <___vfprintf_internal_r+0x1acc>
610239b8:	9007883a 	mov	r3,r18
610239bc:	01000c04 	movi	r4,48
610239c0:	11000005 	stb	r4,0(r2)
610239c4:	10800044 	addi	r2,r2,1
610239c8:	d8800715 	stw	r2,28(sp)
610239cc:	18bffc1e 	bne	r3,r2,610239c0 <___vfprintf_internal_r+0x1ca8>
610239d0:	003f8406 	br	610237e4 <___vfprintf_internal_r+0x1acc>
610239d4:	d8814117 	ldw	r2,1284(sp)
610239d8:	10c00007 	ldb	r3,0(r2)
610239dc:	00800c04 	movi	r2,48
610239e0:	18805b26 	beq	r3,r2,61023b50 <___vfprintf_internal_r+0x1e38>
610239e4:	d9000517 	ldw	r4,20(sp)
610239e8:	9125883a 	add	r18,r18,r4
610239ec:	003f7506 	br	610237c4 <___vfprintf_internal_r+0x1aac>
610239f0:	d9014c17 	ldw	r4,1328(sp)
610239f4:	2080004c 	andi	r2,r4,1
610239f8:	1005003a 	cmpeq	r2,r2,zero
610239fc:	103f6a26 	beq	r2,zero,610237a8 <___vfprintf_internal_r+0x1a90>
61023a00:	d8800717 	ldw	r2,28(sp)
61023a04:	003f7706 	br	610237e4 <___vfprintf_internal_r+0x1acc>
61023a08:	d9c14515 	stw	r7,1300(sp)
61023a0c:	38004d16 	blt	r7,zero,61023b44 <___vfprintf_internal_r+0x1e2c>
61023a10:	dc814715 	stw	r18,1308(sp)
61023a14:	d8014615 	stw	zero,1304(sp)
61023a18:	003b6106 	br	610227a0 <___vfprintf_internal_r+0xa88>
61023a1c:	d9014f17 	ldw	r4,1340(sp)
61023a20:	d8800504 	addi	r2,sp,20
61023a24:	d8800115 	stw	r2,4(sp)
61023a28:	d8c00604 	addi	r3,sp,24
61023a2c:	d8800704 	addi	r2,sp,28
61023a30:	800b883a 	mov	r5,r16
61023a34:	880d883a 	mov	r6,r17
61023a38:	01c000c4 	movi	r7,3
61023a3c:	d8c00215 	stw	r3,8(sp)
61023a40:	d8800315 	stw	r2,12(sp)
61023a44:	dcc00015 	stw	r19,0(sp)
61023a48:	9829883a 	mov	r20,r19
61023a4c:	1023f3c0 	call	61023f3c <_dtoa_r>
61023a50:	d8814115 	stw	r2,1284(sp)
61023a54:	003f5106 	br	6102379c <___vfprintf_internal_r+0x1a84>
61023a58:	d8c14217 	ldw	r3,1288(sp)
61023a5c:	d9014317 	ldw	r4,1292(sp)
61023a60:	07000b44 	movi	fp,45
61023a64:	1821883a 	mov	r16,r3
61023a68:	2460003c 	xorhi	r17,r4,32768
61023a6c:	003f3106 	br	61023734 <___vfprintf_internal_r+0x1a1c>
61023a70:	9d000044 	addi	r20,r19,1
61023a74:	003f3906 	br	6102375c <___vfprintf_internal_r+0x1a44>
61023a78:	983f251e 	bne	r19,zero,61023710 <___vfprintf_internal_r+0x19f8>
61023a7c:	04c00044 	movi	r19,1
61023a80:	003f2306 	br	61023710 <___vfprintf_internal_r+0x19f8>
61023a84:	04c00184 	movi	r19,6
61023a88:	003f2106 	br	61023710 <___vfprintf_internal_r+0x19f8>
61023a8c:	d8014515 	stw	zero,1300(sp)
61023a90:	003eee06 	br	6102364c <___vfprintf_internal_r+0x1934>
61023a94:	200f883a 	mov	r7,r4
61023a98:	0100370e 	bge	zero,r4,61023b78 <___vfprintf_internal_r+0x1e60>
61023a9c:	9800031e 	bne	r19,zero,61023aac <___vfprintf_internal_r+0x1d94>
61023aa0:	d9814c17 	ldw	r6,1328(sp)
61023aa4:	3080004c 	andi	r2,r6,1
61023aa8:	103fb726 	beq	r2,zero,61023988 <___vfprintf_internal_r+0x1c70>
61023aac:	20800044 	addi	r2,r4,1
61023ab0:	98a7883a 	add	r19,r19,r2
61023ab4:	dcc14515 	stw	r19,1300(sp)
61023ab8:	980f883a 	mov	r7,r19
61023abc:	983f800e 	bge	r19,zero,610238c0 <___vfprintf_internal_r+0x1ba8>
61023ac0:	003fb306 	br	61023990 <___vfprintf_internal_r+0x1c78>
61023ac4:	d9814d17 	ldw	r6,1332(sp)
61023ac8:	31bfff84 	addi	r6,r6,-2
61023acc:	d9814d15 	stw	r6,1332(sp)
61023ad0:	003f4c06 	br	61023804 <___vfprintf_internal_r+0x1aec>
61023ad4:	0100180e 	bge	zero,r4,61023b38 <___vfprintf_internal_r+0x1e20>
61023ad8:	00800044 	movi	r2,1
61023adc:	1485883a 	add	r2,r2,r18
61023ae0:	d8814515 	stw	r2,1300(sp)
61023ae4:	100f883a 	mov	r7,r2
61023ae8:	103f750e 	bge	r2,zero,610238c0 <___vfprintf_internal_r+0x1ba8>
61023aec:	003fa806 	br	61023990 <___vfprintf_internal_r+0x1c78>
61023af0:	80c00c04 	addi	r3,r16,48
61023af4:	00800c04 	movi	r2,48
61023af8:	d8c008c5 	stb	r3,35(sp)
61023afc:	d9800804 	addi	r6,sp,32
61023b00:	d8c00904 	addi	r3,sp,36
61023b04:	d8800885 	stb	r2,34(sp)
61023b08:	003f6506 	br	610238a0 <___vfprintf_internal_r+0x1b88>
61023b0c:	d9014c17 	ldw	r4,1328(sp)
61023b10:	2084703a 	and	r2,r4,r2
61023b14:	103f9c26 	beq	r2,zero,61023988 <___vfprintf_internal_r+0x1c70>
61023b18:	003f6606 	br	610238b4 <___vfprintf_internal_r+0x1b9c>
61023b1c:	d9800804 	addi	r6,sp,32
61023b20:	d8c00884 	addi	r3,sp,34
61023b24:	003f5e06 	br	610238a0 <___vfprintf_internal_r+0x1b88>
61023b28:	00800b44 	movi	r2,45
61023b2c:	0121c83a 	sub	r16,zero,r4
61023b30:	d8800845 	stb	r2,33(sp)
61023b34:	003f3d06 	br	6102382c <___vfprintf_internal_r+0x1b14>
61023b38:	00800084 	movi	r2,2
61023b3c:	1105c83a 	sub	r2,r2,r4
61023b40:	003fe606 	br	61023adc <___vfprintf_internal_r+0x1dc4>
61023b44:	d8014515 	stw	zero,1300(sp)
61023b48:	dc814715 	stw	r18,1308(sp)
61023b4c:	003fb106 	br	61023a14 <___vfprintf_internal_r+0x1cfc>
61023b50:	000d883a 	mov	r6,zero
61023b54:	000f883a 	mov	r7,zero
61023b58:	8009883a 	mov	r4,r16
61023b5c:	880b883a 	mov	r5,r17
61023b60:	102a7f00 	call	6102a7f0 <__nedf2>
61023b64:	103f9f26 	beq	r2,zero,610239e4 <___vfprintf_internal_r+0x1ccc>
61023b68:	00800044 	movi	r2,1
61023b6c:	1509c83a 	sub	r4,r2,r20
61023b70:	d9000515 	stw	r4,20(sp)
61023b74:	003f9b06 	br	610239e4 <___vfprintf_internal_r+0x1ccc>
61023b78:	98000d1e 	bne	r19,zero,61023bb0 <___vfprintf_internal_r+0x1e98>
61023b7c:	d8c14c17 	ldw	r3,1328(sp)
61023b80:	1880004c 	andi	r2,r3,1
61023b84:	10000a1e 	bne	r2,zero,61023bb0 <___vfprintf_internal_r+0x1e98>
61023b88:	01000044 	movi	r4,1
61023b8c:	200f883a 	mov	r7,r4
61023b90:	d9014515 	stw	r4,1300(sp)
61023b94:	003f4a06 	br	610238c0 <___vfprintf_internal_r+0x1ba8>
61023b98:	3cc00017 	ldw	r19,0(r7)
61023b9c:	39c00104 	addi	r7,r7,4
61023ba0:	983d0e0e 	bge	r19,zero,61022fdc <___vfprintf_internal_r+0x12c4>
61023ba4:	b8c00007 	ldb	r3,0(r23)
61023ba8:	04ffffc4 	movi	r19,-1
61023bac:	0038d906 	br	61021f14 <___vfprintf_internal_r+0x1fc>
61023bb0:	9cc00084 	addi	r19,r19,2
61023bb4:	dcc14515 	stw	r19,1300(sp)
61023bb8:	980f883a 	mov	r7,r19
61023bbc:	983f400e 	bge	r19,zero,610238c0 <___vfprintf_internal_r+0x1ba8>
61023bc0:	003f7306 	br	61023990 <___vfprintf_internal_r+0x1c78>

61023bc4 <__vfprintf_internal>:
61023bc4:	009840f4 	movhi	r2,24835
61023bc8:	10beba04 	addi	r2,r2,-1304
61023bcc:	2013883a 	mov	r9,r4
61023bd0:	11000017 	ldw	r4,0(r2)
61023bd4:	2805883a 	mov	r2,r5
61023bd8:	300f883a 	mov	r7,r6
61023bdc:	480b883a 	mov	r5,r9
61023be0:	100d883a 	mov	r6,r2
61023be4:	1021d181 	jmpi	61021d18 <___vfprintf_internal_r>

61023be8 <__swsetup_r>:
61023be8:	009840f4 	movhi	r2,24835
61023bec:	10beba04 	addi	r2,r2,-1304
61023bf0:	10c00017 	ldw	r3,0(r2)
61023bf4:	defffd04 	addi	sp,sp,-12
61023bf8:	dc400115 	stw	r17,4(sp)
61023bfc:	dc000015 	stw	r16,0(sp)
61023c00:	dfc00215 	stw	ra,8(sp)
61023c04:	2023883a 	mov	r17,r4
61023c08:	2821883a 	mov	r16,r5
61023c0c:	18000226 	beq	r3,zero,61023c18 <__swsetup_r+0x30>
61023c10:	18800e17 	ldw	r2,56(r3)
61023c14:	10001f26 	beq	r2,zero,61023c94 <__swsetup_r+0xac>
61023c18:	8100030b 	ldhu	r4,12(r16)
61023c1c:	2080020c 	andi	r2,r4,8
61023c20:	10002826 	beq	r2,zero,61023cc4 <__swsetup_r+0xdc>
61023c24:	81400417 	ldw	r5,16(r16)
61023c28:	28001d26 	beq	r5,zero,61023ca0 <__swsetup_r+0xb8>
61023c2c:	2080004c 	andi	r2,r4,1
61023c30:	1005003a 	cmpeq	r2,r2,zero
61023c34:	10000b26 	beq	r2,zero,61023c64 <__swsetup_r+0x7c>
61023c38:	2080008c 	andi	r2,r4,2
61023c3c:	10001226 	beq	r2,zero,61023c88 <__swsetup_r+0xa0>
61023c40:	0005883a 	mov	r2,zero
61023c44:	80800215 	stw	r2,8(r16)
61023c48:	28000b26 	beq	r5,zero,61023c78 <__swsetup_r+0x90>
61023c4c:	0005883a 	mov	r2,zero
61023c50:	dfc00217 	ldw	ra,8(sp)
61023c54:	dc400117 	ldw	r17,4(sp)
61023c58:	dc000017 	ldw	r16,0(sp)
61023c5c:	dec00304 	addi	sp,sp,12
61023c60:	f800283a 	ret
61023c64:	80800517 	ldw	r2,20(r16)
61023c68:	80000215 	stw	zero,8(r16)
61023c6c:	0085c83a 	sub	r2,zero,r2
61023c70:	80800615 	stw	r2,24(r16)
61023c74:	283ff51e 	bne	r5,zero,61023c4c <__swsetup_r+0x64>
61023c78:	2080200c 	andi	r2,r4,128
61023c7c:	103ff326 	beq	r2,zero,61023c4c <__swsetup_r+0x64>
61023c80:	00bfffc4 	movi	r2,-1
61023c84:	003ff206 	br	61023c50 <__swsetup_r+0x68>
61023c88:	80800517 	ldw	r2,20(r16)
61023c8c:	80800215 	stw	r2,8(r16)
61023c90:	003fed06 	br	61023c48 <__swsetup_r+0x60>
61023c94:	1809883a 	mov	r4,r3
61023c98:	10257880 	call	61025788 <__sinit>
61023c9c:	003fde06 	br	61023c18 <__swsetup_r+0x30>
61023ca0:	20c0a00c 	andi	r3,r4,640
61023ca4:	00808004 	movi	r2,512
61023ca8:	18bfe026 	beq	r3,r2,61023c2c <__swsetup_r+0x44>
61023cac:	8809883a 	mov	r4,r17
61023cb0:	800b883a 	mov	r5,r16
61023cb4:	10265000 	call	61026500 <__smakebuf_r>
61023cb8:	8100030b 	ldhu	r4,12(r16)
61023cbc:	81400417 	ldw	r5,16(r16)
61023cc0:	003fda06 	br	61023c2c <__swsetup_r+0x44>
61023cc4:	2080040c 	andi	r2,r4,16
61023cc8:	103fed26 	beq	r2,zero,61023c80 <__swsetup_r+0x98>
61023ccc:	2080010c 	andi	r2,r4,4
61023cd0:	10001226 	beq	r2,zero,61023d1c <__swsetup_r+0x134>
61023cd4:	81400c17 	ldw	r5,48(r16)
61023cd8:	28000526 	beq	r5,zero,61023cf0 <__swsetup_r+0x108>
61023cdc:	80801004 	addi	r2,r16,64
61023ce0:	28800226 	beq	r5,r2,61023cec <__swsetup_r+0x104>
61023ce4:	8809883a 	mov	r4,r17
61023ce8:	1025b0c0 	call	61025b0c <_free_r>
61023cec:	80000c15 	stw	zero,48(r16)
61023cf0:	8080030b 	ldhu	r2,12(r16)
61023cf4:	81400417 	ldw	r5,16(r16)
61023cf8:	80000115 	stw	zero,4(r16)
61023cfc:	10bff6cc 	andi	r2,r2,65499
61023d00:	8080030d 	sth	r2,12(r16)
61023d04:	81400015 	stw	r5,0(r16)
61023d08:	8080030b 	ldhu	r2,12(r16)
61023d0c:	10800214 	ori	r2,r2,8
61023d10:	113fffcc 	andi	r4,r2,65535
61023d14:	8080030d 	sth	r2,12(r16)
61023d18:	003fc306 	br	61023c28 <__swsetup_r+0x40>
61023d1c:	81400417 	ldw	r5,16(r16)
61023d20:	003ff906 	br	61023d08 <__swsetup_r+0x120>

61023d24 <quorem>:
61023d24:	28c00417 	ldw	r3,16(r5)
61023d28:	20800417 	ldw	r2,16(r4)
61023d2c:	defff604 	addi	sp,sp,-40
61023d30:	ddc00715 	stw	r23,28(sp)
61023d34:	dd400515 	stw	r21,20(sp)
61023d38:	dfc00915 	stw	ra,36(sp)
61023d3c:	df000815 	stw	fp,32(sp)
61023d40:	dd800615 	stw	r22,24(sp)
61023d44:	dd000415 	stw	r20,16(sp)
61023d48:	dcc00315 	stw	r19,12(sp)
61023d4c:	dc800215 	stw	r18,8(sp)
61023d50:	dc400115 	stw	r17,4(sp)
61023d54:	dc000015 	stw	r16,0(sp)
61023d58:	202f883a 	mov	r23,r4
61023d5c:	282b883a 	mov	r21,r5
61023d60:	10c07416 	blt	r2,r3,61023f34 <quorem+0x210>
61023d64:	1c7fffc4 	addi	r17,r3,-1
61023d68:	8c45883a 	add	r2,r17,r17
61023d6c:	1085883a 	add	r2,r2,r2
61023d70:	2c000504 	addi	r16,r5,20
61023d74:	24c00504 	addi	r19,r4,20
61023d78:	14ed883a 	add	r22,r2,r19
61023d7c:	80a5883a 	add	r18,r16,r2
61023d80:	b7000017 	ldw	fp,0(r22)
61023d84:	91400017 	ldw	r5,0(r18)
61023d88:	e009883a 	mov	r4,fp
61023d8c:	29400044 	addi	r5,r5,1
61023d90:	10214900 	call	61021490 <__udivsi3>
61023d94:	1029883a 	mov	r20,r2
61023d98:	10003c1e 	bne	r2,zero,61023e8c <quorem+0x168>
61023d9c:	a80b883a 	mov	r5,r21
61023da0:	b809883a 	mov	r4,r23
61023da4:	102718c0 	call	6102718c <__mcmp>
61023da8:	10002b16 	blt	r2,zero,61023e58 <quorem+0x134>
61023dac:	a5000044 	addi	r20,r20,1
61023db0:	980f883a 	mov	r7,r19
61023db4:	0011883a 	mov	r8,zero
61023db8:	0009883a 	mov	r4,zero
61023dbc:	81400017 	ldw	r5,0(r16)
61023dc0:	38c00017 	ldw	r3,0(r7)
61023dc4:	84000104 	addi	r16,r16,4
61023dc8:	28bfffcc 	andi	r2,r5,65535
61023dcc:	2085883a 	add	r2,r4,r2
61023dd0:	11bfffcc 	andi	r6,r2,65535
61023dd4:	193fffcc 	andi	r4,r3,65535
61023dd8:	1004d43a 	srli	r2,r2,16
61023ddc:	280ad43a 	srli	r5,r5,16
61023de0:	2189c83a 	sub	r4,r4,r6
61023de4:	2209883a 	add	r4,r4,r8
61023de8:	1806d43a 	srli	r3,r3,16
61023dec:	288b883a 	add	r5,r5,r2
61023df0:	200dd43a 	srai	r6,r4,16
61023df4:	28bfffcc 	andi	r2,r5,65535
61023df8:	1887c83a 	sub	r3,r3,r2
61023dfc:	1987883a 	add	r3,r3,r6
61023e00:	3900000d 	sth	r4,0(r7)
61023e04:	38c0008d 	sth	r3,2(r7)
61023e08:	2808d43a 	srli	r4,r5,16
61023e0c:	39c00104 	addi	r7,r7,4
61023e10:	1811d43a 	srai	r8,r3,16
61023e14:	943fe92e 	bgeu	r18,r16,61023dbc <quorem+0x98>
61023e18:	8c45883a 	add	r2,r17,r17
61023e1c:	1085883a 	add	r2,r2,r2
61023e20:	9885883a 	add	r2,r19,r2
61023e24:	10c00017 	ldw	r3,0(r2)
61023e28:	18000b1e 	bne	r3,zero,61023e58 <quorem+0x134>
61023e2c:	113fff04 	addi	r4,r2,-4
61023e30:	9900082e 	bgeu	r19,r4,61023e54 <quorem+0x130>
61023e34:	10bfff17 	ldw	r2,-4(r2)
61023e38:	10000326 	beq	r2,zero,61023e48 <quorem+0x124>
61023e3c:	00000506 	br	61023e54 <quorem+0x130>
61023e40:	20800017 	ldw	r2,0(r4)
61023e44:	1000031e 	bne	r2,zero,61023e54 <quorem+0x130>
61023e48:	213fff04 	addi	r4,r4,-4
61023e4c:	8c7fffc4 	addi	r17,r17,-1
61023e50:	993ffb36 	bltu	r19,r4,61023e40 <quorem+0x11c>
61023e54:	bc400415 	stw	r17,16(r23)
61023e58:	a005883a 	mov	r2,r20
61023e5c:	dfc00917 	ldw	ra,36(sp)
61023e60:	df000817 	ldw	fp,32(sp)
61023e64:	ddc00717 	ldw	r23,28(sp)
61023e68:	dd800617 	ldw	r22,24(sp)
61023e6c:	dd400517 	ldw	r21,20(sp)
61023e70:	dd000417 	ldw	r20,16(sp)
61023e74:	dcc00317 	ldw	r19,12(sp)
61023e78:	dc800217 	ldw	r18,8(sp)
61023e7c:	dc400117 	ldw	r17,4(sp)
61023e80:	dc000017 	ldw	r16,0(sp)
61023e84:	dec00a04 	addi	sp,sp,40
61023e88:	f800283a 	ret
61023e8c:	980f883a 	mov	r7,r19
61023e90:	8011883a 	mov	r8,r16
61023e94:	0013883a 	mov	r9,zero
61023e98:	000d883a 	mov	r6,zero
61023e9c:	40c00017 	ldw	r3,0(r8)
61023ea0:	39000017 	ldw	r4,0(r7)
61023ea4:	42000104 	addi	r8,r8,4
61023ea8:	18bfffcc 	andi	r2,r3,65535
61023eac:	a085383a 	mul	r2,r20,r2
61023eb0:	1806d43a 	srli	r3,r3,16
61023eb4:	217fffcc 	andi	r5,r4,65535
61023eb8:	3085883a 	add	r2,r6,r2
61023ebc:	11bfffcc 	andi	r6,r2,65535
61023ec0:	a0c7383a 	mul	r3,r20,r3
61023ec4:	1004d43a 	srli	r2,r2,16
61023ec8:	298bc83a 	sub	r5,r5,r6
61023ecc:	2a4b883a 	add	r5,r5,r9
61023ed0:	2008d43a 	srli	r4,r4,16
61023ed4:	1887883a 	add	r3,r3,r2
61023ed8:	280dd43a 	srai	r6,r5,16
61023edc:	18bfffcc 	andi	r2,r3,65535
61023ee0:	2089c83a 	sub	r4,r4,r2
61023ee4:	2189883a 	add	r4,r4,r6
61023ee8:	3900008d 	sth	r4,2(r7)
61023eec:	3940000d 	sth	r5,0(r7)
61023ef0:	180cd43a 	srli	r6,r3,16
61023ef4:	39c00104 	addi	r7,r7,4
61023ef8:	2013d43a 	srai	r9,r4,16
61023efc:	923fe72e 	bgeu	r18,r8,61023e9c <quorem+0x178>
61023f00:	e03fa61e 	bne	fp,zero,61023d9c <quorem+0x78>
61023f04:	b0ffff04 	addi	r3,r22,-4
61023f08:	98c0082e 	bgeu	r19,r3,61023f2c <quorem+0x208>
61023f0c:	b0bfff17 	ldw	r2,-4(r22)
61023f10:	10000326 	beq	r2,zero,61023f20 <quorem+0x1fc>
61023f14:	00000506 	br	61023f2c <quorem+0x208>
61023f18:	18800017 	ldw	r2,0(r3)
61023f1c:	1000031e 	bne	r2,zero,61023f2c <quorem+0x208>
61023f20:	18ffff04 	addi	r3,r3,-4
61023f24:	8c7fffc4 	addi	r17,r17,-1
61023f28:	98fffb36 	bltu	r19,r3,61023f18 <quorem+0x1f4>
61023f2c:	bc400415 	stw	r17,16(r23)
61023f30:	003f9a06 	br	61023d9c <quorem+0x78>
61023f34:	0005883a 	mov	r2,zero
61023f38:	003fc806 	br	61023e5c <quorem+0x138>

61023f3c <_dtoa_r>:
61023f3c:	22001017 	ldw	r8,64(r4)
61023f40:	deffda04 	addi	sp,sp,-152
61023f44:	dd402115 	stw	r21,132(sp)
61023f48:	dd002015 	stw	r20,128(sp)
61023f4c:	dc801e15 	stw	r18,120(sp)
61023f50:	dc401d15 	stw	r17,116(sp)
61023f54:	dfc02515 	stw	ra,148(sp)
61023f58:	df002415 	stw	fp,144(sp)
61023f5c:	ddc02315 	stw	r23,140(sp)
61023f60:	dd802215 	stw	r22,136(sp)
61023f64:	dcc01f15 	stw	r19,124(sp)
61023f68:	dc001c15 	stw	r16,112(sp)
61023f6c:	d9001615 	stw	r4,88(sp)
61023f70:	3023883a 	mov	r17,r6
61023f74:	2829883a 	mov	r20,r5
61023f78:	d9c01715 	stw	r7,92(sp)
61023f7c:	dc802817 	ldw	r18,160(sp)
61023f80:	302b883a 	mov	r21,r6
61023f84:	40000a26 	beq	r8,zero,61023fb0 <_dtoa_r+0x74>
61023f88:	20801117 	ldw	r2,68(r4)
61023f8c:	400b883a 	mov	r5,r8
61023f90:	40800115 	stw	r2,4(r8)
61023f94:	20c01117 	ldw	r3,68(r4)
61023f98:	00800044 	movi	r2,1
61023f9c:	10c4983a 	sll	r2,r2,r3
61023fa0:	40800215 	stw	r2,8(r8)
61023fa4:	10270300 	call	61027030 <_Bfree>
61023fa8:	d8c01617 	ldw	r3,88(sp)
61023fac:	18001015 	stw	zero,64(r3)
61023fb0:	8800a316 	blt	r17,zero,61024240 <_dtoa_r+0x304>
61023fb4:	90000015 	stw	zero,0(r18)
61023fb8:	a8dffc2c 	andhi	r3,r21,32752
61023fbc:	009ffc34 	movhi	r2,32752
61023fc0:	18809126 	beq	r3,r2,61024208 <_dtoa_r+0x2cc>
61023fc4:	000d883a 	mov	r6,zero
61023fc8:	000f883a 	mov	r7,zero
61023fcc:	a009883a 	mov	r4,r20
61023fd0:	a80b883a 	mov	r5,r21
61023fd4:	dd001215 	stw	r20,72(sp)
61023fd8:	dd401315 	stw	r21,76(sp)
61023fdc:	102a7f00 	call	6102a7f0 <__nedf2>
61023fe0:	1000171e 	bne	r2,zero,61024040 <_dtoa_r+0x104>
61023fe4:	d9802717 	ldw	r6,156(sp)
61023fe8:	00800044 	movi	r2,1
61023fec:	30800015 	stw	r2,0(r6)
61023ff0:	d8802917 	ldw	r2,164(sp)
61023ff4:	10029b26 	beq	r2,zero,61024a64 <_dtoa_r+0xb28>
61023ff8:	d9002917 	ldw	r4,164(sp)
61023ffc:	009840f4 	movhi	r2,24835
61024000:	10b7bc44 	addi	r2,r2,-8463
61024004:	10ffffc4 	addi	r3,r2,-1
61024008:	20800015 	stw	r2,0(r4)
6102400c:	1805883a 	mov	r2,r3
61024010:	dfc02517 	ldw	ra,148(sp)
61024014:	df002417 	ldw	fp,144(sp)
61024018:	ddc02317 	ldw	r23,140(sp)
6102401c:	dd802217 	ldw	r22,136(sp)
61024020:	dd402117 	ldw	r21,132(sp)
61024024:	dd002017 	ldw	r20,128(sp)
61024028:	dcc01f17 	ldw	r19,124(sp)
6102402c:	dc801e17 	ldw	r18,120(sp)
61024030:	dc401d17 	ldw	r17,116(sp)
61024034:	dc001c17 	ldw	r16,112(sp)
61024038:	dec02604 	addi	sp,sp,152
6102403c:	f800283a 	ret
61024040:	d9001617 	ldw	r4,88(sp)
61024044:	d9401217 	ldw	r5,72(sp)
61024048:	d8800104 	addi	r2,sp,4
6102404c:	a80d883a 	mov	r6,r21
61024050:	d9c00204 	addi	r7,sp,8
61024054:	d8800015 	stw	r2,0(sp)
61024058:	102766c0 	call	6102766c <__d2b>
6102405c:	d8800715 	stw	r2,28(sp)
61024060:	a804d53a 	srli	r2,r21,20
61024064:	1101ffcc 	andi	r4,r2,2047
61024068:	20008626 	beq	r4,zero,61024284 <_dtoa_r+0x348>
6102406c:	d8c01217 	ldw	r3,72(sp)
61024070:	00800434 	movhi	r2,16
61024074:	10bfffc4 	addi	r2,r2,-1
61024078:	ddc00117 	ldw	r23,4(sp)
6102407c:	a884703a 	and	r2,r21,r2
61024080:	1811883a 	mov	r8,r3
61024084:	124ffc34 	orhi	r9,r2,16368
61024088:	25bf0044 	addi	r22,r4,-1023
6102408c:	d8000815 	stw	zero,32(sp)
61024090:	0005883a 	mov	r2,zero
61024094:	00cffe34 	movhi	r3,16376
61024098:	480b883a 	mov	r5,r9
6102409c:	4009883a 	mov	r4,r8
610240a0:	180f883a 	mov	r7,r3
610240a4:	100d883a 	mov	r6,r2
610240a8:	102a0680 	call	6102a068 <__subdf3>
610240ac:	0218dbf4 	movhi	r8,25455
610240b0:	4210d844 	addi	r8,r8,17249
610240b4:	024ff4f4 	movhi	r9,16339
610240b8:	4a61e9c4 	addi	r9,r9,-30809
610240bc:	480f883a 	mov	r7,r9
610240c0:	400d883a 	mov	r6,r8
610240c4:	180b883a 	mov	r5,r3
610240c8:	1009883a 	mov	r4,r2
610240cc:	102a15c0 	call	6102a15c <__muldf3>
610240d0:	0222d874 	movhi	r8,35681
610240d4:	42322cc4 	addi	r8,r8,-14157
610240d8:	024ff1f4 	movhi	r9,16327
610240dc:	4a628a04 	addi	r9,r9,-30168
610240e0:	480f883a 	mov	r7,r9
610240e4:	400d883a 	mov	r6,r8
610240e8:	180b883a 	mov	r5,r3
610240ec:	1009883a 	mov	r4,r2
610240f0:	102a0e80 	call	6102a0e8 <__adddf3>
610240f4:	b009883a 	mov	r4,r22
610240f8:	1021883a 	mov	r16,r2
610240fc:	1823883a 	mov	r17,r3
61024100:	102aa100 	call	6102aa10 <__floatsidf>
61024104:	021427f4 	movhi	r8,20639
61024108:	421e7ec4 	addi	r8,r8,31227
6102410c:	024ff4f4 	movhi	r9,16339
61024110:	4a5104c4 	addi	r9,r9,17427
61024114:	480f883a 	mov	r7,r9
61024118:	400d883a 	mov	r6,r8
6102411c:	180b883a 	mov	r5,r3
61024120:	1009883a 	mov	r4,r2
61024124:	102a15c0 	call	6102a15c <__muldf3>
61024128:	180f883a 	mov	r7,r3
6102412c:	880b883a 	mov	r5,r17
61024130:	100d883a 	mov	r6,r2
61024134:	8009883a 	mov	r4,r16
61024138:	102a0e80 	call	6102a0e8 <__adddf3>
6102413c:	1009883a 	mov	r4,r2
61024140:	180b883a 	mov	r5,r3
61024144:	1021883a 	mov	r16,r2
61024148:	1823883a 	mov	r17,r3
6102414c:	102ab080 	call	6102ab08 <__fixdfsi>
61024150:	000d883a 	mov	r6,zero
61024154:	000f883a 	mov	r7,zero
61024158:	8009883a 	mov	r4,r16
6102415c:	880b883a 	mov	r5,r17
61024160:	d8800d15 	stw	r2,52(sp)
61024164:	102a9880 	call	6102a988 <__ltdf2>
61024168:	10031716 	blt	r2,zero,61024dc8 <_dtoa_r+0xe8c>
6102416c:	d8c00d17 	ldw	r3,52(sp)
61024170:	00800584 	movi	r2,22
61024174:	10c1482e 	bgeu	r2,r3,61024698 <_dtoa_r+0x75c>
61024178:	01000044 	movi	r4,1
6102417c:	d9000c15 	stw	r4,48(sp)
61024180:	bd85c83a 	sub	r2,r23,r22
61024184:	11bfffc4 	addi	r6,r2,-1
61024188:	30030b16 	blt	r6,zero,61024db8 <_dtoa_r+0xe7c>
6102418c:	d9800a15 	stw	r6,40(sp)
61024190:	d8001115 	stw	zero,68(sp)
61024194:	d8c00d17 	ldw	r3,52(sp)
61024198:	1802ff16 	blt	r3,zero,61024d98 <_dtoa_r+0xe5c>
6102419c:	d9000a17 	ldw	r4,40(sp)
610241a0:	d8c00915 	stw	r3,36(sp)
610241a4:	d8001015 	stw	zero,64(sp)
610241a8:	20c9883a 	add	r4,r4,r3
610241ac:	d9000a15 	stw	r4,40(sp)
610241b0:	d9001717 	ldw	r4,92(sp)
610241b4:	00800244 	movi	r2,9
610241b8:	11004636 	bltu	r2,r4,610242d4 <_dtoa_r+0x398>
610241bc:	00800144 	movi	r2,5
610241c0:	11020416 	blt	r2,r4,610249d4 <_dtoa_r+0xa98>
610241c4:	04400044 	movi	r17,1
610241c8:	d8c01717 	ldw	r3,92(sp)
610241cc:	00800144 	movi	r2,5
610241d0:	10c1ed36 	bltu	r2,r3,61024988 <_dtoa_r+0xa4c>
610241d4:	18c5883a 	add	r2,r3,r3
610241d8:	1085883a 	add	r2,r2,r2
610241dc:	00d840b4 	movhi	r3,24834
610241e0:	18d07c04 	addi	r3,r3,16880
610241e4:	10c5883a 	add	r2,r2,r3
610241e8:	11000017 	ldw	r4,0(r2)
610241ec:	2000683a 	jmp	r4
610241f0:	610242dc 	xori	r4,r12,2315
610241f4:	610242dc 	xori	r4,r12,2315
610241f8:	61024cdc 	xori	r4,r12,2355
610241fc:	61024cb4 	orhi	r4,r12,2354
61024200:	61024cf8 	rdprs	r4,r12,2355
61024204:	61024d04 	addi	r4,r12,2356
61024208:	d9002717 	ldw	r4,156(sp)
6102420c:	0089c3c4 	movi	r2,9999
61024210:	20800015 	stw	r2,0(r4)
61024214:	a0001026 	beq	r20,zero,61024258 <_dtoa_r+0x31c>
61024218:	00d840f4 	movhi	r3,24835
6102421c:	18f7c804 	addi	r3,r3,-8416
61024220:	d9802917 	ldw	r6,164(sp)
61024224:	303f7926 	beq	r6,zero,6102400c <_dtoa_r+0xd0>
61024228:	188000c7 	ldb	r2,3(r3)
6102422c:	190000c4 	addi	r4,r3,3
61024230:	1000101e 	bne	r2,zero,61024274 <_dtoa_r+0x338>
61024234:	d8802917 	ldw	r2,164(sp)
61024238:	11000015 	stw	r4,0(r2)
6102423c:	003f7306 	br	6102400c <_dtoa_r+0xd0>
61024240:	00a00034 	movhi	r2,32768
61024244:	10bfffc4 	addi	r2,r2,-1
61024248:	00c00044 	movi	r3,1
6102424c:	88aa703a 	and	r21,r17,r2
61024250:	90c00015 	stw	r3,0(r18)
61024254:	003f5806 	br	61023fb8 <_dtoa_r+0x7c>
61024258:	00800434 	movhi	r2,16
6102425c:	10bfffc4 	addi	r2,r2,-1
61024260:	a884703a 	and	r2,r21,r2
61024264:	103fec1e 	bne	r2,zero,61024218 <_dtoa_r+0x2dc>
61024268:	00d840f4 	movhi	r3,24835
6102426c:	18f7c504 	addi	r3,r3,-8428
61024270:	003feb06 	br	61024220 <_dtoa_r+0x2e4>
61024274:	d8802917 	ldw	r2,164(sp)
61024278:	19000204 	addi	r4,r3,8
6102427c:	11000015 	stw	r4,0(r2)
61024280:	003f6206 	br	6102400c <_dtoa_r+0xd0>
61024284:	ddc00117 	ldw	r23,4(sp)
61024288:	d8800217 	ldw	r2,8(sp)
6102428c:	01000804 	movi	r4,32
61024290:	b8c10c84 	addi	r3,r23,1074
61024294:	18a3883a 	add	r17,r3,r2
61024298:	2441b80e 	bge	r4,r17,6102497c <_dtoa_r+0xa40>
6102429c:	00c01004 	movi	r3,64
610242a0:	1c47c83a 	sub	r3,r3,r17
610242a4:	88bff804 	addi	r2,r17,-32
610242a8:	a8c6983a 	sll	r3,r21,r3
610242ac:	a084d83a 	srl	r2,r20,r2
610242b0:	1888b03a 	or	r4,r3,r2
610242b4:	102abe00 	call	6102abe0 <__floatunsidf>
610242b8:	1011883a 	mov	r8,r2
610242bc:	00bf8434 	movhi	r2,65040
610242c0:	01000044 	movi	r4,1
610242c4:	10d3883a 	add	r9,r2,r3
610242c8:	8dbef344 	addi	r22,r17,-1075
610242cc:	d9000815 	stw	r4,32(sp)
610242d0:	003f6f06 	br	61024090 <_dtoa_r+0x154>
610242d4:	d8001715 	stw	zero,92(sp)
610242d8:	04400044 	movi	r17,1
610242dc:	00bfffc4 	movi	r2,-1
610242e0:	00c00044 	movi	r3,1
610242e4:	d8800e15 	stw	r2,56(sp)
610242e8:	d8002615 	stw	zero,152(sp)
610242ec:	d8800f15 	stw	r2,60(sp)
610242f0:	d8c00b15 	stw	r3,44(sp)
610242f4:	1021883a 	mov	r16,r2
610242f8:	d8801617 	ldw	r2,88(sp)
610242fc:	10001115 	stw	zero,68(r2)
61024300:	d8801617 	ldw	r2,88(sp)
61024304:	11401117 	ldw	r5,68(r2)
61024308:	1009883a 	mov	r4,r2
6102430c:	10275b00 	call	610275b0 <_Balloc>
61024310:	d8c01617 	ldw	r3,88(sp)
61024314:	d8800515 	stw	r2,20(sp)
61024318:	18801015 	stw	r2,64(r3)
6102431c:	00800384 	movi	r2,14
61024320:	14006836 	bltu	r2,r16,610244c4 <_dtoa_r+0x588>
61024324:	8805003a 	cmpeq	r2,r17,zero
61024328:	1000661e 	bne	r2,zero,610244c4 <_dtoa_r+0x588>
6102432c:	d9000d17 	ldw	r4,52(sp)
61024330:	0102300e 	bge	zero,r4,61024bf4 <_dtoa_r+0xcb8>
61024334:	208003cc 	andi	r2,r4,15
61024338:	100490fa 	slli	r2,r2,3
6102433c:	2025d13a 	srai	r18,r4,4
61024340:	00d840f4 	movhi	r3,24835
61024344:	18f7da04 	addi	r3,r3,-8344
61024348:	10c5883a 	add	r2,r2,r3
6102434c:	90c0040c 	andi	r3,r18,16
61024350:	14000017 	ldw	r16,0(r2)
61024354:	14400117 	ldw	r17,4(r2)
61024358:	18036a1e 	bne	r3,zero,61025104 <_dtoa_r+0x11c8>
6102435c:	05800084 	movi	r22,2
61024360:	90001026 	beq	r18,zero,610243a4 <_dtoa_r+0x468>
61024364:	04d840f4 	movhi	r19,24835
61024368:	9cf80c04 	addi	r19,r19,-8144
6102436c:	9080004c 	andi	r2,r18,1
61024370:	1005003a 	cmpeq	r2,r2,zero
61024374:	1000081e 	bne	r2,zero,61024398 <_dtoa_r+0x45c>
61024378:	99800017 	ldw	r6,0(r19)
6102437c:	99c00117 	ldw	r7,4(r19)
61024380:	880b883a 	mov	r5,r17
61024384:	8009883a 	mov	r4,r16
61024388:	102a15c0 	call	6102a15c <__muldf3>
6102438c:	1021883a 	mov	r16,r2
61024390:	b5800044 	addi	r22,r22,1
61024394:	1823883a 	mov	r17,r3
61024398:	9025d07a 	srai	r18,r18,1
6102439c:	9cc00204 	addi	r19,r19,8
610243a0:	903ff21e 	bne	r18,zero,6102436c <_dtoa_r+0x430>
610243a4:	a80b883a 	mov	r5,r21
610243a8:	a009883a 	mov	r4,r20
610243ac:	880f883a 	mov	r7,r17
610243b0:	800d883a 	mov	r6,r16
610243b4:	102a5100 	call	6102a510 <__divdf3>
610243b8:	1029883a 	mov	r20,r2
610243bc:	182b883a 	mov	r21,r3
610243c0:	d8c00c17 	ldw	r3,48(sp)
610243c4:	1805003a 	cmpeq	r2,r3,zero
610243c8:	1000081e 	bne	r2,zero,610243ec <_dtoa_r+0x4b0>
610243cc:	0005883a 	mov	r2,zero
610243d0:	00cffc34 	movhi	r3,16368
610243d4:	180f883a 	mov	r7,r3
610243d8:	a009883a 	mov	r4,r20
610243dc:	a80b883a 	mov	r5,r21
610243e0:	100d883a 	mov	r6,r2
610243e4:	102a9880 	call	6102a988 <__ltdf2>
610243e8:	1003fe16 	blt	r2,zero,610253e4 <_dtoa_r+0x14a8>
610243ec:	b009883a 	mov	r4,r22
610243f0:	102aa100 	call	6102aa10 <__floatsidf>
610243f4:	180b883a 	mov	r5,r3
610243f8:	1009883a 	mov	r4,r2
610243fc:	a00d883a 	mov	r6,r20
61024400:	a80f883a 	mov	r7,r21
61024404:	102a15c0 	call	6102a15c <__muldf3>
61024408:	0011883a 	mov	r8,zero
6102440c:	02500734 	movhi	r9,16412
61024410:	1009883a 	mov	r4,r2
61024414:	180b883a 	mov	r5,r3
61024418:	480f883a 	mov	r7,r9
6102441c:	400d883a 	mov	r6,r8
61024420:	102a0e80 	call	6102a0e8 <__adddf3>
61024424:	d9000f17 	ldw	r4,60(sp)
61024428:	102d883a 	mov	r22,r2
6102442c:	00bf3034 	movhi	r2,64704
61024430:	18b9883a 	add	fp,r3,r2
61024434:	e02f883a 	mov	r23,fp
61024438:	20028f1e 	bne	r4,zero,61024e78 <_dtoa_r+0xf3c>
6102443c:	0005883a 	mov	r2,zero
61024440:	00d00534 	movhi	r3,16404
61024444:	a009883a 	mov	r4,r20
61024448:	a80b883a 	mov	r5,r21
6102444c:	180f883a 	mov	r7,r3
61024450:	100d883a 	mov	r6,r2
61024454:	102a0680 	call	6102a068 <__subdf3>
61024458:	1009883a 	mov	r4,r2
6102445c:	e00f883a 	mov	r7,fp
61024460:	180b883a 	mov	r5,r3
61024464:	b00d883a 	mov	r6,r22
61024468:	1025883a 	mov	r18,r2
6102446c:	1827883a 	mov	r19,r3
61024470:	102a8780 	call	6102a878 <__gtdf2>
61024474:	00834f16 	blt	zero,r2,610251b4 <_dtoa_r+0x1278>
61024478:	e0e0003c 	xorhi	r3,fp,32768
6102447c:	9009883a 	mov	r4,r18
61024480:	980b883a 	mov	r5,r19
61024484:	180f883a 	mov	r7,r3
61024488:	b00d883a 	mov	r6,r22
6102448c:	102a9880 	call	6102a988 <__ltdf2>
61024490:	1000080e 	bge	r2,zero,610244b4 <_dtoa_r+0x578>
61024494:	0027883a 	mov	r19,zero
61024498:	0025883a 	mov	r18,zero
6102449c:	d8802617 	ldw	r2,152(sp)
610244a0:	df000517 	ldw	fp,20(sp)
610244a4:	d8000615 	stw	zero,24(sp)
610244a8:	0084303a 	nor	r2,zero,r2
610244ac:	d8800d15 	stw	r2,52(sp)
610244b0:	00019b06 	br	61024b20 <_dtoa_r+0xbe4>
610244b4:	d9801217 	ldw	r6,72(sp)
610244b8:	d8801317 	ldw	r2,76(sp)
610244bc:	3029883a 	mov	r20,r6
610244c0:	102b883a 	mov	r21,r2
610244c4:	d8c00217 	ldw	r3,8(sp)
610244c8:	18008516 	blt	r3,zero,610246e0 <_dtoa_r+0x7a4>
610244cc:	d9000d17 	ldw	r4,52(sp)
610244d0:	00800384 	movi	r2,14
610244d4:	11008216 	blt	r2,r4,610246e0 <_dtoa_r+0x7a4>
610244d8:	200490fa 	slli	r2,r4,3
610244dc:	d9802617 	ldw	r6,152(sp)
610244e0:	00d840f4 	movhi	r3,24835
610244e4:	18f7da04 	addi	r3,r3,-8344
610244e8:	10c5883a 	add	r2,r2,r3
610244ec:	14800017 	ldw	r18,0(r2)
610244f0:	14c00117 	ldw	r19,4(r2)
610244f4:	30031e16 	blt	r6,zero,61025170 <_dtoa_r+0x1234>
610244f8:	d9000517 	ldw	r4,20(sp)
610244fc:	d8c00f17 	ldw	r3,60(sp)
61024500:	a823883a 	mov	r17,r21
61024504:	a021883a 	mov	r16,r20
61024508:	192b883a 	add	r21,r3,r4
6102450c:	2039883a 	mov	fp,r4
61024510:	00000f06 	br	61024550 <_dtoa_r+0x614>
61024514:	0005883a 	mov	r2,zero
61024518:	00d00934 	movhi	r3,16420
6102451c:	5009883a 	mov	r4,r10
61024520:	580b883a 	mov	r5,r11
61024524:	180f883a 	mov	r7,r3
61024528:	100d883a 	mov	r6,r2
6102452c:	102a15c0 	call	6102a15c <__muldf3>
61024530:	180b883a 	mov	r5,r3
61024534:	000d883a 	mov	r6,zero
61024538:	000f883a 	mov	r7,zero
6102453c:	1009883a 	mov	r4,r2
61024540:	1021883a 	mov	r16,r2
61024544:	1823883a 	mov	r17,r3
61024548:	102a7f00 	call	6102a7f0 <__nedf2>
6102454c:	10004526 	beq	r2,zero,61024664 <_dtoa_r+0x728>
61024550:	900d883a 	mov	r6,r18
61024554:	980f883a 	mov	r7,r19
61024558:	8009883a 	mov	r4,r16
6102455c:	880b883a 	mov	r5,r17
61024560:	102a5100 	call	6102a510 <__divdf3>
61024564:	180b883a 	mov	r5,r3
61024568:	1009883a 	mov	r4,r2
6102456c:	102ab080 	call	6102ab08 <__fixdfsi>
61024570:	1009883a 	mov	r4,r2
61024574:	1029883a 	mov	r20,r2
61024578:	102aa100 	call	6102aa10 <__floatsidf>
6102457c:	180f883a 	mov	r7,r3
61024580:	9009883a 	mov	r4,r18
61024584:	980b883a 	mov	r5,r19
61024588:	100d883a 	mov	r6,r2
6102458c:	102a15c0 	call	6102a15c <__muldf3>
61024590:	180f883a 	mov	r7,r3
61024594:	880b883a 	mov	r5,r17
61024598:	8009883a 	mov	r4,r16
6102459c:	100d883a 	mov	r6,r2
610245a0:	102a0680 	call	6102a068 <__subdf3>
610245a4:	1015883a 	mov	r10,r2
610245a8:	a0800c04 	addi	r2,r20,48
610245ac:	e0800005 	stb	r2,0(fp)
610245b0:	e7000044 	addi	fp,fp,1
610245b4:	1817883a 	mov	r11,r3
610245b8:	e57fd61e 	bne	fp,r21,61024514 <_dtoa_r+0x5d8>
610245bc:	500d883a 	mov	r6,r10
610245c0:	180f883a 	mov	r7,r3
610245c4:	5009883a 	mov	r4,r10
610245c8:	180b883a 	mov	r5,r3
610245cc:	102a0e80 	call	6102a0e8 <__adddf3>
610245d0:	100d883a 	mov	r6,r2
610245d4:	9009883a 	mov	r4,r18
610245d8:	980b883a 	mov	r5,r19
610245dc:	180f883a 	mov	r7,r3
610245e0:	1021883a 	mov	r16,r2
610245e4:	1823883a 	mov	r17,r3
610245e8:	102a9880 	call	6102a988 <__ltdf2>
610245ec:	10000816 	blt	r2,zero,61024610 <_dtoa_r+0x6d4>
610245f0:	980b883a 	mov	r5,r19
610245f4:	800d883a 	mov	r6,r16
610245f8:	880f883a 	mov	r7,r17
610245fc:	9009883a 	mov	r4,r18
61024600:	102a7680 	call	6102a768 <__eqdf2>
61024604:	1000171e 	bne	r2,zero,61024664 <_dtoa_r+0x728>
61024608:	a080004c 	andi	r2,r20,1
6102460c:	10001526 	beq	r2,zero,61024664 <_dtoa_r+0x728>
61024610:	d8800d17 	ldw	r2,52(sp)
61024614:	d8800415 	stw	r2,16(sp)
61024618:	e009883a 	mov	r4,fp
6102461c:	213fffc4 	addi	r4,r4,-1
61024620:	20c00007 	ldb	r3,0(r4)
61024624:	00800e44 	movi	r2,57
61024628:	1880081e 	bne	r3,r2,6102464c <_dtoa_r+0x710>
6102462c:	d8800517 	ldw	r2,20(sp)
61024630:	113ffa1e 	bne	r2,r4,6102461c <_dtoa_r+0x6e0>
61024634:	d8c00417 	ldw	r3,16(sp)
61024638:	d9800517 	ldw	r6,20(sp)
6102463c:	00800c04 	movi	r2,48
61024640:	18c00044 	addi	r3,r3,1
61024644:	d8c00415 	stw	r3,16(sp)
61024648:	30800005 	stb	r2,0(r6)
6102464c:	20800003 	ldbu	r2,0(r4)
61024650:	d8c00417 	ldw	r3,16(sp)
61024654:	27000044 	addi	fp,r4,1
61024658:	10800044 	addi	r2,r2,1
6102465c:	d8c00d15 	stw	r3,52(sp)
61024660:	20800005 	stb	r2,0(r4)
61024664:	d9001617 	ldw	r4,88(sp)
61024668:	d9400717 	ldw	r5,28(sp)
6102466c:	10270300 	call	61027030 <_Bfree>
61024670:	e0000005 	stb	zero,0(fp)
61024674:	d9800d17 	ldw	r6,52(sp)
61024678:	d8c02717 	ldw	r3,156(sp)
6102467c:	d9002917 	ldw	r4,164(sp)
61024680:	30800044 	addi	r2,r6,1
61024684:	18800015 	stw	r2,0(r3)
61024688:	20029c26 	beq	r4,zero,610250fc <_dtoa_r+0x11c0>
6102468c:	d8c00517 	ldw	r3,20(sp)
61024690:	27000015 	stw	fp,0(r4)
61024694:	003e5d06 	br	6102400c <_dtoa_r+0xd0>
61024698:	d9800d17 	ldw	r6,52(sp)
6102469c:	00d840f4 	movhi	r3,24835
610246a0:	18f7da04 	addi	r3,r3,-8344
610246a4:	d9001217 	ldw	r4,72(sp)
610246a8:	300490fa 	slli	r2,r6,3
610246ac:	d9401317 	ldw	r5,76(sp)
610246b0:	10c5883a 	add	r2,r2,r3
610246b4:	12000017 	ldw	r8,0(r2)
610246b8:	12400117 	ldw	r9,4(r2)
610246bc:	400d883a 	mov	r6,r8
610246c0:	480f883a 	mov	r7,r9
610246c4:	102a9880 	call	6102a988 <__ltdf2>
610246c8:	1000030e 	bge	r2,zero,610246d8 <_dtoa_r+0x79c>
610246cc:	d8800d17 	ldw	r2,52(sp)
610246d0:	10bfffc4 	addi	r2,r2,-1
610246d4:	d8800d15 	stw	r2,52(sp)
610246d8:	d8000c15 	stw	zero,48(sp)
610246dc:	003ea806 	br	61024180 <_dtoa_r+0x244>
610246e0:	d9000b17 	ldw	r4,44(sp)
610246e4:	202cc03a 	cmpne	r22,r4,zero
610246e8:	b000c71e 	bne	r22,zero,61024a08 <_dtoa_r+0xacc>
610246ec:	dc001117 	ldw	r16,68(sp)
610246f0:	dc801017 	ldw	r18,64(sp)
610246f4:	0027883a 	mov	r19,zero
610246f8:	04000b0e 	bge	zero,r16,61024728 <_dtoa_r+0x7ec>
610246fc:	d8c00a17 	ldw	r3,40(sp)
61024700:	00c0090e 	bge	zero,r3,61024728 <_dtoa_r+0x7ec>
61024704:	8005883a 	mov	r2,r16
61024708:	1c011316 	blt	r3,r16,61024b58 <_dtoa_r+0xc1c>
6102470c:	d9000a17 	ldw	r4,40(sp)
61024710:	d9801117 	ldw	r6,68(sp)
61024714:	80a1c83a 	sub	r16,r16,r2
61024718:	2089c83a 	sub	r4,r4,r2
6102471c:	308dc83a 	sub	r6,r6,r2
61024720:	d9000a15 	stw	r4,40(sp)
61024724:	d9801115 	stw	r6,68(sp)
61024728:	d8801017 	ldw	r2,64(sp)
6102472c:	0080150e 	bge	zero,r2,61024784 <_dtoa_r+0x848>
61024730:	d8c00b17 	ldw	r3,44(sp)
61024734:	1805003a 	cmpeq	r2,r3,zero
61024738:	1001c91e 	bne	r2,zero,61024e60 <_dtoa_r+0xf24>
6102473c:	04800e0e 	bge	zero,r18,61024778 <_dtoa_r+0x83c>
61024740:	d9001617 	ldw	r4,88(sp)
61024744:	980b883a 	mov	r5,r19
61024748:	900d883a 	mov	r6,r18
6102474c:	1027de40 	call	61027de4 <__pow5mult>
61024750:	d9001617 	ldw	r4,88(sp)
61024754:	d9800717 	ldw	r6,28(sp)
61024758:	100b883a 	mov	r5,r2
6102475c:	1027883a 	mov	r19,r2
61024760:	1027ac00 	call	61027ac0 <__multiply>
61024764:	d9001617 	ldw	r4,88(sp)
61024768:	d9400717 	ldw	r5,28(sp)
6102476c:	1023883a 	mov	r17,r2
61024770:	10270300 	call	61027030 <_Bfree>
61024774:	dc400715 	stw	r17,28(sp)
61024778:	d9001017 	ldw	r4,64(sp)
6102477c:	248dc83a 	sub	r6,r4,r18
61024780:	30010e1e 	bne	r6,zero,61024bbc <_dtoa_r+0xc80>
61024784:	d9001617 	ldw	r4,88(sp)
61024788:	04400044 	movi	r17,1
6102478c:	880b883a 	mov	r5,r17
61024790:	1027ca80 	call	61027ca8 <__i2b>
61024794:	d9800917 	ldw	r6,36(sp)
61024798:	1025883a 	mov	r18,r2
6102479c:	0180040e 	bge	zero,r6,610247b0 <_dtoa_r+0x874>
610247a0:	d9001617 	ldw	r4,88(sp)
610247a4:	100b883a 	mov	r5,r2
610247a8:	1027de40 	call	61027de4 <__pow5mult>
610247ac:	1025883a 	mov	r18,r2
610247b0:	d8801717 	ldw	r2,92(sp)
610247b4:	8880f30e 	bge	r17,r2,61024b84 <_dtoa_r+0xc48>
610247b8:	0023883a 	mov	r17,zero
610247bc:	d9800917 	ldw	r6,36(sp)
610247c0:	30019e1e 	bne	r6,zero,61024e3c <_dtoa_r+0xf00>
610247c4:	00c00044 	movi	r3,1
610247c8:	d9000a17 	ldw	r4,40(sp)
610247cc:	20c5883a 	add	r2,r4,r3
610247d0:	10c007cc 	andi	r3,r2,31
610247d4:	1800841e 	bne	r3,zero,610249e8 <_dtoa_r+0xaac>
610247d8:	00800704 	movi	r2,28
610247dc:	d9000a17 	ldw	r4,40(sp)
610247e0:	d9801117 	ldw	r6,68(sp)
610247e4:	80a1883a 	add	r16,r16,r2
610247e8:	2089883a 	add	r4,r4,r2
610247ec:	308d883a 	add	r6,r6,r2
610247f0:	d9000a15 	stw	r4,40(sp)
610247f4:	d9801115 	stw	r6,68(sp)
610247f8:	d8801117 	ldw	r2,68(sp)
610247fc:	0080050e 	bge	zero,r2,61024814 <_dtoa_r+0x8d8>
61024800:	d9400717 	ldw	r5,28(sp)
61024804:	d9001617 	ldw	r4,88(sp)
61024808:	100d883a 	mov	r6,r2
6102480c:	10279740 	call	61027974 <__lshift>
61024810:	d8800715 	stw	r2,28(sp)
61024814:	d8c00a17 	ldw	r3,40(sp)
61024818:	00c0050e 	bge	zero,r3,61024830 <_dtoa_r+0x8f4>
6102481c:	d9001617 	ldw	r4,88(sp)
61024820:	900b883a 	mov	r5,r18
61024824:	180d883a 	mov	r6,r3
61024828:	10279740 	call	61027974 <__lshift>
6102482c:	1025883a 	mov	r18,r2
61024830:	d9000c17 	ldw	r4,48(sp)
61024834:	2005003a 	cmpeq	r2,r4,zero
61024838:	10016f26 	beq	r2,zero,61024df8 <_dtoa_r+0xebc>
6102483c:	d9000f17 	ldw	r4,60(sp)
61024840:	0102170e 	bge	zero,r4,610250a0 <_dtoa_r+0x1164>
61024844:	d9800b17 	ldw	r6,44(sp)
61024848:	3005003a 	cmpeq	r2,r6,zero
6102484c:	1000881e 	bne	r2,zero,61024a70 <_dtoa_r+0xb34>
61024850:	0400050e 	bge	zero,r16,61024868 <_dtoa_r+0x92c>
61024854:	d9001617 	ldw	r4,88(sp)
61024858:	980b883a 	mov	r5,r19
6102485c:	800d883a 	mov	r6,r16
61024860:	10279740 	call	61027974 <__lshift>
61024864:	1027883a 	mov	r19,r2
61024868:	8804c03a 	cmpne	r2,r17,zero
6102486c:	1002541e 	bne	r2,zero,610251c0 <_dtoa_r+0x1284>
61024870:	980b883a 	mov	r5,r19
61024874:	dd800517 	ldw	r22,20(sp)
61024878:	dcc00615 	stw	r19,24(sp)
6102487c:	a700004c 	andi	fp,r20,1
61024880:	2827883a 	mov	r19,r5
61024884:	d9000717 	ldw	r4,28(sp)
61024888:	900b883a 	mov	r5,r18
6102488c:	1023d240 	call	61023d24 <quorem>
61024890:	d9000717 	ldw	r4,28(sp)
61024894:	d9400617 	ldw	r5,24(sp)
61024898:	1023883a 	mov	r17,r2
6102489c:	8dc00c04 	addi	r23,r17,48
610248a0:	102718c0 	call	6102718c <__mcmp>
610248a4:	d9001617 	ldw	r4,88(sp)
610248a8:	900b883a 	mov	r5,r18
610248ac:	980d883a 	mov	r6,r19
610248b0:	1029883a 	mov	r20,r2
610248b4:	10277e80 	call	610277e8 <__mdiff>
610248b8:	102b883a 	mov	r21,r2
610248bc:	10800317 	ldw	r2,12(r2)
610248c0:	1001281e 	bne	r2,zero,61024d64 <_dtoa_r+0xe28>
610248c4:	d9000717 	ldw	r4,28(sp)
610248c8:	a80b883a 	mov	r5,r21
610248cc:	102718c0 	call	6102718c <__mcmp>
610248d0:	d9001617 	ldw	r4,88(sp)
610248d4:	1021883a 	mov	r16,r2
610248d8:	a80b883a 	mov	r5,r21
610248dc:	10270300 	call	61027030 <_Bfree>
610248e0:	8000041e 	bne	r16,zero,610248f4 <_dtoa_r+0x9b8>
610248e4:	d8801717 	ldw	r2,92(sp)
610248e8:	1000021e 	bne	r2,zero,610248f4 <_dtoa_r+0x9b8>
610248ec:	e004c03a 	cmpne	r2,fp,zero
610248f0:	10011726 	beq	r2,zero,61024d50 <_dtoa_r+0xe14>
610248f4:	a0010616 	blt	r20,zero,61024d10 <_dtoa_r+0xdd4>
610248f8:	a000041e 	bne	r20,zero,6102490c <_dtoa_r+0x9d0>
610248fc:	d8c01717 	ldw	r3,92(sp)
61024900:	1800021e 	bne	r3,zero,6102490c <_dtoa_r+0x9d0>
61024904:	e004c03a 	cmpne	r2,fp,zero
61024908:	10010126 	beq	r2,zero,61024d10 <_dtoa_r+0xdd4>
6102490c:	04023d16 	blt	zero,r16,61025204 <_dtoa_r+0x12c8>
61024910:	b5c00005 	stb	r23,0(r22)
61024914:	d9800517 	ldw	r6,20(sp)
61024918:	d9000f17 	ldw	r4,60(sp)
6102491c:	b5800044 	addi	r22,r22,1
61024920:	3105883a 	add	r2,r6,r4
61024924:	b0806526 	beq	r22,r2,61024abc <_dtoa_r+0xb80>
61024928:	d9400717 	ldw	r5,28(sp)
6102492c:	d9001617 	ldw	r4,88(sp)
61024930:	01800284 	movi	r6,10
61024934:	000f883a 	mov	r7,zero
61024938:	1027ce40 	call	61027ce4 <__multadd>
6102493c:	d8800715 	stw	r2,28(sp)
61024940:	d8800617 	ldw	r2,24(sp)
61024944:	14c10c26 	beq	r2,r19,61024d78 <_dtoa_r+0xe3c>
61024948:	d9400617 	ldw	r5,24(sp)
6102494c:	d9001617 	ldw	r4,88(sp)
61024950:	01800284 	movi	r6,10
61024954:	000f883a 	mov	r7,zero
61024958:	1027ce40 	call	61027ce4 <__multadd>
6102495c:	d9001617 	ldw	r4,88(sp)
61024960:	980b883a 	mov	r5,r19
61024964:	01800284 	movi	r6,10
61024968:	000f883a 	mov	r7,zero
6102496c:	d8800615 	stw	r2,24(sp)
61024970:	1027ce40 	call	61027ce4 <__multadd>
61024974:	1027883a 	mov	r19,r2
61024978:	003fc206 	br	61024884 <_dtoa_r+0x948>
6102497c:	2445c83a 	sub	r2,r4,r17
61024980:	a088983a 	sll	r4,r20,r2
61024984:	003e4b06 	br	610242b4 <_dtoa_r+0x378>
61024988:	01bfffc4 	movi	r6,-1
6102498c:	00800044 	movi	r2,1
61024990:	d9800e15 	stw	r6,56(sp)
61024994:	d9800f15 	stw	r6,60(sp)
61024998:	d8800b15 	stw	r2,44(sp)
6102499c:	d8c01617 	ldw	r3,88(sp)
610249a0:	008005c4 	movi	r2,23
610249a4:	18001115 	stw	zero,68(r3)
610249a8:	1580082e 	bgeu	r2,r22,610249cc <_dtoa_r+0xa90>
610249ac:	00c00104 	movi	r3,4
610249b0:	0009883a 	mov	r4,zero
610249b4:	18c7883a 	add	r3,r3,r3
610249b8:	18800504 	addi	r2,r3,20
610249bc:	21000044 	addi	r4,r4,1
610249c0:	b0bffc2e 	bgeu	r22,r2,610249b4 <_dtoa_r+0xa78>
610249c4:	d9801617 	ldw	r6,88(sp)
610249c8:	31001115 	stw	r4,68(r6)
610249cc:	dc000f17 	ldw	r16,60(sp)
610249d0:	003e4b06 	br	61024300 <_dtoa_r+0x3c4>
610249d4:	d9801717 	ldw	r6,92(sp)
610249d8:	0023883a 	mov	r17,zero
610249dc:	31bfff04 	addi	r6,r6,-4
610249e0:	d9801715 	stw	r6,92(sp)
610249e4:	003df806 	br	610241c8 <_dtoa_r+0x28c>
610249e8:	00800804 	movi	r2,32
610249ec:	10c9c83a 	sub	r4,r2,r3
610249f0:	00c00104 	movi	r3,4
610249f4:	19005a16 	blt	r3,r4,61024b60 <_dtoa_r+0xc24>
610249f8:	008000c4 	movi	r2,3
610249fc:	113f7e16 	blt	r2,r4,610247f8 <_dtoa_r+0x8bc>
61024a00:	20800704 	addi	r2,r4,28
61024a04:	003f7506 	br	610247dc <_dtoa_r+0x8a0>
61024a08:	d9801717 	ldw	r6,92(sp)
61024a0c:	00800044 	movi	r2,1
61024a10:	1180a10e 	bge	r2,r6,61024c98 <_dtoa_r+0xd5c>
61024a14:	d9800f17 	ldw	r6,60(sp)
61024a18:	d8c01017 	ldw	r3,64(sp)
61024a1c:	30bfffc4 	addi	r2,r6,-1
61024a20:	1881c616 	blt	r3,r2,6102513c <_dtoa_r+0x1200>
61024a24:	18a5c83a 	sub	r18,r3,r2
61024a28:	d8800f17 	ldw	r2,60(sp)
61024a2c:	10026216 	blt	r2,zero,610253b8 <_dtoa_r+0x147c>
61024a30:	dc001117 	ldw	r16,68(sp)
61024a34:	1007883a 	mov	r3,r2
61024a38:	d9800a17 	ldw	r6,40(sp)
61024a3c:	d8801117 	ldw	r2,68(sp)
61024a40:	d9001617 	ldw	r4,88(sp)
61024a44:	30cd883a 	add	r6,r6,r3
61024a48:	10c5883a 	add	r2,r2,r3
61024a4c:	01400044 	movi	r5,1
61024a50:	d9800a15 	stw	r6,40(sp)
61024a54:	d8801115 	stw	r2,68(sp)
61024a58:	1027ca80 	call	61027ca8 <__i2b>
61024a5c:	1027883a 	mov	r19,r2
61024a60:	003f2506 	br	610246f8 <_dtoa_r+0x7bc>
61024a64:	00d840f4 	movhi	r3,24835
61024a68:	18f7bc04 	addi	r3,r3,-8464
61024a6c:	003d6706 	br	6102400c <_dtoa_r+0xd0>
61024a70:	dd800517 	ldw	r22,20(sp)
61024a74:	04000044 	movi	r16,1
61024a78:	00000706 	br	61024a98 <_dtoa_r+0xb5c>
61024a7c:	d9400717 	ldw	r5,28(sp)
61024a80:	d9001617 	ldw	r4,88(sp)
61024a84:	01800284 	movi	r6,10
61024a88:	000f883a 	mov	r7,zero
61024a8c:	1027ce40 	call	61027ce4 <__multadd>
61024a90:	d8800715 	stw	r2,28(sp)
61024a94:	84000044 	addi	r16,r16,1
61024a98:	d9000717 	ldw	r4,28(sp)
61024a9c:	900b883a 	mov	r5,r18
61024aa0:	1023d240 	call	61023d24 <quorem>
61024aa4:	15c00c04 	addi	r23,r2,48
61024aa8:	b5c00005 	stb	r23,0(r22)
61024aac:	d8c00f17 	ldw	r3,60(sp)
61024ab0:	b5800044 	addi	r22,r22,1
61024ab4:	80fff116 	blt	r16,r3,61024a7c <_dtoa_r+0xb40>
61024ab8:	d8000615 	stw	zero,24(sp)
61024abc:	d9400717 	ldw	r5,28(sp)
61024ac0:	d9001617 	ldw	r4,88(sp)
61024ac4:	01800044 	movi	r6,1
61024ac8:	10279740 	call	61027974 <__lshift>
61024acc:	1009883a 	mov	r4,r2
61024ad0:	900b883a 	mov	r5,r18
61024ad4:	d8800715 	stw	r2,28(sp)
61024ad8:	102718c0 	call	6102718c <__mcmp>
61024adc:	00803c0e 	bge	zero,r2,61024bd0 <_dtoa_r+0xc94>
61024ae0:	b009883a 	mov	r4,r22
61024ae4:	213fffc4 	addi	r4,r4,-1
61024ae8:	21400003 	ldbu	r5,0(r4)
61024aec:	00800e44 	movi	r2,57
61024af0:	28c03fcc 	andi	r3,r5,255
61024af4:	18c0201c 	xori	r3,r3,128
61024af8:	18ffe004 	addi	r3,r3,-128
61024afc:	1881981e 	bne	r3,r2,61025160 <_dtoa_r+0x1224>
61024b00:	d9800517 	ldw	r6,20(sp)
61024b04:	21bff71e 	bne	r4,r6,61024ae4 <_dtoa_r+0xba8>
61024b08:	d8800d17 	ldw	r2,52(sp)
61024b0c:	37000044 	addi	fp,r6,1
61024b10:	10800044 	addi	r2,r2,1
61024b14:	d8800d15 	stw	r2,52(sp)
61024b18:	00800c44 	movi	r2,49
61024b1c:	30800005 	stb	r2,0(r6)
61024b20:	d9001617 	ldw	r4,88(sp)
61024b24:	900b883a 	mov	r5,r18
61024b28:	10270300 	call	61027030 <_Bfree>
61024b2c:	983ecd26 	beq	r19,zero,61024664 <_dtoa_r+0x728>
61024b30:	d8c00617 	ldw	r3,24(sp)
61024b34:	18000426 	beq	r3,zero,61024b48 <_dtoa_r+0xc0c>
61024b38:	1cc00326 	beq	r3,r19,61024b48 <_dtoa_r+0xc0c>
61024b3c:	d9001617 	ldw	r4,88(sp)
61024b40:	180b883a 	mov	r5,r3
61024b44:	10270300 	call	61027030 <_Bfree>
61024b48:	d9001617 	ldw	r4,88(sp)
61024b4c:	980b883a 	mov	r5,r19
61024b50:	10270300 	call	61027030 <_Bfree>
61024b54:	003ec306 	br	61024664 <_dtoa_r+0x728>
61024b58:	1805883a 	mov	r2,r3
61024b5c:	003eeb06 	br	6102470c <_dtoa_r+0x7d0>
61024b60:	d9800a17 	ldw	r6,40(sp)
61024b64:	d8c01117 	ldw	r3,68(sp)
61024b68:	20bfff04 	addi	r2,r4,-4
61024b6c:	308d883a 	add	r6,r6,r2
61024b70:	1887883a 	add	r3,r3,r2
61024b74:	80a1883a 	add	r16,r16,r2
61024b78:	d9800a15 	stw	r6,40(sp)
61024b7c:	d8c01115 	stw	r3,68(sp)
61024b80:	003f1d06 	br	610247f8 <_dtoa_r+0x8bc>
61024b84:	a03f0c1e 	bne	r20,zero,610247b8 <_dtoa_r+0x87c>
61024b88:	00800434 	movhi	r2,16
61024b8c:	10bfffc4 	addi	r2,r2,-1
61024b90:	a884703a 	and	r2,r21,r2
61024b94:	103f081e 	bne	r2,zero,610247b8 <_dtoa_r+0x87c>
61024b98:	a89ffc2c 	andhi	r2,r21,32752
61024b9c:	103f0626 	beq	r2,zero,610247b8 <_dtoa_r+0x87c>
61024ba0:	d8c01117 	ldw	r3,68(sp)
61024ba4:	d9000a17 	ldw	r4,40(sp)
61024ba8:	18c00044 	addi	r3,r3,1
61024bac:	21000044 	addi	r4,r4,1
61024bb0:	d8c01115 	stw	r3,68(sp)
61024bb4:	d9000a15 	stw	r4,40(sp)
61024bb8:	003f0006 	br	610247bc <_dtoa_r+0x880>
61024bbc:	d9400717 	ldw	r5,28(sp)
61024bc0:	d9001617 	ldw	r4,88(sp)
61024bc4:	1027de40 	call	61027de4 <__pow5mult>
61024bc8:	d8800715 	stw	r2,28(sp)
61024bcc:	003eed06 	br	61024784 <_dtoa_r+0x848>
61024bd0:	1000021e 	bne	r2,zero,61024bdc <_dtoa_r+0xca0>
61024bd4:	b880004c 	andi	r2,r23,1
61024bd8:	103fc11e 	bne	r2,zero,61024ae0 <_dtoa_r+0xba4>
61024bdc:	b5bfffc4 	addi	r22,r22,-1
61024be0:	b0c00007 	ldb	r3,0(r22)
61024be4:	00800c04 	movi	r2,48
61024be8:	18bffc26 	beq	r3,r2,61024bdc <_dtoa_r+0xca0>
61024bec:	b7000044 	addi	fp,r22,1
61024bf0:	003fcb06 	br	61024b20 <_dtoa_r+0xbe4>
61024bf4:	d9800d17 	ldw	r6,52(sp)
61024bf8:	018fc83a 	sub	r7,zero,r6
61024bfc:	3801f726 	beq	r7,zero,610253dc <_dtoa_r+0x14a0>
61024c00:	398003cc 	andi	r6,r7,15
61024c04:	300c90fa 	slli	r6,r6,3
61024c08:	015840f4 	movhi	r5,24835
61024c0c:	2977da04 	addi	r5,r5,-8344
61024c10:	d9001217 	ldw	r4,72(sp)
61024c14:	314d883a 	add	r6,r6,r5
61024c18:	30c00117 	ldw	r3,4(r6)
61024c1c:	30800017 	ldw	r2,0(r6)
61024c20:	d9401317 	ldw	r5,76(sp)
61024c24:	3821d13a 	srai	r16,r7,4
61024c28:	100d883a 	mov	r6,r2
61024c2c:	180f883a 	mov	r7,r3
61024c30:	102a15c0 	call	6102a15c <__muldf3>
61024c34:	1011883a 	mov	r8,r2
61024c38:	1813883a 	mov	r9,r3
61024c3c:	1029883a 	mov	r20,r2
61024c40:	182b883a 	mov	r21,r3
61024c44:	8001e526 	beq	r16,zero,610253dc <_dtoa_r+0x14a0>
61024c48:	05800084 	movi	r22,2
61024c4c:	045840f4 	movhi	r17,24835
61024c50:	8c780c04 	addi	r17,r17,-8144
61024c54:	8080004c 	andi	r2,r16,1
61024c58:	1005003a 	cmpeq	r2,r2,zero
61024c5c:	1000081e 	bne	r2,zero,61024c80 <_dtoa_r+0xd44>
61024c60:	89800017 	ldw	r6,0(r17)
61024c64:	89c00117 	ldw	r7,4(r17)
61024c68:	480b883a 	mov	r5,r9
61024c6c:	4009883a 	mov	r4,r8
61024c70:	102a15c0 	call	6102a15c <__muldf3>
61024c74:	1011883a 	mov	r8,r2
61024c78:	b5800044 	addi	r22,r22,1
61024c7c:	1813883a 	mov	r9,r3
61024c80:	8021d07a 	srai	r16,r16,1
61024c84:	8c400204 	addi	r17,r17,8
61024c88:	803ff21e 	bne	r16,zero,61024c54 <_dtoa_r+0xd18>
61024c8c:	4029883a 	mov	r20,r8
61024c90:	482b883a 	mov	r21,r9
61024c94:	003dca06 	br	610243c0 <_dtoa_r+0x484>
61024c98:	d9000817 	ldw	r4,32(sp)
61024c9c:	2005003a 	cmpeq	r2,r4,zero
61024ca0:	1001f61e 	bne	r2,zero,6102547c <_dtoa_r+0x1540>
61024ca4:	dc001117 	ldw	r16,68(sp)
61024ca8:	dc801017 	ldw	r18,64(sp)
61024cac:	18c10cc4 	addi	r3,r3,1075
61024cb0:	003f6106 	br	61024a38 <_dtoa_r+0xafc>
61024cb4:	d8000b15 	stw	zero,44(sp)
61024cb8:	d9802617 	ldw	r6,152(sp)
61024cbc:	d8c00d17 	ldw	r3,52(sp)
61024cc0:	30800044 	addi	r2,r6,1
61024cc4:	18ad883a 	add	r22,r3,r2
61024cc8:	b13fffc4 	addi	r4,r22,-1
61024ccc:	d9000e15 	stw	r4,56(sp)
61024cd0:	0581f60e 	bge	zero,r22,610254ac <_dtoa_r+0x1570>
61024cd4:	dd800f15 	stw	r22,60(sp)
61024cd8:	003f3006 	br	6102499c <_dtoa_r+0xa60>
61024cdc:	d8000b15 	stw	zero,44(sp)
61024ce0:	d9002617 	ldw	r4,152(sp)
61024ce4:	0101eb0e 	bge	zero,r4,61025494 <_dtoa_r+0x1558>
61024ce8:	202d883a 	mov	r22,r4
61024cec:	d9000e15 	stw	r4,56(sp)
61024cf0:	d9000f15 	stw	r4,60(sp)
61024cf4:	003f2906 	br	6102499c <_dtoa_r+0xa60>
61024cf8:	01800044 	movi	r6,1
61024cfc:	d9800b15 	stw	r6,44(sp)
61024d00:	003ff706 	br	61024ce0 <_dtoa_r+0xda4>
61024d04:	01000044 	movi	r4,1
61024d08:	d9000b15 	stw	r4,44(sp)
61024d0c:	003fea06 	br	61024cb8 <_dtoa_r+0xd7c>
61024d10:	04000c0e 	bge	zero,r16,61024d44 <_dtoa_r+0xe08>
61024d14:	d9400717 	ldw	r5,28(sp)
61024d18:	d9001617 	ldw	r4,88(sp)
61024d1c:	01800044 	movi	r6,1
61024d20:	10279740 	call	61027974 <__lshift>
61024d24:	1009883a 	mov	r4,r2
61024d28:	900b883a 	mov	r5,r18
61024d2c:	d8800715 	stw	r2,28(sp)
61024d30:	102718c0 	call	6102718c <__mcmp>
61024d34:	0081e00e 	bge	zero,r2,610254b8 <_dtoa_r+0x157c>
61024d38:	bdc00044 	addi	r23,r23,1
61024d3c:	00800e84 	movi	r2,58
61024d40:	b881a226 	beq	r23,r2,610253cc <_dtoa_r+0x1490>
61024d44:	b7000044 	addi	fp,r22,1
61024d48:	b5c00005 	stb	r23,0(r22)
61024d4c:	003f7406 	br	61024b20 <_dtoa_r+0xbe4>
61024d50:	00800e44 	movi	r2,57
61024d54:	b8819d26 	beq	r23,r2,610253cc <_dtoa_r+0x1490>
61024d58:	053ffa0e 	bge	zero,r20,61024d44 <_dtoa_r+0xe08>
61024d5c:	8dc00c44 	addi	r23,r17,49
61024d60:	003ff806 	br	61024d44 <_dtoa_r+0xe08>
61024d64:	d9001617 	ldw	r4,88(sp)
61024d68:	a80b883a 	mov	r5,r21
61024d6c:	04000044 	movi	r16,1
61024d70:	10270300 	call	61027030 <_Bfree>
61024d74:	003edf06 	br	610248f4 <_dtoa_r+0x9b8>
61024d78:	d9001617 	ldw	r4,88(sp)
61024d7c:	980b883a 	mov	r5,r19
61024d80:	01800284 	movi	r6,10
61024d84:	000f883a 	mov	r7,zero
61024d88:	1027ce40 	call	61027ce4 <__multadd>
61024d8c:	1027883a 	mov	r19,r2
61024d90:	d8800615 	stw	r2,24(sp)
61024d94:	003ebb06 	br	61024884 <_dtoa_r+0x948>
61024d98:	d9801117 	ldw	r6,68(sp)
61024d9c:	d8800d17 	ldw	r2,52(sp)
61024da0:	d8000915 	stw	zero,36(sp)
61024da4:	308dc83a 	sub	r6,r6,r2
61024da8:	0087c83a 	sub	r3,zero,r2
61024dac:	d9801115 	stw	r6,68(sp)
61024db0:	d8c01015 	stw	r3,64(sp)
61024db4:	003cfe06 	br	610241b0 <_dtoa_r+0x274>
61024db8:	018dc83a 	sub	r6,zero,r6
61024dbc:	d9801115 	stw	r6,68(sp)
61024dc0:	d8000a15 	stw	zero,40(sp)
61024dc4:	003cf306 	br	61024194 <_dtoa_r+0x258>
61024dc8:	d9000d17 	ldw	r4,52(sp)
61024dcc:	102aa100 	call	6102aa10 <__floatsidf>
61024dd0:	880b883a 	mov	r5,r17
61024dd4:	8009883a 	mov	r4,r16
61024dd8:	180f883a 	mov	r7,r3
61024ddc:	100d883a 	mov	r6,r2
61024de0:	102a7f00 	call	6102a7f0 <__nedf2>
61024de4:	103ce126 	beq	r2,zero,6102416c <_dtoa_r+0x230>
61024de8:	d9800d17 	ldw	r6,52(sp)
61024dec:	31bfffc4 	addi	r6,r6,-1
61024df0:	d9800d15 	stw	r6,52(sp)
61024df4:	003cdd06 	br	6102416c <_dtoa_r+0x230>
61024df8:	d9000717 	ldw	r4,28(sp)
61024dfc:	900b883a 	mov	r5,r18
61024e00:	102718c0 	call	6102718c <__mcmp>
61024e04:	103e8d0e 	bge	r2,zero,6102483c <_dtoa_r+0x900>
61024e08:	d9400717 	ldw	r5,28(sp)
61024e0c:	d9001617 	ldw	r4,88(sp)
61024e10:	01800284 	movi	r6,10
61024e14:	000f883a 	mov	r7,zero
61024e18:	1027ce40 	call	61027ce4 <__multadd>
61024e1c:	d9800d17 	ldw	r6,52(sp)
61024e20:	d8800715 	stw	r2,28(sp)
61024e24:	31bfffc4 	addi	r6,r6,-1
61024e28:	d9800d15 	stw	r6,52(sp)
61024e2c:	b001a71e 	bne	r22,zero,610254cc <_dtoa_r+0x1590>
61024e30:	d8800e17 	ldw	r2,56(sp)
61024e34:	d8800f15 	stw	r2,60(sp)
61024e38:	003e8006 	br	6102483c <_dtoa_r+0x900>
61024e3c:	90800417 	ldw	r2,16(r18)
61024e40:	1085883a 	add	r2,r2,r2
61024e44:	1085883a 	add	r2,r2,r2
61024e48:	1485883a 	add	r2,r2,r18
61024e4c:	11000417 	ldw	r4,16(r2)
61024e50:	10270580 	call	61027058 <__hi0bits>
61024e54:	00c00804 	movi	r3,32
61024e58:	1887c83a 	sub	r3,r3,r2
61024e5c:	003e5a06 	br	610247c8 <_dtoa_r+0x88c>
61024e60:	d9400717 	ldw	r5,28(sp)
61024e64:	d9801017 	ldw	r6,64(sp)
61024e68:	d9001617 	ldw	r4,88(sp)
61024e6c:	1027de40 	call	61027de4 <__pow5mult>
61024e70:	d8800715 	stw	r2,28(sp)
61024e74:	003e4306 	br	61024784 <_dtoa_r+0x848>
61024e78:	d9800f17 	ldw	r6,60(sp)
61024e7c:	d8800d17 	ldw	r2,52(sp)
61024e80:	d9800315 	stw	r6,12(sp)
61024e84:	d8800415 	stw	r2,16(sp)
61024e88:	d8c00b17 	ldw	r3,44(sp)
61024e8c:	1805003a 	cmpeq	r2,r3,zero
61024e90:	1000e21e 	bne	r2,zero,6102521c <_dtoa_r+0x12e0>
61024e94:	d9000317 	ldw	r4,12(sp)
61024e98:	0005883a 	mov	r2,zero
61024e9c:	00cff834 	movhi	r3,16352
61024ea0:	200c90fa 	slli	r6,r4,3
61024ea4:	011840f4 	movhi	r4,24835
61024ea8:	2137da04 	addi	r4,r4,-8344
61024eac:	180b883a 	mov	r5,r3
61024eb0:	310d883a 	add	r6,r6,r4
61024eb4:	327fff17 	ldw	r9,-4(r6)
61024eb8:	323ffe17 	ldw	r8,-8(r6)
61024ebc:	1009883a 	mov	r4,r2
61024ec0:	480f883a 	mov	r7,r9
61024ec4:	400d883a 	mov	r6,r8
61024ec8:	102a5100 	call	6102a510 <__divdf3>
61024ecc:	180b883a 	mov	r5,r3
61024ed0:	b00d883a 	mov	r6,r22
61024ed4:	b80f883a 	mov	r7,r23
61024ed8:	1009883a 	mov	r4,r2
61024edc:	102a0680 	call	6102a068 <__subdf3>
61024ee0:	a80b883a 	mov	r5,r21
61024ee4:	a009883a 	mov	r4,r20
61024ee8:	d8c01915 	stw	r3,100(sp)
61024eec:	d8801815 	stw	r2,96(sp)
61024ef0:	102ab080 	call	6102ab08 <__fixdfsi>
61024ef4:	1009883a 	mov	r4,r2
61024ef8:	1027883a 	mov	r19,r2
61024efc:	102aa100 	call	6102aa10 <__floatsidf>
61024f00:	a80b883a 	mov	r5,r21
61024f04:	a009883a 	mov	r4,r20
61024f08:	180f883a 	mov	r7,r3
61024f0c:	100d883a 	mov	r6,r2
61024f10:	102a0680 	call	6102a068 <__subdf3>
61024f14:	d9801817 	ldw	r6,96(sp)
61024f18:	1823883a 	mov	r17,r3
61024f1c:	d8801415 	stw	r2,80(sp)
61024f20:	302d883a 	mov	r22,r6
61024f24:	d9800517 	ldw	r6,20(sp)
61024f28:	9cc00c04 	addi	r19,r19,48
61024f2c:	dc401515 	stw	r17,84(sp)
61024f30:	d8c01917 	ldw	r3,100(sp)
61024f34:	34c00005 	stb	r19,0(r6)
61024f38:	d8800517 	ldw	r2,20(sp)
61024f3c:	d9401917 	ldw	r5,100(sp)
61024f40:	d9801417 	ldw	r6,80(sp)
61024f44:	b009883a 	mov	r4,r22
61024f48:	880f883a 	mov	r7,r17
61024f4c:	182f883a 	mov	r23,r3
61024f50:	17000044 	addi	fp,r2,1
61024f54:	102a8780 	call	6102a878 <__gtdf2>
61024f58:	00804e16 	blt	zero,r2,61025094 <_dtoa_r+0x1158>
61024f5c:	d9801417 	ldw	r6,80(sp)
61024f60:	0005883a 	mov	r2,zero
61024f64:	00cffc34 	movhi	r3,16368
61024f68:	180b883a 	mov	r5,r3
61024f6c:	880f883a 	mov	r7,r17
61024f70:	1009883a 	mov	r4,r2
61024f74:	102a0680 	call	6102a068 <__subdf3>
61024f78:	d9401917 	ldw	r5,100(sp)
61024f7c:	180f883a 	mov	r7,r3
61024f80:	b009883a 	mov	r4,r22
61024f84:	100d883a 	mov	r6,r2
61024f88:	102a8780 	call	6102a878 <__gtdf2>
61024f8c:	00bda216 	blt	zero,r2,61024618 <_dtoa_r+0x6dc>
61024f90:	d8c00317 	ldw	r3,12(sp)
61024f94:	00800044 	movi	r2,1
61024f98:	10c01216 	blt	r2,r3,61024fe4 <_dtoa_r+0x10a8>
61024f9c:	003d4506 	br	610244b4 <_dtoa_r+0x578>
61024fa0:	d9801417 	ldw	r6,80(sp)
61024fa4:	0005883a 	mov	r2,zero
61024fa8:	00cffc34 	movhi	r3,16368
61024fac:	180b883a 	mov	r5,r3
61024fb0:	880f883a 	mov	r7,r17
61024fb4:	1009883a 	mov	r4,r2
61024fb8:	102a0680 	call	6102a068 <__subdf3>
61024fbc:	d9c01b17 	ldw	r7,108(sp)
61024fc0:	180b883a 	mov	r5,r3
61024fc4:	1009883a 	mov	r4,r2
61024fc8:	b00d883a 	mov	r6,r22
61024fcc:	102a9880 	call	6102a988 <__ltdf2>
61024fd0:	103d9116 	blt	r2,zero,61024618 <_dtoa_r+0x6dc>
61024fd4:	d9800517 	ldw	r6,20(sp)
61024fd8:	d9000317 	ldw	r4,12(sp)
61024fdc:	3105883a 	add	r2,r6,r4
61024fe0:	e0bd3426 	beq	fp,r2,610244b4 <_dtoa_r+0x578>
61024fe4:	04500934 	movhi	r17,16420
61024fe8:	0021883a 	mov	r16,zero
61024fec:	b80b883a 	mov	r5,r23
61024ff0:	b009883a 	mov	r4,r22
61024ff4:	800d883a 	mov	r6,r16
61024ff8:	880f883a 	mov	r7,r17
61024ffc:	102a15c0 	call	6102a15c <__muldf3>
61025000:	d9401517 	ldw	r5,84(sp)
61025004:	d9001417 	ldw	r4,80(sp)
61025008:	880f883a 	mov	r7,r17
6102500c:	000d883a 	mov	r6,zero
61025010:	d8801a15 	stw	r2,104(sp)
61025014:	d8c01b15 	stw	r3,108(sp)
61025018:	102a15c0 	call	6102a15c <__muldf3>
6102501c:	180b883a 	mov	r5,r3
61025020:	1009883a 	mov	r4,r2
61025024:	1823883a 	mov	r17,r3
61025028:	1021883a 	mov	r16,r2
6102502c:	102ab080 	call	6102ab08 <__fixdfsi>
61025030:	1009883a 	mov	r4,r2
61025034:	102b883a 	mov	r21,r2
61025038:	102aa100 	call	6102aa10 <__floatsidf>
6102503c:	880b883a 	mov	r5,r17
61025040:	8009883a 	mov	r4,r16
61025044:	180f883a 	mov	r7,r3
61025048:	100d883a 	mov	r6,r2
6102504c:	102a0680 	call	6102a068 <__subdf3>
61025050:	1021883a 	mov	r16,r2
61025054:	d9001b17 	ldw	r4,108(sp)
61025058:	1823883a 	mov	r17,r3
6102505c:	dc001415 	stw	r16,80(sp)
61025060:	ad400c04 	addi	r21,r21,48
61025064:	dc401515 	stw	r17,84(sp)
61025068:	d8801a17 	ldw	r2,104(sp)
6102506c:	e5400005 	stb	r21,0(fp)
61025070:	202f883a 	mov	r23,r4
61025074:	d9c01b17 	ldw	r7,108(sp)
61025078:	d9001417 	ldw	r4,80(sp)
6102507c:	880b883a 	mov	r5,r17
61025080:	100d883a 	mov	r6,r2
61025084:	102d883a 	mov	r22,r2
61025088:	e7000044 	addi	fp,fp,1
6102508c:	102a9880 	call	6102a988 <__ltdf2>
61025090:	103fc30e 	bge	r2,zero,61024fa0 <_dtoa_r+0x1064>
61025094:	d9000417 	ldw	r4,16(sp)
61025098:	d9000d15 	stw	r4,52(sp)
6102509c:	003d7106 	br	61024664 <_dtoa_r+0x728>
610250a0:	d9801717 	ldw	r6,92(sp)
610250a4:	00800084 	movi	r2,2
610250a8:	11bde60e 	bge	r2,r6,61024844 <_dtoa_r+0x908>
610250ac:	203cfb1e 	bne	r4,zero,6102449c <_dtoa_r+0x560>
610250b0:	d9001617 	ldw	r4,88(sp)
610250b4:	900b883a 	mov	r5,r18
610250b8:	01800144 	movi	r6,5
610250bc:	000f883a 	mov	r7,zero
610250c0:	1027ce40 	call	61027ce4 <__multadd>
610250c4:	d9000717 	ldw	r4,28(sp)
610250c8:	100b883a 	mov	r5,r2
610250cc:	1025883a 	mov	r18,r2
610250d0:	102718c0 	call	6102718c <__mcmp>
610250d4:	00bcf10e 	bge	zero,r2,6102449c <_dtoa_r+0x560>
610250d8:	d8c00d17 	ldw	r3,52(sp)
610250dc:	d9000517 	ldw	r4,20(sp)
610250e0:	d8000615 	stw	zero,24(sp)
610250e4:	18c00044 	addi	r3,r3,1
610250e8:	d8c00d15 	stw	r3,52(sp)
610250ec:	00800c44 	movi	r2,49
610250f0:	27000044 	addi	fp,r4,1
610250f4:	20800005 	stb	r2,0(r4)
610250f8:	003e8906 	br	61024b20 <_dtoa_r+0xbe4>
610250fc:	d8c00517 	ldw	r3,20(sp)
61025100:	003bc206 	br	6102400c <_dtoa_r+0xd0>
61025104:	019840f4 	movhi	r6,24835
61025108:	31b80c04 	addi	r6,r6,-8144
6102510c:	30c00917 	ldw	r3,36(r6)
61025110:	30800817 	ldw	r2,32(r6)
61025114:	d9001217 	ldw	r4,72(sp)
61025118:	d9401317 	ldw	r5,76(sp)
6102511c:	180f883a 	mov	r7,r3
61025120:	100d883a 	mov	r6,r2
61025124:	102a5100 	call	6102a510 <__divdf3>
61025128:	948003cc 	andi	r18,r18,15
6102512c:	058000c4 	movi	r22,3
61025130:	1029883a 	mov	r20,r2
61025134:	182b883a 	mov	r21,r3
61025138:	003c8906 	br	61024360 <_dtoa_r+0x424>
6102513c:	d9001017 	ldw	r4,64(sp)
61025140:	d9800917 	ldw	r6,36(sp)
61025144:	0025883a 	mov	r18,zero
61025148:	1105c83a 	sub	r2,r2,r4
6102514c:	2089883a 	add	r4,r4,r2
61025150:	308d883a 	add	r6,r6,r2
61025154:	d9001015 	stw	r4,64(sp)
61025158:	d9800915 	stw	r6,36(sp)
6102515c:	003e3206 	br	61024a28 <_dtoa_r+0xaec>
61025160:	28800044 	addi	r2,r5,1
61025164:	27000044 	addi	fp,r4,1
61025168:	20800005 	stb	r2,0(r4)
6102516c:	003e6c06 	br	61024b20 <_dtoa_r+0xbe4>
61025170:	d8800f17 	ldw	r2,60(sp)
61025174:	00bce016 	blt	zero,r2,610244f8 <_dtoa_r+0x5bc>
61025178:	d9800f17 	ldw	r6,60(sp)
6102517c:	303cc51e 	bne	r6,zero,61024494 <_dtoa_r+0x558>
61025180:	0005883a 	mov	r2,zero
61025184:	00d00534 	movhi	r3,16404
61025188:	980b883a 	mov	r5,r19
6102518c:	180f883a 	mov	r7,r3
61025190:	9009883a 	mov	r4,r18
61025194:	100d883a 	mov	r6,r2
61025198:	102a15c0 	call	6102a15c <__muldf3>
6102519c:	180b883a 	mov	r5,r3
610251a0:	a80f883a 	mov	r7,r21
610251a4:	1009883a 	mov	r4,r2
610251a8:	a00d883a 	mov	r6,r20
610251ac:	102a9000 	call	6102a900 <__gedf2>
610251b0:	103cb80e 	bge	r2,zero,61024494 <_dtoa_r+0x558>
610251b4:	0027883a 	mov	r19,zero
610251b8:	0025883a 	mov	r18,zero
610251bc:	003fc606 	br	610250d8 <_dtoa_r+0x119c>
610251c0:	99400117 	ldw	r5,4(r19)
610251c4:	d9001617 	ldw	r4,88(sp)
610251c8:	10275b00 	call	610275b0 <_Balloc>
610251cc:	99800417 	ldw	r6,16(r19)
610251d0:	11000304 	addi	r4,r2,12
610251d4:	99400304 	addi	r5,r19,12
610251d8:	318d883a 	add	r6,r6,r6
610251dc:	318d883a 	add	r6,r6,r6
610251e0:	31800204 	addi	r6,r6,8
610251e4:	1023883a 	mov	r17,r2
610251e8:	1021a5c0 	call	61021a5c <memcpy>
610251ec:	d9001617 	ldw	r4,88(sp)
610251f0:	880b883a 	mov	r5,r17
610251f4:	01800044 	movi	r6,1
610251f8:	10279740 	call	61027974 <__lshift>
610251fc:	100b883a 	mov	r5,r2
61025200:	003d9c06 	br	61024874 <_dtoa_r+0x938>
61025204:	00800e44 	movi	r2,57
61025208:	b8807026 	beq	r23,r2,610253cc <_dtoa_r+0x1490>
6102520c:	b8800044 	addi	r2,r23,1
61025210:	b7000044 	addi	fp,r22,1
61025214:	b0800005 	stb	r2,0(r22)
61025218:	003e4106 	br	61024b20 <_dtoa_r+0xbe4>
6102521c:	d8800317 	ldw	r2,12(sp)
61025220:	019840f4 	movhi	r6,24835
61025224:	31b7da04 	addi	r6,r6,-8344
61025228:	b009883a 	mov	r4,r22
6102522c:	100e90fa 	slli	r7,r2,3
61025230:	b80b883a 	mov	r5,r23
61025234:	398f883a 	add	r7,r7,r6
61025238:	38bffe17 	ldw	r2,-8(r7)
6102523c:	d9800517 	ldw	r6,20(sp)
61025240:	38ffff17 	ldw	r3,-4(r7)
61025244:	37000044 	addi	fp,r6,1
61025248:	180f883a 	mov	r7,r3
6102524c:	100d883a 	mov	r6,r2
61025250:	102a15c0 	call	6102a15c <__muldf3>
61025254:	a80b883a 	mov	r5,r21
61025258:	a009883a 	mov	r4,r20
6102525c:	182f883a 	mov	r23,r3
61025260:	102d883a 	mov	r22,r2
61025264:	102ab080 	call	6102ab08 <__fixdfsi>
61025268:	1009883a 	mov	r4,r2
6102526c:	1027883a 	mov	r19,r2
61025270:	102aa100 	call	6102aa10 <__floatsidf>
61025274:	a80b883a 	mov	r5,r21
61025278:	a009883a 	mov	r4,r20
6102527c:	180f883a 	mov	r7,r3
61025280:	100d883a 	mov	r6,r2
61025284:	102a0680 	call	6102a068 <__subdf3>
61025288:	180b883a 	mov	r5,r3
6102528c:	d8c00517 	ldw	r3,20(sp)
61025290:	9cc00c04 	addi	r19,r19,48
61025294:	1009883a 	mov	r4,r2
61025298:	1cc00005 	stb	r19,0(r3)
6102529c:	2021883a 	mov	r16,r4
610252a0:	d9000317 	ldw	r4,12(sp)
610252a4:	00800044 	movi	r2,1
610252a8:	2823883a 	mov	r17,r5
610252ac:	20802226 	beq	r4,r2,61025338 <_dtoa_r+0x13fc>
610252b0:	1029883a 	mov	r20,r2
610252b4:	0005883a 	mov	r2,zero
610252b8:	00d00934 	movhi	r3,16420
610252bc:	180f883a 	mov	r7,r3
610252c0:	100d883a 	mov	r6,r2
610252c4:	880b883a 	mov	r5,r17
610252c8:	8009883a 	mov	r4,r16
610252cc:	102a15c0 	call	6102a15c <__muldf3>
610252d0:	180b883a 	mov	r5,r3
610252d4:	1009883a 	mov	r4,r2
610252d8:	1823883a 	mov	r17,r3
610252dc:	1021883a 	mov	r16,r2
610252e0:	102ab080 	call	6102ab08 <__fixdfsi>
610252e4:	1009883a 	mov	r4,r2
610252e8:	102b883a 	mov	r21,r2
610252ec:	102aa100 	call	6102aa10 <__floatsidf>
610252f0:	880b883a 	mov	r5,r17
610252f4:	8009883a 	mov	r4,r16
610252f8:	180f883a 	mov	r7,r3
610252fc:	100d883a 	mov	r6,r2
61025300:	102a0680 	call	6102a068 <__subdf3>
61025304:	180b883a 	mov	r5,r3
61025308:	d8c00517 	ldw	r3,20(sp)
6102530c:	1009883a 	mov	r4,r2
61025310:	ad400c04 	addi	r21,r21,48
61025314:	1d05883a 	add	r2,r3,r20
61025318:	15400005 	stb	r21,0(r2)
6102531c:	2021883a 	mov	r16,r4
61025320:	d9000317 	ldw	r4,12(sp)
61025324:	a5000044 	addi	r20,r20,1
61025328:	2823883a 	mov	r17,r5
6102532c:	a13fe11e 	bne	r20,r4,610252b4 <_dtoa_r+0x1378>
61025330:	e505883a 	add	r2,fp,r20
61025334:	173fffc4 	addi	fp,r2,-1
61025338:	0025883a 	mov	r18,zero
6102533c:	04cff834 	movhi	r19,16352
61025340:	b009883a 	mov	r4,r22
61025344:	b80b883a 	mov	r5,r23
61025348:	900d883a 	mov	r6,r18
6102534c:	980f883a 	mov	r7,r19
61025350:	102a0e80 	call	6102a0e8 <__adddf3>
61025354:	180b883a 	mov	r5,r3
61025358:	1009883a 	mov	r4,r2
6102535c:	800d883a 	mov	r6,r16
61025360:	880f883a 	mov	r7,r17
61025364:	102a9880 	call	6102a988 <__ltdf2>
61025368:	103cab16 	blt	r2,zero,61024618 <_dtoa_r+0x6dc>
6102536c:	0009883a 	mov	r4,zero
61025370:	980b883a 	mov	r5,r19
61025374:	b80f883a 	mov	r7,r23
61025378:	b00d883a 	mov	r6,r22
6102537c:	102a0680 	call	6102a068 <__subdf3>
61025380:	180b883a 	mov	r5,r3
61025384:	880f883a 	mov	r7,r17
61025388:	1009883a 	mov	r4,r2
6102538c:	800d883a 	mov	r6,r16
61025390:	102a8780 	call	6102a878 <__gtdf2>
61025394:	00bc470e 	bge	zero,r2,610244b4 <_dtoa_r+0x578>
61025398:	00c00c04 	movi	r3,48
6102539c:	e73fffc4 	addi	fp,fp,-1
610253a0:	e0800007 	ldb	r2,0(fp)
610253a4:	10fffd26 	beq	r2,r3,6102539c <_dtoa_r+0x1460>
610253a8:	d9800417 	ldw	r6,16(sp)
610253ac:	e7000044 	addi	fp,fp,1
610253b0:	d9800d15 	stw	r6,52(sp)
610253b4:	003cab06 	br	61024664 <_dtoa_r+0x728>
610253b8:	d8c00f17 	ldw	r3,60(sp)
610253bc:	d9001117 	ldw	r4,68(sp)
610253c0:	20e1c83a 	sub	r16,r4,r3
610253c4:	0007883a 	mov	r3,zero
610253c8:	003d9b06 	br	61024a38 <_dtoa_r+0xafc>
610253cc:	00800e44 	movi	r2,57
610253d0:	b0800005 	stb	r2,0(r22)
610253d4:	b5800044 	addi	r22,r22,1
610253d8:	003dc106 	br	61024ae0 <_dtoa_r+0xba4>
610253dc:	05800084 	movi	r22,2
610253e0:	003bf706 	br	610243c0 <_dtoa_r+0x484>
610253e4:	d9000f17 	ldw	r4,60(sp)
610253e8:	013c000e 	bge	zero,r4,610243ec <_dtoa_r+0x4b0>
610253ec:	d9800e17 	ldw	r6,56(sp)
610253f0:	01bc300e 	bge	zero,r6,610244b4 <_dtoa_r+0x578>
610253f4:	0005883a 	mov	r2,zero
610253f8:	00d00934 	movhi	r3,16420
610253fc:	a80b883a 	mov	r5,r21
61025400:	180f883a 	mov	r7,r3
61025404:	a009883a 	mov	r4,r20
61025408:	100d883a 	mov	r6,r2
6102540c:	102a15c0 	call	6102a15c <__muldf3>
61025410:	b1000044 	addi	r4,r22,1
61025414:	1021883a 	mov	r16,r2
61025418:	1823883a 	mov	r17,r3
6102541c:	102aa100 	call	6102aa10 <__floatsidf>
61025420:	880b883a 	mov	r5,r17
61025424:	8009883a 	mov	r4,r16
61025428:	180f883a 	mov	r7,r3
6102542c:	100d883a 	mov	r6,r2
61025430:	102a15c0 	call	6102a15c <__muldf3>
61025434:	0011883a 	mov	r8,zero
61025438:	02500734 	movhi	r9,16412
6102543c:	180b883a 	mov	r5,r3
61025440:	480f883a 	mov	r7,r9
61025444:	1009883a 	mov	r4,r2
61025448:	400d883a 	mov	r6,r8
6102544c:	102a0e80 	call	6102a0e8 <__adddf3>
61025450:	102d883a 	mov	r22,r2
61025454:	00bf3034 	movhi	r2,64704
61025458:	10ef883a 	add	r23,r2,r3
6102545c:	d8800d17 	ldw	r2,52(sp)
61025460:	d8c00e17 	ldw	r3,56(sp)
61025464:	8029883a 	mov	r20,r16
61025468:	10bfffc4 	addi	r2,r2,-1
6102546c:	882b883a 	mov	r21,r17
61025470:	d8800415 	stw	r2,16(sp)
61025474:	d8c00315 	stw	r3,12(sp)
61025478:	003e8306 	br	61024e88 <_dtoa_r+0xf4c>
6102547c:	d8800117 	ldw	r2,4(sp)
61025480:	dc001117 	ldw	r16,68(sp)
61025484:	dc801017 	ldw	r18,64(sp)
61025488:	00c00d84 	movi	r3,54
6102548c:	1887c83a 	sub	r3,r3,r2
61025490:	003d6906 	br	61024a38 <_dtoa_r+0xafc>
61025494:	01800044 	movi	r6,1
61025498:	3021883a 	mov	r16,r6
6102549c:	d9800f15 	stw	r6,60(sp)
610254a0:	d9802615 	stw	r6,152(sp)
610254a4:	d9800e15 	stw	r6,56(sp)
610254a8:	003b9306 	br	610242f8 <_dtoa_r+0x3bc>
610254ac:	b021883a 	mov	r16,r22
610254b0:	dd800f15 	stw	r22,60(sp)
610254b4:	003b9006 	br	610242f8 <_dtoa_r+0x3bc>
610254b8:	103e221e 	bne	r2,zero,61024d44 <_dtoa_r+0xe08>
610254bc:	b880004c 	andi	r2,r23,1
610254c0:	1005003a 	cmpeq	r2,r2,zero
610254c4:	103e1f1e 	bne	r2,zero,61024d44 <_dtoa_r+0xe08>
610254c8:	003e1b06 	br	61024d38 <_dtoa_r+0xdfc>
610254cc:	d9001617 	ldw	r4,88(sp)
610254d0:	980b883a 	mov	r5,r19
610254d4:	01800284 	movi	r6,10
610254d8:	000f883a 	mov	r7,zero
610254dc:	1027ce40 	call	61027ce4 <__multadd>
610254e0:	d8c00e17 	ldw	r3,56(sp)
610254e4:	1027883a 	mov	r19,r2
610254e8:	d8c00f15 	stw	r3,60(sp)
610254ec:	003cd306 	br	6102483c <_dtoa_r+0x900>

610254f0 <_fflush_r>:
610254f0:	defffb04 	addi	sp,sp,-20
610254f4:	dcc00315 	stw	r19,12(sp)
610254f8:	dc800215 	stw	r18,8(sp)
610254fc:	dfc00415 	stw	ra,16(sp)
61025500:	dc400115 	stw	r17,4(sp)
61025504:	dc000015 	stw	r16,0(sp)
61025508:	2027883a 	mov	r19,r4
6102550c:	2825883a 	mov	r18,r5
61025510:	20000226 	beq	r4,zero,6102551c <_fflush_r+0x2c>
61025514:	20800e17 	ldw	r2,56(r4)
61025518:	10005626 	beq	r2,zero,61025674 <_fflush_r+0x184>
6102551c:	9100030b 	ldhu	r4,12(r18)
61025520:	20ffffcc 	andi	r3,r4,65535
61025524:	18e0001c 	xori	r3,r3,32768
61025528:	18e00004 	addi	r3,r3,-32768
6102552c:	1880020c 	andi	r2,r3,8
61025530:	1000261e 	bne	r2,zero,610255cc <_fflush_r+0xdc>
61025534:	90c00117 	ldw	r3,4(r18)
61025538:	20820014 	ori	r2,r4,2048
6102553c:	9080030d 	sth	r2,12(r18)
61025540:	1009883a 	mov	r4,r2
61025544:	00c0400e 	bge	zero,r3,61025648 <_fflush_r+0x158>
61025548:	92000a17 	ldw	r8,40(r18)
6102554c:	40004026 	beq	r8,zero,61025650 <_fflush_r+0x160>
61025550:	2084000c 	andi	r2,r4,4096
61025554:	10005326 	beq	r2,zero,610256a4 <_fflush_r+0x1b4>
61025558:	94001417 	ldw	r16,80(r18)
6102555c:	9080030b 	ldhu	r2,12(r18)
61025560:	1080010c 	andi	r2,r2,4
61025564:	1000481e 	bne	r2,zero,61025688 <_fflush_r+0x198>
61025568:	91400717 	ldw	r5,28(r18)
6102556c:	9809883a 	mov	r4,r19
61025570:	800d883a 	mov	r6,r16
61025574:	000f883a 	mov	r7,zero
61025578:	403ee83a 	callr	r8
6102557c:	8080261e 	bne	r16,r2,61025618 <_fflush_r+0x128>
61025580:	9080030b 	ldhu	r2,12(r18)
61025584:	91000417 	ldw	r4,16(r18)
61025588:	90000115 	stw	zero,4(r18)
6102558c:	10bdffcc 	andi	r2,r2,63487
61025590:	10ffffcc 	andi	r3,r2,65535
61025594:	18c4000c 	andi	r3,r3,4096
61025598:	9080030d 	sth	r2,12(r18)
6102559c:	91000015 	stw	r4,0(r18)
610255a0:	18002b26 	beq	r3,zero,61025650 <_fflush_r+0x160>
610255a4:	0007883a 	mov	r3,zero
610255a8:	1805883a 	mov	r2,r3
610255ac:	94001415 	stw	r16,80(r18)
610255b0:	dfc00417 	ldw	ra,16(sp)
610255b4:	dcc00317 	ldw	r19,12(sp)
610255b8:	dc800217 	ldw	r18,8(sp)
610255bc:	dc400117 	ldw	r17,4(sp)
610255c0:	dc000017 	ldw	r16,0(sp)
610255c4:	dec00504 	addi	sp,sp,20
610255c8:	f800283a 	ret
610255cc:	94400417 	ldw	r17,16(r18)
610255d0:	88001f26 	beq	r17,zero,61025650 <_fflush_r+0x160>
610255d4:	90800017 	ldw	r2,0(r18)
610255d8:	18c000cc 	andi	r3,r3,3
610255dc:	94400015 	stw	r17,0(r18)
610255e0:	1461c83a 	sub	r16,r2,r17
610255e4:	18002526 	beq	r3,zero,6102567c <_fflush_r+0x18c>
610255e8:	0005883a 	mov	r2,zero
610255ec:	90800215 	stw	r2,8(r18)
610255f0:	0400170e 	bge	zero,r16,61025650 <_fflush_r+0x160>
610255f4:	90c00917 	ldw	r3,36(r18)
610255f8:	91400717 	ldw	r5,28(r18)
610255fc:	880d883a 	mov	r6,r17
61025600:	800f883a 	mov	r7,r16
61025604:	9809883a 	mov	r4,r19
61025608:	183ee83a 	callr	r3
6102560c:	88a3883a 	add	r17,r17,r2
61025610:	80a1c83a 	sub	r16,r16,r2
61025614:	00bff616 	blt	zero,r2,610255f0 <_fflush_r+0x100>
61025618:	9080030b 	ldhu	r2,12(r18)
6102561c:	00ffffc4 	movi	r3,-1
61025620:	10801014 	ori	r2,r2,64
61025624:	9080030d 	sth	r2,12(r18)
61025628:	1805883a 	mov	r2,r3
6102562c:	dfc00417 	ldw	ra,16(sp)
61025630:	dcc00317 	ldw	r19,12(sp)
61025634:	dc800217 	ldw	r18,8(sp)
61025638:	dc400117 	ldw	r17,4(sp)
6102563c:	dc000017 	ldw	r16,0(sp)
61025640:	dec00504 	addi	sp,sp,20
61025644:	f800283a 	ret
61025648:	90800f17 	ldw	r2,60(r18)
6102564c:	00bfbe16 	blt	zero,r2,61025548 <_fflush_r+0x58>
61025650:	0007883a 	mov	r3,zero
61025654:	1805883a 	mov	r2,r3
61025658:	dfc00417 	ldw	ra,16(sp)
6102565c:	dcc00317 	ldw	r19,12(sp)
61025660:	dc800217 	ldw	r18,8(sp)
61025664:	dc400117 	ldw	r17,4(sp)
61025668:	dc000017 	ldw	r16,0(sp)
6102566c:	dec00504 	addi	sp,sp,20
61025670:	f800283a 	ret
61025674:	10257880 	call	61025788 <__sinit>
61025678:	003fa806 	br	6102551c <_fflush_r+0x2c>
6102567c:	90800517 	ldw	r2,20(r18)
61025680:	90800215 	stw	r2,8(r18)
61025684:	003fda06 	br	610255f0 <_fflush_r+0x100>
61025688:	90800117 	ldw	r2,4(r18)
6102568c:	90c00c17 	ldw	r3,48(r18)
61025690:	80a1c83a 	sub	r16,r16,r2
61025694:	183fb426 	beq	r3,zero,61025568 <_fflush_r+0x78>
61025698:	90800f17 	ldw	r2,60(r18)
6102569c:	80a1c83a 	sub	r16,r16,r2
610256a0:	003fb106 	br	61025568 <_fflush_r+0x78>
610256a4:	91400717 	ldw	r5,28(r18)
610256a8:	9809883a 	mov	r4,r19
610256ac:	000d883a 	mov	r6,zero
610256b0:	01c00044 	movi	r7,1
610256b4:	403ee83a 	callr	r8
610256b8:	1021883a 	mov	r16,r2
610256bc:	00bfffc4 	movi	r2,-1
610256c0:	80800226 	beq	r16,r2,610256cc <_fflush_r+0x1dc>
610256c4:	92000a17 	ldw	r8,40(r18)
610256c8:	003fa406 	br	6102555c <_fflush_r+0x6c>
610256cc:	98c00017 	ldw	r3,0(r19)
610256d0:	00800744 	movi	r2,29
610256d4:	18bfde26 	beq	r3,r2,61025650 <_fflush_r+0x160>
610256d8:	9080030b 	ldhu	r2,12(r18)
610256dc:	8007883a 	mov	r3,r16
610256e0:	10801014 	ori	r2,r2,64
610256e4:	9080030d 	sth	r2,12(r18)
610256e8:	003fcf06 	br	61025628 <_fflush_r+0x138>

610256ec <fflush>:
610256ec:	015840b4 	movhi	r5,24834
610256f0:	29553c04 	addi	r5,r5,21744
610256f4:	2007883a 	mov	r3,r4
610256f8:	20000526 	beq	r4,zero,61025710 <fflush+0x24>
610256fc:	009840f4 	movhi	r2,24835
61025700:	10beba04 	addi	r2,r2,-1304
61025704:	11000017 	ldw	r4,0(r2)
61025708:	180b883a 	mov	r5,r3
6102570c:	10254f01 	jmpi	610254f0 <_fflush_r>
61025710:	009840f4 	movhi	r2,24835
61025714:	10bebb04 	addi	r2,r2,-1300
61025718:	11000017 	ldw	r4,0(r2)
6102571c:	10262bc1 	jmpi	610262bc <_fwalk_reent>

61025720 <std>:
61025720:	009840f4 	movhi	r2,24835
61025724:	10a23904 	addi	r2,r2,-30492
61025728:	20800b15 	stw	r2,44(r4)
6102572c:	009840f4 	movhi	r2,24835
61025730:	10a27404 	addi	r2,r2,-30256
61025734:	20800815 	stw	r2,32(r4)
61025738:	00d840f4 	movhi	r3,24835
6102573c:	18e25504 	addi	r3,r3,-30380
61025740:	009840f4 	movhi	r2,24835
61025744:	10a23b04 	addi	r2,r2,-30484
61025748:	2140030d 	sth	r5,12(r4)
6102574c:	2180038d 	sth	r6,14(r4)
61025750:	20c00915 	stw	r3,36(r4)
61025754:	20800a15 	stw	r2,40(r4)
61025758:	20000015 	stw	zero,0(r4)
6102575c:	20000115 	stw	zero,4(r4)
61025760:	20000215 	stw	zero,8(r4)
61025764:	20000415 	stw	zero,16(r4)
61025768:	20000515 	stw	zero,20(r4)
6102576c:	20000615 	stw	zero,24(r4)
61025770:	21000715 	stw	r4,28(r4)
61025774:	f800283a 	ret

61025778 <__sfp_lock_acquire>:
61025778:	f800283a 	ret

6102577c <__sfp_lock_release>:
6102577c:	f800283a 	ret

61025780 <__sinit_lock_acquire>:
61025780:	f800283a 	ret

61025784 <__sinit_lock_release>:
61025784:	f800283a 	ret

61025788 <__sinit>:
61025788:	20800e17 	ldw	r2,56(r4)
6102578c:	defffd04 	addi	sp,sp,-12
61025790:	dc400115 	stw	r17,4(sp)
61025794:	dc000015 	stw	r16,0(sp)
61025798:	dfc00215 	stw	ra,8(sp)
6102579c:	04400044 	movi	r17,1
610257a0:	01400104 	movi	r5,4
610257a4:	000d883a 	mov	r6,zero
610257a8:	2021883a 	mov	r16,r4
610257ac:	2200bb04 	addi	r8,r4,748
610257b0:	200f883a 	mov	r7,r4
610257b4:	10000526 	beq	r2,zero,610257cc <__sinit+0x44>
610257b8:	dfc00217 	ldw	ra,8(sp)
610257bc:	dc400117 	ldw	r17,4(sp)
610257c0:	dc000017 	ldw	r16,0(sp)
610257c4:	dec00304 	addi	sp,sp,12
610257c8:	f800283a 	ret
610257cc:	21000117 	ldw	r4,4(r4)
610257d0:	009840b4 	movhi	r2,24834
610257d4:	10961b04 	addi	r2,r2,22636
610257d8:	00c000c4 	movi	r3,3
610257dc:	80800f15 	stw	r2,60(r16)
610257e0:	80c0b915 	stw	r3,740(r16)
610257e4:	8200ba15 	stw	r8,744(r16)
610257e8:	84400e15 	stw	r17,56(r16)
610257ec:	8000b815 	stw	zero,736(r16)
610257f0:	10257200 	call	61025720 <std>
610257f4:	81000217 	ldw	r4,8(r16)
610257f8:	880d883a 	mov	r6,r17
610257fc:	800f883a 	mov	r7,r16
61025800:	01400284 	movi	r5,10
61025804:	10257200 	call	61025720 <std>
61025808:	81000317 	ldw	r4,12(r16)
6102580c:	800f883a 	mov	r7,r16
61025810:	01400484 	movi	r5,18
61025814:	01800084 	movi	r6,2
61025818:	dfc00217 	ldw	ra,8(sp)
6102581c:	dc400117 	ldw	r17,4(sp)
61025820:	dc000017 	ldw	r16,0(sp)
61025824:	dec00304 	addi	sp,sp,12
61025828:	10257201 	jmpi	61025720 <std>

6102582c <__fp_lock>:
6102582c:	0005883a 	mov	r2,zero
61025830:	f800283a 	ret

61025834 <__fp_unlock>:
61025834:	0005883a 	mov	r2,zero
61025838:	f800283a 	ret

6102583c <__fp_unlock_all>:
6102583c:	009840f4 	movhi	r2,24835
61025840:	10beba04 	addi	r2,r2,-1304
61025844:	11000017 	ldw	r4,0(r2)
61025848:	015840b4 	movhi	r5,24834
6102584c:	29560d04 	addi	r5,r5,22580
61025850:	10263841 	jmpi	61026384 <_fwalk>

61025854 <__fp_lock_all>:
61025854:	009840f4 	movhi	r2,24835
61025858:	10beba04 	addi	r2,r2,-1304
6102585c:	11000017 	ldw	r4,0(r2)
61025860:	015840b4 	movhi	r5,24834
61025864:	29560b04 	addi	r5,r5,22572
61025868:	10263841 	jmpi	61026384 <_fwalk>

6102586c <_cleanup_r>:
6102586c:	015840f4 	movhi	r5,24835
61025870:	2963b904 	addi	r5,r5,-28956
61025874:	10263841 	jmpi	61026384 <_fwalk>

61025878 <_cleanup>:
61025878:	009840f4 	movhi	r2,24835
6102587c:	10bebb04 	addi	r2,r2,-1300
61025880:	11000017 	ldw	r4,0(r2)
61025884:	102586c1 	jmpi	6102586c <_cleanup_r>

61025888 <__sfmoreglue>:
61025888:	defffc04 	addi	sp,sp,-16
6102588c:	dc400115 	stw	r17,4(sp)
61025890:	2c401724 	muli	r17,r5,92
61025894:	dc800215 	stw	r18,8(sp)
61025898:	2825883a 	mov	r18,r5
6102589c:	89400304 	addi	r5,r17,12
610258a0:	dc000015 	stw	r16,0(sp)
610258a4:	dfc00315 	stw	ra,12(sp)
610258a8:	10266940 	call	61026694 <_malloc_r>
610258ac:	0021883a 	mov	r16,zero
610258b0:	880d883a 	mov	r6,r17
610258b4:	000b883a 	mov	r5,zero
610258b8:	10000626 	beq	r2,zero,610258d4 <__sfmoreglue+0x4c>
610258bc:	11000304 	addi	r4,r2,12
610258c0:	14800115 	stw	r18,4(r2)
610258c4:	10000015 	stw	zero,0(r2)
610258c8:	11000215 	stw	r4,8(r2)
610258cc:	1021883a 	mov	r16,r2
610258d0:	1026f980 	call	61026f98 <memset>
610258d4:	8005883a 	mov	r2,r16
610258d8:	dfc00317 	ldw	ra,12(sp)
610258dc:	dc800217 	ldw	r18,8(sp)
610258e0:	dc400117 	ldw	r17,4(sp)
610258e4:	dc000017 	ldw	r16,0(sp)
610258e8:	dec00404 	addi	sp,sp,16
610258ec:	f800283a 	ret

610258f0 <__sfp>:
610258f0:	defffd04 	addi	sp,sp,-12
610258f4:	009840f4 	movhi	r2,24835
610258f8:	10bebb04 	addi	r2,r2,-1300
610258fc:	dc000015 	stw	r16,0(sp)
61025900:	14000017 	ldw	r16,0(r2)
61025904:	dc400115 	stw	r17,4(sp)
61025908:	dfc00215 	stw	ra,8(sp)
6102590c:	80800e17 	ldw	r2,56(r16)
61025910:	2023883a 	mov	r17,r4
61025914:	10002626 	beq	r2,zero,610259b0 <__sfp+0xc0>
61025918:	8400b804 	addi	r16,r16,736
6102591c:	80800117 	ldw	r2,4(r16)
61025920:	81000217 	ldw	r4,8(r16)
61025924:	10ffffc4 	addi	r3,r2,-1
61025928:	18000916 	blt	r3,zero,61025950 <__sfp+0x60>
6102592c:	2080030f 	ldh	r2,12(r4)
61025930:	10000b26 	beq	r2,zero,61025960 <__sfp+0x70>
61025934:	017fffc4 	movi	r5,-1
61025938:	00000206 	br	61025944 <__sfp+0x54>
6102593c:	2080030f 	ldh	r2,12(r4)
61025940:	10000726 	beq	r2,zero,61025960 <__sfp+0x70>
61025944:	18ffffc4 	addi	r3,r3,-1
61025948:	21001704 	addi	r4,r4,92
6102594c:	197ffb1e 	bne	r3,r5,6102593c <__sfp+0x4c>
61025950:	80800017 	ldw	r2,0(r16)
61025954:	10001926 	beq	r2,zero,610259bc <__sfp+0xcc>
61025958:	1021883a 	mov	r16,r2
6102595c:	003fef06 	br	6102591c <__sfp+0x2c>
61025960:	00bfffc4 	movi	r2,-1
61025964:	00c00044 	movi	r3,1
61025968:	2080038d 	sth	r2,14(r4)
6102596c:	20c0030d 	sth	r3,12(r4)
61025970:	20000015 	stw	zero,0(r4)
61025974:	20000215 	stw	zero,8(r4)
61025978:	20000115 	stw	zero,4(r4)
6102597c:	20000415 	stw	zero,16(r4)
61025980:	20000515 	stw	zero,20(r4)
61025984:	20000615 	stw	zero,24(r4)
61025988:	20000c15 	stw	zero,48(r4)
6102598c:	20000d15 	stw	zero,52(r4)
61025990:	20001115 	stw	zero,68(r4)
61025994:	20001215 	stw	zero,72(r4)
61025998:	2005883a 	mov	r2,r4
6102599c:	dfc00217 	ldw	ra,8(sp)
610259a0:	dc400117 	ldw	r17,4(sp)
610259a4:	dc000017 	ldw	r16,0(sp)
610259a8:	dec00304 	addi	sp,sp,12
610259ac:	f800283a 	ret
610259b0:	8009883a 	mov	r4,r16
610259b4:	10257880 	call	61025788 <__sinit>
610259b8:	003fd706 	br	61025918 <__sfp+0x28>
610259bc:	8809883a 	mov	r4,r17
610259c0:	01400104 	movi	r5,4
610259c4:	10258880 	call	61025888 <__sfmoreglue>
610259c8:	80800015 	stw	r2,0(r16)
610259cc:	103fe21e 	bne	r2,zero,61025958 <__sfp+0x68>
610259d0:	00800304 	movi	r2,12
610259d4:	0009883a 	mov	r4,zero
610259d8:	88800015 	stw	r2,0(r17)
610259dc:	003fee06 	br	61025998 <__sfp+0xa8>

610259e0 <_malloc_trim_r>:
610259e0:	defffb04 	addi	sp,sp,-20
610259e4:	dcc00315 	stw	r19,12(sp)
610259e8:	04d840f4 	movhi	r19,24835
610259ec:	9cf93604 	addi	r19,r19,-6952
610259f0:	dc800215 	stw	r18,8(sp)
610259f4:	dc400115 	stw	r17,4(sp)
610259f8:	dc000015 	stw	r16,0(sp)
610259fc:	2823883a 	mov	r17,r5
61025a00:	2025883a 	mov	r18,r4
61025a04:	dfc00415 	stw	ra,16(sp)
61025a08:	102b63c0 	call	6102b63c <__malloc_lock>
61025a0c:	98800217 	ldw	r2,8(r19)
61025a10:	9009883a 	mov	r4,r18
61025a14:	000b883a 	mov	r5,zero
61025a18:	10c00117 	ldw	r3,4(r2)
61025a1c:	00bfff04 	movi	r2,-4
61025a20:	18a0703a 	and	r16,r3,r2
61025a24:	8463c83a 	sub	r17,r16,r17
61025a28:	8c43fbc4 	addi	r17,r17,4079
61025a2c:	8822d33a 	srli	r17,r17,12
61025a30:	0083ffc4 	movi	r2,4095
61025a34:	8c7fffc4 	addi	r17,r17,-1
61025a38:	8822933a 	slli	r17,r17,12
61025a3c:	1440060e 	bge	r2,r17,61025a58 <_malloc_trim_r+0x78>
61025a40:	10288740 	call	61028874 <_sbrk_r>
61025a44:	98c00217 	ldw	r3,8(r19)
61025a48:	9009883a 	mov	r4,r18
61025a4c:	044bc83a 	sub	r5,zero,r17
61025a50:	80c7883a 	add	r3,r16,r3
61025a54:	10c00926 	beq	r2,r3,61025a7c <_malloc_trim_r+0x9c>
61025a58:	102b65c0 	call	6102b65c <__malloc_unlock>
61025a5c:	0005883a 	mov	r2,zero
61025a60:	dfc00417 	ldw	ra,16(sp)
61025a64:	dcc00317 	ldw	r19,12(sp)
61025a68:	dc800217 	ldw	r18,8(sp)
61025a6c:	dc400117 	ldw	r17,4(sp)
61025a70:	dc000017 	ldw	r16,0(sp)
61025a74:	dec00504 	addi	sp,sp,20
61025a78:	f800283a 	ret
61025a7c:	9009883a 	mov	r4,r18
61025a80:	10288740 	call	61028874 <_sbrk_r>
61025a84:	844dc83a 	sub	r6,r16,r17
61025a88:	00ffffc4 	movi	r3,-1
61025a8c:	9009883a 	mov	r4,r18
61025a90:	000b883a 	mov	r5,zero
61025a94:	01d840f4 	movhi	r7,24835
61025a98:	39c56e04 	addi	r7,r7,5560
61025a9c:	31800054 	ori	r6,r6,1
61025aa0:	10c00926 	beq	r2,r3,61025ac8 <_malloc_trim_r+0xe8>
61025aa4:	38800017 	ldw	r2,0(r7)
61025aa8:	98c00217 	ldw	r3,8(r19)
61025aac:	9009883a 	mov	r4,r18
61025ab0:	1445c83a 	sub	r2,r2,r17
61025ab4:	38800015 	stw	r2,0(r7)
61025ab8:	19800115 	stw	r6,4(r3)
61025abc:	102b65c0 	call	6102b65c <__malloc_unlock>
61025ac0:	00800044 	movi	r2,1
61025ac4:	003fe606 	br	61025a60 <_malloc_trim_r+0x80>
61025ac8:	10288740 	call	61028874 <_sbrk_r>
61025acc:	99800217 	ldw	r6,8(r19)
61025ad0:	100f883a 	mov	r7,r2
61025ad4:	9009883a 	mov	r4,r18
61025ad8:	1187c83a 	sub	r3,r2,r6
61025adc:	008003c4 	movi	r2,15
61025ae0:	19400054 	ori	r5,r3,1
61025ae4:	10ffdc0e 	bge	r2,r3,61025a58 <_malloc_trim_r+0x78>
61025ae8:	009840f4 	movhi	r2,24835
61025aec:	10bebf04 	addi	r2,r2,-1284
61025af0:	10c00017 	ldw	r3,0(r2)
61025af4:	009840f4 	movhi	r2,24835
61025af8:	10856e04 	addi	r2,r2,5560
61025afc:	31400115 	stw	r5,4(r6)
61025b00:	38c7c83a 	sub	r3,r7,r3
61025b04:	10c00015 	stw	r3,0(r2)
61025b08:	003fd306 	br	61025a58 <_malloc_trim_r+0x78>

61025b0c <_free_r>:
61025b0c:	defffd04 	addi	sp,sp,-12
61025b10:	dc400115 	stw	r17,4(sp)
61025b14:	dc000015 	stw	r16,0(sp)
61025b18:	dfc00215 	stw	ra,8(sp)
61025b1c:	2821883a 	mov	r16,r5
61025b20:	2023883a 	mov	r17,r4
61025b24:	28005a26 	beq	r5,zero,61025c90 <_free_r+0x184>
61025b28:	102b63c0 	call	6102b63c <__malloc_lock>
61025b2c:	823ffe04 	addi	r8,r16,-8
61025b30:	41400117 	ldw	r5,4(r8)
61025b34:	00bfff84 	movi	r2,-2
61025b38:	029840f4 	movhi	r10,24835
61025b3c:	52b93604 	addi	r10,r10,-6952
61025b40:	288e703a 	and	r7,r5,r2
61025b44:	41cd883a 	add	r6,r8,r7
61025b48:	30c00117 	ldw	r3,4(r6)
61025b4c:	51000217 	ldw	r4,8(r10)
61025b50:	00bfff04 	movi	r2,-4
61025b54:	1892703a 	and	r9,r3,r2
61025b58:	5017883a 	mov	r11,r10
61025b5c:	31006726 	beq	r6,r4,61025cfc <_free_r+0x1f0>
61025b60:	2880004c 	andi	r2,r5,1
61025b64:	1005003a 	cmpeq	r2,r2,zero
61025b68:	32400115 	stw	r9,4(r6)
61025b6c:	10001a1e 	bne	r2,zero,61025bd8 <_free_r+0xcc>
61025b70:	000b883a 	mov	r5,zero
61025b74:	3247883a 	add	r3,r6,r9
61025b78:	18800117 	ldw	r2,4(r3)
61025b7c:	1080004c 	andi	r2,r2,1
61025b80:	1000231e 	bne	r2,zero,61025c10 <_free_r+0x104>
61025b84:	280ac03a 	cmpne	r5,r5,zero
61025b88:	3a4f883a 	add	r7,r7,r9
61025b8c:	2800451e 	bne	r5,zero,61025ca4 <_free_r+0x198>
61025b90:	31000217 	ldw	r4,8(r6)
61025b94:	009840f4 	movhi	r2,24835
61025b98:	10b93804 	addi	r2,r2,-6944
61025b9c:	20807b26 	beq	r4,r2,61025d8c <_free_r+0x280>
61025ba0:	30800317 	ldw	r2,12(r6)
61025ba4:	3a07883a 	add	r3,r7,r8
61025ba8:	19c00015 	stw	r7,0(r3)
61025bac:	11000215 	stw	r4,8(r2)
61025bb0:	20800315 	stw	r2,12(r4)
61025bb4:	38800054 	ori	r2,r7,1
61025bb8:	40800115 	stw	r2,4(r8)
61025bbc:	28001a26 	beq	r5,zero,61025c28 <_free_r+0x11c>
61025bc0:	8809883a 	mov	r4,r17
61025bc4:	dfc00217 	ldw	ra,8(sp)
61025bc8:	dc400117 	ldw	r17,4(sp)
61025bcc:	dc000017 	ldw	r16,0(sp)
61025bd0:	dec00304 	addi	sp,sp,12
61025bd4:	102b65c1 	jmpi	6102b65c <__malloc_unlock>
61025bd8:	80bffe17 	ldw	r2,-8(r16)
61025bdc:	50c00204 	addi	r3,r10,8
61025be0:	4091c83a 	sub	r8,r8,r2
61025be4:	41000217 	ldw	r4,8(r8)
61025be8:	388f883a 	add	r7,r7,r2
61025bec:	20c06126 	beq	r4,r3,61025d74 <_free_r+0x268>
61025bf0:	40800317 	ldw	r2,12(r8)
61025bf4:	3247883a 	add	r3,r6,r9
61025bf8:	000b883a 	mov	r5,zero
61025bfc:	11000215 	stw	r4,8(r2)
61025c00:	20800315 	stw	r2,12(r4)
61025c04:	18800117 	ldw	r2,4(r3)
61025c08:	1080004c 	andi	r2,r2,1
61025c0c:	103fdd26 	beq	r2,zero,61025b84 <_free_r+0x78>
61025c10:	38800054 	ori	r2,r7,1
61025c14:	3a07883a 	add	r3,r7,r8
61025c18:	280ac03a 	cmpne	r5,r5,zero
61025c1c:	40800115 	stw	r2,4(r8)
61025c20:	19c00015 	stw	r7,0(r3)
61025c24:	283fe61e 	bne	r5,zero,61025bc0 <_free_r+0xb4>
61025c28:	00807fc4 	movi	r2,511
61025c2c:	11c01f2e 	bgeu	r2,r7,61025cac <_free_r+0x1a0>
61025c30:	3806d27a 	srli	r3,r7,9
61025c34:	1800481e 	bne	r3,zero,61025d58 <_free_r+0x24c>
61025c38:	3804d0fa 	srli	r2,r7,3
61025c3c:	100690fa 	slli	r3,r2,3
61025c40:	1acd883a 	add	r6,r3,r11
61025c44:	31400217 	ldw	r5,8(r6)
61025c48:	31405926 	beq	r6,r5,61025db0 <_free_r+0x2a4>
61025c4c:	28800117 	ldw	r2,4(r5)
61025c50:	00ffff04 	movi	r3,-4
61025c54:	10c4703a 	and	r2,r2,r3
61025c58:	3880022e 	bgeu	r7,r2,61025c64 <_free_r+0x158>
61025c5c:	29400217 	ldw	r5,8(r5)
61025c60:	317ffa1e 	bne	r6,r5,61025c4c <_free_r+0x140>
61025c64:	29800317 	ldw	r6,12(r5)
61025c68:	41800315 	stw	r6,12(r8)
61025c6c:	41400215 	stw	r5,8(r8)
61025c70:	8809883a 	mov	r4,r17
61025c74:	2a000315 	stw	r8,12(r5)
61025c78:	32000215 	stw	r8,8(r6)
61025c7c:	dfc00217 	ldw	ra,8(sp)
61025c80:	dc400117 	ldw	r17,4(sp)
61025c84:	dc000017 	ldw	r16,0(sp)
61025c88:	dec00304 	addi	sp,sp,12
61025c8c:	102b65c1 	jmpi	6102b65c <__malloc_unlock>
61025c90:	dfc00217 	ldw	ra,8(sp)
61025c94:	dc400117 	ldw	r17,4(sp)
61025c98:	dc000017 	ldw	r16,0(sp)
61025c9c:	dec00304 	addi	sp,sp,12
61025ca0:	f800283a 	ret
61025ca4:	31000217 	ldw	r4,8(r6)
61025ca8:	003fbd06 	br	61025ba0 <_free_r+0x94>
61025cac:	3806d0fa 	srli	r3,r7,3
61025cb0:	00800044 	movi	r2,1
61025cb4:	51400117 	ldw	r5,4(r10)
61025cb8:	180890fa 	slli	r4,r3,3
61025cbc:	1807d0ba 	srai	r3,r3,2
61025cc0:	22c9883a 	add	r4,r4,r11
61025cc4:	21800217 	ldw	r6,8(r4)
61025cc8:	10c4983a 	sll	r2,r2,r3
61025ccc:	41000315 	stw	r4,12(r8)
61025cd0:	41800215 	stw	r6,8(r8)
61025cd4:	288ab03a 	or	r5,r5,r2
61025cd8:	22000215 	stw	r8,8(r4)
61025cdc:	8809883a 	mov	r4,r17
61025ce0:	51400115 	stw	r5,4(r10)
61025ce4:	32000315 	stw	r8,12(r6)
61025ce8:	dfc00217 	ldw	ra,8(sp)
61025cec:	dc400117 	ldw	r17,4(sp)
61025cf0:	dc000017 	ldw	r16,0(sp)
61025cf4:	dec00304 	addi	sp,sp,12
61025cf8:	102b65c1 	jmpi	6102b65c <__malloc_unlock>
61025cfc:	2880004c 	andi	r2,r5,1
61025d00:	3a4d883a 	add	r6,r7,r9
61025d04:	1000071e 	bne	r2,zero,61025d24 <_free_r+0x218>
61025d08:	80bffe17 	ldw	r2,-8(r16)
61025d0c:	4091c83a 	sub	r8,r8,r2
61025d10:	41000317 	ldw	r4,12(r8)
61025d14:	40c00217 	ldw	r3,8(r8)
61025d18:	308d883a 	add	r6,r6,r2
61025d1c:	20c00215 	stw	r3,8(r4)
61025d20:	19000315 	stw	r4,12(r3)
61025d24:	009840f4 	movhi	r2,24835
61025d28:	10bebe04 	addi	r2,r2,-1288
61025d2c:	11000017 	ldw	r4,0(r2)
61025d30:	30c00054 	ori	r3,r6,1
61025d34:	52000215 	stw	r8,8(r10)
61025d38:	40c00115 	stw	r3,4(r8)
61025d3c:	313fa036 	bltu	r6,r4,61025bc0 <_free_r+0xb4>
61025d40:	009840f4 	movhi	r2,24835
61025d44:	10856404 	addi	r2,r2,5520
61025d48:	11400017 	ldw	r5,0(r2)
61025d4c:	8809883a 	mov	r4,r17
61025d50:	10259e00 	call	610259e0 <_malloc_trim_r>
61025d54:	003f9a06 	br	61025bc0 <_free_r+0xb4>
61025d58:	00800104 	movi	r2,4
61025d5c:	10c0072e 	bgeu	r2,r3,61025d7c <_free_r+0x270>
61025d60:	00800504 	movi	r2,20
61025d64:	10c01936 	bltu	r2,r3,61025dcc <_free_r+0x2c0>
61025d68:	188016c4 	addi	r2,r3,91
61025d6c:	100690fa 	slli	r3,r2,3
61025d70:	003fb306 	br	61025c40 <_free_r+0x134>
61025d74:	01400044 	movi	r5,1
61025d78:	003f7e06 	br	61025b74 <_free_r+0x68>
61025d7c:	3804d1ba 	srli	r2,r7,6
61025d80:	10800e04 	addi	r2,r2,56
61025d84:	100690fa 	slli	r3,r2,3
61025d88:	003fad06 	br	61025c40 <_free_r+0x134>
61025d8c:	22000315 	stw	r8,12(r4)
61025d90:	22000215 	stw	r8,8(r4)
61025d94:	3a05883a 	add	r2,r7,r8
61025d98:	38c00054 	ori	r3,r7,1
61025d9c:	11c00015 	stw	r7,0(r2)
61025da0:	41000215 	stw	r4,8(r8)
61025da4:	40c00115 	stw	r3,4(r8)
61025da8:	41000315 	stw	r4,12(r8)
61025dac:	003f8406 	br	61025bc0 <_free_r+0xb4>
61025db0:	1005d0ba 	srai	r2,r2,2
61025db4:	00c00044 	movi	r3,1
61025db8:	51000117 	ldw	r4,4(r10)
61025dbc:	1886983a 	sll	r3,r3,r2
61025dc0:	20c8b03a 	or	r4,r4,r3
61025dc4:	51000115 	stw	r4,4(r10)
61025dc8:	003fa706 	br	61025c68 <_free_r+0x15c>
61025dcc:	00801504 	movi	r2,84
61025dd0:	10c00436 	bltu	r2,r3,61025de4 <_free_r+0x2d8>
61025dd4:	3804d33a 	srli	r2,r7,12
61025dd8:	10801b84 	addi	r2,r2,110
61025ddc:	100690fa 	slli	r3,r2,3
61025de0:	003f9706 	br	61025c40 <_free_r+0x134>
61025de4:	00805504 	movi	r2,340
61025de8:	10c00436 	bltu	r2,r3,61025dfc <_free_r+0x2f0>
61025dec:	3804d3fa 	srli	r2,r7,15
61025df0:	10801dc4 	addi	r2,r2,119
61025df4:	100690fa 	slli	r3,r2,3
61025df8:	003f9106 	br	61025c40 <_free_r+0x134>
61025dfc:	00815504 	movi	r2,1364
61025e00:	10c0032e 	bgeu	r2,r3,61025e10 <_free_r+0x304>
61025e04:	00801f84 	movi	r2,126
61025e08:	00c0fc04 	movi	r3,1008
61025e0c:	003f8c06 	br	61025c40 <_free_r+0x134>
61025e10:	3804d4ba 	srli	r2,r7,18
61025e14:	10801f04 	addi	r2,r2,124
61025e18:	100690fa 	slli	r3,r2,3
61025e1c:	003f8806 	br	61025c40 <_free_r+0x134>

61025e20 <__sfvwrite_r>:
61025e20:	30800217 	ldw	r2,8(r6)
61025e24:	defff504 	addi	sp,sp,-44
61025e28:	df000915 	stw	fp,36(sp)
61025e2c:	dd800715 	stw	r22,28(sp)
61025e30:	dc800315 	stw	r18,12(sp)
61025e34:	dfc00a15 	stw	ra,40(sp)
61025e38:	ddc00815 	stw	r23,32(sp)
61025e3c:	dd400615 	stw	r21,24(sp)
61025e40:	dd000515 	stw	r20,20(sp)
61025e44:	dcc00415 	stw	r19,16(sp)
61025e48:	dc400215 	stw	r17,8(sp)
61025e4c:	dc000115 	stw	r16,4(sp)
61025e50:	302d883a 	mov	r22,r6
61025e54:	2039883a 	mov	fp,r4
61025e58:	2825883a 	mov	r18,r5
61025e5c:	10001c26 	beq	r2,zero,61025ed0 <__sfvwrite_r+0xb0>
61025e60:	29c0030b 	ldhu	r7,12(r5)
61025e64:	3880020c 	andi	r2,r7,8
61025e68:	10002726 	beq	r2,zero,61025f08 <__sfvwrite_r+0xe8>
61025e6c:	28800417 	ldw	r2,16(r5)
61025e70:	10002526 	beq	r2,zero,61025f08 <__sfvwrite_r+0xe8>
61025e74:	3880008c 	andi	r2,r7,2
61025e78:	b5400017 	ldw	r21,0(r22)
61025e7c:	10002826 	beq	r2,zero,61025f20 <__sfvwrite_r+0x100>
61025e80:	0021883a 	mov	r16,zero
61025e84:	0023883a 	mov	r17,zero
61025e88:	880d883a 	mov	r6,r17
61025e8c:	e009883a 	mov	r4,fp
61025e90:	00810004 	movi	r2,1024
61025e94:	80006e26 	beq	r16,zero,61026050 <__sfvwrite_r+0x230>
61025e98:	800f883a 	mov	r7,r16
61025e9c:	91400717 	ldw	r5,28(r18)
61025ea0:	1400012e 	bgeu	r2,r16,61025ea8 <__sfvwrite_r+0x88>
61025ea4:	100f883a 	mov	r7,r2
61025ea8:	90c00917 	ldw	r3,36(r18)
61025eac:	183ee83a 	callr	r3
61025eb0:	1007883a 	mov	r3,r2
61025eb4:	80a1c83a 	sub	r16,r16,r2
61025eb8:	88a3883a 	add	r17,r17,r2
61025ebc:	00806d0e 	bge	zero,r2,61026074 <__sfvwrite_r+0x254>
61025ec0:	b0800217 	ldw	r2,8(r22)
61025ec4:	10c5c83a 	sub	r2,r2,r3
61025ec8:	b0800215 	stw	r2,8(r22)
61025ecc:	103fee1e 	bne	r2,zero,61025e88 <__sfvwrite_r+0x68>
61025ed0:	0009883a 	mov	r4,zero
61025ed4:	2005883a 	mov	r2,r4
61025ed8:	dfc00a17 	ldw	ra,40(sp)
61025edc:	df000917 	ldw	fp,36(sp)
61025ee0:	ddc00817 	ldw	r23,32(sp)
61025ee4:	dd800717 	ldw	r22,28(sp)
61025ee8:	dd400617 	ldw	r21,24(sp)
61025eec:	dd000517 	ldw	r20,20(sp)
61025ef0:	dcc00417 	ldw	r19,16(sp)
61025ef4:	dc800317 	ldw	r18,12(sp)
61025ef8:	dc400217 	ldw	r17,8(sp)
61025efc:	dc000117 	ldw	r16,4(sp)
61025f00:	dec00b04 	addi	sp,sp,44
61025f04:	f800283a 	ret
61025f08:	1023be80 	call	61023be8 <__swsetup_r>
61025f0c:	1000e41e 	bne	r2,zero,610262a0 <__sfvwrite_r+0x480>
61025f10:	91c0030b 	ldhu	r7,12(r18)
61025f14:	b5400017 	ldw	r21,0(r22)
61025f18:	3880008c 	andi	r2,r7,2
61025f1c:	103fd81e 	bne	r2,zero,61025e80 <__sfvwrite_r+0x60>
61025f20:	3880004c 	andi	r2,r7,1
61025f24:	1005003a 	cmpeq	r2,r2,zero
61025f28:	10005726 	beq	r2,zero,61026088 <__sfvwrite_r+0x268>
61025f2c:	0029883a 	mov	r20,zero
61025f30:	002f883a 	mov	r23,zero
61025f34:	a0004226 	beq	r20,zero,61026040 <__sfvwrite_r+0x220>
61025f38:	3880800c 	andi	r2,r7,512
61025f3c:	94000217 	ldw	r16,8(r18)
61025f40:	10008b26 	beq	r2,zero,61026170 <__sfvwrite_r+0x350>
61025f44:	800d883a 	mov	r6,r16
61025f48:	a400a536 	bltu	r20,r16,610261e0 <__sfvwrite_r+0x3c0>
61025f4c:	3881200c 	andi	r2,r7,1152
61025f50:	10002726 	beq	r2,zero,61025ff0 <__sfvwrite_r+0x1d0>
61025f54:	90800517 	ldw	r2,20(r18)
61025f58:	92000417 	ldw	r8,16(r18)
61025f5c:	91400017 	ldw	r5,0(r18)
61025f60:	1087883a 	add	r3,r2,r2
61025f64:	1887883a 	add	r3,r3,r2
61025f68:	1808d7fa 	srli	r4,r3,31
61025f6c:	2a21c83a 	sub	r16,r5,r8
61025f70:	80800044 	addi	r2,r16,1
61025f74:	20c9883a 	add	r4,r4,r3
61025f78:	2027d07a 	srai	r19,r4,1
61025f7c:	a085883a 	add	r2,r20,r2
61025f80:	980d883a 	mov	r6,r19
61025f84:	9880022e 	bgeu	r19,r2,61025f90 <__sfvwrite_r+0x170>
61025f88:	1027883a 	mov	r19,r2
61025f8c:	100d883a 	mov	r6,r2
61025f90:	3881000c 	andi	r2,r7,1024
61025f94:	1000b826 	beq	r2,zero,61026278 <__sfvwrite_r+0x458>
61025f98:	300b883a 	mov	r5,r6
61025f9c:	e009883a 	mov	r4,fp
61025fa0:	10266940 	call	61026694 <_malloc_r>
61025fa4:	10003126 	beq	r2,zero,6102606c <__sfvwrite_r+0x24c>
61025fa8:	91400417 	ldw	r5,16(r18)
61025fac:	1009883a 	mov	r4,r2
61025fb0:	800d883a 	mov	r6,r16
61025fb4:	1023883a 	mov	r17,r2
61025fb8:	1021a5c0 	call	61021a5c <memcpy>
61025fbc:	90c0030b 	ldhu	r3,12(r18)
61025fc0:	00beffc4 	movi	r2,-1025
61025fc4:	1886703a 	and	r3,r3,r2
61025fc8:	18c02014 	ori	r3,r3,128
61025fcc:	90c0030d 	sth	r3,12(r18)
61025fd0:	9c07c83a 	sub	r3,r19,r16
61025fd4:	8c05883a 	add	r2,r17,r16
61025fd8:	a00d883a 	mov	r6,r20
61025fdc:	a021883a 	mov	r16,r20
61025fe0:	90800015 	stw	r2,0(r18)
61025fe4:	90c00215 	stw	r3,8(r18)
61025fe8:	94400415 	stw	r17,16(r18)
61025fec:	94c00515 	stw	r19,20(r18)
61025ff0:	91000017 	ldw	r4,0(r18)
61025ff4:	b80b883a 	mov	r5,r23
61025ff8:	a023883a 	mov	r17,r20
61025ffc:	1026eb80 	call	61026eb8 <memmove>
61026000:	90c00217 	ldw	r3,8(r18)
61026004:	90800017 	ldw	r2,0(r18)
61026008:	a027883a 	mov	r19,r20
6102600c:	1c07c83a 	sub	r3,r3,r16
61026010:	1405883a 	add	r2,r2,r16
61026014:	90c00215 	stw	r3,8(r18)
61026018:	a021883a 	mov	r16,r20
6102601c:	90800015 	stw	r2,0(r18)
61026020:	b0800217 	ldw	r2,8(r22)
61026024:	1405c83a 	sub	r2,r2,r16
61026028:	b0800215 	stw	r2,8(r22)
6102602c:	103fa826 	beq	r2,zero,61025ed0 <__sfvwrite_r+0xb0>
61026030:	a469c83a 	sub	r20,r20,r17
61026034:	91c0030b 	ldhu	r7,12(r18)
61026038:	bcef883a 	add	r23,r23,r19
6102603c:	a03fbe1e 	bne	r20,zero,61025f38 <__sfvwrite_r+0x118>
61026040:	adc00017 	ldw	r23,0(r21)
61026044:	ad000117 	ldw	r20,4(r21)
61026048:	ad400204 	addi	r21,r21,8
6102604c:	003fb906 	br	61025f34 <__sfvwrite_r+0x114>
61026050:	ac400017 	ldw	r17,0(r21)
61026054:	ac000117 	ldw	r16,4(r21)
61026058:	ad400204 	addi	r21,r21,8
6102605c:	003f8a06 	br	61025e88 <__sfvwrite_r+0x68>
61026060:	91400417 	ldw	r5,16(r18)
61026064:	e009883a 	mov	r4,fp
61026068:	1025b0c0 	call	61025b0c <_free_r>
6102606c:	00800304 	movi	r2,12
61026070:	e0800015 	stw	r2,0(fp)
61026074:	9080030b 	ldhu	r2,12(r18)
61026078:	013fffc4 	movi	r4,-1
6102607c:	10801014 	ori	r2,r2,64
61026080:	9080030d 	sth	r2,12(r18)
61026084:	003f9306 	br	61025ed4 <__sfvwrite_r+0xb4>
61026088:	0027883a 	mov	r19,zero
6102608c:	002f883a 	mov	r23,zero
61026090:	d8000015 	stw	zero,0(sp)
61026094:	0029883a 	mov	r20,zero
61026098:	98001e26 	beq	r19,zero,61026114 <__sfvwrite_r+0x2f4>
6102609c:	d8c00017 	ldw	r3,0(sp)
610260a0:	1804c03a 	cmpne	r2,r3,zero
610260a4:	10005e26 	beq	r2,zero,61026220 <__sfvwrite_r+0x400>
610260a8:	9821883a 	mov	r16,r19
610260ac:	a4c0012e 	bgeu	r20,r19,610260b4 <__sfvwrite_r+0x294>
610260b0:	a021883a 	mov	r16,r20
610260b4:	91000017 	ldw	r4,0(r18)
610260b8:	90800417 	ldw	r2,16(r18)
610260bc:	91800217 	ldw	r6,8(r18)
610260c0:	91c00517 	ldw	r7,20(r18)
610260c4:	1100022e 	bgeu	r2,r4,610260d0 <__sfvwrite_r+0x2b0>
610260c8:	31e3883a 	add	r17,r6,r7
610260cc:	8c001616 	blt	r17,r16,61026128 <__sfvwrite_r+0x308>
610260d0:	81c03816 	blt	r16,r7,610261b4 <__sfvwrite_r+0x394>
610260d4:	90c00917 	ldw	r3,36(r18)
610260d8:	91400717 	ldw	r5,28(r18)
610260dc:	e009883a 	mov	r4,fp
610260e0:	b80d883a 	mov	r6,r23
610260e4:	183ee83a 	callr	r3
610260e8:	1023883a 	mov	r17,r2
610260ec:	00bfe10e 	bge	zero,r2,61026074 <__sfvwrite_r+0x254>
610260f0:	a469c83a 	sub	r20,r20,r17
610260f4:	a0001826 	beq	r20,zero,61026158 <__sfvwrite_r+0x338>
610260f8:	b0800217 	ldw	r2,8(r22)
610260fc:	1445c83a 	sub	r2,r2,r17
61026100:	b0800215 	stw	r2,8(r22)
61026104:	103f7226 	beq	r2,zero,61025ed0 <__sfvwrite_r+0xb0>
61026108:	9c67c83a 	sub	r19,r19,r17
6102610c:	bc6f883a 	add	r23,r23,r17
61026110:	983fe21e 	bne	r19,zero,6102609c <__sfvwrite_r+0x27c>
61026114:	adc00017 	ldw	r23,0(r21)
61026118:	acc00117 	ldw	r19,4(r21)
6102611c:	ad400204 	addi	r21,r21,8
61026120:	d8000015 	stw	zero,0(sp)
61026124:	003fdc06 	br	61026098 <__sfvwrite_r+0x278>
61026128:	b80b883a 	mov	r5,r23
6102612c:	880d883a 	mov	r6,r17
61026130:	1026eb80 	call	61026eb8 <memmove>
61026134:	90c00017 	ldw	r3,0(r18)
61026138:	e009883a 	mov	r4,fp
6102613c:	900b883a 	mov	r5,r18
61026140:	1c47883a 	add	r3,r3,r17
61026144:	90c00015 	stw	r3,0(r18)
61026148:	10254f00 	call	610254f0 <_fflush_r>
6102614c:	103fc91e 	bne	r2,zero,61026074 <__sfvwrite_r+0x254>
61026150:	a469c83a 	sub	r20,r20,r17
61026154:	a03fe81e 	bne	r20,zero,610260f8 <__sfvwrite_r+0x2d8>
61026158:	e009883a 	mov	r4,fp
6102615c:	900b883a 	mov	r5,r18
61026160:	10254f00 	call	610254f0 <_fflush_r>
61026164:	103fc31e 	bne	r2,zero,61026074 <__sfvwrite_r+0x254>
61026168:	d8000015 	stw	zero,0(sp)
6102616c:	003fe206 	br	610260f8 <__sfvwrite_r+0x2d8>
61026170:	91000017 	ldw	r4,0(r18)
61026174:	90800417 	ldw	r2,16(r18)
61026178:	1100022e 	bgeu	r2,r4,61026184 <__sfvwrite_r+0x364>
6102617c:	8023883a 	mov	r17,r16
61026180:	85003136 	bltu	r16,r20,61026248 <__sfvwrite_r+0x428>
61026184:	91c00517 	ldw	r7,20(r18)
61026188:	a1c01836 	bltu	r20,r7,610261ec <__sfvwrite_r+0x3cc>
6102618c:	90c00917 	ldw	r3,36(r18)
61026190:	91400717 	ldw	r5,28(r18)
61026194:	e009883a 	mov	r4,fp
61026198:	b80d883a 	mov	r6,r23
6102619c:	183ee83a 	callr	r3
610261a0:	1021883a 	mov	r16,r2
610261a4:	00bfb30e 	bge	zero,r2,61026074 <__sfvwrite_r+0x254>
610261a8:	1023883a 	mov	r17,r2
610261ac:	1027883a 	mov	r19,r2
610261b0:	003f9b06 	br	61026020 <__sfvwrite_r+0x200>
610261b4:	b80b883a 	mov	r5,r23
610261b8:	800d883a 	mov	r6,r16
610261bc:	1026eb80 	call	61026eb8 <memmove>
610261c0:	90c00217 	ldw	r3,8(r18)
610261c4:	90800017 	ldw	r2,0(r18)
610261c8:	8023883a 	mov	r17,r16
610261cc:	1c07c83a 	sub	r3,r3,r16
610261d0:	1405883a 	add	r2,r2,r16
610261d4:	90c00215 	stw	r3,8(r18)
610261d8:	90800015 	stw	r2,0(r18)
610261dc:	003fc406 	br	610260f0 <__sfvwrite_r+0x2d0>
610261e0:	a00d883a 	mov	r6,r20
610261e4:	a021883a 	mov	r16,r20
610261e8:	003f8106 	br	61025ff0 <__sfvwrite_r+0x1d0>
610261ec:	b80b883a 	mov	r5,r23
610261f0:	a00d883a 	mov	r6,r20
610261f4:	1026eb80 	call	61026eb8 <memmove>
610261f8:	90c00217 	ldw	r3,8(r18)
610261fc:	90800017 	ldw	r2,0(r18)
61026200:	a021883a 	mov	r16,r20
61026204:	1d07c83a 	sub	r3,r3,r20
61026208:	1505883a 	add	r2,r2,r20
6102620c:	a023883a 	mov	r17,r20
61026210:	a027883a 	mov	r19,r20
61026214:	90c00215 	stw	r3,8(r18)
61026218:	90800015 	stw	r2,0(r18)
6102621c:	003f8006 	br	61026020 <__sfvwrite_r+0x200>
61026220:	b809883a 	mov	r4,r23
61026224:	01400284 	movi	r5,10
61026228:	980d883a 	mov	r6,r19
6102622c:	1026dd40 	call	61026dd4 <memchr>
61026230:	10001726 	beq	r2,zero,61026290 <__sfvwrite_r+0x470>
61026234:	15c5c83a 	sub	r2,r2,r23
61026238:	15000044 	addi	r20,r2,1
6102623c:	00800044 	movi	r2,1
61026240:	d8800015 	stw	r2,0(sp)
61026244:	003f9806 	br	610260a8 <__sfvwrite_r+0x288>
61026248:	b80b883a 	mov	r5,r23
6102624c:	800d883a 	mov	r6,r16
61026250:	1026eb80 	call	61026eb8 <memmove>
61026254:	90c00017 	ldw	r3,0(r18)
61026258:	e009883a 	mov	r4,fp
6102625c:	900b883a 	mov	r5,r18
61026260:	1c07883a 	add	r3,r3,r16
61026264:	90c00015 	stw	r3,0(r18)
61026268:	8027883a 	mov	r19,r16
6102626c:	10254f00 	call	610254f0 <_fflush_r>
61026270:	103f6b26 	beq	r2,zero,61026020 <__sfvwrite_r+0x200>
61026274:	003f7f06 	br	61026074 <__sfvwrite_r+0x254>
61026278:	400b883a 	mov	r5,r8
6102627c:	e009883a 	mov	r4,fp
61026280:	10282100 	call	61028210 <_realloc_r>
61026284:	103f7626 	beq	r2,zero,61026060 <__sfvwrite_r+0x240>
61026288:	1023883a 	mov	r17,r2
6102628c:	003f5006 	br	61025fd0 <__sfvwrite_r+0x1b0>
61026290:	00c00044 	movi	r3,1
61026294:	9d000044 	addi	r20,r19,1
61026298:	d8c00015 	stw	r3,0(sp)
6102629c:	003f8206 	br	610260a8 <__sfvwrite_r+0x288>
610262a0:	9080030b 	ldhu	r2,12(r18)
610262a4:	00c00244 	movi	r3,9
610262a8:	013fffc4 	movi	r4,-1
610262ac:	10801014 	ori	r2,r2,64
610262b0:	9080030d 	sth	r2,12(r18)
610262b4:	e0c00015 	stw	r3,0(fp)
610262b8:	003f0606 	br	61025ed4 <__sfvwrite_r+0xb4>

610262bc <_fwalk_reent>:
610262bc:	defff704 	addi	sp,sp,-36
610262c0:	dcc00315 	stw	r19,12(sp)
610262c4:	24c0b804 	addi	r19,r4,736
610262c8:	dd800615 	stw	r22,24(sp)
610262cc:	dd400515 	stw	r21,20(sp)
610262d0:	dfc00815 	stw	ra,32(sp)
610262d4:	ddc00715 	stw	r23,28(sp)
610262d8:	dd000415 	stw	r20,16(sp)
610262dc:	dc800215 	stw	r18,8(sp)
610262e0:	dc400115 	stw	r17,4(sp)
610262e4:	dc000015 	stw	r16,0(sp)
610262e8:	202b883a 	mov	r21,r4
610262ec:	282d883a 	mov	r22,r5
610262f0:	10257780 	call	61025778 <__sfp_lock_acquire>
610262f4:	98002126 	beq	r19,zero,6102637c <_fwalk_reent+0xc0>
610262f8:	002f883a 	mov	r23,zero
610262fc:	9c800117 	ldw	r18,4(r19)
61026300:	9c000217 	ldw	r16,8(r19)
61026304:	90bfffc4 	addi	r2,r18,-1
61026308:	10000d16 	blt	r2,zero,61026340 <_fwalk_reent+0x84>
6102630c:	0023883a 	mov	r17,zero
61026310:	053fffc4 	movi	r20,-1
61026314:	8080030f 	ldh	r2,12(r16)
61026318:	8c400044 	addi	r17,r17,1
6102631c:	10000626 	beq	r2,zero,61026338 <_fwalk_reent+0x7c>
61026320:	8080038f 	ldh	r2,14(r16)
61026324:	800b883a 	mov	r5,r16
61026328:	a809883a 	mov	r4,r21
6102632c:	15000226 	beq	r2,r20,61026338 <_fwalk_reent+0x7c>
61026330:	b03ee83a 	callr	r22
61026334:	b8aeb03a 	or	r23,r23,r2
61026338:	84001704 	addi	r16,r16,92
6102633c:	947ff51e 	bne	r18,r17,61026314 <_fwalk_reent+0x58>
61026340:	9cc00017 	ldw	r19,0(r19)
61026344:	983fed1e 	bne	r19,zero,610262fc <_fwalk_reent+0x40>
61026348:	102577c0 	call	6102577c <__sfp_lock_release>
6102634c:	b805883a 	mov	r2,r23
61026350:	dfc00817 	ldw	ra,32(sp)
61026354:	ddc00717 	ldw	r23,28(sp)
61026358:	dd800617 	ldw	r22,24(sp)
6102635c:	dd400517 	ldw	r21,20(sp)
61026360:	dd000417 	ldw	r20,16(sp)
61026364:	dcc00317 	ldw	r19,12(sp)
61026368:	dc800217 	ldw	r18,8(sp)
6102636c:	dc400117 	ldw	r17,4(sp)
61026370:	dc000017 	ldw	r16,0(sp)
61026374:	dec00904 	addi	sp,sp,36
61026378:	f800283a 	ret
6102637c:	002f883a 	mov	r23,zero
61026380:	003ff106 	br	61026348 <_fwalk_reent+0x8c>

61026384 <_fwalk>:
61026384:	defff804 	addi	sp,sp,-32
61026388:	dcc00315 	stw	r19,12(sp)
6102638c:	24c0b804 	addi	r19,r4,736
61026390:	dd400515 	stw	r21,20(sp)
61026394:	dfc00715 	stw	ra,28(sp)
61026398:	dd800615 	stw	r22,24(sp)
6102639c:	dd000415 	stw	r20,16(sp)
610263a0:	dc800215 	stw	r18,8(sp)
610263a4:	dc400115 	stw	r17,4(sp)
610263a8:	dc000015 	stw	r16,0(sp)
610263ac:	282b883a 	mov	r21,r5
610263b0:	10257780 	call	61025778 <__sfp_lock_acquire>
610263b4:	98001f26 	beq	r19,zero,61026434 <_fwalk+0xb0>
610263b8:	002d883a 	mov	r22,zero
610263bc:	9c800117 	ldw	r18,4(r19)
610263c0:	9c000217 	ldw	r16,8(r19)
610263c4:	90bfffc4 	addi	r2,r18,-1
610263c8:	10000c16 	blt	r2,zero,610263fc <_fwalk+0x78>
610263cc:	0023883a 	mov	r17,zero
610263d0:	053fffc4 	movi	r20,-1
610263d4:	8080030f 	ldh	r2,12(r16)
610263d8:	8c400044 	addi	r17,r17,1
610263dc:	10000526 	beq	r2,zero,610263f4 <_fwalk+0x70>
610263e0:	8080038f 	ldh	r2,14(r16)
610263e4:	8009883a 	mov	r4,r16
610263e8:	15000226 	beq	r2,r20,610263f4 <_fwalk+0x70>
610263ec:	a83ee83a 	callr	r21
610263f0:	b0acb03a 	or	r22,r22,r2
610263f4:	84001704 	addi	r16,r16,92
610263f8:	947ff61e 	bne	r18,r17,610263d4 <_fwalk+0x50>
610263fc:	9cc00017 	ldw	r19,0(r19)
61026400:	983fee1e 	bne	r19,zero,610263bc <_fwalk+0x38>
61026404:	102577c0 	call	6102577c <__sfp_lock_release>
61026408:	b005883a 	mov	r2,r22
6102640c:	dfc00717 	ldw	ra,28(sp)
61026410:	dd800617 	ldw	r22,24(sp)
61026414:	dd400517 	ldw	r21,20(sp)
61026418:	dd000417 	ldw	r20,16(sp)
6102641c:	dcc00317 	ldw	r19,12(sp)
61026420:	dc800217 	ldw	r18,8(sp)
61026424:	dc400117 	ldw	r17,4(sp)
61026428:	dc000017 	ldw	r16,0(sp)
6102642c:	dec00804 	addi	sp,sp,32
61026430:	f800283a 	ret
61026434:	002d883a 	mov	r22,zero
61026438:	003ff206 	br	61026404 <_fwalk+0x80>

6102643c <__locale_charset>:
6102643c:	d0a00317 	ldw	r2,-32756(gp)
61026440:	f800283a 	ret

61026444 <_localeconv_r>:
61026444:	009840f4 	movhi	r2,24835
61026448:	10b7ce04 	addi	r2,r2,-8392
6102644c:	f800283a 	ret

61026450 <localeconv>:
61026450:	009840f4 	movhi	r2,24835
61026454:	10beba04 	addi	r2,r2,-1304
61026458:	11000017 	ldw	r4,0(r2)
6102645c:	10264441 	jmpi	61026444 <_localeconv_r>

61026460 <_setlocale_r>:
61026460:	defffc04 	addi	sp,sp,-16
61026464:	00d840f4 	movhi	r3,24835
61026468:	18f7c904 	addi	r3,r3,-8412
6102646c:	dc800215 	stw	r18,8(sp)
61026470:	dc400115 	stw	r17,4(sp)
61026474:	dc000015 	stw	r16,0(sp)
61026478:	2023883a 	mov	r17,r4
6102647c:	2825883a 	mov	r18,r5
61026480:	dfc00315 	stw	ra,12(sp)
61026484:	3021883a 	mov	r16,r6
61026488:	3009883a 	mov	r4,r6
6102648c:	180b883a 	mov	r5,r3
61026490:	30000926 	beq	r6,zero,610264b8 <_setlocale_r+0x58>
61026494:	1028a300 	call	61028a30 <strcmp>
61026498:	8009883a 	mov	r4,r16
6102649c:	015840f4 	movhi	r5,24835
610264a0:	2977b404 	addi	r5,r5,-8496
610264a4:	10000b1e 	bne	r2,zero,610264d4 <_setlocale_r+0x74>
610264a8:	8c000d15 	stw	r16,52(r17)
610264ac:	8c800c15 	stw	r18,48(r17)
610264b0:	00d840f4 	movhi	r3,24835
610264b4:	18f7c904 	addi	r3,r3,-8412
610264b8:	1805883a 	mov	r2,r3
610264bc:	dfc00317 	ldw	ra,12(sp)
610264c0:	dc800217 	ldw	r18,8(sp)
610264c4:	dc400117 	ldw	r17,4(sp)
610264c8:	dc000017 	ldw	r16,0(sp)
610264cc:	dec00404 	addi	sp,sp,16
610264d0:	f800283a 	ret
610264d4:	1028a300 	call	61028a30 <strcmp>
610264d8:	0007883a 	mov	r3,zero
610264dc:	103ff226 	beq	r2,zero,610264a8 <_setlocale_r+0x48>
610264e0:	003ff506 	br	610264b8 <_setlocale_r+0x58>

610264e4 <setlocale>:
610264e4:	019840f4 	movhi	r6,24835
610264e8:	31beba04 	addi	r6,r6,-1304
610264ec:	2007883a 	mov	r3,r4
610264f0:	31000017 	ldw	r4,0(r6)
610264f4:	280d883a 	mov	r6,r5
610264f8:	180b883a 	mov	r5,r3
610264fc:	10264601 	jmpi	61026460 <_setlocale_r>

61026500 <__smakebuf_r>:
61026500:	2880030b 	ldhu	r2,12(r5)
61026504:	deffed04 	addi	sp,sp,-76
61026508:	dc401015 	stw	r17,64(sp)
6102650c:	1080008c 	andi	r2,r2,2
61026510:	dc000f15 	stw	r16,60(sp)
61026514:	dfc01215 	stw	ra,72(sp)
61026518:	dc801115 	stw	r18,68(sp)
6102651c:	2821883a 	mov	r16,r5
61026520:	2023883a 	mov	r17,r4
61026524:	10000b26 	beq	r2,zero,61026554 <__smakebuf_r+0x54>
61026528:	28c010c4 	addi	r3,r5,67
6102652c:	00800044 	movi	r2,1
61026530:	28800515 	stw	r2,20(r5)
61026534:	28c00415 	stw	r3,16(r5)
61026538:	28c00015 	stw	r3,0(r5)
6102653c:	dfc01217 	ldw	ra,72(sp)
61026540:	dc801117 	ldw	r18,68(sp)
61026544:	dc401017 	ldw	r17,64(sp)
61026548:	dc000f17 	ldw	r16,60(sp)
6102654c:	dec01304 	addi	sp,sp,76
61026550:	f800283a 	ret
61026554:	2940038f 	ldh	r5,14(r5)
61026558:	28002116 	blt	r5,zero,610265e0 <__smakebuf_r+0xe0>
6102655c:	d80d883a 	mov	r6,sp
61026560:	1028ef80 	call	61028ef8 <_fstat_r>
61026564:	10001e16 	blt	r2,zero,610265e0 <__smakebuf_r+0xe0>
61026568:	d8800117 	ldw	r2,4(sp)
6102656c:	00e00014 	movui	r3,32768
61026570:	113c000c 	andi	r4,r2,61440
61026574:	20c03126 	beq	r4,r3,6102663c <__smakebuf_r+0x13c>
61026578:	8080030b 	ldhu	r2,12(r16)
6102657c:	00c80004 	movi	r3,8192
61026580:	10820014 	ori	r2,r2,2048
61026584:	8080030d 	sth	r2,12(r16)
61026588:	20c01e26 	beq	r4,r3,61026604 <__smakebuf_r+0x104>
6102658c:	04810004 	movi	r18,1024
61026590:	8809883a 	mov	r4,r17
61026594:	900b883a 	mov	r5,r18
61026598:	10266940 	call	61026694 <_malloc_r>
6102659c:	1009883a 	mov	r4,r2
610265a0:	10003126 	beq	r2,zero,61026668 <__smakebuf_r+0x168>
610265a4:	80c0030b 	ldhu	r3,12(r16)
610265a8:	009840b4 	movhi	r2,24834
610265ac:	10961b04 	addi	r2,r2,22636
610265b0:	88800f15 	stw	r2,60(r17)
610265b4:	18c02014 	ori	r3,r3,128
610265b8:	84800515 	stw	r18,20(r16)
610265bc:	80c0030d 	sth	r3,12(r16)
610265c0:	81000415 	stw	r4,16(r16)
610265c4:	81000015 	stw	r4,0(r16)
610265c8:	dfc01217 	ldw	ra,72(sp)
610265cc:	dc801117 	ldw	r18,68(sp)
610265d0:	dc401017 	ldw	r17,64(sp)
610265d4:	dc000f17 	ldw	r16,60(sp)
610265d8:	dec01304 	addi	sp,sp,76
610265dc:	f800283a 	ret
610265e0:	80c0030b 	ldhu	r3,12(r16)
610265e4:	1880200c 	andi	r2,r3,128
610265e8:	10000426 	beq	r2,zero,610265fc <__smakebuf_r+0xfc>
610265ec:	04801004 	movi	r18,64
610265f0:	18820014 	ori	r2,r3,2048
610265f4:	8080030d 	sth	r2,12(r16)
610265f8:	003fe506 	br	61026590 <__smakebuf_r+0x90>
610265fc:	04810004 	movi	r18,1024
61026600:	003ffb06 	br	610265f0 <__smakebuf_r+0xf0>
61026604:	8140038f 	ldh	r5,14(r16)
61026608:	8809883a 	mov	r4,r17
6102660c:	1028f6c0 	call	61028f6c <_isatty_r>
61026610:	103fde26 	beq	r2,zero,6102658c <__smakebuf_r+0x8c>
61026614:	8080030b 	ldhu	r2,12(r16)
61026618:	80c010c4 	addi	r3,r16,67
6102661c:	04810004 	movi	r18,1024
61026620:	10800054 	ori	r2,r2,1
61026624:	8080030d 	sth	r2,12(r16)
61026628:	00800044 	movi	r2,1
6102662c:	80c00415 	stw	r3,16(r16)
61026630:	80800515 	stw	r2,20(r16)
61026634:	80c00015 	stw	r3,0(r16)
61026638:	003fd506 	br	61026590 <__smakebuf_r+0x90>
6102663c:	80c00a17 	ldw	r3,40(r16)
61026640:	009840f4 	movhi	r2,24835
61026644:	10a23b04 	addi	r2,r2,-30484
61026648:	18bfcb1e 	bne	r3,r2,61026578 <__smakebuf_r+0x78>
6102664c:	8080030b 	ldhu	r2,12(r16)
61026650:	00c10004 	movi	r3,1024
61026654:	1825883a 	mov	r18,r3
61026658:	10c4b03a 	or	r2,r2,r3
6102665c:	8080030d 	sth	r2,12(r16)
61026660:	80c01315 	stw	r3,76(r16)
61026664:	003fca06 	br	61026590 <__smakebuf_r+0x90>
61026668:	8100030b 	ldhu	r4,12(r16)
6102666c:	2080800c 	andi	r2,r4,512
61026670:	103fb21e 	bne	r2,zero,6102653c <__smakebuf_r+0x3c>
61026674:	80c010c4 	addi	r3,r16,67
61026678:	21000094 	ori	r4,r4,2
6102667c:	00800044 	movi	r2,1
61026680:	80800515 	stw	r2,20(r16)
61026684:	8100030d 	sth	r4,12(r16)
61026688:	80c00415 	stw	r3,16(r16)
6102668c:	80c00015 	stw	r3,0(r16)
61026690:	003faa06 	br	6102653c <__smakebuf_r+0x3c>

61026694 <_malloc_r>:
61026694:	defff604 	addi	sp,sp,-40
61026698:	28c002c4 	addi	r3,r5,11
6102669c:	00800584 	movi	r2,22
610266a0:	dc800215 	stw	r18,8(sp)
610266a4:	dfc00915 	stw	ra,36(sp)
610266a8:	df000815 	stw	fp,32(sp)
610266ac:	ddc00715 	stw	r23,28(sp)
610266b0:	dd800615 	stw	r22,24(sp)
610266b4:	dd400515 	stw	r21,20(sp)
610266b8:	dd000415 	stw	r20,16(sp)
610266bc:	dcc00315 	stw	r19,12(sp)
610266c0:	dc400115 	stw	r17,4(sp)
610266c4:	dc000015 	stw	r16,0(sp)
610266c8:	2025883a 	mov	r18,r4
610266cc:	10c01236 	bltu	r2,r3,61026718 <_malloc_r+0x84>
610266d0:	04400404 	movi	r17,16
610266d4:	8940142e 	bgeu	r17,r5,61026728 <_malloc_r+0x94>
610266d8:	00800304 	movi	r2,12
610266dc:	0007883a 	mov	r3,zero
610266e0:	90800015 	stw	r2,0(r18)
610266e4:	1805883a 	mov	r2,r3
610266e8:	dfc00917 	ldw	ra,36(sp)
610266ec:	df000817 	ldw	fp,32(sp)
610266f0:	ddc00717 	ldw	r23,28(sp)
610266f4:	dd800617 	ldw	r22,24(sp)
610266f8:	dd400517 	ldw	r21,20(sp)
610266fc:	dd000417 	ldw	r20,16(sp)
61026700:	dcc00317 	ldw	r19,12(sp)
61026704:	dc800217 	ldw	r18,8(sp)
61026708:	dc400117 	ldw	r17,4(sp)
6102670c:	dc000017 	ldw	r16,0(sp)
61026710:	dec00a04 	addi	sp,sp,40
61026714:	f800283a 	ret
61026718:	00bffe04 	movi	r2,-8
6102671c:	18a2703a 	and	r17,r3,r2
61026720:	883fed16 	blt	r17,zero,610266d8 <_malloc_r+0x44>
61026724:	897fec36 	bltu	r17,r5,610266d8 <_malloc_r+0x44>
61026728:	9009883a 	mov	r4,r18
6102672c:	102b63c0 	call	6102b63c <__malloc_lock>
61026730:	00807dc4 	movi	r2,503
61026734:	14402b2e 	bgeu	r2,r17,610267e4 <_malloc_r+0x150>
61026738:	8806d27a 	srli	r3,r17,9
6102673c:	18003f1e 	bne	r3,zero,6102683c <_malloc_r+0x1a8>
61026740:	880cd0fa 	srli	r6,r17,3
61026744:	300490fa 	slli	r2,r6,3
61026748:	02d840f4 	movhi	r11,24835
6102674c:	5af93604 	addi	r11,r11,-6952
61026750:	12cb883a 	add	r5,r2,r11
61026754:	2c000317 	ldw	r16,12(r5)
61026758:	580f883a 	mov	r7,r11
6102675c:	2c00041e 	bne	r5,r16,61026770 <_malloc_r+0xdc>
61026760:	00000a06 	br	6102678c <_malloc_r+0xf8>
61026764:	1800860e 	bge	r3,zero,61026980 <_malloc_r+0x2ec>
61026768:	84000317 	ldw	r16,12(r16)
6102676c:	2c000726 	beq	r5,r16,6102678c <_malloc_r+0xf8>
61026770:	80800117 	ldw	r2,4(r16)
61026774:	00ffff04 	movi	r3,-4
61026778:	10c8703a 	and	r4,r2,r3
6102677c:	2447c83a 	sub	r3,r4,r17
61026780:	008003c4 	movi	r2,15
61026784:	10fff70e 	bge	r2,r3,61026764 <_malloc_r+0xd0>
61026788:	31bfffc4 	addi	r6,r6,-1
6102678c:	32400044 	addi	r9,r6,1
61026790:	029840f4 	movhi	r10,24835
61026794:	52b93804 	addi	r10,r10,-6944
61026798:	54000217 	ldw	r16,8(r10)
6102679c:	8280a026 	beq	r16,r10,61026a20 <_malloc_r+0x38c>
610267a0:	80800117 	ldw	r2,4(r16)
610267a4:	00ffff04 	movi	r3,-4
610267a8:	10ca703a 	and	r5,r2,r3
610267ac:	2c4dc83a 	sub	r6,r5,r17
610267b0:	008003c4 	movi	r2,15
610267b4:	11808316 	blt	r2,r6,610269c4 <_malloc_r+0x330>
610267b8:	52800315 	stw	r10,12(r10)
610267bc:	52800215 	stw	r10,8(r10)
610267c0:	30002916 	blt	r6,zero,61026868 <_malloc_r+0x1d4>
610267c4:	8147883a 	add	r3,r16,r5
610267c8:	18800117 	ldw	r2,4(r3)
610267cc:	9009883a 	mov	r4,r18
610267d0:	10800054 	ori	r2,r2,1
610267d4:	18800115 	stw	r2,4(r3)
610267d8:	102b65c0 	call	6102b65c <__malloc_unlock>
610267dc:	80c00204 	addi	r3,r16,8
610267e0:	003fc006 	br	610266e4 <_malloc_r+0x50>
610267e4:	02d840f4 	movhi	r11,24835
610267e8:	5af93604 	addi	r11,r11,-6952
610267ec:	8ac5883a 	add	r2,r17,r11
610267f0:	14000317 	ldw	r16,12(r2)
610267f4:	580f883a 	mov	r7,r11
610267f8:	8806d0fa 	srli	r3,r17,3
610267fc:	14006c26 	beq	r2,r16,610269b0 <_malloc_r+0x31c>
61026800:	80c00117 	ldw	r3,4(r16)
61026804:	00bfff04 	movi	r2,-4
61026808:	81800317 	ldw	r6,12(r16)
6102680c:	1886703a 	and	r3,r3,r2
61026810:	80c7883a 	add	r3,r16,r3
61026814:	18800117 	ldw	r2,4(r3)
61026818:	81400217 	ldw	r5,8(r16)
6102681c:	9009883a 	mov	r4,r18
61026820:	10800054 	ori	r2,r2,1
61026824:	18800115 	stw	r2,4(r3)
61026828:	31400215 	stw	r5,8(r6)
6102682c:	29800315 	stw	r6,12(r5)
61026830:	102b65c0 	call	6102b65c <__malloc_unlock>
61026834:	80c00204 	addi	r3,r16,8
61026838:	003faa06 	br	610266e4 <_malloc_r+0x50>
6102683c:	00800104 	movi	r2,4
61026840:	10c0052e 	bgeu	r2,r3,61026858 <_malloc_r+0x1c4>
61026844:	00800504 	movi	r2,20
61026848:	10c07836 	bltu	r2,r3,61026a2c <_malloc_r+0x398>
6102684c:	198016c4 	addi	r6,r3,91
61026850:	300490fa 	slli	r2,r6,3
61026854:	003fbc06 	br	61026748 <_malloc_r+0xb4>
61026858:	8804d1ba 	srli	r2,r17,6
6102685c:	11800e04 	addi	r6,r2,56
61026860:	300490fa 	slli	r2,r6,3
61026864:	003fb806 	br	61026748 <_malloc_r+0xb4>
61026868:	00807fc4 	movi	r2,511
6102686c:	1140bb36 	bltu	r2,r5,61026b5c <_malloc_r+0x4c8>
61026870:	2806d0fa 	srli	r3,r5,3
61026874:	573ffe04 	addi	fp,r10,-8
61026878:	00800044 	movi	r2,1
6102687c:	180890fa 	slli	r4,r3,3
61026880:	1807d0ba 	srai	r3,r3,2
61026884:	e1c00117 	ldw	r7,4(fp)
61026888:	5909883a 	add	r4,r11,r4
6102688c:	21400217 	ldw	r5,8(r4)
61026890:	10c4983a 	sll	r2,r2,r3
61026894:	81000315 	stw	r4,12(r16)
61026898:	81400215 	stw	r5,8(r16)
6102689c:	388eb03a 	or	r7,r7,r2
610268a0:	2c000315 	stw	r16,12(r5)
610268a4:	24000215 	stw	r16,8(r4)
610268a8:	e1c00115 	stw	r7,4(fp)
610268ac:	4807883a 	mov	r3,r9
610268b0:	4800cd16 	blt	r9,zero,61026be8 <_malloc_r+0x554>
610268b4:	1807d0ba 	srai	r3,r3,2
610268b8:	00800044 	movi	r2,1
610268bc:	10c8983a 	sll	r4,r2,r3
610268c0:	39004436 	bltu	r7,r4,610269d4 <_malloc_r+0x340>
610268c4:	21c4703a 	and	r2,r4,r7
610268c8:	10000a1e 	bne	r2,zero,610268f4 <_malloc_r+0x260>
610268cc:	2109883a 	add	r4,r4,r4
610268d0:	00bfff04 	movi	r2,-4
610268d4:	4884703a 	and	r2,r9,r2
610268d8:	3906703a 	and	r3,r7,r4
610268dc:	12400104 	addi	r9,r2,4
610268e0:	1800041e 	bne	r3,zero,610268f4 <_malloc_r+0x260>
610268e4:	2109883a 	add	r4,r4,r4
610268e8:	3904703a 	and	r2,r7,r4
610268ec:	4a400104 	addi	r9,r9,4
610268f0:	103ffc26 	beq	r2,zero,610268e4 <_malloc_r+0x250>
610268f4:	480490fa 	slli	r2,r9,3
610268f8:	4819883a 	mov	r12,r9
610268fc:	023fff04 	movi	r8,-4
61026900:	589b883a 	add	r13,r11,r2
61026904:	6807883a 	mov	r3,r13
61026908:	014003c4 	movi	r5,15
6102690c:	1c000317 	ldw	r16,12(r3)
61026910:	1c00041e 	bne	r3,r16,61026924 <_malloc_r+0x290>
61026914:	0000a706 	br	61026bb4 <_malloc_r+0x520>
61026918:	3000ab0e 	bge	r6,zero,61026bc8 <_malloc_r+0x534>
6102691c:	84000317 	ldw	r16,12(r16)
61026920:	1c00a426 	beq	r3,r16,61026bb4 <_malloc_r+0x520>
61026924:	80800117 	ldw	r2,4(r16)
61026928:	1204703a 	and	r2,r2,r8
6102692c:	144dc83a 	sub	r6,r2,r17
61026930:	29bff90e 	bge	r5,r6,61026918 <_malloc_r+0x284>
61026934:	81000317 	ldw	r4,12(r16)
61026938:	80c00217 	ldw	r3,8(r16)
6102693c:	89400054 	ori	r5,r17,1
61026940:	8445883a 	add	r2,r16,r17
61026944:	20c00215 	stw	r3,8(r4)
61026948:	19000315 	stw	r4,12(r3)
6102694c:	81400115 	stw	r5,4(r16)
61026950:	1187883a 	add	r3,r2,r6
61026954:	31000054 	ori	r4,r6,1
61026958:	50800315 	stw	r2,12(r10)
6102695c:	50800215 	stw	r2,8(r10)
61026960:	19800015 	stw	r6,0(r3)
61026964:	11000115 	stw	r4,4(r2)
61026968:	12800215 	stw	r10,8(r2)
6102696c:	12800315 	stw	r10,12(r2)
61026970:	9009883a 	mov	r4,r18
61026974:	102b65c0 	call	6102b65c <__malloc_unlock>
61026978:	80c00204 	addi	r3,r16,8
6102697c:	003f5906 	br	610266e4 <_malloc_r+0x50>
61026980:	8109883a 	add	r4,r16,r4
61026984:	20800117 	ldw	r2,4(r4)
61026988:	80c00217 	ldw	r3,8(r16)
6102698c:	81400317 	ldw	r5,12(r16)
61026990:	10800054 	ori	r2,r2,1
61026994:	20800115 	stw	r2,4(r4)
61026998:	28c00215 	stw	r3,8(r5)
6102699c:	19400315 	stw	r5,12(r3)
610269a0:	9009883a 	mov	r4,r18
610269a4:	102b65c0 	call	6102b65c <__malloc_unlock>
610269a8:	80c00204 	addi	r3,r16,8
610269ac:	003f4d06 	br	610266e4 <_malloc_r+0x50>
610269b0:	80800204 	addi	r2,r16,8
610269b4:	14000317 	ldw	r16,12(r2)
610269b8:	143f911e 	bne	r2,r16,61026800 <_malloc_r+0x16c>
610269bc:	1a400084 	addi	r9,r3,2
610269c0:	003f7306 	br	61026790 <_malloc_r+0xfc>
610269c4:	88c00054 	ori	r3,r17,1
610269c8:	8445883a 	add	r2,r16,r17
610269cc:	80c00115 	stw	r3,4(r16)
610269d0:	003fdf06 	br	61026950 <_malloc_r+0x2bc>
610269d4:	e4000217 	ldw	r16,8(fp)
610269d8:	00bfff04 	movi	r2,-4
610269dc:	80c00117 	ldw	r3,4(r16)
610269e0:	802d883a 	mov	r22,r16
610269e4:	18aa703a 	and	r21,r3,r2
610269e8:	ac401636 	bltu	r21,r17,61026a44 <_malloc_r+0x3b0>
610269ec:	ac49c83a 	sub	r4,r21,r17
610269f0:	008003c4 	movi	r2,15
610269f4:	1100130e 	bge	r2,r4,61026a44 <_malloc_r+0x3b0>
610269f8:	88800054 	ori	r2,r17,1
610269fc:	8447883a 	add	r3,r16,r17
61026a00:	80800115 	stw	r2,4(r16)
61026a04:	20800054 	ori	r2,r4,1
61026a08:	18800115 	stw	r2,4(r3)
61026a0c:	e0c00215 	stw	r3,8(fp)
61026a10:	9009883a 	mov	r4,r18
61026a14:	102b65c0 	call	6102b65c <__malloc_unlock>
61026a18:	80c00204 	addi	r3,r16,8
61026a1c:	003f3106 	br	610266e4 <_malloc_r+0x50>
61026a20:	39c00117 	ldw	r7,4(r7)
61026a24:	573ffe04 	addi	fp,r10,-8
61026a28:	003fa006 	br	610268ac <_malloc_r+0x218>
61026a2c:	00801504 	movi	r2,84
61026a30:	10c06736 	bltu	r2,r3,61026bd0 <_malloc_r+0x53c>
61026a34:	8804d33a 	srli	r2,r17,12
61026a38:	11801b84 	addi	r6,r2,110
61026a3c:	300490fa 	slli	r2,r6,3
61026a40:	003f4106 	br	61026748 <_malloc_r+0xb4>
61026a44:	d0a6aa17 	ldw	r2,-25944(gp)
61026a48:	d0e00517 	ldw	r3,-32748(gp)
61026a4c:	053fffc4 	movi	r20,-1
61026a50:	10800404 	addi	r2,r2,16
61026a54:	88a7883a 	add	r19,r17,r2
61026a58:	1d000326 	beq	r3,r20,61026a68 <_malloc_r+0x3d4>
61026a5c:	98c3ffc4 	addi	r3,r19,4095
61026a60:	00bc0004 	movi	r2,-4096
61026a64:	18a6703a 	and	r19,r3,r2
61026a68:	9009883a 	mov	r4,r18
61026a6c:	980b883a 	mov	r5,r19
61026a70:	10288740 	call	61028874 <_sbrk_r>
61026a74:	1009883a 	mov	r4,r2
61026a78:	15000426 	beq	r2,r20,61026a8c <_malloc_r+0x3f8>
61026a7c:	854b883a 	add	r5,r16,r21
61026a80:	1029883a 	mov	r20,r2
61026a84:	11405a2e 	bgeu	r2,r5,61026bf0 <_malloc_r+0x55c>
61026a88:	87000c26 	beq	r16,fp,61026abc <_malloc_r+0x428>
61026a8c:	e4000217 	ldw	r16,8(fp)
61026a90:	80c00117 	ldw	r3,4(r16)
61026a94:	00bfff04 	movi	r2,-4
61026a98:	1884703a 	and	r2,r3,r2
61026a9c:	14400336 	bltu	r2,r17,61026aac <_malloc_r+0x418>
61026aa0:	1449c83a 	sub	r4,r2,r17
61026aa4:	008003c4 	movi	r2,15
61026aa8:	113fd316 	blt	r2,r4,610269f8 <_malloc_r+0x364>
61026aac:	9009883a 	mov	r4,r18
61026ab0:	102b65c0 	call	6102b65c <__malloc_unlock>
61026ab4:	0007883a 	mov	r3,zero
61026ab8:	003f0a06 	br	610266e4 <_malloc_r+0x50>
61026abc:	05d840f4 	movhi	r23,24835
61026ac0:	bdc56e04 	addi	r23,r23,5560
61026ac4:	b8800017 	ldw	r2,0(r23)
61026ac8:	988d883a 	add	r6,r19,r2
61026acc:	b9800015 	stw	r6,0(r23)
61026ad0:	d0e00517 	ldw	r3,-32748(gp)
61026ad4:	00bfffc4 	movi	r2,-1
61026ad8:	18808e26 	beq	r3,r2,61026d14 <_malloc_r+0x680>
61026adc:	2145c83a 	sub	r2,r4,r5
61026ae0:	3085883a 	add	r2,r6,r2
61026ae4:	b8800015 	stw	r2,0(r23)
61026ae8:	20c001cc 	andi	r3,r4,7
61026aec:	18005f1e 	bne	r3,zero,61026c6c <_malloc_r+0x5d8>
61026af0:	000b883a 	mov	r5,zero
61026af4:	a4c5883a 	add	r2,r20,r19
61026af8:	1083ffcc 	andi	r2,r2,4095
61026afc:	00c40004 	movi	r3,4096
61026b00:	1887c83a 	sub	r3,r3,r2
61026b04:	28e7883a 	add	r19,r5,r3
61026b08:	9009883a 	mov	r4,r18
61026b0c:	980b883a 	mov	r5,r19
61026b10:	10288740 	call	61028874 <_sbrk_r>
61026b14:	1007883a 	mov	r3,r2
61026b18:	00bfffc4 	movi	r2,-1
61026b1c:	18807a26 	beq	r3,r2,61026d08 <_malloc_r+0x674>
61026b20:	1d05c83a 	sub	r2,r3,r20
61026b24:	9885883a 	add	r2,r19,r2
61026b28:	10c00054 	ori	r3,r2,1
61026b2c:	b8800017 	ldw	r2,0(r23)
61026b30:	a021883a 	mov	r16,r20
61026b34:	a0c00115 	stw	r3,4(r20)
61026b38:	9885883a 	add	r2,r19,r2
61026b3c:	b8800015 	stw	r2,0(r23)
61026b40:	e5000215 	stw	r20,8(fp)
61026b44:	b7003626 	beq	r22,fp,61026c20 <_malloc_r+0x58c>
61026b48:	018003c4 	movi	r6,15
61026b4c:	35404b36 	bltu	r6,r21,61026c7c <_malloc_r+0x5e8>
61026b50:	00800044 	movi	r2,1
61026b54:	a0800115 	stw	r2,4(r20)
61026b58:	003fcd06 	br	61026a90 <_malloc_r+0x3fc>
61026b5c:	2808d27a 	srli	r4,r5,9
61026b60:	2000371e 	bne	r4,zero,61026c40 <_malloc_r+0x5ac>
61026b64:	2808d0fa 	srli	r4,r5,3
61026b68:	200690fa 	slli	r3,r4,3
61026b6c:	1ad1883a 	add	r8,r3,r11
61026b70:	41800217 	ldw	r6,8(r8)
61026b74:	41805b26 	beq	r8,r6,61026ce4 <_malloc_r+0x650>
61026b78:	30800117 	ldw	r2,4(r6)
61026b7c:	00ffff04 	movi	r3,-4
61026b80:	10c4703a 	and	r2,r2,r3
61026b84:	2880022e 	bgeu	r5,r2,61026b90 <_malloc_r+0x4fc>
61026b88:	31800217 	ldw	r6,8(r6)
61026b8c:	41bffa1e 	bne	r8,r6,61026b78 <_malloc_r+0x4e4>
61026b90:	32000317 	ldw	r8,12(r6)
61026b94:	39c00117 	ldw	r7,4(r7)
61026b98:	82000315 	stw	r8,12(r16)
61026b9c:	81800215 	stw	r6,8(r16)
61026ba0:	071840f4 	movhi	fp,24835
61026ba4:	e7393604 	addi	fp,fp,-6952
61026ba8:	34000315 	stw	r16,12(r6)
61026bac:	44000215 	stw	r16,8(r8)
61026bb0:	003f3e06 	br	610268ac <_malloc_r+0x218>
61026bb4:	63000044 	addi	r12,r12,1
61026bb8:	608000cc 	andi	r2,r12,3
61026bbc:	10005d26 	beq	r2,zero,61026d34 <_malloc_r+0x6a0>
61026bc0:	18c00204 	addi	r3,r3,8
61026bc4:	003f5106 	br	6102690c <_malloc_r+0x278>
61026bc8:	8089883a 	add	r4,r16,r2
61026bcc:	003f6d06 	br	61026984 <_malloc_r+0x2f0>
61026bd0:	00805504 	movi	r2,340
61026bd4:	10c02036 	bltu	r2,r3,61026c58 <_malloc_r+0x5c4>
61026bd8:	8804d3fa 	srli	r2,r17,15
61026bdc:	11801dc4 	addi	r6,r2,119
61026be0:	300490fa 	slli	r2,r6,3
61026be4:	003ed806 	br	61026748 <_malloc_r+0xb4>
61026be8:	48c000c4 	addi	r3,r9,3
61026bec:	003f3106 	br	610268b4 <_malloc_r+0x220>
61026bf0:	05d840f4 	movhi	r23,24835
61026bf4:	bdc56e04 	addi	r23,r23,5560
61026bf8:	b8800017 	ldw	r2,0(r23)
61026bfc:	988d883a 	add	r6,r19,r2
61026c00:	b9800015 	stw	r6,0(r23)
61026c04:	293fb21e 	bne	r5,r4,61026ad0 <_malloc_r+0x43c>
61026c08:	2083ffcc 	andi	r2,r4,4095
61026c0c:	103fb01e 	bne	r2,zero,61026ad0 <_malloc_r+0x43c>
61026c10:	e4000217 	ldw	r16,8(fp)
61026c14:	9d45883a 	add	r2,r19,r21
61026c18:	10800054 	ori	r2,r2,1
61026c1c:	80800115 	stw	r2,4(r16)
61026c20:	b8c00017 	ldw	r3,0(r23)
61026c24:	d0a6ab17 	ldw	r2,-25940(gp)
61026c28:	10c0012e 	bgeu	r2,r3,61026c30 <_malloc_r+0x59c>
61026c2c:	d0e6ab15 	stw	r3,-25940(gp)
61026c30:	d0a6ac17 	ldw	r2,-25936(gp)
61026c34:	10ff962e 	bgeu	r2,r3,61026a90 <_malloc_r+0x3fc>
61026c38:	d0e6ac15 	stw	r3,-25936(gp)
61026c3c:	003f9406 	br	61026a90 <_malloc_r+0x3fc>
61026c40:	00800104 	movi	r2,4
61026c44:	11001e36 	bltu	r2,r4,61026cc0 <_malloc_r+0x62c>
61026c48:	2804d1ba 	srli	r2,r5,6
61026c4c:	11000e04 	addi	r4,r2,56
61026c50:	200690fa 	slli	r3,r4,3
61026c54:	003fc506 	br	61026b6c <_malloc_r+0x4d8>
61026c58:	00815504 	movi	r2,1364
61026c5c:	10c01d2e 	bgeu	r2,r3,61026cd4 <_malloc_r+0x640>
61026c60:	01801f84 	movi	r6,126
61026c64:	0080fc04 	movi	r2,1008
61026c68:	003eb706 	br	61026748 <_malloc_r+0xb4>
61026c6c:	00800204 	movi	r2,8
61026c70:	10cbc83a 	sub	r5,r2,r3
61026c74:	2169883a 	add	r20,r4,r5
61026c78:	003f9e06 	br	61026af4 <_malloc_r+0x460>
61026c7c:	00bffe04 	movi	r2,-8
61026c80:	a93ffd04 	addi	r4,r21,-12
61026c84:	2088703a 	and	r4,r4,r2
61026c88:	b10b883a 	add	r5,r22,r4
61026c8c:	00c00144 	movi	r3,5
61026c90:	28c00215 	stw	r3,8(r5)
61026c94:	28c00115 	stw	r3,4(r5)
61026c98:	b0800117 	ldw	r2,4(r22)
61026c9c:	1080004c 	andi	r2,r2,1
61026ca0:	2084b03a 	or	r2,r4,r2
61026ca4:	b0800115 	stw	r2,4(r22)
61026ca8:	313fdd2e 	bgeu	r6,r4,61026c20 <_malloc_r+0x58c>
61026cac:	b1400204 	addi	r5,r22,8
61026cb0:	9009883a 	mov	r4,r18
61026cb4:	1025b0c0 	call	61025b0c <_free_r>
61026cb8:	e4000217 	ldw	r16,8(fp)
61026cbc:	003fd806 	br	61026c20 <_malloc_r+0x58c>
61026cc0:	00800504 	movi	r2,20
61026cc4:	11001536 	bltu	r2,r4,61026d1c <_malloc_r+0x688>
61026cc8:	210016c4 	addi	r4,r4,91
61026ccc:	200690fa 	slli	r3,r4,3
61026cd0:	003fa606 	br	61026b6c <_malloc_r+0x4d8>
61026cd4:	8804d4ba 	srli	r2,r17,18
61026cd8:	11801f04 	addi	r6,r2,124
61026cdc:	300490fa 	slli	r2,r6,3
61026ce0:	003e9906 	br	61026748 <_malloc_r+0xb4>
61026ce4:	2009d0ba 	srai	r4,r4,2
61026ce8:	015840f4 	movhi	r5,24835
61026cec:	29793604 	addi	r5,r5,-6952
61026cf0:	00c00044 	movi	r3,1
61026cf4:	28800117 	ldw	r2,4(r5)
61026cf8:	1906983a 	sll	r3,r3,r4
61026cfc:	10c4b03a 	or	r2,r2,r3
61026d00:	28800115 	stw	r2,4(r5)
61026d04:	003fa306 	br	61026b94 <_malloc_r+0x500>
61026d08:	0027883a 	mov	r19,zero
61026d0c:	00c00044 	movi	r3,1
61026d10:	003f8606 	br	61026b2c <_malloc_r+0x498>
61026d14:	d1200515 	stw	r4,-32748(gp)
61026d18:	003f7306 	br	61026ae8 <_malloc_r+0x454>
61026d1c:	00801504 	movi	r2,84
61026d20:	11001936 	bltu	r2,r4,61026d88 <_malloc_r+0x6f4>
61026d24:	2804d33a 	srli	r2,r5,12
61026d28:	11001b84 	addi	r4,r2,110
61026d2c:	200690fa 	slli	r3,r4,3
61026d30:	003f8e06 	br	61026b6c <_malloc_r+0x4d8>
61026d34:	480b883a 	mov	r5,r9
61026d38:	6807883a 	mov	r3,r13
61026d3c:	288000cc 	andi	r2,r5,3
61026d40:	18fffe04 	addi	r3,r3,-8
61026d44:	297fffc4 	addi	r5,r5,-1
61026d48:	10001526 	beq	r2,zero,61026da0 <_malloc_r+0x70c>
61026d4c:	18800217 	ldw	r2,8(r3)
61026d50:	10fffa26 	beq	r2,r3,61026d3c <_malloc_r+0x6a8>
61026d54:	2109883a 	add	r4,r4,r4
61026d58:	393f1e36 	bltu	r7,r4,610269d4 <_malloc_r+0x340>
61026d5c:	203f1d26 	beq	r4,zero,610269d4 <_malloc_r+0x340>
61026d60:	21c4703a 	and	r2,r4,r7
61026d64:	10000226 	beq	r2,zero,61026d70 <_malloc_r+0x6dc>
61026d68:	6013883a 	mov	r9,r12
61026d6c:	003ee106 	br	610268f4 <_malloc_r+0x260>
61026d70:	2109883a 	add	r4,r4,r4
61026d74:	3904703a 	and	r2,r7,r4
61026d78:	63000104 	addi	r12,r12,4
61026d7c:	103ffc26 	beq	r2,zero,61026d70 <_malloc_r+0x6dc>
61026d80:	6013883a 	mov	r9,r12
61026d84:	003edb06 	br	610268f4 <_malloc_r+0x260>
61026d88:	00805504 	movi	r2,340
61026d8c:	11000836 	bltu	r2,r4,61026db0 <_malloc_r+0x71c>
61026d90:	2804d3fa 	srli	r2,r5,15
61026d94:	11001dc4 	addi	r4,r2,119
61026d98:	200690fa 	slli	r3,r4,3
61026d9c:	003f7306 	br	61026b6c <_malloc_r+0x4d8>
61026da0:	0104303a 	nor	r2,zero,r4
61026da4:	388e703a 	and	r7,r7,r2
61026da8:	e1c00115 	stw	r7,4(fp)
61026dac:	003fe906 	br	61026d54 <_malloc_r+0x6c0>
61026db0:	00815504 	movi	r2,1364
61026db4:	1100032e 	bgeu	r2,r4,61026dc4 <_malloc_r+0x730>
61026db8:	01001f84 	movi	r4,126
61026dbc:	00c0fc04 	movi	r3,1008
61026dc0:	003f6a06 	br	61026b6c <_malloc_r+0x4d8>
61026dc4:	2804d4ba 	srli	r2,r5,18
61026dc8:	11001f04 	addi	r4,r2,124
61026dcc:	200690fa 	slli	r3,r4,3
61026dd0:	003f6606 	br	61026b6c <_malloc_r+0x4d8>

61026dd4 <memchr>:
61026dd4:	008000c4 	movi	r2,3
61026dd8:	29403fcc 	andi	r5,r5,255
61026ddc:	2007883a 	mov	r3,r4
61026de0:	1180022e 	bgeu	r2,r6,61026dec <memchr+0x18>
61026de4:	2084703a 	and	r2,r4,r2
61026de8:	10000b26 	beq	r2,zero,61026e18 <memchr+0x44>
61026dec:	313fffc4 	addi	r4,r6,-1
61026df0:	3000051e 	bne	r6,zero,61026e08 <memchr+0x34>
61026df4:	00002c06 	br	61026ea8 <memchr+0xd4>
61026df8:	213fffc4 	addi	r4,r4,-1
61026dfc:	00bfffc4 	movi	r2,-1
61026e00:	18c00044 	addi	r3,r3,1
61026e04:	20802826 	beq	r4,r2,61026ea8 <memchr+0xd4>
61026e08:	18800003 	ldbu	r2,0(r3)
61026e0c:	28bffa1e 	bne	r5,r2,61026df8 <memchr+0x24>
61026e10:	1805883a 	mov	r2,r3
61026e14:	f800283a 	ret
61026e18:	0011883a 	mov	r8,zero
61026e1c:	0007883a 	mov	r3,zero
61026e20:	01c00104 	movi	r7,4
61026e24:	4004923a 	slli	r2,r8,8
61026e28:	18c00044 	addi	r3,r3,1
61026e2c:	1151883a 	add	r8,r2,r5
61026e30:	19fffc1e 	bne	r3,r7,61026e24 <memchr+0x50>
61026e34:	02bfbff4 	movhi	r10,65279
61026e38:	52bfbfc4 	addi	r10,r10,-257
61026e3c:	02602074 	movhi	r9,32897
61026e40:	4a602004 	addi	r9,r9,-32640
61026e44:	02c000c4 	movi	r11,3
61026e48:	20800017 	ldw	r2,0(r4)
61026e4c:	31bfff04 	addi	r6,r6,-4
61026e50:	200f883a 	mov	r7,r4
61026e54:	1204f03a 	xor	r2,r2,r8
61026e58:	1287883a 	add	r3,r2,r10
61026e5c:	1a46703a 	and	r3,r3,r9
61026e60:	0084303a 	nor	r2,zero,r2
61026e64:	10c4703a 	and	r2,r2,r3
61026e68:	10000b26 	beq	r2,zero,61026e98 <memchr+0xc4>
61026e6c:	20800003 	ldbu	r2,0(r4)
61026e70:	28800f26 	beq	r5,r2,61026eb0 <memchr+0xdc>
61026e74:	20800043 	ldbu	r2,1(r4)
61026e78:	21c00044 	addi	r7,r4,1
61026e7c:	28800c26 	beq	r5,r2,61026eb0 <memchr+0xdc>
61026e80:	20800083 	ldbu	r2,2(r4)
61026e84:	21c00084 	addi	r7,r4,2
61026e88:	28800926 	beq	r5,r2,61026eb0 <memchr+0xdc>
61026e8c:	208000c3 	ldbu	r2,3(r4)
61026e90:	21c000c4 	addi	r7,r4,3
61026e94:	28800626 	beq	r5,r2,61026eb0 <memchr+0xdc>
61026e98:	21000104 	addi	r4,r4,4
61026e9c:	59bfea36 	bltu	r11,r6,61026e48 <memchr+0x74>
61026ea0:	2007883a 	mov	r3,r4
61026ea4:	003fd106 	br	61026dec <memchr+0x18>
61026ea8:	0005883a 	mov	r2,zero
61026eac:	f800283a 	ret
61026eb0:	3805883a 	mov	r2,r7
61026eb4:	f800283a 	ret

61026eb8 <memmove>:
61026eb8:	2807883a 	mov	r3,r5
61026ebc:	2011883a 	mov	r8,r4
61026ec0:	29000c2e 	bgeu	r5,r4,61026ef4 <memmove+0x3c>
61026ec4:	298f883a 	add	r7,r5,r6
61026ec8:	21c00a2e 	bgeu	r4,r7,61026ef4 <memmove+0x3c>
61026ecc:	30000726 	beq	r6,zero,61026eec <memmove+0x34>
61026ed0:	2187883a 	add	r3,r4,r6
61026ed4:	198dc83a 	sub	r6,r3,r6
61026ed8:	39ffffc4 	addi	r7,r7,-1
61026edc:	38800003 	ldbu	r2,0(r7)
61026ee0:	18ffffc4 	addi	r3,r3,-1
61026ee4:	18800005 	stb	r2,0(r3)
61026ee8:	19bffb1e 	bne	r3,r6,61026ed8 <memmove+0x20>
61026eec:	2005883a 	mov	r2,r4
61026ef0:	f800283a 	ret
61026ef4:	01c003c4 	movi	r7,15
61026ef8:	39800a36 	bltu	r7,r6,61026f24 <memmove+0x6c>
61026efc:	303ffb26 	beq	r6,zero,61026eec <memmove+0x34>
61026f00:	400f883a 	mov	r7,r8
61026f04:	320d883a 	add	r6,r6,r8
61026f08:	28800003 	ldbu	r2,0(r5)
61026f0c:	29400044 	addi	r5,r5,1
61026f10:	38800005 	stb	r2,0(r7)
61026f14:	39c00044 	addi	r7,r7,1
61026f18:	39bffb1e 	bne	r7,r6,61026f08 <memmove+0x50>
61026f1c:	2005883a 	mov	r2,r4
61026f20:	f800283a 	ret
61026f24:	1904b03a 	or	r2,r3,r4
61026f28:	108000cc 	andi	r2,r2,3
61026f2c:	103ff31e 	bne	r2,zero,61026efc <memmove+0x44>
61026f30:	3811883a 	mov	r8,r7
61026f34:	180b883a 	mov	r5,r3
61026f38:	200f883a 	mov	r7,r4
61026f3c:	28c00017 	ldw	r3,0(r5)
61026f40:	31bffc04 	addi	r6,r6,-16
61026f44:	38c00015 	stw	r3,0(r7)
61026f48:	28800117 	ldw	r2,4(r5)
61026f4c:	38800115 	stw	r2,4(r7)
61026f50:	28c00217 	ldw	r3,8(r5)
61026f54:	38c00215 	stw	r3,8(r7)
61026f58:	28800317 	ldw	r2,12(r5)
61026f5c:	29400404 	addi	r5,r5,16
61026f60:	38800315 	stw	r2,12(r7)
61026f64:	39c00404 	addi	r7,r7,16
61026f68:	41bff436 	bltu	r8,r6,61026f3c <memmove+0x84>
61026f6c:	008000c4 	movi	r2,3
61026f70:	1180072e 	bgeu	r2,r6,61026f90 <memmove+0xd8>
61026f74:	1007883a 	mov	r3,r2
61026f78:	28800017 	ldw	r2,0(r5)
61026f7c:	31bfff04 	addi	r6,r6,-4
61026f80:	29400104 	addi	r5,r5,4
61026f84:	38800015 	stw	r2,0(r7)
61026f88:	39c00104 	addi	r7,r7,4
61026f8c:	19bffa36 	bltu	r3,r6,61026f78 <memmove+0xc0>
61026f90:	3811883a 	mov	r8,r7
61026f94:	003fd906 	br	61026efc <memmove+0x44>

61026f98 <memset>:
61026f98:	008000c4 	movi	r2,3
61026f9c:	29403fcc 	andi	r5,r5,255
61026fa0:	2007883a 	mov	r3,r4
61026fa4:	1180022e 	bgeu	r2,r6,61026fb0 <memset+0x18>
61026fa8:	2084703a 	and	r2,r4,r2
61026fac:	10000826 	beq	r2,zero,61026fd0 <memset+0x38>
61026fb0:	30000526 	beq	r6,zero,61026fc8 <memset+0x30>
61026fb4:	2805883a 	mov	r2,r5
61026fb8:	30cd883a 	add	r6,r6,r3
61026fbc:	18800005 	stb	r2,0(r3)
61026fc0:	18c00044 	addi	r3,r3,1
61026fc4:	19bffd1e 	bne	r3,r6,61026fbc <memset+0x24>
61026fc8:	2005883a 	mov	r2,r4
61026fcc:	f800283a 	ret
61026fd0:	2804923a 	slli	r2,r5,8
61026fd4:	020003c4 	movi	r8,15
61026fd8:	200f883a 	mov	r7,r4
61026fdc:	2884b03a 	or	r2,r5,r2
61026fe0:	1006943a 	slli	r3,r2,16
61026fe4:	10c6b03a 	or	r3,r2,r3
61026fe8:	41800a2e 	bgeu	r8,r6,61027014 <memset+0x7c>
61026fec:	4005883a 	mov	r2,r8
61026ff0:	31bffc04 	addi	r6,r6,-16
61026ff4:	38c00015 	stw	r3,0(r7)
61026ff8:	38c00115 	stw	r3,4(r7)
61026ffc:	38c00215 	stw	r3,8(r7)
61027000:	38c00315 	stw	r3,12(r7)
61027004:	39c00404 	addi	r7,r7,16
61027008:	11bff936 	bltu	r2,r6,61026ff0 <memset+0x58>
6102700c:	008000c4 	movi	r2,3
61027010:	1180052e 	bgeu	r2,r6,61027028 <memset+0x90>
61027014:	31bfff04 	addi	r6,r6,-4
61027018:	008000c4 	movi	r2,3
6102701c:	38c00015 	stw	r3,0(r7)
61027020:	39c00104 	addi	r7,r7,4
61027024:	11bffb36 	bltu	r2,r6,61027014 <memset+0x7c>
61027028:	3807883a 	mov	r3,r7
6102702c:	003fe006 	br	61026fb0 <memset+0x18>

61027030 <_Bfree>:
61027030:	28000826 	beq	r5,zero,61027054 <_Bfree+0x24>
61027034:	28800117 	ldw	r2,4(r5)
61027038:	21001317 	ldw	r4,76(r4)
6102703c:	1085883a 	add	r2,r2,r2
61027040:	1085883a 	add	r2,r2,r2
61027044:	1105883a 	add	r2,r2,r4
61027048:	10c00017 	ldw	r3,0(r2)
6102704c:	28c00015 	stw	r3,0(r5)
61027050:	11400015 	stw	r5,0(r2)
61027054:	f800283a 	ret

61027058 <__hi0bits>:
61027058:	20bfffec 	andhi	r2,r4,65535
6102705c:	10001426 	beq	r2,zero,610270b0 <__hi0bits+0x58>
61027060:	0007883a 	mov	r3,zero
61027064:	20bfc02c 	andhi	r2,r4,65280
61027068:	1000021e 	bne	r2,zero,61027074 <__hi0bits+0x1c>
6102706c:	2008923a 	slli	r4,r4,8
61027070:	18c00204 	addi	r3,r3,8
61027074:	20bc002c 	andhi	r2,r4,61440
61027078:	1000021e 	bne	r2,zero,61027084 <__hi0bits+0x2c>
6102707c:	2008913a 	slli	r4,r4,4
61027080:	18c00104 	addi	r3,r3,4
61027084:	20b0002c 	andhi	r2,r4,49152
61027088:	1000031e 	bne	r2,zero,61027098 <__hi0bits+0x40>
6102708c:	2105883a 	add	r2,r4,r4
61027090:	18c00084 	addi	r3,r3,2
61027094:	1089883a 	add	r4,r2,r2
61027098:	20000316 	blt	r4,zero,610270a8 <__hi0bits+0x50>
6102709c:	2090002c 	andhi	r2,r4,16384
610270a0:	10000626 	beq	r2,zero,610270bc <__hi0bits+0x64>
610270a4:	18c00044 	addi	r3,r3,1
610270a8:	1805883a 	mov	r2,r3
610270ac:	f800283a 	ret
610270b0:	2008943a 	slli	r4,r4,16
610270b4:	00c00404 	movi	r3,16
610270b8:	003fea06 	br	61027064 <__hi0bits+0xc>
610270bc:	00c00804 	movi	r3,32
610270c0:	1805883a 	mov	r2,r3
610270c4:	f800283a 	ret

610270c8 <__lo0bits>:
610270c8:	20c00017 	ldw	r3,0(r4)
610270cc:	188001cc 	andi	r2,r3,7
610270d0:	10000a26 	beq	r2,zero,610270fc <__lo0bits+0x34>
610270d4:	1880004c 	andi	r2,r3,1
610270d8:	1005003a 	cmpeq	r2,r2,zero
610270dc:	10002126 	beq	r2,zero,61027164 <__lo0bits+0x9c>
610270e0:	1880008c 	andi	r2,r3,2
610270e4:	1000251e 	bne	r2,zero,6102717c <__lo0bits+0xb4>
610270e8:	1804d0ba 	srli	r2,r3,2
610270ec:	01400084 	movi	r5,2
610270f0:	20800015 	stw	r2,0(r4)
610270f4:	2805883a 	mov	r2,r5
610270f8:	f800283a 	ret
610270fc:	18bfffcc 	andi	r2,r3,65535
61027100:	10001526 	beq	r2,zero,61027158 <__lo0bits+0x90>
61027104:	000b883a 	mov	r5,zero
61027108:	18803fcc 	andi	r2,r3,255
6102710c:	1000021e 	bne	r2,zero,61027118 <__lo0bits+0x50>
61027110:	1806d23a 	srli	r3,r3,8
61027114:	29400204 	addi	r5,r5,8
61027118:	188003cc 	andi	r2,r3,15
6102711c:	1000021e 	bne	r2,zero,61027128 <__lo0bits+0x60>
61027120:	1806d13a 	srli	r3,r3,4
61027124:	29400104 	addi	r5,r5,4
61027128:	188000cc 	andi	r2,r3,3
6102712c:	1000021e 	bne	r2,zero,61027138 <__lo0bits+0x70>
61027130:	1806d0ba 	srli	r3,r3,2
61027134:	29400084 	addi	r5,r5,2
61027138:	1880004c 	andi	r2,r3,1
6102713c:	1000031e 	bne	r2,zero,6102714c <__lo0bits+0x84>
61027140:	1806d07a 	srli	r3,r3,1
61027144:	18000a26 	beq	r3,zero,61027170 <__lo0bits+0xa8>
61027148:	29400044 	addi	r5,r5,1
6102714c:	2805883a 	mov	r2,r5
61027150:	20c00015 	stw	r3,0(r4)
61027154:	f800283a 	ret
61027158:	1806d43a 	srli	r3,r3,16
6102715c:	01400404 	movi	r5,16
61027160:	003fe906 	br	61027108 <__lo0bits+0x40>
61027164:	000b883a 	mov	r5,zero
61027168:	2805883a 	mov	r2,r5
6102716c:	f800283a 	ret
61027170:	01400804 	movi	r5,32
61027174:	2805883a 	mov	r2,r5
61027178:	f800283a 	ret
6102717c:	1804d07a 	srli	r2,r3,1
61027180:	01400044 	movi	r5,1
61027184:	20800015 	stw	r2,0(r4)
61027188:	003fda06 	br	610270f4 <__lo0bits+0x2c>

6102718c <__mcmp>:
6102718c:	20800417 	ldw	r2,16(r4)
61027190:	28c00417 	ldw	r3,16(r5)
61027194:	10cfc83a 	sub	r7,r2,r3
61027198:	38000c1e 	bne	r7,zero,610271cc <__mcmp+0x40>
6102719c:	18c5883a 	add	r2,r3,r3
610271a0:	1085883a 	add	r2,r2,r2
610271a4:	10c00504 	addi	r3,r2,20
610271a8:	21000504 	addi	r4,r4,20
610271ac:	28cb883a 	add	r5,r5,r3
610271b0:	2085883a 	add	r2,r4,r2
610271b4:	10bfff04 	addi	r2,r2,-4
610271b8:	297fff04 	addi	r5,r5,-4
610271bc:	11800017 	ldw	r6,0(r2)
610271c0:	28c00017 	ldw	r3,0(r5)
610271c4:	30c0031e 	bne	r6,r3,610271d4 <__mcmp+0x48>
610271c8:	20bffa36 	bltu	r4,r2,610271b4 <__mcmp+0x28>
610271cc:	3805883a 	mov	r2,r7
610271d0:	f800283a 	ret
610271d4:	30c00336 	bltu	r6,r3,610271e4 <__mcmp+0x58>
610271d8:	01c00044 	movi	r7,1
610271dc:	3805883a 	mov	r2,r7
610271e0:	f800283a 	ret
610271e4:	01ffffc4 	movi	r7,-1
610271e8:	003ff806 	br	610271cc <__mcmp+0x40>

610271ec <__ulp>:
610271ec:	295ffc2c 	andhi	r5,r5,32752
610271f0:	013f3034 	movhi	r4,64704
610271f4:	290b883a 	add	r5,r5,r4
610271f8:	0145c83a 	sub	r2,zero,r5
610271fc:	1007d53a 	srai	r3,r2,20
61027200:	000d883a 	mov	r6,zero
61027204:	0140040e 	bge	zero,r5,61027218 <__ulp+0x2c>
61027208:	280f883a 	mov	r7,r5
6102720c:	3807883a 	mov	r3,r7
61027210:	3005883a 	mov	r2,r6
61027214:	f800283a 	ret
61027218:	008004c4 	movi	r2,19
6102721c:	193ffb04 	addi	r4,r3,-20
61027220:	10c00c0e 	bge	r2,r3,61027254 <__ulp+0x68>
61027224:	008007c4 	movi	r2,31
61027228:	1107c83a 	sub	r3,r2,r4
6102722c:	00800784 	movi	r2,30
61027230:	01400044 	movi	r5,1
61027234:	11000216 	blt	r2,r4,61027240 <__ulp+0x54>
61027238:	00800044 	movi	r2,1
6102723c:	10ca983a 	sll	r5,r2,r3
61027240:	000f883a 	mov	r7,zero
61027244:	280d883a 	mov	r6,r5
61027248:	3807883a 	mov	r3,r7
6102724c:	3005883a 	mov	r2,r6
61027250:	f800283a 	ret
61027254:	00800234 	movhi	r2,8
61027258:	10cfd83a 	sra	r7,r2,r3
6102725c:	000d883a 	mov	r6,zero
61027260:	3005883a 	mov	r2,r6
61027264:	3807883a 	mov	r3,r7
61027268:	f800283a 	ret

6102726c <__b2d>:
6102726c:	20800417 	ldw	r2,16(r4)
61027270:	defff904 	addi	sp,sp,-28
61027274:	dd000415 	stw	r20,16(sp)
61027278:	1085883a 	add	r2,r2,r2
6102727c:	25000504 	addi	r20,r4,20
61027280:	1085883a 	add	r2,r2,r2
61027284:	dc000015 	stw	r16,0(sp)
61027288:	a0a1883a 	add	r16,r20,r2
6102728c:	dd400515 	stw	r21,20(sp)
61027290:	857fff17 	ldw	r21,-4(r16)
61027294:	dc400115 	stw	r17,4(sp)
61027298:	dfc00615 	stw	ra,24(sp)
6102729c:	a809883a 	mov	r4,r21
610272a0:	2823883a 	mov	r17,r5
610272a4:	dcc00315 	stw	r19,12(sp)
610272a8:	dc800215 	stw	r18,8(sp)
610272ac:	10270580 	call	61027058 <__hi0bits>
610272b0:	100b883a 	mov	r5,r2
610272b4:	00800804 	movi	r2,32
610272b8:	1145c83a 	sub	r2,r2,r5
610272bc:	88800015 	stw	r2,0(r17)
610272c0:	00800284 	movi	r2,10
610272c4:	80ffff04 	addi	r3,r16,-4
610272c8:	11401416 	blt	r2,r5,6102731c <__b2d+0xb0>
610272cc:	008002c4 	movi	r2,11
610272d0:	1149c83a 	sub	r4,r2,r5
610272d4:	a0c02736 	bltu	r20,r3,61027374 <__b2d+0x108>
610272d8:	000d883a 	mov	r6,zero
610272dc:	28800544 	addi	r2,r5,21
610272e0:	a906d83a 	srl	r3,r21,r4
610272e4:	a884983a 	sll	r2,r21,r2
610272e8:	1ccffc34 	orhi	r19,r3,16368
610272ec:	11a4b03a 	or	r18,r2,r6
610272f0:	9005883a 	mov	r2,r18
610272f4:	9807883a 	mov	r3,r19
610272f8:	dfc00617 	ldw	ra,24(sp)
610272fc:	dd400517 	ldw	r21,20(sp)
61027300:	dd000417 	ldw	r20,16(sp)
61027304:	dcc00317 	ldw	r19,12(sp)
61027308:	dc800217 	ldw	r18,8(sp)
6102730c:	dc400117 	ldw	r17,4(sp)
61027310:	dc000017 	ldw	r16,0(sp)
61027314:	dec00704 	addi	sp,sp,28
61027318:	f800283a 	ret
6102731c:	a0c00e36 	bltu	r20,r3,61027358 <__b2d+0xec>
61027320:	293ffd44 	addi	r4,r5,-11
61027324:	000d883a 	mov	r6,zero
61027328:	20000f26 	beq	r4,zero,61027368 <__b2d+0xfc>
6102732c:	00800804 	movi	r2,32
61027330:	110bc83a 	sub	r5,r2,r4
61027334:	a0c01236 	bltu	r20,r3,61027380 <__b2d+0x114>
61027338:	000f883a 	mov	r7,zero
6102733c:	a904983a 	sll	r2,r21,r4
61027340:	3146d83a 	srl	r3,r6,r5
61027344:	3108983a 	sll	r4,r6,r4
61027348:	108ffc34 	orhi	r2,r2,16368
6102734c:	18a6b03a 	or	r19,r3,r2
61027350:	3924b03a 	or	r18,r7,r4
61027354:	003fe606 	br	610272f0 <__b2d+0x84>
61027358:	293ffd44 	addi	r4,r5,-11
6102735c:	81bffe17 	ldw	r6,-8(r16)
61027360:	80fffe04 	addi	r3,r16,-8
61027364:	203ff11e 	bne	r4,zero,6102732c <__b2d+0xc0>
61027368:	accffc34 	orhi	r19,r21,16368
6102736c:	3025883a 	mov	r18,r6
61027370:	003fdf06 	br	610272f0 <__b2d+0x84>
61027374:	18bfff17 	ldw	r2,-4(r3)
61027378:	110cd83a 	srl	r6,r2,r4
6102737c:	003fd706 	br	610272dc <__b2d+0x70>
61027380:	18bfff17 	ldw	r2,-4(r3)
61027384:	114ed83a 	srl	r7,r2,r5
61027388:	003fec06 	br	6102733c <__b2d+0xd0>

6102738c <__ratio>:
6102738c:	defff904 	addi	sp,sp,-28
61027390:	dc400215 	stw	r17,8(sp)
61027394:	2823883a 	mov	r17,r5
61027398:	d80b883a 	mov	r5,sp
6102739c:	dfc00615 	stw	ra,24(sp)
610273a0:	dd000515 	stw	r20,20(sp)
610273a4:	dcc00415 	stw	r19,16(sp)
610273a8:	dc800315 	stw	r18,12(sp)
610273ac:	2025883a 	mov	r18,r4
610273b0:	102726c0 	call	6102726c <__b2d>
610273b4:	8809883a 	mov	r4,r17
610273b8:	d9400104 	addi	r5,sp,4
610273bc:	1027883a 	mov	r19,r2
610273c0:	1829883a 	mov	r20,r3
610273c4:	102726c0 	call	6102726c <__b2d>
610273c8:	89000417 	ldw	r4,16(r17)
610273cc:	91c00417 	ldw	r7,16(r18)
610273d0:	d9800117 	ldw	r6,4(sp)
610273d4:	180b883a 	mov	r5,r3
610273d8:	390fc83a 	sub	r7,r7,r4
610273dc:	1009883a 	mov	r4,r2
610273e0:	d8800017 	ldw	r2,0(sp)
610273e4:	380e917a 	slli	r7,r7,5
610273e8:	2011883a 	mov	r8,r4
610273ec:	1185c83a 	sub	r2,r2,r6
610273f0:	11c5883a 	add	r2,r2,r7
610273f4:	1006953a 	slli	r3,r2,20
610273f8:	2813883a 	mov	r9,r5
610273fc:	00800d0e 	bge	zero,r2,61027434 <__ratio+0xa8>
61027400:	1d29883a 	add	r20,r3,r20
61027404:	a00b883a 	mov	r5,r20
61027408:	480f883a 	mov	r7,r9
6102740c:	9809883a 	mov	r4,r19
61027410:	400d883a 	mov	r6,r8
61027414:	102a5100 	call	6102a510 <__divdf3>
61027418:	dfc00617 	ldw	ra,24(sp)
6102741c:	dd000517 	ldw	r20,20(sp)
61027420:	dcc00417 	ldw	r19,16(sp)
61027424:	dc800317 	ldw	r18,12(sp)
61027428:	dc400217 	ldw	r17,8(sp)
6102742c:	dec00704 	addi	sp,sp,28
61027430:	f800283a 	ret
61027434:	28d3c83a 	sub	r9,r5,r3
61027438:	003ff206 	br	61027404 <__ratio+0x78>

6102743c <_mprec_log10>:
6102743c:	defffe04 	addi	sp,sp,-8
61027440:	008005c4 	movi	r2,23
61027444:	dc000015 	stw	r16,0(sp)
61027448:	dfc00115 	stw	ra,4(sp)
6102744c:	2021883a 	mov	r16,r4
61027450:	11000c16 	blt	r2,r4,61027484 <_mprec_log10+0x48>
61027454:	200490fa 	slli	r2,r4,3
61027458:	00d840f4 	movhi	r3,24835
6102745c:	18f7da04 	addi	r3,r3,-8344
61027460:	10c5883a 	add	r2,r2,r3
61027464:	12400117 	ldw	r9,4(r2)
61027468:	12000017 	ldw	r8,0(r2)
6102746c:	4807883a 	mov	r3,r9
61027470:	4005883a 	mov	r2,r8
61027474:	dfc00117 	ldw	ra,4(sp)
61027478:	dc000017 	ldw	r16,0(sp)
6102747c:	dec00204 	addi	sp,sp,8
61027480:	f800283a 	ret
61027484:	0011883a 	mov	r8,zero
61027488:	024ffc34 	movhi	r9,16368
6102748c:	0005883a 	mov	r2,zero
61027490:	00d00934 	movhi	r3,16420
61027494:	480b883a 	mov	r5,r9
61027498:	4009883a 	mov	r4,r8
6102749c:	180f883a 	mov	r7,r3
610274a0:	100d883a 	mov	r6,r2
610274a4:	102a15c0 	call	6102a15c <__muldf3>
610274a8:	843fffc4 	addi	r16,r16,-1
610274ac:	1011883a 	mov	r8,r2
610274b0:	1813883a 	mov	r9,r3
610274b4:	803ff51e 	bne	r16,zero,6102748c <_mprec_log10+0x50>
610274b8:	4005883a 	mov	r2,r8
610274bc:	4807883a 	mov	r3,r9
610274c0:	dfc00117 	ldw	ra,4(sp)
610274c4:	dc000017 	ldw	r16,0(sp)
610274c8:	dec00204 	addi	sp,sp,8
610274cc:	f800283a 	ret

610274d0 <__copybits>:
610274d0:	297fffc4 	addi	r5,r5,-1
610274d4:	30800417 	ldw	r2,16(r6)
610274d8:	280bd17a 	srai	r5,r5,5
610274dc:	31800504 	addi	r6,r6,20
610274e0:	1085883a 	add	r2,r2,r2
610274e4:	294b883a 	add	r5,r5,r5
610274e8:	294b883a 	add	r5,r5,r5
610274ec:	1085883a 	add	r2,r2,r2
610274f0:	290b883a 	add	r5,r5,r4
610274f4:	3087883a 	add	r3,r6,r2
610274f8:	29400104 	addi	r5,r5,4
610274fc:	30c0052e 	bgeu	r6,r3,61027514 <__copybits+0x44>
61027500:	30800017 	ldw	r2,0(r6)
61027504:	31800104 	addi	r6,r6,4
61027508:	20800015 	stw	r2,0(r4)
6102750c:	21000104 	addi	r4,r4,4
61027510:	30fffb36 	bltu	r6,r3,61027500 <__copybits+0x30>
61027514:	2140032e 	bgeu	r4,r5,61027524 <__copybits+0x54>
61027518:	20000015 	stw	zero,0(r4)
6102751c:	21000104 	addi	r4,r4,4
61027520:	217ffd36 	bltu	r4,r5,61027518 <__copybits+0x48>
61027524:	f800283a 	ret

61027528 <__any_on>:
61027528:	20800417 	ldw	r2,16(r4)
6102752c:	2807d17a 	srai	r3,r5,5
61027530:	21000504 	addi	r4,r4,20
61027534:	10c00d0e 	bge	r2,r3,6102756c <__any_on+0x44>
61027538:	1085883a 	add	r2,r2,r2
6102753c:	1085883a 	add	r2,r2,r2
61027540:	208d883a 	add	r6,r4,r2
61027544:	2180182e 	bgeu	r4,r6,610275a8 <__any_on+0x80>
61027548:	30bfff17 	ldw	r2,-4(r6)
6102754c:	30ffff04 	addi	r3,r6,-4
61027550:	1000041e 	bne	r2,zero,61027564 <__any_on+0x3c>
61027554:	20c0142e 	bgeu	r4,r3,610275a8 <__any_on+0x80>
61027558:	18ffff04 	addi	r3,r3,-4
6102755c:	18800017 	ldw	r2,0(r3)
61027560:	103ffc26 	beq	r2,zero,61027554 <__any_on+0x2c>
61027564:	00800044 	movi	r2,1
61027568:	f800283a 	ret
6102756c:	18800a0e 	bge	r3,r2,61027598 <__any_on+0x70>
61027570:	294007cc 	andi	r5,r5,31
61027574:	28000826 	beq	r5,zero,61027598 <__any_on+0x70>
61027578:	18c5883a 	add	r2,r3,r3
6102757c:	1085883a 	add	r2,r2,r2
61027580:	208d883a 	add	r6,r4,r2
61027584:	30c00017 	ldw	r3,0(r6)
61027588:	1944d83a 	srl	r2,r3,r5
6102758c:	1144983a 	sll	r2,r2,r5
61027590:	18bff41e 	bne	r3,r2,61027564 <__any_on+0x3c>
61027594:	003feb06 	br	61027544 <__any_on+0x1c>
61027598:	18c5883a 	add	r2,r3,r3
6102759c:	1085883a 	add	r2,r2,r2
610275a0:	208d883a 	add	r6,r4,r2
610275a4:	003fe706 	br	61027544 <__any_on+0x1c>
610275a8:	0005883a 	mov	r2,zero
610275ac:	f800283a 	ret

610275b0 <_Balloc>:
610275b0:	20c01317 	ldw	r3,76(r4)
610275b4:	defffb04 	addi	sp,sp,-20
610275b8:	dcc00315 	stw	r19,12(sp)
610275bc:	dc800215 	stw	r18,8(sp)
610275c0:	dfc00415 	stw	ra,16(sp)
610275c4:	2825883a 	mov	r18,r5
610275c8:	dc400115 	stw	r17,4(sp)
610275cc:	dc000015 	stw	r16,0(sp)
610275d0:	2027883a 	mov	r19,r4
610275d4:	01800404 	movi	r6,16
610275d8:	01400104 	movi	r5,4
610275dc:	18001726 	beq	r3,zero,6102763c <_Balloc+0x8c>
610275e0:	01400044 	movi	r5,1
610275e4:	9485883a 	add	r2,r18,r18
610275e8:	2ca2983a 	sll	r17,r5,r18
610275ec:	1085883a 	add	r2,r2,r2
610275f0:	10c7883a 	add	r3,r2,r3
610275f4:	1c000017 	ldw	r16,0(r3)
610275f8:	8c4d883a 	add	r6,r17,r17
610275fc:	318d883a 	add	r6,r6,r6
61027600:	9809883a 	mov	r4,r19
61027604:	31800504 	addi	r6,r6,20
61027608:	80001226 	beq	r16,zero,61027654 <_Balloc+0xa4>
6102760c:	80800017 	ldw	r2,0(r16)
61027610:	18800015 	stw	r2,0(r3)
61027614:	80000415 	stw	zero,16(r16)
61027618:	80000315 	stw	zero,12(r16)
6102761c:	8005883a 	mov	r2,r16
61027620:	dfc00417 	ldw	ra,16(sp)
61027624:	dcc00317 	ldw	r19,12(sp)
61027628:	dc800217 	ldw	r18,8(sp)
6102762c:	dc400117 	ldw	r17,4(sp)
61027630:	dc000017 	ldw	r16,0(sp)
61027634:	dec00504 	addi	sp,sp,20
61027638:	f800283a 	ret
6102763c:	1028cb00 	call	61028cb0 <_calloc_r>
61027640:	1007883a 	mov	r3,r2
61027644:	0021883a 	mov	r16,zero
61027648:	98801315 	stw	r2,76(r19)
6102764c:	103fe41e 	bne	r2,zero,610275e0 <_Balloc+0x30>
61027650:	003ff206 	br	6102761c <_Balloc+0x6c>
61027654:	1028cb00 	call	61028cb0 <_calloc_r>
61027658:	103ff026 	beq	r2,zero,6102761c <_Balloc+0x6c>
6102765c:	1021883a 	mov	r16,r2
61027660:	14800115 	stw	r18,4(r2)
61027664:	14400215 	stw	r17,8(r2)
61027668:	003fea06 	br	61027614 <_Balloc+0x64>

6102766c <__d2b>:
6102766c:	defff504 	addi	sp,sp,-44
61027670:	dcc00515 	stw	r19,20(sp)
61027674:	04c00044 	movi	r19,1
61027678:	dc000215 	stw	r16,8(sp)
6102767c:	2821883a 	mov	r16,r5
61027680:	980b883a 	mov	r5,r19
61027684:	ddc00915 	stw	r23,36(sp)
61027688:	dd800815 	stw	r22,32(sp)
6102768c:	dd400715 	stw	r21,28(sp)
61027690:	dd000615 	stw	r20,24(sp)
61027694:	dc800415 	stw	r18,16(sp)
61027698:	dc400315 	stw	r17,12(sp)
6102769c:	dfc00a15 	stw	ra,40(sp)
610276a0:	3023883a 	mov	r17,r6
610276a4:	382d883a 	mov	r22,r7
610276a8:	ddc00b17 	ldw	r23,44(sp)
610276ac:	10275b00 	call	610275b0 <_Balloc>
610276b0:	1025883a 	mov	r18,r2
610276b4:	00a00034 	movhi	r2,32768
610276b8:	10bfffc4 	addi	r2,r2,-1
610276bc:	8888703a 	and	r4,r17,r2
610276c0:	202ad53a 	srli	r21,r4,20
610276c4:	00800434 	movhi	r2,16
610276c8:	10bfffc4 	addi	r2,r2,-1
610276cc:	8886703a 	and	r3,r17,r2
610276d0:	a829003a 	cmpeq	r20,r21,zero
610276d4:	800b883a 	mov	r5,r16
610276d8:	d8c00115 	stw	r3,4(sp)
610276dc:	94000504 	addi	r16,r18,20
610276e0:	a000021e 	bne	r20,zero,610276ec <__d2b+0x80>
610276e4:	18c00434 	orhi	r3,r3,16
610276e8:	d8c00115 	stw	r3,4(sp)
610276ec:	28002726 	beq	r5,zero,6102778c <__d2b+0x120>
610276f0:	d809883a 	mov	r4,sp
610276f4:	d9400015 	stw	r5,0(sp)
610276f8:	10270c80 	call	610270c8 <__lo0bits>
610276fc:	100d883a 	mov	r6,r2
61027700:	10003526 	beq	r2,zero,610277d8 <__d2b+0x16c>
61027704:	d8c00117 	ldw	r3,4(sp)
61027708:	00800804 	movi	r2,32
6102770c:	1185c83a 	sub	r2,r2,r6
61027710:	d9000017 	ldw	r4,0(sp)
61027714:	1886983a 	sll	r3,r3,r2
61027718:	1906b03a 	or	r3,r3,r4
6102771c:	90c00515 	stw	r3,20(r18)
61027720:	d8c00117 	ldw	r3,4(sp)
61027724:	1986d83a 	srl	r3,r3,r6
61027728:	d8c00115 	stw	r3,4(sp)
6102772c:	180b003a 	cmpeq	r5,r3,zero
61027730:	00800084 	movi	r2,2
61027734:	114bc83a 	sub	r5,r2,r5
61027738:	80c00115 	stw	r3,4(r16)
6102773c:	91400415 	stw	r5,16(r18)
61027740:	a0001a1e 	bne	r20,zero,610277ac <__d2b+0x140>
61027744:	3545883a 	add	r2,r6,r21
61027748:	10bef344 	addi	r2,r2,-1075
6102774c:	00c00d44 	movi	r3,53
61027750:	b0800015 	stw	r2,0(r22)
61027754:	1987c83a 	sub	r3,r3,r6
61027758:	b8c00015 	stw	r3,0(r23)
6102775c:	9005883a 	mov	r2,r18
61027760:	dfc00a17 	ldw	ra,40(sp)
61027764:	ddc00917 	ldw	r23,36(sp)
61027768:	dd800817 	ldw	r22,32(sp)
6102776c:	dd400717 	ldw	r21,28(sp)
61027770:	dd000617 	ldw	r20,24(sp)
61027774:	dcc00517 	ldw	r19,20(sp)
61027778:	dc800417 	ldw	r18,16(sp)
6102777c:	dc400317 	ldw	r17,12(sp)
61027780:	dc000217 	ldw	r16,8(sp)
61027784:	dec00b04 	addi	sp,sp,44
61027788:	f800283a 	ret
6102778c:	d9000104 	addi	r4,sp,4
61027790:	10270c80 	call	610270c8 <__lo0bits>
61027794:	11800804 	addi	r6,r2,32
61027798:	d8800117 	ldw	r2,4(sp)
6102779c:	94c00415 	stw	r19,16(r18)
610277a0:	980b883a 	mov	r5,r19
610277a4:	90800515 	stw	r2,20(r18)
610277a8:	a03fe626 	beq	r20,zero,61027744 <__d2b+0xd8>
610277ac:	2945883a 	add	r2,r5,r5
610277b0:	1085883a 	add	r2,r2,r2
610277b4:	1405883a 	add	r2,r2,r16
610277b8:	113fff17 	ldw	r4,-4(r2)
610277bc:	30fef384 	addi	r3,r6,-1074
610277c0:	2820917a 	slli	r16,r5,5
610277c4:	b0c00015 	stw	r3,0(r22)
610277c8:	10270580 	call	61027058 <__hi0bits>
610277cc:	80a1c83a 	sub	r16,r16,r2
610277d0:	bc000015 	stw	r16,0(r23)
610277d4:	003fe106 	br	6102775c <__d2b+0xf0>
610277d8:	d8800017 	ldw	r2,0(sp)
610277dc:	90800515 	stw	r2,20(r18)
610277e0:	d8c00117 	ldw	r3,4(sp)
610277e4:	003fd106 	br	6102772c <__d2b+0xc0>

610277e8 <__mdiff>:
610277e8:	defffb04 	addi	sp,sp,-20
610277ec:	dc000015 	stw	r16,0(sp)
610277f0:	2821883a 	mov	r16,r5
610277f4:	dc800215 	stw	r18,8(sp)
610277f8:	300b883a 	mov	r5,r6
610277fc:	2025883a 	mov	r18,r4
61027800:	8009883a 	mov	r4,r16
61027804:	dc400115 	stw	r17,4(sp)
61027808:	dfc00415 	stw	ra,16(sp)
6102780c:	dcc00315 	stw	r19,12(sp)
61027810:	3023883a 	mov	r17,r6
61027814:	102718c0 	call	6102718c <__mcmp>
61027818:	10004226 	beq	r2,zero,61027924 <__mdiff+0x13c>
6102781c:	10005016 	blt	r2,zero,61027960 <__mdiff+0x178>
61027820:	0027883a 	mov	r19,zero
61027824:	81400117 	ldw	r5,4(r16)
61027828:	9009883a 	mov	r4,r18
6102782c:	10275b00 	call	610275b0 <_Balloc>
61027830:	1019883a 	mov	r12,r2
61027834:	82800417 	ldw	r10,16(r16)
61027838:	88800417 	ldw	r2,16(r17)
6102783c:	81800504 	addi	r6,r16,20
61027840:	5287883a 	add	r3,r10,r10
61027844:	1085883a 	add	r2,r2,r2
61027848:	18c7883a 	add	r3,r3,r3
6102784c:	1085883a 	add	r2,r2,r2
61027850:	8a000504 	addi	r8,r17,20
61027854:	64c00315 	stw	r19,12(r12)
61027858:	30db883a 	add	r13,r6,r3
6102785c:	4097883a 	add	r11,r8,r2
61027860:	61c00504 	addi	r7,r12,20
61027864:	0013883a 	mov	r9,zero
61027868:	31000017 	ldw	r4,0(r6)
6102786c:	41400017 	ldw	r5,0(r8)
61027870:	42000104 	addi	r8,r8,4
61027874:	20bfffcc 	andi	r2,r4,65535
61027878:	28ffffcc 	andi	r3,r5,65535
6102787c:	10c5c83a 	sub	r2,r2,r3
61027880:	1245883a 	add	r2,r2,r9
61027884:	2008d43a 	srli	r4,r4,16
61027888:	280ad43a 	srli	r5,r5,16
6102788c:	1007d43a 	srai	r3,r2,16
61027890:	3880000d 	sth	r2,0(r7)
61027894:	2149c83a 	sub	r4,r4,r5
61027898:	20c9883a 	add	r4,r4,r3
6102789c:	3900008d 	sth	r4,2(r7)
610278a0:	31800104 	addi	r6,r6,4
610278a4:	39c00104 	addi	r7,r7,4
610278a8:	2013d43a 	srai	r9,r4,16
610278ac:	42ffee36 	bltu	r8,r11,61027868 <__mdiff+0x80>
610278b0:	33400c2e 	bgeu	r6,r13,610278e4 <__mdiff+0xfc>
610278b4:	30800017 	ldw	r2,0(r6)
610278b8:	31800104 	addi	r6,r6,4
610278bc:	10ffffcc 	andi	r3,r2,65535
610278c0:	1a47883a 	add	r3,r3,r9
610278c4:	1004d43a 	srli	r2,r2,16
610278c8:	1809d43a 	srai	r4,r3,16
610278cc:	38c0000d 	sth	r3,0(r7)
610278d0:	1105883a 	add	r2,r2,r4
610278d4:	3880008d 	sth	r2,2(r7)
610278d8:	1013d43a 	srai	r9,r2,16
610278dc:	39c00104 	addi	r7,r7,4
610278e0:	337ff436 	bltu	r6,r13,610278b4 <__mdiff+0xcc>
610278e4:	38bfff17 	ldw	r2,-4(r7)
610278e8:	38ffff04 	addi	r3,r7,-4
610278ec:	1000041e 	bne	r2,zero,61027900 <__mdiff+0x118>
610278f0:	18ffff04 	addi	r3,r3,-4
610278f4:	18800017 	ldw	r2,0(r3)
610278f8:	52bfffc4 	addi	r10,r10,-1
610278fc:	103ffc26 	beq	r2,zero,610278f0 <__mdiff+0x108>
61027900:	6005883a 	mov	r2,r12
61027904:	62800415 	stw	r10,16(r12)
61027908:	dfc00417 	ldw	ra,16(sp)
6102790c:	dcc00317 	ldw	r19,12(sp)
61027910:	dc800217 	ldw	r18,8(sp)
61027914:	dc400117 	ldw	r17,4(sp)
61027918:	dc000017 	ldw	r16,0(sp)
6102791c:	dec00504 	addi	sp,sp,20
61027920:	f800283a 	ret
61027924:	9009883a 	mov	r4,r18
61027928:	000b883a 	mov	r5,zero
6102792c:	10275b00 	call	610275b0 <_Balloc>
61027930:	1019883a 	mov	r12,r2
61027934:	00800044 	movi	r2,1
61027938:	60800415 	stw	r2,16(r12)
6102793c:	6005883a 	mov	r2,r12
61027940:	60000515 	stw	zero,20(r12)
61027944:	dfc00417 	ldw	ra,16(sp)
61027948:	dcc00317 	ldw	r19,12(sp)
6102794c:	dc800217 	ldw	r18,8(sp)
61027950:	dc400117 	ldw	r17,4(sp)
61027954:	dc000017 	ldw	r16,0(sp)
61027958:	dec00504 	addi	sp,sp,20
6102795c:	f800283a 	ret
61027960:	880d883a 	mov	r6,r17
61027964:	04c00044 	movi	r19,1
61027968:	8023883a 	mov	r17,r16
6102796c:	3021883a 	mov	r16,r6
61027970:	003fac06 	br	61027824 <__mdiff+0x3c>

61027974 <__lshift>:
61027974:	defff904 	addi	sp,sp,-28
61027978:	28800417 	ldw	r2,16(r5)
6102797c:	dc000015 	stw	r16,0(sp)
61027980:	3021d17a 	srai	r16,r6,5
61027984:	28c00217 	ldw	r3,8(r5)
61027988:	10800044 	addi	r2,r2,1
6102798c:	dc400115 	stw	r17,4(sp)
61027990:	80a3883a 	add	r17,r16,r2
61027994:	dd400515 	stw	r21,20(sp)
61027998:	dd000415 	stw	r20,16(sp)
6102799c:	dc800215 	stw	r18,8(sp)
610279a0:	dfc00615 	stw	ra,24(sp)
610279a4:	2825883a 	mov	r18,r5
610279a8:	dcc00315 	stw	r19,12(sp)
610279ac:	3029883a 	mov	r20,r6
610279b0:	202b883a 	mov	r21,r4
610279b4:	29400117 	ldw	r5,4(r5)
610279b8:	1c40030e 	bge	r3,r17,610279c8 <__lshift+0x54>
610279bc:	18c7883a 	add	r3,r3,r3
610279c0:	29400044 	addi	r5,r5,1
610279c4:	1c7ffd16 	blt	r3,r17,610279bc <__lshift+0x48>
610279c8:	a809883a 	mov	r4,r21
610279cc:	10275b00 	call	610275b0 <_Balloc>
610279d0:	1027883a 	mov	r19,r2
610279d4:	11400504 	addi	r5,r2,20
610279d8:	0400090e 	bge	zero,r16,61027a00 <__lshift+0x8c>
610279dc:	2805883a 	mov	r2,r5
610279e0:	0007883a 	mov	r3,zero
610279e4:	18c00044 	addi	r3,r3,1
610279e8:	10000015 	stw	zero,0(r2)
610279ec:	10800104 	addi	r2,r2,4
610279f0:	80fffc1e 	bne	r16,r3,610279e4 <__lshift+0x70>
610279f4:	8405883a 	add	r2,r16,r16
610279f8:	1085883a 	add	r2,r2,r2
610279fc:	288b883a 	add	r5,r5,r2
61027a00:	90800417 	ldw	r2,16(r18)
61027a04:	91000504 	addi	r4,r18,20
61027a08:	a18007cc 	andi	r6,r20,31
61027a0c:	1085883a 	add	r2,r2,r2
61027a10:	1085883a 	add	r2,r2,r2
61027a14:	208f883a 	add	r7,r4,r2
61027a18:	30001e26 	beq	r6,zero,61027a94 <__lshift+0x120>
61027a1c:	00800804 	movi	r2,32
61027a20:	1191c83a 	sub	r8,r2,r6
61027a24:	0007883a 	mov	r3,zero
61027a28:	20800017 	ldw	r2,0(r4)
61027a2c:	1184983a 	sll	r2,r2,r6
61027a30:	1884b03a 	or	r2,r3,r2
61027a34:	28800015 	stw	r2,0(r5)
61027a38:	20c00017 	ldw	r3,0(r4)
61027a3c:	21000104 	addi	r4,r4,4
61027a40:	29400104 	addi	r5,r5,4
61027a44:	1a06d83a 	srl	r3,r3,r8
61027a48:	21fff736 	bltu	r4,r7,61027a28 <__lshift+0xb4>
61027a4c:	28c00015 	stw	r3,0(r5)
61027a50:	18000126 	beq	r3,zero,61027a58 <__lshift+0xe4>
61027a54:	8c400044 	addi	r17,r17,1
61027a58:	88bfffc4 	addi	r2,r17,-1
61027a5c:	98800415 	stw	r2,16(r19)
61027a60:	a809883a 	mov	r4,r21
61027a64:	900b883a 	mov	r5,r18
61027a68:	10270300 	call	61027030 <_Bfree>
61027a6c:	9805883a 	mov	r2,r19
61027a70:	dfc00617 	ldw	ra,24(sp)
61027a74:	dd400517 	ldw	r21,20(sp)
61027a78:	dd000417 	ldw	r20,16(sp)
61027a7c:	dcc00317 	ldw	r19,12(sp)
61027a80:	dc800217 	ldw	r18,8(sp)
61027a84:	dc400117 	ldw	r17,4(sp)
61027a88:	dc000017 	ldw	r16,0(sp)
61027a8c:	dec00704 	addi	sp,sp,28
61027a90:	f800283a 	ret
61027a94:	20800017 	ldw	r2,0(r4)
61027a98:	21000104 	addi	r4,r4,4
61027a9c:	28800015 	stw	r2,0(r5)
61027aa0:	29400104 	addi	r5,r5,4
61027aa4:	21ffec2e 	bgeu	r4,r7,61027a58 <__lshift+0xe4>
61027aa8:	20800017 	ldw	r2,0(r4)
61027aac:	21000104 	addi	r4,r4,4
61027ab0:	28800015 	stw	r2,0(r5)
61027ab4:	29400104 	addi	r5,r5,4
61027ab8:	21fff636 	bltu	r4,r7,61027a94 <__lshift+0x120>
61027abc:	003fe606 	br	61027a58 <__lshift+0xe4>

61027ac0 <__multiply>:
61027ac0:	defff904 	addi	sp,sp,-28
61027ac4:	dcc00315 	stw	r19,12(sp)
61027ac8:	dc800215 	stw	r18,8(sp)
61027acc:	2cc00417 	ldw	r19,16(r5)
61027ad0:	34800417 	ldw	r18,16(r6)
61027ad4:	dd000415 	stw	r20,16(sp)
61027ad8:	dc400115 	stw	r17,4(sp)
61027adc:	dfc00615 	stw	ra,24(sp)
61027ae0:	dd400515 	stw	r21,20(sp)
61027ae4:	dc000015 	stw	r16,0(sp)
61027ae8:	2823883a 	mov	r17,r5
61027aec:	3029883a 	mov	r20,r6
61027af0:	9c80040e 	bge	r19,r18,61027b04 <__multiply+0x44>
61027af4:	9027883a 	mov	r19,r18
61027af8:	2c800417 	ldw	r18,16(r5)
61027afc:	2829883a 	mov	r20,r5
61027b00:	3023883a 	mov	r17,r6
61027b04:	88800217 	ldw	r2,8(r17)
61027b08:	9ca1883a 	add	r16,r19,r18
61027b0c:	89400117 	ldw	r5,4(r17)
61027b10:	1400010e 	bge	r2,r16,61027b18 <__multiply+0x58>
61027b14:	29400044 	addi	r5,r5,1
61027b18:	10275b00 	call	610275b0 <_Balloc>
61027b1c:	102b883a 	mov	r21,r2
61027b20:	8405883a 	add	r2,r16,r16
61027b24:	1085883a 	add	r2,r2,r2
61027b28:	a9000504 	addi	r4,r21,20
61027b2c:	209d883a 	add	r14,r4,r2
61027b30:	2380042e 	bgeu	r4,r14,61027b44 <__multiply+0x84>
61027b34:	2005883a 	mov	r2,r4
61027b38:	10000015 	stw	zero,0(r2)
61027b3c:	10800104 	addi	r2,r2,4
61027b40:	13bffd36 	bltu	r2,r14,61027b38 <__multiply+0x78>
61027b44:	9485883a 	add	r2,r18,r18
61027b48:	9cc7883a 	add	r3,r19,r19
61027b4c:	a1800504 	addi	r6,r20,20
61027b50:	1085883a 	add	r2,r2,r2
61027b54:	8b400504 	addi	r13,r17,20
61027b58:	18c7883a 	add	r3,r3,r3
61027b5c:	309f883a 	add	r15,r6,r2
61027b60:	68d7883a 	add	r11,r13,r3
61027b64:	33c03b2e 	bgeu	r6,r15,61027c54 <__multiply+0x194>
61027b68:	2019883a 	mov	r12,r4
61027b6c:	30800017 	ldw	r2,0(r6)
61027b70:	127fffcc 	andi	r9,r2,65535
61027b74:	48001826 	beq	r9,zero,61027bd8 <__multiply+0x118>
61027b78:	6811883a 	mov	r8,r13
61027b7c:	600f883a 	mov	r7,r12
61027b80:	0015883a 	mov	r10,zero
61027b84:	40c00017 	ldw	r3,0(r8)
61027b88:	39400017 	ldw	r5,0(r7)
61027b8c:	42000104 	addi	r8,r8,4
61027b90:	193fffcc 	andi	r4,r3,65535
61027b94:	4909383a 	mul	r4,r9,r4
61027b98:	1806d43a 	srli	r3,r3,16
61027b9c:	28bfffcc 	andi	r2,r5,65535
61027ba0:	5085883a 	add	r2,r10,r2
61027ba4:	2089883a 	add	r4,r4,r2
61027ba8:	48c7383a 	mul	r3,r9,r3
61027bac:	280ad43a 	srli	r5,r5,16
61027bb0:	2004d43a 	srli	r2,r4,16
61027bb4:	3900000d 	sth	r4,0(r7)
61027bb8:	1947883a 	add	r3,r3,r5
61027bbc:	10c5883a 	add	r2,r2,r3
61027bc0:	3880008d 	sth	r2,2(r7)
61027bc4:	1014d43a 	srli	r10,r2,16
61027bc8:	39c00104 	addi	r7,r7,4
61027bcc:	42ffed36 	bltu	r8,r11,61027b84 <__multiply+0xc4>
61027bd0:	3a800015 	stw	r10,0(r7)
61027bd4:	30800017 	ldw	r2,0(r6)
61027bd8:	1012d43a 	srli	r9,r2,16
61027bdc:	48001926 	beq	r9,zero,61027c44 <__multiply+0x184>
61027be0:	60800017 	ldw	r2,0(r12)
61027be4:	6811883a 	mov	r8,r13
61027be8:	600f883a 	mov	r7,r12
61027bec:	0015883a 	mov	r10,zero
61027bf0:	100b883a 	mov	r5,r2
61027bf4:	41000017 	ldw	r4,0(r8)
61027bf8:	2806d43a 	srli	r3,r5,16
61027bfc:	3880000d 	sth	r2,0(r7)
61027c00:	20bfffcc 	andi	r2,r4,65535
61027c04:	4885383a 	mul	r2,r9,r2
61027c08:	50c7883a 	add	r3,r10,r3
61027c0c:	2008d43a 	srli	r4,r4,16
61027c10:	10c5883a 	add	r2,r2,r3
61027c14:	3880008d 	sth	r2,2(r7)
61027c18:	39c00104 	addi	r7,r7,4
61027c1c:	39400017 	ldw	r5,0(r7)
61027c20:	4909383a 	mul	r4,r9,r4
61027c24:	1004d43a 	srli	r2,r2,16
61027c28:	28ffffcc 	andi	r3,r5,65535
61027c2c:	20c9883a 	add	r4,r4,r3
61027c30:	1105883a 	add	r2,r2,r4
61027c34:	42000104 	addi	r8,r8,4
61027c38:	1014d43a 	srli	r10,r2,16
61027c3c:	42ffed36 	bltu	r8,r11,61027bf4 <__multiply+0x134>
61027c40:	38800015 	stw	r2,0(r7)
61027c44:	31800104 	addi	r6,r6,4
61027c48:	33c0022e 	bgeu	r6,r15,61027c54 <__multiply+0x194>
61027c4c:	63000104 	addi	r12,r12,4
61027c50:	003fc606 	br	61027b6c <__multiply+0xac>
61027c54:	0400090e 	bge	zero,r16,61027c7c <__multiply+0x1bc>
61027c58:	70bfff17 	ldw	r2,-4(r14)
61027c5c:	70ffff04 	addi	r3,r14,-4
61027c60:	10000326 	beq	r2,zero,61027c70 <__multiply+0x1b0>
61027c64:	00000506 	br	61027c7c <__multiply+0x1bc>
61027c68:	18800017 	ldw	r2,0(r3)
61027c6c:	1000031e 	bne	r2,zero,61027c7c <__multiply+0x1bc>
61027c70:	843fffc4 	addi	r16,r16,-1
61027c74:	18ffff04 	addi	r3,r3,-4
61027c78:	803ffb1e 	bne	r16,zero,61027c68 <__multiply+0x1a8>
61027c7c:	a805883a 	mov	r2,r21
61027c80:	ac000415 	stw	r16,16(r21)
61027c84:	dfc00617 	ldw	ra,24(sp)
61027c88:	dd400517 	ldw	r21,20(sp)
61027c8c:	dd000417 	ldw	r20,16(sp)
61027c90:	dcc00317 	ldw	r19,12(sp)
61027c94:	dc800217 	ldw	r18,8(sp)
61027c98:	dc400117 	ldw	r17,4(sp)
61027c9c:	dc000017 	ldw	r16,0(sp)
61027ca0:	dec00704 	addi	sp,sp,28
61027ca4:	f800283a 	ret

61027ca8 <__i2b>:
61027ca8:	defffd04 	addi	sp,sp,-12
61027cac:	dc000015 	stw	r16,0(sp)
61027cb0:	04000044 	movi	r16,1
61027cb4:	dc800115 	stw	r18,4(sp)
61027cb8:	2825883a 	mov	r18,r5
61027cbc:	800b883a 	mov	r5,r16
61027cc0:	dfc00215 	stw	ra,8(sp)
61027cc4:	10275b00 	call	610275b0 <_Balloc>
61027cc8:	14000415 	stw	r16,16(r2)
61027ccc:	14800515 	stw	r18,20(r2)
61027cd0:	dfc00217 	ldw	ra,8(sp)
61027cd4:	dc800117 	ldw	r18,4(sp)
61027cd8:	dc000017 	ldw	r16,0(sp)
61027cdc:	dec00304 	addi	sp,sp,12
61027ce0:	f800283a 	ret

61027ce4 <__multadd>:
61027ce4:	defffa04 	addi	sp,sp,-24
61027ce8:	dc800215 	stw	r18,8(sp)
61027cec:	2c800417 	ldw	r18,16(r5)
61027cf0:	dd000415 	stw	r20,16(sp)
61027cf4:	dcc00315 	stw	r19,12(sp)
61027cf8:	dc000015 	stw	r16,0(sp)
61027cfc:	dfc00515 	stw	ra,20(sp)
61027d00:	3821883a 	mov	r16,r7
61027d04:	dc400115 	stw	r17,4(sp)
61027d08:	2827883a 	mov	r19,r5
61027d0c:	2029883a 	mov	r20,r4
61027d10:	2a000504 	addi	r8,r5,20
61027d14:	000f883a 	mov	r7,zero
61027d18:	40800017 	ldw	r2,0(r8)
61027d1c:	39c00044 	addi	r7,r7,1
61027d20:	10ffffcc 	andi	r3,r2,65535
61027d24:	1987383a 	mul	r3,r3,r6
61027d28:	1004d43a 	srli	r2,r2,16
61027d2c:	1c07883a 	add	r3,r3,r16
61027d30:	180ad43a 	srli	r5,r3,16
61027d34:	1185383a 	mul	r2,r2,r6
61027d38:	18ffffcc 	andi	r3,r3,65535
61027d3c:	1145883a 	add	r2,r2,r5
61027d40:	1008943a 	slli	r4,r2,16
61027d44:	1020d43a 	srli	r16,r2,16
61027d48:	20c9883a 	add	r4,r4,r3
61027d4c:	41000015 	stw	r4,0(r8)
61027d50:	42000104 	addi	r8,r8,4
61027d54:	3cbff016 	blt	r7,r18,61027d18 <__multadd+0x34>
61027d58:	80000826 	beq	r16,zero,61027d7c <__multadd+0x98>
61027d5c:	98800217 	ldw	r2,8(r19)
61027d60:	90800f0e 	bge	r18,r2,61027da0 <__multadd+0xbc>
61027d64:	9485883a 	add	r2,r18,r18
61027d68:	1085883a 	add	r2,r2,r2
61027d6c:	14c5883a 	add	r2,r2,r19
61027d70:	90c00044 	addi	r3,r18,1
61027d74:	14000515 	stw	r16,20(r2)
61027d78:	98c00415 	stw	r3,16(r19)
61027d7c:	9805883a 	mov	r2,r19
61027d80:	dfc00517 	ldw	ra,20(sp)
61027d84:	dd000417 	ldw	r20,16(sp)
61027d88:	dcc00317 	ldw	r19,12(sp)
61027d8c:	dc800217 	ldw	r18,8(sp)
61027d90:	dc400117 	ldw	r17,4(sp)
61027d94:	dc000017 	ldw	r16,0(sp)
61027d98:	dec00604 	addi	sp,sp,24
61027d9c:	f800283a 	ret
61027da0:	99400117 	ldw	r5,4(r19)
61027da4:	a009883a 	mov	r4,r20
61027da8:	29400044 	addi	r5,r5,1
61027dac:	10275b00 	call	610275b0 <_Balloc>
61027db0:	99800417 	ldw	r6,16(r19)
61027db4:	99400304 	addi	r5,r19,12
61027db8:	11000304 	addi	r4,r2,12
61027dbc:	318d883a 	add	r6,r6,r6
61027dc0:	318d883a 	add	r6,r6,r6
61027dc4:	31800204 	addi	r6,r6,8
61027dc8:	1023883a 	mov	r17,r2
61027dcc:	1021a5c0 	call	61021a5c <memcpy>
61027dd0:	980b883a 	mov	r5,r19
61027dd4:	a009883a 	mov	r4,r20
61027dd8:	10270300 	call	61027030 <_Bfree>
61027ddc:	8827883a 	mov	r19,r17
61027de0:	003fe006 	br	61027d64 <__multadd+0x80>

61027de4 <__pow5mult>:
61027de4:	defffa04 	addi	sp,sp,-24
61027de8:	308000cc 	andi	r2,r6,3
61027dec:	dd000415 	stw	r20,16(sp)
61027df0:	dcc00315 	stw	r19,12(sp)
61027df4:	dc000015 	stw	r16,0(sp)
61027df8:	dfc00515 	stw	ra,20(sp)
61027dfc:	dc800215 	stw	r18,8(sp)
61027e00:	dc400115 	stw	r17,4(sp)
61027e04:	3021883a 	mov	r16,r6
61027e08:	2027883a 	mov	r19,r4
61027e0c:	2829883a 	mov	r20,r5
61027e10:	10002b1e 	bne	r2,zero,61027ec0 <__pow5mult+0xdc>
61027e14:	8025d0ba 	srai	r18,r16,2
61027e18:	90001b26 	beq	r18,zero,61027e88 <__pow5mult+0xa4>
61027e1c:	9c001217 	ldw	r16,72(r19)
61027e20:	8000081e 	bne	r16,zero,61027e44 <__pow5mult+0x60>
61027e24:	00003006 	br	61027ee8 <__pow5mult+0x104>
61027e28:	800b883a 	mov	r5,r16
61027e2c:	800d883a 	mov	r6,r16
61027e30:	9809883a 	mov	r4,r19
61027e34:	90001426 	beq	r18,zero,61027e88 <__pow5mult+0xa4>
61027e38:	80800017 	ldw	r2,0(r16)
61027e3c:	10001b26 	beq	r2,zero,61027eac <__pow5mult+0xc8>
61027e40:	1021883a 	mov	r16,r2
61027e44:	9080004c 	andi	r2,r18,1
61027e48:	1005003a 	cmpeq	r2,r2,zero
61027e4c:	9025d07a 	srai	r18,r18,1
61027e50:	800d883a 	mov	r6,r16
61027e54:	9809883a 	mov	r4,r19
61027e58:	a00b883a 	mov	r5,r20
61027e5c:	103ff21e 	bne	r2,zero,61027e28 <__pow5mult+0x44>
61027e60:	1027ac00 	call	61027ac0 <__multiply>
61027e64:	a00b883a 	mov	r5,r20
61027e68:	9809883a 	mov	r4,r19
61027e6c:	1023883a 	mov	r17,r2
61027e70:	10270300 	call	61027030 <_Bfree>
61027e74:	8829883a 	mov	r20,r17
61027e78:	800b883a 	mov	r5,r16
61027e7c:	800d883a 	mov	r6,r16
61027e80:	9809883a 	mov	r4,r19
61027e84:	903fec1e 	bne	r18,zero,61027e38 <__pow5mult+0x54>
61027e88:	a005883a 	mov	r2,r20
61027e8c:	dfc00517 	ldw	ra,20(sp)
61027e90:	dd000417 	ldw	r20,16(sp)
61027e94:	dcc00317 	ldw	r19,12(sp)
61027e98:	dc800217 	ldw	r18,8(sp)
61027e9c:	dc400117 	ldw	r17,4(sp)
61027ea0:	dc000017 	ldw	r16,0(sp)
61027ea4:	dec00604 	addi	sp,sp,24
61027ea8:	f800283a 	ret
61027eac:	1027ac00 	call	61027ac0 <__multiply>
61027eb0:	80800015 	stw	r2,0(r16)
61027eb4:	1021883a 	mov	r16,r2
61027eb8:	10000015 	stw	zero,0(r2)
61027ebc:	003fe106 	br	61027e44 <__pow5mult+0x60>
61027ec0:	1085883a 	add	r2,r2,r2
61027ec4:	00d840f4 	movhi	r3,24835
61027ec8:	18f82004 	addi	r3,r3,-8064
61027ecc:	1085883a 	add	r2,r2,r2
61027ed0:	10c5883a 	add	r2,r2,r3
61027ed4:	11bfff17 	ldw	r6,-4(r2)
61027ed8:	000f883a 	mov	r7,zero
61027edc:	1027ce40 	call	61027ce4 <__multadd>
61027ee0:	1029883a 	mov	r20,r2
61027ee4:	003fcb06 	br	61027e14 <__pow5mult+0x30>
61027ee8:	9809883a 	mov	r4,r19
61027eec:	01409c44 	movi	r5,625
61027ef0:	1027ca80 	call	61027ca8 <__i2b>
61027ef4:	98801215 	stw	r2,72(r19)
61027ef8:	1021883a 	mov	r16,r2
61027efc:	10000015 	stw	zero,0(r2)
61027f00:	003fd006 	br	61027e44 <__pow5mult+0x60>

61027f04 <__s2b>:
61027f04:	defff904 	addi	sp,sp,-28
61027f08:	dcc00315 	stw	r19,12(sp)
61027f0c:	dc800215 	stw	r18,8(sp)
61027f10:	2827883a 	mov	r19,r5
61027f14:	2025883a 	mov	r18,r4
61027f18:	01400244 	movi	r5,9
61027f1c:	39000204 	addi	r4,r7,8
61027f20:	dd000415 	stw	r20,16(sp)
61027f24:	dc400115 	stw	r17,4(sp)
61027f28:	dfc00615 	stw	ra,24(sp)
61027f2c:	dd400515 	stw	r21,20(sp)
61027f30:	dc000015 	stw	r16,0(sp)
61027f34:	3829883a 	mov	r20,r7
61027f38:	3023883a 	mov	r17,r6
61027f3c:	10213d00 	call	610213d0 <__divsi3>
61027f40:	00c00044 	movi	r3,1
61027f44:	1880350e 	bge	r3,r2,6102801c <__s2b+0x118>
61027f48:	000b883a 	mov	r5,zero
61027f4c:	18c7883a 	add	r3,r3,r3
61027f50:	29400044 	addi	r5,r5,1
61027f54:	18bffd16 	blt	r3,r2,61027f4c <__s2b+0x48>
61027f58:	9009883a 	mov	r4,r18
61027f5c:	10275b00 	call	610275b0 <_Balloc>
61027f60:	1011883a 	mov	r8,r2
61027f64:	d8800717 	ldw	r2,28(sp)
61027f68:	00c00044 	movi	r3,1
61027f6c:	01800244 	movi	r6,9
61027f70:	40800515 	stw	r2,20(r8)
61027f74:	40c00415 	stw	r3,16(r8)
61027f78:	3440260e 	bge	r6,r17,61028014 <__s2b+0x110>
61027f7c:	3021883a 	mov	r16,r6
61027f80:	99ab883a 	add	r21,r19,r6
61027f84:	9c05883a 	add	r2,r19,r16
61027f88:	11c00007 	ldb	r7,0(r2)
61027f8c:	400b883a 	mov	r5,r8
61027f90:	9009883a 	mov	r4,r18
61027f94:	39fff404 	addi	r7,r7,-48
61027f98:	01800284 	movi	r6,10
61027f9c:	1027ce40 	call	61027ce4 <__multadd>
61027fa0:	84000044 	addi	r16,r16,1
61027fa4:	1011883a 	mov	r8,r2
61027fa8:	8c3ff61e 	bne	r17,r16,61027f84 <__s2b+0x80>
61027fac:	ac45883a 	add	r2,r21,r17
61027fb0:	117ffe04 	addi	r5,r2,-8
61027fb4:	880d883a 	mov	r6,r17
61027fb8:	35000c0e 	bge	r6,r20,61027fec <__s2b+0xe8>
61027fbc:	a185c83a 	sub	r2,r20,r6
61027fc0:	2821883a 	mov	r16,r5
61027fc4:	28a3883a 	add	r17,r5,r2
61027fc8:	81c00007 	ldb	r7,0(r16)
61027fcc:	400b883a 	mov	r5,r8
61027fd0:	9009883a 	mov	r4,r18
61027fd4:	39fff404 	addi	r7,r7,-48
61027fd8:	01800284 	movi	r6,10
61027fdc:	1027ce40 	call	61027ce4 <__multadd>
61027fe0:	84000044 	addi	r16,r16,1
61027fe4:	1011883a 	mov	r8,r2
61027fe8:	847ff71e 	bne	r16,r17,61027fc8 <__s2b+0xc4>
61027fec:	4005883a 	mov	r2,r8
61027ff0:	dfc00617 	ldw	ra,24(sp)
61027ff4:	dd400517 	ldw	r21,20(sp)
61027ff8:	dd000417 	ldw	r20,16(sp)
61027ffc:	dcc00317 	ldw	r19,12(sp)
61028000:	dc800217 	ldw	r18,8(sp)
61028004:	dc400117 	ldw	r17,4(sp)
61028008:	dc000017 	ldw	r16,0(sp)
6102800c:	dec00704 	addi	sp,sp,28
61028010:	f800283a 	ret
61028014:	99400284 	addi	r5,r19,10
61028018:	003fe706 	br	61027fb8 <__s2b+0xb4>
6102801c:	000b883a 	mov	r5,zero
61028020:	003fcd06 	br	61027f58 <__s2b+0x54>

61028024 <putc>:
61028024:	defffc04 	addi	sp,sp,-16
61028028:	dc800215 	stw	r18,8(sp)
6102802c:	049840f4 	movhi	r18,24835
61028030:	94beba04 	addi	r18,r18,-1304
61028034:	90c00017 	ldw	r3,0(r18)
61028038:	dc400115 	stw	r17,4(sp)
6102803c:	dc000015 	stw	r16,0(sp)
61028040:	dfc00315 	stw	ra,12(sp)
61028044:	2023883a 	mov	r17,r4
61028048:	2821883a 	mov	r16,r5
6102804c:	18000226 	beq	r3,zero,61028058 <putc+0x34>
61028050:	18800e17 	ldw	r2,56(r3)
61028054:	10001126 	beq	r2,zero,6102809c <putc+0x78>
61028058:	80800217 	ldw	r2,8(r16)
6102805c:	10ffffc4 	addi	r3,r2,-1
61028060:	80c00215 	stw	r3,8(r16)
61028064:	18001316 	blt	r3,zero,610280b4 <putc+0x90>
61028068:	80800017 	ldw	r2,0(r16)
6102806c:	14400005 	stb	r17,0(r2)
61028070:	80c00017 	ldw	r3,0(r16)
61028074:	18800044 	addi	r2,r3,1
61028078:	18c00003 	ldbu	r3,0(r3)
6102807c:	80800015 	stw	r2,0(r16)
61028080:	1805883a 	mov	r2,r3
61028084:	dfc00317 	ldw	ra,12(sp)
61028088:	dc800217 	ldw	r18,8(sp)
6102808c:	dc400117 	ldw	r17,4(sp)
61028090:	dc000017 	ldw	r16,0(sp)
61028094:	dec00404 	addi	sp,sp,16
61028098:	f800283a 	ret
6102809c:	1809883a 	mov	r4,r3
610280a0:	10257880 	call	61025788 <__sinit>
610280a4:	80800217 	ldw	r2,8(r16)
610280a8:	10ffffc4 	addi	r3,r2,-1
610280ac:	80c00215 	stw	r3,8(r16)
610280b0:	183fed0e 	bge	r3,zero,61028068 <putc+0x44>
610280b4:	80800617 	ldw	r2,24(r16)
610280b8:	18800f16 	blt	r3,r2,610280f8 <putc+0xd4>
610280bc:	80800017 	ldw	r2,0(r16)
610280c0:	14400005 	stb	r17,0(r2)
610280c4:	81000017 	ldw	r4,0(r16)
610280c8:	00800284 	movi	r2,10
610280cc:	20c00003 	ldbu	r3,0(r4)
610280d0:	18801226 	beq	r3,r2,6102811c <putc+0xf8>
610280d4:	20800044 	addi	r2,r4,1
610280d8:	80800015 	stw	r2,0(r16)
610280dc:	1805883a 	mov	r2,r3
610280e0:	dfc00317 	ldw	ra,12(sp)
610280e4:	dc800217 	ldw	r18,8(sp)
610280e8:	dc400117 	ldw	r17,4(sp)
610280ec:	dc000017 	ldw	r16,0(sp)
610280f0:	dec00404 	addi	sp,sp,16
610280f4:	f800283a 	ret
610280f8:	91000017 	ldw	r4,0(r18)
610280fc:	880b883a 	mov	r5,r17
61028100:	800d883a 	mov	r6,r16
61028104:	dfc00317 	ldw	ra,12(sp)
61028108:	dc800217 	ldw	r18,8(sp)
6102810c:	dc400117 	ldw	r17,4(sp)
61028110:	dc000017 	ldw	r16,0(sp)
61028114:	dec00404 	addi	sp,sp,16
61028118:	1028aec1 	jmpi	61028aec <__swbuf_r>
6102811c:	91000017 	ldw	r4,0(r18)
61028120:	180b883a 	mov	r5,r3
61028124:	003ff606 	br	61028100 <putc+0xdc>

61028128 <_putc_r>:
61028128:	defffc04 	addi	sp,sp,-16
6102812c:	dc400215 	stw	r17,8(sp)
61028130:	dc000115 	stw	r16,4(sp)
61028134:	dfc00315 	stw	ra,12(sp)
61028138:	2021883a 	mov	r16,r4
6102813c:	2823883a 	mov	r17,r5
61028140:	20000226 	beq	r4,zero,6102814c <_putc_r+0x24>
61028144:	20800e17 	ldw	r2,56(r4)
61028148:	10001026 	beq	r2,zero,6102818c <_putc_r+0x64>
6102814c:	30800217 	ldw	r2,8(r6)
61028150:	10ffffc4 	addi	r3,r2,-1
61028154:	30c00215 	stw	r3,8(r6)
61028158:	18001316 	blt	r3,zero,610281a8 <_putc_r+0x80>
6102815c:	30800017 	ldw	r2,0(r6)
61028160:	14400005 	stb	r17,0(r2)
61028164:	30c00017 	ldw	r3,0(r6)
61028168:	18800044 	addi	r2,r3,1
6102816c:	18c00003 	ldbu	r3,0(r3)
61028170:	30800015 	stw	r2,0(r6)
61028174:	1805883a 	mov	r2,r3
61028178:	dfc00317 	ldw	ra,12(sp)
6102817c:	dc400217 	ldw	r17,8(sp)
61028180:	dc000117 	ldw	r16,4(sp)
61028184:	dec00404 	addi	sp,sp,16
61028188:	f800283a 	ret
6102818c:	d9800015 	stw	r6,0(sp)
61028190:	10257880 	call	61025788 <__sinit>
61028194:	d9800017 	ldw	r6,0(sp)
61028198:	30800217 	ldw	r2,8(r6)
6102819c:	10ffffc4 	addi	r3,r2,-1
610281a0:	30c00215 	stw	r3,8(r6)
610281a4:	183fed0e 	bge	r3,zero,6102815c <_putc_r+0x34>
610281a8:	30800617 	ldw	r2,24(r6)
610281ac:	18800e16 	blt	r3,r2,610281e8 <_putc_r+0xc0>
610281b0:	30800017 	ldw	r2,0(r6)
610281b4:	14400005 	stb	r17,0(r2)
610281b8:	31000017 	ldw	r4,0(r6)
610281bc:	00800284 	movi	r2,10
610281c0:	20c00003 	ldbu	r3,0(r4)
610281c4:	18800f26 	beq	r3,r2,61028204 <_putc_r+0xdc>
610281c8:	20800044 	addi	r2,r4,1
610281cc:	30800015 	stw	r2,0(r6)
610281d0:	1805883a 	mov	r2,r3
610281d4:	dfc00317 	ldw	ra,12(sp)
610281d8:	dc400217 	ldw	r17,8(sp)
610281dc:	dc000117 	ldw	r16,4(sp)
610281e0:	dec00404 	addi	sp,sp,16
610281e4:	f800283a 	ret
610281e8:	8009883a 	mov	r4,r16
610281ec:	880b883a 	mov	r5,r17
610281f0:	dfc00317 	ldw	ra,12(sp)
610281f4:	dc400217 	ldw	r17,8(sp)
610281f8:	dc000117 	ldw	r16,4(sp)
610281fc:	dec00404 	addi	sp,sp,16
61028200:	1028aec1 	jmpi	61028aec <__swbuf_r>
61028204:	8009883a 	mov	r4,r16
61028208:	180b883a 	mov	r5,r3
6102820c:	003ff806 	br	610281f0 <_putc_r+0xc8>

61028210 <_realloc_r>:
61028210:	defff404 	addi	sp,sp,-48
61028214:	dd800815 	stw	r22,32(sp)
61028218:	dc800415 	stw	r18,16(sp)
6102821c:	dc400315 	stw	r17,12(sp)
61028220:	dfc00b15 	stw	ra,44(sp)
61028224:	df000a15 	stw	fp,40(sp)
61028228:	ddc00915 	stw	r23,36(sp)
6102822c:	dd400715 	stw	r21,28(sp)
61028230:	dd000615 	stw	r20,24(sp)
61028234:	dcc00515 	stw	r19,20(sp)
61028238:	dc000215 	stw	r16,8(sp)
6102823c:	2825883a 	mov	r18,r5
61028240:	3023883a 	mov	r17,r6
61028244:	202d883a 	mov	r22,r4
61028248:	2800c926 	beq	r5,zero,61028570 <_realloc_r+0x360>
6102824c:	102b63c0 	call	6102b63c <__malloc_lock>
61028250:	943ffe04 	addi	r16,r18,-8
61028254:	88c002c4 	addi	r3,r17,11
61028258:	00800584 	movi	r2,22
6102825c:	82000117 	ldw	r8,4(r16)
61028260:	10c01b2e 	bgeu	r2,r3,610282d0 <_realloc_r+0xc0>
61028264:	00bffe04 	movi	r2,-8
61028268:	188e703a 	and	r7,r3,r2
6102826c:	3839883a 	mov	fp,r7
61028270:	38001a16 	blt	r7,zero,610282dc <_realloc_r+0xcc>
61028274:	e4401936 	bltu	fp,r17,610282dc <_realloc_r+0xcc>
61028278:	013fff04 	movi	r4,-4
6102827c:	4126703a 	and	r19,r8,r4
61028280:	99c02616 	blt	r19,r7,6102831c <_realloc_r+0x10c>
61028284:	802b883a 	mov	r21,r16
61028288:	9829883a 	mov	r20,r19
6102828c:	84000204 	addi	r16,r16,8
61028290:	a80f883a 	mov	r7,r21
61028294:	a70dc83a 	sub	r6,r20,fp
61028298:	008003c4 	movi	r2,15
6102829c:	1180c136 	bltu	r2,r6,610285a4 <_realloc_r+0x394>
610282a0:	38800117 	ldw	r2,4(r7)
610282a4:	a549883a 	add	r4,r20,r21
610282a8:	1080004c 	andi	r2,r2,1
610282ac:	a084b03a 	or	r2,r20,r2
610282b0:	38800115 	stw	r2,4(r7)
610282b4:	20c00117 	ldw	r3,4(r4)
610282b8:	18c00054 	ori	r3,r3,1
610282bc:	20c00115 	stw	r3,4(r4)
610282c0:	b009883a 	mov	r4,r22
610282c4:	102b65c0 	call	6102b65c <__malloc_unlock>
610282c8:	8023883a 	mov	r17,r16
610282cc:	00000606 	br	610282e8 <_realloc_r+0xd8>
610282d0:	01c00404 	movi	r7,16
610282d4:	3839883a 	mov	fp,r7
610282d8:	e47fe72e 	bgeu	fp,r17,61028278 <_realloc_r+0x68>
610282dc:	00800304 	movi	r2,12
610282e0:	0023883a 	mov	r17,zero
610282e4:	b0800015 	stw	r2,0(r22)
610282e8:	8805883a 	mov	r2,r17
610282ec:	dfc00b17 	ldw	ra,44(sp)
610282f0:	df000a17 	ldw	fp,40(sp)
610282f4:	ddc00917 	ldw	r23,36(sp)
610282f8:	dd800817 	ldw	r22,32(sp)
610282fc:	dd400717 	ldw	r21,28(sp)
61028300:	dd000617 	ldw	r20,24(sp)
61028304:	dcc00517 	ldw	r19,20(sp)
61028308:	dc800417 	ldw	r18,16(sp)
6102830c:	dc400317 	ldw	r17,12(sp)
61028310:	dc000217 	ldw	r16,8(sp)
61028314:	dec00c04 	addi	sp,sp,48
61028318:	f800283a 	ret
6102831c:	009840f4 	movhi	r2,24835
61028320:	10b93604 	addi	r2,r2,-6952
61028324:	12400217 	ldw	r9,8(r2)
61028328:	84cd883a 	add	r6,r16,r19
6102832c:	802b883a 	mov	r21,r16
61028330:	3240b926 	beq	r6,r9,61028618 <_realloc_r+0x408>
61028334:	31400117 	ldw	r5,4(r6)
61028338:	00bfff84 	movi	r2,-2
6102833c:	2884703a 	and	r2,r5,r2
61028340:	1185883a 	add	r2,r2,r6
61028344:	10c00117 	ldw	r3,4(r2)
61028348:	18c0004c 	andi	r3,r3,1
6102834c:	1807003a 	cmpeq	r3,r3,zero
61028350:	1800a326 	beq	r3,zero,610285e0 <_realloc_r+0x3d0>
61028354:	2908703a 	and	r4,r5,r4
61028358:	9929883a 	add	r20,r19,r4
6102835c:	a1c0a30e 	bge	r20,r7,610285ec <_realloc_r+0x3dc>
61028360:	4080004c 	andi	r2,r8,1
61028364:	1000551e 	bne	r2,zero,610284bc <_realloc_r+0x2ac>
61028368:	80800017 	ldw	r2,0(r16)
6102836c:	80afc83a 	sub	r23,r16,r2
61028370:	b8c00117 	ldw	r3,4(r23)
61028374:	00bfff04 	movi	r2,-4
61028378:	1884703a 	and	r2,r3,r2
6102837c:	30002e26 	beq	r6,zero,61028438 <_realloc_r+0x228>
61028380:	3240b926 	beq	r6,r9,61028668 <_realloc_r+0x458>
61028384:	98a9883a 	add	r20,r19,r2
61028388:	2509883a 	add	r4,r4,r20
6102838c:	d9000015 	stw	r4,0(sp)
61028390:	21c02a16 	blt	r4,r7,6102843c <_realloc_r+0x22c>
61028394:	30800317 	ldw	r2,12(r6)
61028398:	30c00217 	ldw	r3,8(r6)
6102839c:	01400904 	movi	r5,36
610283a0:	99bfff04 	addi	r6,r19,-4
610283a4:	18800315 	stw	r2,12(r3)
610283a8:	10c00215 	stw	r3,8(r2)
610283ac:	b9000317 	ldw	r4,12(r23)
610283b0:	b8800217 	ldw	r2,8(r23)
610283b4:	b82b883a 	mov	r21,r23
610283b8:	bc000204 	addi	r16,r23,8
610283bc:	20800215 	stw	r2,8(r4)
610283c0:	11000315 	stw	r4,12(r2)
610283c4:	2980e436 	bltu	r5,r6,61028758 <_realloc_r+0x548>
610283c8:	008004c4 	movi	r2,19
610283cc:	9009883a 	mov	r4,r18
610283d0:	8011883a 	mov	r8,r16
610283d4:	11800f2e 	bgeu	r2,r6,61028414 <_realloc_r+0x204>
610283d8:	90800017 	ldw	r2,0(r18)
610283dc:	ba000404 	addi	r8,r23,16
610283e0:	91000204 	addi	r4,r18,8
610283e4:	b8800215 	stw	r2,8(r23)
610283e8:	90c00117 	ldw	r3,4(r18)
610283ec:	008006c4 	movi	r2,27
610283f0:	b8c00315 	stw	r3,12(r23)
610283f4:	1180072e 	bgeu	r2,r6,61028414 <_realloc_r+0x204>
610283f8:	90c00217 	ldw	r3,8(r18)
610283fc:	ba000604 	addi	r8,r23,24
61028400:	91000404 	addi	r4,r18,16
61028404:	b8c00415 	stw	r3,16(r23)
61028408:	90800317 	ldw	r2,12(r18)
6102840c:	b8800515 	stw	r2,20(r23)
61028410:	3140e726 	beq	r6,r5,610287b0 <_realloc_r+0x5a0>
61028414:	20800017 	ldw	r2,0(r4)
61028418:	dd000017 	ldw	r20,0(sp)
6102841c:	b80f883a 	mov	r7,r23
61028420:	40800015 	stw	r2,0(r8)
61028424:	20c00117 	ldw	r3,4(r4)
61028428:	40c00115 	stw	r3,4(r8)
6102842c:	20800217 	ldw	r2,8(r4)
61028430:	40800215 	stw	r2,8(r8)
61028434:	003f9706 	br	61028294 <_realloc_r+0x84>
61028438:	98a9883a 	add	r20,r19,r2
6102843c:	a1c01f16 	blt	r20,r7,610284bc <_realloc_r+0x2ac>
61028440:	b8c00317 	ldw	r3,12(r23)
61028444:	b8800217 	ldw	r2,8(r23)
61028448:	99bfff04 	addi	r6,r19,-4
6102844c:	01400904 	movi	r5,36
61028450:	b82b883a 	mov	r21,r23
61028454:	18800215 	stw	r2,8(r3)
61028458:	10c00315 	stw	r3,12(r2)
6102845c:	bc000204 	addi	r16,r23,8
61028460:	2980c336 	bltu	r5,r6,61028770 <_realloc_r+0x560>
61028464:	008004c4 	movi	r2,19
61028468:	9009883a 	mov	r4,r18
6102846c:	8011883a 	mov	r8,r16
61028470:	11800f2e 	bgeu	r2,r6,610284b0 <_realloc_r+0x2a0>
61028474:	90800017 	ldw	r2,0(r18)
61028478:	ba000404 	addi	r8,r23,16
6102847c:	91000204 	addi	r4,r18,8
61028480:	b8800215 	stw	r2,8(r23)
61028484:	90c00117 	ldw	r3,4(r18)
61028488:	008006c4 	movi	r2,27
6102848c:	b8c00315 	stw	r3,12(r23)
61028490:	1180072e 	bgeu	r2,r6,610284b0 <_realloc_r+0x2a0>
61028494:	90c00217 	ldw	r3,8(r18)
61028498:	ba000604 	addi	r8,r23,24
6102849c:	91000404 	addi	r4,r18,16
610284a0:	b8c00415 	stw	r3,16(r23)
610284a4:	90800317 	ldw	r2,12(r18)
610284a8:	b8800515 	stw	r2,20(r23)
610284ac:	3140c726 	beq	r6,r5,610287cc <_realloc_r+0x5bc>
610284b0:	20800017 	ldw	r2,0(r4)
610284b4:	b80f883a 	mov	r7,r23
610284b8:	003fd906 	br	61028420 <_realloc_r+0x210>
610284bc:	880b883a 	mov	r5,r17
610284c0:	b009883a 	mov	r4,r22
610284c4:	10266940 	call	61026694 <_malloc_r>
610284c8:	1023883a 	mov	r17,r2
610284cc:	10002526 	beq	r2,zero,61028564 <_realloc_r+0x354>
610284d0:	80800117 	ldw	r2,4(r16)
610284d4:	00ffff84 	movi	r3,-2
610284d8:	893ffe04 	addi	r4,r17,-8
610284dc:	10c4703a 	and	r2,r2,r3
610284e0:	8085883a 	add	r2,r16,r2
610284e4:	20809526 	beq	r4,r2,6102873c <_realloc_r+0x52c>
610284e8:	99bfff04 	addi	r6,r19,-4
610284ec:	01c00904 	movi	r7,36
610284f0:	39804536 	bltu	r7,r6,61028608 <_realloc_r+0x3f8>
610284f4:	008004c4 	movi	r2,19
610284f8:	9009883a 	mov	r4,r18
610284fc:	880b883a 	mov	r5,r17
61028500:	11800f2e 	bgeu	r2,r6,61028540 <_realloc_r+0x330>
61028504:	90800017 	ldw	r2,0(r18)
61028508:	89400204 	addi	r5,r17,8
6102850c:	91000204 	addi	r4,r18,8
61028510:	88800015 	stw	r2,0(r17)
61028514:	90c00117 	ldw	r3,4(r18)
61028518:	008006c4 	movi	r2,27
6102851c:	88c00115 	stw	r3,4(r17)
61028520:	1180072e 	bgeu	r2,r6,61028540 <_realloc_r+0x330>
61028524:	90c00217 	ldw	r3,8(r18)
61028528:	89400404 	addi	r5,r17,16
6102852c:	91000404 	addi	r4,r18,16
61028530:	88c00215 	stw	r3,8(r17)
61028534:	90800317 	ldw	r2,12(r18)
61028538:	88800315 	stw	r2,12(r17)
6102853c:	31c09126 	beq	r6,r7,61028784 <_realloc_r+0x574>
61028540:	20800017 	ldw	r2,0(r4)
61028544:	28800015 	stw	r2,0(r5)
61028548:	20c00117 	ldw	r3,4(r4)
6102854c:	28c00115 	stw	r3,4(r5)
61028550:	20800217 	ldw	r2,8(r4)
61028554:	28800215 	stw	r2,8(r5)
61028558:	900b883a 	mov	r5,r18
6102855c:	b009883a 	mov	r4,r22
61028560:	1025b0c0 	call	61025b0c <_free_r>
61028564:	b009883a 	mov	r4,r22
61028568:	102b65c0 	call	6102b65c <__malloc_unlock>
6102856c:	003f5e06 	br	610282e8 <_realloc_r+0xd8>
61028570:	300b883a 	mov	r5,r6
61028574:	dfc00b17 	ldw	ra,44(sp)
61028578:	df000a17 	ldw	fp,40(sp)
6102857c:	ddc00917 	ldw	r23,36(sp)
61028580:	dd800817 	ldw	r22,32(sp)
61028584:	dd400717 	ldw	r21,28(sp)
61028588:	dd000617 	ldw	r20,24(sp)
6102858c:	dcc00517 	ldw	r19,20(sp)
61028590:	dc800417 	ldw	r18,16(sp)
61028594:	dc400317 	ldw	r17,12(sp)
61028598:	dc000217 	ldw	r16,8(sp)
6102859c:	dec00c04 	addi	sp,sp,48
610285a0:	10266941 	jmpi	61026694 <_malloc_r>
610285a4:	38800117 	ldw	r2,4(r7)
610285a8:	e54b883a 	add	r5,fp,r21
610285ac:	31000054 	ori	r4,r6,1
610285b0:	1080004c 	andi	r2,r2,1
610285b4:	1704b03a 	or	r2,r2,fp
610285b8:	38800115 	stw	r2,4(r7)
610285bc:	29000115 	stw	r4,4(r5)
610285c0:	2987883a 	add	r3,r5,r6
610285c4:	18800117 	ldw	r2,4(r3)
610285c8:	29400204 	addi	r5,r5,8
610285cc:	b009883a 	mov	r4,r22
610285d0:	10800054 	ori	r2,r2,1
610285d4:	18800115 	stw	r2,4(r3)
610285d8:	1025b0c0 	call	61025b0c <_free_r>
610285dc:	003f3806 	br	610282c0 <_realloc_r+0xb0>
610285e0:	000d883a 	mov	r6,zero
610285e4:	0009883a 	mov	r4,zero
610285e8:	003f5d06 	br	61028360 <_realloc_r+0x150>
610285ec:	30c00217 	ldw	r3,8(r6)
610285f0:	30800317 	ldw	r2,12(r6)
610285f4:	800f883a 	mov	r7,r16
610285f8:	84000204 	addi	r16,r16,8
610285fc:	10c00215 	stw	r3,8(r2)
61028600:	18800315 	stw	r2,12(r3)
61028604:	003f2306 	br	61028294 <_realloc_r+0x84>
61028608:	8809883a 	mov	r4,r17
6102860c:	900b883a 	mov	r5,r18
61028610:	1026eb80 	call	61026eb8 <memmove>
61028614:	003fd006 	br	61028558 <_realloc_r+0x348>
61028618:	30800117 	ldw	r2,4(r6)
6102861c:	e0c00404 	addi	r3,fp,16
61028620:	1108703a 	and	r4,r2,r4
61028624:	9905883a 	add	r2,r19,r4
61028628:	10ff4d16 	blt	r2,r3,61028360 <_realloc_r+0x150>
6102862c:	1705c83a 	sub	r2,r2,fp
61028630:	870b883a 	add	r5,r16,fp
61028634:	10800054 	ori	r2,r2,1
61028638:	28800115 	stw	r2,4(r5)
6102863c:	80c00117 	ldw	r3,4(r16)
61028640:	009840f4 	movhi	r2,24835
61028644:	10b93604 	addi	r2,r2,-6952
61028648:	b009883a 	mov	r4,r22
6102864c:	18c0004c 	andi	r3,r3,1
61028650:	e0c6b03a 	or	r3,fp,r3
61028654:	11400215 	stw	r5,8(r2)
61028658:	80c00115 	stw	r3,4(r16)
6102865c:	102b65c0 	call	6102b65c <__malloc_unlock>
61028660:	84400204 	addi	r17,r16,8
61028664:	003f2006 	br	610282e8 <_realloc_r+0xd8>
61028668:	98a9883a 	add	r20,r19,r2
6102866c:	2509883a 	add	r4,r4,r20
61028670:	e0800404 	addi	r2,fp,16
61028674:	d9000115 	stw	r4,4(sp)
61028678:	20bf7016 	blt	r4,r2,6102843c <_realloc_r+0x22c>
6102867c:	b8c00317 	ldw	r3,12(r23)
61028680:	b8800217 	ldw	r2,8(r23)
61028684:	99bfff04 	addi	r6,r19,-4
61028688:	01400904 	movi	r5,36
6102868c:	18800215 	stw	r2,8(r3)
61028690:	10c00315 	stw	r3,12(r2)
61028694:	bc400204 	addi	r17,r23,8
61028698:	29804136 	bltu	r5,r6,610287a0 <_realloc_r+0x590>
6102869c:	008004c4 	movi	r2,19
610286a0:	9009883a 	mov	r4,r18
610286a4:	880f883a 	mov	r7,r17
610286a8:	11800f2e 	bgeu	r2,r6,610286e8 <_realloc_r+0x4d8>
610286ac:	90800017 	ldw	r2,0(r18)
610286b0:	b9c00404 	addi	r7,r23,16
610286b4:	91000204 	addi	r4,r18,8
610286b8:	b8800215 	stw	r2,8(r23)
610286bc:	90c00117 	ldw	r3,4(r18)
610286c0:	008006c4 	movi	r2,27
610286c4:	b8c00315 	stw	r3,12(r23)
610286c8:	1180072e 	bgeu	r2,r6,610286e8 <_realloc_r+0x4d8>
610286cc:	90c00217 	ldw	r3,8(r18)
610286d0:	b9c00604 	addi	r7,r23,24
610286d4:	91000404 	addi	r4,r18,16
610286d8:	b8c00415 	stw	r3,16(r23)
610286dc:	90800317 	ldw	r2,12(r18)
610286e0:	b8800515 	stw	r2,20(r23)
610286e4:	31404026 	beq	r6,r5,610287e8 <_realloc_r+0x5d8>
610286e8:	20800017 	ldw	r2,0(r4)
610286ec:	38800015 	stw	r2,0(r7)
610286f0:	20c00117 	ldw	r3,4(r4)
610286f4:	38c00115 	stw	r3,4(r7)
610286f8:	20800217 	ldw	r2,8(r4)
610286fc:	38800215 	stw	r2,8(r7)
61028700:	d8c00117 	ldw	r3,4(sp)
61028704:	bf0b883a 	add	r5,r23,fp
61028708:	b009883a 	mov	r4,r22
6102870c:	1f05c83a 	sub	r2,r3,fp
61028710:	10800054 	ori	r2,r2,1
61028714:	28800115 	stw	r2,4(r5)
61028718:	b8c00117 	ldw	r3,4(r23)
6102871c:	009840f4 	movhi	r2,24835
61028720:	10b93604 	addi	r2,r2,-6952
61028724:	11400215 	stw	r5,8(r2)
61028728:	18c0004c 	andi	r3,r3,1
6102872c:	e0c6b03a 	or	r3,fp,r3
61028730:	b8c00115 	stw	r3,4(r23)
61028734:	102b65c0 	call	6102b65c <__malloc_unlock>
61028738:	003eeb06 	br	610282e8 <_realloc_r+0xd8>
6102873c:	20800117 	ldw	r2,4(r4)
61028740:	00ffff04 	movi	r3,-4
61028744:	800f883a 	mov	r7,r16
61028748:	10c4703a 	and	r2,r2,r3
6102874c:	98a9883a 	add	r20,r19,r2
61028750:	84000204 	addi	r16,r16,8
61028754:	003ecf06 	br	61028294 <_realloc_r+0x84>
61028758:	900b883a 	mov	r5,r18
6102875c:	8009883a 	mov	r4,r16
61028760:	1026eb80 	call	61026eb8 <memmove>
61028764:	dd000017 	ldw	r20,0(sp)
61028768:	b80f883a 	mov	r7,r23
6102876c:	003ec906 	br	61028294 <_realloc_r+0x84>
61028770:	900b883a 	mov	r5,r18
61028774:	8009883a 	mov	r4,r16
61028778:	1026eb80 	call	61026eb8 <memmove>
6102877c:	b80f883a 	mov	r7,r23
61028780:	003ec406 	br	61028294 <_realloc_r+0x84>
61028784:	90c00417 	ldw	r3,16(r18)
61028788:	89400604 	addi	r5,r17,24
6102878c:	91000604 	addi	r4,r18,24
61028790:	88c00415 	stw	r3,16(r17)
61028794:	90800517 	ldw	r2,20(r18)
61028798:	88800515 	stw	r2,20(r17)
6102879c:	003f6806 	br	61028540 <_realloc_r+0x330>
610287a0:	900b883a 	mov	r5,r18
610287a4:	8809883a 	mov	r4,r17
610287a8:	1026eb80 	call	61026eb8 <memmove>
610287ac:	003fd406 	br	61028700 <_realloc_r+0x4f0>
610287b0:	90c00417 	ldw	r3,16(r18)
610287b4:	91000604 	addi	r4,r18,24
610287b8:	ba000804 	addi	r8,r23,32
610287bc:	b8c00615 	stw	r3,24(r23)
610287c0:	90800517 	ldw	r2,20(r18)
610287c4:	b8800715 	stw	r2,28(r23)
610287c8:	003f1206 	br	61028414 <_realloc_r+0x204>
610287cc:	90c00417 	ldw	r3,16(r18)
610287d0:	91000604 	addi	r4,r18,24
610287d4:	ba000804 	addi	r8,r23,32
610287d8:	b8c00615 	stw	r3,24(r23)
610287dc:	90800517 	ldw	r2,20(r18)
610287e0:	b8800715 	stw	r2,28(r23)
610287e4:	003f3206 	br	610284b0 <_realloc_r+0x2a0>
610287e8:	90c00417 	ldw	r3,16(r18)
610287ec:	91000604 	addi	r4,r18,24
610287f0:	b9c00804 	addi	r7,r23,32
610287f4:	b8c00615 	stw	r3,24(r23)
610287f8:	90800517 	ldw	r2,20(r18)
610287fc:	b8800715 	stw	r2,28(r23)
61028800:	003fb906 	br	610286e8 <_realloc_r+0x4d8>

61028804 <__isinfd>:
61028804:	200d883a 	mov	r6,r4
61028808:	0109c83a 	sub	r4,zero,r4
6102880c:	2188b03a 	or	r4,r4,r6
61028810:	2008d7fa 	srli	r4,r4,31
61028814:	00a00034 	movhi	r2,32768
61028818:	10bfffc4 	addi	r2,r2,-1
6102881c:	1144703a 	and	r2,r2,r5
61028820:	2088b03a 	or	r4,r4,r2
61028824:	009ffc34 	movhi	r2,32752
61028828:	1105c83a 	sub	r2,r2,r4
6102882c:	0087c83a 	sub	r3,zero,r2
61028830:	10c4b03a 	or	r2,r2,r3
61028834:	1004d7fa 	srli	r2,r2,31
61028838:	00c00044 	movi	r3,1
6102883c:	1885c83a 	sub	r2,r3,r2
61028840:	f800283a 	ret

61028844 <__isnand>:
61028844:	200d883a 	mov	r6,r4
61028848:	0109c83a 	sub	r4,zero,r4
6102884c:	2188b03a 	or	r4,r4,r6
61028850:	2008d7fa 	srli	r4,r4,31
61028854:	00a00034 	movhi	r2,32768
61028858:	10bfffc4 	addi	r2,r2,-1
6102885c:	1144703a 	and	r2,r2,r5
61028860:	2088b03a 	or	r4,r4,r2
61028864:	009ffc34 	movhi	r2,32752
61028868:	1105c83a 	sub	r2,r2,r4
6102886c:	1004d7fa 	srli	r2,r2,31
61028870:	f800283a 	ret

61028874 <_sbrk_r>:
61028874:	defffd04 	addi	sp,sp,-12
61028878:	dc000015 	stw	r16,0(sp)
6102887c:	041840f4 	movhi	r16,24835
61028880:	84056704 	addi	r16,r16,5532
61028884:	dc400115 	stw	r17,4(sp)
61028888:	80000015 	stw	zero,0(r16)
6102888c:	2023883a 	mov	r17,r4
61028890:	2809883a 	mov	r4,r5
61028894:	dfc00215 	stw	ra,8(sp)
61028898:	102b85c0 	call	6102b85c <sbrk>
6102889c:	1007883a 	mov	r3,r2
610288a0:	00bfffc4 	movi	r2,-1
610288a4:	18800626 	beq	r3,r2,610288c0 <_sbrk_r+0x4c>
610288a8:	1805883a 	mov	r2,r3
610288ac:	dfc00217 	ldw	ra,8(sp)
610288b0:	dc400117 	ldw	r17,4(sp)
610288b4:	dc000017 	ldw	r16,0(sp)
610288b8:	dec00304 	addi	sp,sp,12
610288bc:	f800283a 	ret
610288c0:	80800017 	ldw	r2,0(r16)
610288c4:	103ff826 	beq	r2,zero,610288a8 <_sbrk_r+0x34>
610288c8:	88800015 	stw	r2,0(r17)
610288cc:	1805883a 	mov	r2,r3
610288d0:	dfc00217 	ldw	ra,8(sp)
610288d4:	dc400117 	ldw	r17,4(sp)
610288d8:	dc000017 	ldw	r16,0(sp)
610288dc:	dec00304 	addi	sp,sp,12
610288e0:	f800283a 	ret

610288e4 <__sclose>:
610288e4:	2940038f 	ldh	r5,14(r5)
610288e8:	1028d641 	jmpi	61028d64 <_close_r>

610288ec <__sseek>:
610288ec:	defffe04 	addi	sp,sp,-8
610288f0:	dc000015 	stw	r16,0(sp)
610288f4:	2821883a 	mov	r16,r5
610288f8:	2940038f 	ldh	r5,14(r5)
610288fc:	dfc00115 	stw	ra,4(sp)
61028900:	1028fdc0 	call	61028fdc <_lseek_r>
61028904:	1007883a 	mov	r3,r2
61028908:	00bfffc4 	movi	r2,-1
6102890c:	18800926 	beq	r3,r2,61028934 <__sseek+0x48>
61028910:	8080030b 	ldhu	r2,12(r16)
61028914:	80c01415 	stw	r3,80(r16)
61028918:	10840014 	ori	r2,r2,4096
6102891c:	8080030d 	sth	r2,12(r16)
61028920:	1805883a 	mov	r2,r3
61028924:	dfc00117 	ldw	ra,4(sp)
61028928:	dc000017 	ldw	r16,0(sp)
6102892c:	dec00204 	addi	sp,sp,8
61028930:	f800283a 	ret
61028934:	8080030b 	ldhu	r2,12(r16)
61028938:	10bbffcc 	andi	r2,r2,61439
6102893c:	8080030d 	sth	r2,12(r16)
61028940:	1805883a 	mov	r2,r3
61028944:	dfc00117 	ldw	ra,4(sp)
61028948:	dc000017 	ldw	r16,0(sp)
6102894c:	dec00204 	addi	sp,sp,8
61028950:	f800283a 	ret

61028954 <__swrite>:
61028954:	2880030b 	ldhu	r2,12(r5)
61028958:	defffb04 	addi	sp,sp,-20
6102895c:	dcc00315 	stw	r19,12(sp)
61028960:	1080400c 	andi	r2,r2,256
61028964:	dc800215 	stw	r18,8(sp)
61028968:	dc400115 	stw	r17,4(sp)
6102896c:	dc000015 	stw	r16,0(sp)
61028970:	3027883a 	mov	r19,r6
61028974:	3825883a 	mov	r18,r7
61028978:	dfc00415 	stw	ra,16(sp)
6102897c:	2821883a 	mov	r16,r5
61028980:	000d883a 	mov	r6,zero
61028984:	01c00084 	movi	r7,2
61028988:	2023883a 	mov	r17,r4
6102898c:	10000226 	beq	r2,zero,61028998 <__swrite+0x44>
61028990:	2940038f 	ldh	r5,14(r5)
61028994:	1028fdc0 	call	61028fdc <_lseek_r>
61028998:	8080030b 	ldhu	r2,12(r16)
6102899c:	8140038f 	ldh	r5,14(r16)
610289a0:	8809883a 	mov	r4,r17
610289a4:	10bbffcc 	andi	r2,r2,61439
610289a8:	980d883a 	mov	r6,r19
610289ac:	900f883a 	mov	r7,r18
610289b0:	8080030d 	sth	r2,12(r16)
610289b4:	dfc00417 	ldw	ra,16(sp)
610289b8:	dcc00317 	ldw	r19,12(sp)
610289bc:	dc800217 	ldw	r18,8(sp)
610289c0:	dc400117 	ldw	r17,4(sp)
610289c4:	dc000017 	ldw	r16,0(sp)
610289c8:	dec00504 	addi	sp,sp,20
610289cc:	1028c381 	jmpi	61028c38 <_write_r>

610289d0 <__sread>:
610289d0:	defffe04 	addi	sp,sp,-8
610289d4:	dc000015 	stw	r16,0(sp)
610289d8:	2821883a 	mov	r16,r5
610289dc:	2940038f 	ldh	r5,14(r5)
610289e0:	dfc00115 	stw	ra,4(sp)
610289e4:	10290540 	call	61029054 <_read_r>
610289e8:	1007883a 	mov	r3,r2
610289ec:	10000816 	blt	r2,zero,61028a10 <__sread+0x40>
610289f0:	80801417 	ldw	r2,80(r16)
610289f4:	10c5883a 	add	r2,r2,r3
610289f8:	80801415 	stw	r2,80(r16)
610289fc:	1805883a 	mov	r2,r3
61028a00:	dfc00117 	ldw	ra,4(sp)
61028a04:	dc000017 	ldw	r16,0(sp)
61028a08:	dec00204 	addi	sp,sp,8
61028a0c:	f800283a 	ret
61028a10:	8080030b 	ldhu	r2,12(r16)
61028a14:	10bbffcc 	andi	r2,r2,61439
61028a18:	8080030d 	sth	r2,12(r16)
61028a1c:	1805883a 	mov	r2,r3
61028a20:	dfc00117 	ldw	ra,4(sp)
61028a24:	dc000017 	ldw	r16,0(sp)
61028a28:	dec00204 	addi	sp,sp,8
61028a2c:	f800283a 	ret

61028a30 <strcmp>:
61028a30:	2144b03a 	or	r2,r4,r5
61028a34:	108000cc 	andi	r2,r2,3
61028a38:	10001d1e 	bne	r2,zero,61028ab0 <strcmp+0x80>
61028a3c:	200f883a 	mov	r7,r4
61028a40:	28800017 	ldw	r2,0(r5)
61028a44:	21000017 	ldw	r4,0(r4)
61028a48:	280d883a 	mov	r6,r5
61028a4c:	2080161e 	bne	r4,r2,61028aa8 <strcmp+0x78>
61028a50:	023fbff4 	movhi	r8,65279
61028a54:	423fbfc4 	addi	r8,r8,-257
61028a58:	2207883a 	add	r3,r4,r8
61028a5c:	01602074 	movhi	r5,32897
61028a60:	29602004 	addi	r5,r5,-32640
61028a64:	1946703a 	and	r3,r3,r5
61028a68:	0104303a 	nor	r2,zero,r4
61028a6c:	10c4703a 	and	r2,r2,r3
61028a70:	10001c1e 	bne	r2,zero,61028ae4 <strcmp+0xb4>
61028a74:	4013883a 	mov	r9,r8
61028a78:	2811883a 	mov	r8,r5
61028a7c:	00000106 	br	61028a84 <strcmp+0x54>
61028a80:	1800181e 	bne	r3,zero,61028ae4 <strcmp+0xb4>
61028a84:	39c00104 	addi	r7,r7,4
61028a88:	39000017 	ldw	r4,0(r7)
61028a8c:	31800104 	addi	r6,r6,4
61028a90:	31400017 	ldw	r5,0(r6)
61028a94:	2245883a 	add	r2,r4,r9
61028a98:	1204703a 	and	r2,r2,r8
61028a9c:	0106303a 	nor	r3,zero,r4
61028aa0:	1886703a 	and	r3,r3,r2
61028aa4:	217ff626 	beq	r4,r5,61028a80 <strcmp+0x50>
61028aa8:	3809883a 	mov	r4,r7
61028aac:	300b883a 	mov	r5,r6
61028ab0:	20c00007 	ldb	r3,0(r4)
61028ab4:	1800051e 	bne	r3,zero,61028acc <strcmp+0x9c>
61028ab8:	00000606 	br	61028ad4 <strcmp+0xa4>
61028abc:	21000044 	addi	r4,r4,1
61028ac0:	20c00007 	ldb	r3,0(r4)
61028ac4:	29400044 	addi	r5,r5,1
61028ac8:	18000226 	beq	r3,zero,61028ad4 <strcmp+0xa4>
61028acc:	28800007 	ldb	r2,0(r5)
61028ad0:	18bffa26 	beq	r3,r2,61028abc <strcmp+0x8c>
61028ad4:	20c00003 	ldbu	r3,0(r4)
61028ad8:	28800003 	ldbu	r2,0(r5)
61028adc:	1885c83a 	sub	r2,r3,r2
61028ae0:	f800283a 	ret
61028ae4:	0005883a 	mov	r2,zero
61028ae8:	f800283a 	ret

61028aec <__swbuf_r>:
61028aec:	defffc04 	addi	sp,sp,-16
61028af0:	dc400215 	stw	r17,8(sp)
61028af4:	dc000115 	stw	r16,4(sp)
61028af8:	dfc00315 	stw	ra,12(sp)
61028afc:	2023883a 	mov	r17,r4
61028b00:	2821883a 	mov	r16,r5
61028b04:	20000226 	beq	r4,zero,61028b10 <__swbuf_r+0x24>
61028b08:	20800e17 	ldw	r2,56(r4)
61028b0c:	10002f26 	beq	r2,zero,61028bcc <__swbuf_r+0xe0>
61028b10:	3080030b 	ldhu	r2,12(r6)
61028b14:	30c00617 	ldw	r3,24(r6)
61028b18:	1080020c 	andi	r2,r2,8
61028b1c:	30c00215 	stw	r3,8(r6)
61028b20:	10002226 	beq	r2,zero,61028bac <__swbuf_r+0xc0>
61028b24:	30c00417 	ldw	r3,16(r6)
61028b28:	18002026 	beq	r3,zero,61028bac <__swbuf_r+0xc0>
61028b2c:	31000017 	ldw	r4,0(r6)
61028b30:	30800517 	ldw	r2,20(r6)
61028b34:	20c7c83a 	sub	r3,r4,r3
61028b38:	18802f0e 	bge	r3,r2,61028bf8 <__swbuf_r+0x10c>
61028b3c:	19400044 	addi	r5,r3,1
61028b40:	30800217 	ldw	r2,8(r6)
61028b44:	84003fcc 	andi	r16,r16,255
61028b48:	20c00044 	addi	r3,r4,1
61028b4c:	10bfffc4 	addi	r2,r2,-1
61028b50:	30800215 	stw	r2,8(r6)
61028b54:	24000005 	stb	r16,0(r4)
61028b58:	30800517 	ldw	r2,20(r6)
61028b5c:	30c00015 	stw	r3,0(r6)
61028b60:	11400c26 	beq	r2,r5,61028b94 <__swbuf_r+0xa8>
61028b64:	3080030b 	ldhu	r2,12(r6)
61028b68:	1080004c 	andi	r2,r2,1
61028b6c:	1005003a 	cmpeq	r2,r2,zero
61028b70:	10000626 	beq	r2,zero,61028b8c <__swbuf_r+0xa0>
61028b74:	8005883a 	mov	r2,r16
61028b78:	dfc00317 	ldw	ra,12(sp)
61028b7c:	dc400217 	ldw	r17,8(sp)
61028b80:	dc000117 	ldw	r16,4(sp)
61028b84:	dec00404 	addi	sp,sp,16
61028b88:	f800283a 	ret
61028b8c:	00800284 	movi	r2,10
61028b90:	80bff81e 	bne	r16,r2,61028b74 <__swbuf_r+0x88>
61028b94:	8809883a 	mov	r4,r17
61028b98:	300b883a 	mov	r5,r6
61028b9c:	10254f00 	call	610254f0 <_fflush_r>
61028ba0:	103ff426 	beq	r2,zero,61028b74 <__swbuf_r+0x88>
61028ba4:	043fffc4 	movi	r16,-1
61028ba8:	003ff206 	br	61028b74 <__swbuf_r+0x88>
61028bac:	300b883a 	mov	r5,r6
61028bb0:	8809883a 	mov	r4,r17
61028bb4:	d9800015 	stw	r6,0(sp)
61028bb8:	1023be80 	call	61023be8 <__swsetup_r>
61028bbc:	d9800017 	ldw	r6,0(sp)
61028bc0:	1000061e 	bne	r2,zero,61028bdc <__swbuf_r+0xf0>
61028bc4:	30c00417 	ldw	r3,16(r6)
61028bc8:	003fd806 	br	61028b2c <__swbuf_r+0x40>
61028bcc:	d9800015 	stw	r6,0(sp)
61028bd0:	10257880 	call	61025788 <__sinit>
61028bd4:	d9800017 	ldw	r6,0(sp)
61028bd8:	003fcd06 	br	61028b10 <__swbuf_r+0x24>
61028bdc:	3080030b 	ldhu	r2,12(r6)
61028be0:	00c00244 	movi	r3,9
61028be4:	043fffc4 	movi	r16,-1
61028be8:	10801014 	ori	r2,r2,64
61028bec:	3080030d 	sth	r2,12(r6)
61028bf0:	88c00015 	stw	r3,0(r17)
61028bf4:	003fdf06 	br	61028b74 <__swbuf_r+0x88>
61028bf8:	300b883a 	mov	r5,r6
61028bfc:	8809883a 	mov	r4,r17
61028c00:	d9800015 	stw	r6,0(sp)
61028c04:	10254f00 	call	610254f0 <_fflush_r>
61028c08:	d9800017 	ldw	r6,0(sp)
61028c0c:	103fe51e 	bne	r2,zero,61028ba4 <__swbuf_r+0xb8>
61028c10:	31000017 	ldw	r4,0(r6)
61028c14:	01400044 	movi	r5,1
61028c18:	003fc906 	br	61028b40 <__swbuf_r+0x54>

61028c1c <__swbuf>:
61028c1c:	019840f4 	movhi	r6,24835
61028c20:	31beba04 	addi	r6,r6,-1304
61028c24:	2007883a 	mov	r3,r4
61028c28:	31000017 	ldw	r4,0(r6)
61028c2c:	280d883a 	mov	r6,r5
61028c30:	180b883a 	mov	r5,r3
61028c34:	1028aec1 	jmpi	61028aec <__swbuf_r>

61028c38 <_write_r>:
61028c38:	defffd04 	addi	sp,sp,-12
61028c3c:	dc000015 	stw	r16,0(sp)
61028c40:	041840f4 	movhi	r16,24835
61028c44:	84056704 	addi	r16,r16,5532
61028c48:	dc400115 	stw	r17,4(sp)
61028c4c:	80000015 	stw	zero,0(r16)
61028c50:	2023883a 	mov	r17,r4
61028c54:	2809883a 	mov	r4,r5
61028c58:	300b883a 	mov	r5,r6
61028c5c:	380d883a 	mov	r6,r7
61028c60:	dfc00215 	stw	ra,8(sp)
61028c64:	102baec0 	call	6102baec <write>
61028c68:	1007883a 	mov	r3,r2
61028c6c:	00bfffc4 	movi	r2,-1
61028c70:	18800626 	beq	r3,r2,61028c8c <_write_r+0x54>
61028c74:	1805883a 	mov	r2,r3
61028c78:	dfc00217 	ldw	ra,8(sp)
61028c7c:	dc400117 	ldw	r17,4(sp)
61028c80:	dc000017 	ldw	r16,0(sp)
61028c84:	dec00304 	addi	sp,sp,12
61028c88:	f800283a 	ret
61028c8c:	80800017 	ldw	r2,0(r16)
61028c90:	103ff826 	beq	r2,zero,61028c74 <_write_r+0x3c>
61028c94:	88800015 	stw	r2,0(r17)
61028c98:	1805883a 	mov	r2,r3
61028c9c:	dfc00217 	ldw	ra,8(sp)
61028ca0:	dc400117 	ldw	r17,4(sp)
61028ca4:	dc000017 	ldw	r16,0(sp)
61028ca8:	dec00304 	addi	sp,sp,12
61028cac:	f800283a 	ret

61028cb0 <_calloc_r>:
61028cb0:	298b383a 	mul	r5,r5,r6
61028cb4:	defffe04 	addi	sp,sp,-8
61028cb8:	dc000015 	stw	r16,0(sp)
61028cbc:	dfc00115 	stw	ra,4(sp)
61028cc0:	10266940 	call	61026694 <_malloc_r>
61028cc4:	1021883a 	mov	r16,r2
61028cc8:	01c00904 	movi	r7,36
61028ccc:	10000d26 	beq	r2,zero,61028d04 <_calloc_r+0x54>
61028cd0:	10ffff17 	ldw	r3,-4(r2)
61028cd4:	1009883a 	mov	r4,r2
61028cd8:	00bfff04 	movi	r2,-4
61028cdc:	1886703a 	and	r3,r3,r2
61028ce0:	1887883a 	add	r3,r3,r2
61028ce4:	180d883a 	mov	r6,r3
61028ce8:	000b883a 	mov	r5,zero
61028cec:	38c01736 	bltu	r7,r3,61028d4c <_calloc_r+0x9c>
61028cf0:	008004c4 	movi	r2,19
61028cf4:	10c00836 	bltu	r2,r3,61028d18 <_calloc_r+0x68>
61028cf8:	20000215 	stw	zero,8(r4)
61028cfc:	20000015 	stw	zero,0(r4)
61028d00:	20000115 	stw	zero,4(r4)
61028d04:	8005883a 	mov	r2,r16
61028d08:	dfc00117 	ldw	ra,4(sp)
61028d0c:	dc000017 	ldw	r16,0(sp)
61028d10:	dec00204 	addi	sp,sp,8
61028d14:	f800283a 	ret
61028d18:	008006c4 	movi	r2,27
61028d1c:	80000015 	stw	zero,0(r16)
61028d20:	80000115 	stw	zero,4(r16)
61028d24:	81000204 	addi	r4,r16,8
61028d28:	10fff32e 	bgeu	r2,r3,61028cf8 <_calloc_r+0x48>
61028d2c:	80000215 	stw	zero,8(r16)
61028d30:	80000315 	stw	zero,12(r16)
61028d34:	81000404 	addi	r4,r16,16
61028d38:	19ffef1e 	bne	r3,r7,61028cf8 <_calloc_r+0x48>
61028d3c:	81000604 	addi	r4,r16,24
61028d40:	80000415 	stw	zero,16(r16)
61028d44:	80000515 	stw	zero,20(r16)
61028d48:	003feb06 	br	61028cf8 <_calloc_r+0x48>
61028d4c:	1026f980 	call	61026f98 <memset>
61028d50:	8005883a 	mov	r2,r16
61028d54:	dfc00117 	ldw	ra,4(sp)
61028d58:	dc000017 	ldw	r16,0(sp)
61028d5c:	dec00204 	addi	sp,sp,8
61028d60:	f800283a 	ret

61028d64 <_close_r>:
61028d64:	defffd04 	addi	sp,sp,-12
61028d68:	dc000015 	stw	r16,0(sp)
61028d6c:	041840f4 	movhi	r16,24835
61028d70:	84056704 	addi	r16,r16,5532
61028d74:	dc400115 	stw	r17,4(sp)
61028d78:	80000015 	stw	zero,0(r16)
61028d7c:	2023883a 	mov	r17,r4
61028d80:	2809883a 	mov	r4,r5
61028d84:	dfc00215 	stw	ra,8(sp)
61028d88:	102af740 	call	6102af74 <close>
61028d8c:	1007883a 	mov	r3,r2
61028d90:	00bfffc4 	movi	r2,-1
61028d94:	18800626 	beq	r3,r2,61028db0 <_close_r+0x4c>
61028d98:	1805883a 	mov	r2,r3
61028d9c:	dfc00217 	ldw	ra,8(sp)
61028da0:	dc400117 	ldw	r17,4(sp)
61028da4:	dc000017 	ldw	r16,0(sp)
61028da8:	dec00304 	addi	sp,sp,12
61028dac:	f800283a 	ret
61028db0:	80800017 	ldw	r2,0(r16)
61028db4:	103ff826 	beq	r2,zero,61028d98 <_close_r+0x34>
61028db8:	88800015 	stw	r2,0(r17)
61028dbc:	1805883a 	mov	r2,r3
61028dc0:	dfc00217 	ldw	ra,8(sp)
61028dc4:	dc400117 	ldw	r17,4(sp)
61028dc8:	dc000017 	ldw	r16,0(sp)
61028dcc:	dec00304 	addi	sp,sp,12
61028dd0:	f800283a 	ret

61028dd4 <_fclose_r>:
61028dd4:	defffc04 	addi	sp,sp,-16
61028dd8:	dc400115 	stw	r17,4(sp)
61028ddc:	dc000015 	stw	r16,0(sp)
61028de0:	dfc00315 	stw	ra,12(sp)
61028de4:	dc800215 	stw	r18,8(sp)
61028de8:	2821883a 	mov	r16,r5
61028dec:	2023883a 	mov	r17,r4
61028df0:	28002926 	beq	r5,zero,61028e98 <_fclose_r+0xc4>
61028df4:	10257780 	call	61025778 <__sfp_lock_acquire>
61028df8:	88000226 	beq	r17,zero,61028e04 <_fclose_r+0x30>
61028dfc:	88800e17 	ldw	r2,56(r17)
61028e00:	10002d26 	beq	r2,zero,61028eb8 <_fclose_r+0xe4>
61028e04:	8080030f 	ldh	r2,12(r16)
61028e08:	10002226 	beq	r2,zero,61028e94 <_fclose_r+0xc0>
61028e0c:	8809883a 	mov	r4,r17
61028e10:	800b883a 	mov	r5,r16
61028e14:	10254f00 	call	610254f0 <_fflush_r>
61028e18:	1025883a 	mov	r18,r2
61028e1c:	80800b17 	ldw	r2,44(r16)
61028e20:	10000426 	beq	r2,zero,61028e34 <_fclose_r+0x60>
61028e24:	81400717 	ldw	r5,28(r16)
61028e28:	8809883a 	mov	r4,r17
61028e2c:	103ee83a 	callr	r2
61028e30:	10002a16 	blt	r2,zero,61028edc <_fclose_r+0x108>
61028e34:	8080030b 	ldhu	r2,12(r16)
61028e38:	1080200c 	andi	r2,r2,128
61028e3c:	1000231e 	bne	r2,zero,61028ecc <_fclose_r+0xf8>
61028e40:	81400c17 	ldw	r5,48(r16)
61028e44:	28000526 	beq	r5,zero,61028e5c <_fclose_r+0x88>
61028e48:	80801004 	addi	r2,r16,64
61028e4c:	28800226 	beq	r5,r2,61028e58 <_fclose_r+0x84>
61028e50:	8809883a 	mov	r4,r17
61028e54:	1025b0c0 	call	61025b0c <_free_r>
61028e58:	80000c15 	stw	zero,48(r16)
61028e5c:	81401117 	ldw	r5,68(r16)
61028e60:	28000326 	beq	r5,zero,61028e70 <_fclose_r+0x9c>
61028e64:	8809883a 	mov	r4,r17
61028e68:	1025b0c0 	call	61025b0c <_free_r>
61028e6c:	80001115 	stw	zero,68(r16)
61028e70:	8000030d 	sth	zero,12(r16)
61028e74:	102577c0 	call	6102577c <__sfp_lock_release>
61028e78:	9005883a 	mov	r2,r18
61028e7c:	dfc00317 	ldw	ra,12(sp)
61028e80:	dc800217 	ldw	r18,8(sp)
61028e84:	dc400117 	ldw	r17,4(sp)
61028e88:	dc000017 	ldw	r16,0(sp)
61028e8c:	dec00404 	addi	sp,sp,16
61028e90:	f800283a 	ret
61028e94:	102577c0 	call	6102577c <__sfp_lock_release>
61028e98:	0025883a 	mov	r18,zero
61028e9c:	9005883a 	mov	r2,r18
61028ea0:	dfc00317 	ldw	ra,12(sp)
61028ea4:	dc800217 	ldw	r18,8(sp)
61028ea8:	dc400117 	ldw	r17,4(sp)
61028eac:	dc000017 	ldw	r16,0(sp)
61028eb0:	dec00404 	addi	sp,sp,16
61028eb4:	f800283a 	ret
61028eb8:	8809883a 	mov	r4,r17
61028ebc:	10257880 	call	61025788 <__sinit>
61028ec0:	8080030f 	ldh	r2,12(r16)
61028ec4:	103fd11e 	bne	r2,zero,61028e0c <_fclose_r+0x38>
61028ec8:	003ff206 	br	61028e94 <_fclose_r+0xc0>
61028ecc:	81400417 	ldw	r5,16(r16)
61028ed0:	8809883a 	mov	r4,r17
61028ed4:	1025b0c0 	call	61025b0c <_free_r>
61028ed8:	003fd906 	br	61028e40 <_fclose_r+0x6c>
61028edc:	04bfffc4 	movi	r18,-1
61028ee0:	003fd406 	br	61028e34 <_fclose_r+0x60>

61028ee4 <fclose>:
61028ee4:	009840f4 	movhi	r2,24835
61028ee8:	10beba04 	addi	r2,r2,-1304
61028eec:	200b883a 	mov	r5,r4
61028ef0:	11000017 	ldw	r4,0(r2)
61028ef4:	1028dd41 	jmpi	61028dd4 <_fclose_r>

61028ef8 <_fstat_r>:
61028ef8:	defffd04 	addi	sp,sp,-12
61028efc:	dc000015 	stw	r16,0(sp)
61028f00:	041840f4 	movhi	r16,24835
61028f04:	84056704 	addi	r16,r16,5532
61028f08:	dc400115 	stw	r17,4(sp)
61028f0c:	80000015 	stw	zero,0(r16)
61028f10:	2023883a 	mov	r17,r4
61028f14:	2809883a 	mov	r4,r5
61028f18:	300b883a 	mov	r5,r6
61028f1c:	dfc00215 	stw	ra,8(sp)
61028f20:	102b1400 	call	6102b140 <fstat>
61028f24:	1007883a 	mov	r3,r2
61028f28:	00bfffc4 	movi	r2,-1
61028f2c:	18800626 	beq	r3,r2,61028f48 <_fstat_r+0x50>
61028f30:	1805883a 	mov	r2,r3
61028f34:	dfc00217 	ldw	ra,8(sp)
61028f38:	dc400117 	ldw	r17,4(sp)
61028f3c:	dc000017 	ldw	r16,0(sp)
61028f40:	dec00304 	addi	sp,sp,12
61028f44:	f800283a 	ret
61028f48:	80800017 	ldw	r2,0(r16)
61028f4c:	103ff826 	beq	r2,zero,61028f30 <_fstat_r+0x38>
61028f50:	88800015 	stw	r2,0(r17)
61028f54:	1805883a 	mov	r2,r3
61028f58:	dfc00217 	ldw	ra,8(sp)
61028f5c:	dc400117 	ldw	r17,4(sp)
61028f60:	dc000017 	ldw	r16,0(sp)
61028f64:	dec00304 	addi	sp,sp,12
61028f68:	f800283a 	ret

61028f6c <_isatty_r>:
61028f6c:	defffd04 	addi	sp,sp,-12
61028f70:	dc000015 	stw	r16,0(sp)
61028f74:	041840f4 	movhi	r16,24835
61028f78:	84056704 	addi	r16,r16,5532
61028f7c:	dc400115 	stw	r17,4(sp)
61028f80:	80000015 	stw	zero,0(r16)
61028f84:	2023883a 	mov	r17,r4
61028f88:	2809883a 	mov	r4,r5
61028f8c:	dfc00215 	stw	ra,8(sp)
61028f90:	102b2740 	call	6102b274 <isatty>
61028f94:	1007883a 	mov	r3,r2
61028f98:	00bfffc4 	movi	r2,-1
61028f9c:	18800626 	beq	r3,r2,61028fb8 <_isatty_r+0x4c>
61028fa0:	1805883a 	mov	r2,r3
61028fa4:	dfc00217 	ldw	ra,8(sp)
61028fa8:	dc400117 	ldw	r17,4(sp)
61028fac:	dc000017 	ldw	r16,0(sp)
61028fb0:	dec00304 	addi	sp,sp,12
61028fb4:	f800283a 	ret
61028fb8:	80800017 	ldw	r2,0(r16)
61028fbc:	103ff826 	beq	r2,zero,61028fa0 <_isatty_r+0x34>
61028fc0:	88800015 	stw	r2,0(r17)
61028fc4:	1805883a 	mov	r2,r3
61028fc8:	dfc00217 	ldw	ra,8(sp)
61028fcc:	dc400117 	ldw	r17,4(sp)
61028fd0:	dc000017 	ldw	r16,0(sp)
61028fd4:	dec00304 	addi	sp,sp,12
61028fd8:	f800283a 	ret

61028fdc <_lseek_r>:
61028fdc:	defffd04 	addi	sp,sp,-12
61028fe0:	dc000015 	stw	r16,0(sp)
61028fe4:	041840f4 	movhi	r16,24835
61028fe8:	84056704 	addi	r16,r16,5532
61028fec:	dc400115 	stw	r17,4(sp)
61028ff0:	80000015 	stw	zero,0(r16)
61028ff4:	2023883a 	mov	r17,r4
61028ff8:	2809883a 	mov	r4,r5
61028ffc:	300b883a 	mov	r5,r6
61029000:	380d883a 	mov	r6,r7
61029004:	dfc00215 	stw	ra,8(sp)
61029008:	102b4800 	call	6102b480 <lseek>
6102900c:	1007883a 	mov	r3,r2
61029010:	00bfffc4 	movi	r2,-1
61029014:	18800626 	beq	r3,r2,61029030 <_lseek_r+0x54>
61029018:	1805883a 	mov	r2,r3
6102901c:	dfc00217 	ldw	ra,8(sp)
61029020:	dc400117 	ldw	r17,4(sp)
61029024:	dc000017 	ldw	r16,0(sp)
61029028:	dec00304 	addi	sp,sp,12
6102902c:	f800283a 	ret
61029030:	80800017 	ldw	r2,0(r16)
61029034:	103ff826 	beq	r2,zero,61029018 <_lseek_r+0x3c>
61029038:	88800015 	stw	r2,0(r17)
6102903c:	1805883a 	mov	r2,r3
61029040:	dfc00217 	ldw	ra,8(sp)
61029044:	dc400117 	ldw	r17,4(sp)
61029048:	dc000017 	ldw	r16,0(sp)
6102904c:	dec00304 	addi	sp,sp,12
61029050:	f800283a 	ret

61029054 <_read_r>:
61029054:	defffd04 	addi	sp,sp,-12
61029058:	dc000015 	stw	r16,0(sp)
6102905c:	041840f4 	movhi	r16,24835
61029060:	84056704 	addi	r16,r16,5532
61029064:	dc400115 	stw	r17,4(sp)
61029068:	80000015 	stw	zero,0(r16)
6102906c:	2023883a 	mov	r17,r4
61029070:	2809883a 	mov	r4,r5
61029074:	300b883a 	mov	r5,r6
61029078:	380d883a 	mov	r6,r7
6102907c:	dfc00215 	stw	ra,8(sp)
61029080:	102b67c0 	call	6102b67c <read>
61029084:	1007883a 	mov	r3,r2
61029088:	00bfffc4 	movi	r2,-1
6102908c:	18800626 	beq	r3,r2,610290a8 <_read_r+0x54>
61029090:	1805883a 	mov	r2,r3
61029094:	dfc00217 	ldw	ra,8(sp)
61029098:	dc400117 	ldw	r17,4(sp)
6102909c:	dc000017 	ldw	r16,0(sp)
610290a0:	dec00304 	addi	sp,sp,12
610290a4:	f800283a 	ret
610290a8:	80800017 	ldw	r2,0(r16)
610290ac:	103ff826 	beq	r2,zero,61029090 <_read_r+0x3c>
610290b0:	88800015 	stw	r2,0(r17)
610290b4:	1805883a 	mov	r2,r3
610290b8:	dfc00217 	ldw	ra,8(sp)
610290bc:	dc400117 	ldw	r17,4(sp)
610290c0:	dc000017 	ldw	r16,0(sp)
610290c4:	dec00304 	addi	sp,sp,12
610290c8:	f800283a 	ret

610290cc <__udivdi3>:
610290cc:	defff004 	addi	sp,sp,-64
610290d0:	2005883a 	mov	r2,r4
610290d4:	3011883a 	mov	r8,r6
610290d8:	df000e15 	stw	fp,56(sp)
610290dc:	dd000a15 	stw	r20,40(sp)
610290e0:	dc000615 	stw	r16,24(sp)
610290e4:	dfc00f15 	stw	ra,60(sp)
610290e8:	ddc00d15 	stw	r23,52(sp)
610290ec:	dd800c15 	stw	r22,48(sp)
610290f0:	dd400b15 	stw	r21,44(sp)
610290f4:	dcc00915 	stw	r19,36(sp)
610290f8:	dc800815 	stw	r18,32(sp)
610290fc:	dc400715 	stw	r17,28(sp)
61029100:	4021883a 	mov	r16,r8
61029104:	1039883a 	mov	fp,r2
61029108:	2829883a 	mov	r20,r5
6102910c:	38003b1e 	bne	r7,zero,610291fc <__udivdi3+0x130>
61029110:	2a005c36 	bltu	r5,r8,61029284 <__udivdi3+0x1b8>
61029114:	4000a626 	beq	r8,zero,610293b0 <__udivdi3+0x2e4>
61029118:	00bfffd4 	movui	r2,65535
6102911c:	14009e36 	bltu	r2,r16,61029398 <__udivdi3+0x2cc>
61029120:	00803fc4 	movi	r2,255
61029124:	14013d36 	bltu	r2,r16,6102961c <__udivdi3+0x550>
61029128:	000b883a 	mov	r5,zero
6102912c:	0005883a 	mov	r2,zero
61029130:	8084d83a 	srl	r2,r16,r2
61029134:	011840f4 	movhi	r4,24835
61029138:	21376404 	addi	r4,r4,-8816
6102913c:	01800804 	movi	r6,32
61029140:	1105883a 	add	r2,r2,r4
61029144:	10c00003 	ldbu	r3,0(r2)
61029148:	28c7883a 	add	r3,r5,r3
6102914c:	30edc83a 	sub	r22,r6,r3
61029150:	b000ee1e 	bne	r22,zero,6102950c <__udivdi3+0x440>
61029154:	802ad43a 	srli	r21,r16,16
61029158:	00800044 	movi	r2,1
6102915c:	a423c83a 	sub	r17,r20,r16
61029160:	85ffffcc 	andi	r23,r16,65535
61029164:	d8800315 	stw	r2,12(sp)
61029168:	8809883a 	mov	r4,r17
6102916c:	a80b883a 	mov	r5,r21
61029170:	10214900 	call	61021490 <__udivsi3>
61029174:	8809883a 	mov	r4,r17
61029178:	a80b883a 	mov	r5,r21
6102917c:	102d883a 	mov	r22,r2
61029180:	10214980 	call	61021498 <__umodsi3>
61029184:	1004943a 	slli	r2,r2,16
61029188:	e006d43a 	srli	r3,fp,16
6102918c:	bda3383a 	mul	r17,r23,r22
61029190:	10c4b03a 	or	r2,r2,r3
61029194:	1440042e 	bgeu	r2,r17,610291a8 <__udivdi3+0xdc>
61029198:	1405883a 	add	r2,r2,r16
6102919c:	b5bfffc4 	addi	r22,r22,-1
610291a0:	14000136 	bltu	r2,r16,610291a8 <__udivdi3+0xdc>
610291a4:	14413d36 	bltu	r2,r17,6102969c <__udivdi3+0x5d0>
610291a8:	1463c83a 	sub	r17,r2,r17
610291ac:	8809883a 	mov	r4,r17
610291b0:	a80b883a 	mov	r5,r21
610291b4:	10214900 	call	61021490 <__udivsi3>
610291b8:	8809883a 	mov	r4,r17
610291bc:	a80b883a 	mov	r5,r21
610291c0:	1029883a 	mov	r20,r2
610291c4:	10214980 	call	61021498 <__umodsi3>
610291c8:	1004943a 	slli	r2,r2,16
610291cc:	bd09383a 	mul	r4,r23,r20
610291d0:	e0ffffcc 	andi	r3,fp,65535
610291d4:	10c4b03a 	or	r2,r2,r3
610291d8:	1100042e 	bgeu	r2,r4,610291ec <__udivdi3+0x120>
610291dc:	8085883a 	add	r2,r16,r2
610291e0:	a53fffc4 	addi	r20,r20,-1
610291e4:	14000136 	bltu	r2,r16,610291ec <__udivdi3+0x120>
610291e8:	11012036 	bltu	r2,r4,6102966c <__udivdi3+0x5a0>
610291ec:	b004943a 	slli	r2,r22,16
610291f0:	d9000317 	ldw	r4,12(sp)
610291f4:	a084b03a 	or	r2,r20,r2
610291f8:	00001506 	br	61029250 <__udivdi3+0x184>
610291fc:	380d883a 	mov	r6,r7
61029200:	29c06236 	bltu	r5,r7,6102938c <__udivdi3+0x2c0>
61029204:	00bfffd4 	movui	r2,65535
61029208:	11c05a36 	bltu	r2,r7,61029374 <__udivdi3+0x2a8>
6102920c:	00803fc4 	movi	r2,255
61029210:	11c0fc36 	bltu	r2,r7,61029604 <__udivdi3+0x538>
61029214:	000b883a 	mov	r5,zero
61029218:	0005883a 	mov	r2,zero
6102921c:	3084d83a 	srl	r2,r6,r2
61029220:	011840f4 	movhi	r4,24835
61029224:	21376404 	addi	r4,r4,-8816
61029228:	01c00804 	movi	r7,32
6102922c:	1105883a 	add	r2,r2,r4
61029230:	10c00003 	ldbu	r3,0(r2)
61029234:	28c7883a 	add	r3,r5,r3
61029238:	38efc83a 	sub	r23,r7,r3
6102923c:	b800691e 	bne	r23,zero,610293e4 <__udivdi3+0x318>
61029240:	35000136 	bltu	r6,r20,61029248 <__udivdi3+0x17c>
61029244:	e4005136 	bltu	fp,r16,6102938c <__udivdi3+0x2c0>
61029248:	00800044 	movi	r2,1
6102924c:	0009883a 	mov	r4,zero
61029250:	2007883a 	mov	r3,r4
61029254:	dfc00f17 	ldw	ra,60(sp)
61029258:	df000e17 	ldw	fp,56(sp)
6102925c:	ddc00d17 	ldw	r23,52(sp)
61029260:	dd800c17 	ldw	r22,48(sp)
61029264:	dd400b17 	ldw	r21,44(sp)
61029268:	dd000a17 	ldw	r20,40(sp)
6102926c:	dcc00917 	ldw	r19,36(sp)
61029270:	dc800817 	ldw	r18,32(sp)
61029274:	dc400717 	ldw	r17,28(sp)
61029278:	dc000617 	ldw	r16,24(sp)
6102927c:	dec01004 	addi	sp,sp,64
61029280:	f800283a 	ret
61029284:	00bfffd4 	movui	r2,65535
61029288:	12005036 	bltu	r2,r8,610293cc <__udivdi3+0x300>
6102928c:	00803fc4 	movi	r2,255
61029290:	1200e836 	bltu	r2,r8,61029634 <__udivdi3+0x568>
61029294:	000b883a 	mov	r5,zero
61029298:	0005883a 	mov	r2,zero
6102929c:	8084d83a 	srl	r2,r16,r2
610292a0:	011840f4 	movhi	r4,24835
610292a4:	21376404 	addi	r4,r4,-8816
610292a8:	01800804 	movi	r6,32
610292ac:	1105883a 	add	r2,r2,r4
610292b0:	10c00003 	ldbu	r3,0(r2)
610292b4:	28c7883a 	add	r3,r5,r3
610292b8:	30cbc83a 	sub	r5,r6,r3
610292bc:	28000626 	beq	r5,zero,610292d8 <__udivdi3+0x20c>
610292c0:	3145c83a 	sub	r2,r6,r5
610292c4:	e084d83a 	srl	r2,fp,r2
610292c8:	a146983a 	sll	r3,r20,r5
610292cc:	e178983a 	sll	fp,fp,r5
610292d0:	8160983a 	sll	r16,r16,r5
610292d4:	18a8b03a 	or	r20,r3,r2
610292d8:	802ad43a 	srli	r21,r16,16
610292dc:	a009883a 	mov	r4,r20
610292e0:	85ffffcc 	andi	r23,r16,65535
610292e4:	a80b883a 	mov	r5,r21
610292e8:	10214900 	call	61021490 <__udivsi3>
610292ec:	a009883a 	mov	r4,r20
610292f0:	a80b883a 	mov	r5,r21
610292f4:	102d883a 	mov	r22,r2
610292f8:	10214980 	call	61021498 <__umodsi3>
610292fc:	1004943a 	slli	r2,r2,16
61029300:	e006d43a 	srli	r3,fp,16
61029304:	bda3383a 	mul	r17,r23,r22
61029308:	10c4b03a 	or	r2,r2,r3
6102930c:	1440042e 	bgeu	r2,r17,61029320 <__udivdi3+0x254>
61029310:	1405883a 	add	r2,r2,r16
61029314:	b5bfffc4 	addi	r22,r22,-1
61029318:	14000136 	bltu	r2,r16,61029320 <__udivdi3+0x254>
6102931c:	1440d536 	bltu	r2,r17,61029674 <__udivdi3+0x5a8>
61029320:	1463c83a 	sub	r17,r2,r17
61029324:	8809883a 	mov	r4,r17
61029328:	a80b883a 	mov	r5,r21
6102932c:	10214900 	call	61021490 <__udivsi3>
61029330:	8809883a 	mov	r4,r17
61029334:	a80b883a 	mov	r5,r21
61029338:	1029883a 	mov	r20,r2
6102933c:	10214980 	call	61021498 <__umodsi3>
61029340:	1004943a 	slli	r2,r2,16
61029344:	bd09383a 	mul	r4,r23,r20
61029348:	e0ffffcc 	andi	r3,fp,65535
6102934c:	10c4b03a 	or	r2,r2,r3
61029350:	1100042e 	bgeu	r2,r4,61029364 <__udivdi3+0x298>
61029354:	8085883a 	add	r2,r16,r2
61029358:	a53fffc4 	addi	r20,r20,-1
6102935c:	14000136 	bltu	r2,r16,61029364 <__udivdi3+0x298>
61029360:	1100c736 	bltu	r2,r4,61029680 <__udivdi3+0x5b4>
61029364:	b004943a 	slli	r2,r22,16
61029368:	0009883a 	mov	r4,zero
6102936c:	a084b03a 	or	r2,r20,r2
61029370:	003fb706 	br	61029250 <__udivdi3+0x184>
61029374:	00804034 	movhi	r2,256
61029378:	10bfffc4 	addi	r2,r2,-1
6102937c:	11c0a436 	bltu	r2,r7,61029610 <__udivdi3+0x544>
61029380:	01400404 	movi	r5,16
61029384:	2805883a 	mov	r2,r5
61029388:	003fa406 	br	6102921c <__udivdi3+0x150>
6102938c:	0005883a 	mov	r2,zero
61029390:	0009883a 	mov	r4,zero
61029394:	003fae06 	br	61029250 <__udivdi3+0x184>
61029398:	00804034 	movhi	r2,256
6102939c:	10bfffc4 	addi	r2,r2,-1
610293a0:	1400a136 	bltu	r2,r16,61029628 <__udivdi3+0x55c>
610293a4:	01400404 	movi	r5,16
610293a8:	2805883a 	mov	r2,r5
610293ac:	003f6006 	br	61029130 <__udivdi3+0x64>
610293b0:	01000044 	movi	r4,1
610293b4:	000b883a 	mov	r5,zero
610293b8:	10214900 	call	61021490 <__udivsi3>
610293bc:	1021883a 	mov	r16,r2
610293c0:	00bfffd4 	movui	r2,65535
610293c4:	143ff436 	bltu	r2,r16,61029398 <__udivdi3+0x2cc>
610293c8:	003f5506 	br	61029120 <__udivdi3+0x54>
610293cc:	00804034 	movhi	r2,256
610293d0:	10bfffc4 	addi	r2,r2,-1
610293d4:	12009a36 	bltu	r2,r8,61029640 <__udivdi3+0x574>
610293d8:	01400404 	movi	r5,16
610293dc:	2805883a 	mov	r2,r5
610293e0:	003fae06 	br	6102929c <__udivdi3+0x1d0>
610293e4:	3dc5c83a 	sub	r2,r7,r23
610293e8:	35c8983a 	sll	r4,r6,r23
610293ec:	8086d83a 	srl	r3,r16,r2
610293f0:	a0a2d83a 	srl	r17,r20,r2
610293f4:	e084d83a 	srl	r2,fp,r2
610293f8:	20eab03a 	or	r21,r4,r3
610293fc:	a82cd43a 	srli	r22,r21,16
61029400:	a5c6983a 	sll	r3,r20,r23
61029404:	8809883a 	mov	r4,r17
61029408:	b00b883a 	mov	r5,r22
6102940c:	1886b03a 	or	r3,r3,r2
61029410:	d8c00215 	stw	r3,8(sp)
61029414:	10214900 	call	61021490 <__udivsi3>
61029418:	8809883a 	mov	r4,r17
6102941c:	b00b883a 	mov	r5,r22
61029420:	1029883a 	mov	r20,r2
61029424:	10214980 	call	61021498 <__umodsi3>
61029428:	a8ffffcc 	andi	r3,r21,65535
6102942c:	d8c00515 	stw	r3,20(sp)
61029430:	d9000217 	ldw	r4,8(sp)
61029434:	d9400517 	ldw	r5,20(sp)
61029438:	1004943a 	slli	r2,r2,16
6102943c:	2006d43a 	srli	r3,r4,16
61029440:	85e0983a 	sll	r16,r16,r23
61029444:	2d23383a 	mul	r17,r5,r20
61029448:	10c4b03a 	or	r2,r2,r3
6102944c:	dc000015 	stw	r16,0(sp)
61029450:	1440032e 	bgeu	r2,r17,61029460 <__udivdi3+0x394>
61029454:	1545883a 	add	r2,r2,r21
61029458:	a53fffc4 	addi	r20,r20,-1
6102945c:	15407f2e 	bgeu	r2,r21,6102965c <__udivdi3+0x590>
61029460:	1463c83a 	sub	r17,r2,r17
61029464:	8809883a 	mov	r4,r17
61029468:	b00b883a 	mov	r5,r22
6102946c:	10214900 	call	61021490 <__udivsi3>
61029470:	8809883a 	mov	r4,r17
61029474:	b00b883a 	mov	r5,r22
61029478:	1021883a 	mov	r16,r2
6102947c:	10214980 	call	61021498 <__umodsi3>
61029480:	d8c00517 	ldw	r3,20(sp)
61029484:	d9000217 	ldw	r4,8(sp)
61029488:	1004943a 	slli	r2,r2,16
6102948c:	1c0f383a 	mul	r7,r3,r16
61029490:	20ffffcc 	andi	r3,r4,65535
61029494:	10e2b03a 	or	r17,r2,r3
61029498:	89c0032e 	bgeu	r17,r7,610294a8 <__udivdi3+0x3dc>
6102949c:	8d63883a 	add	r17,r17,r21
610294a0:	843fffc4 	addi	r16,r16,-1
610294a4:	8d40692e 	bgeu	r17,r21,6102964c <__udivdi3+0x580>
610294a8:	a008943a 	slli	r4,r20,16
610294ac:	d9400017 	ldw	r5,0(sp)
610294b0:	89e3c83a 	sub	r17,r17,r7
610294b4:	8110b03a 	or	r8,r16,r4
610294b8:	280cd43a 	srli	r6,r5,16
610294bc:	28ffffcc 	andi	r3,r5,65535
610294c0:	40bfffcc 	andi	r2,r8,65535
610294c4:	400ad43a 	srli	r5,r8,16
610294c8:	10d3383a 	mul	r9,r2,r3
610294cc:	1185383a 	mul	r2,r2,r6
610294d0:	28c7383a 	mul	r3,r5,r3
610294d4:	4808d43a 	srli	r4,r9,16
610294d8:	298b383a 	mul	r5,r5,r6
610294dc:	10c5883a 	add	r2,r2,r3
610294e0:	2089883a 	add	r4,r4,r2
610294e4:	20c0022e 	bgeu	r4,r3,610294f0 <__udivdi3+0x424>
610294e8:	00800074 	movhi	r2,1
610294ec:	288b883a 	add	r5,r5,r2
610294f0:	2004d43a 	srli	r2,r4,16
610294f4:	288b883a 	add	r5,r5,r2
610294f8:	89403f36 	bltu	r17,r5,610295f8 <__udivdi3+0x52c>
610294fc:	89403926 	beq	r17,r5,610295e4 <__udivdi3+0x518>
61029500:	4005883a 	mov	r2,r8
61029504:	0009883a 	mov	r4,zero
61029508:	003f5106 	br	61029250 <__udivdi3+0x184>
6102950c:	85a0983a 	sll	r16,r16,r22
61029510:	3585c83a 	sub	r2,r6,r22
61029514:	a0a2d83a 	srl	r17,r20,r2
61029518:	802ad43a 	srli	r21,r16,16
6102951c:	e084d83a 	srl	r2,fp,r2
61029520:	a586983a 	sll	r3,r20,r22
61029524:	8809883a 	mov	r4,r17
61029528:	a80b883a 	mov	r5,r21
6102952c:	1886b03a 	or	r3,r3,r2
61029530:	d8c00115 	stw	r3,4(sp)
61029534:	10214900 	call	61021490 <__udivsi3>
61029538:	8809883a 	mov	r4,r17
6102953c:	a80b883a 	mov	r5,r21
61029540:	d8800415 	stw	r2,16(sp)
61029544:	10214980 	call	61021498 <__umodsi3>
61029548:	d9000117 	ldw	r4,4(sp)
6102954c:	d9400417 	ldw	r5,16(sp)
61029550:	1004943a 	slli	r2,r2,16
61029554:	85ffffcc 	andi	r23,r16,65535
61029558:	2006d43a 	srli	r3,r4,16
6102955c:	b963383a 	mul	r17,r23,r5
61029560:	10c4b03a 	or	r2,r2,r3
61029564:	1440042e 	bgeu	r2,r17,61029578 <__udivdi3+0x4ac>
61029568:	297fffc4 	addi	r5,r5,-1
6102956c:	1405883a 	add	r2,r2,r16
61029570:	d9400415 	stw	r5,16(sp)
61029574:	1400442e 	bgeu	r2,r16,61029688 <__udivdi3+0x5bc>
61029578:	1463c83a 	sub	r17,r2,r17
6102957c:	8809883a 	mov	r4,r17
61029580:	a80b883a 	mov	r5,r21
61029584:	10214900 	call	61021490 <__udivsi3>
61029588:	8809883a 	mov	r4,r17
6102958c:	a80b883a 	mov	r5,r21
61029590:	1029883a 	mov	r20,r2
61029594:	10214980 	call	61021498 <__umodsi3>
61029598:	d9400117 	ldw	r5,4(sp)
6102959c:	1004943a 	slli	r2,r2,16
610295a0:	bd09383a 	mul	r4,r23,r20
610295a4:	28ffffcc 	andi	r3,r5,65535
610295a8:	10c6b03a 	or	r3,r2,r3
610295ac:	1900062e 	bgeu	r3,r4,610295c8 <__udivdi3+0x4fc>
610295b0:	1c07883a 	add	r3,r3,r16
610295b4:	a53fffc4 	addi	r20,r20,-1
610295b8:	1c000336 	bltu	r3,r16,610295c8 <__udivdi3+0x4fc>
610295bc:	1900022e 	bgeu	r3,r4,610295c8 <__udivdi3+0x4fc>
610295c0:	a53fffc4 	addi	r20,r20,-1
610295c4:	1c07883a 	add	r3,r3,r16
610295c8:	d9400417 	ldw	r5,16(sp)
610295cc:	e5b8983a 	sll	fp,fp,r22
610295d0:	1923c83a 	sub	r17,r3,r4
610295d4:	2804943a 	slli	r2,r5,16
610295d8:	a0a8b03a 	or	r20,r20,r2
610295dc:	dd000315 	stw	r20,12(sp)
610295e0:	003ee106 	br	61029168 <__udivdi3+0x9c>
610295e4:	2004943a 	slli	r2,r4,16
610295e8:	e5c8983a 	sll	r4,fp,r23
610295ec:	48ffffcc 	andi	r3,r9,65535
610295f0:	10c5883a 	add	r2,r2,r3
610295f4:	20bfc22e 	bgeu	r4,r2,61029500 <__udivdi3+0x434>
610295f8:	40bfffc4 	addi	r2,r8,-1
610295fc:	0009883a 	mov	r4,zero
61029600:	003f1306 	br	61029250 <__udivdi3+0x184>
61029604:	01400204 	movi	r5,8
61029608:	2805883a 	mov	r2,r5
6102960c:	003f0306 	br	6102921c <__udivdi3+0x150>
61029610:	01400604 	movi	r5,24
61029614:	2805883a 	mov	r2,r5
61029618:	003f0006 	br	6102921c <__udivdi3+0x150>
6102961c:	01400204 	movi	r5,8
61029620:	2805883a 	mov	r2,r5
61029624:	003ec206 	br	61029130 <__udivdi3+0x64>
61029628:	01400604 	movi	r5,24
6102962c:	2805883a 	mov	r2,r5
61029630:	003ebf06 	br	61029130 <__udivdi3+0x64>
61029634:	01400204 	movi	r5,8
61029638:	2805883a 	mov	r2,r5
6102963c:	003f1706 	br	6102929c <__udivdi3+0x1d0>
61029640:	01400604 	movi	r5,24
61029644:	2805883a 	mov	r2,r5
61029648:	003f1406 	br	6102929c <__udivdi3+0x1d0>
6102964c:	89ff962e 	bgeu	r17,r7,610294a8 <__udivdi3+0x3dc>
61029650:	8d63883a 	add	r17,r17,r21
61029654:	843fffc4 	addi	r16,r16,-1
61029658:	003f9306 	br	610294a8 <__udivdi3+0x3dc>
6102965c:	147f802e 	bgeu	r2,r17,61029460 <__udivdi3+0x394>
61029660:	a53fffc4 	addi	r20,r20,-1
61029664:	1545883a 	add	r2,r2,r21
61029668:	003f7d06 	br	61029460 <__udivdi3+0x394>
6102966c:	a53fffc4 	addi	r20,r20,-1
61029670:	003ede06 	br	610291ec <__udivdi3+0x120>
61029674:	b5bfffc4 	addi	r22,r22,-1
61029678:	1405883a 	add	r2,r2,r16
6102967c:	003f2806 	br	61029320 <__udivdi3+0x254>
61029680:	a53fffc4 	addi	r20,r20,-1
61029684:	003f3706 	br	61029364 <__udivdi3+0x298>
61029688:	147fbb2e 	bgeu	r2,r17,61029578 <__udivdi3+0x4ac>
6102968c:	297fffc4 	addi	r5,r5,-1
61029690:	1405883a 	add	r2,r2,r16
61029694:	d9400415 	stw	r5,16(sp)
61029698:	003fb706 	br	61029578 <__udivdi3+0x4ac>
6102969c:	b5bfffc4 	addi	r22,r22,-1
610296a0:	1405883a 	add	r2,r2,r16
610296a4:	003ec006 	br	610291a8 <__udivdi3+0xdc>

610296a8 <__umoddi3>:
610296a8:	defff104 	addi	sp,sp,-60
610296ac:	dd800b15 	stw	r22,44(sp)
610296b0:	dd000915 	stw	r20,36(sp)
610296b4:	dc000515 	stw	r16,20(sp)
610296b8:	dfc00e15 	stw	ra,56(sp)
610296bc:	df000d15 	stw	fp,52(sp)
610296c0:	ddc00c15 	stw	r23,48(sp)
610296c4:	dd400a15 	stw	r21,40(sp)
610296c8:	dcc00815 	stw	r19,32(sp)
610296cc:	dc800715 	stw	r18,28(sp)
610296d0:	dc400615 	stw	r17,24(sp)
610296d4:	3021883a 	mov	r16,r6
610296d8:	202d883a 	mov	r22,r4
610296dc:	2829883a 	mov	r20,r5
610296e0:	38002b1e 	bne	r7,zero,61029790 <__umoddi3+0xe8>
610296e4:	29805036 	bltu	r5,r6,61029828 <__umoddi3+0x180>
610296e8:	30008a26 	beq	r6,zero,61029914 <__umoddi3+0x26c>
610296ec:	00bfffd4 	movui	r2,65535
610296f0:	14008236 	bltu	r2,r16,610298fc <__umoddi3+0x254>
610296f4:	00803fc4 	movi	r2,255
610296f8:	14013636 	bltu	r2,r16,61029bd4 <__umoddi3+0x52c>
610296fc:	000b883a 	mov	r5,zero
61029700:	0005883a 	mov	r2,zero
61029704:	8084d83a 	srl	r2,r16,r2
61029708:	011840f4 	movhi	r4,24835
6102970c:	21376404 	addi	r4,r4,-8816
61029710:	01800804 	movi	r6,32
61029714:	1105883a 	add	r2,r2,r4
61029718:	10c00003 	ldbu	r3,0(r2)
6102971c:	28c7883a 	add	r3,r5,r3
61029720:	30efc83a 	sub	r23,r6,r3
61029724:	b800941e 	bne	r23,zero,61029978 <__umoddi3+0x2d0>
61029728:	802ad43a 	srli	r21,r16,16
6102972c:	a423c83a 	sub	r17,r20,r16
61029730:	0039883a 	mov	fp,zero
61029734:	853fffcc 	andi	r20,r16,65535
61029738:	8809883a 	mov	r4,r17
6102973c:	a80b883a 	mov	r5,r21
61029740:	10214900 	call	61021490 <__udivsi3>
61029744:	8809883a 	mov	r4,r17
61029748:	a80b883a 	mov	r5,r21
6102974c:	a0a3383a 	mul	r17,r20,r2
61029750:	10214980 	call	61021498 <__umodsi3>
61029754:	1004943a 	slli	r2,r2,16
61029758:	b006d43a 	srli	r3,r22,16
6102975c:	10c4b03a 	or	r2,r2,r3
61029760:	1440032e 	bgeu	r2,r17,61029770 <__umoddi3+0xc8>
61029764:	1405883a 	add	r2,r2,r16
61029768:	14000136 	bltu	r2,r16,61029770 <__umoddi3+0xc8>
6102976c:	14413536 	bltu	r2,r17,61029c44 <__umoddi3+0x59c>
61029770:	1463c83a 	sub	r17,r2,r17
61029774:	8809883a 	mov	r4,r17
61029778:	a80b883a 	mov	r5,r21
6102977c:	10214900 	call	61021490 <__udivsi3>
61029780:	8809883a 	mov	r4,r17
61029784:	a0a3383a 	mul	r17,r20,r2
61029788:	a80b883a 	mov	r5,r21
6102978c:	00004d06 	br	610298c4 <__umoddi3+0x21c>
61029790:	380d883a 	mov	r6,r7
61029794:	29c0102e 	bgeu	r5,r7,610297d8 <__umoddi3+0x130>
61029798:	2011883a 	mov	r8,r4
6102979c:	2813883a 	mov	r9,r5
610297a0:	4005883a 	mov	r2,r8
610297a4:	4807883a 	mov	r3,r9
610297a8:	dfc00e17 	ldw	ra,56(sp)
610297ac:	df000d17 	ldw	fp,52(sp)
610297b0:	ddc00c17 	ldw	r23,48(sp)
610297b4:	dd800b17 	ldw	r22,44(sp)
610297b8:	dd400a17 	ldw	r21,40(sp)
610297bc:	dd000917 	ldw	r20,36(sp)
610297c0:	dcc00817 	ldw	r19,32(sp)
610297c4:	dc800717 	ldw	r18,28(sp)
610297c8:	dc400617 	ldw	r17,24(sp)
610297cc:	dc000517 	ldw	r16,20(sp)
610297d0:	dec00f04 	addi	sp,sp,60
610297d4:	f800283a 	ret
610297d8:	00bfffd4 	movui	r2,65535
610297dc:	11c05a36 	bltu	r2,r7,61029948 <__umoddi3+0x2a0>
610297e0:	00803fc4 	movi	r2,255
610297e4:	11c0fe36 	bltu	r2,r7,61029be0 <__umoddi3+0x538>
610297e8:	000b883a 	mov	r5,zero
610297ec:	0005883a 	mov	r2,zero
610297f0:	3084d83a 	srl	r2,r6,r2
610297f4:	011840f4 	movhi	r4,24835
610297f8:	21376404 	addi	r4,r4,-8816
610297fc:	01c00804 	movi	r7,32
61029800:	1105883a 	add	r2,r2,r4
61029804:	10c00003 	ldbu	r3,0(r2)
61029808:	28c7883a 	add	r3,r5,r3
6102980c:	38ebc83a 	sub	r21,r7,r3
61029810:	a800851e 	bne	r21,zero,61029a28 <__umoddi3+0x380>
61029814:	35005236 	bltu	r6,r20,61029960 <__umoddi3+0x2b8>
61029818:	b400512e 	bgeu	r22,r16,61029960 <__umoddi3+0x2b8>
6102981c:	b011883a 	mov	r8,r22
61029820:	a013883a 	mov	r9,r20
61029824:	003fde06 	br	610297a0 <__umoddi3+0xf8>
61029828:	00bfffd4 	movui	r2,65535
6102982c:	11804036 	bltu	r2,r6,61029930 <__umoddi3+0x288>
61029830:	00803fc4 	movi	r2,255
61029834:	1180ed36 	bltu	r2,r6,61029bec <__umoddi3+0x544>
61029838:	000b883a 	mov	r5,zero
6102983c:	0005883a 	mov	r2,zero
61029840:	8084d83a 	srl	r2,r16,r2
61029844:	011840f4 	movhi	r4,24835
61029848:	21376404 	addi	r4,r4,-8816
6102984c:	01800804 	movi	r6,32
61029850:	1105883a 	add	r2,r2,r4
61029854:	10c00003 	ldbu	r3,0(r2)
61029858:	28c7883a 	add	r3,r5,r3
6102985c:	30c7c83a 	sub	r3,r6,r3
61029860:	1800bf1e 	bne	r3,zero,61029b60 <__umoddi3+0x4b8>
61029864:	0039883a 	mov	fp,zero
61029868:	802ad43a 	srli	r21,r16,16
6102986c:	a009883a 	mov	r4,r20
61029870:	85ffffcc 	andi	r23,r16,65535
61029874:	a80b883a 	mov	r5,r21
61029878:	10214900 	call	61021490 <__udivsi3>
6102987c:	a009883a 	mov	r4,r20
61029880:	a80b883a 	mov	r5,r21
61029884:	b8a3383a 	mul	r17,r23,r2
61029888:	10214980 	call	61021498 <__umodsi3>
6102988c:	1004943a 	slli	r2,r2,16
61029890:	b006d43a 	srli	r3,r22,16
61029894:	10c4b03a 	or	r2,r2,r3
61029898:	1440032e 	bgeu	r2,r17,610298a8 <__umoddi3+0x200>
6102989c:	1405883a 	add	r2,r2,r16
610298a0:	14000136 	bltu	r2,r16,610298a8 <__umoddi3+0x200>
610298a4:	1440e536 	bltu	r2,r17,61029c3c <__umoddi3+0x594>
610298a8:	1463c83a 	sub	r17,r2,r17
610298ac:	8809883a 	mov	r4,r17
610298b0:	a80b883a 	mov	r5,r21
610298b4:	10214900 	call	61021490 <__udivsi3>
610298b8:	8809883a 	mov	r4,r17
610298bc:	b8a3383a 	mul	r17,r23,r2
610298c0:	a80b883a 	mov	r5,r21
610298c4:	10214980 	call	61021498 <__umodsi3>
610298c8:	1004943a 	slli	r2,r2,16
610298cc:	b0ffffcc 	andi	r3,r22,65535
610298d0:	10c4b03a 	or	r2,r2,r3
610298d4:	1440042e 	bgeu	r2,r17,610298e8 <__umoddi3+0x240>
610298d8:	1405883a 	add	r2,r2,r16
610298dc:	14000236 	bltu	r2,r16,610298e8 <__umoddi3+0x240>
610298e0:	1440012e 	bgeu	r2,r17,610298e8 <__umoddi3+0x240>
610298e4:	1405883a 	add	r2,r2,r16
610298e8:	1445c83a 	sub	r2,r2,r17
610298ec:	1724d83a 	srl	r18,r2,fp
610298f0:	0013883a 	mov	r9,zero
610298f4:	9011883a 	mov	r8,r18
610298f8:	003fa906 	br	610297a0 <__umoddi3+0xf8>
610298fc:	00804034 	movhi	r2,256
61029900:	10bfffc4 	addi	r2,r2,-1
61029904:	1400b036 	bltu	r2,r16,61029bc8 <__umoddi3+0x520>
61029908:	01400404 	movi	r5,16
6102990c:	2805883a 	mov	r2,r5
61029910:	003f7c06 	br	61029704 <__umoddi3+0x5c>
61029914:	01000044 	movi	r4,1
61029918:	000b883a 	mov	r5,zero
6102991c:	10214900 	call	61021490 <__udivsi3>
61029920:	1021883a 	mov	r16,r2
61029924:	00bfffd4 	movui	r2,65535
61029928:	143ff436 	bltu	r2,r16,610298fc <__umoddi3+0x254>
6102992c:	003f7106 	br	610296f4 <__umoddi3+0x4c>
61029930:	00804034 	movhi	r2,256
61029934:	10bfffc4 	addi	r2,r2,-1
61029938:	1180af36 	bltu	r2,r6,61029bf8 <__umoddi3+0x550>
6102993c:	01400404 	movi	r5,16
61029940:	2805883a 	mov	r2,r5
61029944:	003fbe06 	br	61029840 <__umoddi3+0x198>
61029948:	00804034 	movhi	r2,256
6102994c:	10bfffc4 	addi	r2,r2,-1
61029950:	11c0ac36 	bltu	r2,r7,61029c04 <__umoddi3+0x55c>
61029954:	01400404 	movi	r5,16
61029958:	2805883a 	mov	r2,r5
6102995c:	003fa406 	br	610297f0 <__umoddi3+0x148>
61029960:	b409c83a 	sub	r4,r22,r16
61029964:	b105803a 	cmpltu	r2,r22,r4
61029968:	a187c83a 	sub	r3,r20,r6
6102996c:	18a9c83a 	sub	r20,r3,r2
61029970:	202d883a 	mov	r22,r4
61029974:	003fa906 	br	6102981c <__umoddi3+0x174>
61029978:	85e0983a 	sll	r16,r16,r23
6102997c:	35c5c83a 	sub	r2,r6,r23
61029980:	a0a2d83a 	srl	r17,r20,r2
61029984:	802ad43a 	srli	r21,r16,16
61029988:	b084d83a 	srl	r2,r22,r2
6102998c:	a5c6983a 	sll	r3,r20,r23
61029990:	8809883a 	mov	r4,r17
61029994:	a80b883a 	mov	r5,r21
61029998:	1886b03a 	or	r3,r3,r2
6102999c:	d8c00115 	stw	r3,4(sp)
610299a0:	853fffcc 	andi	r20,r16,65535
610299a4:	10214900 	call	61021490 <__udivsi3>
610299a8:	8809883a 	mov	r4,r17
610299ac:	a80b883a 	mov	r5,r21
610299b0:	a0a3383a 	mul	r17,r20,r2
610299b4:	10214980 	call	61021498 <__umodsi3>
610299b8:	d9000117 	ldw	r4,4(sp)
610299bc:	1004943a 	slli	r2,r2,16
610299c0:	b839883a 	mov	fp,r23
610299c4:	2006d43a 	srli	r3,r4,16
610299c8:	10c4b03a 	or	r2,r2,r3
610299cc:	1440022e 	bgeu	r2,r17,610299d8 <__umoddi3+0x330>
610299d0:	1405883a 	add	r2,r2,r16
610299d4:	1400962e 	bgeu	r2,r16,61029c30 <__umoddi3+0x588>
610299d8:	1463c83a 	sub	r17,r2,r17
610299dc:	8809883a 	mov	r4,r17
610299e0:	a80b883a 	mov	r5,r21
610299e4:	10214900 	call	61021490 <__udivsi3>
610299e8:	8809883a 	mov	r4,r17
610299ec:	a80b883a 	mov	r5,r21
610299f0:	a0a3383a 	mul	r17,r20,r2
610299f4:	10214980 	call	61021498 <__umodsi3>
610299f8:	d9400117 	ldw	r5,4(sp)
610299fc:	1004943a 	slli	r2,r2,16
61029a00:	28ffffcc 	andi	r3,r5,65535
61029a04:	10c4b03a 	or	r2,r2,r3
61029a08:	1440042e 	bgeu	r2,r17,61029a1c <__umoddi3+0x374>
61029a0c:	1405883a 	add	r2,r2,r16
61029a10:	14000236 	bltu	r2,r16,61029a1c <__umoddi3+0x374>
61029a14:	1440012e 	bgeu	r2,r17,61029a1c <__umoddi3+0x374>
61029a18:	1405883a 	add	r2,r2,r16
61029a1c:	b5ec983a 	sll	r22,r22,r23
61029a20:	1463c83a 	sub	r17,r2,r17
61029a24:	003f4406 	br	61029738 <__umoddi3+0x90>
61029a28:	3d4fc83a 	sub	r7,r7,r21
61029a2c:	3546983a 	sll	r3,r6,r21
61029a30:	81c4d83a 	srl	r2,r16,r7
61029a34:	a1e2d83a 	srl	r17,r20,r7
61029a38:	a54c983a 	sll	r6,r20,r21
61029a3c:	18aeb03a 	or	r23,r3,r2
61029a40:	b828d43a 	srli	r20,r23,16
61029a44:	b1c4d83a 	srl	r2,r22,r7
61029a48:	8809883a 	mov	r4,r17
61029a4c:	a00b883a 	mov	r5,r20
61029a50:	308cb03a 	or	r6,r6,r2
61029a54:	d9c00315 	stw	r7,12(sp)
61029a58:	d9800215 	stw	r6,8(sp)
61029a5c:	10214900 	call	61021490 <__udivsi3>
61029a60:	8809883a 	mov	r4,r17
61029a64:	a00b883a 	mov	r5,r20
61029a68:	1039883a 	mov	fp,r2
61029a6c:	10214980 	call	61021498 <__umodsi3>
61029a70:	b8ffffcc 	andi	r3,r23,65535
61029a74:	d8c00415 	stw	r3,16(sp)
61029a78:	d9000217 	ldw	r4,8(sp)
61029a7c:	d9400417 	ldw	r5,16(sp)
61029a80:	1004943a 	slli	r2,r2,16
61029a84:	2006d43a 	srli	r3,r4,16
61029a88:	8560983a 	sll	r16,r16,r21
61029a8c:	2f23383a 	mul	r17,r5,fp
61029a90:	10c4b03a 	or	r2,r2,r3
61029a94:	dc000015 	stw	r16,0(sp)
61029a98:	b56c983a 	sll	r22,r22,r21
61029a9c:	1440032e 	bgeu	r2,r17,61029aac <__umoddi3+0x404>
61029aa0:	15c5883a 	add	r2,r2,r23
61029aa4:	e73fffc4 	addi	fp,fp,-1
61029aa8:	15c05d2e 	bgeu	r2,r23,61029c20 <__umoddi3+0x578>
61029aac:	1463c83a 	sub	r17,r2,r17
61029ab0:	8809883a 	mov	r4,r17
61029ab4:	a00b883a 	mov	r5,r20
61029ab8:	10214900 	call	61021490 <__udivsi3>
61029abc:	8809883a 	mov	r4,r17
61029ac0:	a00b883a 	mov	r5,r20
61029ac4:	1021883a 	mov	r16,r2
61029ac8:	10214980 	call	61021498 <__umodsi3>
61029acc:	d8c00417 	ldw	r3,16(sp)
61029ad0:	d9000217 	ldw	r4,8(sp)
61029ad4:	1004943a 	slli	r2,r2,16
61029ad8:	1c23383a 	mul	r17,r3,r16
61029adc:	20ffffcc 	andi	r3,r4,65535
61029ae0:	10ceb03a 	or	r7,r2,r3
61029ae4:	3c40032e 	bgeu	r7,r17,61029af4 <__umoddi3+0x44c>
61029ae8:	3dcf883a 	add	r7,r7,r23
61029aec:	843fffc4 	addi	r16,r16,-1
61029af0:	3dc0472e 	bgeu	r7,r23,61029c10 <__umoddi3+0x568>
61029af4:	e004943a 	slli	r2,fp,16
61029af8:	d9400017 	ldw	r5,0(sp)
61029afc:	3c4fc83a 	sub	r7,r7,r17
61029b00:	8084b03a 	or	r2,r16,r2
61029b04:	28ffffcc 	andi	r3,r5,65535
61029b08:	280cd43a 	srli	r6,r5,16
61029b0c:	100ad43a 	srli	r5,r2,16
61029b10:	10bfffcc 	andi	r2,r2,65535
61029b14:	10d1383a 	mul	r8,r2,r3
61029b18:	28c7383a 	mul	r3,r5,r3
61029b1c:	1185383a 	mul	r2,r2,r6
61029b20:	4008d43a 	srli	r4,r8,16
61029b24:	298b383a 	mul	r5,r5,r6
61029b28:	10c5883a 	add	r2,r2,r3
61029b2c:	2089883a 	add	r4,r4,r2
61029b30:	20c0022e 	bgeu	r4,r3,61029b3c <__umoddi3+0x494>
61029b34:	00800074 	movhi	r2,1
61029b38:	288b883a 	add	r5,r5,r2
61029b3c:	2004d43a 	srli	r2,r4,16
61029b40:	2008943a 	slli	r4,r4,16
61029b44:	40ffffcc 	andi	r3,r8,65535
61029b48:	288b883a 	add	r5,r5,r2
61029b4c:	20c9883a 	add	r4,r4,r3
61029b50:	39400b36 	bltu	r7,r5,61029b80 <__umoddi3+0x4d8>
61029b54:	39403d26 	beq	r7,r5,61029c4c <__umoddi3+0x5a4>
61029b58:	394bc83a 	sub	r5,r7,r5
61029b5c:	00000f06 	br	61029b9c <__umoddi3+0x4f4>
61029b60:	30c5c83a 	sub	r2,r6,r3
61029b64:	1839883a 	mov	fp,r3
61029b68:	b084d83a 	srl	r2,r22,r2
61029b6c:	a0c6983a 	sll	r3,r20,r3
61029b70:	8720983a 	sll	r16,r16,fp
61029b74:	b72c983a 	sll	r22,r22,fp
61029b78:	18a8b03a 	or	r20,r3,r2
61029b7c:	003f3a06 	br	61029868 <__umoddi3+0x1c0>
61029b80:	d8c00017 	ldw	r3,0(sp)
61029b84:	20c5c83a 	sub	r2,r4,r3
61029b88:	2089803a 	cmpltu	r4,r4,r2
61029b8c:	2dc7c83a 	sub	r3,r5,r23
61029b90:	1907c83a 	sub	r3,r3,r4
61029b94:	38cbc83a 	sub	r5,r7,r3
61029b98:	1009883a 	mov	r4,r2
61029b9c:	b105c83a 	sub	r2,r22,r4
61029ba0:	b087803a 	cmpltu	r3,r22,r2
61029ba4:	28c7c83a 	sub	r3,r5,r3
61029ba8:	d9400317 	ldw	r5,12(sp)
61029bac:	1544d83a 	srl	r2,r2,r21
61029bb0:	1948983a 	sll	r4,r3,r5
61029bb4:	1d46d83a 	srl	r3,r3,r21
61029bb8:	20a4b03a 	or	r18,r4,r2
61029bbc:	9011883a 	mov	r8,r18
61029bc0:	1813883a 	mov	r9,r3
61029bc4:	003ef606 	br	610297a0 <__umoddi3+0xf8>
61029bc8:	01400604 	movi	r5,24
61029bcc:	2805883a 	mov	r2,r5
61029bd0:	003ecc06 	br	61029704 <__umoddi3+0x5c>
61029bd4:	01400204 	movi	r5,8
61029bd8:	2805883a 	mov	r2,r5
61029bdc:	003ec906 	br	61029704 <__umoddi3+0x5c>
61029be0:	01400204 	movi	r5,8
61029be4:	2805883a 	mov	r2,r5
61029be8:	003f0106 	br	610297f0 <__umoddi3+0x148>
61029bec:	01400204 	movi	r5,8
61029bf0:	2805883a 	mov	r2,r5
61029bf4:	003f1206 	br	61029840 <__umoddi3+0x198>
61029bf8:	01400604 	movi	r5,24
61029bfc:	2805883a 	mov	r2,r5
61029c00:	003f0f06 	br	61029840 <__umoddi3+0x198>
61029c04:	01400604 	movi	r5,24
61029c08:	2805883a 	mov	r2,r5
61029c0c:	003ef806 	br	610297f0 <__umoddi3+0x148>
61029c10:	3c7fb82e 	bgeu	r7,r17,61029af4 <__umoddi3+0x44c>
61029c14:	843fffc4 	addi	r16,r16,-1
61029c18:	3dcf883a 	add	r7,r7,r23
61029c1c:	003fb506 	br	61029af4 <__umoddi3+0x44c>
61029c20:	147fa22e 	bgeu	r2,r17,61029aac <__umoddi3+0x404>
61029c24:	e73fffc4 	addi	fp,fp,-1
61029c28:	15c5883a 	add	r2,r2,r23
61029c2c:	003f9f06 	br	61029aac <__umoddi3+0x404>
61029c30:	147f692e 	bgeu	r2,r17,610299d8 <__umoddi3+0x330>
61029c34:	1405883a 	add	r2,r2,r16
61029c38:	003f6706 	br	610299d8 <__umoddi3+0x330>
61029c3c:	1405883a 	add	r2,r2,r16
61029c40:	003f1906 	br	610298a8 <__umoddi3+0x200>
61029c44:	1405883a 	add	r2,r2,r16
61029c48:	003ec906 	br	61029770 <__umoddi3+0xc8>
61029c4c:	b13fcc36 	bltu	r22,r4,61029b80 <__umoddi3+0x4d8>
61029c50:	000b883a 	mov	r5,zero
61029c54:	003fd106 	br	61029b9c <__umoddi3+0x4f4>

61029c58 <_fpadd_parts>:
61029c58:	defff804 	addi	sp,sp,-32
61029c5c:	dcc00315 	stw	r19,12(sp)
61029c60:	2027883a 	mov	r19,r4
61029c64:	21000017 	ldw	r4,0(r4)
61029c68:	00c00044 	movi	r3,1
61029c6c:	dd400515 	stw	r21,20(sp)
61029c70:	dd000415 	stw	r20,16(sp)
61029c74:	ddc00715 	stw	r23,28(sp)
61029c78:	dd800615 	stw	r22,24(sp)
61029c7c:	dc800215 	stw	r18,8(sp)
61029c80:	dc400115 	stw	r17,4(sp)
61029c84:	dc000015 	stw	r16,0(sp)
61029c88:	282b883a 	mov	r21,r5
61029c8c:	3029883a 	mov	r20,r6
61029c90:	1900632e 	bgeu	r3,r4,61029e20 <_fpadd_parts+0x1c8>
61029c94:	28800017 	ldw	r2,0(r5)
61029c98:	1880812e 	bgeu	r3,r2,61029ea0 <_fpadd_parts+0x248>
61029c9c:	00c00104 	movi	r3,4
61029ca0:	20c0dc26 	beq	r4,r3,6102a014 <_fpadd_parts+0x3bc>
61029ca4:	10c07e26 	beq	r2,r3,61029ea0 <_fpadd_parts+0x248>
61029ca8:	00c00084 	movi	r3,2
61029cac:	10c06726 	beq	r2,r3,61029e4c <_fpadd_parts+0x1f4>
61029cb0:	20c07b26 	beq	r4,r3,61029ea0 <_fpadd_parts+0x248>
61029cb4:	9dc00217 	ldw	r23,8(r19)
61029cb8:	28c00217 	ldw	r3,8(r5)
61029cbc:	9c400317 	ldw	r17,12(r19)
61029cc0:	2bc00317 	ldw	r15,12(r5)
61029cc4:	b8cdc83a 	sub	r6,r23,r3
61029cc8:	9c800417 	ldw	r18,16(r19)
61029ccc:	2c000417 	ldw	r16,16(r5)
61029cd0:	3009883a 	mov	r4,r6
61029cd4:	30009716 	blt	r6,zero,61029f34 <_fpadd_parts+0x2dc>
61029cd8:	00800fc4 	movi	r2,63
61029cdc:	11806b16 	blt	r2,r6,61029e8c <_fpadd_parts+0x234>
61029ce0:	0100a40e 	bge	zero,r4,61029f74 <_fpadd_parts+0x31c>
61029ce4:	35bff804 	addi	r22,r6,-32
61029ce8:	b000bc16 	blt	r22,zero,61029fdc <_fpadd_parts+0x384>
61029cec:	8596d83a 	srl	r11,r16,r22
61029cf0:	0019883a 	mov	r12,zero
61029cf4:	0013883a 	mov	r9,zero
61029cf8:	01000044 	movi	r4,1
61029cfc:	0015883a 	mov	r10,zero
61029d00:	b000be16 	blt	r22,zero,61029ffc <_fpadd_parts+0x3a4>
61029d04:	2590983a 	sll	r8,r4,r22
61029d08:	000f883a 	mov	r7,zero
61029d0c:	00bfffc4 	movi	r2,-1
61029d10:	3889883a 	add	r4,r7,r2
61029d14:	408b883a 	add	r5,r8,r2
61029d18:	21cd803a 	cmpltu	r6,r4,r7
61029d1c:	314b883a 	add	r5,r6,r5
61029d20:	7904703a 	and	r2,r15,r4
61029d24:	8146703a 	and	r3,r16,r5
61029d28:	10c4b03a 	or	r2,r2,r3
61029d2c:	10000226 	beq	r2,zero,61029d38 <_fpadd_parts+0xe0>
61029d30:	02400044 	movi	r9,1
61029d34:	0015883a 	mov	r10,zero
61029d38:	5a5eb03a 	or	r15,r11,r9
61029d3c:	62a0b03a 	or	r16,r12,r10
61029d40:	99400117 	ldw	r5,4(r19)
61029d44:	a8800117 	ldw	r2,4(r21)
61029d48:	28806e26 	beq	r5,r2,61029f04 <_fpadd_parts+0x2ac>
61029d4c:	28006626 	beq	r5,zero,61029ee8 <_fpadd_parts+0x290>
61029d50:	7c45c83a 	sub	r2,r15,r17
61029d54:	7889803a 	cmpltu	r4,r15,r2
61029d58:	8487c83a 	sub	r3,r16,r18
61029d5c:	1909c83a 	sub	r4,r3,r4
61029d60:	100d883a 	mov	r6,r2
61029d64:	200f883a 	mov	r7,r4
61029d68:	38007716 	blt	r7,zero,61029f48 <_fpadd_parts+0x2f0>
61029d6c:	a5c00215 	stw	r23,8(r20)
61029d70:	a1c00415 	stw	r7,16(r20)
61029d74:	a0000115 	stw	zero,4(r20)
61029d78:	a1800315 	stw	r6,12(r20)
61029d7c:	a2000317 	ldw	r8,12(r20)
61029d80:	a2400417 	ldw	r9,16(r20)
61029d84:	00bfffc4 	movi	r2,-1
61029d88:	408b883a 	add	r5,r8,r2
61029d8c:	2a09803a 	cmpltu	r4,r5,r8
61029d90:	488d883a 	add	r6,r9,r2
61029d94:	01c40034 	movhi	r7,4096
61029d98:	39ffffc4 	addi	r7,r7,-1
61029d9c:	218d883a 	add	r6,r4,r6
61029da0:	39801736 	bltu	r7,r6,61029e00 <_fpadd_parts+0x1a8>
61029da4:	31c06526 	beq	r6,r7,61029f3c <_fpadd_parts+0x2e4>
61029da8:	a3000217 	ldw	r12,8(r20)
61029dac:	4209883a 	add	r4,r8,r8
61029db0:	00bfffc4 	movi	r2,-1
61029db4:	220f803a 	cmpltu	r7,r4,r8
61029db8:	4a4b883a 	add	r5,r9,r9
61029dbc:	394f883a 	add	r7,r7,r5
61029dc0:	2095883a 	add	r10,r4,r2
61029dc4:	3897883a 	add	r11,r7,r2
61029dc8:	510d803a 	cmpltu	r6,r10,r4
61029dcc:	6099883a 	add	r12,r12,r2
61029dd0:	32d7883a 	add	r11,r6,r11
61029dd4:	00840034 	movhi	r2,4096
61029dd8:	10bfffc4 	addi	r2,r2,-1
61029ddc:	2011883a 	mov	r8,r4
61029de0:	3813883a 	mov	r9,r7
61029de4:	a1000315 	stw	r4,12(r20)
61029de8:	a1c00415 	stw	r7,16(r20)
61029dec:	a3000215 	stw	r12,8(r20)
61029df0:	12c00336 	bltu	r2,r11,61029e00 <_fpadd_parts+0x1a8>
61029df4:	58bfed1e 	bne	r11,r2,61029dac <_fpadd_parts+0x154>
61029df8:	00bfff84 	movi	r2,-2
61029dfc:	12bfeb2e 	bgeu	r2,r10,61029dac <_fpadd_parts+0x154>
61029e00:	a2800417 	ldw	r10,16(r20)
61029e04:	008000c4 	movi	r2,3
61029e08:	00c80034 	movhi	r3,8192
61029e0c:	18ffffc4 	addi	r3,r3,-1
61029e10:	a2400317 	ldw	r9,12(r20)
61029e14:	a0800015 	stw	r2,0(r20)
61029e18:	1a802336 	bltu	r3,r10,61029ea8 <_fpadd_parts+0x250>
61029e1c:	a027883a 	mov	r19,r20
61029e20:	9805883a 	mov	r2,r19
61029e24:	ddc00717 	ldw	r23,28(sp)
61029e28:	dd800617 	ldw	r22,24(sp)
61029e2c:	dd400517 	ldw	r21,20(sp)
61029e30:	dd000417 	ldw	r20,16(sp)
61029e34:	dcc00317 	ldw	r19,12(sp)
61029e38:	dc800217 	ldw	r18,8(sp)
61029e3c:	dc400117 	ldw	r17,4(sp)
61029e40:	dc000017 	ldw	r16,0(sp)
61029e44:	dec00804 	addi	sp,sp,32
61029e48:	f800283a 	ret
61029e4c:	20fff41e 	bne	r4,r3,61029e20 <_fpadd_parts+0x1c8>
61029e50:	31000015 	stw	r4,0(r6)
61029e54:	98800117 	ldw	r2,4(r19)
61029e58:	30800115 	stw	r2,4(r6)
61029e5c:	98c00217 	ldw	r3,8(r19)
61029e60:	30c00215 	stw	r3,8(r6)
61029e64:	98800317 	ldw	r2,12(r19)
61029e68:	30800315 	stw	r2,12(r6)
61029e6c:	98c00417 	ldw	r3,16(r19)
61029e70:	30c00415 	stw	r3,16(r6)
61029e74:	98800117 	ldw	r2,4(r19)
61029e78:	28c00117 	ldw	r3,4(r5)
61029e7c:	3027883a 	mov	r19,r6
61029e80:	10c4703a 	and	r2,r2,r3
61029e84:	30800115 	stw	r2,4(r6)
61029e88:	003fe506 	br	61029e20 <_fpadd_parts+0x1c8>
61029e8c:	1dc02616 	blt	r3,r23,61029f28 <_fpadd_parts+0x2d0>
61029e90:	0023883a 	mov	r17,zero
61029e94:	182f883a 	mov	r23,r3
61029e98:	0025883a 	mov	r18,zero
61029e9c:	003fa806 	br	61029d40 <_fpadd_parts+0xe8>
61029ea0:	a827883a 	mov	r19,r21
61029ea4:	003fde06 	br	61029e20 <_fpadd_parts+0x1c8>
61029ea8:	01800044 	movi	r6,1
61029eac:	500497fa 	slli	r2,r10,31
61029eb0:	4808d07a 	srli	r4,r9,1
61029eb4:	518ad83a 	srl	r5,r10,r6
61029eb8:	a2000217 	ldw	r8,8(r20)
61029ebc:	1108b03a 	or	r4,r2,r4
61029ec0:	0007883a 	mov	r3,zero
61029ec4:	4984703a 	and	r2,r9,r6
61029ec8:	208cb03a 	or	r6,r4,r2
61029ecc:	28ceb03a 	or	r7,r5,r3
61029ed0:	42000044 	addi	r8,r8,1
61029ed4:	a027883a 	mov	r19,r20
61029ed8:	a1c00415 	stw	r7,16(r20)
61029edc:	a2000215 	stw	r8,8(r20)
61029ee0:	a1800315 	stw	r6,12(r20)
61029ee4:	003fce06 	br	61029e20 <_fpadd_parts+0x1c8>
61029ee8:	8bc5c83a 	sub	r2,r17,r15
61029eec:	8889803a 	cmpltu	r4,r17,r2
61029ef0:	9407c83a 	sub	r3,r18,r16
61029ef4:	1909c83a 	sub	r4,r3,r4
61029ef8:	100d883a 	mov	r6,r2
61029efc:	200f883a 	mov	r7,r4
61029f00:	003f9906 	br	61029d68 <_fpadd_parts+0x110>
61029f04:	7c45883a 	add	r2,r15,r17
61029f08:	13c9803a 	cmpltu	r4,r2,r15
61029f0c:	8487883a 	add	r3,r16,r18
61029f10:	20c9883a 	add	r4,r4,r3
61029f14:	a1400115 	stw	r5,4(r20)
61029f18:	a5c00215 	stw	r23,8(r20)
61029f1c:	a0800315 	stw	r2,12(r20)
61029f20:	a1000415 	stw	r4,16(r20)
61029f24:	003fb606 	br	61029e00 <_fpadd_parts+0x1a8>
61029f28:	001f883a 	mov	r15,zero
61029f2c:	0021883a 	mov	r16,zero
61029f30:	003f8306 	br	61029d40 <_fpadd_parts+0xe8>
61029f34:	018dc83a 	sub	r6,zero,r6
61029f38:	003f6706 	br	61029cd8 <_fpadd_parts+0x80>
61029f3c:	00bfff84 	movi	r2,-2
61029f40:	117faf36 	bltu	r2,r5,61029e00 <_fpadd_parts+0x1a8>
61029f44:	003f9806 	br	61029da8 <_fpadd_parts+0x150>
61029f48:	0005883a 	mov	r2,zero
61029f4c:	1189c83a 	sub	r4,r2,r6
61029f50:	1105803a 	cmpltu	r2,r2,r4
61029f54:	01cbc83a 	sub	r5,zero,r7
61029f58:	2885c83a 	sub	r2,r5,r2
61029f5c:	01800044 	movi	r6,1
61029f60:	a1800115 	stw	r6,4(r20)
61029f64:	a5c00215 	stw	r23,8(r20)
61029f68:	a1000315 	stw	r4,12(r20)
61029f6c:	a0800415 	stw	r2,16(r20)
61029f70:	003f8206 	br	61029d7c <_fpadd_parts+0x124>
61029f74:	203f7226 	beq	r4,zero,61029d40 <_fpadd_parts+0xe8>
61029f78:	35bff804 	addi	r22,r6,-32
61029f7c:	b9af883a 	add	r23,r23,r6
61029f80:	b0003116 	blt	r22,zero,6102a048 <_fpadd_parts+0x3f0>
61029f84:	959ad83a 	srl	r13,r18,r22
61029f88:	001d883a 	mov	r14,zero
61029f8c:	000f883a 	mov	r7,zero
61029f90:	01000044 	movi	r4,1
61029f94:	0011883a 	mov	r8,zero
61029f98:	b0002516 	blt	r22,zero,6102a030 <_fpadd_parts+0x3d8>
61029f9c:	2594983a 	sll	r10,r4,r22
61029fa0:	0013883a 	mov	r9,zero
61029fa4:	00bfffc4 	movi	r2,-1
61029fa8:	4889883a 	add	r4,r9,r2
61029fac:	508b883a 	add	r5,r10,r2
61029fb0:	224d803a 	cmpltu	r6,r4,r9
61029fb4:	314b883a 	add	r5,r6,r5
61029fb8:	8904703a 	and	r2,r17,r4
61029fbc:	9146703a 	and	r3,r18,r5
61029fc0:	10c4b03a 	or	r2,r2,r3
61029fc4:	10000226 	beq	r2,zero,61029fd0 <_fpadd_parts+0x378>
61029fc8:	01c00044 	movi	r7,1
61029fcc:	0011883a 	mov	r8,zero
61029fd0:	69e2b03a 	or	r17,r13,r7
61029fd4:	7224b03a 	or	r18,r14,r8
61029fd8:	003f5906 	br	61029d40 <_fpadd_parts+0xe8>
61029fdc:	8407883a 	add	r3,r16,r16
61029fe0:	008007c4 	movi	r2,31
61029fe4:	1185c83a 	sub	r2,r2,r6
61029fe8:	1886983a 	sll	r3,r3,r2
61029fec:	7996d83a 	srl	r11,r15,r6
61029ff0:	8198d83a 	srl	r12,r16,r6
61029ff4:	1ad6b03a 	or	r11,r3,r11
61029ff8:	003f3e06 	br	61029cf4 <_fpadd_parts+0x9c>
61029ffc:	2006d07a 	srli	r3,r4,1
6102a000:	008007c4 	movi	r2,31
6102a004:	1185c83a 	sub	r2,r2,r6
6102a008:	1890d83a 	srl	r8,r3,r2
6102a00c:	218e983a 	sll	r7,r4,r6
6102a010:	003f3e06 	br	61029d0c <_fpadd_parts+0xb4>
6102a014:	113f821e 	bne	r2,r4,61029e20 <_fpadd_parts+0x1c8>
6102a018:	28c00117 	ldw	r3,4(r5)
6102a01c:	98800117 	ldw	r2,4(r19)
6102a020:	10ff7f26 	beq	r2,r3,61029e20 <_fpadd_parts+0x1c8>
6102a024:	04d840f4 	movhi	r19,24835
6102a028:	9cf82304 	addi	r19,r19,-8052
6102a02c:	003f7c06 	br	61029e20 <_fpadd_parts+0x1c8>
6102a030:	2006d07a 	srli	r3,r4,1
6102a034:	008007c4 	movi	r2,31
6102a038:	1185c83a 	sub	r2,r2,r6
6102a03c:	1894d83a 	srl	r10,r3,r2
6102a040:	2192983a 	sll	r9,r4,r6
6102a044:	003fd706 	br	61029fa4 <_fpadd_parts+0x34c>
6102a048:	9487883a 	add	r3,r18,r18
6102a04c:	008007c4 	movi	r2,31
6102a050:	1185c83a 	sub	r2,r2,r6
6102a054:	1886983a 	sll	r3,r3,r2
6102a058:	899ad83a 	srl	r13,r17,r6
6102a05c:	919cd83a 	srl	r14,r18,r6
6102a060:	1b5ab03a 	or	r13,r3,r13
6102a064:	003fc906 	br	61029f8c <_fpadd_parts+0x334>

6102a068 <__subdf3>:
6102a068:	deffea04 	addi	sp,sp,-88
6102a06c:	dcc01415 	stw	r19,80(sp)
6102a070:	dcc00404 	addi	r19,sp,16
6102a074:	2011883a 	mov	r8,r4
6102a078:	2813883a 	mov	r9,r5
6102a07c:	dc401315 	stw	r17,76(sp)
6102a080:	d809883a 	mov	r4,sp
6102a084:	980b883a 	mov	r5,r19
6102a088:	dc400904 	addi	r17,sp,36
6102a08c:	dfc01515 	stw	ra,84(sp)
6102a090:	da400115 	stw	r9,4(sp)
6102a094:	d9c00315 	stw	r7,12(sp)
6102a098:	da000015 	stw	r8,0(sp)
6102a09c:	d9800215 	stw	r6,8(sp)
6102a0a0:	102ad740 	call	6102ad74 <__unpack_d>
6102a0a4:	d9000204 	addi	r4,sp,8
6102a0a8:	880b883a 	mov	r5,r17
6102a0ac:	102ad740 	call	6102ad74 <__unpack_d>
6102a0b0:	d8800a17 	ldw	r2,40(sp)
6102a0b4:	880b883a 	mov	r5,r17
6102a0b8:	9809883a 	mov	r4,r19
6102a0bc:	d9800e04 	addi	r6,sp,56
6102a0c0:	1080005c 	xori	r2,r2,1
6102a0c4:	d8800a15 	stw	r2,40(sp)
6102a0c8:	1029c580 	call	61029c58 <_fpadd_parts>
6102a0cc:	1009883a 	mov	r4,r2
6102a0d0:	10217480 	call	61021748 <__pack_d>
6102a0d4:	dfc01517 	ldw	ra,84(sp)
6102a0d8:	dcc01417 	ldw	r19,80(sp)
6102a0dc:	dc401317 	ldw	r17,76(sp)
6102a0e0:	dec01604 	addi	sp,sp,88
6102a0e4:	f800283a 	ret

6102a0e8 <__adddf3>:
6102a0e8:	deffea04 	addi	sp,sp,-88
6102a0ec:	dcc01415 	stw	r19,80(sp)
6102a0f0:	dcc00404 	addi	r19,sp,16
6102a0f4:	2011883a 	mov	r8,r4
6102a0f8:	2813883a 	mov	r9,r5
6102a0fc:	dc401315 	stw	r17,76(sp)
6102a100:	d809883a 	mov	r4,sp
6102a104:	980b883a 	mov	r5,r19
6102a108:	dc400904 	addi	r17,sp,36
6102a10c:	dfc01515 	stw	ra,84(sp)
6102a110:	da400115 	stw	r9,4(sp)
6102a114:	d9c00315 	stw	r7,12(sp)
6102a118:	da000015 	stw	r8,0(sp)
6102a11c:	d9800215 	stw	r6,8(sp)
6102a120:	102ad740 	call	6102ad74 <__unpack_d>
6102a124:	d9000204 	addi	r4,sp,8
6102a128:	880b883a 	mov	r5,r17
6102a12c:	102ad740 	call	6102ad74 <__unpack_d>
6102a130:	d9800e04 	addi	r6,sp,56
6102a134:	9809883a 	mov	r4,r19
6102a138:	880b883a 	mov	r5,r17
6102a13c:	1029c580 	call	61029c58 <_fpadd_parts>
6102a140:	1009883a 	mov	r4,r2
6102a144:	10217480 	call	61021748 <__pack_d>
6102a148:	dfc01517 	ldw	ra,84(sp)
6102a14c:	dcc01417 	ldw	r19,80(sp)
6102a150:	dc401317 	ldw	r17,76(sp)
6102a154:	dec01604 	addi	sp,sp,88
6102a158:	f800283a 	ret

6102a15c <__muldf3>:
6102a15c:	deffdd04 	addi	sp,sp,-140
6102a160:	df002115 	stw	fp,132(sp)
6102a164:	df000404 	addi	fp,sp,16
6102a168:	2011883a 	mov	r8,r4
6102a16c:	2813883a 	mov	r9,r5
6102a170:	d809883a 	mov	r4,sp
6102a174:	e00b883a 	mov	r5,fp
6102a178:	dfc02215 	stw	ra,136(sp)
6102a17c:	da400115 	stw	r9,4(sp)
6102a180:	d9c00315 	stw	r7,12(sp)
6102a184:	da000015 	stw	r8,0(sp)
6102a188:	d9800215 	stw	r6,8(sp)
6102a18c:	ddc02015 	stw	r23,128(sp)
6102a190:	dd801f15 	stw	r22,124(sp)
6102a194:	dd401e15 	stw	r21,120(sp)
6102a198:	dd001d15 	stw	r20,116(sp)
6102a19c:	dcc01c15 	stw	r19,112(sp)
6102a1a0:	dc801b15 	stw	r18,108(sp)
6102a1a4:	dc401a15 	stw	r17,104(sp)
6102a1a8:	dc001915 	stw	r16,100(sp)
6102a1ac:	102ad740 	call	6102ad74 <__unpack_d>
6102a1b0:	d9000204 	addi	r4,sp,8
6102a1b4:	d9400904 	addi	r5,sp,36
6102a1b8:	102ad740 	call	6102ad74 <__unpack_d>
6102a1bc:	d9000417 	ldw	r4,16(sp)
6102a1c0:	00800044 	movi	r2,1
6102a1c4:	1100102e 	bgeu	r2,r4,6102a208 <__muldf3+0xac>
6102a1c8:	d8c00917 	ldw	r3,36(sp)
6102a1cc:	10c0062e 	bgeu	r2,r3,6102a1e8 <__muldf3+0x8c>
6102a1d0:	00800104 	movi	r2,4
6102a1d4:	20800a26 	beq	r4,r2,6102a200 <__muldf3+0xa4>
6102a1d8:	1880c826 	beq	r3,r2,6102a4fc <__muldf3+0x3a0>
6102a1dc:	00800084 	movi	r2,2
6102a1e0:	20800926 	beq	r4,r2,6102a208 <__muldf3+0xac>
6102a1e4:	18801a1e 	bne	r3,r2,6102a250 <__muldf3+0xf4>
6102a1e8:	d8c00a17 	ldw	r3,40(sp)
6102a1ec:	d8800517 	ldw	r2,20(sp)
6102a1f0:	d9000904 	addi	r4,sp,36
6102a1f4:	10c4c03a 	cmpne	r2,r2,r3
6102a1f8:	d8800a15 	stw	r2,40(sp)
6102a1fc:	00000706 	br	6102a21c <__muldf3+0xc0>
6102a200:	00800084 	movi	r2,2
6102a204:	1880bf26 	beq	r3,r2,6102a504 <__muldf3+0x3a8>
6102a208:	d8800517 	ldw	r2,20(sp)
6102a20c:	d8c00a17 	ldw	r3,40(sp)
6102a210:	e009883a 	mov	r4,fp
6102a214:	10c4c03a 	cmpne	r2,r2,r3
6102a218:	d8800515 	stw	r2,20(sp)
6102a21c:	10217480 	call	61021748 <__pack_d>
6102a220:	dfc02217 	ldw	ra,136(sp)
6102a224:	df002117 	ldw	fp,132(sp)
6102a228:	ddc02017 	ldw	r23,128(sp)
6102a22c:	dd801f17 	ldw	r22,124(sp)
6102a230:	dd401e17 	ldw	r21,120(sp)
6102a234:	dd001d17 	ldw	r20,116(sp)
6102a238:	dcc01c17 	ldw	r19,112(sp)
6102a23c:	dc801b17 	ldw	r18,108(sp)
6102a240:	dc401a17 	ldw	r17,104(sp)
6102a244:	dc001917 	ldw	r16,100(sp)
6102a248:	dec02304 	addi	sp,sp,140
6102a24c:	f800283a 	ret
6102a250:	db000c17 	ldw	r12,48(sp)
6102a254:	db800717 	ldw	r14,28(sp)
6102a258:	dbc00817 	ldw	r15,32(sp)
6102a25c:	db400d17 	ldw	r13,52(sp)
6102a260:	6009883a 	mov	r4,r12
6102a264:	000d883a 	mov	r6,zero
6102a268:	0011883a 	mov	r8,zero
6102a26c:	000b883a 	mov	r5,zero
6102a270:	0007883a 	mov	r3,zero
6102a274:	0019883a 	mov	r12,zero
6102a278:	4393383a 	mul	r9,r8,r14
6102a27c:	d9801415 	stw	r6,80(sp)
6102a280:	6111383a 	mul	r8,r12,r4
6102a284:	d9801615 	stw	r6,88(sp)
6102a288:	1b4f383a 	mul	r7,r3,r13
6102a28c:	2bcd383a 	mul	r6,r5,r15
6102a290:	7361383a 	mul	r16,r14,r13
6102a294:	23e5383a 	mul	r18,r4,r15
6102a298:	7362383a 	mulxuu	r17,r14,r13
6102a29c:	23e6383a 	mulxuu	r19,r4,r15
6102a2a0:	3a4f883a 	add	r7,r7,r9
6102a2a4:	320d883a 	add	r6,r6,r8
6102a2a8:	3c63883a 	add	r17,r7,r17
6102a2ac:	34e7883a 	add	r19,r6,r19
6102a2b0:	8495883a 	add	r10,r16,r18
6102a2b4:	23aa383a 	mulxuu	r21,r4,r14
6102a2b8:	540f803a 	cmpltu	r7,r10,r16
6102a2bc:	8cd7883a 	add	r11,r17,r19
6102a2c0:	3acf883a 	add	r7,r7,r11
6102a2c4:	4a0d883a 	add	r6,r9,r8
6102a2c8:	db401315 	stw	r13,76(sp)
6102a2cc:	dbc01515 	stw	r15,84(sp)
6102a2d0:	23a9383a 	mul	r20,r4,r14
6102a2d4:	da801715 	stw	r10,92(sp)
6102a2d8:	d9c01815 	stw	r7,96(sp)
6102a2dc:	356b883a 	add	r21,r6,r21
6102a2e0:	3c40682e 	bgeu	r7,r17,6102a484 <__muldf3+0x328>
6102a2e4:	000f883a 	mov	r7,zero
6102a2e8:	02000044 	movi	r8,1
6102a2ec:	d9401717 	ldw	r5,92(sp)
6102a2f0:	0009883a 	mov	r4,zero
6102a2f4:	a105883a 	add	r2,r20,r4
6102a2f8:	150d803a 	cmpltu	r6,r2,r20
6102a2fc:	a947883a 	add	r3,r21,r5
6102a300:	30cd883a 	add	r6,r6,r3
6102a304:	101f883a 	mov	r15,r2
6102a308:	3021883a 	mov	r16,r6
6102a30c:	35406236 	bltu	r6,r21,6102a498 <__muldf3+0x33c>
6102a310:	a9806026 	beq	r21,r6,6102a494 <__muldf3+0x338>
6102a314:	d9801317 	ldw	r6,76(sp)
6102a318:	db001517 	ldw	r12,84(sp)
6102a31c:	d8c01417 	ldw	r3,80(sp)
6102a320:	d9401617 	ldw	r5,88(sp)
6102a324:	6009883a 	mov	r4,r12
6102a328:	1b05383a 	mul	r2,r3,r12
6102a32c:	2987383a 	mul	r3,r5,r6
6102a330:	332d383a 	mul	r22,r6,r12
6102a334:	312e383a 	mulxuu	r23,r6,r4
6102a338:	d9801817 	ldw	r6,96(sp)
6102a33c:	10c5883a 	add	r2,r2,r3
6102a340:	15ef883a 	add	r23,r2,r23
6102a344:	000b883a 	mov	r5,zero
6102a348:	b185883a 	add	r2,r22,r6
6102a34c:	158d803a 	cmpltu	r6,r2,r22
6102a350:	b947883a 	add	r3,r23,r5
6102a354:	30c7883a 	add	r3,r6,r3
6102a358:	40cb883a 	add	r5,r8,r3
6102a35c:	d8c00617 	ldw	r3,24(sp)
6102a360:	3889883a 	add	r4,r7,r2
6102a364:	d8800b17 	ldw	r2,44(sp)
6102a368:	18c00104 	addi	r3,r3,4
6102a36c:	21cd803a 	cmpltu	r6,r4,r7
6102a370:	10c7883a 	add	r3,r2,r3
6102a374:	2013883a 	mov	r9,r4
6102a378:	d8800a17 	ldw	r2,40(sp)
6102a37c:	d9000517 	ldw	r4,20(sp)
6102a380:	314d883a 	add	r6,r6,r5
6102a384:	3015883a 	mov	r10,r6
6102a388:	2088c03a 	cmpne	r4,r4,r2
6102a38c:	00880034 	movhi	r2,8192
6102a390:	10bfffc4 	addi	r2,r2,-1
6102a394:	d9000f15 	stw	r4,60(sp)
6102a398:	d8c01015 	stw	r3,64(sp)
6102a39c:	1180162e 	bgeu	r2,r6,6102a3f8 <__muldf3+0x29c>
6102a3a0:	1811883a 	mov	r8,r3
6102a3a4:	1023883a 	mov	r17,r2
6102a3a8:	800497fa 	slli	r2,r16,31
6102a3ac:	7816d07a 	srli	r11,r15,1
6102a3b0:	500697fa 	slli	r3,r10,31
6102a3b4:	480cd07a 	srli	r6,r9,1
6102a3b8:	500ed07a 	srli	r7,r10,1
6102a3bc:	12d6b03a 	or	r11,r2,r11
6102a3c0:	00800044 	movi	r2,1
6102a3c4:	198cb03a 	or	r6,r3,r6
6102a3c8:	4888703a 	and	r4,r9,r2
6102a3cc:	8018d07a 	srli	r12,r16,1
6102a3d0:	001b883a 	mov	r13,zero
6102a3d4:	03a00034 	movhi	r14,32768
6102a3d8:	3013883a 	mov	r9,r6
6102a3dc:	3815883a 	mov	r10,r7
6102a3e0:	4091883a 	add	r8,r8,r2
6102a3e4:	20000226 	beq	r4,zero,6102a3f0 <__muldf3+0x294>
6102a3e8:	5b5eb03a 	or	r15,r11,r13
6102a3ec:	63a0b03a 	or	r16,r12,r14
6102a3f0:	8abfed36 	bltu	r17,r10,6102a3a8 <__muldf3+0x24c>
6102a3f4:	da001015 	stw	r8,64(sp)
6102a3f8:	00840034 	movhi	r2,4096
6102a3fc:	10bfffc4 	addi	r2,r2,-1
6102a400:	12801436 	bltu	r2,r10,6102a454 <__muldf3+0x2f8>
6102a404:	da001017 	ldw	r8,64(sp)
6102a408:	1023883a 	mov	r17,r2
6102a40c:	4a45883a 	add	r2,r9,r9
6102a410:	124d803a 	cmpltu	r6,r2,r9
6102a414:	5287883a 	add	r3,r10,r10
6102a418:	7bd7883a 	add	r11,r15,r15
6102a41c:	5bcf803a 	cmpltu	r7,r11,r15
6102a420:	8419883a 	add	r12,r16,r16
6102a424:	01000044 	movi	r4,1
6102a428:	30cd883a 	add	r6,r6,r3
6102a42c:	3b0f883a 	add	r7,r7,r12
6102a430:	423fffc4 	addi	r8,r8,-1
6102a434:	1013883a 	mov	r9,r2
6102a438:	3015883a 	mov	r10,r6
6102a43c:	111ab03a 	or	r13,r2,r4
6102a440:	80002a16 	blt	r16,zero,6102a4ec <__muldf3+0x390>
6102a444:	581f883a 	mov	r15,r11
6102a448:	3821883a 	mov	r16,r7
6102a44c:	8abfef2e 	bgeu	r17,r10,6102a40c <__muldf3+0x2b0>
6102a450:	da001015 	stw	r8,64(sp)
6102a454:	00803fc4 	movi	r2,255
6102a458:	488e703a 	and	r7,r9,r2
6102a45c:	00802004 	movi	r2,128
6102a460:	0007883a 	mov	r3,zero
6102a464:	0011883a 	mov	r8,zero
6102a468:	38801226 	beq	r7,r2,6102a4b4 <__muldf3+0x358>
6102a46c:	008000c4 	movi	r2,3
6102a470:	d9000e04 	addi	r4,sp,56
6102a474:	da801215 	stw	r10,72(sp)
6102a478:	d8800e15 	stw	r2,56(sp)
6102a47c:	da401115 	stw	r9,68(sp)
6102a480:	003f6606 	br	6102a21c <__muldf3+0xc0>
6102a484:	89c01b26 	beq	r17,r7,6102a4f4 <__muldf3+0x398>
6102a488:	000f883a 	mov	r7,zero
6102a48c:	0011883a 	mov	r8,zero
6102a490:	003f9606 	br	6102a2ec <__muldf3+0x190>
6102a494:	153f9f2e 	bgeu	r2,r20,6102a314 <__muldf3+0x1b8>
6102a498:	00800044 	movi	r2,1
6102a49c:	3889883a 	add	r4,r7,r2
6102a4a0:	21cd803a 	cmpltu	r6,r4,r7
6102a4a4:	320d883a 	add	r6,r6,r8
6102a4a8:	200f883a 	mov	r7,r4
6102a4ac:	3011883a 	mov	r8,r6
6102a4b0:	003f9806 	br	6102a314 <__muldf3+0x1b8>
6102a4b4:	403fed1e 	bne	r8,zero,6102a46c <__muldf3+0x310>
6102a4b8:	01004004 	movi	r4,256
6102a4bc:	4904703a 	and	r2,r9,r4
6102a4c0:	10c4b03a 	or	r2,r2,r3
6102a4c4:	103fe91e 	bne	r2,zero,6102a46c <__muldf3+0x310>
6102a4c8:	7c04b03a 	or	r2,r15,r16
6102a4cc:	103fe726 	beq	r2,zero,6102a46c <__muldf3+0x310>
6102a4d0:	49c5883a 	add	r2,r9,r7
6102a4d4:	1251803a 	cmpltu	r8,r2,r9
6102a4d8:	4291883a 	add	r8,r8,r10
6102a4dc:	013fc004 	movi	r4,-256
6102a4e0:	1112703a 	and	r9,r2,r4
6102a4e4:	4015883a 	mov	r10,r8
6102a4e8:	003fe006 	br	6102a46c <__muldf3+0x310>
6102a4ec:	6813883a 	mov	r9,r13
6102a4f0:	003fd406 	br	6102a444 <__muldf3+0x2e8>
6102a4f4:	543f7b36 	bltu	r10,r16,6102a2e4 <__muldf3+0x188>
6102a4f8:	003fe306 	br	6102a488 <__muldf3+0x32c>
6102a4fc:	00800084 	movi	r2,2
6102a500:	20bf391e 	bne	r4,r2,6102a1e8 <__muldf3+0x8c>
6102a504:	011840f4 	movhi	r4,24835
6102a508:	21382304 	addi	r4,r4,-8052
6102a50c:	003f4306 	br	6102a21c <__muldf3+0xc0>

6102a510 <__divdf3>:
6102a510:	deffed04 	addi	sp,sp,-76
6102a514:	dcc01115 	stw	r19,68(sp)
6102a518:	dcc00404 	addi	r19,sp,16
6102a51c:	2011883a 	mov	r8,r4
6102a520:	2813883a 	mov	r9,r5
6102a524:	dc000e15 	stw	r16,56(sp)
6102a528:	d809883a 	mov	r4,sp
6102a52c:	980b883a 	mov	r5,r19
6102a530:	dc000904 	addi	r16,sp,36
6102a534:	dfc01215 	stw	ra,72(sp)
6102a538:	da400115 	stw	r9,4(sp)
6102a53c:	d9c00315 	stw	r7,12(sp)
6102a540:	da000015 	stw	r8,0(sp)
6102a544:	d9800215 	stw	r6,8(sp)
6102a548:	dc801015 	stw	r18,64(sp)
6102a54c:	dc400f15 	stw	r17,60(sp)
6102a550:	102ad740 	call	6102ad74 <__unpack_d>
6102a554:	d9000204 	addi	r4,sp,8
6102a558:	800b883a 	mov	r5,r16
6102a55c:	102ad740 	call	6102ad74 <__unpack_d>
6102a560:	d9000417 	ldw	r4,16(sp)
6102a564:	00800044 	movi	r2,1
6102a568:	11000b2e 	bgeu	r2,r4,6102a598 <__divdf3+0x88>
6102a56c:	d9400917 	ldw	r5,36(sp)
6102a570:	1140762e 	bgeu	r2,r5,6102a74c <__divdf3+0x23c>
6102a574:	d8800517 	ldw	r2,20(sp)
6102a578:	d8c00a17 	ldw	r3,40(sp)
6102a57c:	01800104 	movi	r6,4
6102a580:	10c4f03a 	xor	r2,r2,r3
6102a584:	d8800515 	stw	r2,20(sp)
6102a588:	21800226 	beq	r4,r6,6102a594 <__divdf3+0x84>
6102a58c:	00800084 	movi	r2,2
6102a590:	2080141e 	bne	r4,r2,6102a5e4 <__divdf3+0xd4>
6102a594:	29000926 	beq	r5,r4,6102a5bc <__divdf3+0xac>
6102a598:	9809883a 	mov	r4,r19
6102a59c:	10217480 	call	61021748 <__pack_d>
6102a5a0:	dfc01217 	ldw	ra,72(sp)
6102a5a4:	dcc01117 	ldw	r19,68(sp)
6102a5a8:	dc801017 	ldw	r18,64(sp)
6102a5ac:	dc400f17 	ldw	r17,60(sp)
6102a5b0:	dc000e17 	ldw	r16,56(sp)
6102a5b4:	dec01304 	addi	sp,sp,76
6102a5b8:	f800283a 	ret
6102a5bc:	011840f4 	movhi	r4,24835
6102a5c0:	21382304 	addi	r4,r4,-8052
6102a5c4:	10217480 	call	61021748 <__pack_d>
6102a5c8:	dfc01217 	ldw	ra,72(sp)
6102a5cc:	dcc01117 	ldw	r19,68(sp)
6102a5d0:	dc801017 	ldw	r18,64(sp)
6102a5d4:	dc400f17 	ldw	r17,60(sp)
6102a5d8:	dc000e17 	ldw	r16,56(sp)
6102a5dc:	dec01304 	addi	sp,sp,76
6102a5e0:	f800283a 	ret
6102a5e4:	29805b26 	beq	r5,r6,6102a754 <__divdf3+0x244>
6102a5e8:	28802d26 	beq	r5,r2,6102a6a0 <__divdf3+0x190>
6102a5ec:	d8c00617 	ldw	r3,24(sp)
6102a5f0:	d8800b17 	ldw	r2,44(sp)
6102a5f4:	d9c00817 	ldw	r7,32(sp)
6102a5f8:	dc400d17 	ldw	r17,52(sp)
6102a5fc:	188bc83a 	sub	r5,r3,r2
6102a600:	d9800717 	ldw	r6,28(sp)
6102a604:	dc000c17 	ldw	r16,48(sp)
6102a608:	d9400615 	stw	r5,24(sp)
6102a60c:	3c403836 	bltu	r7,r17,6102a6f0 <__divdf3+0x1e0>
6102a610:	89c03626 	beq	r17,r7,6102a6ec <__divdf3+0x1dc>
6102a614:	0015883a 	mov	r10,zero
6102a618:	001d883a 	mov	r14,zero
6102a61c:	02c40034 	movhi	r11,4096
6102a620:	001f883a 	mov	r15,zero
6102a624:	003f883a 	mov	ra,zero
6102a628:	04800f44 	movi	r18,61
6102a62c:	00000f06 	br	6102a66c <__divdf3+0x15c>
6102a630:	601d883a 	mov	r14,r12
6102a634:	681f883a 	mov	r15,r13
6102a638:	400d883a 	mov	r6,r8
6102a63c:	100f883a 	mov	r7,r2
6102a640:	3191883a 	add	r8,r6,r6
6102a644:	5808d07a 	srli	r4,r11,1
6102a648:	4185803a 	cmpltu	r2,r8,r6
6102a64c:	39d3883a 	add	r9,r7,r7
6102a650:	28c6b03a 	or	r3,r5,r3
6102a654:	1245883a 	add	r2,r2,r9
6102a658:	1815883a 	mov	r10,r3
6102a65c:	2017883a 	mov	r11,r4
6102a660:	400d883a 	mov	r6,r8
6102a664:	100f883a 	mov	r7,r2
6102a668:	fc801726 	beq	ra,r18,6102a6c8 <__divdf3+0x1b8>
6102a66c:	580a97fa 	slli	r5,r11,31
6102a670:	5006d07a 	srli	r3,r10,1
6102a674:	ffc00044 	addi	ra,ra,1
6102a678:	3c7ff136 	bltu	r7,r17,6102a640 <__divdf3+0x130>
6102a67c:	3411c83a 	sub	r8,r6,r16
6102a680:	3205803a 	cmpltu	r2,r6,r8
6102a684:	3c53c83a 	sub	r9,r7,r17
6102a688:	7298b03a 	or	r12,r14,r10
6102a68c:	7adab03a 	or	r13,r15,r11
6102a690:	4885c83a 	sub	r2,r9,r2
6102a694:	89ffe61e 	bne	r17,r7,6102a630 <__divdf3+0x120>
6102a698:	343fe936 	bltu	r6,r16,6102a640 <__divdf3+0x130>
6102a69c:	003fe406 	br	6102a630 <__divdf3+0x120>
6102a6a0:	9809883a 	mov	r4,r19
6102a6a4:	d9800415 	stw	r6,16(sp)
6102a6a8:	10217480 	call	61021748 <__pack_d>
6102a6ac:	dfc01217 	ldw	ra,72(sp)
6102a6b0:	dcc01117 	ldw	r19,68(sp)
6102a6b4:	dc801017 	ldw	r18,64(sp)
6102a6b8:	dc400f17 	ldw	r17,60(sp)
6102a6bc:	dc000e17 	ldw	r16,56(sp)
6102a6c0:	dec01304 	addi	sp,sp,76
6102a6c4:	f800283a 	ret
6102a6c8:	00803fc4 	movi	r2,255
6102a6cc:	7090703a 	and	r8,r14,r2
6102a6d0:	00802004 	movi	r2,128
6102a6d4:	0007883a 	mov	r3,zero
6102a6d8:	0013883a 	mov	r9,zero
6102a6dc:	40800d26 	beq	r8,r2,6102a714 <__divdf3+0x204>
6102a6e0:	dbc00815 	stw	r15,32(sp)
6102a6e4:	db800715 	stw	r14,28(sp)
6102a6e8:	003fab06 	br	6102a598 <__divdf3+0x88>
6102a6ec:	343fc92e 	bgeu	r6,r16,6102a614 <__divdf3+0x104>
6102a6f0:	3185883a 	add	r2,r6,r6
6102a6f4:	1189803a 	cmpltu	r4,r2,r6
6102a6f8:	39c7883a 	add	r3,r7,r7
6102a6fc:	20c9883a 	add	r4,r4,r3
6102a700:	297fffc4 	addi	r5,r5,-1
6102a704:	100d883a 	mov	r6,r2
6102a708:	200f883a 	mov	r7,r4
6102a70c:	d9400615 	stw	r5,24(sp)
6102a710:	003fc006 	br	6102a614 <__divdf3+0x104>
6102a714:	483ff21e 	bne	r9,zero,6102a6e0 <__divdf3+0x1d0>
6102a718:	01004004 	movi	r4,256
6102a71c:	7104703a 	and	r2,r14,r4
6102a720:	10c4b03a 	or	r2,r2,r3
6102a724:	103fee1e 	bne	r2,zero,6102a6e0 <__divdf3+0x1d0>
6102a728:	31c4b03a 	or	r2,r6,r7
6102a72c:	103fec26 	beq	r2,zero,6102a6e0 <__divdf3+0x1d0>
6102a730:	7205883a 	add	r2,r14,r8
6102a734:	1391803a 	cmpltu	r8,r2,r14
6102a738:	43d1883a 	add	r8,r8,r15
6102a73c:	013fc004 	movi	r4,-256
6102a740:	111c703a 	and	r14,r2,r4
6102a744:	401f883a 	mov	r15,r8
6102a748:	003fe506 	br	6102a6e0 <__divdf3+0x1d0>
6102a74c:	8009883a 	mov	r4,r16
6102a750:	003f9206 	br	6102a59c <__divdf3+0x8c>
6102a754:	9809883a 	mov	r4,r19
6102a758:	d8000715 	stw	zero,28(sp)
6102a75c:	d8000815 	stw	zero,32(sp)
6102a760:	d8000615 	stw	zero,24(sp)
6102a764:	003f8d06 	br	6102a59c <__divdf3+0x8c>

6102a768 <__eqdf2>:
6102a768:	deffef04 	addi	sp,sp,-68
6102a76c:	dc400f15 	stw	r17,60(sp)
6102a770:	dc400404 	addi	r17,sp,16
6102a774:	2005883a 	mov	r2,r4
6102a778:	2807883a 	mov	r3,r5
6102a77c:	dc000e15 	stw	r16,56(sp)
6102a780:	d809883a 	mov	r4,sp
6102a784:	880b883a 	mov	r5,r17
6102a788:	dc000904 	addi	r16,sp,36
6102a78c:	d8c00115 	stw	r3,4(sp)
6102a790:	d8800015 	stw	r2,0(sp)
6102a794:	d9800215 	stw	r6,8(sp)
6102a798:	dfc01015 	stw	ra,64(sp)
6102a79c:	d9c00315 	stw	r7,12(sp)
6102a7a0:	102ad740 	call	6102ad74 <__unpack_d>
6102a7a4:	d9000204 	addi	r4,sp,8
6102a7a8:	800b883a 	mov	r5,r16
6102a7ac:	102ad740 	call	6102ad74 <__unpack_d>
6102a7b0:	d8800417 	ldw	r2,16(sp)
6102a7b4:	00c00044 	movi	r3,1
6102a7b8:	180d883a 	mov	r6,r3
6102a7bc:	1880062e 	bgeu	r3,r2,6102a7d8 <__eqdf2+0x70>
6102a7c0:	d8800917 	ldw	r2,36(sp)
6102a7c4:	8809883a 	mov	r4,r17
6102a7c8:	800b883a 	mov	r5,r16
6102a7cc:	1880022e 	bgeu	r3,r2,6102a7d8 <__eqdf2+0x70>
6102a7d0:	102aeac0 	call	6102aeac <__fpcmp_parts_d>
6102a7d4:	100d883a 	mov	r6,r2
6102a7d8:	3005883a 	mov	r2,r6
6102a7dc:	dfc01017 	ldw	ra,64(sp)
6102a7e0:	dc400f17 	ldw	r17,60(sp)
6102a7e4:	dc000e17 	ldw	r16,56(sp)
6102a7e8:	dec01104 	addi	sp,sp,68
6102a7ec:	f800283a 	ret

6102a7f0 <__nedf2>:
6102a7f0:	deffef04 	addi	sp,sp,-68
6102a7f4:	dc400f15 	stw	r17,60(sp)
6102a7f8:	dc400404 	addi	r17,sp,16
6102a7fc:	2005883a 	mov	r2,r4
6102a800:	2807883a 	mov	r3,r5
6102a804:	dc000e15 	stw	r16,56(sp)
6102a808:	d809883a 	mov	r4,sp
6102a80c:	880b883a 	mov	r5,r17
6102a810:	dc000904 	addi	r16,sp,36
6102a814:	d8c00115 	stw	r3,4(sp)
6102a818:	d8800015 	stw	r2,0(sp)
6102a81c:	d9800215 	stw	r6,8(sp)
6102a820:	dfc01015 	stw	ra,64(sp)
6102a824:	d9c00315 	stw	r7,12(sp)
6102a828:	102ad740 	call	6102ad74 <__unpack_d>
6102a82c:	d9000204 	addi	r4,sp,8
6102a830:	800b883a 	mov	r5,r16
6102a834:	102ad740 	call	6102ad74 <__unpack_d>
6102a838:	d8800417 	ldw	r2,16(sp)
6102a83c:	00c00044 	movi	r3,1
6102a840:	180d883a 	mov	r6,r3
6102a844:	1880062e 	bgeu	r3,r2,6102a860 <__nedf2+0x70>
6102a848:	d8800917 	ldw	r2,36(sp)
6102a84c:	8809883a 	mov	r4,r17
6102a850:	800b883a 	mov	r5,r16
6102a854:	1880022e 	bgeu	r3,r2,6102a860 <__nedf2+0x70>
6102a858:	102aeac0 	call	6102aeac <__fpcmp_parts_d>
6102a85c:	100d883a 	mov	r6,r2
6102a860:	3005883a 	mov	r2,r6
6102a864:	dfc01017 	ldw	ra,64(sp)
6102a868:	dc400f17 	ldw	r17,60(sp)
6102a86c:	dc000e17 	ldw	r16,56(sp)
6102a870:	dec01104 	addi	sp,sp,68
6102a874:	f800283a 	ret

6102a878 <__gtdf2>:
6102a878:	deffef04 	addi	sp,sp,-68
6102a87c:	dc400f15 	stw	r17,60(sp)
6102a880:	dc400404 	addi	r17,sp,16
6102a884:	2005883a 	mov	r2,r4
6102a888:	2807883a 	mov	r3,r5
6102a88c:	dc000e15 	stw	r16,56(sp)
6102a890:	d809883a 	mov	r4,sp
6102a894:	880b883a 	mov	r5,r17
6102a898:	dc000904 	addi	r16,sp,36
6102a89c:	d8c00115 	stw	r3,4(sp)
6102a8a0:	d8800015 	stw	r2,0(sp)
6102a8a4:	d9800215 	stw	r6,8(sp)
6102a8a8:	dfc01015 	stw	ra,64(sp)
6102a8ac:	d9c00315 	stw	r7,12(sp)
6102a8b0:	102ad740 	call	6102ad74 <__unpack_d>
6102a8b4:	d9000204 	addi	r4,sp,8
6102a8b8:	800b883a 	mov	r5,r16
6102a8bc:	102ad740 	call	6102ad74 <__unpack_d>
6102a8c0:	d8800417 	ldw	r2,16(sp)
6102a8c4:	00c00044 	movi	r3,1
6102a8c8:	01bfffc4 	movi	r6,-1
6102a8cc:	1880062e 	bgeu	r3,r2,6102a8e8 <__gtdf2+0x70>
6102a8d0:	d8800917 	ldw	r2,36(sp)
6102a8d4:	8809883a 	mov	r4,r17
6102a8d8:	800b883a 	mov	r5,r16
6102a8dc:	1880022e 	bgeu	r3,r2,6102a8e8 <__gtdf2+0x70>
6102a8e0:	102aeac0 	call	6102aeac <__fpcmp_parts_d>
6102a8e4:	100d883a 	mov	r6,r2
6102a8e8:	3005883a 	mov	r2,r6
6102a8ec:	dfc01017 	ldw	ra,64(sp)
6102a8f0:	dc400f17 	ldw	r17,60(sp)
6102a8f4:	dc000e17 	ldw	r16,56(sp)
6102a8f8:	dec01104 	addi	sp,sp,68
6102a8fc:	f800283a 	ret

6102a900 <__gedf2>:
6102a900:	deffef04 	addi	sp,sp,-68
6102a904:	dc400f15 	stw	r17,60(sp)
6102a908:	dc400404 	addi	r17,sp,16
6102a90c:	2005883a 	mov	r2,r4
6102a910:	2807883a 	mov	r3,r5
6102a914:	dc000e15 	stw	r16,56(sp)
6102a918:	d809883a 	mov	r4,sp
6102a91c:	880b883a 	mov	r5,r17
6102a920:	dc000904 	addi	r16,sp,36
6102a924:	d8c00115 	stw	r3,4(sp)
6102a928:	d8800015 	stw	r2,0(sp)
6102a92c:	d9800215 	stw	r6,8(sp)
6102a930:	dfc01015 	stw	ra,64(sp)
6102a934:	d9c00315 	stw	r7,12(sp)
6102a938:	102ad740 	call	6102ad74 <__unpack_d>
6102a93c:	d9000204 	addi	r4,sp,8
6102a940:	800b883a 	mov	r5,r16
6102a944:	102ad740 	call	6102ad74 <__unpack_d>
6102a948:	d8800417 	ldw	r2,16(sp)
6102a94c:	00c00044 	movi	r3,1
6102a950:	01bfffc4 	movi	r6,-1
6102a954:	1880062e 	bgeu	r3,r2,6102a970 <__gedf2+0x70>
6102a958:	d8800917 	ldw	r2,36(sp)
6102a95c:	8809883a 	mov	r4,r17
6102a960:	800b883a 	mov	r5,r16
6102a964:	1880022e 	bgeu	r3,r2,6102a970 <__gedf2+0x70>
6102a968:	102aeac0 	call	6102aeac <__fpcmp_parts_d>
6102a96c:	100d883a 	mov	r6,r2
6102a970:	3005883a 	mov	r2,r6
6102a974:	dfc01017 	ldw	ra,64(sp)
6102a978:	dc400f17 	ldw	r17,60(sp)
6102a97c:	dc000e17 	ldw	r16,56(sp)
6102a980:	dec01104 	addi	sp,sp,68
6102a984:	f800283a 	ret

6102a988 <__ltdf2>:
6102a988:	deffef04 	addi	sp,sp,-68
6102a98c:	dc400f15 	stw	r17,60(sp)
6102a990:	dc400404 	addi	r17,sp,16
6102a994:	2005883a 	mov	r2,r4
6102a998:	2807883a 	mov	r3,r5
6102a99c:	dc000e15 	stw	r16,56(sp)
6102a9a0:	d809883a 	mov	r4,sp
6102a9a4:	880b883a 	mov	r5,r17
6102a9a8:	dc000904 	addi	r16,sp,36
6102a9ac:	d8c00115 	stw	r3,4(sp)
6102a9b0:	d8800015 	stw	r2,0(sp)
6102a9b4:	d9800215 	stw	r6,8(sp)
6102a9b8:	dfc01015 	stw	ra,64(sp)
6102a9bc:	d9c00315 	stw	r7,12(sp)
6102a9c0:	102ad740 	call	6102ad74 <__unpack_d>
6102a9c4:	d9000204 	addi	r4,sp,8
6102a9c8:	800b883a 	mov	r5,r16
6102a9cc:	102ad740 	call	6102ad74 <__unpack_d>
6102a9d0:	d8800417 	ldw	r2,16(sp)
6102a9d4:	00c00044 	movi	r3,1
6102a9d8:	180d883a 	mov	r6,r3
6102a9dc:	1880062e 	bgeu	r3,r2,6102a9f8 <__ltdf2+0x70>
6102a9e0:	d8800917 	ldw	r2,36(sp)
6102a9e4:	8809883a 	mov	r4,r17
6102a9e8:	800b883a 	mov	r5,r16
6102a9ec:	1880022e 	bgeu	r3,r2,6102a9f8 <__ltdf2+0x70>
6102a9f0:	102aeac0 	call	6102aeac <__fpcmp_parts_d>
6102a9f4:	100d883a 	mov	r6,r2
6102a9f8:	3005883a 	mov	r2,r6
6102a9fc:	dfc01017 	ldw	ra,64(sp)
6102aa00:	dc400f17 	ldw	r17,60(sp)
6102aa04:	dc000e17 	ldw	r16,56(sp)
6102aa08:	dec01104 	addi	sp,sp,68
6102aa0c:	f800283a 	ret

6102aa10 <__floatsidf>:
6102aa10:	2006d7fa 	srli	r3,r4,31
6102aa14:	defff604 	addi	sp,sp,-40
6102aa18:	008000c4 	movi	r2,3
6102aa1c:	dfc00915 	stw	ra,36(sp)
6102aa20:	dcc00815 	stw	r19,32(sp)
6102aa24:	dc800715 	stw	r18,28(sp)
6102aa28:	dc400615 	stw	r17,24(sp)
6102aa2c:	dc000515 	stw	r16,20(sp)
6102aa30:	d8800015 	stw	r2,0(sp)
6102aa34:	d8c00115 	stw	r3,4(sp)
6102aa38:	20000f1e 	bne	r4,zero,6102aa78 <__floatsidf+0x68>
6102aa3c:	00800084 	movi	r2,2
6102aa40:	d8800015 	stw	r2,0(sp)
6102aa44:	d809883a 	mov	r4,sp
6102aa48:	10217480 	call	61021748 <__pack_d>
6102aa4c:	1009883a 	mov	r4,r2
6102aa50:	180b883a 	mov	r5,r3
6102aa54:	2005883a 	mov	r2,r4
6102aa58:	2807883a 	mov	r3,r5
6102aa5c:	dfc00917 	ldw	ra,36(sp)
6102aa60:	dcc00817 	ldw	r19,32(sp)
6102aa64:	dc800717 	ldw	r18,28(sp)
6102aa68:	dc400617 	ldw	r17,24(sp)
6102aa6c:	dc000517 	ldw	r16,20(sp)
6102aa70:	dec00a04 	addi	sp,sp,40
6102aa74:	f800283a 	ret
6102aa78:	00800f04 	movi	r2,60
6102aa7c:	1807003a 	cmpeq	r3,r3,zero
6102aa80:	d8800215 	stw	r2,8(sp)
6102aa84:	18001126 	beq	r3,zero,6102aacc <__floatsidf+0xbc>
6102aa88:	0027883a 	mov	r19,zero
6102aa8c:	2025883a 	mov	r18,r4
6102aa90:	d9000315 	stw	r4,12(sp)
6102aa94:	dcc00415 	stw	r19,16(sp)
6102aa98:	10214a00 	call	610214a0 <__clzsi2>
6102aa9c:	11000744 	addi	r4,r2,29
6102aaa0:	013fe80e 	bge	zero,r4,6102aa44 <__floatsidf+0x34>
6102aaa4:	10bfff44 	addi	r2,r2,-3
6102aaa8:	10000c16 	blt	r2,zero,6102aadc <__floatsidf+0xcc>
6102aaac:	90a2983a 	sll	r17,r18,r2
6102aab0:	0021883a 	mov	r16,zero
6102aab4:	d8800217 	ldw	r2,8(sp)
6102aab8:	dc400415 	stw	r17,16(sp)
6102aabc:	dc000315 	stw	r16,12(sp)
6102aac0:	1105c83a 	sub	r2,r2,r4
6102aac4:	d8800215 	stw	r2,8(sp)
6102aac8:	003fde06 	br	6102aa44 <__floatsidf+0x34>
6102aacc:	00a00034 	movhi	r2,32768
6102aad0:	20800a26 	beq	r4,r2,6102aafc <__floatsidf+0xec>
6102aad4:	0109c83a 	sub	r4,zero,r4
6102aad8:	003feb06 	br	6102aa88 <__floatsidf+0x78>
6102aadc:	9006d07a 	srli	r3,r18,1
6102aae0:	008007c4 	movi	r2,31
6102aae4:	1105c83a 	sub	r2,r2,r4
6102aae8:	1886d83a 	srl	r3,r3,r2
6102aaec:	9922983a 	sll	r17,r19,r4
6102aaf0:	9120983a 	sll	r16,r18,r4
6102aaf4:	1c62b03a 	or	r17,r3,r17
6102aaf8:	003fee06 	br	6102aab4 <__floatsidf+0xa4>
6102aafc:	0009883a 	mov	r4,zero
6102ab00:	01707834 	movhi	r5,49632
6102ab04:	003fd306 	br	6102aa54 <__floatsidf+0x44>

6102ab08 <__fixdfsi>:
6102ab08:	defff804 	addi	sp,sp,-32
6102ab0c:	2005883a 	mov	r2,r4
6102ab10:	2807883a 	mov	r3,r5
6102ab14:	d809883a 	mov	r4,sp
6102ab18:	d9400204 	addi	r5,sp,8
6102ab1c:	d8c00115 	stw	r3,4(sp)
6102ab20:	d8800015 	stw	r2,0(sp)
6102ab24:	dfc00715 	stw	ra,28(sp)
6102ab28:	102ad740 	call	6102ad74 <__unpack_d>
6102ab2c:	d8c00217 	ldw	r3,8(sp)
6102ab30:	00800084 	movi	r2,2
6102ab34:	1880051e 	bne	r3,r2,6102ab4c <__fixdfsi+0x44>
6102ab38:	0007883a 	mov	r3,zero
6102ab3c:	1805883a 	mov	r2,r3
6102ab40:	dfc00717 	ldw	ra,28(sp)
6102ab44:	dec00804 	addi	sp,sp,32
6102ab48:	f800283a 	ret
6102ab4c:	00800044 	movi	r2,1
6102ab50:	10fff92e 	bgeu	r2,r3,6102ab38 <__fixdfsi+0x30>
6102ab54:	00800104 	movi	r2,4
6102ab58:	18800426 	beq	r3,r2,6102ab6c <__fixdfsi+0x64>
6102ab5c:	d8c00417 	ldw	r3,16(sp)
6102ab60:	183ff516 	blt	r3,zero,6102ab38 <__fixdfsi+0x30>
6102ab64:	00800784 	movi	r2,30
6102ab68:	10c0080e 	bge	r2,r3,6102ab8c <__fixdfsi+0x84>
6102ab6c:	d8800317 	ldw	r2,12(sp)
6102ab70:	1000121e 	bne	r2,zero,6102abbc <__fixdfsi+0xb4>
6102ab74:	00e00034 	movhi	r3,32768
6102ab78:	18ffffc4 	addi	r3,r3,-1
6102ab7c:	1805883a 	mov	r2,r3
6102ab80:	dfc00717 	ldw	ra,28(sp)
6102ab84:	dec00804 	addi	sp,sp,32
6102ab88:	f800283a 	ret
6102ab8c:	00800f04 	movi	r2,60
6102ab90:	10d1c83a 	sub	r8,r2,r3
6102ab94:	40bff804 	addi	r2,r8,-32
6102ab98:	d9800517 	ldw	r6,20(sp)
6102ab9c:	d9c00617 	ldw	r7,24(sp)
6102aba0:	10000816 	blt	r2,zero,6102abc4 <__fixdfsi+0xbc>
6102aba4:	3888d83a 	srl	r4,r7,r2
6102aba8:	d8800317 	ldw	r2,12(sp)
6102abac:	2007883a 	mov	r3,r4
6102abb0:	103fe226 	beq	r2,zero,6102ab3c <__fixdfsi+0x34>
6102abb4:	0107c83a 	sub	r3,zero,r4
6102abb8:	003fe006 	br	6102ab3c <__fixdfsi+0x34>
6102abbc:	00e00034 	movhi	r3,32768
6102abc0:	003fde06 	br	6102ab3c <__fixdfsi+0x34>
6102abc4:	39c7883a 	add	r3,r7,r7
6102abc8:	008007c4 	movi	r2,31
6102abcc:	1205c83a 	sub	r2,r2,r8
6102abd0:	1886983a 	sll	r3,r3,r2
6102abd4:	3208d83a 	srl	r4,r6,r8
6102abd8:	1908b03a 	or	r4,r3,r4
6102abdc:	003ff206 	br	6102aba8 <__fixdfsi+0xa0>

6102abe0 <__floatunsidf>:
6102abe0:	defff204 	addi	sp,sp,-56
6102abe4:	dfc00d15 	stw	ra,52(sp)
6102abe8:	ddc00c15 	stw	r23,48(sp)
6102abec:	dd800b15 	stw	r22,44(sp)
6102abf0:	dd400a15 	stw	r21,40(sp)
6102abf4:	dd000915 	stw	r20,36(sp)
6102abf8:	dcc00815 	stw	r19,32(sp)
6102abfc:	dc800715 	stw	r18,28(sp)
6102ac00:	dc400615 	stw	r17,24(sp)
6102ac04:	dc000515 	stw	r16,20(sp)
6102ac08:	d8000115 	stw	zero,4(sp)
6102ac0c:	20000f1e 	bne	r4,zero,6102ac4c <__floatunsidf+0x6c>
6102ac10:	00800084 	movi	r2,2
6102ac14:	d8800015 	stw	r2,0(sp)
6102ac18:	d809883a 	mov	r4,sp
6102ac1c:	10217480 	call	61021748 <__pack_d>
6102ac20:	dfc00d17 	ldw	ra,52(sp)
6102ac24:	ddc00c17 	ldw	r23,48(sp)
6102ac28:	dd800b17 	ldw	r22,44(sp)
6102ac2c:	dd400a17 	ldw	r21,40(sp)
6102ac30:	dd000917 	ldw	r20,36(sp)
6102ac34:	dcc00817 	ldw	r19,32(sp)
6102ac38:	dc800717 	ldw	r18,28(sp)
6102ac3c:	dc400617 	ldw	r17,24(sp)
6102ac40:	dc000517 	ldw	r16,20(sp)
6102ac44:	dec00e04 	addi	sp,sp,56
6102ac48:	f800283a 	ret
6102ac4c:	008000c4 	movi	r2,3
6102ac50:	00c00f04 	movi	r3,60
6102ac54:	002f883a 	mov	r23,zero
6102ac58:	202d883a 	mov	r22,r4
6102ac5c:	d8800015 	stw	r2,0(sp)
6102ac60:	d8c00215 	stw	r3,8(sp)
6102ac64:	d9000315 	stw	r4,12(sp)
6102ac68:	ddc00415 	stw	r23,16(sp)
6102ac6c:	10214a00 	call	610214a0 <__clzsi2>
6102ac70:	12400744 	addi	r9,r2,29
6102ac74:	48000b16 	blt	r9,zero,6102aca4 <__floatunsidf+0xc4>
6102ac78:	483fe726 	beq	r9,zero,6102ac18 <__floatunsidf+0x38>
6102ac7c:	10bfff44 	addi	r2,r2,-3
6102ac80:	10002e16 	blt	r2,zero,6102ad3c <__floatunsidf+0x15c>
6102ac84:	b0a2983a 	sll	r17,r22,r2
6102ac88:	0021883a 	mov	r16,zero
6102ac8c:	d8800217 	ldw	r2,8(sp)
6102ac90:	dc400415 	stw	r17,16(sp)
6102ac94:	dc000315 	stw	r16,12(sp)
6102ac98:	1245c83a 	sub	r2,r2,r9
6102ac9c:	d8800215 	stw	r2,8(sp)
6102aca0:	003fdd06 	br	6102ac18 <__floatunsidf+0x38>
6102aca4:	0255c83a 	sub	r10,zero,r9
6102aca8:	51bff804 	addi	r6,r10,-32
6102acac:	30001b16 	blt	r6,zero,6102ad1c <__floatunsidf+0x13c>
6102acb0:	b9a8d83a 	srl	r20,r23,r6
6102acb4:	002b883a 	mov	r21,zero
6102acb8:	000f883a 	mov	r7,zero
6102acbc:	01000044 	movi	r4,1
6102acc0:	0011883a 	mov	r8,zero
6102acc4:	30002516 	blt	r6,zero,6102ad5c <__floatunsidf+0x17c>
6102acc8:	21a6983a 	sll	r19,r4,r6
6102accc:	0025883a 	mov	r18,zero
6102acd0:	00bfffc4 	movi	r2,-1
6102acd4:	9089883a 	add	r4,r18,r2
6102acd8:	988b883a 	add	r5,r19,r2
6102acdc:	248d803a 	cmpltu	r6,r4,r18
6102ace0:	314b883a 	add	r5,r6,r5
6102ace4:	b104703a 	and	r2,r22,r4
6102ace8:	b946703a 	and	r3,r23,r5
6102acec:	10c4b03a 	or	r2,r2,r3
6102acf0:	10000226 	beq	r2,zero,6102acfc <__floatunsidf+0x11c>
6102acf4:	01c00044 	movi	r7,1
6102acf8:	0011883a 	mov	r8,zero
6102acfc:	d9000217 	ldw	r4,8(sp)
6102ad00:	a1c4b03a 	or	r2,r20,r7
6102ad04:	aa06b03a 	or	r3,r21,r8
6102ad08:	2249c83a 	sub	r4,r4,r9
6102ad0c:	d8c00415 	stw	r3,16(sp)
6102ad10:	d9000215 	stw	r4,8(sp)
6102ad14:	d8800315 	stw	r2,12(sp)
6102ad18:	003fbf06 	br	6102ac18 <__floatunsidf+0x38>
6102ad1c:	bdc7883a 	add	r3,r23,r23
6102ad20:	008007c4 	movi	r2,31
6102ad24:	1285c83a 	sub	r2,r2,r10
6102ad28:	1886983a 	sll	r3,r3,r2
6102ad2c:	b2a8d83a 	srl	r20,r22,r10
6102ad30:	baaad83a 	srl	r21,r23,r10
6102ad34:	1d28b03a 	or	r20,r3,r20
6102ad38:	003fdf06 	br	6102acb8 <__floatunsidf+0xd8>
6102ad3c:	b006d07a 	srli	r3,r22,1
6102ad40:	008007c4 	movi	r2,31
6102ad44:	1245c83a 	sub	r2,r2,r9
6102ad48:	1886d83a 	srl	r3,r3,r2
6102ad4c:	ba62983a 	sll	r17,r23,r9
6102ad50:	b260983a 	sll	r16,r22,r9
6102ad54:	1c62b03a 	or	r17,r3,r17
6102ad58:	003fcc06 	br	6102ac8c <__floatunsidf+0xac>
6102ad5c:	2006d07a 	srli	r3,r4,1
6102ad60:	008007c4 	movi	r2,31
6102ad64:	1285c83a 	sub	r2,r2,r10
6102ad68:	18a6d83a 	srl	r19,r3,r2
6102ad6c:	22a4983a 	sll	r18,r4,r10
6102ad70:	003fd706 	br	6102acd0 <__floatunsidf+0xf0>

6102ad74 <__unpack_d>:
6102ad74:	20c00117 	ldw	r3,4(r4)
6102ad78:	22400017 	ldw	r9,0(r4)
6102ad7c:	00800434 	movhi	r2,16
6102ad80:	10bfffc4 	addi	r2,r2,-1
6102ad84:	1808d53a 	srli	r4,r3,20
6102ad88:	180cd7fa 	srli	r6,r3,31
6102ad8c:	1894703a 	and	r10,r3,r2
6102ad90:	2201ffcc 	andi	r8,r4,2047
6102ad94:	281b883a 	mov	r13,r5
6102ad98:	4817883a 	mov	r11,r9
6102ad9c:	29800115 	stw	r6,4(r5)
6102ada0:	5019883a 	mov	r12,r10
6102ada4:	40001e1e 	bne	r8,zero,6102ae20 <__unpack_d+0xac>
6102ada8:	4a84b03a 	or	r2,r9,r10
6102adac:	10001926 	beq	r2,zero,6102ae14 <__unpack_d+0xa0>
6102adb0:	4804d63a 	srli	r2,r9,24
6102adb4:	500c923a 	slli	r6,r10,8
6102adb8:	013f0084 	movi	r4,-1022
6102adbc:	00c40034 	movhi	r3,4096
6102adc0:	18ffffc4 	addi	r3,r3,-1
6102adc4:	118cb03a 	or	r6,r2,r6
6102adc8:	008000c4 	movi	r2,3
6102adcc:	480a923a 	slli	r5,r9,8
6102add0:	68800015 	stw	r2,0(r13)
6102add4:	69000215 	stw	r4,8(r13)
6102add8:	19800b36 	bltu	r3,r6,6102ae08 <__unpack_d+0x94>
6102addc:	200f883a 	mov	r7,r4
6102ade0:	1811883a 	mov	r8,r3
6102ade4:	2945883a 	add	r2,r5,r5
6102ade8:	1149803a 	cmpltu	r4,r2,r5
6102adec:	3187883a 	add	r3,r6,r6
6102adf0:	20c9883a 	add	r4,r4,r3
6102adf4:	100b883a 	mov	r5,r2
6102adf8:	200d883a 	mov	r6,r4
6102adfc:	39ffffc4 	addi	r7,r7,-1
6102ae00:	413ff82e 	bgeu	r8,r4,6102ade4 <__unpack_d+0x70>
6102ae04:	69c00215 	stw	r7,8(r13)
6102ae08:	69800415 	stw	r6,16(r13)
6102ae0c:	69400315 	stw	r5,12(r13)
6102ae10:	f800283a 	ret
6102ae14:	00800084 	movi	r2,2
6102ae18:	28800015 	stw	r2,0(r5)
6102ae1c:	f800283a 	ret
6102ae20:	0081ffc4 	movi	r2,2047
6102ae24:	40800f26 	beq	r8,r2,6102ae64 <__unpack_d+0xf0>
6102ae28:	480cd63a 	srli	r6,r9,24
6102ae2c:	5006923a 	slli	r3,r10,8
6102ae30:	4804923a 	slli	r2,r9,8
6102ae34:	0009883a 	mov	r4,zero
6102ae38:	30c6b03a 	or	r3,r6,r3
6102ae3c:	01440034 	movhi	r5,4096
6102ae40:	110cb03a 	or	r6,r2,r4
6102ae44:	423f0044 	addi	r8,r8,-1023
6102ae48:	194eb03a 	or	r7,r3,r5
6102ae4c:	008000c4 	movi	r2,3
6102ae50:	69c00415 	stw	r7,16(r13)
6102ae54:	6a000215 	stw	r8,8(r13)
6102ae58:	68800015 	stw	r2,0(r13)
6102ae5c:	69800315 	stw	r6,12(r13)
6102ae60:	f800283a 	ret
6102ae64:	4a84b03a 	or	r2,r9,r10
6102ae68:	1000031e 	bne	r2,zero,6102ae78 <__unpack_d+0x104>
6102ae6c:	00800104 	movi	r2,4
6102ae70:	28800015 	stw	r2,0(r5)
6102ae74:	f800283a 	ret
6102ae78:	0009883a 	mov	r4,zero
6102ae7c:	01400234 	movhi	r5,8
6102ae80:	4904703a 	and	r2,r9,r4
6102ae84:	5146703a 	and	r3,r10,r5
6102ae88:	10c4b03a 	or	r2,r2,r3
6102ae8c:	10000526 	beq	r2,zero,6102aea4 <__unpack_d+0x130>
6102ae90:	00800044 	movi	r2,1
6102ae94:	68800015 	stw	r2,0(r13)
6102ae98:	6b000415 	stw	r12,16(r13)
6102ae9c:	6ac00315 	stw	r11,12(r13)
6102aea0:	f800283a 	ret
6102aea4:	68000015 	stw	zero,0(r13)
6102aea8:	003ffb06 	br	6102ae98 <__unpack_d+0x124>

6102aeac <__fpcmp_parts_d>:
6102aeac:	21800017 	ldw	r6,0(r4)
6102aeb0:	00c00044 	movi	r3,1
6102aeb4:	19800a2e 	bgeu	r3,r6,6102aee0 <__fpcmp_parts_d+0x34>
6102aeb8:	28800017 	ldw	r2,0(r5)
6102aebc:	1880082e 	bgeu	r3,r2,6102aee0 <__fpcmp_parts_d+0x34>
6102aec0:	00c00104 	movi	r3,4
6102aec4:	30c02626 	beq	r6,r3,6102af60 <__fpcmp_parts_d+0xb4>
6102aec8:	10c02226 	beq	r2,r3,6102af54 <__fpcmp_parts_d+0xa8>
6102aecc:	00c00084 	movi	r3,2
6102aed0:	30c00526 	beq	r6,r3,6102aee8 <__fpcmp_parts_d+0x3c>
6102aed4:	10c0071e 	bne	r2,r3,6102aef4 <__fpcmp_parts_d+0x48>
6102aed8:	20800117 	ldw	r2,4(r4)
6102aedc:	1000091e 	bne	r2,zero,6102af04 <__fpcmp_parts_d+0x58>
6102aee0:	00800044 	movi	r2,1
6102aee4:	f800283a 	ret
6102aee8:	10c01a1e 	bne	r2,r3,6102af54 <__fpcmp_parts_d+0xa8>
6102aeec:	0005883a 	mov	r2,zero
6102aef0:	f800283a 	ret
6102aef4:	22000117 	ldw	r8,4(r4)
6102aef8:	28800117 	ldw	r2,4(r5)
6102aefc:	40800326 	beq	r8,r2,6102af0c <__fpcmp_parts_d+0x60>
6102af00:	403ff726 	beq	r8,zero,6102aee0 <__fpcmp_parts_d+0x34>
6102af04:	00bfffc4 	movi	r2,-1
6102af08:	f800283a 	ret
6102af0c:	20c00217 	ldw	r3,8(r4)
6102af10:	28800217 	ldw	r2,8(r5)
6102af14:	10fffa16 	blt	r2,r3,6102af00 <__fpcmp_parts_d+0x54>
6102af18:	18800916 	blt	r3,r2,6102af40 <__fpcmp_parts_d+0x94>
6102af1c:	21c00417 	ldw	r7,16(r4)
6102af20:	28c00417 	ldw	r3,16(r5)
6102af24:	21800317 	ldw	r6,12(r4)
6102af28:	28800317 	ldw	r2,12(r5)
6102af2c:	19fff436 	bltu	r3,r7,6102af00 <__fpcmp_parts_d+0x54>
6102af30:	38c00526 	beq	r7,r3,6102af48 <__fpcmp_parts_d+0x9c>
6102af34:	38c00236 	bltu	r7,r3,6102af40 <__fpcmp_parts_d+0x94>
6102af38:	19ffec1e 	bne	r3,r7,6102aeec <__fpcmp_parts_d+0x40>
6102af3c:	30bfeb2e 	bgeu	r6,r2,6102aeec <__fpcmp_parts_d+0x40>
6102af40:	403fe71e 	bne	r8,zero,6102aee0 <__fpcmp_parts_d+0x34>
6102af44:	003fef06 	br	6102af04 <__fpcmp_parts_d+0x58>
6102af48:	11bffa2e 	bgeu	r2,r6,6102af34 <__fpcmp_parts_d+0x88>
6102af4c:	403fe426 	beq	r8,zero,6102aee0 <__fpcmp_parts_d+0x34>
6102af50:	003fec06 	br	6102af04 <__fpcmp_parts_d+0x58>
6102af54:	28800117 	ldw	r2,4(r5)
6102af58:	103fe11e 	bne	r2,zero,6102aee0 <__fpcmp_parts_d+0x34>
6102af5c:	003fe906 	br	6102af04 <__fpcmp_parts_d+0x58>
6102af60:	11bfdd1e 	bne	r2,r6,6102aed8 <__fpcmp_parts_d+0x2c>
6102af64:	28c00117 	ldw	r3,4(r5)
6102af68:	20800117 	ldw	r2,4(r4)
6102af6c:	1885c83a 	sub	r2,r3,r2
6102af70:	f800283a 	ret

6102af74 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
6102af74:	defff804 	addi	sp,sp,-32
6102af78:	dfc00715 	stw	ra,28(sp)
6102af7c:	df000615 	stw	fp,24(sp)
6102af80:	df000604 	addi	fp,sp,24
6102af84:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
6102af88:	e0bffc17 	ldw	r2,-16(fp)
6102af8c:	1004803a 	cmplt	r2,r2,zero
6102af90:	1000081e 	bne	r2,zero,6102afb4 <close+0x40>
6102af94:	e0bffc17 	ldw	r2,-16(fp)
6102af98:	10800324 	muli	r2,r2,12
6102af9c:	1007883a 	mov	r3,r2
6102afa0:	009840f4 	movhi	r2,24835
6102afa4:	10ba4204 	addi	r2,r2,-5880
6102afa8:	1887883a 	add	r3,r3,r2
6102afac:	e0ffff15 	stw	r3,-4(fp)
6102afb0:	00000106 	br	6102afb8 <close+0x44>
6102afb4:	e03fff15 	stw	zero,-4(fp)
6102afb8:	e0bfff17 	ldw	r2,-4(fp)
6102afbc:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
6102afc0:	e0bffb17 	ldw	r2,-20(fp)
6102afc4:	1005003a 	cmpeq	r2,r2,zero
6102afc8:	10001d1e 	bne	r2,zero,6102b040 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
6102afcc:	e0bffb17 	ldw	r2,-20(fp)
6102afd0:	10800017 	ldw	r2,0(r2)
6102afd4:	10800417 	ldw	r2,16(r2)
6102afd8:	1005003a 	cmpeq	r2,r2,zero
6102afdc:	1000071e 	bne	r2,zero,6102affc <close+0x88>
6102afe0:	e0bffb17 	ldw	r2,-20(fp)
6102afe4:	10800017 	ldw	r2,0(r2)
6102afe8:	10800417 	ldw	r2,16(r2)
6102afec:	e13ffb17 	ldw	r4,-20(fp)
6102aff0:	103ee83a 	callr	r2
6102aff4:	e0bffe15 	stw	r2,-8(fp)
6102aff8:	00000106 	br	6102b000 <close+0x8c>
6102affc:	e03ffe15 	stw	zero,-8(fp)
6102b000:	e0bffe17 	ldw	r2,-8(fp)
6102b004:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
6102b008:	e13ffc17 	ldw	r4,-16(fp)
6102b00c:	102b7fc0 	call	6102b7fc <alt_release_fd>
    if (rval < 0)
6102b010:	e0bffa17 	ldw	r2,-24(fp)
6102b014:	1004403a 	cmpge	r2,r2,zero
6102b018:	1000071e 	bne	r2,zero,6102b038 <close+0xc4>
    {
      ALT_ERRNO = -rval;
6102b01c:	102b0700 	call	6102b070 <alt_get_errno>
6102b020:	e0fffa17 	ldw	r3,-24(fp)
6102b024:	00c7c83a 	sub	r3,zero,r3
6102b028:	10c00015 	stw	r3,0(r2)
      return -1;
6102b02c:	00bfffc4 	movi	r2,-1
6102b030:	e0bffd15 	stw	r2,-12(fp)
6102b034:	00000806 	br	6102b058 <close+0xe4>
    }
    return 0;
6102b038:	e03ffd15 	stw	zero,-12(fp)
6102b03c:	00000606 	br	6102b058 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
6102b040:	102b0700 	call	6102b070 <alt_get_errno>
6102b044:	1007883a 	mov	r3,r2
6102b048:	00801444 	movi	r2,81
6102b04c:	18800015 	stw	r2,0(r3)
    return -1;
6102b050:	00bfffc4 	movi	r2,-1
6102b054:	e0bffd15 	stw	r2,-12(fp)
6102b058:	e0bffd17 	ldw	r2,-12(fp)
  }
}
6102b05c:	e037883a 	mov	sp,fp
6102b060:	dfc00117 	ldw	ra,4(sp)
6102b064:	df000017 	ldw	fp,0(sp)
6102b068:	dec00204 	addi	sp,sp,8
6102b06c:	f800283a 	ret

6102b070 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
6102b070:	defffd04 	addi	sp,sp,-12
6102b074:	dfc00215 	stw	ra,8(sp)
6102b078:	df000115 	stw	fp,4(sp)
6102b07c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
6102b080:	009840f4 	movhi	r2,24835
6102b084:	10bec504 	addi	r2,r2,-1260
6102b088:	10800017 	ldw	r2,0(r2)
6102b08c:	1005003a 	cmpeq	r2,r2,zero
6102b090:	1000061e 	bne	r2,zero,6102b0ac <alt_get_errno+0x3c>
6102b094:	009840f4 	movhi	r2,24835
6102b098:	10bec504 	addi	r2,r2,-1260
6102b09c:	10800017 	ldw	r2,0(r2)
6102b0a0:	103ee83a 	callr	r2
6102b0a4:	e0bfff15 	stw	r2,-4(fp)
6102b0a8:	00000306 	br	6102b0b8 <alt_get_errno+0x48>
6102b0ac:	009840f4 	movhi	r2,24835
6102b0b0:	10856704 	addi	r2,r2,5532
6102b0b4:	e0bfff15 	stw	r2,-4(fp)
6102b0b8:	e0bfff17 	ldw	r2,-4(fp)
}
6102b0bc:	e037883a 	mov	sp,fp
6102b0c0:	dfc00117 	ldw	ra,4(sp)
6102b0c4:	df000017 	ldw	fp,0(sp)
6102b0c8:	dec00204 	addi	sp,sp,8
6102b0cc:	f800283a 	ret

6102b0d0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
6102b0d0:	defffe04 	addi	sp,sp,-8
6102b0d4:	df000115 	stw	fp,4(sp)
6102b0d8:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
6102b0dc:	e03fff15 	stw	zero,-4(fp)
6102b0e0:	00000506 	br	6102b0f8 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
6102b0e4:	e0bfff17 	ldw	r2,-4(fp)
6102b0e8:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
6102b0ec:	e0bfff17 	ldw	r2,-4(fp)
6102b0f0:	10800804 	addi	r2,r2,32
6102b0f4:	e0bfff15 	stw	r2,-4(fp)
6102b0f8:	e0bfff17 	ldw	r2,-4(fp)
6102b0fc:	10820030 	cmpltui	r2,r2,2048
6102b100:	103ff81e 	bne	r2,zero,6102b0e4 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
6102b104:	e037883a 	mov	sp,fp
6102b108:	df000017 	ldw	fp,0(sp)
6102b10c:	dec00104 	addi	sp,sp,4
6102b110:	f800283a 	ret

6102b114 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
6102b114:	defffc04 	addi	sp,sp,-16
6102b118:	df000315 	stw	fp,12(sp)
6102b11c:	df000304 	addi	fp,sp,12
6102b120:	e13ffd15 	stw	r4,-12(fp)
6102b124:	e17ffe15 	stw	r5,-8(fp)
6102b128:	e1bfff15 	stw	r6,-4(fp)
  return len;
6102b12c:	e0bfff17 	ldw	r2,-4(fp)
}
6102b130:	e037883a 	mov	sp,fp
6102b134:	df000017 	ldw	fp,0(sp)
6102b138:	dec00104 	addi	sp,sp,4
6102b13c:	f800283a 	ret

6102b140 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
6102b140:	defff904 	addi	sp,sp,-28
6102b144:	dfc00615 	stw	ra,24(sp)
6102b148:	df000515 	stw	fp,20(sp)
6102b14c:	df000504 	addi	fp,sp,20
6102b150:	e13ffc15 	stw	r4,-16(fp)
6102b154:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
6102b158:	e0bffc17 	ldw	r2,-16(fp)
6102b15c:	1004803a 	cmplt	r2,r2,zero
6102b160:	1000081e 	bne	r2,zero,6102b184 <fstat+0x44>
6102b164:	e0bffc17 	ldw	r2,-16(fp)
6102b168:	10800324 	muli	r2,r2,12
6102b16c:	1007883a 	mov	r3,r2
6102b170:	009840f4 	movhi	r2,24835
6102b174:	10ba4204 	addi	r2,r2,-5880
6102b178:	1887883a 	add	r3,r3,r2
6102b17c:	e0ffff15 	stw	r3,-4(fp)
6102b180:	00000106 	br	6102b188 <fstat+0x48>
6102b184:	e03fff15 	stw	zero,-4(fp)
6102b188:	e0bfff17 	ldw	r2,-4(fp)
6102b18c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
6102b190:	e0bffb17 	ldw	r2,-20(fp)
6102b194:	1005003a 	cmpeq	r2,r2,zero
6102b198:	1000121e 	bne	r2,zero,6102b1e4 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
6102b19c:	e0bffb17 	ldw	r2,-20(fp)
6102b1a0:	10800017 	ldw	r2,0(r2)
6102b1a4:	10800817 	ldw	r2,32(r2)
6102b1a8:	1005003a 	cmpeq	r2,r2,zero
6102b1ac:	1000081e 	bne	r2,zero,6102b1d0 <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
6102b1b0:	e0bffb17 	ldw	r2,-20(fp)
6102b1b4:	10800017 	ldw	r2,0(r2)
6102b1b8:	10800817 	ldw	r2,32(r2)
6102b1bc:	e13ffb17 	ldw	r4,-20(fp)
6102b1c0:	e17ffd17 	ldw	r5,-12(fp)
6102b1c4:	103ee83a 	callr	r2
6102b1c8:	e0bffe15 	stw	r2,-8(fp)
6102b1cc:	00000b06 	br	6102b1fc <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
6102b1d0:	e0fffd17 	ldw	r3,-12(fp)
6102b1d4:	00880004 	movi	r2,8192
6102b1d8:	18800115 	stw	r2,4(r3)
      return 0;
6102b1dc:	e03ffe15 	stw	zero,-8(fp)
6102b1e0:	00000606 	br	6102b1fc <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
6102b1e4:	102b2140 	call	6102b214 <alt_get_errno>
6102b1e8:	1007883a 	mov	r3,r2
6102b1ec:	00801444 	movi	r2,81
6102b1f0:	18800015 	stw	r2,0(r3)
    return -1;
6102b1f4:	00bfffc4 	movi	r2,-1
6102b1f8:	e0bffe15 	stw	r2,-8(fp)
6102b1fc:	e0bffe17 	ldw	r2,-8(fp)
  }
}
6102b200:	e037883a 	mov	sp,fp
6102b204:	dfc00117 	ldw	ra,4(sp)
6102b208:	df000017 	ldw	fp,0(sp)
6102b20c:	dec00204 	addi	sp,sp,8
6102b210:	f800283a 	ret

6102b214 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
6102b214:	defffd04 	addi	sp,sp,-12
6102b218:	dfc00215 	stw	ra,8(sp)
6102b21c:	df000115 	stw	fp,4(sp)
6102b220:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
6102b224:	009840f4 	movhi	r2,24835
6102b228:	10bec504 	addi	r2,r2,-1260
6102b22c:	10800017 	ldw	r2,0(r2)
6102b230:	1005003a 	cmpeq	r2,r2,zero
6102b234:	1000061e 	bne	r2,zero,6102b250 <alt_get_errno+0x3c>
6102b238:	009840f4 	movhi	r2,24835
6102b23c:	10bec504 	addi	r2,r2,-1260
6102b240:	10800017 	ldw	r2,0(r2)
6102b244:	103ee83a 	callr	r2
6102b248:	e0bfff15 	stw	r2,-4(fp)
6102b24c:	00000306 	br	6102b25c <alt_get_errno+0x48>
6102b250:	009840f4 	movhi	r2,24835
6102b254:	10856704 	addi	r2,r2,5532
6102b258:	e0bfff15 	stw	r2,-4(fp)
6102b25c:	e0bfff17 	ldw	r2,-4(fp)
}
6102b260:	e037883a 	mov	sp,fp
6102b264:	dfc00117 	ldw	ra,4(sp)
6102b268:	df000017 	ldw	fp,0(sp)
6102b26c:	dec00204 	addi	sp,sp,8
6102b270:	f800283a 	ret

6102b274 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
6102b274:	deffeb04 	addi	sp,sp,-84
6102b278:	dfc01415 	stw	ra,80(sp)
6102b27c:	df001315 	stw	fp,76(sp)
6102b280:	df001304 	addi	fp,sp,76
6102b284:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
6102b288:	e0bffd17 	ldw	r2,-12(fp)
6102b28c:	1004803a 	cmplt	r2,r2,zero
6102b290:	1000081e 	bne	r2,zero,6102b2b4 <isatty+0x40>
6102b294:	e0bffd17 	ldw	r2,-12(fp)
6102b298:	10800324 	muli	r2,r2,12
6102b29c:	1007883a 	mov	r3,r2
6102b2a0:	009840f4 	movhi	r2,24835
6102b2a4:	10ba4204 	addi	r2,r2,-5880
6102b2a8:	1887883a 	add	r3,r3,r2
6102b2ac:	e0ffff15 	stw	r3,-4(fp)
6102b2b0:	00000106 	br	6102b2b8 <isatty+0x44>
6102b2b4:	e03fff15 	stw	zero,-4(fp)
6102b2b8:	e0bfff17 	ldw	r2,-4(fp)
6102b2bc:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
6102b2c0:	e0bfed17 	ldw	r2,-76(fp)
6102b2c4:	1005003a 	cmpeq	r2,r2,zero
6102b2c8:	10000f1e 	bne	r2,zero,6102b308 <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
6102b2cc:	e0bfed17 	ldw	r2,-76(fp)
6102b2d0:	10800017 	ldw	r2,0(r2)
6102b2d4:	10800817 	ldw	r2,32(r2)
6102b2d8:	1004c03a 	cmpne	r2,r2,zero
6102b2dc:	1000031e 	bne	r2,zero,6102b2ec <isatty+0x78>
    {
      return 1;
6102b2e0:	00800044 	movi	r2,1
6102b2e4:	e0bffe15 	stw	r2,-8(fp)
6102b2e8:	00000c06 	br	6102b31c <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
6102b2ec:	e17fee04 	addi	r5,fp,-72
6102b2f0:	e13ffd17 	ldw	r4,-12(fp)
6102b2f4:	102b1400 	call	6102b140 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
6102b2f8:	e0bfef17 	ldw	r2,-68(fp)
6102b2fc:	10880020 	cmpeqi	r2,r2,8192
6102b300:	e0bffe15 	stw	r2,-8(fp)
6102b304:	00000506 	br	6102b31c <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
6102b308:	102b3340 	call	6102b334 <alt_get_errno>
6102b30c:	1007883a 	mov	r3,r2
6102b310:	00801444 	movi	r2,81
6102b314:	18800015 	stw	r2,0(r3)
    return 0;
6102b318:	e03ffe15 	stw	zero,-8(fp)
6102b31c:	e0bffe17 	ldw	r2,-8(fp)
  }
}
6102b320:	e037883a 	mov	sp,fp
6102b324:	dfc00117 	ldw	ra,4(sp)
6102b328:	df000017 	ldw	fp,0(sp)
6102b32c:	dec00204 	addi	sp,sp,8
6102b330:	f800283a 	ret

6102b334 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
6102b334:	defffd04 	addi	sp,sp,-12
6102b338:	dfc00215 	stw	ra,8(sp)
6102b33c:	df000115 	stw	fp,4(sp)
6102b340:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
6102b344:	009840f4 	movhi	r2,24835
6102b348:	10bec504 	addi	r2,r2,-1260
6102b34c:	10800017 	ldw	r2,0(r2)
6102b350:	1005003a 	cmpeq	r2,r2,zero
6102b354:	1000061e 	bne	r2,zero,6102b370 <alt_get_errno+0x3c>
6102b358:	009840f4 	movhi	r2,24835
6102b35c:	10bec504 	addi	r2,r2,-1260
6102b360:	10800017 	ldw	r2,0(r2)
6102b364:	103ee83a 	callr	r2
6102b368:	e0bfff15 	stw	r2,-4(fp)
6102b36c:	00000306 	br	6102b37c <alt_get_errno+0x48>
6102b370:	009840f4 	movhi	r2,24835
6102b374:	10856704 	addi	r2,r2,5532
6102b378:	e0bfff15 	stw	r2,-4(fp)
6102b37c:	e0bfff17 	ldw	r2,-4(fp)
}
6102b380:	e037883a 	mov	sp,fp
6102b384:	dfc00117 	ldw	ra,4(sp)
6102b388:	df000017 	ldw	fp,0(sp)
6102b38c:	dec00204 	addi	sp,sp,8
6102b390:	f800283a 	ret

6102b394 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
6102b394:	defffe04 	addi	sp,sp,-8
6102b398:	dfc00115 	stw	ra,4(sp)
6102b39c:	df000015 	stw	fp,0(sp)
6102b3a0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
6102b3a4:	011840f4 	movhi	r4,24835
6102b3a8:	213eca04 	addi	r4,r4,-1240
6102b3ac:	015840f4 	movhi	r5,24835
6102b3b0:	29783304 	addi	r5,r5,-7988
6102b3b4:	019840f4 	movhi	r6,24835
6102b3b8:	31beca04 	addi	r6,r6,-1240
6102b3bc:	102b4140 	call	6102b414 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
6102b3c0:	011840b4 	movhi	r4,24834
6102b3c4:	21000804 	addi	r4,r4,32
6102b3c8:	015840b4 	movhi	r5,24834
6102b3cc:	29400804 	addi	r5,r5,32
6102b3d0:	019840b4 	movhi	r6,24834
6102b3d4:	31806d04 	addi	r6,r6,436
6102b3d8:	102b4140 	call	6102b414 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
6102b3dc:	011840f4 	movhi	r4,24835
6102b3e0:	2136e004 	addi	r4,r4,-9344
6102b3e4:	015840f4 	movhi	r5,24835
6102b3e8:	2976e004 	addi	r5,r5,-9344
6102b3ec:	019840f4 	movhi	r6,24835
6102b3f0:	31b83304 	addi	r6,r6,-7988
6102b3f4:	102b4140 	call	6102b414 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
6102b3f8:	102b0d00 	call	6102b0d0 <alt_dcache_flush_all>
  alt_icache_flush_all();
6102b3fc:	102cd5c0 	call	6102cd5c <alt_icache_flush_all>
}
6102b400:	e037883a 	mov	sp,fp
6102b404:	dfc00117 	ldw	ra,4(sp)
6102b408:	df000017 	ldw	fp,0(sp)
6102b40c:	dec00204 	addi	sp,sp,8
6102b410:	f800283a 	ret

6102b414 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
6102b414:	defffc04 	addi	sp,sp,-16
6102b418:	df000315 	stw	fp,12(sp)
6102b41c:	df000304 	addi	fp,sp,12
6102b420:	e13ffd15 	stw	r4,-12(fp)
6102b424:	e17ffe15 	stw	r5,-8(fp)
6102b428:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
6102b42c:	e0fffe17 	ldw	r3,-8(fp)
6102b430:	e0bffd17 	ldw	r2,-12(fp)
6102b434:	18800e26 	beq	r3,r2,6102b470 <alt_load_section+0x5c>
  {
    while( to != end )
6102b438:	00000a06 	br	6102b464 <alt_load_section+0x50>
    {
      *to++ = *from++;
6102b43c:	e0bffd17 	ldw	r2,-12(fp)
6102b440:	10c00017 	ldw	r3,0(r2)
6102b444:	e0bffe17 	ldw	r2,-8(fp)
6102b448:	10c00015 	stw	r3,0(r2)
6102b44c:	e0bffe17 	ldw	r2,-8(fp)
6102b450:	10800104 	addi	r2,r2,4
6102b454:	e0bffe15 	stw	r2,-8(fp)
6102b458:	e0bffd17 	ldw	r2,-12(fp)
6102b45c:	10800104 	addi	r2,r2,4
6102b460:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
6102b464:	e0fffe17 	ldw	r3,-8(fp)
6102b468:	e0bfff17 	ldw	r2,-4(fp)
6102b46c:	18bff31e 	bne	r3,r2,6102b43c <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
6102b470:	e037883a 	mov	sp,fp
6102b474:	df000017 	ldw	fp,0(sp)
6102b478:	dec00104 	addi	sp,sp,4
6102b47c:	f800283a 	ret

6102b480 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
6102b480:	defff804 	addi	sp,sp,-32
6102b484:	dfc00715 	stw	ra,28(sp)
6102b488:	df000615 	stw	fp,24(sp)
6102b48c:	df000604 	addi	fp,sp,24
6102b490:	e13ffc15 	stw	r4,-16(fp)
6102b494:	e17ffd15 	stw	r5,-12(fp)
6102b498:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
6102b49c:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
6102b4a0:	e0bffc17 	ldw	r2,-16(fp)
6102b4a4:	1004803a 	cmplt	r2,r2,zero
6102b4a8:	1000081e 	bne	r2,zero,6102b4cc <lseek+0x4c>
6102b4ac:	e0bffc17 	ldw	r2,-16(fp)
6102b4b0:	10800324 	muli	r2,r2,12
6102b4b4:	1007883a 	mov	r3,r2
6102b4b8:	009840f4 	movhi	r2,24835
6102b4bc:	10ba4204 	addi	r2,r2,-5880
6102b4c0:	1887883a 	add	r3,r3,r2
6102b4c4:	e0ffff15 	stw	r3,-4(fp)
6102b4c8:	00000106 	br	6102b4d0 <lseek+0x50>
6102b4cc:	e03fff15 	stw	zero,-4(fp)
6102b4d0:	e0bfff17 	ldw	r2,-4(fp)
6102b4d4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
6102b4d8:	e0bffb17 	ldw	r2,-20(fp)
6102b4dc:	1005003a 	cmpeq	r2,r2,zero
6102b4e0:	1000111e 	bne	r2,zero,6102b528 <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
6102b4e4:	e0bffb17 	ldw	r2,-20(fp)
6102b4e8:	10800017 	ldw	r2,0(r2)
6102b4ec:	10800717 	ldw	r2,28(r2)
6102b4f0:	1005003a 	cmpeq	r2,r2,zero
6102b4f4:	1000091e 	bne	r2,zero,6102b51c <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
6102b4f8:	e0bffb17 	ldw	r2,-20(fp)
6102b4fc:	10800017 	ldw	r2,0(r2)
6102b500:	10800717 	ldw	r2,28(r2)
6102b504:	e13ffb17 	ldw	r4,-20(fp)
6102b508:	e17ffd17 	ldw	r5,-12(fp)
6102b50c:	e1bffe17 	ldw	r6,-8(fp)
6102b510:	103ee83a 	callr	r2
6102b514:	e0bffa15 	stw	r2,-24(fp)
6102b518:	00000506 	br	6102b530 <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
6102b51c:	00bfde84 	movi	r2,-134
6102b520:	e0bffa15 	stw	r2,-24(fp)
6102b524:	00000206 	br	6102b530 <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
6102b528:	00bfebc4 	movi	r2,-81
6102b52c:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
6102b530:	e0bffa17 	ldw	r2,-24(fp)
6102b534:	1004403a 	cmpge	r2,r2,zero
6102b538:	1000071e 	bne	r2,zero,6102b558 <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
6102b53c:	102b5700 	call	6102b570 <alt_get_errno>
6102b540:	1007883a 	mov	r3,r2
6102b544:	e0bffa17 	ldw	r2,-24(fp)
6102b548:	0085c83a 	sub	r2,zero,r2
6102b54c:	18800015 	stw	r2,0(r3)
    rc = -1;
6102b550:	00bfffc4 	movi	r2,-1
6102b554:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
6102b558:	e0bffa17 	ldw	r2,-24(fp)
}
6102b55c:	e037883a 	mov	sp,fp
6102b560:	dfc00117 	ldw	ra,4(sp)
6102b564:	df000017 	ldw	fp,0(sp)
6102b568:	dec00204 	addi	sp,sp,8
6102b56c:	f800283a 	ret

6102b570 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
6102b570:	defffd04 	addi	sp,sp,-12
6102b574:	dfc00215 	stw	ra,8(sp)
6102b578:	df000115 	stw	fp,4(sp)
6102b57c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
6102b580:	009840f4 	movhi	r2,24835
6102b584:	10bec504 	addi	r2,r2,-1260
6102b588:	10800017 	ldw	r2,0(r2)
6102b58c:	1005003a 	cmpeq	r2,r2,zero
6102b590:	1000061e 	bne	r2,zero,6102b5ac <alt_get_errno+0x3c>
6102b594:	009840f4 	movhi	r2,24835
6102b598:	10bec504 	addi	r2,r2,-1260
6102b59c:	10800017 	ldw	r2,0(r2)
6102b5a0:	103ee83a 	callr	r2
6102b5a4:	e0bfff15 	stw	r2,-4(fp)
6102b5a8:	00000306 	br	6102b5b8 <alt_get_errno+0x48>
6102b5ac:	009840f4 	movhi	r2,24835
6102b5b0:	10856704 	addi	r2,r2,5532
6102b5b4:	e0bfff15 	stw	r2,-4(fp)
6102b5b8:	e0bfff17 	ldw	r2,-4(fp)
}
6102b5bc:	e037883a 	mov	sp,fp
6102b5c0:	dfc00117 	ldw	ra,4(sp)
6102b5c4:	df000017 	ldw	fp,0(sp)
6102b5c8:	dec00204 	addi	sp,sp,8
6102b5cc:	f800283a 	ret

6102b5d0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
6102b5d0:	defffd04 	addi	sp,sp,-12
6102b5d4:	dfc00215 	stw	ra,8(sp)
6102b5d8:	df000115 	stw	fp,4(sp)
6102b5dc:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
6102b5e0:	0009883a 	mov	r4,zero
6102b5e4:	102bc6c0 	call	6102bc6c <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
6102b5e8:	102bca00 	call	6102bca0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
6102b5ec:	011840f4 	movhi	r4,24835
6102b5f0:	21382b04 	addi	r4,r4,-8020
6102b5f4:	015840f4 	movhi	r5,24835
6102b5f8:	29782b04 	addi	r5,r5,-8020
6102b5fc:	019840f4 	movhi	r6,24835
6102b600:	31b82b04 	addi	r6,r6,-8020
6102b604:	102d11c0 	call	6102d11c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
6102b608:	102cc940 	call	6102cc94 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
6102b60c:	011840f4 	movhi	r4,24835
6102b610:	21333e04 	addi	r4,r4,-13064
6102b614:	102d7740 	call	6102d774 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
6102b618:	d126ae17 	ldw	r4,-25928(gp)
6102b61c:	d166af17 	ldw	r5,-25924(gp)
6102b620:	d1a6b017 	ldw	r6,-25920(gp)
6102b624:	10209800 	call	61020980 <main>
6102b628:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
6102b62c:	01000044 	movi	r4,1
6102b630:	102af740 	call	6102af74 <close>
  exit (result);
6102b634:	e13fff17 	ldw	r4,-4(fp)
6102b638:	102d7880 	call	6102d788 <exit>

6102b63c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
6102b63c:	defffe04 	addi	sp,sp,-8
6102b640:	df000115 	stw	fp,4(sp)
6102b644:	df000104 	addi	fp,sp,4
6102b648:	e13fff15 	stw	r4,-4(fp)
}
6102b64c:	e037883a 	mov	sp,fp
6102b650:	df000017 	ldw	fp,0(sp)
6102b654:	dec00104 	addi	sp,sp,4
6102b658:	f800283a 	ret

6102b65c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
6102b65c:	defffe04 	addi	sp,sp,-8
6102b660:	df000115 	stw	fp,4(sp)
6102b664:	df000104 	addi	fp,sp,4
6102b668:	e13fff15 	stw	r4,-4(fp)
}
6102b66c:	e037883a 	mov	sp,fp
6102b670:	df000017 	ldw	fp,0(sp)
6102b674:	dec00104 	addi	sp,sp,4
6102b678:	f800283a 	ret

6102b67c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
6102b67c:	defff704 	addi	sp,sp,-36
6102b680:	dfc00815 	stw	ra,32(sp)
6102b684:	df000715 	stw	fp,28(sp)
6102b688:	df000704 	addi	fp,sp,28
6102b68c:	e13ffb15 	stw	r4,-20(fp)
6102b690:	e17ffc15 	stw	r5,-16(fp)
6102b694:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
6102b698:	e0bffb17 	ldw	r2,-20(fp)
6102b69c:	1004803a 	cmplt	r2,r2,zero
6102b6a0:	1000081e 	bne	r2,zero,6102b6c4 <read+0x48>
6102b6a4:	e0bffb17 	ldw	r2,-20(fp)
6102b6a8:	10800324 	muli	r2,r2,12
6102b6ac:	1007883a 	mov	r3,r2
6102b6b0:	009840f4 	movhi	r2,24835
6102b6b4:	10ba4204 	addi	r2,r2,-5880
6102b6b8:	1887883a 	add	r3,r3,r2
6102b6bc:	e0ffff15 	stw	r3,-4(fp)
6102b6c0:	00000106 	br	6102b6c8 <read+0x4c>
6102b6c4:	e03fff15 	stw	zero,-4(fp)
6102b6c8:	e0bfff17 	ldw	r2,-4(fp)
6102b6cc:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
6102b6d0:	e0bffa17 	ldw	r2,-24(fp)
6102b6d4:	1005003a 	cmpeq	r2,r2,zero
6102b6d8:	1000241e 	bne	r2,zero,6102b76c <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
6102b6dc:	e0bffa17 	ldw	r2,-24(fp)
6102b6e0:	10800217 	ldw	r2,8(r2)
6102b6e4:	108000cc 	andi	r2,r2,3
6102b6e8:	10800060 	cmpeqi	r2,r2,1
6102b6ec:	10001a1e 	bne	r2,zero,6102b758 <read+0xdc>
6102b6f0:	e0bffa17 	ldw	r2,-24(fp)
6102b6f4:	10800017 	ldw	r2,0(r2)
6102b6f8:	10800517 	ldw	r2,20(r2)
6102b6fc:	1005003a 	cmpeq	r2,r2,zero
6102b700:	1000151e 	bne	r2,zero,6102b758 <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
6102b704:	e0bffa17 	ldw	r2,-24(fp)
6102b708:	10800017 	ldw	r2,0(r2)
6102b70c:	10800517 	ldw	r2,20(r2)
6102b710:	e17ffc17 	ldw	r5,-16(fp)
6102b714:	e1bffd17 	ldw	r6,-12(fp)
6102b718:	e13ffa17 	ldw	r4,-24(fp)
6102b71c:	103ee83a 	callr	r2
6102b720:	e0bff915 	stw	r2,-28(fp)
6102b724:	e0bff917 	ldw	r2,-28(fp)
6102b728:	1004403a 	cmpge	r2,r2,zero
6102b72c:	1000071e 	bne	r2,zero,6102b74c <read+0xd0>
        {
          ALT_ERRNO = -rval;
6102b730:	102b79c0 	call	6102b79c <alt_get_errno>
6102b734:	e0fff917 	ldw	r3,-28(fp)
6102b738:	00c7c83a 	sub	r3,zero,r3
6102b73c:	10c00015 	stw	r3,0(r2)
          return -1;
6102b740:	00bfffc4 	movi	r2,-1
6102b744:	e0bffe15 	stw	r2,-8(fp)
6102b748:	00000e06 	br	6102b784 <read+0x108>
        }
        return rval;
6102b74c:	e0bff917 	ldw	r2,-28(fp)
6102b750:	e0bffe15 	stw	r2,-8(fp)
6102b754:	00000b06 	br	6102b784 <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
6102b758:	102b79c0 	call	6102b79c <alt_get_errno>
6102b75c:	1007883a 	mov	r3,r2
6102b760:	00800344 	movi	r2,13
6102b764:	18800015 	stw	r2,0(r3)
6102b768:	00000406 	br	6102b77c <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
6102b76c:	102b79c0 	call	6102b79c <alt_get_errno>
6102b770:	1007883a 	mov	r3,r2
6102b774:	00801444 	movi	r2,81
6102b778:	18800015 	stw	r2,0(r3)
  }
  return -1;
6102b77c:	00bfffc4 	movi	r2,-1
6102b780:	e0bffe15 	stw	r2,-8(fp)
6102b784:	e0bffe17 	ldw	r2,-8(fp)
}
6102b788:	e037883a 	mov	sp,fp
6102b78c:	dfc00117 	ldw	ra,4(sp)
6102b790:	df000017 	ldw	fp,0(sp)
6102b794:	dec00204 	addi	sp,sp,8
6102b798:	f800283a 	ret

6102b79c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
6102b79c:	defffd04 	addi	sp,sp,-12
6102b7a0:	dfc00215 	stw	ra,8(sp)
6102b7a4:	df000115 	stw	fp,4(sp)
6102b7a8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
6102b7ac:	009840f4 	movhi	r2,24835
6102b7b0:	10bec504 	addi	r2,r2,-1260
6102b7b4:	10800017 	ldw	r2,0(r2)
6102b7b8:	1005003a 	cmpeq	r2,r2,zero
6102b7bc:	1000061e 	bne	r2,zero,6102b7d8 <alt_get_errno+0x3c>
6102b7c0:	009840f4 	movhi	r2,24835
6102b7c4:	10bec504 	addi	r2,r2,-1260
6102b7c8:	10800017 	ldw	r2,0(r2)
6102b7cc:	103ee83a 	callr	r2
6102b7d0:	e0bfff15 	stw	r2,-4(fp)
6102b7d4:	00000306 	br	6102b7e4 <alt_get_errno+0x48>
6102b7d8:	009840f4 	movhi	r2,24835
6102b7dc:	10856704 	addi	r2,r2,5532
6102b7e0:	e0bfff15 	stw	r2,-4(fp)
6102b7e4:	e0bfff17 	ldw	r2,-4(fp)
}
6102b7e8:	e037883a 	mov	sp,fp
6102b7ec:	dfc00117 	ldw	ra,4(sp)
6102b7f0:	df000017 	ldw	fp,0(sp)
6102b7f4:	dec00204 	addi	sp,sp,8
6102b7f8:	f800283a 	ret

6102b7fc <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
6102b7fc:	defffe04 	addi	sp,sp,-8
6102b800:	df000115 	stw	fp,4(sp)
6102b804:	df000104 	addi	fp,sp,4
6102b808:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
6102b80c:	e0bfff17 	ldw	r2,-4(fp)
6102b810:	108000d0 	cmplti	r2,r2,3
6102b814:	10000d1e 	bne	r2,zero,6102b84c <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
6102b818:	e0bfff17 	ldw	r2,-4(fp)
6102b81c:	00d840f4 	movhi	r3,24835
6102b820:	18fa4204 	addi	r3,r3,-5880
6102b824:	10800324 	muli	r2,r2,12
6102b828:	10c5883a 	add	r2,r2,r3
6102b82c:	10800204 	addi	r2,r2,8
6102b830:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
6102b834:	e0bfff17 	ldw	r2,-4(fp)
6102b838:	00d840f4 	movhi	r3,24835
6102b83c:	18fa4204 	addi	r3,r3,-5880
6102b840:	10800324 	muli	r2,r2,12
6102b844:	10c5883a 	add	r2,r2,r3
6102b848:	10000015 	stw	zero,0(r2)
  }
}
6102b84c:	e037883a 	mov	sp,fp
6102b850:	df000017 	ldw	fp,0(sp)
6102b854:	dec00104 	addi	sp,sp,4
6102b858:	f800283a 	ret

6102b85c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
6102b85c:	defff804 	addi	sp,sp,-32
6102b860:	df000715 	stw	fp,28(sp)
6102b864:	df000704 	addi	fp,sp,28
6102b868:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
6102b86c:	0005303a 	rdctl	r2,status
6102b870:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
6102b874:	e0fffb17 	ldw	r3,-20(fp)
6102b878:	00bfff84 	movi	r2,-2
6102b87c:	1884703a 	and	r2,r3,r2
6102b880:	1001703a 	wrctl	status,r2
  
  return context;
6102b884:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
6102b888:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
6102b88c:	d0a00c17 	ldw	r2,-32720(gp)
6102b890:	10c000c4 	addi	r3,r2,3
6102b894:	00bfff04 	movi	r2,-4
6102b898:	1884703a 	and	r2,r3,r2
6102b89c:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
6102b8a0:	d0e00c17 	ldw	r3,-32720(gp)
6102b8a4:	e0bffe17 	ldw	r2,-8(fp)
6102b8a8:	1887883a 	add	r3,r3,r2
6102b8ac:	00984134 	movhi	r2,24836
6102b8b0:	10bd0004 	addi	r2,r2,-3072
6102b8b4:	10c0072e 	bgeu	r2,r3,6102b8d4 <sbrk+0x78>
6102b8b8:	e0bffd17 	ldw	r2,-12(fp)
6102b8bc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
6102b8c0:	e0bffa17 	ldw	r2,-24(fp)
6102b8c4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
6102b8c8:	00bfffc4 	movi	r2,-1
6102b8cc:	e0bfff15 	stw	r2,-4(fp)
6102b8d0:	00000c06 	br	6102b904 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
6102b8d4:	d0a00c17 	ldw	r2,-32720(gp)
6102b8d8:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
6102b8dc:	d0e00c17 	ldw	r3,-32720(gp)
6102b8e0:	e0bffe17 	ldw	r2,-8(fp)
6102b8e4:	1885883a 	add	r2,r3,r2
6102b8e8:	d0a00c15 	stw	r2,-32720(gp)
6102b8ec:	e0bffd17 	ldw	r2,-12(fp)
6102b8f0:	e0bff915 	stw	r2,-28(fp)
6102b8f4:	e0bff917 	ldw	r2,-28(fp)
6102b8f8:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
6102b8fc:	e0bffc17 	ldw	r2,-16(fp)
6102b900:	e0bfff15 	stw	r2,-4(fp)
6102b904:	e0bfff17 	ldw	r2,-4(fp)
} 
6102b908:	e037883a 	mov	sp,fp
6102b90c:	df000017 	ldw	fp,0(sp)
6102b910:	dec00104 	addi	sp,sp,4
6102b914:	f800283a 	ret

6102b918 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
6102b918:	defffa04 	addi	sp,sp,-24
6102b91c:	df000515 	stw	fp,20(sp)
6102b920:	df000504 	addi	fp,sp,20
6102b924:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
6102b928:	0005303a 	rdctl	r2,status
6102b92c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
6102b930:	e0fffd17 	ldw	r3,-12(fp)
6102b934:	00bfff84 	movi	r2,-2
6102b938:	1884703a 	and	r2,r3,r2
6102b93c:	1001703a 	wrctl	status,r2
  
  return context;
6102b940:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
6102b944:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
6102b948:	e0bfff17 	ldw	r2,-4(fp)
6102b94c:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
6102b950:	e0bffc17 	ldw	r2,-16(fp)
6102b954:	10c00017 	ldw	r3,0(r2)
6102b958:	e0bffc17 	ldw	r2,-16(fp)
6102b95c:	10800117 	ldw	r2,4(r2)
6102b960:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
6102b964:	e0bffc17 	ldw	r2,-16(fp)
6102b968:	10c00117 	ldw	r3,4(r2)
6102b96c:	e0bffc17 	ldw	r2,-16(fp)
6102b970:	10800017 	ldw	r2,0(r2)
6102b974:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
6102b978:	e0fffc17 	ldw	r3,-16(fp)
6102b97c:	e0bffc17 	ldw	r2,-16(fp)
6102b980:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
6102b984:	e0fffc17 	ldw	r3,-16(fp)
6102b988:	e0bffc17 	ldw	r2,-16(fp)
6102b98c:	18800015 	stw	r2,0(r3)
6102b990:	e0bffe17 	ldw	r2,-8(fp)
6102b994:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
6102b998:	e0bffb17 	ldw	r2,-20(fp)
6102b99c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
6102b9a0:	e037883a 	mov	sp,fp
6102b9a4:	df000017 	ldw	fp,0(sp)
6102b9a8:	dec00104 	addi	sp,sp,4
6102b9ac:	f800283a 	ret

6102b9b0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
6102b9b0:	defffb04 	addi	sp,sp,-20
6102b9b4:	dfc00415 	stw	ra,16(sp)
6102b9b8:	df000315 	stw	fp,12(sp)
6102b9bc:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
6102b9c0:	d0a00d17 	ldw	r2,-32716(gp)
6102b9c4:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
6102b9c8:	d0a6b217 	ldw	r2,-25912(gp)
6102b9cc:	10800044 	addi	r2,r2,1
6102b9d0:	d0a6b215 	stw	r2,-25912(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
6102b9d4:	00003106 	br	6102ba9c <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
6102b9d8:	e0bffe17 	ldw	r2,-8(fp)
6102b9dc:	10800017 	ldw	r2,0(r2)
6102b9e0:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
6102b9e4:	e0bffe17 	ldw	r2,-8(fp)
6102b9e8:	10800403 	ldbu	r2,16(r2)
6102b9ec:	10803fcc 	andi	r2,r2,255
6102b9f0:	1005003a 	cmpeq	r2,r2,zero
6102b9f4:	1000051e 	bne	r2,zero,6102ba0c <alt_tick+0x5c>
6102b9f8:	d0a6b217 	ldw	r2,-25912(gp)
6102b9fc:	1004c03a 	cmpne	r2,r2,zero
6102ba00:	1000021e 	bne	r2,zero,6102ba0c <alt_tick+0x5c>
    {
      alarm->rollover = 0;
6102ba04:	e0bffe17 	ldw	r2,-8(fp)
6102ba08:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
6102ba0c:	e0bffe17 	ldw	r2,-8(fp)
6102ba10:	10c00217 	ldw	r3,8(r2)
6102ba14:	d0a6b217 	ldw	r2,-25912(gp)
6102ba18:	10c01e36 	bltu	r2,r3,6102ba94 <alt_tick+0xe4>
6102ba1c:	e0bffe17 	ldw	r2,-8(fp)
6102ba20:	10800403 	ldbu	r2,16(r2)
6102ba24:	10803fcc 	andi	r2,r2,255
6102ba28:	1004c03a 	cmpne	r2,r2,zero
6102ba2c:	1000191e 	bne	r2,zero,6102ba94 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
6102ba30:	e0bffe17 	ldw	r2,-8(fp)
6102ba34:	10c00317 	ldw	r3,12(r2)
6102ba38:	e0bffe17 	ldw	r2,-8(fp)
6102ba3c:	11000517 	ldw	r4,20(r2)
6102ba40:	183ee83a 	callr	r3
6102ba44:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
6102ba48:	e0bffd17 	ldw	r2,-12(fp)
6102ba4c:	1004c03a 	cmpne	r2,r2,zero
6102ba50:	1000031e 	bne	r2,zero,6102ba60 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
6102ba54:	e13ffe17 	ldw	r4,-8(fp)
6102ba58:	102b9180 	call	6102b918 <alt_alarm_stop>
6102ba5c:	00000d06 	br	6102ba94 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
6102ba60:	e0bffe17 	ldw	r2,-8(fp)
6102ba64:	10c00217 	ldw	r3,8(r2)
6102ba68:	e0bffd17 	ldw	r2,-12(fp)
6102ba6c:	1887883a 	add	r3,r3,r2
6102ba70:	e0bffe17 	ldw	r2,-8(fp)
6102ba74:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
6102ba78:	e0bffe17 	ldw	r2,-8(fp)
6102ba7c:	10c00217 	ldw	r3,8(r2)
6102ba80:	d0a6b217 	ldw	r2,-25912(gp)
6102ba84:	1880032e 	bgeu	r3,r2,6102ba94 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
6102ba88:	e0fffe17 	ldw	r3,-8(fp)
6102ba8c:	00800044 	movi	r2,1
6102ba90:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
6102ba94:	e0bfff17 	ldw	r2,-4(fp)
6102ba98:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
6102ba9c:	d0e00d04 	addi	r3,gp,-32716
6102baa0:	e0bffe17 	ldw	r2,-8(fp)
6102baa4:	10ffcc1e 	bne	r2,r3,6102b9d8 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
6102baa8:	e037883a 	mov	sp,fp
6102baac:	dfc00117 	ldw	ra,4(sp)
6102bab0:	df000017 	ldw	fp,0(sp)
6102bab4:	dec00204 	addi	sp,sp,8
6102bab8:	f800283a 	ret

6102babc <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
6102babc:	defffd04 	addi	sp,sp,-12
6102bac0:	dfc00215 	stw	ra,8(sp)
6102bac4:	df000115 	stw	fp,4(sp)
6102bac8:	df000104 	addi	fp,sp,4
6102bacc:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
6102bad0:	e13fff17 	ldw	r4,-4(fp)
6102bad4:	102ca340 	call	6102ca34 <alt_busy_sleep>
}
6102bad8:	e037883a 	mov	sp,fp
6102badc:	dfc00117 	ldw	ra,4(sp)
6102bae0:	df000017 	ldw	fp,0(sp)
6102bae4:	dec00204 	addi	sp,sp,8
6102bae8:	f800283a 	ret

6102baec <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
6102baec:	defff704 	addi	sp,sp,-36
6102baf0:	dfc00815 	stw	ra,32(sp)
6102baf4:	df000715 	stw	fp,28(sp)
6102baf8:	df000704 	addi	fp,sp,28
6102bafc:	e13ffb15 	stw	r4,-20(fp)
6102bb00:	e17ffc15 	stw	r5,-16(fp)
6102bb04:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
6102bb08:	e0bffb17 	ldw	r2,-20(fp)
6102bb0c:	1004803a 	cmplt	r2,r2,zero
6102bb10:	1000081e 	bne	r2,zero,6102bb34 <write+0x48>
6102bb14:	e0bffb17 	ldw	r2,-20(fp)
6102bb18:	10800324 	muli	r2,r2,12
6102bb1c:	1007883a 	mov	r3,r2
6102bb20:	009840f4 	movhi	r2,24835
6102bb24:	10ba4204 	addi	r2,r2,-5880
6102bb28:	1887883a 	add	r3,r3,r2
6102bb2c:	e0ffff15 	stw	r3,-4(fp)
6102bb30:	00000106 	br	6102bb38 <write+0x4c>
6102bb34:	e03fff15 	stw	zero,-4(fp)
6102bb38:	e0bfff17 	ldw	r2,-4(fp)
6102bb3c:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
6102bb40:	e0bffa17 	ldw	r2,-24(fp)
6102bb44:	1005003a 	cmpeq	r2,r2,zero
6102bb48:	1000241e 	bne	r2,zero,6102bbdc <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
6102bb4c:	e0bffa17 	ldw	r2,-24(fp)
6102bb50:	10800217 	ldw	r2,8(r2)
6102bb54:	108000cc 	andi	r2,r2,3
6102bb58:	1005003a 	cmpeq	r2,r2,zero
6102bb5c:	10001a1e 	bne	r2,zero,6102bbc8 <write+0xdc>
6102bb60:	e0bffa17 	ldw	r2,-24(fp)
6102bb64:	10800017 	ldw	r2,0(r2)
6102bb68:	10800617 	ldw	r2,24(r2)
6102bb6c:	1005003a 	cmpeq	r2,r2,zero
6102bb70:	1000151e 	bne	r2,zero,6102bbc8 <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
6102bb74:	e0bffa17 	ldw	r2,-24(fp)
6102bb78:	10800017 	ldw	r2,0(r2)
6102bb7c:	10800617 	ldw	r2,24(r2)
6102bb80:	e17ffc17 	ldw	r5,-16(fp)
6102bb84:	e1bffd17 	ldw	r6,-12(fp)
6102bb88:	e13ffa17 	ldw	r4,-24(fp)
6102bb8c:	103ee83a 	callr	r2
6102bb90:	e0bff915 	stw	r2,-28(fp)
6102bb94:	e0bff917 	ldw	r2,-28(fp)
6102bb98:	1004403a 	cmpge	r2,r2,zero
6102bb9c:	1000071e 	bne	r2,zero,6102bbbc <write+0xd0>
      {
        ALT_ERRNO = -rval;
6102bba0:	102bc0c0 	call	6102bc0c <alt_get_errno>
6102bba4:	e0fff917 	ldw	r3,-28(fp)
6102bba8:	00c7c83a 	sub	r3,zero,r3
6102bbac:	10c00015 	stw	r3,0(r2)
        return -1;
6102bbb0:	00bfffc4 	movi	r2,-1
6102bbb4:	e0bffe15 	stw	r2,-8(fp)
6102bbb8:	00000e06 	br	6102bbf4 <write+0x108>
      }
      return rval;
6102bbbc:	e0bff917 	ldw	r2,-28(fp)
6102bbc0:	e0bffe15 	stw	r2,-8(fp)
6102bbc4:	00000b06 	br	6102bbf4 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
6102bbc8:	102bc0c0 	call	6102bc0c <alt_get_errno>
6102bbcc:	1007883a 	mov	r3,r2
6102bbd0:	00800344 	movi	r2,13
6102bbd4:	18800015 	stw	r2,0(r3)
6102bbd8:	00000406 	br	6102bbec <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
6102bbdc:	102bc0c0 	call	6102bc0c <alt_get_errno>
6102bbe0:	1007883a 	mov	r3,r2
6102bbe4:	00801444 	movi	r2,81
6102bbe8:	18800015 	stw	r2,0(r3)
  }
  return -1;
6102bbec:	00bfffc4 	movi	r2,-1
6102bbf0:	e0bffe15 	stw	r2,-8(fp)
6102bbf4:	e0bffe17 	ldw	r2,-8(fp)
}
6102bbf8:	e037883a 	mov	sp,fp
6102bbfc:	dfc00117 	ldw	ra,4(sp)
6102bc00:	df000017 	ldw	fp,0(sp)
6102bc04:	dec00204 	addi	sp,sp,8
6102bc08:	f800283a 	ret

6102bc0c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
6102bc0c:	defffd04 	addi	sp,sp,-12
6102bc10:	dfc00215 	stw	ra,8(sp)
6102bc14:	df000115 	stw	fp,4(sp)
6102bc18:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
6102bc1c:	009840f4 	movhi	r2,24835
6102bc20:	10bec504 	addi	r2,r2,-1260
6102bc24:	10800017 	ldw	r2,0(r2)
6102bc28:	1005003a 	cmpeq	r2,r2,zero
6102bc2c:	1000061e 	bne	r2,zero,6102bc48 <alt_get_errno+0x3c>
6102bc30:	009840f4 	movhi	r2,24835
6102bc34:	10bec504 	addi	r2,r2,-1260
6102bc38:	10800017 	ldw	r2,0(r2)
6102bc3c:	103ee83a 	callr	r2
6102bc40:	e0bfff15 	stw	r2,-4(fp)
6102bc44:	00000306 	br	6102bc54 <alt_get_errno+0x48>
6102bc48:	009840f4 	movhi	r2,24835
6102bc4c:	10856704 	addi	r2,r2,5532
6102bc50:	e0bfff15 	stw	r2,-4(fp)
6102bc54:	e0bfff17 	ldw	r2,-4(fp)
}
6102bc58:	e037883a 	mov	sp,fp
6102bc5c:	dfc00117 	ldw	ra,4(sp)
6102bc60:	df000017 	ldw	fp,0(sp)
6102bc64:	dec00204 	addi	sp,sp,8
6102bc68:	f800283a 	ret

6102bc6c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
6102bc6c:	defffd04 	addi	sp,sp,-12
6102bc70:	dfc00215 	stw	ra,8(sp)
6102bc74:	df000115 	stw	fp,4(sp)
6102bc78:	df000104 	addi	fp,sp,4
6102bc7c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS, nios2_qsys);
6102bc80:	102d4580 	call	6102d458 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
6102bc84:	00800044 	movi	r2,1
6102bc88:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
6102bc8c:	e037883a 	mov	sp,fp
6102bc90:	dfc00117 	ldw	ra,4(sp)
6102bc94:	df000017 	ldw	fp,0(sp)
6102bc98:	dec00204 	addi	sp,sp,8
6102bc9c:	f800283a 	ret

6102bca0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
6102bca0:	defffe04 	addi	sp,sp,-8
6102bca4:	dfc00115 	stw	ra,4(sp)
6102bca8:	df000015 	stw	fp,0(sp)
6102bcac:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
6102bcb0:	01180034 	movhi	r4,24576
6102bcb4:	21000804 	addi	r4,r4,32
6102bcb8:	000b883a 	mov	r5,zero
6102bcbc:	01800044 	movi	r6,1
6102bcc0:	01c0fa04 	movi	r7,1000
6102bcc4:	102c8500 	call	6102c850 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
6102bcc8:	011840f4 	movhi	r4,24835
6102bccc:	213aac04 	addi	r4,r4,-5456
6102bcd0:	000b883a 	mov	r5,zero
6102bcd4:	000d883a 	mov	r6,zero
6102bcd8:	102be7c0 	call	6102be7c <altera_avalon_jtag_uart_init>
6102bcdc:	011840f4 	movhi	r4,24835
6102bce0:	213aa204 	addi	r4,r4,-5496
6102bce4:	102bcfc0 	call	6102bcfc <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SPI, spi);
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
}
6102bce8:	e037883a 	mov	sp,fp
6102bcec:	dfc00117 	ldw	ra,4(sp)
6102bcf0:	df000017 	ldw	fp,0(sp)
6102bcf4:	dec00204 	addi	sp,sp,8
6102bcf8:	f800283a 	ret

6102bcfc <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
6102bcfc:	defffd04 	addi	sp,sp,-12
6102bd00:	dfc00215 	stw	ra,8(sp)
6102bd04:	df000115 	stw	fp,4(sp)
6102bd08:	df000104 	addi	fp,sp,4
6102bd0c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
6102bd10:	e13fff17 	ldw	r4,-4(fp)
6102bd14:	015840f4 	movhi	r5,24835
6102bd18:	297ec204 	addi	r5,r5,-1272
6102bd1c:	102cb800 	call	6102cb80 <alt_dev_llist_insert>
}
6102bd20:	e037883a 	mov	sp,fp
6102bd24:	dfc00117 	ldw	ra,4(sp)
6102bd28:	df000017 	ldw	fp,0(sp)
6102bd2c:	dec00204 	addi	sp,sp,8
6102bd30:	f800283a 	ret

6102bd34 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
6102bd34:	defffa04 	addi	sp,sp,-24
6102bd38:	dfc00515 	stw	ra,20(sp)
6102bd3c:	df000415 	stw	fp,16(sp)
6102bd40:	df000404 	addi	fp,sp,16
6102bd44:	e13ffd15 	stw	r4,-12(fp)
6102bd48:	e17ffe15 	stw	r5,-8(fp)
6102bd4c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
6102bd50:	e0bffd17 	ldw	r2,-12(fp)
6102bd54:	10800017 	ldw	r2,0(r2)
6102bd58:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
6102bd5c:	e0bffc17 	ldw	r2,-16(fp)
6102bd60:	11000a04 	addi	r4,r2,40
6102bd64:	e0bffd17 	ldw	r2,-12(fp)
6102bd68:	11c00217 	ldw	r7,8(r2)
6102bd6c:	e17ffe17 	ldw	r5,-8(fp)
6102bd70:	e1bfff17 	ldw	r6,-4(fp)
6102bd74:	102c37c0 	call	6102c37c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
6102bd78:	e037883a 	mov	sp,fp
6102bd7c:	dfc00117 	ldw	ra,4(sp)
6102bd80:	df000017 	ldw	fp,0(sp)
6102bd84:	dec00204 	addi	sp,sp,8
6102bd88:	f800283a 	ret

6102bd8c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
6102bd8c:	defffa04 	addi	sp,sp,-24
6102bd90:	dfc00515 	stw	ra,20(sp)
6102bd94:	df000415 	stw	fp,16(sp)
6102bd98:	df000404 	addi	fp,sp,16
6102bd9c:	e13ffd15 	stw	r4,-12(fp)
6102bda0:	e17ffe15 	stw	r5,-8(fp)
6102bda4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
6102bda8:	e0bffd17 	ldw	r2,-12(fp)
6102bdac:	10800017 	ldw	r2,0(r2)
6102bdb0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
6102bdb4:	e0bffc17 	ldw	r2,-16(fp)
6102bdb8:	11000a04 	addi	r4,r2,40
6102bdbc:	e0bffd17 	ldw	r2,-12(fp)
6102bdc0:	11c00217 	ldw	r7,8(r2)
6102bdc4:	e17ffe17 	ldw	r5,-8(fp)
6102bdc8:	e1bfff17 	ldw	r6,-4(fp)
6102bdcc:	102c5a00 	call	6102c5a0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
6102bdd0:	e037883a 	mov	sp,fp
6102bdd4:	dfc00117 	ldw	ra,4(sp)
6102bdd8:	df000017 	ldw	fp,0(sp)
6102bddc:	dec00204 	addi	sp,sp,8
6102bde0:	f800283a 	ret

6102bde4 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
6102bde4:	defffc04 	addi	sp,sp,-16
6102bde8:	dfc00315 	stw	ra,12(sp)
6102bdec:	df000215 	stw	fp,8(sp)
6102bdf0:	df000204 	addi	fp,sp,8
6102bdf4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
6102bdf8:	e0bfff17 	ldw	r2,-4(fp)
6102bdfc:	10800017 	ldw	r2,0(r2)
6102be00:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
6102be04:	e0bffe17 	ldw	r2,-8(fp)
6102be08:	11000a04 	addi	r4,r2,40
6102be0c:	e0bfff17 	ldw	r2,-4(fp)
6102be10:	11400217 	ldw	r5,8(r2)
6102be14:	102c2140 	call	6102c214 <altera_avalon_jtag_uart_close>
}
6102be18:	e037883a 	mov	sp,fp
6102be1c:	dfc00117 	ldw	ra,4(sp)
6102be20:	df000017 	ldw	fp,0(sp)
6102be24:	dec00204 	addi	sp,sp,8
6102be28:	f800283a 	ret

6102be2c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
6102be2c:	defffa04 	addi	sp,sp,-24
6102be30:	dfc00515 	stw	ra,20(sp)
6102be34:	df000415 	stw	fp,16(sp)
6102be38:	df000404 	addi	fp,sp,16
6102be3c:	e13ffd15 	stw	r4,-12(fp)
6102be40:	e17ffe15 	stw	r5,-8(fp)
6102be44:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
6102be48:	e0bffd17 	ldw	r2,-12(fp)
6102be4c:	10800017 	ldw	r2,0(r2)
6102be50:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
6102be54:	e0bffc17 	ldw	r2,-16(fp)
6102be58:	11000a04 	addi	r4,r2,40
6102be5c:	e17ffe17 	ldw	r5,-8(fp)
6102be60:	e1bfff17 	ldw	r6,-4(fp)
6102be64:	102c2880 	call	6102c288 <altera_avalon_jtag_uart_ioctl>
}
6102be68:	e037883a 	mov	sp,fp
6102be6c:	dfc00117 	ldw	ra,4(sp)
6102be70:	df000017 	ldw	fp,0(sp)
6102be74:	dec00204 	addi	sp,sp,8
6102be78:	f800283a 	ret

6102be7c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
6102be7c:	defffa04 	addi	sp,sp,-24
6102be80:	dfc00515 	stw	ra,20(sp)
6102be84:	df000415 	stw	fp,16(sp)
6102be88:	df000404 	addi	fp,sp,16
6102be8c:	e13ffd15 	stw	r4,-12(fp)
6102be90:	e17ffe15 	stw	r5,-8(fp)
6102be94:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
6102be98:	e0fffd17 	ldw	r3,-12(fp)
6102be9c:	00800044 	movi	r2,1
6102bea0:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
6102bea4:	e0bffd17 	ldw	r2,-12(fp)
6102bea8:	10800017 	ldw	r2,0(r2)
6102beac:	11000104 	addi	r4,r2,4
6102beb0:	e0bffd17 	ldw	r2,-12(fp)
6102beb4:	10800817 	ldw	r2,32(r2)
6102beb8:	1007883a 	mov	r3,r2
6102bebc:	2005883a 	mov	r2,r4
6102bec0:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
6102bec4:	e13ffe17 	ldw	r4,-8(fp)
6102bec8:	e17fff17 	ldw	r5,-4(fp)
6102becc:	d8000015 	stw	zero,0(sp)
6102bed0:	019840f4 	movhi	r6,24835
6102bed4:	31afcf04 	addi	r6,r6,-16580
6102bed8:	e1fffd17 	ldw	r7,-12(fp)
6102bedc:	102cd8c0 	call	6102cd8c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
6102bee0:	e0bffd17 	ldw	r2,-12(fp)
6102bee4:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
6102bee8:	e0bffd17 	ldw	r2,-12(fp)
6102beec:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
6102bef0:	009840f4 	movhi	r2,24835
6102bef4:	10856b04 	addi	r2,r2,5548
6102bef8:	10800017 	ldw	r2,0(r2)
6102befc:	100b883a 	mov	r5,r2
6102bf00:	019840f4 	movhi	r6,24835
6102bf04:	31b05904 	addi	r6,r6,-16028
6102bf08:	e1fffd17 	ldw	r7,-12(fp)
6102bf0c:	102c8e00 	call	6102c8e0 <alt_alarm_start>
6102bf10:	1004403a 	cmpge	r2,r2,zero
6102bf14:	1000041e 	bne	r2,zero,6102bf28 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
6102bf18:	e0fffd17 	ldw	r3,-12(fp)
6102bf1c:	00a00034 	movhi	r2,32768
6102bf20:	10bfffc4 	addi	r2,r2,-1
6102bf24:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
6102bf28:	e037883a 	mov	sp,fp
6102bf2c:	dfc00117 	ldw	ra,4(sp)
6102bf30:	df000017 	ldw	fp,0(sp)
6102bf34:	dec00204 	addi	sp,sp,8
6102bf38:	f800283a 	ret

6102bf3c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
6102bf3c:	defff804 	addi	sp,sp,-32
6102bf40:	df000715 	stw	fp,28(sp)
6102bf44:	df000704 	addi	fp,sp,28
6102bf48:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
6102bf4c:	e0bfff17 	ldw	r2,-4(fp)
6102bf50:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
6102bf54:	e0bffe17 	ldw	r2,-8(fp)
6102bf58:	10800017 	ldw	r2,0(r2)
6102bf5c:	e0bffd15 	stw	r2,-12(fp)
6102bf60:	00000006 	br	6102bf64 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
6102bf64:	e0bffd17 	ldw	r2,-12(fp)
6102bf68:	10800104 	addi	r2,r2,4
6102bf6c:	10800037 	ldwio	r2,0(r2)
6102bf70:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
6102bf74:	e0bffc17 	ldw	r2,-16(fp)
6102bf78:	1080c00c 	andi	r2,r2,768
6102bf7c:	1005003a 	cmpeq	r2,r2,zero
6102bf80:	1000741e 	bne	r2,zero,6102c154 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
6102bf84:	e0bffc17 	ldw	r2,-16(fp)
6102bf88:	1080400c 	andi	r2,r2,256
6102bf8c:	1005003a 	cmpeq	r2,r2,zero
6102bf90:	1000351e 	bne	r2,zero,6102c068 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
6102bf94:	00800074 	movhi	r2,1
6102bf98:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
6102bf9c:	e0bffe17 	ldw	r2,-8(fp)
6102bfa0:	10800a17 	ldw	r2,40(r2)
6102bfa4:	10800044 	addi	r2,r2,1
6102bfa8:	1081ffcc 	andi	r2,r2,2047
6102bfac:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
6102bfb0:	e0bffe17 	ldw	r2,-8(fp)
6102bfb4:	10c00b17 	ldw	r3,44(r2)
6102bfb8:	e0bffa17 	ldw	r2,-24(fp)
6102bfbc:	18801626 	beq	r3,r2,6102c018 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
6102bfc0:	e0bffd17 	ldw	r2,-12(fp)
6102bfc4:	10800037 	ldwio	r2,0(r2)
6102bfc8:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
6102bfcc:	e0bffb17 	ldw	r2,-20(fp)
6102bfd0:	10a0000c 	andi	r2,r2,32768
6102bfd4:	1005003a 	cmpeq	r2,r2,zero
6102bfd8:	10000f1e 	bne	r2,zero,6102c018 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
6102bfdc:	e0bffe17 	ldw	r2,-8(fp)
6102bfe0:	10c00a17 	ldw	r3,40(r2)
6102bfe4:	e0bffb17 	ldw	r2,-20(fp)
6102bfe8:	1009883a 	mov	r4,r2
6102bfec:	e0bffe17 	ldw	r2,-8(fp)
6102bff0:	1885883a 	add	r2,r3,r2
6102bff4:	10800e04 	addi	r2,r2,56
6102bff8:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
6102bffc:	e0bffe17 	ldw	r2,-8(fp)
6102c000:	10800a17 	ldw	r2,40(r2)
6102c004:	10800044 	addi	r2,r2,1
6102c008:	10c1ffcc 	andi	r3,r2,2047
6102c00c:	e0bffe17 	ldw	r2,-8(fp)
6102c010:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
6102c014:	003fe106 	br	6102bf9c <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
6102c018:	e0bffb17 	ldw	r2,-20(fp)
6102c01c:	10bfffec 	andhi	r2,r2,65535
6102c020:	1005003a 	cmpeq	r2,r2,zero
6102c024:	1000101e 	bne	r2,zero,6102c068 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
6102c028:	e0bffe17 	ldw	r2,-8(fp)
6102c02c:	10c00817 	ldw	r3,32(r2)
6102c030:	00bfff84 	movi	r2,-2
6102c034:	1886703a 	and	r3,r3,r2
6102c038:	e0bffe17 	ldw	r2,-8(fp)
6102c03c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
6102c040:	e0bffd17 	ldw	r2,-12(fp)
6102c044:	11000104 	addi	r4,r2,4
6102c048:	e0bffe17 	ldw	r2,-8(fp)
6102c04c:	10800817 	ldw	r2,32(r2)
6102c050:	1007883a 	mov	r3,r2
6102c054:	2005883a 	mov	r2,r4
6102c058:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
6102c05c:	e0bffd17 	ldw	r2,-12(fp)
6102c060:	10800104 	addi	r2,r2,4
6102c064:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
6102c068:	e0bffc17 	ldw	r2,-16(fp)
6102c06c:	1080800c 	andi	r2,r2,512
6102c070:	1005003a 	cmpeq	r2,r2,zero
6102c074:	103fbb1e 	bne	r2,zero,6102bf64 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
6102c078:	e0bffc17 	ldw	r2,-16(fp)
6102c07c:	10bfffec 	andhi	r2,r2,65535
6102c080:	1004d43a 	srli	r2,r2,16
6102c084:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
6102c088:	00001506 	br	6102c0e0 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
6102c08c:	e13ffd17 	ldw	r4,-12(fp)
6102c090:	e0bffe17 	ldw	r2,-8(fp)
6102c094:	10c00d17 	ldw	r3,52(r2)
6102c098:	e0bffe17 	ldw	r2,-8(fp)
6102c09c:	1885883a 	add	r2,r3,r2
6102c0a0:	10820e04 	addi	r2,r2,2104
6102c0a4:	10800003 	ldbu	r2,0(r2)
6102c0a8:	10c03fcc 	andi	r3,r2,255
6102c0ac:	18c0201c 	xori	r3,r3,128
6102c0b0:	18ffe004 	addi	r3,r3,-128
6102c0b4:	2005883a 	mov	r2,r4
6102c0b8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
6102c0bc:	e0bffe17 	ldw	r2,-8(fp)
6102c0c0:	10800d17 	ldw	r2,52(r2)
6102c0c4:	10800044 	addi	r2,r2,1
6102c0c8:	10c1ffcc 	andi	r3,r2,2047
6102c0cc:	e0bffe17 	ldw	r2,-8(fp)
6102c0d0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
6102c0d4:	e0bff917 	ldw	r2,-28(fp)
6102c0d8:	10bfffc4 	addi	r2,r2,-1
6102c0dc:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
6102c0e0:	e0bff917 	ldw	r2,-28(fp)
6102c0e4:	1005003a 	cmpeq	r2,r2,zero
6102c0e8:	1000051e 	bne	r2,zero,6102c100 <altera_avalon_jtag_uart_irq+0x1c4>
6102c0ec:	e0bffe17 	ldw	r2,-8(fp)
6102c0f0:	10c00d17 	ldw	r3,52(r2)
6102c0f4:	e0bffe17 	ldw	r2,-8(fp)
6102c0f8:	10800c17 	ldw	r2,48(r2)
6102c0fc:	18bfe31e 	bne	r3,r2,6102c08c <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
6102c100:	e0bff917 	ldw	r2,-28(fp)
6102c104:	1005003a 	cmpeq	r2,r2,zero
6102c108:	103f961e 	bne	r2,zero,6102bf64 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
6102c10c:	e0bffe17 	ldw	r2,-8(fp)
6102c110:	10c00817 	ldw	r3,32(r2)
6102c114:	00bfff44 	movi	r2,-3
6102c118:	1886703a 	and	r3,r3,r2
6102c11c:	e0bffe17 	ldw	r2,-8(fp)
6102c120:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
6102c124:	e0bffe17 	ldw	r2,-8(fp)
6102c128:	10800017 	ldw	r2,0(r2)
6102c12c:	11000104 	addi	r4,r2,4
6102c130:	e0bffe17 	ldw	r2,-8(fp)
6102c134:	10800817 	ldw	r2,32(r2)
6102c138:	1007883a 	mov	r3,r2
6102c13c:	2005883a 	mov	r2,r4
6102c140:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
6102c144:	e0bffd17 	ldw	r2,-12(fp)
6102c148:	10800104 	addi	r2,r2,4
6102c14c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
6102c150:	003f8406 	br	6102bf64 <altera_avalon_jtag_uart_irq+0x28>
}
6102c154:	e037883a 	mov	sp,fp
6102c158:	df000017 	ldw	fp,0(sp)
6102c15c:	dec00104 	addi	sp,sp,4
6102c160:	f800283a 	ret

6102c164 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
6102c164:	defffc04 	addi	sp,sp,-16
6102c168:	df000315 	stw	fp,12(sp)
6102c16c:	df000304 	addi	fp,sp,12
6102c170:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
6102c174:	e0bfff17 	ldw	r2,-4(fp)
6102c178:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
6102c17c:	e0bffe17 	ldw	r2,-8(fp)
6102c180:	10800017 	ldw	r2,0(r2)
6102c184:	10800104 	addi	r2,r2,4
6102c188:	10800037 	ldwio	r2,0(r2)
6102c18c:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
6102c190:	e0bffd17 	ldw	r2,-12(fp)
6102c194:	1081000c 	andi	r2,r2,1024
6102c198:	1005003a 	cmpeq	r2,r2,zero
6102c19c:	10000c1e 	bne	r2,zero,6102c1d0 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
6102c1a0:	e0bffe17 	ldw	r2,-8(fp)
6102c1a4:	10800017 	ldw	r2,0(r2)
6102c1a8:	11000104 	addi	r4,r2,4
6102c1ac:	e0bffe17 	ldw	r2,-8(fp)
6102c1b0:	10800817 	ldw	r2,32(r2)
6102c1b4:	10810014 	ori	r2,r2,1024
6102c1b8:	1007883a 	mov	r3,r2
6102c1bc:	2005883a 	mov	r2,r4
6102c1c0:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
6102c1c4:	e0bffe17 	ldw	r2,-8(fp)
6102c1c8:	10000915 	stw	zero,36(r2)
6102c1cc:	00000a06 	br	6102c1f8 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
6102c1d0:	e0bffe17 	ldw	r2,-8(fp)
6102c1d4:	10c00917 	ldw	r3,36(r2)
6102c1d8:	00a00034 	movhi	r2,32768
6102c1dc:	10bfff04 	addi	r2,r2,-4
6102c1e0:	10c00536 	bltu	r2,r3,6102c1f8 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
6102c1e4:	e0bffe17 	ldw	r2,-8(fp)
6102c1e8:	10800917 	ldw	r2,36(r2)
6102c1ec:	10c00044 	addi	r3,r2,1
6102c1f0:	e0bffe17 	ldw	r2,-8(fp)
6102c1f4:	10c00915 	stw	r3,36(r2)
6102c1f8:	009840f4 	movhi	r2,24835
6102c1fc:	10856b04 	addi	r2,r2,5548
6102c200:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
6102c204:	e037883a 	mov	sp,fp
6102c208:	df000017 	ldw	fp,0(sp)
6102c20c:	dec00104 	addi	sp,sp,4
6102c210:	f800283a 	ret

6102c214 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
6102c214:	defffc04 	addi	sp,sp,-16
6102c218:	df000315 	stw	fp,12(sp)
6102c21c:	df000304 	addi	fp,sp,12
6102c220:	e13ffd15 	stw	r4,-12(fp)
6102c224:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
6102c228:	00000706 	br	6102c248 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
6102c22c:	e0bffe17 	ldw	r2,-8(fp)
6102c230:	1090000c 	andi	r2,r2,16384
6102c234:	1005003a 	cmpeq	r2,r2,zero
6102c238:	1000031e 	bne	r2,zero,6102c248 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
6102c23c:	00bffd44 	movi	r2,-11
6102c240:	e0bfff15 	stw	r2,-4(fp)
6102c244:	00000b06 	br	6102c274 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
6102c248:	e0bffd17 	ldw	r2,-12(fp)
6102c24c:	10c00d17 	ldw	r3,52(r2)
6102c250:	e0bffd17 	ldw	r2,-12(fp)
6102c254:	10800c17 	ldw	r2,48(r2)
6102c258:	18800526 	beq	r3,r2,6102c270 <altera_avalon_jtag_uart_close+0x5c>
6102c25c:	e0bffd17 	ldw	r2,-12(fp)
6102c260:	10c00917 	ldw	r3,36(r2)
6102c264:	e0bffd17 	ldw	r2,-12(fp)
6102c268:	10800117 	ldw	r2,4(r2)
6102c26c:	18bfef36 	bltu	r3,r2,6102c22c <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
6102c270:	e03fff15 	stw	zero,-4(fp)
6102c274:	e0bfff17 	ldw	r2,-4(fp)
}
6102c278:	e037883a 	mov	sp,fp
6102c27c:	df000017 	ldw	fp,0(sp)
6102c280:	dec00104 	addi	sp,sp,4
6102c284:	f800283a 	ret

6102c288 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
6102c288:	defff804 	addi	sp,sp,-32
6102c28c:	df000715 	stw	fp,28(sp)
6102c290:	df000704 	addi	fp,sp,28
6102c294:	e13ffb15 	stw	r4,-20(fp)
6102c298:	e17ffc15 	stw	r5,-16(fp)
6102c29c:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
6102c2a0:	00bff9c4 	movi	r2,-25
6102c2a4:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
6102c2a8:	e0bffc17 	ldw	r2,-16(fp)
6102c2ac:	e0bfff15 	stw	r2,-4(fp)
6102c2b0:	e0ffff17 	ldw	r3,-4(fp)
6102c2b4:	189a8060 	cmpeqi	r2,r3,27137
6102c2b8:	1000041e 	bne	r2,zero,6102c2cc <altera_avalon_jtag_uart_ioctl+0x44>
6102c2bc:	e0ffff17 	ldw	r3,-4(fp)
6102c2c0:	189a80a0 	cmpeqi	r2,r3,27138
6102c2c4:	10001b1e 	bne	r2,zero,6102c334 <altera_avalon_jtag_uart_ioctl+0xac>
6102c2c8:	00002706 	br	6102c368 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
6102c2cc:	e0bffb17 	ldw	r2,-20(fp)
6102c2d0:	10c00117 	ldw	r3,4(r2)
6102c2d4:	00a00034 	movhi	r2,32768
6102c2d8:	10bfffc4 	addi	r2,r2,-1
6102c2dc:	18802226 	beq	r3,r2,6102c368 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
6102c2e0:	e0bffd17 	ldw	r2,-12(fp)
6102c2e4:	10800017 	ldw	r2,0(r2)
6102c2e8:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
6102c2ec:	e0bff917 	ldw	r2,-28(fp)
6102c2f0:	10800090 	cmplti	r2,r2,2
6102c2f4:	1000071e 	bne	r2,zero,6102c314 <altera_avalon_jtag_uart_ioctl+0x8c>
6102c2f8:	e0fff917 	ldw	r3,-28(fp)
6102c2fc:	00a00034 	movhi	r2,32768
6102c300:	10bfffc4 	addi	r2,r2,-1
6102c304:	18800326 	beq	r3,r2,6102c314 <altera_avalon_jtag_uart_ioctl+0x8c>
6102c308:	e0bff917 	ldw	r2,-28(fp)
6102c30c:	e0bffe15 	stw	r2,-8(fp)
6102c310:	00000306 	br	6102c320 <altera_avalon_jtag_uart_ioctl+0x98>
6102c314:	00e00034 	movhi	r3,32768
6102c318:	18ffff84 	addi	r3,r3,-2
6102c31c:	e0fffe15 	stw	r3,-8(fp)
6102c320:	e0bffb17 	ldw	r2,-20(fp)
6102c324:	e0fffe17 	ldw	r3,-8(fp)
6102c328:	10c00115 	stw	r3,4(r2)
      rc = 0;
6102c32c:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
6102c330:	00000d06 	br	6102c368 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
6102c334:	e0bffb17 	ldw	r2,-20(fp)
6102c338:	10c00117 	ldw	r3,4(r2)
6102c33c:	00a00034 	movhi	r2,32768
6102c340:	10bfffc4 	addi	r2,r2,-1
6102c344:	18800826 	beq	r3,r2,6102c368 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
6102c348:	e13ffd17 	ldw	r4,-12(fp)
6102c34c:	e0bffb17 	ldw	r2,-20(fp)
6102c350:	10c00917 	ldw	r3,36(r2)
6102c354:	e0bffb17 	ldw	r2,-20(fp)
6102c358:	10800117 	ldw	r2,4(r2)
6102c35c:	1885803a 	cmpltu	r2,r3,r2
6102c360:	20800015 	stw	r2,0(r4)
      rc = 0;
6102c364:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
6102c368:	e0bffa17 	ldw	r2,-24(fp)
}
6102c36c:	e037883a 	mov	sp,fp
6102c370:	df000017 	ldw	fp,0(sp)
6102c374:	dec00104 	addi	sp,sp,4
6102c378:	f800283a 	ret

6102c37c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
6102c37c:	defff204 	addi	sp,sp,-56
6102c380:	dfc00d15 	stw	ra,52(sp)
6102c384:	df000c15 	stw	fp,48(sp)
6102c388:	df000c04 	addi	fp,sp,48
6102c38c:	e13ffb15 	stw	r4,-20(fp)
6102c390:	e17ffc15 	stw	r5,-16(fp)
6102c394:	e1bffd15 	stw	r6,-12(fp)
6102c398:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
6102c39c:	e0bffc17 	ldw	r2,-16(fp)
6102c3a0:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
6102c3a4:	00004806 	br	6102c4c8 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
6102c3a8:	e0bffb17 	ldw	r2,-20(fp)
6102c3ac:	10800a17 	ldw	r2,40(r2)
6102c3b0:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
6102c3b4:	e0bffb17 	ldw	r2,-20(fp)
6102c3b8:	10800b17 	ldw	r2,44(r2)
6102c3bc:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
6102c3c0:	e0fff717 	ldw	r3,-36(fp)
6102c3c4:	e0bff617 	ldw	r2,-40(fp)
6102c3c8:	18800536 	bltu	r3,r2,6102c3e0 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
6102c3cc:	e0bff717 	ldw	r2,-36(fp)
6102c3d0:	e0fff617 	ldw	r3,-40(fp)
6102c3d4:	10c5c83a 	sub	r2,r2,r3
6102c3d8:	e0bff815 	stw	r2,-32(fp)
6102c3dc:	00000406 	br	6102c3f0 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
6102c3e0:	00820004 	movi	r2,2048
6102c3e4:	e0fff617 	ldw	r3,-40(fp)
6102c3e8:	10c5c83a 	sub	r2,r2,r3
6102c3ec:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
6102c3f0:	e0bff817 	ldw	r2,-32(fp)
6102c3f4:	1005003a 	cmpeq	r2,r2,zero
6102c3f8:	10001f1e 	bne	r2,zero,6102c478 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
6102c3fc:	e0fffd17 	ldw	r3,-12(fp)
6102c400:	e0bff817 	ldw	r2,-32(fp)
6102c404:	1880022e 	bgeu	r3,r2,6102c410 <altera_avalon_jtag_uart_read+0x94>
        n = space;
6102c408:	e0bffd17 	ldw	r2,-12(fp)
6102c40c:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
6102c410:	e0bffb17 	ldw	r2,-20(fp)
6102c414:	10c00e04 	addi	r3,r2,56
6102c418:	e0bff617 	ldw	r2,-40(fp)
6102c41c:	1887883a 	add	r3,r3,r2
6102c420:	e0bffa17 	ldw	r2,-24(fp)
6102c424:	1009883a 	mov	r4,r2
6102c428:	180b883a 	mov	r5,r3
6102c42c:	e1bff817 	ldw	r6,-32(fp)
6102c430:	1021a5c0 	call	61021a5c <memcpy>
      ptr   += n;
6102c434:	e0fff817 	ldw	r3,-32(fp)
6102c438:	e0bffa17 	ldw	r2,-24(fp)
6102c43c:	10c5883a 	add	r2,r2,r3
6102c440:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
6102c444:	e0fffd17 	ldw	r3,-12(fp)
6102c448:	e0bff817 	ldw	r2,-32(fp)
6102c44c:	1885c83a 	sub	r2,r3,r2
6102c450:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
6102c454:	e0fff617 	ldw	r3,-40(fp)
6102c458:	e0bff817 	ldw	r2,-32(fp)
6102c45c:	1885883a 	add	r2,r3,r2
6102c460:	10c1ffcc 	andi	r3,r2,2047
6102c464:	e0bffb17 	ldw	r2,-20(fp)
6102c468:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
6102c46c:	e0bffd17 	ldw	r2,-12(fp)
6102c470:	10800048 	cmpgei	r2,r2,1
6102c474:	103fcc1e 	bne	r2,zero,6102c3a8 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
6102c478:	e0fffa17 	ldw	r3,-24(fp)
6102c47c:	e0bffc17 	ldw	r2,-16(fp)
6102c480:	1880141e 	bne	r3,r2,6102c4d4 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
6102c484:	e0bffe17 	ldw	r2,-8(fp)
6102c488:	1090000c 	andi	r2,r2,16384
6102c48c:	1004c03a 	cmpne	r2,r2,zero
6102c490:	1000101e 	bne	r2,zero,6102c4d4 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
6102c494:	e0bffb17 	ldw	r2,-20(fp)
6102c498:	10c00a17 	ldw	r3,40(r2)
6102c49c:	e0bff717 	ldw	r2,-36(fp)
6102c4a0:	1880051e 	bne	r3,r2,6102c4b8 <altera_avalon_jtag_uart_read+0x13c>
6102c4a4:	e0bffb17 	ldw	r2,-20(fp)
6102c4a8:	10c00917 	ldw	r3,36(r2)
6102c4ac:	e0bffb17 	ldw	r2,-20(fp)
6102c4b0:	10800117 	ldw	r2,4(r2)
6102c4b4:	18bff736 	bltu	r3,r2,6102c494 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
6102c4b8:	e0bffb17 	ldw	r2,-20(fp)
6102c4bc:	10c00a17 	ldw	r3,40(r2)
6102c4c0:	e0bff717 	ldw	r2,-36(fp)
6102c4c4:	18800326 	beq	r3,r2,6102c4d4 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
6102c4c8:	e0bffd17 	ldw	r2,-12(fp)
6102c4cc:	10800048 	cmpgei	r2,r2,1
6102c4d0:	103fb51e 	bne	r2,zero,6102c3a8 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
6102c4d4:	e0fffa17 	ldw	r3,-24(fp)
6102c4d8:	e0bffc17 	ldw	r2,-16(fp)
6102c4dc:	18801926 	beq	r3,r2,6102c544 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
6102c4e0:	0005303a 	rdctl	r2,status
6102c4e4:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
6102c4e8:	e0fff517 	ldw	r3,-44(fp)
6102c4ec:	00bfff84 	movi	r2,-2
6102c4f0:	1884703a 	and	r2,r3,r2
6102c4f4:	1001703a 	wrctl	status,r2
  
  return context;
6102c4f8:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
6102c4fc:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
6102c500:	e0bffb17 	ldw	r2,-20(fp)
6102c504:	10800817 	ldw	r2,32(r2)
6102c508:	10c00054 	ori	r3,r2,1
6102c50c:	e0bffb17 	ldw	r2,-20(fp)
6102c510:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
6102c514:	e0bffb17 	ldw	r2,-20(fp)
6102c518:	10800017 	ldw	r2,0(r2)
6102c51c:	11000104 	addi	r4,r2,4
6102c520:	e0bffb17 	ldw	r2,-20(fp)
6102c524:	10800817 	ldw	r2,32(r2)
6102c528:	1007883a 	mov	r3,r2
6102c52c:	2005883a 	mov	r2,r4
6102c530:	10c00035 	stwio	r3,0(r2)
6102c534:	e0bff917 	ldw	r2,-28(fp)
6102c538:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
6102c53c:	e0bff417 	ldw	r2,-48(fp)
6102c540:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
6102c544:	e0fffa17 	ldw	r3,-24(fp)
6102c548:	e0bffc17 	ldw	r2,-16(fp)
6102c54c:	18800526 	beq	r3,r2,6102c564 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
6102c550:	e0fffa17 	ldw	r3,-24(fp)
6102c554:	e0bffc17 	ldw	r2,-16(fp)
6102c558:	1887c83a 	sub	r3,r3,r2
6102c55c:	e0ffff15 	stw	r3,-4(fp)
6102c560:	00000906 	br	6102c588 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
6102c564:	e0bffe17 	ldw	r2,-8(fp)
6102c568:	1090000c 	andi	r2,r2,16384
6102c56c:	1005003a 	cmpeq	r2,r2,zero
6102c570:	1000031e 	bne	r2,zero,6102c580 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
6102c574:	00bffd44 	movi	r2,-11
6102c578:	e0bfff15 	stw	r2,-4(fp)
6102c57c:	00000206 	br	6102c588 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
6102c580:	00bffec4 	movi	r2,-5
6102c584:	e0bfff15 	stw	r2,-4(fp)
6102c588:	e0bfff17 	ldw	r2,-4(fp)
}
6102c58c:	e037883a 	mov	sp,fp
6102c590:	dfc00117 	ldw	ra,4(sp)
6102c594:	df000017 	ldw	fp,0(sp)
6102c598:	dec00204 	addi	sp,sp,8
6102c59c:	f800283a 	ret

6102c5a0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
6102c5a0:	defff204 	addi	sp,sp,-56
6102c5a4:	dfc00d15 	stw	ra,52(sp)
6102c5a8:	df000c15 	stw	fp,48(sp)
6102c5ac:	df000c04 	addi	fp,sp,48
6102c5b0:	e13ffb15 	stw	r4,-20(fp)
6102c5b4:	e17ffc15 	stw	r5,-16(fp)
6102c5b8:	e1bffd15 	stw	r6,-12(fp)
6102c5bc:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
6102c5c0:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
6102c5c4:	e0bffc17 	ldw	r2,-16(fp)
6102c5c8:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
6102c5cc:	00003a06 	br	6102c6b8 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
6102c5d0:	e0bffb17 	ldw	r2,-20(fp)
6102c5d4:	10800c17 	ldw	r2,48(r2)
6102c5d8:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
6102c5dc:	e0bffb17 	ldw	r2,-20(fp)
6102c5e0:	10800d17 	ldw	r2,52(r2)
6102c5e4:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
6102c5e8:	e0fffa17 	ldw	r3,-24(fp)
6102c5ec:	e0bff917 	ldw	r2,-28(fp)
6102c5f0:	1880062e 	bgeu	r3,r2,6102c60c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
6102c5f4:	e0fff917 	ldw	r3,-28(fp)
6102c5f8:	e0bffa17 	ldw	r2,-24(fp)
6102c5fc:	1885c83a 	sub	r2,r3,r2
6102c600:	10bfffc4 	addi	r2,r2,-1
6102c604:	e0bff815 	stw	r2,-32(fp)
6102c608:	00000c06 	br	6102c63c <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
6102c60c:	e0bff917 	ldw	r2,-28(fp)
6102c610:	1005003a 	cmpeq	r2,r2,zero
6102c614:	1000051e 	bne	r2,zero,6102c62c <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
6102c618:	00820004 	movi	r2,2048
6102c61c:	e0fffa17 	ldw	r3,-24(fp)
6102c620:	10c5c83a 	sub	r2,r2,r3
6102c624:	e0bff815 	stw	r2,-32(fp)
6102c628:	00000406 	br	6102c63c <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
6102c62c:	0081ffc4 	movi	r2,2047
6102c630:	e0fffa17 	ldw	r3,-24(fp)
6102c634:	10c5c83a 	sub	r2,r2,r3
6102c638:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
6102c63c:	e0bff817 	ldw	r2,-32(fp)
6102c640:	1005003a 	cmpeq	r2,r2,zero
6102c644:	10001f1e 	bne	r2,zero,6102c6c4 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
6102c648:	e0fffd17 	ldw	r3,-12(fp)
6102c64c:	e0bff817 	ldw	r2,-32(fp)
6102c650:	1880022e 	bgeu	r3,r2,6102c65c <altera_avalon_jtag_uart_write+0xbc>
        n = count;
6102c654:	e0bffd17 	ldw	r2,-12(fp)
6102c658:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
6102c65c:	e0bffb17 	ldw	r2,-20(fp)
6102c660:	10c20e04 	addi	r3,r2,2104
6102c664:	e0bffa17 	ldw	r2,-24(fp)
6102c668:	1885883a 	add	r2,r3,r2
6102c66c:	e0fffc17 	ldw	r3,-16(fp)
6102c670:	1009883a 	mov	r4,r2
6102c674:	180b883a 	mov	r5,r3
6102c678:	e1bff817 	ldw	r6,-32(fp)
6102c67c:	1021a5c0 	call	61021a5c <memcpy>
      ptr   += n;
6102c680:	e0fff817 	ldw	r3,-32(fp)
6102c684:	e0bffc17 	ldw	r2,-16(fp)
6102c688:	10c5883a 	add	r2,r2,r3
6102c68c:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
6102c690:	e0fffd17 	ldw	r3,-12(fp)
6102c694:	e0bff817 	ldw	r2,-32(fp)
6102c698:	1885c83a 	sub	r2,r3,r2
6102c69c:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
6102c6a0:	e0fffa17 	ldw	r3,-24(fp)
6102c6a4:	e0bff817 	ldw	r2,-32(fp)
6102c6a8:	1885883a 	add	r2,r3,r2
6102c6ac:	10c1ffcc 	andi	r3,r2,2047
6102c6b0:	e0bffb17 	ldw	r2,-20(fp)
6102c6b4:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
6102c6b8:	e0bffd17 	ldw	r2,-12(fp)
6102c6bc:	10800048 	cmpgei	r2,r2,1
6102c6c0:	103fc31e 	bne	r2,zero,6102c5d0 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
6102c6c4:	0005303a 	rdctl	r2,status
6102c6c8:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
6102c6cc:	e0fff517 	ldw	r3,-44(fp)
6102c6d0:	00bfff84 	movi	r2,-2
6102c6d4:	1884703a 	and	r2,r3,r2
6102c6d8:	1001703a 	wrctl	status,r2
  
  return context;
6102c6dc:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
6102c6e0:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
6102c6e4:	e0bffb17 	ldw	r2,-20(fp)
6102c6e8:	10800817 	ldw	r2,32(r2)
6102c6ec:	10c00094 	ori	r3,r2,2
6102c6f0:	e0bffb17 	ldw	r2,-20(fp)
6102c6f4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
6102c6f8:	e0bffb17 	ldw	r2,-20(fp)
6102c6fc:	10800017 	ldw	r2,0(r2)
6102c700:	11000104 	addi	r4,r2,4
6102c704:	e0bffb17 	ldw	r2,-20(fp)
6102c708:	10800817 	ldw	r2,32(r2)
6102c70c:	1007883a 	mov	r3,r2
6102c710:	2005883a 	mov	r2,r4
6102c714:	10c00035 	stwio	r3,0(r2)
6102c718:	e0bff717 	ldw	r2,-36(fp)
6102c71c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
6102c720:	e0bff417 	ldw	r2,-48(fp)
6102c724:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
6102c728:	e0bffd17 	ldw	r2,-12(fp)
6102c72c:	10800050 	cmplti	r2,r2,1
6102c730:	1000111e 	bne	r2,zero,6102c778 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
6102c734:	e0bffe17 	ldw	r2,-8(fp)
6102c738:	1090000c 	andi	r2,r2,16384
6102c73c:	1004c03a 	cmpne	r2,r2,zero
6102c740:	1000101e 	bne	r2,zero,6102c784 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
6102c744:	e0bffb17 	ldw	r2,-20(fp)
6102c748:	10c00d17 	ldw	r3,52(r2)
6102c74c:	e0bff917 	ldw	r2,-28(fp)
6102c750:	1880051e 	bne	r3,r2,6102c768 <altera_avalon_jtag_uart_write+0x1c8>
6102c754:	e0bffb17 	ldw	r2,-20(fp)
6102c758:	10c00917 	ldw	r3,36(r2)
6102c75c:	e0bffb17 	ldw	r2,-20(fp)
6102c760:	10800117 	ldw	r2,4(r2)
6102c764:	18bff736 	bltu	r3,r2,6102c744 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
6102c768:	e0bffb17 	ldw	r2,-20(fp)
6102c76c:	10c00d17 	ldw	r3,52(r2)
6102c770:	e0bff917 	ldw	r2,-28(fp)
6102c774:	18800326 	beq	r3,r2,6102c784 <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
6102c778:	e0bffd17 	ldw	r2,-12(fp)
6102c77c:	10800048 	cmpgei	r2,r2,1
6102c780:	103fcd1e 	bne	r2,zero,6102c6b8 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
6102c784:	e0fffc17 	ldw	r3,-16(fp)
6102c788:	e0bff617 	ldw	r2,-40(fp)
6102c78c:	18800526 	beq	r3,r2,6102c7a4 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
6102c790:	e0fffc17 	ldw	r3,-16(fp)
6102c794:	e0bff617 	ldw	r2,-40(fp)
6102c798:	1887c83a 	sub	r3,r3,r2
6102c79c:	e0ffff15 	stw	r3,-4(fp)
6102c7a0:	00000906 	br	6102c7c8 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
6102c7a4:	e0bffe17 	ldw	r2,-8(fp)
6102c7a8:	1090000c 	andi	r2,r2,16384
6102c7ac:	1005003a 	cmpeq	r2,r2,zero
6102c7b0:	1000031e 	bne	r2,zero,6102c7c0 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
6102c7b4:	00bffd44 	movi	r2,-11
6102c7b8:	e0bfff15 	stw	r2,-4(fp)
6102c7bc:	00000206 	br	6102c7c8 <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
6102c7c0:	00bffec4 	movi	r2,-5
6102c7c4:	e0bfff15 	stw	r2,-4(fp)
6102c7c8:	e0bfff17 	ldw	r2,-4(fp)
}
6102c7cc:	e037883a 	mov	sp,fp
6102c7d0:	dfc00117 	ldw	ra,4(sp)
6102c7d4:	df000017 	ldw	fp,0(sp)
6102c7d8:	dec00204 	addi	sp,sp,8
6102c7dc:	f800283a 	ret

6102c7e0 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
6102c7e0:	defffa04 	addi	sp,sp,-24
6102c7e4:	dfc00515 	stw	ra,20(sp)
6102c7e8:	df000415 	stw	fp,16(sp)
6102c7ec:	df000404 	addi	fp,sp,16
6102c7f0:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
6102c7f4:	e0bfff17 	ldw	r2,-4(fp)
6102c7f8:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
6102c7fc:	e0bfff17 	ldw	r2,-4(fp)
6102c800:	10800104 	addi	r2,r2,4
6102c804:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
6102c808:	0005303a 	rdctl	r2,status
6102c80c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
6102c810:	e0fffd17 	ldw	r3,-12(fp)
6102c814:	00bfff84 	movi	r2,-2
6102c818:	1884703a 	and	r2,r3,r2
6102c81c:	1001703a 	wrctl	status,r2
  
  return context;
6102c820:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
6102c824:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
6102c828:	102b9b00 	call	6102b9b0 <alt_tick>
6102c82c:	e0bffe17 	ldw	r2,-8(fp)
6102c830:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
6102c834:	e0bffc17 	ldw	r2,-16(fp)
6102c838:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
6102c83c:	e037883a 	mov	sp,fp
6102c840:	dfc00117 	ldw	ra,4(sp)
6102c844:	df000017 	ldw	fp,0(sp)
6102c848:	dec00204 	addi	sp,sp,8
6102c84c:	f800283a 	ret

6102c850 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
6102c850:	defff804 	addi	sp,sp,-32
6102c854:	dfc00715 	stw	ra,28(sp)
6102c858:	df000615 	stw	fp,24(sp)
6102c85c:	df000604 	addi	fp,sp,24
6102c860:	e13ffc15 	stw	r4,-16(fp)
6102c864:	e17ffd15 	stw	r5,-12(fp)
6102c868:	e1bffe15 	stw	r6,-8(fp)
6102c86c:	e1ffff15 	stw	r7,-4(fp)
6102c870:	e0bfff17 	ldw	r2,-4(fp)
6102c874:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
6102c878:	009840f4 	movhi	r2,24835
6102c87c:	10856b04 	addi	r2,r2,5548
6102c880:	10800017 	ldw	r2,0(r2)
6102c884:	1004c03a 	cmpne	r2,r2,zero
6102c888:	1000041e 	bne	r2,zero,6102c89c <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
6102c88c:	00d840f4 	movhi	r3,24835
6102c890:	18c56b04 	addi	r3,r3,5548
6102c894:	e0bffb17 	ldw	r2,-20(fp)
6102c898:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
6102c89c:	e0bffc17 	ldw	r2,-16(fp)
6102c8a0:	10800104 	addi	r2,r2,4
6102c8a4:	1007883a 	mov	r3,r2
6102c8a8:	008001c4 	movi	r2,7
6102c8ac:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
6102c8b0:	d8000015 	stw	zero,0(sp)
6102c8b4:	e13ffd17 	ldw	r4,-12(fp)
6102c8b8:	e17ffe17 	ldw	r5,-8(fp)
6102c8bc:	019840f4 	movhi	r6,24835
6102c8c0:	31b1f804 	addi	r6,r6,-14368
6102c8c4:	e1fffc17 	ldw	r7,-16(fp)
6102c8c8:	102cd8c0 	call	6102cd8c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
6102c8cc:	e037883a 	mov	sp,fp
6102c8d0:	dfc00117 	ldw	ra,4(sp)
6102c8d4:	df000017 	ldw	fp,0(sp)
6102c8d8:	dec00204 	addi	sp,sp,8
6102c8dc:	f800283a 	ret

6102c8e0 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
6102c8e0:	defff404 	addi	sp,sp,-48
6102c8e4:	df000b15 	stw	fp,44(sp)
6102c8e8:	df000b04 	addi	fp,sp,44
6102c8ec:	e13ffb15 	stw	r4,-20(fp)
6102c8f0:	e17ffc15 	stw	r5,-16(fp)
6102c8f4:	e1bffd15 	stw	r6,-12(fp)
6102c8f8:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
6102c8fc:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
6102c900:	009840f4 	movhi	r2,24835
6102c904:	10856b04 	addi	r2,r2,5548
6102c908:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
6102c90c:	1005003a 	cmpeq	r2,r2,zero
6102c910:	1000411e 	bne	r2,zero,6102ca18 <alt_alarm_start+0x138>
  {
    if (alarm)
6102c914:	e0bffb17 	ldw	r2,-20(fp)
6102c918:	1005003a 	cmpeq	r2,r2,zero
6102c91c:	10003b1e 	bne	r2,zero,6102ca0c <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
6102c920:	e0fffb17 	ldw	r3,-20(fp)
6102c924:	e0bffd17 	ldw	r2,-12(fp)
6102c928:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
6102c92c:	e0fffb17 	ldw	r3,-20(fp)
6102c930:	e0bffe17 	ldw	r2,-8(fp)
6102c934:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
6102c938:	0005303a 	rdctl	r2,status
6102c93c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
6102c940:	e0fff817 	ldw	r3,-32(fp)
6102c944:	00bfff84 	movi	r2,-2
6102c948:	1884703a 	and	r2,r3,r2
6102c94c:	1001703a 	wrctl	status,r2
  
  return context;
6102c950:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
6102c954:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
6102c958:	009840f4 	movhi	r2,24835
6102c95c:	10856c04 	addi	r2,r2,5552
6102c960:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
6102c964:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
6102c968:	e0fffc17 	ldw	r3,-16(fp)
6102c96c:	e0bff917 	ldw	r2,-28(fp)
6102c970:	1885883a 	add	r2,r3,r2
6102c974:	10c00044 	addi	r3,r2,1
6102c978:	e0bffb17 	ldw	r2,-20(fp)
6102c97c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
6102c980:	e0bffb17 	ldw	r2,-20(fp)
6102c984:	10c00217 	ldw	r3,8(r2)
6102c988:	e0bff917 	ldw	r2,-28(fp)
6102c98c:	1880042e 	bgeu	r3,r2,6102c9a0 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
6102c990:	e0fffb17 	ldw	r3,-20(fp)
6102c994:	00800044 	movi	r2,1
6102c998:	18800405 	stb	r2,16(r3)
6102c99c:	00000206 	br	6102c9a8 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
6102c9a0:	e0bffb17 	ldw	r2,-20(fp)
6102c9a4:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
6102c9a8:	e0fffb17 	ldw	r3,-20(fp)
6102c9ac:	009840f4 	movhi	r2,24835
6102c9b0:	10bec704 	addi	r2,r2,-1252
6102c9b4:	e0bff615 	stw	r2,-40(fp)
6102c9b8:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
6102c9bc:	e0fff717 	ldw	r3,-36(fp)
6102c9c0:	e0bff617 	ldw	r2,-40(fp)
6102c9c4:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
6102c9c8:	e0bff617 	ldw	r2,-40(fp)
6102c9cc:	10c00017 	ldw	r3,0(r2)
6102c9d0:	e0bff717 	ldw	r2,-36(fp)
6102c9d4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
6102c9d8:	e0bff617 	ldw	r2,-40(fp)
6102c9dc:	10c00017 	ldw	r3,0(r2)
6102c9e0:	e0bff717 	ldw	r2,-36(fp)
6102c9e4:	18800115 	stw	r2,4(r3)
  list->next           = entry;
6102c9e8:	e0fff617 	ldw	r3,-40(fp)
6102c9ec:	e0bff717 	ldw	r2,-36(fp)
6102c9f0:	18800015 	stw	r2,0(r3)
6102c9f4:	e0bffa17 	ldw	r2,-24(fp)
6102c9f8:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
6102c9fc:	e0bff517 	ldw	r2,-44(fp)
6102ca00:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
6102ca04:	e03fff15 	stw	zero,-4(fp)
6102ca08:	00000506 	br	6102ca20 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
6102ca0c:	00bffa84 	movi	r2,-22
6102ca10:	e0bfff15 	stw	r2,-4(fp)
6102ca14:	00000206 	br	6102ca20 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
6102ca18:	00bfde84 	movi	r2,-134
6102ca1c:	e0bfff15 	stw	r2,-4(fp)
6102ca20:	e0bfff17 	ldw	r2,-4(fp)
  }
}
6102ca24:	e037883a 	mov	sp,fp
6102ca28:	df000017 	ldw	fp,0(sp)
6102ca2c:	dec00104 	addi	sp,sp,4
6102ca30:	f800283a 	ret

6102ca34 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
6102ca34:	defffa04 	addi	sp,sp,-24
6102ca38:	dfc00515 	stw	ra,20(sp)
6102ca3c:	df000415 	stw	fp,16(sp)
6102ca40:	df000404 	addi	fp,sp,16
6102ca44:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
6102ca48:	008000c4 	movi	r2,3
6102ca4c:	e0bffc15 	stw	r2,-16(fp)
  }
  

  big_loops = us / (INT_MAX/
6102ca50:	e0fffc17 	ldw	r3,-16(fp)
6102ca54:	008003f4 	movhi	r2,15
6102ca58:	10909004 	addi	r2,r2,16960
6102ca5c:	188b383a 	mul	r5,r3,r2
6102ca60:	0102fb34 	movhi	r4,3052
6102ca64:	21308004 	addi	r4,r4,-15872
6102ca68:	10214900 	call	61021490 <__udivsi3>
6102ca6c:	100b883a 	mov	r5,r2
6102ca70:	01200034 	movhi	r4,32768
6102ca74:	213fffc4 	addi	r4,r4,-1
6102ca78:	10214900 	call	61021490 <__udivsi3>
6102ca7c:	100b883a 	mov	r5,r2
6102ca80:	e13fff17 	ldw	r4,-4(fp)
6102ca84:	10214900 	call	61021490 <__udivsi3>
6102ca88:	e0bffd15 	stw	r2,-12(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
6102ca8c:	e0bffd17 	ldw	r2,-12(fp)
6102ca90:	1005003a 	cmpeq	r2,r2,zero
6102ca94:	1000281e 	bne	r2,zero,6102cb38 <alt_busy_sleep+0x104>
  {
    for(i=0;i<big_loops;i++)
6102ca98:	e03ffe15 	stw	zero,-8(fp)
6102ca9c:	00001606 	br	6102caf8 <alt_busy_sleep+0xc4>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
6102caa0:	00a00034 	movhi	r2,32768
6102caa4:	10bfffc4 	addi	r2,r2,-1
6102caa8:	10bfffc4 	addi	r2,r2,-1
6102caac:	103ffe1e 	bne	r2,zero,6102caa8 <alt_busy_sleep+0x74>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
6102cab0:	e0fffc17 	ldw	r3,-16(fp)
6102cab4:	008003f4 	movhi	r2,15
6102cab8:	10909004 	addi	r2,r2,16960
6102cabc:	188b383a 	mul	r5,r3,r2
6102cac0:	0102fb34 	movhi	r4,3052
6102cac4:	21308004 	addi	r4,r4,-15872
6102cac8:	10214900 	call	61021490 <__udivsi3>
6102cacc:	100b883a 	mov	r5,r2
6102cad0:	01200034 	movhi	r4,32768
6102cad4:	213fffc4 	addi	r4,r4,-1
6102cad8:	10214900 	call	61021490 <__udivsi3>
6102cadc:	1007883a 	mov	r3,r2
6102cae0:	e0bfff17 	ldw	r2,-4(fp)
6102cae4:	10c5c83a 	sub	r2,r2,r3
6102cae8:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
6102caec:	e0bffe17 	ldw	r2,-8(fp)
6102caf0:	10800044 	addi	r2,r2,1
6102caf4:	e0bffe15 	stw	r2,-8(fp)
6102caf8:	e0fffe17 	ldw	r3,-8(fp)
6102cafc:	e0bffd17 	ldw	r2,-12(fp)
6102cb00:	18bfe716 	blt	r3,r2,6102caa0 <alt_busy_sleep+0x6c>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
6102cb04:	e0fffc17 	ldw	r3,-16(fp)
6102cb08:	008003f4 	movhi	r2,15
6102cb0c:	10909004 	addi	r2,r2,16960
6102cb10:	188b383a 	mul	r5,r3,r2
6102cb14:	0102fb34 	movhi	r4,3052
6102cb18:	21308004 	addi	r4,r4,-15872
6102cb1c:	10214900 	call	61021490 <__udivsi3>
6102cb20:	1007883a 	mov	r3,r2
6102cb24:	e0bfff17 	ldw	r2,-4(fp)
6102cb28:	1885383a 	mul	r2,r3,r2
6102cb2c:	10bfffc4 	addi	r2,r2,-1
6102cb30:	103ffe1e 	bne	r2,zero,6102cb2c <alt_busy_sleep+0xf8>
6102cb34:	00000c06 	br	6102cb68 <alt_busy_sleep+0x134>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
6102cb38:	e0fffc17 	ldw	r3,-16(fp)
6102cb3c:	008003f4 	movhi	r2,15
6102cb40:	10909004 	addi	r2,r2,16960
6102cb44:	188b383a 	mul	r5,r3,r2
6102cb48:	0102fb34 	movhi	r4,3052
6102cb4c:	21308004 	addi	r4,r4,-15872
6102cb50:	10214900 	call	61021490 <__udivsi3>
6102cb54:	1007883a 	mov	r3,r2
6102cb58:	e0bfff17 	ldw	r2,-4(fp)
6102cb5c:	1885383a 	mul	r2,r3,r2
6102cb60:	10bfffc4 	addi	r2,r2,-1
6102cb64:	00bffe16 	blt	zero,r2,6102cb60 <alt_busy_sleep+0x12c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
6102cb68:	0005883a 	mov	r2,zero
}
6102cb6c:	e037883a 	mov	sp,fp
6102cb70:	dfc00117 	ldw	ra,4(sp)
6102cb74:	df000017 	ldw	fp,0(sp)
6102cb78:	dec00204 	addi	sp,sp,8
6102cb7c:	f800283a 	ret

6102cb80 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
6102cb80:	defff904 	addi	sp,sp,-28
6102cb84:	dfc00615 	stw	ra,24(sp)
6102cb88:	df000515 	stw	fp,20(sp)
6102cb8c:	df000504 	addi	fp,sp,20
6102cb90:	e13ffd15 	stw	r4,-12(fp)
6102cb94:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
6102cb98:	e0bffd17 	ldw	r2,-12(fp)
6102cb9c:	1005003a 	cmpeq	r2,r2,zero
6102cba0:	1000041e 	bne	r2,zero,6102cbb4 <alt_dev_llist_insert+0x34>
6102cba4:	e0bffd17 	ldw	r2,-12(fp)
6102cba8:	10800217 	ldw	r2,8(r2)
6102cbac:	1004c03a 	cmpne	r2,r2,zero
6102cbb0:	1000071e 	bne	r2,zero,6102cbd0 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
6102cbb4:	102cc340 	call	6102cc34 <alt_get_errno>
6102cbb8:	1007883a 	mov	r3,r2
6102cbbc:	00800584 	movi	r2,22
6102cbc0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
6102cbc4:	00bffa84 	movi	r2,-22
6102cbc8:	e0bfff15 	stw	r2,-4(fp)
6102cbcc:	00001306 	br	6102cc1c <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
6102cbd0:	e0fffd17 	ldw	r3,-12(fp)
6102cbd4:	e0bffe17 	ldw	r2,-8(fp)
6102cbd8:	e0bffb15 	stw	r2,-20(fp)
6102cbdc:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
6102cbe0:	e0fffc17 	ldw	r3,-16(fp)
6102cbe4:	e0bffb17 	ldw	r2,-20(fp)
6102cbe8:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
6102cbec:	e0bffb17 	ldw	r2,-20(fp)
6102cbf0:	10c00017 	ldw	r3,0(r2)
6102cbf4:	e0bffc17 	ldw	r2,-16(fp)
6102cbf8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
6102cbfc:	e0bffb17 	ldw	r2,-20(fp)
6102cc00:	10c00017 	ldw	r3,0(r2)
6102cc04:	e0bffc17 	ldw	r2,-16(fp)
6102cc08:	18800115 	stw	r2,4(r3)
  list->next           = entry;
6102cc0c:	e0fffb17 	ldw	r3,-20(fp)
6102cc10:	e0bffc17 	ldw	r2,-16(fp)
6102cc14:	18800015 	stw	r2,0(r3)

  return 0;  
6102cc18:	e03fff15 	stw	zero,-4(fp)
6102cc1c:	e0bfff17 	ldw	r2,-4(fp)
}
6102cc20:	e037883a 	mov	sp,fp
6102cc24:	dfc00117 	ldw	ra,4(sp)
6102cc28:	df000017 	ldw	fp,0(sp)
6102cc2c:	dec00204 	addi	sp,sp,8
6102cc30:	f800283a 	ret

6102cc34 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
6102cc34:	defffd04 	addi	sp,sp,-12
6102cc38:	dfc00215 	stw	ra,8(sp)
6102cc3c:	df000115 	stw	fp,4(sp)
6102cc40:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
6102cc44:	009840f4 	movhi	r2,24835
6102cc48:	10bec504 	addi	r2,r2,-1260
6102cc4c:	10800017 	ldw	r2,0(r2)
6102cc50:	1005003a 	cmpeq	r2,r2,zero
6102cc54:	1000061e 	bne	r2,zero,6102cc70 <alt_get_errno+0x3c>
6102cc58:	009840f4 	movhi	r2,24835
6102cc5c:	10bec504 	addi	r2,r2,-1260
6102cc60:	10800017 	ldw	r2,0(r2)
6102cc64:	103ee83a 	callr	r2
6102cc68:	e0bfff15 	stw	r2,-4(fp)
6102cc6c:	00000306 	br	6102cc7c <alt_get_errno+0x48>
6102cc70:	009840f4 	movhi	r2,24835
6102cc74:	10856704 	addi	r2,r2,5532
6102cc78:	e0bfff15 	stw	r2,-4(fp)
6102cc7c:	e0bfff17 	ldw	r2,-4(fp)
}
6102cc80:	e037883a 	mov	sp,fp
6102cc84:	dfc00117 	ldw	ra,4(sp)
6102cc88:	df000017 	ldw	fp,0(sp)
6102cc8c:	dec00204 	addi	sp,sp,8
6102cc90:	f800283a 	ret

6102cc94 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
6102cc94:	defffd04 	addi	sp,sp,-12
6102cc98:	dfc00215 	stw	ra,8(sp)
6102cc9c:	df000115 	stw	fp,4(sp)
6102cca0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
6102cca4:	00bfff04 	movi	r2,-4
6102cca8:	00d840f4 	movhi	r3,24835
6102ccac:	18f6e004 	addi	r3,r3,-9344
6102ccb0:	1885883a 	add	r2,r3,r2
6102ccb4:	e0bfff15 	stw	r2,-4(fp)
6102ccb8:	00000606 	br	6102ccd4 <_do_ctors+0x40>
        (*ctor) (); 
6102ccbc:	e0bfff17 	ldw	r2,-4(fp)
6102ccc0:	10800017 	ldw	r2,0(r2)
6102ccc4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
6102ccc8:	e0bfff17 	ldw	r2,-4(fp)
6102cccc:	10bfff04 	addi	r2,r2,-4
6102ccd0:	e0bfff15 	stw	r2,-4(fp)
6102ccd4:	e0ffff17 	ldw	r3,-4(fp)
6102ccd8:	009840f4 	movhi	r2,24835
6102ccdc:	10b6df04 	addi	r2,r2,-9348
6102cce0:	18bff62e 	bgeu	r3,r2,6102ccbc <_do_ctors+0x28>
        (*ctor) (); 
}
6102cce4:	e037883a 	mov	sp,fp
6102cce8:	dfc00117 	ldw	ra,4(sp)
6102ccec:	df000017 	ldw	fp,0(sp)
6102ccf0:	dec00204 	addi	sp,sp,8
6102ccf4:	f800283a 	ret

6102ccf8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
6102ccf8:	defffd04 	addi	sp,sp,-12
6102ccfc:	dfc00215 	stw	ra,8(sp)
6102cd00:	df000115 	stw	fp,4(sp)
6102cd04:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
6102cd08:	00bfff04 	movi	r2,-4
6102cd0c:	00d840f4 	movhi	r3,24835
6102cd10:	18f6e004 	addi	r3,r3,-9344
6102cd14:	1885883a 	add	r2,r3,r2
6102cd18:	e0bfff15 	stw	r2,-4(fp)
6102cd1c:	00000606 	br	6102cd38 <_do_dtors+0x40>
        (*dtor) (); 
6102cd20:	e0bfff17 	ldw	r2,-4(fp)
6102cd24:	10800017 	ldw	r2,0(r2)
6102cd28:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
6102cd2c:	e0bfff17 	ldw	r2,-4(fp)
6102cd30:	10bfff04 	addi	r2,r2,-4
6102cd34:	e0bfff15 	stw	r2,-4(fp)
6102cd38:	e0ffff17 	ldw	r3,-4(fp)
6102cd3c:	009840f4 	movhi	r2,24835
6102cd40:	10b6e004 	addi	r2,r2,-9344
6102cd44:	18bff62e 	bgeu	r3,r2,6102cd20 <_do_dtors+0x28>
        (*dtor) (); 
}
6102cd48:	e037883a 	mov	sp,fp
6102cd4c:	dfc00117 	ldw	ra,4(sp)
6102cd50:	df000017 	ldw	fp,0(sp)
6102cd54:	dec00204 	addi	sp,sp,8
6102cd58:	f800283a 	ret

6102cd5c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
6102cd5c:	defffe04 	addi	sp,sp,-8
6102cd60:	dfc00115 	stw	ra,4(sp)
6102cd64:	df000015 	stw	fp,0(sp)
6102cd68:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
6102cd6c:	0009883a 	mov	r4,zero
6102cd70:	01440004 	movi	r5,4096
6102cd74:	102d6e40 	call	6102d6e4 <alt_icache_flush>
#endif
}
6102cd78:	e037883a 	mov	sp,fp
6102cd7c:	dfc00117 	ldw	ra,4(sp)
6102cd80:	df000017 	ldw	fp,0(sp)
6102cd84:	dec00204 	addi	sp,sp,8
6102cd88:	f800283a 	ret

6102cd8c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
6102cd8c:	defff904 	addi	sp,sp,-28
6102cd90:	dfc00615 	stw	ra,24(sp)
6102cd94:	df000515 	stw	fp,20(sp)
6102cd98:	df000504 	addi	fp,sp,20
6102cd9c:	e13ffc15 	stw	r4,-16(fp)
6102cda0:	e17ffd15 	stw	r5,-12(fp)
6102cda4:	e1bffe15 	stw	r6,-8(fp)
6102cda8:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
6102cdac:	e0800217 	ldw	r2,8(fp)
6102cdb0:	d8800015 	stw	r2,0(sp)
6102cdb4:	e13ffc17 	ldw	r4,-16(fp)
6102cdb8:	e17ffd17 	ldw	r5,-12(fp)
6102cdbc:	e1bffe17 	ldw	r6,-8(fp)
6102cdc0:	e1ffff17 	ldw	r7,-4(fp)
6102cdc4:	102cf600 	call	6102cf60 <alt_iic_isr_register>
}  
6102cdc8:	e037883a 	mov	sp,fp
6102cdcc:	dfc00117 	ldw	ra,4(sp)
6102cdd0:	df000017 	ldw	fp,0(sp)
6102cdd4:	dec00204 	addi	sp,sp,8
6102cdd8:	f800283a 	ret

6102cddc <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
6102cddc:	defff904 	addi	sp,sp,-28
6102cde0:	df000615 	stw	fp,24(sp)
6102cde4:	df000604 	addi	fp,sp,24
6102cde8:	e13ffe15 	stw	r4,-8(fp)
6102cdec:	e17fff15 	stw	r5,-4(fp)
6102cdf0:	e0bfff17 	ldw	r2,-4(fp)
6102cdf4:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
6102cdf8:	0005303a 	rdctl	r2,status
6102cdfc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
6102ce00:	e0fffb17 	ldw	r3,-20(fp)
6102ce04:	00bfff84 	movi	r2,-2
6102ce08:	1884703a 	and	r2,r3,r2
6102ce0c:	1001703a 	wrctl	status,r2
  
  return context;
6102ce10:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
6102ce14:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
6102ce18:	e0fffc17 	ldw	r3,-16(fp)
6102ce1c:	00800044 	movi	r2,1
6102ce20:	10c4983a 	sll	r2,r2,r3
6102ce24:	1007883a 	mov	r3,r2
6102ce28:	009840f4 	movhi	r2,24835
6102ce2c:	10856d04 	addi	r2,r2,5556
6102ce30:	10800017 	ldw	r2,0(r2)
6102ce34:	1886b03a 	or	r3,r3,r2
6102ce38:	009840f4 	movhi	r2,24835
6102ce3c:	10856d04 	addi	r2,r2,5556
6102ce40:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
6102ce44:	009840f4 	movhi	r2,24835
6102ce48:	10856d04 	addi	r2,r2,5556
6102ce4c:	10800017 	ldw	r2,0(r2)
6102ce50:	100170fa 	wrctl	ienable,r2
6102ce54:	e0bffd17 	ldw	r2,-12(fp)
6102ce58:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
6102ce5c:	e0bffa17 	ldw	r2,-24(fp)
6102ce60:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
6102ce64:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
6102ce68:	e037883a 	mov	sp,fp
6102ce6c:	df000017 	ldw	fp,0(sp)
6102ce70:	dec00104 	addi	sp,sp,4
6102ce74:	f800283a 	ret

6102ce78 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
6102ce78:	defff904 	addi	sp,sp,-28
6102ce7c:	df000615 	stw	fp,24(sp)
6102ce80:	df000604 	addi	fp,sp,24
6102ce84:	e13ffe15 	stw	r4,-8(fp)
6102ce88:	e17fff15 	stw	r5,-4(fp)
6102ce8c:	e0bfff17 	ldw	r2,-4(fp)
6102ce90:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
6102ce94:	0005303a 	rdctl	r2,status
6102ce98:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
6102ce9c:	e0fffb17 	ldw	r3,-20(fp)
6102cea0:	00bfff84 	movi	r2,-2
6102cea4:	1884703a 	and	r2,r3,r2
6102cea8:	1001703a 	wrctl	status,r2
  
  return context;
6102ceac:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
6102ceb0:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
6102ceb4:	e0fffc17 	ldw	r3,-16(fp)
6102ceb8:	00800044 	movi	r2,1
6102cebc:	10c4983a 	sll	r2,r2,r3
6102cec0:	0084303a 	nor	r2,zero,r2
6102cec4:	1007883a 	mov	r3,r2
6102cec8:	009840f4 	movhi	r2,24835
6102cecc:	10856d04 	addi	r2,r2,5556
6102ced0:	10800017 	ldw	r2,0(r2)
6102ced4:	1886703a 	and	r3,r3,r2
6102ced8:	009840f4 	movhi	r2,24835
6102cedc:	10856d04 	addi	r2,r2,5556
6102cee0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
6102cee4:	009840f4 	movhi	r2,24835
6102cee8:	10856d04 	addi	r2,r2,5556
6102ceec:	10800017 	ldw	r2,0(r2)
6102cef0:	100170fa 	wrctl	ienable,r2
6102cef4:	e0bffd17 	ldw	r2,-12(fp)
6102cef8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
6102cefc:	e0bffa17 	ldw	r2,-24(fp)
6102cf00:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
6102cf04:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
6102cf08:	e037883a 	mov	sp,fp
6102cf0c:	df000017 	ldw	fp,0(sp)
6102cf10:	dec00104 	addi	sp,sp,4
6102cf14:	f800283a 	ret

6102cf18 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
6102cf18:	defffc04 	addi	sp,sp,-16
6102cf1c:	df000315 	stw	fp,12(sp)
6102cf20:	df000304 	addi	fp,sp,12
6102cf24:	e13ffe15 	stw	r4,-8(fp)
6102cf28:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
6102cf2c:	000530fa 	rdctl	r2,ienable
6102cf30:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
6102cf34:	e0ffff17 	ldw	r3,-4(fp)
6102cf38:	00800044 	movi	r2,1
6102cf3c:	10c4983a 	sll	r2,r2,r3
6102cf40:	1007883a 	mov	r3,r2
6102cf44:	e0bffd17 	ldw	r2,-12(fp)
6102cf48:	1884703a 	and	r2,r3,r2
6102cf4c:	1004c03a 	cmpne	r2,r2,zero
}
6102cf50:	e037883a 	mov	sp,fp
6102cf54:	df000017 	ldw	fp,0(sp)
6102cf58:	dec00104 	addi	sp,sp,4
6102cf5c:	f800283a 	ret

6102cf60 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
6102cf60:	defff404 	addi	sp,sp,-48
6102cf64:	dfc00b15 	stw	ra,44(sp)
6102cf68:	df000a15 	stw	fp,40(sp)
6102cf6c:	df000a04 	addi	fp,sp,40
6102cf70:	e13ffb15 	stw	r4,-20(fp)
6102cf74:	e17ffc15 	stw	r5,-16(fp)
6102cf78:	e1bffd15 	stw	r6,-12(fp)
6102cf7c:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
6102cf80:	00bffa84 	movi	r2,-22
6102cf84:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
6102cf88:	e0bffc17 	ldw	r2,-16(fp)
6102cf8c:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
6102cf90:	e0bff917 	ldw	r2,-28(fp)
6102cf94:	10800808 	cmpgei	r2,r2,32
6102cf98:	1000291e 	bne	r2,zero,6102d040 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
6102cf9c:	0005303a 	rdctl	r2,status
6102cfa0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
6102cfa4:	e0fff717 	ldw	r3,-36(fp)
6102cfa8:	00bfff84 	movi	r2,-2
6102cfac:	1884703a 	and	r2,r3,r2
6102cfb0:	1001703a 	wrctl	status,r2
  
  return context;
6102cfb4:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
6102cfb8:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
6102cfbc:	e0bff917 	ldw	r2,-28(fp)
6102cfc0:	00d840f4 	movhi	r3,24835
6102cfc4:	18c57804 	addi	r3,r3,5600
6102cfc8:	100490fa 	slli	r2,r2,3
6102cfcc:	10c7883a 	add	r3,r2,r3
6102cfd0:	e0bffd17 	ldw	r2,-12(fp)
6102cfd4:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
6102cfd8:	e0bff917 	ldw	r2,-28(fp)
6102cfdc:	00d840f4 	movhi	r3,24835
6102cfe0:	18c57804 	addi	r3,r3,5600
6102cfe4:	100490fa 	slli	r2,r2,3
6102cfe8:	10c5883a 	add	r2,r2,r3
6102cfec:	10c00104 	addi	r3,r2,4
6102cff0:	e0bffe17 	ldw	r2,-8(fp)
6102cff4:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
6102cff8:	e0bffd17 	ldw	r2,-12(fp)
6102cffc:	1005003a 	cmpeq	r2,r2,zero
6102d000:	1000051e 	bne	r2,zero,6102d018 <alt_iic_isr_register+0xb8>
6102d004:	e17ff917 	ldw	r5,-28(fp)
6102d008:	e13ffb17 	ldw	r4,-20(fp)
6102d00c:	102cddc0 	call	6102cddc <alt_ic_irq_enable>
6102d010:	e0bfff15 	stw	r2,-4(fp)
6102d014:	00000406 	br	6102d028 <alt_iic_isr_register+0xc8>
6102d018:	e17ff917 	ldw	r5,-28(fp)
6102d01c:	e13ffb17 	ldw	r4,-20(fp)
6102d020:	102ce780 	call	6102ce78 <alt_ic_irq_disable>
6102d024:	e0bfff15 	stw	r2,-4(fp)
6102d028:	e0bfff17 	ldw	r2,-4(fp)
6102d02c:	e0bffa15 	stw	r2,-24(fp)
6102d030:	e0bff817 	ldw	r2,-32(fp)
6102d034:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
6102d038:	e0bff617 	ldw	r2,-40(fp)
6102d03c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
6102d040:	e0bffa17 	ldw	r2,-24(fp)
}
6102d044:	e037883a 	mov	sp,fp
6102d048:	dfc00117 	ldw	ra,4(sp)
6102d04c:	df000017 	ldw	fp,0(sp)
6102d050:	dec00204 	addi	sp,sp,8
6102d054:	f800283a 	ret

6102d058 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
6102d058:	defff904 	addi	sp,sp,-28
6102d05c:	dfc00615 	stw	ra,24(sp)
6102d060:	df000515 	stw	fp,20(sp)
6102d064:	df000504 	addi	fp,sp,20
6102d068:	e13ffc15 	stw	r4,-16(fp)
6102d06c:	e17ffd15 	stw	r5,-12(fp)
6102d070:	e1bffe15 	stw	r6,-8(fp)
6102d074:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
6102d078:	e13ffd17 	ldw	r4,-12(fp)
6102d07c:	e17ffe17 	ldw	r5,-8(fp)
6102d080:	e1bfff17 	ldw	r6,-4(fp)
6102d084:	102d2700 	call	6102d270 <open>
6102d088:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
6102d08c:	e0bffb17 	ldw	r2,-20(fp)
6102d090:	1004803a 	cmplt	r2,r2,zero
6102d094:	10001c1e 	bne	r2,zero,6102d108 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
6102d098:	e0bffb17 	ldw	r2,-20(fp)
6102d09c:	00d840f4 	movhi	r3,24835
6102d0a0:	18fa4204 	addi	r3,r3,-5880
6102d0a4:	10800324 	muli	r2,r2,12
6102d0a8:	10c5883a 	add	r2,r2,r3
6102d0ac:	10c00017 	ldw	r3,0(r2)
6102d0b0:	e0bffc17 	ldw	r2,-16(fp)
6102d0b4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
6102d0b8:	e0bffb17 	ldw	r2,-20(fp)
6102d0bc:	00d840f4 	movhi	r3,24835
6102d0c0:	18fa4204 	addi	r3,r3,-5880
6102d0c4:	10800324 	muli	r2,r2,12
6102d0c8:	10c5883a 	add	r2,r2,r3
6102d0cc:	10800104 	addi	r2,r2,4
6102d0d0:	10c00017 	ldw	r3,0(r2)
6102d0d4:	e0bffc17 	ldw	r2,-16(fp)
6102d0d8:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
6102d0dc:	e0bffb17 	ldw	r2,-20(fp)
6102d0e0:	00d840f4 	movhi	r3,24835
6102d0e4:	18fa4204 	addi	r3,r3,-5880
6102d0e8:	10800324 	muli	r2,r2,12
6102d0ec:	10c5883a 	add	r2,r2,r3
6102d0f0:	10800204 	addi	r2,r2,8
6102d0f4:	10c00017 	ldw	r3,0(r2)
6102d0f8:	e0bffc17 	ldw	r2,-16(fp)
6102d0fc:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
6102d100:	e13ffb17 	ldw	r4,-20(fp)
6102d104:	102b7fc0 	call	6102b7fc <alt_release_fd>
  }
} 
6102d108:	e037883a 	mov	sp,fp
6102d10c:	dfc00117 	ldw	ra,4(sp)
6102d110:	df000017 	ldw	fp,0(sp)
6102d114:	dec00204 	addi	sp,sp,8
6102d118:	f800283a 	ret

6102d11c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
6102d11c:	defffb04 	addi	sp,sp,-20
6102d120:	dfc00415 	stw	ra,16(sp)
6102d124:	df000315 	stw	fp,12(sp)
6102d128:	df000304 	addi	fp,sp,12
6102d12c:	e13ffd15 	stw	r4,-12(fp)
6102d130:	e17ffe15 	stw	r5,-8(fp)
6102d134:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
6102d138:	011840f4 	movhi	r4,24835
6102d13c:	213a4504 	addi	r4,r4,-5868
6102d140:	e17ffd17 	ldw	r5,-12(fp)
6102d144:	01800044 	movi	r6,1
6102d148:	01c07fc4 	movi	r7,511
6102d14c:	102d0580 	call	6102d058 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
6102d150:	011840f4 	movhi	r4,24835
6102d154:	213a4204 	addi	r4,r4,-5880
6102d158:	e17ffe17 	ldw	r5,-8(fp)
6102d15c:	000d883a 	mov	r6,zero
6102d160:	01c07fc4 	movi	r7,511
6102d164:	102d0580 	call	6102d058 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
6102d168:	011840f4 	movhi	r4,24835
6102d16c:	213a4804 	addi	r4,r4,-5856
6102d170:	e17fff17 	ldw	r5,-4(fp)
6102d174:	01800044 	movi	r6,1
6102d178:	01c07fc4 	movi	r7,511
6102d17c:	102d0580 	call	6102d058 <alt_open_fd>
}  
6102d180:	e037883a 	mov	sp,fp
6102d184:	dfc00117 	ldw	ra,4(sp)
6102d188:	df000017 	ldw	fp,0(sp)
6102d18c:	dec00204 	addi	sp,sp,8
6102d190:	f800283a 	ret

6102d194 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
6102d194:	defffc04 	addi	sp,sp,-16
6102d198:	df000315 	stw	fp,12(sp)
6102d19c:	df000304 	addi	fp,sp,12
6102d1a0:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
6102d1a4:	e0bffe17 	ldw	r2,-8(fp)
6102d1a8:	10800217 	ldw	r2,8(r2)
6102d1ac:	10d00034 	orhi	r3,r2,16384
6102d1b0:	e0bffe17 	ldw	r2,-8(fp)
6102d1b4:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
6102d1b8:	e03ffd15 	stw	zero,-12(fp)
6102d1bc:	00002006 	br	6102d240 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
6102d1c0:	e0bffd17 	ldw	r2,-12(fp)
6102d1c4:	00d840f4 	movhi	r3,24835
6102d1c8:	18fa4204 	addi	r3,r3,-5880
6102d1cc:	10800324 	muli	r2,r2,12
6102d1d0:	10c5883a 	add	r2,r2,r3
6102d1d4:	10c00017 	ldw	r3,0(r2)
6102d1d8:	e0bffe17 	ldw	r2,-8(fp)
6102d1dc:	10800017 	ldw	r2,0(r2)
6102d1e0:	1880141e 	bne	r3,r2,6102d234 <alt_file_locked+0xa0>
6102d1e4:	e0bffd17 	ldw	r2,-12(fp)
6102d1e8:	00d840f4 	movhi	r3,24835
6102d1ec:	18fa4204 	addi	r3,r3,-5880
6102d1f0:	10800324 	muli	r2,r2,12
6102d1f4:	10c5883a 	add	r2,r2,r3
6102d1f8:	10800204 	addi	r2,r2,8
6102d1fc:	10800017 	ldw	r2,0(r2)
6102d200:	1004403a 	cmpge	r2,r2,zero
6102d204:	10000b1e 	bne	r2,zero,6102d234 <alt_file_locked+0xa0>
6102d208:	e0bffd17 	ldw	r2,-12(fp)
6102d20c:	10800324 	muli	r2,r2,12
6102d210:	1007883a 	mov	r3,r2
6102d214:	009840f4 	movhi	r2,24835
6102d218:	10ba4204 	addi	r2,r2,-5880
6102d21c:	1887883a 	add	r3,r3,r2
6102d220:	e0bffe17 	ldw	r2,-8(fp)
6102d224:	18800326 	beq	r3,r2,6102d234 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
6102d228:	00bffcc4 	movi	r2,-13
6102d22c:	e0bfff15 	stw	r2,-4(fp)
6102d230:	00000a06 	br	6102d25c <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
6102d234:	e0bffd17 	ldw	r2,-12(fp)
6102d238:	10800044 	addi	r2,r2,1
6102d23c:	e0bffd15 	stw	r2,-12(fp)
6102d240:	009840f4 	movhi	r2,24835
6102d244:	10bec404 	addi	r2,r2,-1264
6102d248:	10800017 	ldw	r2,0(r2)
6102d24c:	1007883a 	mov	r3,r2
6102d250:	e0bffd17 	ldw	r2,-12(fp)
6102d254:	18bfda2e 	bgeu	r3,r2,6102d1c0 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
6102d258:	e03fff15 	stw	zero,-4(fp)
6102d25c:	e0bfff17 	ldw	r2,-4(fp)
}
6102d260:	e037883a 	mov	sp,fp
6102d264:	df000017 	ldw	fp,0(sp)
6102d268:	dec00104 	addi	sp,sp,4
6102d26c:	f800283a 	ret

6102d270 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
6102d270:	defff404 	addi	sp,sp,-48
6102d274:	dfc00b15 	stw	ra,44(sp)
6102d278:	df000a15 	stw	fp,40(sp)
6102d27c:	df000a04 	addi	fp,sp,40
6102d280:	e13ffb15 	stw	r4,-20(fp)
6102d284:	e17ffc15 	stw	r5,-16(fp)
6102d288:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
6102d28c:	00bfffc4 	movi	r2,-1
6102d290:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
6102d294:	00bffb44 	movi	r2,-19
6102d298:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
6102d29c:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
6102d2a0:	e13ffb17 	ldw	r4,-20(fp)
6102d2a4:	015840f4 	movhi	r5,24835
6102d2a8:	297ec204 	addi	r5,r5,-1272
6102d2ac:	102d4780 	call	6102d478 <alt_find_dev>
6102d2b0:	e0bffa15 	stw	r2,-24(fp)
6102d2b4:	e0bffa17 	ldw	r2,-24(fp)
6102d2b8:	1004c03a 	cmpne	r2,r2,zero
6102d2bc:	1000051e 	bne	r2,zero,6102d2d4 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
6102d2c0:	e13ffb17 	ldw	r4,-20(fp)
6102d2c4:	102d50c0 	call	6102d50c <alt_find_file>
6102d2c8:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
6102d2cc:	00800044 	movi	r2,1
6102d2d0:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
6102d2d4:	e0bffa17 	ldw	r2,-24(fp)
6102d2d8:	1005003a 	cmpeq	r2,r2,zero
6102d2dc:	1000301e 	bne	r2,zero,6102d3a0 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
6102d2e0:	e13ffa17 	ldw	r4,-24(fp)
6102d2e4:	102d62c0 	call	6102d62c <alt_get_fd>
6102d2e8:	e0bff815 	stw	r2,-32(fp)
6102d2ec:	e0bff817 	ldw	r2,-32(fp)
6102d2f0:	1004403a 	cmpge	r2,r2,zero
6102d2f4:	1000031e 	bne	r2,zero,6102d304 <open+0x94>
    {
      status = index;
6102d2f8:	e0bff817 	ldw	r2,-32(fp)
6102d2fc:	e0bff715 	stw	r2,-36(fp)
6102d300:	00002906 	br	6102d3a8 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
6102d304:	e0bff817 	ldw	r2,-32(fp)
6102d308:	10800324 	muli	r2,r2,12
6102d30c:	1007883a 	mov	r3,r2
6102d310:	009840f4 	movhi	r2,24835
6102d314:	10ba4204 	addi	r2,r2,-5880
6102d318:	1885883a 	add	r2,r3,r2
6102d31c:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
6102d320:	e0fffc17 	ldw	r3,-16(fp)
6102d324:	00900034 	movhi	r2,16384
6102d328:	10bfffc4 	addi	r2,r2,-1
6102d32c:	1886703a 	and	r3,r3,r2
6102d330:	e0bff917 	ldw	r2,-28(fp)
6102d334:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
6102d338:	e0bff617 	ldw	r2,-40(fp)
6102d33c:	1004c03a 	cmpne	r2,r2,zero
6102d340:	1000061e 	bne	r2,zero,6102d35c <open+0xec>
6102d344:	e13ff917 	ldw	r4,-28(fp)
6102d348:	102d1940 	call	6102d194 <alt_file_locked>
6102d34c:	e0bff715 	stw	r2,-36(fp)
6102d350:	e0bff717 	ldw	r2,-36(fp)
6102d354:	1004803a 	cmplt	r2,r2,zero
6102d358:	1000131e 	bne	r2,zero,6102d3a8 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
6102d35c:	e0bffa17 	ldw	r2,-24(fp)
6102d360:	10800317 	ldw	r2,12(r2)
6102d364:	1005003a 	cmpeq	r2,r2,zero
6102d368:	1000091e 	bne	r2,zero,6102d390 <open+0x120>
6102d36c:	e0bffa17 	ldw	r2,-24(fp)
6102d370:	10800317 	ldw	r2,12(r2)
6102d374:	e13ff917 	ldw	r4,-28(fp)
6102d378:	e17ffb17 	ldw	r5,-20(fp)
6102d37c:	e1bffc17 	ldw	r6,-16(fp)
6102d380:	e1fffd17 	ldw	r7,-12(fp)
6102d384:	103ee83a 	callr	r2
6102d388:	e0bfff15 	stw	r2,-4(fp)
6102d38c:	00000106 	br	6102d394 <open+0x124>
6102d390:	e03fff15 	stw	zero,-4(fp)
6102d394:	e0bfff17 	ldw	r2,-4(fp)
6102d398:	e0bff715 	stw	r2,-36(fp)
6102d39c:	00000206 	br	6102d3a8 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
6102d3a0:	00bffb44 	movi	r2,-19
6102d3a4:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
6102d3a8:	e0bff717 	ldw	r2,-36(fp)
6102d3ac:	1004403a 	cmpge	r2,r2,zero
6102d3b0:	1000091e 	bne	r2,zero,6102d3d8 <open+0x168>
  {
    alt_release_fd (index);  
6102d3b4:	e13ff817 	ldw	r4,-32(fp)
6102d3b8:	102b7fc0 	call	6102b7fc <alt_release_fd>
    ALT_ERRNO = -status;
6102d3bc:	102d3f80 	call	6102d3f8 <alt_get_errno>
6102d3c0:	e0fff717 	ldw	r3,-36(fp)
6102d3c4:	00c7c83a 	sub	r3,zero,r3
6102d3c8:	10c00015 	stw	r3,0(r2)
    return -1;
6102d3cc:	00bfffc4 	movi	r2,-1
6102d3d0:	e0bffe15 	stw	r2,-8(fp)
6102d3d4:	00000206 	br	6102d3e0 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
6102d3d8:	e0bff817 	ldw	r2,-32(fp)
6102d3dc:	e0bffe15 	stw	r2,-8(fp)
6102d3e0:	e0bffe17 	ldw	r2,-8(fp)
}
6102d3e4:	e037883a 	mov	sp,fp
6102d3e8:	dfc00117 	ldw	ra,4(sp)
6102d3ec:	df000017 	ldw	fp,0(sp)
6102d3f0:	dec00204 	addi	sp,sp,8
6102d3f4:	f800283a 	ret

6102d3f8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
6102d3f8:	defffd04 	addi	sp,sp,-12
6102d3fc:	dfc00215 	stw	ra,8(sp)
6102d400:	df000115 	stw	fp,4(sp)
6102d404:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
6102d408:	009840f4 	movhi	r2,24835
6102d40c:	10bec504 	addi	r2,r2,-1260
6102d410:	10800017 	ldw	r2,0(r2)
6102d414:	1005003a 	cmpeq	r2,r2,zero
6102d418:	1000061e 	bne	r2,zero,6102d434 <alt_get_errno+0x3c>
6102d41c:	009840f4 	movhi	r2,24835
6102d420:	10bec504 	addi	r2,r2,-1260
6102d424:	10800017 	ldw	r2,0(r2)
6102d428:	103ee83a 	callr	r2
6102d42c:	e0bfff15 	stw	r2,-4(fp)
6102d430:	00000306 	br	6102d440 <alt_get_errno+0x48>
6102d434:	009840f4 	movhi	r2,24835
6102d438:	10856704 	addi	r2,r2,5532
6102d43c:	e0bfff15 	stw	r2,-4(fp)
6102d440:	e0bfff17 	ldw	r2,-4(fp)
}
6102d444:	e037883a 	mov	sp,fp
6102d448:	dfc00117 	ldw	ra,4(sp)
6102d44c:	df000017 	ldw	fp,0(sp)
6102d450:	dec00204 	addi	sp,sp,8
6102d454:	f800283a 	ret

6102d458 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
6102d458:	deffff04 	addi	sp,sp,-4
6102d45c:	df000015 	stw	fp,0(sp)
6102d460:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
6102d464:	000170fa 	wrctl	ienable,zero
}
6102d468:	e037883a 	mov	sp,fp
6102d46c:	df000017 	ldw	fp,0(sp)
6102d470:	dec00104 	addi	sp,sp,4
6102d474:	f800283a 	ret

6102d478 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
6102d478:	defff904 	addi	sp,sp,-28
6102d47c:	dfc00615 	stw	ra,24(sp)
6102d480:	df000515 	stw	fp,20(sp)
6102d484:	df000504 	addi	fp,sp,20
6102d488:	e13ffd15 	stw	r4,-12(fp)
6102d48c:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
6102d490:	e0bffe17 	ldw	r2,-8(fp)
6102d494:	10800017 	ldw	r2,0(r2)
6102d498:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
6102d49c:	e13ffd17 	ldw	r4,-12(fp)
6102d4a0:	1021c4c0 	call	61021c4c <strlen>
6102d4a4:	10800044 	addi	r2,r2,1
6102d4a8:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
6102d4ac:	00000d06 	br	6102d4e4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
6102d4b0:	e0bffc17 	ldw	r2,-16(fp)
6102d4b4:	11000217 	ldw	r4,8(r2)
6102d4b8:	e1bffb17 	ldw	r6,-20(fp)
6102d4bc:	e17ffd17 	ldw	r5,-12(fp)
6102d4c0:	102d7c00 	call	6102d7c0 <memcmp>
6102d4c4:	1004c03a 	cmpne	r2,r2,zero
6102d4c8:	1000031e 	bne	r2,zero,6102d4d8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
6102d4cc:	e0bffc17 	ldw	r2,-16(fp)
6102d4d0:	e0bfff15 	stw	r2,-4(fp)
6102d4d4:	00000706 	br	6102d4f4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
6102d4d8:	e0bffc17 	ldw	r2,-16(fp)
6102d4dc:	10800017 	ldw	r2,0(r2)
6102d4e0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
6102d4e4:	e0fffe17 	ldw	r3,-8(fp)
6102d4e8:	e0bffc17 	ldw	r2,-16(fp)
6102d4ec:	10fff01e 	bne	r2,r3,6102d4b0 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
6102d4f0:	e03fff15 	stw	zero,-4(fp)
6102d4f4:	e0bfff17 	ldw	r2,-4(fp)
}
6102d4f8:	e037883a 	mov	sp,fp
6102d4fc:	dfc00117 	ldw	ra,4(sp)
6102d500:	df000017 	ldw	fp,0(sp)
6102d504:	dec00204 	addi	sp,sp,8
6102d508:	f800283a 	ret

6102d50c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
6102d50c:	defffa04 	addi	sp,sp,-24
6102d510:	dfc00515 	stw	ra,20(sp)
6102d514:	df000415 	stw	fp,16(sp)
6102d518:	df000404 	addi	fp,sp,16
6102d51c:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
6102d520:	009840f4 	movhi	r2,24835
6102d524:	10bec004 	addi	r2,r2,-1280
6102d528:	10800017 	ldw	r2,0(r2)
6102d52c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
6102d530:	00003306 	br	6102d600 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
6102d534:	e0bffd17 	ldw	r2,-12(fp)
6102d538:	11000217 	ldw	r4,8(r2)
6102d53c:	1021c4c0 	call	61021c4c <strlen>
6102d540:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
6102d544:	e0bffd17 	ldw	r2,-12(fp)
6102d548:	10c00217 	ldw	r3,8(r2)
6102d54c:	e0bffc17 	ldw	r2,-16(fp)
6102d550:	1885883a 	add	r2,r3,r2
6102d554:	10bfffc4 	addi	r2,r2,-1
6102d558:	10800003 	ldbu	r2,0(r2)
6102d55c:	10803fcc 	andi	r2,r2,255
6102d560:	1080201c 	xori	r2,r2,128
6102d564:	10bfe004 	addi	r2,r2,-128
6102d568:	10800bd8 	cmpnei	r2,r2,47
6102d56c:	1000031e 	bne	r2,zero,6102d57c <alt_find_file+0x70>
    {
      len -= 1;
6102d570:	e0bffc17 	ldw	r2,-16(fp)
6102d574:	10bfffc4 	addi	r2,r2,-1
6102d578:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
6102d57c:	e0bffc17 	ldw	r2,-16(fp)
6102d580:	1007883a 	mov	r3,r2
6102d584:	e0bffe17 	ldw	r2,-8(fp)
6102d588:	1885883a 	add	r2,r3,r2
6102d58c:	10800003 	ldbu	r2,0(r2)
6102d590:	10803fcc 	andi	r2,r2,255
6102d594:	1080201c 	xori	r2,r2,128
6102d598:	10bfe004 	addi	r2,r2,-128
6102d59c:	10800be0 	cmpeqi	r2,r2,47
6102d5a0:	10000a1e 	bne	r2,zero,6102d5cc <alt_find_file+0xc0>
6102d5a4:	e0bffc17 	ldw	r2,-16(fp)
6102d5a8:	1007883a 	mov	r3,r2
6102d5ac:	e0bffe17 	ldw	r2,-8(fp)
6102d5b0:	1885883a 	add	r2,r3,r2
6102d5b4:	10800003 	ldbu	r2,0(r2)
6102d5b8:	10803fcc 	andi	r2,r2,255
6102d5bc:	1080201c 	xori	r2,r2,128
6102d5c0:	10bfe004 	addi	r2,r2,-128
6102d5c4:	1004c03a 	cmpne	r2,r2,zero
6102d5c8:	10000a1e 	bne	r2,zero,6102d5f4 <alt_find_file+0xe8>
6102d5cc:	e0bffd17 	ldw	r2,-12(fp)
6102d5d0:	11000217 	ldw	r4,8(r2)
6102d5d4:	e1bffc17 	ldw	r6,-16(fp)
6102d5d8:	e17ffe17 	ldw	r5,-8(fp)
6102d5dc:	102d7c00 	call	6102d7c0 <memcmp>
6102d5e0:	1004c03a 	cmpne	r2,r2,zero
6102d5e4:	1000031e 	bne	r2,zero,6102d5f4 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
6102d5e8:	e0bffd17 	ldw	r2,-12(fp)
6102d5ec:	e0bfff15 	stw	r2,-4(fp)
6102d5f0:	00000806 	br	6102d614 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
6102d5f4:	e0bffd17 	ldw	r2,-12(fp)
6102d5f8:	10800017 	ldw	r2,0(r2)
6102d5fc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
6102d600:	00d840f4 	movhi	r3,24835
6102d604:	18fec004 	addi	r3,r3,-1280
6102d608:	e0bffd17 	ldw	r2,-12(fp)
6102d60c:	10ffc91e 	bne	r2,r3,6102d534 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
6102d610:	e03fff15 	stw	zero,-4(fp)
6102d614:	e0bfff17 	ldw	r2,-4(fp)
}
6102d618:	e037883a 	mov	sp,fp
6102d61c:	dfc00117 	ldw	ra,4(sp)
6102d620:	df000017 	ldw	fp,0(sp)
6102d624:	dec00204 	addi	sp,sp,8
6102d628:	f800283a 	ret

6102d62c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
6102d62c:	defffc04 	addi	sp,sp,-16
6102d630:	df000315 	stw	fp,12(sp)
6102d634:	df000304 	addi	fp,sp,12
6102d638:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
6102d63c:	00bffa04 	movi	r2,-24
6102d640:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
6102d644:	e03ffe15 	stw	zero,-8(fp)
6102d648:	00001e06 	br	6102d6c4 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
6102d64c:	e0bffe17 	ldw	r2,-8(fp)
6102d650:	00d840f4 	movhi	r3,24835
6102d654:	18fa4204 	addi	r3,r3,-5880
6102d658:	10800324 	muli	r2,r2,12
6102d65c:	10c5883a 	add	r2,r2,r3
6102d660:	10800017 	ldw	r2,0(r2)
6102d664:	1004c03a 	cmpne	r2,r2,zero
6102d668:	1000131e 	bne	r2,zero,6102d6b8 <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
6102d66c:	e0bffe17 	ldw	r2,-8(fp)
6102d670:	00d840f4 	movhi	r3,24835
6102d674:	18fa4204 	addi	r3,r3,-5880
6102d678:	10800324 	muli	r2,r2,12
6102d67c:	10c7883a 	add	r3,r2,r3
6102d680:	e0bfff17 	ldw	r2,-4(fp)
6102d684:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
6102d688:	009840f4 	movhi	r2,24835
6102d68c:	10bec404 	addi	r2,r2,-1264
6102d690:	10c00017 	ldw	r3,0(r2)
6102d694:	e0bffe17 	ldw	r2,-8(fp)
6102d698:	1880040e 	bge	r3,r2,6102d6ac <alt_get_fd+0x80>
      {
        alt_max_fd = i;
6102d69c:	00d840f4 	movhi	r3,24835
6102d6a0:	18fec404 	addi	r3,r3,-1264
6102d6a4:	e0bffe17 	ldw	r2,-8(fp)
6102d6a8:	18800015 	stw	r2,0(r3)
      }
      rc = i;
6102d6ac:	e0bffe17 	ldw	r2,-8(fp)
6102d6b0:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
6102d6b4:	00000606 	br	6102d6d0 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
6102d6b8:	e0bffe17 	ldw	r2,-8(fp)
6102d6bc:	10800044 	addi	r2,r2,1
6102d6c0:	e0bffe15 	stw	r2,-8(fp)
6102d6c4:	e0bffe17 	ldw	r2,-8(fp)
6102d6c8:	10800810 	cmplti	r2,r2,32
6102d6cc:	103fdf1e 	bne	r2,zero,6102d64c <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
6102d6d0:	e0bffd17 	ldw	r2,-12(fp)
}
6102d6d4:	e037883a 	mov	sp,fp
6102d6d8:	df000017 	ldw	fp,0(sp)
6102d6dc:	dec00104 	addi	sp,sp,4
6102d6e0:	f800283a 	ret

6102d6e4 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
6102d6e4:	defffb04 	addi	sp,sp,-20
6102d6e8:	df000415 	stw	fp,16(sp)
6102d6ec:	df000404 	addi	fp,sp,16
6102d6f0:	e13ffe15 	stw	r4,-8(fp)
6102d6f4:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
6102d6f8:	e0bfff17 	ldw	r2,-4(fp)
6102d6fc:	10840070 	cmpltui	r2,r2,4097
6102d700:	1000021e 	bne	r2,zero,6102d70c <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
6102d704:	00840004 	movi	r2,4096
6102d708:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
6102d70c:	e0fffe17 	ldw	r3,-8(fp)
6102d710:	e0bfff17 	ldw	r2,-4(fp)
6102d714:	1885883a 	add	r2,r3,r2
6102d718:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
6102d71c:	e0bffe17 	ldw	r2,-8(fp)
6102d720:	e0bffd15 	stw	r2,-12(fp)
6102d724:	00000506 	br	6102d73c <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
6102d728:	e0bffd17 	ldw	r2,-12(fp)
6102d72c:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
6102d730:	e0bffd17 	ldw	r2,-12(fp)
6102d734:	10800804 	addi	r2,r2,32
6102d738:	e0bffd15 	stw	r2,-12(fp)
6102d73c:	e0fffd17 	ldw	r3,-12(fp)
6102d740:	e0bffc17 	ldw	r2,-16(fp)
6102d744:	18bff836 	bltu	r3,r2,6102d728 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
6102d748:	e0bffe17 	ldw	r2,-8(fp)
6102d74c:	108007cc 	andi	r2,r2,31
6102d750:	1005003a 	cmpeq	r2,r2,zero
6102d754:	1000021e 	bne	r2,zero,6102d760 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
6102d758:	e0bffd17 	ldw	r2,-12(fp)
6102d75c:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
6102d760:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
6102d764:	e037883a 	mov	sp,fp
6102d768:	df000017 	ldw	fp,0(sp)
6102d76c:	dec00104 	addi	sp,sp,4
6102d770:	f800283a 	ret

6102d774 <atexit>:
6102d774:	200b883a 	mov	r5,r4
6102d778:	000d883a 	mov	r6,zero
6102d77c:	0009883a 	mov	r4,zero
6102d780:	000f883a 	mov	r7,zero
6102d784:	102d8341 	jmpi	6102d834 <__register_exitproc>

6102d788 <exit>:
6102d788:	defffe04 	addi	sp,sp,-8
6102d78c:	000b883a 	mov	r5,zero
6102d790:	dc000015 	stw	r16,0(sp)
6102d794:	dfc00115 	stw	ra,4(sp)
6102d798:	2021883a 	mov	r16,r4
6102d79c:	102d96c0 	call	6102d96c <__call_exitprocs>
6102d7a0:	009840f4 	movhi	r2,24835
6102d7a4:	10bebb04 	addi	r2,r2,-1300
6102d7a8:	11000017 	ldw	r4,0(r2)
6102d7ac:	20800f17 	ldw	r2,60(r4)
6102d7b0:	10000126 	beq	r2,zero,6102d7b8 <exit+0x30>
6102d7b4:	103ee83a 	callr	r2
6102d7b8:	8009883a 	mov	r4,r16
6102d7bc:	102db5c0 	call	6102db5c <_exit>

6102d7c0 <memcmp>:
6102d7c0:	00c000c4 	movi	r3,3
6102d7c4:	1980032e 	bgeu	r3,r6,6102d7d4 <memcmp+0x14>
6102d7c8:	2144b03a 	or	r2,r4,r5
6102d7cc:	10c4703a 	and	r2,r2,r3
6102d7d0:	10000f26 	beq	r2,zero,6102d810 <memcmp+0x50>
6102d7d4:	31ffffc4 	addi	r7,r6,-1
6102d7d8:	3000061e 	bne	r6,zero,6102d7f4 <memcmp+0x34>
6102d7dc:	00000a06 	br	6102d808 <memcmp+0x48>
6102d7e0:	39ffffc4 	addi	r7,r7,-1
6102d7e4:	00bfffc4 	movi	r2,-1
6102d7e8:	21000044 	addi	r4,r4,1
6102d7ec:	29400044 	addi	r5,r5,1
6102d7f0:	38800526 	beq	r7,r2,6102d808 <memcmp+0x48>
6102d7f4:	20c00003 	ldbu	r3,0(r4)
6102d7f8:	28800003 	ldbu	r2,0(r5)
6102d7fc:	18bff826 	beq	r3,r2,6102d7e0 <memcmp+0x20>
6102d800:	1885c83a 	sub	r2,r3,r2
6102d804:	f800283a 	ret
6102d808:	0005883a 	mov	r2,zero
6102d80c:	f800283a 	ret
6102d810:	180f883a 	mov	r7,r3
6102d814:	20c00017 	ldw	r3,0(r4)
6102d818:	28800017 	ldw	r2,0(r5)
6102d81c:	18bfed1e 	bne	r3,r2,6102d7d4 <memcmp+0x14>
6102d820:	31bfff04 	addi	r6,r6,-4
6102d824:	21000104 	addi	r4,r4,4
6102d828:	29400104 	addi	r5,r5,4
6102d82c:	39bff936 	bltu	r7,r6,6102d814 <memcmp+0x54>
6102d830:	003fe806 	br	6102d7d4 <memcmp+0x14>

6102d834 <__register_exitproc>:
6102d834:	defffa04 	addi	sp,sp,-24
6102d838:	009840f4 	movhi	r2,24835
6102d83c:	10bebb04 	addi	r2,r2,-1300
6102d840:	dc000015 	stw	r16,0(sp)
6102d844:	14000017 	ldw	r16,0(r2)
6102d848:	dd000415 	stw	r20,16(sp)
6102d84c:	2829883a 	mov	r20,r5
6102d850:	81405217 	ldw	r5,328(r16)
6102d854:	dcc00315 	stw	r19,12(sp)
6102d858:	dc800215 	stw	r18,8(sp)
6102d85c:	dc400115 	stw	r17,4(sp)
6102d860:	dfc00515 	stw	ra,20(sp)
6102d864:	2023883a 	mov	r17,r4
6102d868:	3027883a 	mov	r19,r6
6102d86c:	3825883a 	mov	r18,r7
6102d870:	28002526 	beq	r5,zero,6102d908 <__register_exitproc+0xd4>
6102d874:	29000117 	ldw	r4,4(r5)
6102d878:	008007c4 	movi	r2,31
6102d87c:	11002716 	blt	r2,r4,6102d91c <__register_exitproc+0xe8>
6102d880:	8800101e 	bne	r17,zero,6102d8c4 <__register_exitproc+0x90>
6102d884:	2105883a 	add	r2,r4,r4
6102d888:	1085883a 	add	r2,r2,r2
6102d88c:	20c00044 	addi	r3,r4,1
6102d890:	1145883a 	add	r2,r2,r5
6102d894:	0009883a 	mov	r4,zero
6102d898:	15000215 	stw	r20,8(r2)
6102d89c:	28c00115 	stw	r3,4(r5)
6102d8a0:	2005883a 	mov	r2,r4
6102d8a4:	dfc00517 	ldw	ra,20(sp)
6102d8a8:	dd000417 	ldw	r20,16(sp)
6102d8ac:	dcc00317 	ldw	r19,12(sp)
6102d8b0:	dc800217 	ldw	r18,8(sp)
6102d8b4:	dc400117 	ldw	r17,4(sp)
6102d8b8:	dc000017 	ldw	r16,0(sp)
6102d8bc:	dec00604 	addi	sp,sp,24
6102d8c0:	f800283a 	ret
6102d8c4:	29802204 	addi	r6,r5,136
6102d8c8:	00800044 	movi	r2,1
6102d8cc:	110e983a 	sll	r7,r2,r4
6102d8d0:	30c04017 	ldw	r3,256(r6)
6102d8d4:	2105883a 	add	r2,r4,r4
6102d8d8:	1085883a 	add	r2,r2,r2
6102d8dc:	1185883a 	add	r2,r2,r6
6102d8e0:	19c6b03a 	or	r3,r3,r7
6102d8e4:	14802015 	stw	r18,128(r2)
6102d8e8:	14c00015 	stw	r19,0(r2)
6102d8ec:	00800084 	movi	r2,2
6102d8f0:	30c04015 	stw	r3,256(r6)
6102d8f4:	88bfe31e 	bne	r17,r2,6102d884 <__register_exitproc+0x50>
6102d8f8:	30804117 	ldw	r2,260(r6)
6102d8fc:	11c4b03a 	or	r2,r2,r7
6102d900:	30804115 	stw	r2,260(r6)
6102d904:	003fdf06 	br	6102d884 <__register_exitproc+0x50>
6102d908:	009840f4 	movhi	r2,24835
6102d90c:	1085b804 	addi	r2,r2,5856
6102d910:	100b883a 	mov	r5,r2
6102d914:	80805215 	stw	r2,328(r16)
6102d918:	003fd606 	br	6102d874 <__register_exitproc+0x40>
6102d91c:	00800034 	movhi	r2,0
6102d920:	10800004 	addi	r2,r2,0
6102d924:	1000021e 	bne	r2,zero,6102d930 <__register_exitproc+0xfc>
6102d928:	013fffc4 	movi	r4,-1
6102d92c:	003fdc06 	br	6102d8a0 <__register_exitproc+0x6c>
6102d930:	01006404 	movi	r4,400
6102d934:	103ee83a 	callr	r2
6102d938:	1007883a 	mov	r3,r2
6102d93c:	103ffa26 	beq	r2,zero,6102d928 <__register_exitproc+0xf4>
6102d940:	80805217 	ldw	r2,328(r16)
6102d944:	180b883a 	mov	r5,r3
6102d948:	18000115 	stw	zero,4(r3)
6102d94c:	18800015 	stw	r2,0(r3)
6102d950:	80c05215 	stw	r3,328(r16)
6102d954:	18006215 	stw	zero,392(r3)
6102d958:	18006315 	stw	zero,396(r3)
6102d95c:	0009883a 	mov	r4,zero
6102d960:	883fc826 	beq	r17,zero,6102d884 <__register_exitproc+0x50>
6102d964:	003fd706 	br	6102d8c4 <__register_exitproc+0x90>

6102d968 <register_fini>:
6102d968:	f800283a 	ret

6102d96c <__call_exitprocs>:
6102d96c:	009840f4 	movhi	r2,24835
6102d970:	10bebb04 	addi	r2,r2,-1300
6102d974:	10800017 	ldw	r2,0(r2)
6102d978:	defff304 	addi	sp,sp,-52
6102d97c:	df000b15 	stw	fp,44(sp)
6102d980:	d8800115 	stw	r2,4(sp)
6102d984:	00800034 	movhi	r2,0
6102d988:	10800004 	addi	r2,r2,0
6102d98c:	1005003a 	cmpeq	r2,r2,zero
6102d990:	d8800215 	stw	r2,8(sp)
6102d994:	d8800117 	ldw	r2,4(sp)
6102d998:	dd400815 	stw	r21,32(sp)
6102d99c:	dd000715 	stw	r20,28(sp)
6102d9a0:	10805204 	addi	r2,r2,328
6102d9a4:	dfc00c15 	stw	ra,48(sp)
6102d9a8:	ddc00a15 	stw	r23,40(sp)
6102d9ac:	dd800915 	stw	r22,36(sp)
6102d9b0:	dcc00615 	stw	r19,24(sp)
6102d9b4:	dc800515 	stw	r18,20(sp)
6102d9b8:	dc400415 	stw	r17,16(sp)
6102d9bc:	dc000315 	stw	r16,12(sp)
6102d9c0:	282b883a 	mov	r21,r5
6102d9c4:	2039883a 	mov	fp,r4
6102d9c8:	d8800015 	stw	r2,0(sp)
6102d9cc:	2829003a 	cmpeq	r20,r5,zero
6102d9d0:	d8800117 	ldw	r2,4(sp)
6102d9d4:	14405217 	ldw	r17,328(r2)
6102d9d8:	88001026 	beq	r17,zero,6102da1c <__call_exitprocs+0xb0>
6102d9dc:	ddc00017 	ldw	r23,0(sp)
6102d9e0:	88800117 	ldw	r2,4(r17)
6102d9e4:	8c802204 	addi	r18,r17,136
6102d9e8:	143fffc4 	addi	r16,r2,-1
6102d9ec:	80000916 	blt	r16,zero,6102da14 <__call_exitprocs+0xa8>
6102d9f0:	05bfffc4 	movi	r22,-1
6102d9f4:	a000151e 	bne	r20,zero,6102da4c <__call_exitprocs+0xe0>
6102d9f8:	8409883a 	add	r4,r16,r16
6102d9fc:	2105883a 	add	r2,r4,r4
6102da00:	1485883a 	add	r2,r2,r18
6102da04:	10c02017 	ldw	r3,128(r2)
6102da08:	a8c01126 	beq	r21,r3,6102da50 <__call_exitprocs+0xe4>
6102da0c:	843fffc4 	addi	r16,r16,-1
6102da10:	85bff81e 	bne	r16,r22,6102d9f4 <__call_exitprocs+0x88>
6102da14:	d8800217 	ldw	r2,8(sp)
6102da18:	10003126 	beq	r2,zero,6102dae0 <__call_exitprocs+0x174>
6102da1c:	dfc00c17 	ldw	ra,48(sp)
6102da20:	df000b17 	ldw	fp,44(sp)
6102da24:	ddc00a17 	ldw	r23,40(sp)
6102da28:	dd800917 	ldw	r22,36(sp)
6102da2c:	dd400817 	ldw	r21,32(sp)
6102da30:	dd000717 	ldw	r20,28(sp)
6102da34:	dcc00617 	ldw	r19,24(sp)
6102da38:	dc800517 	ldw	r18,20(sp)
6102da3c:	dc400417 	ldw	r17,16(sp)
6102da40:	dc000317 	ldw	r16,12(sp)
6102da44:	dec00d04 	addi	sp,sp,52
6102da48:	f800283a 	ret
6102da4c:	8409883a 	add	r4,r16,r16
6102da50:	88c00117 	ldw	r3,4(r17)
6102da54:	2105883a 	add	r2,r4,r4
6102da58:	1445883a 	add	r2,r2,r17
6102da5c:	18ffffc4 	addi	r3,r3,-1
6102da60:	11800217 	ldw	r6,8(r2)
6102da64:	1c001526 	beq	r3,r16,6102dabc <__call_exitprocs+0x150>
6102da68:	10000215 	stw	zero,8(r2)
6102da6c:	303fe726 	beq	r6,zero,6102da0c <__call_exitprocs+0xa0>
6102da70:	00c00044 	movi	r3,1
6102da74:	1c06983a 	sll	r3,r3,r16
6102da78:	90804017 	ldw	r2,256(r18)
6102da7c:	8cc00117 	ldw	r19,4(r17)
6102da80:	1884703a 	and	r2,r3,r2
6102da84:	10001426 	beq	r2,zero,6102dad8 <__call_exitprocs+0x16c>
6102da88:	90804117 	ldw	r2,260(r18)
6102da8c:	1884703a 	and	r2,r3,r2
6102da90:	10000c1e 	bne	r2,zero,6102dac4 <__call_exitprocs+0x158>
6102da94:	2105883a 	add	r2,r4,r4
6102da98:	1485883a 	add	r2,r2,r18
6102da9c:	11400017 	ldw	r5,0(r2)
6102daa0:	e009883a 	mov	r4,fp
6102daa4:	303ee83a 	callr	r6
6102daa8:	88800117 	ldw	r2,4(r17)
6102daac:	98bfc81e 	bne	r19,r2,6102d9d0 <__call_exitprocs+0x64>
6102dab0:	b8800017 	ldw	r2,0(r23)
6102dab4:	147fd526 	beq	r2,r17,6102da0c <__call_exitprocs+0xa0>
6102dab8:	003fc506 	br	6102d9d0 <__call_exitprocs+0x64>
6102dabc:	8c000115 	stw	r16,4(r17)
6102dac0:	003fea06 	br	6102da6c <__call_exitprocs+0x100>
6102dac4:	2105883a 	add	r2,r4,r4
6102dac8:	1485883a 	add	r2,r2,r18
6102dacc:	11000017 	ldw	r4,0(r2)
6102dad0:	303ee83a 	callr	r6
6102dad4:	003ff406 	br	6102daa8 <__call_exitprocs+0x13c>
6102dad8:	303ee83a 	callr	r6
6102dadc:	003ff206 	br	6102daa8 <__call_exitprocs+0x13c>
6102dae0:	88800117 	ldw	r2,4(r17)
6102dae4:	1000081e 	bne	r2,zero,6102db08 <__call_exitprocs+0x19c>
6102dae8:	89000017 	ldw	r4,0(r17)
6102daec:	20000726 	beq	r4,zero,6102db0c <__call_exitprocs+0x1a0>
6102daf0:	b9000015 	stw	r4,0(r23)
6102daf4:	8809883a 	mov	r4,r17
6102daf8:	00000000 	call	60000000 <__alt_mem_mem_if_ddr2_emif_0+0x20000000>
6102dafc:	bc400017 	ldw	r17,0(r23)
6102db00:	883fb71e 	bne	r17,zero,6102d9e0 <__call_exitprocs+0x74>
6102db04:	003fc506 	br	6102da1c <__call_exitprocs+0xb0>
6102db08:	89000017 	ldw	r4,0(r17)
6102db0c:	882f883a 	mov	r23,r17
6102db10:	2023883a 	mov	r17,r4
6102db14:	883fb21e 	bne	r17,zero,6102d9e0 <__call_exitprocs+0x74>
6102db18:	003fc006 	br	6102da1c <__call_exitprocs+0xb0>

6102db1c <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
6102db1c:	defffd04 	addi	sp,sp,-12
6102db20:	df000215 	stw	fp,8(sp)
6102db24:	df000204 	addi	fp,sp,8
6102db28:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
6102db2c:	e0bfff17 	ldw	r2,-4(fp)
6102db30:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
6102db34:	e0bffe17 	ldw	r2,-8(fp)
6102db38:	1005003a 	cmpeq	r2,r2,zero
6102db3c:	1000021e 	bne	r2,zero,6102db48 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
6102db40:	002af070 	cmpltui	zero,zero,43969
6102db44:	00000106 	br	6102db4c <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
6102db48:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
6102db4c:	e037883a 	mov	sp,fp
6102db50:	df000017 	ldw	fp,0(sp)
6102db54:	dec00104 	addi	sp,sp,4
6102db58:	f800283a 	ret

6102db5c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
6102db5c:	defffd04 	addi	sp,sp,-12
6102db60:	dfc00215 	stw	ra,8(sp)
6102db64:	df000115 	stw	fp,4(sp)
6102db68:	df000104 	addi	fp,sp,4
6102db6c:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
6102db70:	e13fff17 	ldw	r4,-4(fp)
6102db74:	102db1c0 	call	6102db1c <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
6102db78:	003fff06 	br	6102db78 <_exit+0x1c>
6102db7c:	6102d968 	cmpgeui	r4,r12,2917
