
camera_nios_2.elf:     file format elf32-littlenios2
camera_nios_2.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000401b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00040000 paddr 0x00040000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00040020 paddr 0x00040020 align 2**12
         filesz 0x00006178 memsz 0x00006178 flags r-x
    LOAD off    0x00008000 vaddr 0x40000000 paddr 0x00046198 align 2**12
         filesz 0x00001aa0 memsz 0x00001d80 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00040000  00040000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00040020  00040020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00005fe4  000401b4  000401b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000058  40000000  00046198  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a48  40000058  000461f0  00008058  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002e0  40001aa0  00047c38  00009aa0  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00009aa0  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000998  00000000  00000000  00009ac8  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00000e2a  00000000  00000000  0000a460  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0001a4c1  00000000  00000000  0000b28a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000522c  00000000  00000000  0002574b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000d683  00000000  00000000  0002a977  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001130  00000000  00000000  00037ffc  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000017a3  00000000  00000000  0003912c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004086  00000000  00000000  0003a8cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  0003e958  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000002f8  00000000  00000000  0003e9b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00041314  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000a  00000000  00000000  00041317  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00041321  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00041322  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00041323  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00041327  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0004132b  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0004132f  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  00041338  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  00041341  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000008  00000000  00000000  0004134a  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000034  00000000  00000000  00041352  2**0
                  CONTENTS, READONLY
 29 .jdi          00004d22  00000000  00000000  00041386  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     000a0d3f  00000000  00000000  000460a8  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00040000 l    d  .entry	00000000 .entry
00040020 l    d  .exceptions	00000000 .exceptions
000401b4 l    d  .text	00000000 .text
40000000 l    d  .rodata	00000000 .rodata
40000058 l    d  .rwdata	00000000 .rwdata
40001aa0 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000401fc l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 camera.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 impure.c
40000058 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00042230 l     F .text	00000058 std
0004233c l     F .text	00000008 __fp_lock
00042344 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 alt_close.c
00043304 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00043364 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00043464 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00043584 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00043664 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
000437c0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
000439ec l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
40001a90 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00043cb8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
40000a08 l     O .rwdata	00001060 jtag_uart
00043da8 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00043fe8 l     F .text	00000228 altera_avalon_jtag_uart_irq
00044210 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00044ac4 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00044f5c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00045380 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
000454bc l     F .text	000000dc alt_file_locked
00045720 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00045e34 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 lib2-divmod.c
00045fe8 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 alt_exit.c
00046134 l     F .text	00000040 alt_sim_halt
000430a8 g     F .text	00000070 _isatty_r
00043820 g     F .text	0000006c alt_main
000408f8 g     F .text	000000a0 _puts_r
40001af0 g     O .bss	00000100 alt_irq
00043118 g     F .text	00000078 _lseek_r
000461f0 g       *ABS*	00000000 __flash_rwdata_start
40001d80 g       *ABS*	00000000 __alt_heap_start
00042ce4 g     F .text	00000068 __sseek
00042298 g     F .text	000000a4 __sinit
00042398 g     F .text	00000068 __sfmoreglue
000438ac g     F .text	00000020 __malloc_unlock
00041780 g     F .text	000000e0 memmove
00042388 g     F .text	00000010 _cleanup
00000000  w      *UND*	00000000 __errno
00040000 g     F .entry	0000001c __reset
00040020 g       *ABS*	00000000 __flash_exceptions_start
00043034 g     F .text	00000074 _fstat_r
40001aac g     O .bss	00000004 errno
40001ab4 g     O .bss	00000004 alt_argv
40009a68 g       *ABS*	00000000 _gp
00043b68 g     F .text	00000030 usleep
40000888 g     O .rwdata	00000180 alt_fd_list
00045944 g     F .text	00000094 alt_find_dev
000416e0 g     F .text	000000a0 memcpy
0004237c g     F .text	0000000c _cleanup_r
00045444 g     F .text	00000078 alt_io_redirect
00046198 g       *ABS*	00000000 __DTOR_END__
00040998 g     F .text	00000014 puts
00044428 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00046124 g     F .text	00000008 __udivsi3
000434c4 g     F .text	000000c0 isatty
00045bb0 g     F .text	00000090 alt_icache_flush
40001aa0 g     O .bss	00000004 __malloc_top_pad
00040a20 g     F .text	0000049c __sfvwrite_r
00041e54 g     F .text	00000070 _sbrk_r
00043190 g     F .text	00000078 _read_r
40001a88 g     O .rwdata	00000004 alt_max_fd
00042f10 g     F .text	00000110 _fclose_r
000421fc g     F .text	00000034 fflush
40001aa4 g     O .bss	00000004 __malloc_max_sbrked_mem
000436d0 g     F .text	000000f0 lseek
40001a6c g     O .rwdata	00000004 _global_impure_ptr
00041860 g     F .text	000005f4 _realloc_r
40001d80 g       *ABS*	00000000 __bss_end
00045288 g     F .text	000000f8 alt_iic_isr_register
00045818 g     F .text	0000010c alt_tick
00042364 g     F .text	00000018 __fp_lock_all
00045240 g     F .text	00000048 alt_ic_irq_enabled
00045780 g     F .text	00000098 alt_alarm_stop
40001abc g     O .bss	00000004 alt_irq_active
000400ec g     F .exceptions	000000c8 alt_irq_handler
40000860 g     O .rwdata	00000028 alt_dev_null
00044e64 g     F .text	00000044 alt_dcache_flush_all
40001aa0 g       *ABS*	00000000 __ram_rwdata_end
00040000 g       *ABS*	00000000 __alt_mem_onchip_memory
40001a80 g     O .rwdata	00000008 alt_dev_list
00043b98 g     F .text	00000120 write
40000058 g       *ABS*	00000000 __ram_rodata_end
00043390 g     F .text	000000d4 fstat
0004612c g     F .text	00000008 __umodsi3
40001d80 g       *ABS*	00000000 end
00043f28 g     F .text	000000c0 altera_avalon_jtag_uart_init
00046194 g       *ABS*	00000000 __CTOR_LIST__
80000000 g       *ABS*	00000000 __alt_stack_pointer
00044b34 g     F .text	00000090 alt_avalon_timer_sc_init
0004464c g     F .text	00000240 altera_avalon_jtag_uart_write
00042288 g     F .text	00000004 __sfp_lock_acquire
000415fc g     F .text	000000e4 memchr
0004261c g     F .text	00000314 _free_r
00045e38 g     F .text	000001b0 __call_exitprocs
40001a74 g     O .rwdata	00000004 __malloc_sbrk_base
000401b4 g     F .text	0000004c _start
40001ac0 g     O .bss	00000004 _alt_tick_rate
0004488c g     F .text	00000238 alt_avalon_spi_command
40001ac4 g     O .bss	00000004 _alt_nticks
000438cc g     F .text	00000120 read
00043d4c g     F .text	0000005c alt_sys_init
00045d00 g     F .text	00000134 __register_exitproc
000442c0 g     F .text	00000074 altera_avalon_jtag_uart_close
40000058 g       *ABS*	00000000 __ram_rwdata_start
40000000 g       *ABS*	00000000 __ram_rodata_start
40001ac8 g     O .bss	00000028 __malloc_current_mallinfo
00043de0 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
00045af8 g     F .text	000000b8 alt_get_fd
00044d18 g     F .text	0000014c alt_busy_sleep
00042ea0 g     F .text	00000070 _close_r
00045c8c g     F .text	00000074 memcmp
00043e90 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
40001d80 g       *ABS*	00000000 __alt_stack_base
00043ed8 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00041ec4 g     F .text	0000013c __swsetup_r
00042400 g     F .text	000000f0 __sfp
40000458 g     O .rwdata	00000408 __malloc_av_
00042294 g     F .text	00000004 __sinit_lock_release
00042dc8 g     F .text	00000060 __sread
000459d8 g     F .text	00000120 alt_find_file
00044ea8 g     F .text	000000b4 alt_dev_llist_insert
0004388c g     F .text	00000020 __malloc_lock
00043aac g     F .text	000000bc sbrk
00042000 g     F .text	000001fc _fflush_r
40001aa0 g       *ABS*	00000000 __bss_start
00042c44 g     F .text	00000098 memset
00040828 g     F .text	000000d0 main
40001ab8 g     O .bss	00000004 alt_envp
40001aa8 g     O .bss	00000004 __malloc_max_total_mem
00043e38 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
00042cdc g     F .text	00000008 __sclose
80000000 g       *ABS*	00000000 __alt_heap_limit
00043020 g     F .text	00000014 fclose
40001bf0 g     O .bss	00000190 _atexit0
00040ebc g     F .text	00000740 _malloc_r
40001a8c g     O .rwdata	00000004 alt_errno
40000000 g       *ABS*	00000000 __alt_mem_mem_if_ddr2_emif
000429f8 g     F .text	000000b8 _fwalk
00046064 g     F .text	00000060 __divsi3
000424f0 g     F .text	0000012c _malloc_trim_r
00046198 g       *ABS*	00000000 __CTOR_END__
00046198 g       *ABS*	00000000 __flash_rodata_start
00046198 g       *ABS*	00000000 __DTOR_LIST__
00043d18 g     F .text	00000034 alt_irq_init
00043a4c g     F .text	00000060 alt_release_fd
00045c40 g     F .text	00000014 atexit
00042e28 g     F .text	00000078 _write_r
40001a68 g     O .rwdata	00000004 _impure_ptr
40001ab0 g     O .bss	00000004 alt_argc
00045020 g     F .text	00000064 _do_dtors
00040020 g       .exceptions	00000000 alt_irq_entry
0004234c g     F .text	00000018 __fp_unlock_all
40001a78 g     O .rwdata	00000008 alt_fs_list
00040020 g       *ABS*	00000000 __ram_exceptions_start
000450b4 g     F .text	00000050 alt_ic_isr_register
40001aa0 g       *ABS*	00000000 _edata
40001d80 g       *ABS*	00000000 _end
000401b4 g       *ABS*	00000000 __ram_exceptions_end
00044334 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
000451a0 g     F .text	000000a0 alt_ic_irq_disable
00042d4c g     F .text	0000007c __swrite
40001a70 g     O .rwdata	00000004 __malloc_trim_threshold
00045924 g     F .text	00000020 altera_nios2_qsys_irq_init
00045c54 g     F .text	00000038 exit
00042930 g     F .text	000000c8 _fwalk_reent
000460c4 g     F .text	00000060 __modsi3
80000000 g       *ABS*	00000000 __alt_data_end
00040020 g     F .exceptions	00000000 alt_exception
0004228c g     F .text	00000004 __sfp_lock_release
00046174 g     F .text	00000020 _exit
00044bc4 g     F .text	00000154 alt_alarm_start
00042ab0 g     F .text	00000194 __smakebuf_r
000409ac g     F .text	00000074 strlen
00045598 g     F .text	00000188 open
00045084 g     F .text	00000030 alt_icache_flush_all
40001a94 g     O .rwdata	00000004 alt_priority_mask
00045104 g     F .text	0000009c alt_ic_irq_enable
00040200 g     F .text	00000628 camera_init
40001a98 g     O .rwdata	00000008 alt_alarm_list
00044fbc g     F .text	00000064 _do_ctors
00043208 g     F .text	000000fc close
000435e4 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free
00042290 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00040000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   40000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   40004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   40008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   4000c:	00bffd16 	blt	zero,r2,40004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   40010:	00400134 	movhi	at,4
    ori r1, r1, %lo(_start)
   40014:	08406d14 	ori	at,at,436
    jmp r1
   40018:	0800683a 	jmp	at
   4001c:	00000000 	call	0 <__alt_mem_onchip_memory-0x40000>

Disassembly of section .exceptions:

00040020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
   40020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
   40024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
   40028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   4002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   40030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   40034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   40038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   4003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   40040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
   40044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
   40048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   4004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   40050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   40054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   40058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   4005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   40060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   40064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   40068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   4006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   40070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   40074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   40078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   4007c:	10000326 	beq	r2,zero,4008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   40080:	20000226 	beq	r4,zero,4008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   40084:	00400ec0 	call	400ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   40088:	00000306 	br	40098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   4008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   40090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   40094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   40098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   4009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   400a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   400a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   400a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   400ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   400b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   400b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   400b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   400bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   400c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
   400c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   400c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   400cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   400d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   400d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   400d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   400dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   400e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
   400e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   400e8:	ef80083a 	eret

000400ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   400ec:	defff904 	addi	sp,sp,-28
   400f0:	dfc00615 	stw	ra,24(sp)
   400f4:	df000515 	stw	fp,20(sp)
   400f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   400fc:	0005313a 	rdctl	r2,ipending
   40100:	e0bffc15 	stw	r2,-16(fp)

  return active;
   40104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   40108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
   4010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   40110:	00800044 	movi	r2,1
   40114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   40118:	e0ffff17 	ldw	r3,-4(fp)
   4011c:	e0bffe17 	ldw	r2,-8(fp)
   40120:	1884703a 	and	r2,r3,r2
   40124:	1005003a 	cmpeq	r2,r2,zero
   40128:	1000161e 	bne	r2,zero,40184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   4012c:	e0bffd17 	ldw	r2,-12(fp)
   40130:	00d00034 	movhi	r3,16384
   40134:	18c6bc04 	addi	r3,r3,6896
   40138:	100490fa 	slli	r2,r2,3
   4013c:	10c5883a 	add	r2,r2,r3
   40140:	11400017 	ldw	r5,0(r2)
   40144:	e0bffd17 	ldw	r2,-12(fp)
   40148:	00d00034 	movhi	r3,16384
   4014c:	18c6bc04 	addi	r3,r3,6896
   40150:	100490fa 	slli	r2,r2,3
   40154:	10c5883a 	add	r2,r2,r3
   40158:	10800104 	addi	r2,r2,4
   4015c:	11000017 	ldw	r4,0(r2)
   40160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   40164:	0005313a 	rdctl	r2,ipending
   40168:	e0bffb15 	stw	r2,-20(fp)

  return active;
   4016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
   40170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
   40174:	e0bfff17 	ldw	r2,-4(fp)
   40178:	1004c03a 	cmpne	r2,r2,zero
   4017c:	103fe31e 	bne	r2,zero,4010c <alt_irq_handler+0x20>
   40180:	00000706 	br	401a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   40184:	e0bffe17 	ldw	r2,-8(fp)
   40188:	1085883a 	add	r2,r2,r2
   4018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
   40190:	e0bffd17 	ldw	r2,-12(fp)
   40194:	10800044 	addi	r2,r2,1
   40198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   4019c:	003fde06 	br	40118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   401a0:	e037883a 	mov	sp,fp
   401a4:	dfc00117 	ldw	ra,4(sp)
   401a8:	df000017 	ldw	fp,0(sp)
   401ac:	dec00204 	addi	sp,sp,8
   401b0:	f800283a 	ret

Disassembly of section .text:

000401b4 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
   401b4:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
   401b8:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
   401bc:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   401c0:	00bffd16 	blt	zero,r2,401b8 <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   401c4:	06e00034 	movhi	sp,32768
    ori sp, sp, %lo(__alt_stack_pointer)
   401c8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
   401cc:	06900034 	movhi	gp,16384
    ori gp, gp, %lo(_gp)
   401d0:	d6a69a14 	ori	gp,gp,39528
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   401d4:	00900034 	movhi	r2,16384
    ori r2, r2, %lo(__bss_start)
   401d8:	1086a814 	ori	r2,r2,6816

    movhi r3, %hi(__bss_end)
   401dc:	00d00034 	movhi	r3,16384
    ori r3, r3, %lo(__bss_end)
   401e0:	18c76014 	ori	r3,r3,7552

    beq r2, r3, 1f
   401e4:	10c00326 	beq	r2,r3,401f4 <_start+0x40>

0:
    stw zero, (r2)
   401e8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   401ec:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   401f0:	10fffd36 	bltu	r2,r3,401e8 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   401f4:	00435e40 	call	435e4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   401f8:	00438200 	call	43820 <alt_main>

000401fc <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   401fc:	003fff06 	br	401fc <alt_after_alt_main>

00040200 <camera_init>:
 */

#include "system.h"
#include "altera_avalon_spi.h"

void camera_init(alt_u32 SPI_BASE) {
   40200:	defff904 	addi	sp,sp,-28
   40204:	dfc00615 	stw	ra,24(sp)
   40208:	df000515 	stw	fp,20(sp)
   4020c:	df000504 	addi	fp,sp,20
   40210:	e13fff15 	stw	r4,-4(fp)

	alt_u8 sentwrite[2];
	alt_u8 received = 0;
   40214:	e03ffe85 	stb	zero,-6(fp)

	sentwrite[1] = 44;
   40218:	00800b04 	movi	r2,44
   4021c:	e0bffe45 	stb	r2,-7(fp)
	sentwrite[0] = 103 | 0x80;
   40220:	00bff9c4 	movi	r2,-25
   40224:	e0bffe05 	stb	r2,-8(fp)
	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   40228:	d8000015 	stw	zero,0(sp)
   4022c:	e0bffe84 	addi	r2,fp,-6
   40230:	d8800115 	stw	r2,4(sp)
   40234:	d8000215 	stw	zero,8(sp)
   40238:	e13fff17 	ldw	r4,-4(fp)
   4023c:	000b883a 	mov	r5,zero
   40240:	01800084 	movi	r6,2
   40244:	e1fffe04 	addi	r7,fp,-8
   40248:	004488c0 	call	4488c <alt_avalon_spi_command>

	sentwrite[1] = 4;
   4024c:	00800104 	movi	r2,4
   40250:	e0bffe45 	stb	r2,-7(fp)
	sentwrite[0] = 84 | 0x80;
   40254:	00bff504 	movi	r2,-44
   40258:	e0bffe05 	stb	r2,-8(fp)
	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   4025c:	d8000015 	stw	zero,0(sp)
   40260:	e0bffe84 	addi	r2,fp,-6
   40264:	d8800115 	stw	r2,4(sp)
   40268:	d8000215 	stw	zero,8(sp)
   4026c:	e13fff17 	ldw	r4,-4(fp)
   40270:	000b883a 	mov	r5,zero
   40274:	01800084 	movi	r6,2
   40278:	e1fffe04 	addi	r7,fp,-8
   4027c:	004488c0 	call	4488c <alt_avalon_spi_command>

	sentwrite[1] = 1;
   40280:	00800044 	movi	r2,1
   40284:	e0bffe45 	stb	r2,-7(fp)
	sentwrite[0] = 85 | 0x80;
   40288:	00bff544 	movi	r2,-43
   4028c:	e0bffe05 	stb	r2,-8(fp)
	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   40290:	d8000015 	stw	zero,0(sp)
   40294:	e0bffe84 	addi	r2,fp,-6
   40298:	d8800115 	stw	r2,4(sp)
   4029c:	d8000215 	stw	zero,8(sp)
   402a0:	e13fff17 	ldw	r4,-4(fp)
   402a4:	000b883a 	mov	r5,zero
   402a8:	01800084 	movi	r6,2
   402ac:	e1fffe04 	addi	r7,fp,-8
   402b0:	004488c0 	call	4488c <alt_avalon_spi_command>

	sentwrite[1] = 64;
   402b4:	00801004 	movi	r2,64
   402b8:	e0bffe45 	stb	r2,-7(fp)
	sentwrite[0] = 88 | 0x80;
   402bc:	00bff604 	movi	r2,-40
   402c0:	e0bffe05 	stb	r2,-8(fp)
	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   402c4:	d8000015 	stw	zero,0(sp)
   402c8:	e0bffe84 	addi	r2,fp,-6
   402cc:	d8800115 	stw	r2,4(sp)
   402d0:	d8000215 	stw	zero,8(sp)
   402d4:	e13fff17 	ldw	r4,-4(fp)
   402d8:	000b883a 	mov	r5,zero
   402dc:	01800084 	movi	r6,2
   402e0:	e1fffe04 	addi	r7,fp,-8
   402e4:	004488c0 	call	4488c <alt_avalon_spi_command>

	sentwrite[1] = 64;
   402e8:	00801004 	movi	r2,64
   402ec:	e0bffe45 	stb	r2,-7(fp)
	sentwrite[0] = 91 | 0x80;
   402f0:	00bff6c4 	movi	r2,-37
   402f4:	e0bffe05 	stb	r2,-8(fp)
	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   402f8:	d8000015 	stw	zero,0(sp)
   402fc:	e0bffe84 	addi	r2,fp,-6
   40300:	d8800115 	stw	r2,4(sp)
   40304:	d8000215 	stw	zero,8(sp)
   40308:	e13fff17 	ldw	r4,-4(fp)
   4030c:	000b883a 	mov	r5,zero
   40310:	01800084 	movi	r6,2
   40314:	e1fffe04 	addi	r7,fp,-8
   40318:	004488c0 	call	4488c <alt_avalon_spi_command>

	sentwrite[1] = 101;
   4031c:	00801944 	movi	r2,101
   40320:	e0bffe45 	stb	r2,-7(fp)
	sentwrite[0] = 94 | 0x80;
   40324:	00bff784 	movi	r2,-34
   40328:	e0bffe05 	stb	r2,-8(fp)
	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   4032c:	d8000015 	stw	zero,0(sp)
   40330:	e0bffe84 	addi	r2,fp,-6
   40334:	d8800115 	stw	r2,4(sp)
   40338:	d8000215 	stw	zero,8(sp)
   4033c:	e13fff17 	ldw	r4,-4(fp)
   40340:	000b883a 	mov	r5,zero
   40344:	01800084 	movi	r6,2
   40348:	e1fffe04 	addi	r7,fp,-8
   4034c:	004488c0 	call	4488c <alt_avalon_spi_command>

	sentwrite[1] = 109;
   40350:	00801b44 	movi	r2,109
   40354:	e0bffe45 	stb	r2,-7(fp)
	sentwrite[0] = 98 | 0x80;
   40358:	00bff884 	movi	r2,-30
   4035c:	e0bffe05 	stb	r2,-8(fp)
	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   40360:	d8000015 	stw	zero,0(sp)
   40364:	e0bffe84 	addi	r2,fp,-6
   40368:	d8800115 	stw	r2,4(sp)
   4036c:	d8000215 	stw	zero,8(sp)
   40370:	e13fff17 	ldw	r4,-4(fp)
   40374:	000b883a 	mov	r5,zero
   40378:	01800084 	movi	r6,2
   4037c:	e1fffe04 	addi	r7,fp,-8
   40380:	004488c0 	call	4488c <alt_avalon_spi_command>

	sentwrite[1] = 109;
   40384:	00801b44 	movi	r2,109
   40388:	e0bffe45 	stb	r2,-7(fp)
	sentwrite[0] = 99 | 0x80;
   4038c:	00bff8c4 	movi	r2,-29
   40390:	e0bffe05 	stb	r2,-8(fp)
	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   40394:	d8000015 	stw	zero,0(sp)
   40398:	e0bffe84 	addi	r2,fp,-6
   4039c:	d8800115 	stw	r2,4(sp)
   403a0:	d8000215 	stw	zero,8(sp)
   403a4:	e13fff17 	ldw	r4,-4(fp)
   403a8:	000b883a 	mov	r5,zero
   403ac:	01800084 	movi	r6,2
   403b0:	e1fffe04 	addi	r7,fp,-8
   403b4:	004488c0 	call	4488c <alt_avalon_spi_command>

	sentwrite[1] = 106;
   403b8:	00801a84 	movi	r2,106
   403bc:	e0bffe45 	stb	r2,-7(fp)
	sentwrite[0] = 95 | 0x80;
   403c0:	00bff7c4 	movi	r2,-33
   403c4:	e0bffe05 	stb	r2,-8(fp)
	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   403c8:	d8000015 	stw	zero,0(sp)
   403cc:	e0bffe84 	addi	r2,fp,-6
   403d0:	d8800115 	stw	r2,4(sp)
   403d4:	d8000215 	stw	zero,8(sp)
   403d8:	e13fff17 	ldw	r4,-4(fp)
   403dc:	000b883a 	mov	r5,zero
   403e0:	01800084 	movi	r6,2
   403e4:	e1fffe04 	addi	r7,fp,-8
   403e8:	004488c0 	call	4488c <alt_avalon_spi_command>

	sentwrite[1] = 1;
   403ec:	00800044 	movi	r2,1
   403f0:	e0bffe45 	stb	r2,-7(fp)
	sentwrite[0] = 117 | 0x80;
   403f4:	00bffd44 	movi	r2,-11
   403f8:	e0bffe05 	stb	r2,-8(fp)
	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   403fc:	d8000015 	stw	zero,0(sp)
   40400:	e0bffe84 	addi	r2,fp,-6
   40404:	d8800115 	stw	r2,4(sp)
   40408:	d8000215 	stw	zero,8(sp)
   4040c:	e13fff17 	ldw	r4,-4(fp)
   40410:	000b883a 	mov	r5,zero
   40414:	01800084 	movi	r6,2
   40418:	e1fffe04 	addi	r7,fp,-8
   4041c:	004488c0 	call	4488c <alt_avalon_spi_command>

	sentwrite[1] = 1;
   40420:	00800044 	movi	r2,1
   40424:	e0bffe45 	stb	r2,-7(fp)
	sentwrite[0] = 115 | 0x80;
   40428:	00bffcc4 	movi	r2,-13
   4042c:	e0bffe05 	stb	r2,-8(fp)
	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   40430:	d8000015 	stw	zero,0(sp)
   40434:	e0bffe84 	addi	r2,fp,-6
   40438:	d8800115 	stw	r2,4(sp)
   4043c:	d8000215 	stw	zero,8(sp)
   40440:	e13fff17 	ldw	r4,-4(fp)
   40444:	000b883a 	mov	r5,zero
   40448:	01800084 	movi	r6,2
   4044c:	e1fffe04 	addi	r7,fp,-8
   40450:	004488c0 	call	4488c <alt_avalon_spi_command>

	sentwrite[1] = 7;
   40454:	008001c4 	movi	r2,7
   40458:	e0bffe45 	stb	r2,-7(fp)
	sentwrite[0] = 82 | 0x80;
   4045c:	00bff484 	movi	r2,-46
   40460:	e0bffe05 	stb	r2,-8(fp)
	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   40464:	d8000015 	stw	zero,0(sp)
   40468:	e0bffe84 	addi	r2,fp,-6
   4046c:	d8800115 	stw	r2,4(sp)
   40470:	d8000215 	stw	zero,8(sp)
   40474:	e13fff17 	ldw	r4,-4(fp)
   40478:	000b883a 	mov	r5,zero
   4047c:	01800084 	movi	r6,2
   40480:	e1fffe04 	addi	r7,fp,-8
   40484:	004488c0 	call	4488c <alt_avalon_spi_command>

	//adjusting registers for optimal performance
	sentwrite[1] = 44; //req:44, valid:40-55
   40488:	00800b04 	movi	r2,44
   4048c:	e0bffe45 	stb	r2,-7(fp)
	sentwrite[0] = 103 | 0x80;
   40490:	00bff9c4 	movi	r2,-25
   40494:	e0bffe05 	stb	r2,-8(fp)
	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   40498:	d8000015 	stw	zero,0(sp)
   4049c:	e0bffe84 	addi	r2,fp,-6
   404a0:	d8800115 	stw	r2,4(sp)
   404a4:	d8000215 	stw	zero,8(sp)
   404a8:	e13fff17 	ldw	r4,-4(fp)
   404ac:	000b883a 	mov	r5,zero
   404b0:	01800084 	movi	r6,2
   404b4:	e1fffe04 	addi	r7,fp,-8
   404b8:	004488c0 	call	4488c <alt_avalon_spi_command>

	sentwrite[1] = 109; //req:109, valid:102-115
   404bc:	00801b44 	movi	r2,109
   404c0:	e0bffe45 	stb	r2,-7(fp)
	sentwrite[0] = 98 | 0x80;
   404c4:	00bff884 	movi	r2,-30
   404c8:	e0bffe05 	stb	r2,-8(fp)
	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   404cc:	d8000015 	stw	zero,0(sp)
   404d0:	e0bffe84 	addi	r2,fp,-6
   404d4:	d8800115 	stw	r2,4(sp)
   404d8:	d8000215 	stw	zero,8(sp)
   404dc:	e13fff17 	ldw	r4,-4(fp)
   404e0:	000b883a 	mov	r5,zero
   404e4:	01800084 	movi	r6,2
   404e8:	e1fffe04 	addi	r7,fp,-8
   404ec:	004488c0 	call	4488c <alt_avalon_spi_command>

	sentwrite[1] = 109; //req:109, valid:102-115
   404f0:	00801b44 	movi	r2,109
   404f4:	e0bffe45 	stb	r2,-7(fp)
	sentwrite[0] = 99 | 0x80;
   404f8:	00bff8c4 	movi	r2,-29
   404fc:	e0bffe05 	stb	r2,-8(fp)
	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   40500:	d8000015 	stw	zero,0(sp)
   40504:	e0bffe84 	addi	r2,fp,-6
   40508:	d8800115 	stw	r2,4(sp)
   4050c:	d8000215 	stw	zero,8(sp)
   40510:	e13fff17 	ldw	r4,-4(fp)
   40514:	000b883a 	mov	r5,zero
   40518:	01800084 	movi	r6,2
   4051c:	e1fffe04 	addi	r7,fp,-8
   40520:	004488c0 	call	4488c <alt_avalon_spi_command>

	//channel mode 0=16 channels; 1=8 channels; 2=4 channels; 3=2 channels
	sentwrite[1] = 2;
   40524:	00800084 	movi	r2,2
   40528:	e0bffe45 	stb	r2,-7(fp)
	sentwrite[0] = 72 | 0x80;
   4052c:	00bff204 	movi	r2,-56
   40530:	e0bffe05 	stb	r2,-8(fp)
	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   40534:	d8000015 	stw	zero,0(sp)
   40538:	e0bffe84 	addi	r2,fp,-6
   4053c:	d8800115 	stw	r2,4(sp)
   40540:	d8000215 	stw	zero,8(sp)
   40544:	e13fff17 	ldw	r4,-4(fp)
   40548:	000b883a 	mov	r5,zero
   4054c:	01800084 	movi	r6,2
   40550:	e1fffe04 	addi	r7,fp,-8
   40554:	004488c0 	call	4488c <alt_avalon_spi_command>

	//	request amount of frames
	sentwrite[1] = 100;
   40558:	00801904 	movi	r2,100
   4055c:	e0bffe45 	stb	r2,-7(fp)
	sentwrite[0] = 70 | 0x80;
   40560:	00bff184 	movi	r2,-58
   40564:	e0bffe05 	stb	r2,-8(fp)

	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   40568:	d8000015 	stw	zero,0(sp)
   4056c:	e0bffe84 	addi	r2,fp,-6
   40570:	d8800115 	stw	r2,4(sp)
   40574:	d8000215 	stw	zero,8(sp)
   40578:	e13fff17 	ldw	r4,-4(fp)
   4057c:	000b883a 	mov	r5,zero
   40580:	01800084 	movi	r6,2
   40584:	e1fffe04 	addi	r7,fp,-8
   40588:	004488c0 	call	4488c <alt_avalon_spi_command>
//
	//	training pattern 1
	sentwrite[1] = 0x01; //0b01010101
   4058c:	00800044 	movi	r2,1
   40590:	e0bffe45 	stb	r2,-7(fp)
	sentwrite[0] = 78 | 0x80;
   40594:	00bff384 	movi	r2,-50
   40598:	e0bffe05 	stb	r2,-8(fp)

	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   4059c:	d8000015 	stw	zero,0(sp)
   405a0:	e0bffe84 	addi	r2,fp,-6
   405a4:	d8800115 	stw	r2,4(sp)
   405a8:	d8000215 	stw	zero,8(sp)
   405ac:	e13fff17 	ldw	r4,-4(fp)
   405b0:	000b883a 	mov	r5,zero
   405b4:	01800084 	movi	r6,2
   405b8:	e1fffe04 	addi	r7,fp,-8
   405bc:	004488c0 	call	4488c <alt_avalon_spi_command>

	//	training pattern 2
	sentwrite[1] = 0x00;
   405c0:	e03ffe45 	stb	zero,-7(fp)
	sentwrite[0] = 79 | 0x80;
   405c4:	00bff3c4 	movi	r2,-49
   405c8:	e0bffe05 	stb	r2,-8(fp)

	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   405cc:	d8000015 	stw	zero,0(sp)
   405d0:	e0bffe84 	addi	r2,fp,-6
   405d4:	d8800115 	stw	r2,4(sp)
   405d8:	d8000215 	stw	zero,8(sp)
   405dc:	e13fff17 	ldw	r4,-4(fp)
   405e0:	000b883a 	mov	r5,zero
   405e4:	01800084 	movi	r6,2
   405e8:	e1fffe04 	addi	r7,fp,-8
   405ec:	004488c0 	call	4488c <alt_avalon_spi_command>
//
	//number of lines 1 255
	sentwrite[1] = 0x30; //0x40
   405f0:	00800c04 	movi	r2,48
   405f4:	e0bffe45 	stb	r2,-7(fp)
	sentwrite[0] = 1 | 0x80;
   405f8:	00bfe044 	movi	r2,-127
   405fc:	e0bffe05 	stb	r2,-8(fp)
	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   40600:	d8000015 	stw	zero,0(sp)
   40604:	e0bffe84 	addi	r2,fp,-6
   40608:	d8800115 	stw	r2,4(sp)
   4060c:	d8000215 	stw	zero,8(sp)
   40610:	e13fff17 	ldw	r4,-4(fp)
   40614:	000b883a 	mov	r5,zero
   40618:	01800084 	movi	r6,2
   4061c:	e1fffe04 	addi	r7,fp,-8
   40620:	004488c0 	call	4488c <alt_avalon_spi_command>

	//number of lines 2 1
	sentwrite[1] = 0x04; //0x04
   40624:	00800104 	movi	r2,4
   40628:	e0bffe45 	stb	r2,-7(fp)
	sentwrite[0] = 2 | 0x80;
   4062c:	00bfe084 	movi	r2,-126
   40630:	e0bffe05 	stb	r2,-8(fp)
	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   40634:	d8000015 	stw	zero,0(sp)
   40638:	e0bffe84 	addi	r2,fp,-6
   4063c:	d8800115 	stw	r2,4(sp)
   40640:	d8000215 	stw	zero,8(sp)
   40644:	e13fff17 	ldw	r4,-4(fp)
   40648:	000b883a 	mov	r5,zero
   4064c:	01800084 	movi	r6,2
   40650:	e1fffe04 	addi	r7,fp,-8
   40654:	004488c0 	call	4488c <alt_avalon_spi_command>
//
	//start row window 1
	sentwrite[1] = 0x00; //0x00
   40658:	e03ffe45 	stb	zero,-7(fp)
	sentwrite[0] = 3 | 0x80;
   4065c:	00bfe0c4 	movi	r2,-125
   40660:	e0bffe05 	stb	r2,-8(fp)
	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   40664:	d8000015 	stw	zero,0(sp)
   40668:	e0bffe84 	addi	r2,fp,-6
   4066c:	d8800115 	stw	r2,4(sp)
   40670:	d8000215 	stw	zero,8(sp)
   40674:	e13fff17 	ldw	r4,-4(fp)
   40678:	000b883a 	mov	r5,zero
   4067c:	01800084 	movi	r6,2
   40680:	e1fffe04 	addi	r7,fp,-8
   40684:	004488c0 	call	4488c <alt_avalon_spi_command>

	//start row window 2
	sentwrite[1] = 0x00; //0x00
   40688:	e03ffe45 	stb	zero,-7(fp)
	sentwrite[0] = 4 | 0x80;
   4068c:	00bfe104 	movi	r2,-124
   40690:	e0bffe05 	stb	r2,-8(fp)
	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   40694:	d8000015 	stw	zero,0(sp)
   40698:	e0bffe84 	addi	r2,fp,-6
   4069c:	d8800115 	stw	r2,4(sp)
   406a0:	d8000215 	stw	zero,8(sp)
   406a4:	e13fff17 	ldw	r4,-4(fp)
   406a8:	000b883a 	mov	r5,zero
   406ac:	01800084 	movi	r6,2
   406b0:	e1fffe04 	addi	r7,fp,-8
   406b4:	004488c0 	call	4488c <alt_avalon_spi_command>

	// row skip 1
	sentwrite[1] = 0x00; //0x00
   406b8:	e03ffe45 	stb	zero,-7(fp)
	sentwrite[0] = 35 | 0x80;
   406bc:	00bfe8c4 	movi	r2,-93
   406c0:	e0bffe05 	stb	r2,-8(fp)
	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   406c4:	d8000015 	stw	zero,0(sp)
   406c8:	e0bffe84 	addi	r2,fp,-6
   406cc:	d8800115 	stw	r2,4(sp)
   406d0:	d8000215 	stw	zero,8(sp)
   406d4:	e13fff17 	ldw	r4,-4(fp)
   406d8:	000b883a 	mov	r5,zero
   406dc:	01800084 	movi	r6,2
   406e0:	e1fffe04 	addi	r7,fp,-8
   406e4:	004488c0 	call	4488c <alt_avalon_spi_command>

	// row skip 2
	sentwrite[1] = 0x00; //0x00
   406e8:	e03ffe45 	stb	zero,-7(fp)
	sentwrite[0] = 37 | 0x80;
   406ec:	00bfe944 	movi	r2,-91
   406f0:	e0bffe05 	stb	r2,-8(fp)
	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   406f4:	d8000015 	stw	zero,0(sp)
   406f8:	e0bffe84 	addi	r2,fp,-6
   406fc:	d8800115 	stw	r2,4(sp)
   40700:	d8000215 	stw	zero,8(sp)
   40704:	e13fff17 	ldw	r4,-4(fp)
   40708:	000b883a 	mov	r5,zero
   4070c:	01800084 	movi	r6,2
   40710:	e1fffe04 	addi	r7,fp,-8
   40714:	004488c0 	call	4488c <alt_avalon_spi_command>


	//bit mode
	sentwrite[1] = 0x01;
   40718:	00800044 	movi	r2,1
   4071c:	e0bffe45 	stb	r2,-7(fp)
	sentwrite[0] = 111 | 0x80;
   40720:	00bffbc4 	movi	r2,-17
   40724:	e0bffe05 	stb	r2,-8(fp)
	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   40728:	d8000015 	stw	zero,0(sp)
   4072c:	e0bffe84 	addi	r2,fp,-6
   40730:	d8800115 	stw	r2,4(sp)
   40734:	d8000215 	stw	zero,8(sp)
   40738:	e13fff17 	ldw	r4,-4(fp)
   4073c:	000b883a 	mov	r5,zero
   40740:	01800084 	movi	r6,2
   40744:	e1fffe04 	addi	r7,fp,-8
   40748:	004488c0 	call	4488c <alt_avalon_spi_command>


	//	image flipping x/y
	sentwrite[1] = 0x01; //0x00
   4074c:	00800044 	movi	r2,1
   40750:	e0bffe45 	stb	r2,-7(fp)
	sentwrite[0] = 40 | 0x80;
   40754:	00bfea04 	movi	r2,-88
   40758:	e0bffe05 	stb	r2,-8(fp)
	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   4075c:	d8000015 	stw	zero,0(sp)
   40760:	e0bffe84 	addi	r2,fp,-6
   40764:	d8800115 	stw	r2,4(sp)
   40768:	d8000215 	stw	zero,8(sp)
   4076c:	e13fff17 	ldw	r4,-4(fp)
   40770:	000b883a 	mov	r5,zero
   40774:	01800084 	movi	r6,2
   40778:	e1fffe04 	addi	r7,fp,-8
   4077c:	004488c0 	call	4488c <alt_avalon_spi_command>

	//	exposure time 1
	sentwrite[1] = 0x00; //0x40
   40780:	e03ffe45 	stb	zero,-7(fp)
	sentwrite[0] = 42 | 0x80;
   40784:	00bfea84 	movi	r2,-86
   40788:	e0bffe05 	stb	r2,-8(fp)
	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   4078c:	d8000015 	stw	zero,0(sp)
   40790:	e0bffe84 	addi	r2,fp,-6
   40794:	d8800115 	stw	r2,4(sp)
   40798:	d8000215 	stw	zero,8(sp)
   4079c:	e13fff17 	ldw	r4,-4(fp)
   407a0:	000b883a 	mov	r5,zero
   407a4:	01800084 	movi	r6,2
   407a8:	e1fffe04 	addi	r7,fp,-8
   407ac:	004488c0 	call	4488c <alt_avalon_spi_command>

	//	exposure time 2
	sentwrite[1] = 0x04; //0x04
   407b0:	00800104 	movi	r2,4
   407b4:	e0bffe45 	stb	r2,-7(fp)
	sentwrite[0] = 43 | 0x80;
   407b8:	00bfeac4 	movi	r2,-85
   407bc:	e0bffe05 	stb	r2,-8(fp)
	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   407c0:	d8000015 	stw	zero,0(sp)
   407c4:	e0bffe84 	addi	r2,fp,-6
   407c8:	d8800115 	stw	r2,4(sp)
   407cc:	d8000215 	stw	zero,8(sp)
   407d0:	e13fff17 	ldw	r4,-4(fp)
   407d4:	000b883a 	mov	r5,zero
   407d8:	01800084 	movi	r6,2
   407dc:	e1fffe04 	addi	r7,fp,-8
   407e0:	004488c0 	call	4488c <alt_avalon_spi_command>

	//	exposure time 3
	sentwrite[1] = 0x00; //0x00
   407e4:	e03ffe45 	stb	zero,-7(fp)
	sentwrite[0] = 44 | 0x80;
   407e8:	00bfeb04 	movi	r2,-84
   407ec:	e0bffe05 	stb	r2,-8(fp)
	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   407f0:	d8000015 	stw	zero,0(sp)
   407f4:	e0bffe84 	addi	r2,fp,-6
   407f8:	d8800115 	stw	r2,4(sp)
   407fc:	d8000215 	stw	zero,8(sp)
   40800:	e13fff17 	ldw	r4,-4(fp)
   40804:	000b883a 	mov	r5,zero
   40808:	01800084 	movi	r6,2
   4080c:	e1fffe04 	addi	r7,fp,-8
   40810:	004488c0 	call	4488c <alt_avalon_spi_command>

}
   40814:	e037883a 	mov	sp,fp
   40818:	dfc00117 	ldw	ra,4(sp)
   4081c:	df000017 	ldw	fp,0(sp)
   40820:	dec00204 	addi	sp,sp,8
   40824:	f800283a 	ret

00040828 <main>:
#include "terasic_includes.h"
#include "altera_avalon_spi.h"
#include "camera.h"
#include "unistd.h"

int main() {
   40828:	defffb04 	addi	sp,sp,-20
   4082c:	dfc00415 	stw	ra,16(sp)
   40830:	df000315 	stw	fp,12(sp)
   40834:	df000304 	addi	fp,sp,12

	alt_u8 received1 = 0;
   40838:	e03ffec5 	stb	zero,-5(fp)
	alt_u8 received2 = 0;
   4083c:	e03ffe85 	stb	zero,-6(fp)
	alt_u8 sent = 103;
   40840:	008019c4 	movi	r2,103
   40844:	e0bffe45 	stb	r2,-7(fp)
	alt_u8 sentwrite[2];
	alt_u8 sentread = 78;
   40848:	00801384 	movi	r2,78
   4084c:	e0bffe05 	stb	r2,-8(fp)

	int counter = 0;
   40850:	e03ffd15 	stw	zero,-12(fp)


	printf("Hello from semester thesis Nios II!\n");
   40854:	01100034 	movhi	r4,16384
   40858:	21000004 	addi	r4,r4,0
   4085c:	00409980 	call	40998 <puts>
	/*
	 * pio[7] is cmv_reset_n, active low
	 * pio[6] is frame_req, active high
	 */

	usleep(10);
   40860:	01000284 	movi	r4,10
   40864:	0043b680 	call	43b68 <usleep>
	IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE, 0x00); //cmv_reset_n, low
   40868:	00804034 	movhi	r2,256
   4086c:	10801804 	addi	r2,r2,96
   40870:	10000035 	stwio	zero,0(r2)
	usleep(10);
   40874:	01000284 	movi	r4,10
   40878:	0043b680 	call	43b68 <usleep>
	IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE, 0x80); //cmv_reset_n, high
   4087c:	00c04034 	movhi	r3,256
   40880:	18c01804 	addi	r3,r3,96
   40884:	00802004 	movi	r2,128
   40888:	18800035 	stwio	r2,0(r3)

	usleep(1000);
   4088c:	0100fa04 	movi	r4,1000
   40890:	0043b680 	call	43b68 <usleep>
	//camera_init(SPI_1_BASE);
	camera_init(SPI_2_BASE);
   40894:	01004034 	movhi	r4,256
   40898:	21000804 	addi	r4,r4,32
   4089c:	00402000 	call	40200 <camera_init>
	usleep(1000);
   408a0:	0100fa04 	movi	r4,1000
   408a4:	0043b680 	call	43b68 <usleep>
	IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE, 0x80|0x40); //sets pio[6] which is connected to cmv frameRequest
   408a8:	00c04034 	movhi	r3,256
   408ac:	18c01804 	addi	r3,r3,96
   408b0:	00803004 	movi	r2,192
   408b4:	18800035 	stwio	r2,0(r3)
	usleep(1000);
   408b8:	0100fa04 	movi	r4,1000
   408bc:	0043b680 	call	43b68 <usleep>
	IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE, 0x80|0x00); //resets pio[6] which is connected to cmv frameRequest
   408c0:	00c04034 	movhi	r3,256
   408c4:	18c01804 	addi	r3,r3,96
   408c8:	00802004 	movi	r2,128
   408cc:	18800035 	stwio	r2,0(r3)
	usleep(1000);
   408d0:	0100fa04 	movi	r4,1000
   408d4:	0043b680 	call	43b68 <usleep>


	while(1) {
		IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE, 0x80|0x40); //sets pio[6] which is connected to cmv frameRequest
   408d8:	00c04034 	movhi	r3,256
   408dc:	18c01804 	addi	r3,r3,96
   408e0:	00803004 	movi	r2,192
   408e4:	18800035 	stwio	r2,0(r3)
		     *  Bit[6..0] -> address
			 */
//			alt_avalon_spi_command(SPI_2_BASE,0,1,&sentread,1,&received2,0);
//			printf("value1: %d value2: %d\n",received1,received2);

		usleep(1000000);
   408e8:	010003f4 	movhi	r4,15
   408ec:	21109004 	addi	r4,r4,16960
   408f0:	0043b680 	call	43b68 <usleep>


	}
   408f4:	003ff806 	br	408d8 <main+0xb0>

000408f8 <_puts_r>:
   408f8:	defff604 	addi	sp,sp,-40
   408fc:	dc400715 	stw	r17,28(sp)
   40900:	2023883a 	mov	r17,r4
   40904:	2809883a 	mov	r4,r5
   40908:	dfc00915 	stw	ra,36(sp)
   4090c:	dcc00815 	stw	r19,32(sp)
   40910:	2827883a 	mov	r19,r5
   40914:	00409ac0 	call	409ac <strlen>
   40918:	89400217 	ldw	r5,8(r17)
   4091c:	00d00034 	movhi	r3,16384
   40920:	18c00904 	addi	r3,r3,36
   40924:	01c00044 	movi	r7,1
   40928:	12000044 	addi	r8,r2,1
   4092c:	d8c00515 	stw	r3,20(sp)
   40930:	d9c00615 	stw	r7,24(sp)
   40934:	d8c00304 	addi	r3,sp,12
   40938:	01c00084 	movi	r7,2
   4093c:	8809883a 	mov	r4,r17
   40940:	d80d883a 	mov	r6,sp
   40944:	d8c00015 	stw	r3,0(sp)
   40948:	dcc00315 	stw	r19,12(sp)
   4094c:	da000215 	stw	r8,8(sp)
   40950:	d9c00115 	stw	r7,4(sp)
   40954:	d8800415 	stw	r2,16(sp)
   40958:	0040a200 	call	40a20 <__sfvwrite_r>
   4095c:	00ffffc4 	movi	r3,-1
   40960:	10000626 	beq	r2,zero,4097c <_puts_r+0x84>
   40964:	1805883a 	mov	r2,r3
   40968:	dfc00917 	ldw	ra,36(sp)
   4096c:	dcc00817 	ldw	r19,32(sp)
   40970:	dc400717 	ldw	r17,28(sp)
   40974:	dec00a04 	addi	sp,sp,40
   40978:	f800283a 	ret
   4097c:	00c00284 	movi	r3,10
   40980:	1805883a 	mov	r2,r3
   40984:	dfc00917 	ldw	ra,36(sp)
   40988:	dcc00817 	ldw	r19,32(sp)
   4098c:	dc400717 	ldw	r17,28(sp)
   40990:	dec00a04 	addi	sp,sp,40
   40994:	f800283a 	ret

00040998 <puts>:
   40998:	00900034 	movhi	r2,16384
   4099c:	10869a04 	addi	r2,r2,6760
   409a0:	200b883a 	mov	r5,r4
   409a4:	11000017 	ldw	r4,0(r2)
   409a8:	00408f81 	jmpi	408f8 <_puts_r>

000409ac <strlen>:
   409ac:	208000cc 	andi	r2,r4,3
   409b0:	2011883a 	mov	r8,r4
   409b4:	1000161e 	bne	r2,zero,40a10 <strlen+0x64>
   409b8:	20c00017 	ldw	r3,0(r4)
   409bc:	017fbff4 	movhi	r5,65279
   409c0:	297fbfc4 	addi	r5,r5,-257
   409c4:	01e02074 	movhi	r7,32897
   409c8:	39e02004 	addi	r7,r7,-32640
   409cc:	1945883a 	add	r2,r3,r5
   409d0:	11c4703a 	and	r2,r2,r7
   409d4:	00c6303a 	nor	r3,zero,r3
   409d8:	1886703a 	and	r3,r3,r2
   409dc:	18000c1e 	bne	r3,zero,40a10 <strlen+0x64>
   409e0:	280d883a 	mov	r6,r5
   409e4:	380b883a 	mov	r5,r7
   409e8:	21000104 	addi	r4,r4,4
   409ec:	20800017 	ldw	r2,0(r4)
   409f0:	1187883a 	add	r3,r2,r6
   409f4:	1946703a 	and	r3,r3,r5
   409f8:	0084303a 	nor	r2,zero,r2
   409fc:	10c4703a 	and	r2,r2,r3
   40a00:	103ff926 	beq	r2,zero,409e8 <strlen+0x3c>
   40a04:	20800007 	ldb	r2,0(r4)
   40a08:	10000326 	beq	r2,zero,40a18 <strlen+0x6c>
   40a0c:	21000044 	addi	r4,r4,1
   40a10:	20800007 	ldb	r2,0(r4)
   40a14:	103ffd1e 	bne	r2,zero,40a0c <strlen+0x60>
   40a18:	2205c83a 	sub	r2,r4,r8
   40a1c:	f800283a 	ret

00040a20 <__sfvwrite_r>:
   40a20:	30800217 	ldw	r2,8(r6)
   40a24:	defff504 	addi	sp,sp,-44
   40a28:	df000915 	stw	fp,36(sp)
   40a2c:	dd800715 	stw	r22,28(sp)
   40a30:	dc800315 	stw	r18,12(sp)
   40a34:	dfc00a15 	stw	ra,40(sp)
   40a38:	ddc00815 	stw	r23,32(sp)
   40a3c:	dd400615 	stw	r21,24(sp)
   40a40:	dd000515 	stw	r20,20(sp)
   40a44:	dcc00415 	stw	r19,16(sp)
   40a48:	dc400215 	stw	r17,8(sp)
   40a4c:	dc000115 	stw	r16,4(sp)
   40a50:	302d883a 	mov	r22,r6
   40a54:	2039883a 	mov	fp,r4
   40a58:	2825883a 	mov	r18,r5
   40a5c:	10001c26 	beq	r2,zero,40ad0 <__sfvwrite_r+0xb0>
   40a60:	29c0030b 	ldhu	r7,12(r5)
   40a64:	3880020c 	andi	r2,r7,8
   40a68:	10002726 	beq	r2,zero,40b08 <__sfvwrite_r+0xe8>
   40a6c:	28800417 	ldw	r2,16(r5)
   40a70:	10002526 	beq	r2,zero,40b08 <__sfvwrite_r+0xe8>
   40a74:	3880008c 	andi	r2,r7,2
   40a78:	b5400017 	ldw	r21,0(r22)
   40a7c:	10002826 	beq	r2,zero,40b20 <__sfvwrite_r+0x100>
   40a80:	0021883a 	mov	r16,zero
   40a84:	0023883a 	mov	r17,zero
   40a88:	880d883a 	mov	r6,r17
   40a8c:	e009883a 	mov	r4,fp
   40a90:	00810004 	movi	r2,1024
   40a94:	80006e26 	beq	r16,zero,40c50 <__sfvwrite_r+0x230>
   40a98:	800f883a 	mov	r7,r16
   40a9c:	91400717 	ldw	r5,28(r18)
   40aa0:	1400012e 	bgeu	r2,r16,40aa8 <__sfvwrite_r+0x88>
   40aa4:	100f883a 	mov	r7,r2
   40aa8:	90c00917 	ldw	r3,36(r18)
   40aac:	183ee83a 	callr	r3
   40ab0:	1007883a 	mov	r3,r2
   40ab4:	80a1c83a 	sub	r16,r16,r2
   40ab8:	88a3883a 	add	r17,r17,r2
   40abc:	00806d0e 	bge	zero,r2,40c74 <__sfvwrite_r+0x254>
   40ac0:	b0800217 	ldw	r2,8(r22)
   40ac4:	10c5c83a 	sub	r2,r2,r3
   40ac8:	b0800215 	stw	r2,8(r22)
   40acc:	103fee1e 	bne	r2,zero,40a88 <__sfvwrite_r+0x68>
   40ad0:	0009883a 	mov	r4,zero
   40ad4:	2005883a 	mov	r2,r4
   40ad8:	dfc00a17 	ldw	ra,40(sp)
   40adc:	df000917 	ldw	fp,36(sp)
   40ae0:	ddc00817 	ldw	r23,32(sp)
   40ae4:	dd800717 	ldw	r22,28(sp)
   40ae8:	dd400617 	ldw	r21,24(sp)
   40aec:	dd000517 	ldw	r20,20(sp)
   40af0:	dcc00417 	ldw	r19,16(sp)
   40af4:	dc800317 	ldw	r18,12(sp)
   40af8:	dc400217 	ldw	r17,8(sp)
   40afc:	dc000117 	ldw	r16,4(sp)
   40b00:	dec00b04 	addi	sp,sp,44
   40b04:	f800283a 	ret
   40b08:	0041ec40 	call	41ec4 <__swsetup_r>
   40b0c:	1000e41e 	bne	r2,zero,40ea0 <__sfvwrite_r+0x480>
   40b10:	91c0030b 	ldhu	r7,12(r18)
   40b14:	b5400017 	ldw	r21,0(r22)
   40b18:	3880008c 	andi	r2,r7,2
   40b1c:	103fd81e 	bne	r2,zero,40a80 <__sfvwrite_r+0x60>
   40b20:	3880004c 	andi	r2,r7,1
   40b24:	1005003a 	cmpeq	r2,r2,zero
   40b28:	10005726 	beq	r2,zero,40c88 <__sfvwrite_r+0x268>
   40b2c:	0029883a 	mov	r20,zero
   40b30:	002f883a 	mov	r23,zero
   40b34:	a0004226 	beq	r20,zero,40c40 <__sfvwrite_r+0x220>
   40b38:	3880800c 	andi	r2,r7,512
   40b3c:	94000217 	ldw	r16,8(r18)
   40b40:	10008b26 	beq	r2,zero,40d70 <__sfvwrite_r+0x350>
   40b44:	800d883a 	mov	r6,r16
   40b48:	a400a536 	bltu	r20,r16,40de0 <__sfvwrite_r+0x3c0>
   40b4c:	3881200c 	andi	r2,r7,1152
   40b50:	10002726 	beq	r2,zero,40bf0 <__sfvwrite_r+0x1d0>
   40b54:	90800517 	ldw	r2,20(r18)
   40b58:	92000417 	ldw	r8,16(r18)
   40b5c:	91400017 	ldw	r5,0(r18)
   40b60:	1087883a 	add	r3,r2,r2
   40b64:	1887883a 	add	r3,r3,r2
   40b68:	1808d7fa 	srli	r4,r3,31
   40b6c:	2a21c83a 	sub	r16,r5,r8
   40b70:	80800044 	addi	r2,r16,1
   40b74:	20c9883a 	add	r4,r4,r3
   40b78:	2027d07a 	srai	r19,r4,1
   40b7c:	a085883a 	add	r2,r20,r2
   40b80:	980d883a 	mov	r6,r19
   40b84:	9880022e 	bgeu	r19,r2,40b90 <__sfvwrite_r+0x170>
   40b88:	1027883a 	mov	r19,r2
   40b8c:	100d883a 	mov	r6,r2
   40b90:	3881000c 	andi	r2,r7,1024
   40b94:	1000b826 	beq	r2,zero,40e78 <__sfvwrite_r+0x458>
   40b98:	300b883a 	mov	r5,r6
   40b9c:	e009883a 	mov	r4,fp
   40ba0:	0040ebc0 	call	40ebc <_malloc_r>
   40ba4:	10003126 	beq	r2,zero,40c6c <__sfvwrite_r+0x24c>
   40ba8:	91400417 	ldw	r5,16(r18)
   40bac:	1009883a 	mov	r4,r2
   40bb0:	800d883a 	mov	r6,r16
   40bb4:	1023883a 	mov	r17,r2
   40bb8:	00416e00 	call	416e0 <memcpy>
   40bbc:	90c0030b 	ldhu	r3,12(r18)
   40bc0:	00beffc4 	movi	r2,-1025
   40bc4:	1886703a 	and	r3,r3,r2
   40bc8:	18c02014 	ori	r3,r3,128
   40bcc:	90c0030d 	sth	r3,12(r18)
   40bd0:	9c07c83a 	sub	r3,r19,r16
   40bd4:	8c05883a 	add	r2,r17,r16
   40bd8:	a00d883a 	mov	r6,r20
   40bdc:	a021883a 	mov	r16,r20
   40be0:	90800015 	stw	r2,0(r18)
   40be4:	90c00215 	stw	r3,8(r18)
   40be8:	94400415 	stw	r17,16(r18)
   40bec:	94c00515 	stw	r19,20(r18)
   40bf0:	91000017 	ldw	r4,0(r18)
   40bf4:	b80b883a 	mov	r5,r23
   40bf8:	a023883a 	mov	r17,r20
   40bfc:	00417800 	call	41780 <memmove>
   40c00:	90c00217 	ldw	r3,8(r18)
   40c04:	90800017 	ldw	r2,0(r18)
   40c08:	a027883a 	mov	r19,r20
   40c0c:	1c07c83a 	sub	r3,r3,r16
   40c10:	1405883a 	add	r2,r2,r16
   40c14:	90c00215 	stw	r3,8(r18)
   40c18:	a021883a 	mov	r16,r20
   40c1c:	90800015 	stw	r2,0(r18)
   40c20:	b0800217 	ldw	r2,8(r22)
   40c24:	1405c83a 	sub	r2,r2,r16
   40c28:	b0800215 	stw	r2,8(r22)
   40c2c:	103fa826 	beq	r2,zero,40ad0 <__sfvwrite_r+0xb0>
   40c30:	a469c83a 	sub	r20,r20,r17
   40c34:	91c0030b 	ldhu	r7,12(r18)
   40c38:	bcef883a 	add	r23,r23,r19
   40c3c:	a03fbe1e 	bne	r20,zero,40b38 <__sfvwrite_r+0x118>
   40c40:	adc00017 	ldw	r23,0(r21)
   40c44:	ad000117 	ldw	r20,4(r21)
   40c48:	ad400204 	addi	r21,r21,8
   40c4c:	003fb906 	br	40b34 <__sfvwrite_r+0x114>
   40c50:	ac400017 	ldw	r17,0(r21)
   40c54:	ac000117 	ldw	r16,4(r21)
   40c58:	ad400204 	addi	r21,r21,8
   40c5c:	003f8a06 	br	40a88 <__sfvwrite_r+0x68>
   40c60:	91400417 	ldw	r5,16(r18)
   40c64:	e009883a 	mov	r4,fp
   40c68:	004261c0 	call	4261c <_free_r>
   40c6c:	00800304 	movi	r2,12
   40c70:	e0800015 	stw	r2,0(fp)
   40c74:	9080030b 	ldhu	r2,12(r18)
   40c78:	013fffc4 	movi	r4,-1
   40c7c:	10801014 	ori	r2,r2,64
   40c80:	9080030d 	sth	r2,12(r18)
   40c84:	003f9306 	br	40ad4 <__sfvwrite_r+0xb4>
   40c88:	0027883a 	mov	r19,zero
   40c8c:	002f883a 	mov	r23,zero
   40c90:	d8000015 	stw	zero,0(sp)
   40c94:	0029883a 	mov	r20,zero
   40c98:	98001e26 	beq	r19,zero,40d14 <__sfvwrite_r+0x2f4>
   40c9c:	d8c00017 	ldw	r3,0(sp)
   40ca0:	1804c03a 	cmpne	r2,r3,zero
   40ca4:	10005e26 	beq	r2,zero,40e20 <__sfvwrite_r+0x400>
   40ca8:	9821883a 	mov	r16,r19
   40cac:	a4c0012e 	bgeu	r20,r19,40cb4 <__sfvwrite_r+0x294>
   40cb0:	a021883a 	mov	r16,r20
   40cb4:	91000017 	ldw	r4,0(r18)
   40cb8:	90800417 	ldw	r2,16(r18)
   40cbc:	91800217 	ldw	r6,8(r18)
   40cc0:	91c00517 	ldw	r7,20(r18)
   40cc4:	1100022e 	bgeu	r2,r4,40cd0 <__sfvwrite_r+0x2b0>
   40cc8:	31e3883a 	add	r17,r6,r7
   40ccc:	8c001616 	blt	r17,r16,40d28 <__sfvwrite_r+0x308>
   40cd0:	81c03816 	blt	r16,r7,40db4 <__sfvwrite_r+0x394>
   40cd4:	90c00917 	ldw	r3,36(r18)
   40cd8:	91400717 	ldw	r5,28(r18)
   40cdc:	e009883a 	mov	r4,fp
   40ce0:	b80d883a 	mov	r6,r23
   40ce4:	183ee83a 	callr	r3
   40ce8:	1023883a 	mov	r17,r2
   40cec:	00bfe10e 	bge	zero,r2,40c74 <__sfvwrite_r+0x254>
   40cf0:	a469c83a 	sub	r20,r20,r17
   40cf4:	a0001826 	beq	r20,zero,40d58 <__sfvwrite_r+0x338>
   40cf8:	b0800217 	ldw	r2,8(r22)
   40cfc:	1445c83a 	sub	r2,r2,r17
   40d00:	b0800215 	stw	r2,8(r22)
   40d04:	103f7226 	beq	r2,zero,40ad0 <__sfvwrite_r+0xb0>
   40d08:	9c67c83a 	sub	r19,r19,r17
   40d0c:	bc6f883a 	add	r23,r23,r17
   40d10:	983fe21e 	bne	r19,zero,40c9c <__sfvwrite_r+0x27c>
   40d14:	adc00017 	ldw	r23,0(r21)
   40d18:	acc00117 	ldw	r19,4(r21)
   40d1c:	ad400204 	addi	r21,r21,8
   40d20:	d8000015 	stw	zero,0(sp)
   40d24:	003fdc06 	br	40c98 <__sfvwrite_r+0x278>
   40d28:	b80b883a 	mov	r5,r23
   40d2c:	880d883a 	mov	r6,r17
   40d30:	00417800 	call	41780 <memmove>
   40d34:	90c00017 	ldw	r3,0(r18)
   40d38:	e009883a 	mov	r4,fp
   40d3c:	900b883a 	mov	r5,r18
   40d40:	1c47883a 	add	r3,r3,r17
   40d44:	90c00015 	stw	r3,0(r18)
   40d48:	00420000 	call	42000 <_fflush_r>
   40d4c:	103fc91e 	bne	r2,zero,40c74 <__sfvwrite_r+0x254>
   40d50:	a469c83a 	sub	r20,r20,r17
   40d54:	a03fe81e 	bne	r20,zero,40cf8 <__sfvwrite_r+0x2d8>
   40d58:	e009883a 	mov	r4,fp
   40d5c:	900b883a 	mov	r5,r18
   40d60:	00420000 	call	42000 <_fflush_r>
   40d64:	103fc31e 	bne	r2,zero,40c74 <__sfvwrite_r+0x254>
   40d68:	d8000015 	stw	zero,0(sp)
   40d6c:	003fe206 	br	40cf8 <__sfvwrite_r+0x2d8>
   40d70:	91000017 	ldw	r4,0(r18)
   40d74:	90800417 	ldw	r2,16(r18)
   40d78:	1100022e 	bgeu	r2,r4,40d84 <__sfvwrite_r+0x364>
   40d7c:	8023883a 	mov	r17,r16
   40d80:	85003136 	bltu	r16,r20,40e48 <__sfvwrite_r+0x428>
   40d84:	91c00517 	ldw	r7,20(r18)
   40d88:	a1c01836 	bltu	r20,r7,40dec <__sfvwrite_r+0x3cc>
   40d8c:	90c00917 	ldw	r3,36(r18)
   40d90:	91400717 	ldw	r5,28(r18)
   40d94:	e009883a 	mov	r4,fp
   40d98:	b80d883a 	mov	r6,r23
   40d9c:	183ee83a 	callr	r3
   40da0:	1021883a 	mov	r16,r2
   40da4:	00bfb30e 	bge	zero,r2,40c74 <__sfvwrite_r+0x254>
   40da8:	1023883a 	mov	r17,r2
   40dac:	1027883a 	mov	r19,r2
   40db0:	003f9b06 	br	40c20 <__sfvwrite_r+0x200>
   40db4:	b80b883a 	mov	r5,r23
   40db8:	800d883a 	mov	r6,r16
   40dbc:	00417800 	call	41780 <memmove>
   40dc0:	90c00217 	ldw	r3,8(r18)
   40dc4:	90800017 	ldw	r2,0(r18)
   40dc8:	8023883a 	mov	r17,r16
   40dcc:	1c07c83a 	sub	r3,r3,r16
   40dd0:	1405883a 	add	r2,r2,r16
   40dd4:	90c00215 	stw	r3,8(r18)
   40dd8:	90800015 	stw	r2,0(r18)
   40ddc:	003fc406 	br	40cf0 <__sfvwrite_r+0x2d0>
   40de0:	a00d883a 	mov	r6,r20
   40de4:	a021883a 	mov	r16,r20
   40de8:	003f8106 	br	40bf0 <__sfvwrite_r+0x1d0>
   40dec:	b80b883a 	mov	r5,r23
   40df0:	a00d883a 	mov	r6,r20
   40df4:	00417800 	call	41780 <memmove>
   40df8:	90c00217 	ldw	r3,8(r18)
   40dfc:	90800017 	ldw	r2,0(r18)
   40e00:	a021883a 	mov	r16,r20
   40e04:	1d07c83a 	sub	r3,r3,r20
   40e08:	1505883a 	add	r2,r2,r20
   40e0c:	a023883a 	mov	r17,r20
   40e10:	a027883a 	mov	r19,r20
   40e14:	90c00215 	stw	r3,8(r18)
   40e18:	90800015 	stw	r2,0(r18)
   40e1c:	003f8006 	br	40c20 <__sfvwrite_r+0x200>
   40e20:	b809883a 	mov	r4,r23
   40e24:	01400284 	movi	r5,10
   40e28:	980d883a 	mov	r6,r19
   40e2c:	00415fc0 	call	415fc <memchr>
   40e30:	10001726 	beq	r2,zero,40e90 <__sfvwrite_r+0x470>
   40e34:	15c5c83a 	sub	r2,r2,r23
   40e38:	15000044 	addi	r20,r2,1
   40e3c:	00800044 	movi	r2,1
   40e40:	d8800015 	stw	r2,0(sp)
   40e44:	003f9806 	br	40ca8 <__sfvwrite_r+0x288>
   40e48:	b80b883a 	mov	r5,r23
   40e4c:	800d883a 	mov	r6,r16
   40e50:	00417800 	call	41780 <memmove>
   40e54:	90c00017 	ldw	r3,0(r18)
   40e58:	e009883a 	mov	r4,fp
   40e5c:	900b883a 	mov	r5,r18
   40e60:	1c07883a 	add	r3,r3,r16
   40e64:	90c00015 	stw	r3,0(r18)
   40e68:	8027883a 	mov	r19,r16
   40e6c:	00420000 	call	42000 <_fflush_r>
   40e70:	103f6b26 	beq	r2,zero,40c20 <__sfvwrite_r+0x200>
   40e74:	003f7f06 	br	40c74 <__sfvwrite_r+0x254>
   40e78:	400b883a 	mov	r5,r8
   40e7c:	e009883a 	mov	r4,fp
   40e80:	00418600 	call	41860 <_realloc_r>
   40e84:	103f7626 	beq	r2,zero,40c60 <__sfvwrite_r+0x240>
   40e88:	1023883a 	mov	r17,r2
   40e8c:	003f5006 	br	40bd0 <__sfvwrite_r+0x1b0>
   40e90:	00c00044 	movi	r3,1
   40e94:	9d000044 	addi	r20,r19,1
   40e98:	d8c00015 	stw	r3,0(sp)
   40e9c:	003f8206 	br	40ca8 <__sfvwrite_r+0x288>
   40ea0:	9080030b 	ldhu	r2,12(r18)
   40ea4:	00c00244 	movi	r3,9
   40ea8:	013fffc4 	movi	r4,-1
   40eac:	10801014 	ori	r2,r2,64
   40eb0:	9080030d 	sth	r2,12(r18)
   40eb4:	e0c00015 	stw	r3,0(fp)
   40eb8:	003f0606 	br	40ad4 <__sfvwrite_r+0xb4>

00040ebc <_malloc_r>:
   40ebc:	defff604 	addi	sp,sp,-40
   40ec0:	28c002c4 	addi	r3,r5,11
   40ec4:	00800584 	movi	r2,22
   40ec8:	dc800215 	stw	r18,8(sp)
   40ecc:	dfc00915 	stw	ra,36(sp)
   40ed0:	df000815 	stw	fp,32(sp)
   40ed4:	ddc00715 	stw	r23,28(sp)
   40ed8:	dd800615 	stw	r22,24(sp)
   40edc:	dd400515 	stw	r21,20(sp)
   40ee0:	dd000415 	stw	r20,16(sp)
   40ee4:	dcc00315 	stw	r19,12(sp)
   40ee8:	dc400115 	stw	r17,4(sp)
   40eec:	dc000015 	stw	r16,0(sp)
   40ef0:	2025883a 	mov	r18,r4
   40ef4:	10c01236 	bltu	r2,r3,40f40 <_malloc_r+0x84>
   40ef8:	04400404 	movi	r17,16
   40efc:	8940142e 	bgeu	r17,r5,40f50 <_malloc_r+0x94>
   40f00:	00800304 	movi	r2,12
   40f04:	0007883a 	mov	r3,zero
   40f08:	90800015 	stw	r2,0(r18)
   40f0c:	1805883a 	mov	r2,r3
   40f10:	dfc00917 	ldw	ra,36(sp)
   40f14:	df000817 	ldw	fp,32(sp)
   40f18:	ddc00717 	ldw	r23,28(sp)
   40f1c:	dd800617 	ldw	r22,24(sp)
   40f20:	dd400517 	ldw	r21,20(sp)
   40f24:	dd000417 	ldw	r20,16(sp)
   40f28:	dcc00317 	ldw	r19,12(sp)
   40f2c:	dc800217 	ldw	r18,8(sp)
   40f30:	dc400117 	ldw	r17,4(sp)
   40f34:	dc000017 	ldw	r16,0(sp)
   40f38:	dec00a04 	addi	sp,sp,40
   40f3c:	f800283a 	ret
   40f40:	00bffe04 	movi	r2,-8
   40f44:	18a2703a 	and	r17,r3,r2
   40f48:	883fed16 	blt	r17,zero,40f00 <_malloc_r+0x44>
   40f4c:	897fec36 	bltu	r17,r5,40f00 <_malloc_r+0x44>
   40f50:	9009883a 	mov	r4,r18
   40f54:	004388c0 	call	4388c <__malloc_lock>
   40f58:	00807dc4 	movi	r2,503
   40f5c:	14402b2e 	bgeu	r2,r17,4100c <_malloc_r+0x150>
   40f60:	8806d27a 	srli	r3,r17,9
   40f64:	18003f1e 	bne	r3,zero,41064 <_malloc_r+0x1a8>
   40f68:	880cd0fa 	srli	r6,r17,3
   40f6c:	300490fa 	slli	r2,r6,3
   40f70:	02d00034 	movhi	r11,16384
   40f74:	5ac11604 	addi	r11,r11,1112
   40f78:	12cb883a 	add	r5,r2,r11
   40f7c:	2c000317 	ldw	r16,12(r5)
   40f80:	580f883a 	mov	r7,r11
   40f84:	2c00041e 	bne	r5,r16,40f98 <_malloc_r+0xdc>
   40f88:	00000a06 	br	40fb4 <_malloc_r+0xf8>
   40f8c:	1800860e 	bge	r3,zero,411a8 <_malloc_r+0x2ec>
   40f90:	84000317 	ldw	r16,12(r16)
   40f94:	2c000726 	beq	r5,r16,40fb4 <_malloc_r+0xf8>
   40f98:	80800117 	ldw	r2,4(r16)
   40f9c:	00ffff04 	movi	r3,-4
   40fa0:	10c8703a 	and	r4,r2,r3
   40fa4:	2447c83a 	sub	r3,r4,r17
   40fa8:	008003c4 	movi	r2,15
   40fac:	10fff70e 	bge	r2,r3,40f8c <_malloc_r+0xd0>
   40fb0:	31bfffc4 	addi	r6,r6,-1
   40fb4:	32400044 	addi	r9,r6,1
   40fb8:	02900034 	movhi	r10,16384
   40fbc:	52811804 	addi	r10,r10,1120
   40fc0:	54000217 	ldw	r16,8(r10)
   40fc4:	8280a026 	beq	r16,r10,41248 <_malloc_r+0x38c>
   40fc8:	80800117 	ldw	r2,4(r16)
   40fcc:	00ffff04 	movi	r3,-4
   40fd0:	10ca703a 	and	r5,r2,r3
   40fd4:	2c4dc83a 	sub	r6,r5,r17
   40fd8:	008003c4 	movi	r2,15
   40fdc:	11808316 	blt	r2,r6,411ec <_malloc_r+0x330>
   40fe0:	52800315 	stw	r10,12(r10)
   40fe4:	52800215 	stw	r10,8(r10)
   40fe8:	30002916 	blt	r6,zero,41090 <_malloc_r+0x1d4>
   40fec:	8147883a 	add	r3,r16,r5
   40ff0:	18800117 	ldw	r2,4(r3)
   40ff4:	9009883a 	mov	r4,r18
   40ff8:	10800054 	ori	r2,r2,1
   40ffc:	18800115 	stw	r2,4(r3)
   41000:	00438ac0 	call	438ac <__malloc_unlock>
   41004:	80c00204 	addi	r3,r16,8
   41008:	003fc006 	br	40f0c <_malloc_r+0x50>
   4100c:	02d00034 	movhi	r11,16384
   41010:	5ac11604 	addi	r11,r11,1112
   41014:	8ac5883a 	add	r2,r17,r11
   41018:	14000317 	ldw	r16,12(r2)
   4101c:	580f883a 	mov	r7,r11
   41020:	8806d0fa 	srli	r3,r17,3
   41024:	14006c26 	beq	r2,r16,411d8 <_malloc_r+0x31c>
   41028:	80c00117 	ldw	r3,4(r16)
   4102c:	00bfff04 	movi	r2,-4
   41030:	81800317 	ldw	r6,12(r16)
   41034:	1886703a 	and	r3,r3,r2
   41038:	80c7883a 	add	r3,r16,r3
   4103c:	18800117 	ldw	r2,4(r3)
   41040:	81400217 	ldw	r5,8(r16)
   41044:	9009883a 	mov	r4,r18
   41048:	10800054 	ori	r2,r2,1
   4104c:	18800115 	stw	r2,4(r3)
   41050:	31400215 	stw	r5,8(r6)
   41054:	29800315 	stw	r6,12(r5)
   41058:	00438ac0 	call	438ac <__malloc_unlock>
   4105c:	80c00204 	addi	r3,r16,8
   41060:	003faa06 	br	40f0c <_malloc_r+0x50>
   41064:	00800104 	movi	r2,4
   41068:	10c0052e 	bgeu	r2,r3,41080 <_malloc_r+0x1c4>
   4106c:	00800504 	movi	r2,20
   41070:	10c07836 	bltu	r2,r3,41254 <_malloc_r+0x398>
   41074:	198016c4 	addi	r6,r3,91
   41078:	300490fa 	slli	r2,r6,3
   4107c:	003fbc06 	br	40f70 <_malloc_r+0xb4>
   41080:	8804d1ba 	srli	r2,r17,6
   41084:	11800e04 	addi	r6,r2,56
   41088:	300490fa 	slli	r2,r6,3
   4108c:	003fb806 	br	40f70 <_malloc_r+0xb4>
   41090:	00807fc4 	movi	r2,511
   41094:	1140bb36 	bltu	r2,r5,41384 <_malloc_r+0x4c8>
   41098:	2806d0fa 	srli	r3,r5,3
   4109c:	573ffe04 	addi	fp,r10,-8
   410a0:	00800044 	movi	r2,1
   410a4:	180890fa 	slli	r4,r3,3
   410a8:	1807d0ba 	srai	r3,r3,2
   410ac:	e1c00117 	ldw	r7,4(fp)
   410b0:	5909883a 	add	r4,r11,r4
   410b4:	21400217 	ldw	r5,8(r4)
   410b8:	10c4983a 	sll	r2,r2,r3
   410bc:	81000315 	stw	r4,12(r16)
   410c0:	81400215 	stw	r5,8(r16)
   410c4:	388eb03a 	or	r7,r7,r2
   410c8:	2c000315 	stw	r16,12(r5)
   410cc:	24000215 	stw	r16,8(r4)
   410d0:	e1c00115 	stw	r7,4(fp)
   410d4:	4807883a 	mov	r3,r9
   410d8:	4800cd16 	blt	r9,zero,41410 <_malloc_r+0x554>
   410dc:	1807d0ba 	srai	r3,r3,2
   410e0:	00800044 	movi	r2,1
   410e4:	10c8983a 	sll	r4,r2,r3
   410e8:	39004436 	bltu	r7,r4,411fc <_malloc_r+0x340>
   410ec:	21c4703a 	and	r2,r4,r7
   410f0:	10000a1e 	bne	r2,zero,4111c <_malloc_r+0x260>
   410f4:	2109883a 	add	r4,r4,r4
   410f8:	00bfff04 	movi	r2,-4
   410fc:	4884703a 	and	r2,r9,r2
   41100:	3906703a 	and	r3,r7,r4
   41104:	12400104 	addi	r9,r2,4
   41108:	1800041e 	bne	r3,zero,4111c <_malloc_r+0x260>
   4110c:	2109883a 	add	r4,r4,r4
   41110:	3904703a 	and	r2,r7,r4
   41114:	4a400104 	addi	r9,r9,4
   41118:	103ffc26 	beq	r2,zero,4110c <_malloc_r+0x250>
   4111c:	480490fa 	slli	r2,r9,3
   41120:	4819883a 	mov	r12,r9
   41124:	023fff04 	movi	r8,-4
   41128:	589b883a 	add	r13,r11,r2
   4112c:	6807883a 	mov	r3,r13
   41130:	014003c4 	movi	r5,15
   41134:	1c000317 	ldw	r16,12(r3)
   41138:	1c00041e 	bne	r3,r16,4114c <_malloc_r+0x290>
   4113c:	0000a706 	br	413dc <_malloc_r+0x520>
   41140:	3000ab0e 	bge	r6,zero,413f0 <_malloc_r+0x534>
   41144:	84000317 	ldw	r16,12(r16)
   41148:	1c00a426 	beq	r3,r16,413dc <_malloc_r+0x520>
   4114c:	80800117 	ldw	r2,4(r16)
   41150:	1204703a 	and	r2,r2,r8
   41154:	144dc83a 	sub	r6,r2,r17
   41158:	29bff90e 	bge	r5,r6,41140 <_malloc_r+0x284>
   4115c:	81000317 	ldw	r4,12(r16)
   41160:	80c00217 	ldw	r3,8(r16)
   41164:	89400054 	ori	r5,r17,1
   41168:	8445883a 	add	r2,r16,r17
   4116c:	20c00215 	stw	r3,8(r4)
   41170:	19000315 	stw	r4,12(r3)
   41174:	81400115 	stw	r5,4(r16)
   41178:	1187883a 	add	r3,r2,r6
   4117c:	31000054 	ori	r4,r6,1
   41180:	50800315 	stw	r2,12(r10)
   41184:	50800215 	stw	r2,8(r10)
   41188:	19800015 	stw	r6,0(r3)
   4118c:	11000115 	stw	r4,4(r2)
   41190:	12800215 	stw	r10,8(r2)
   41194:	12800315 	stw	r10,12(r2)
   41198:	9009883a 	mov	r4,r18
   4119c:	00438ac0 	call	438ac <__malloc_unlock>
   411a0:	80c00204 	addi	r3,r16,8
   411a4:	003f5906 	br	40f0c <_malloc_r+0x50>
   411a8:	8109883a 	add	r4,r16,r4
   411ac:	20800117 	ldw	r2,4(r4)
   411b0:	80c00217 	ldw	r3,8(r16)
   411b4:	81400317 	ldw	r5,12(r16)
   411b8:	10800054 	ori	r2,r2,1
   411bc:	20800115 	stw	r2,4(r4)
   411c0:	28c00215 	stw	r3,8(r5)
   411c4:	19400315 	stw	r5,12(r3)
   411c8:	9009883a 	mov	r4,r18
   411cc:	00438ac0 	call	438ac <__malloc_unlock>
   411d0:	80c00204 	addi	r3,r16,8
   411d4:	003f4d06 	br	40f0c <_malloc_r+0x50>
   411d8:	80800204 	addi	r2,r16,8
   411dc:	14000317 	ldw	r16,12(r2)
   411e0:	143f911e 	bne	r2,r16,41028 <_malloc_r+0x16c>
   411e4:	1a400084 	addi	r9,r3,2
   411e8:	003f7306 	br	40fb8 <_malloc_r+0xfc>
   411ec:	88c00054 	ori	r3,r17,1
   411f0:	8445883a 	add	r2,r16,r17
   411f4:	80c00115 	stw	r3,4(r16)
   411f8:	003fdf06 	br	41178 <_malloc_r+0x2bc>
   411fc:	e4000217 	ldw	r16,8(fp)
   41200:	00bfff04 	movi	r2,-4
   41204:	80c00117 	ldw	r3,4(r16)
   41208:	802d883a 	mov	r22,r16
   4120c:	18aa703a 	and	r21,r3,r2
   41210:	ac401636 	bltu	r21,r17,4126c <_malloc_r+0x3b0>
   41214:	ac49c83a 	sub	r4,r21,r17
   41218:	008003c4 	movi	r2,15
   4121c:	1100130e 	bge	r2,r4,4126c <_malloc_r+0x3b0>
   41220:	88800054 	ori	r2,r17,1
   41224:	8447883a 	add	r3,r16,r17
   41228:	80800115 	stw	r2,4(r16)
   4122c:	20800054 	ori	r2,r4,1
   41230:	18800115 	stw	r2,4(r3)
   41234:	e0c00215 	stw	r3,8(fp)
   41238:	9009883a 	mov	r4,r18
   4123c:	00438ac0 	call	438ac <__malloc_unlock>
   41240:	80c00204 	addi	r3,r16,8
   41244:	003f3106 	br	40f0c <_malloc_r+0x50>
   41248:	39c00117 	ldw	r7,4(r7)
   4124c:	573ffe04 	addi	fp,r10,-8
   41250:	003fa006 	br	410d4 <_malloc_r+0x218>
   41254:	00801504 	movi	r2,84
   41258:	10c06736 	bltu	r2,r3,413f8 <_malloc_r+0x53c>
   4125c:	8804d33a 	srli	r2,r17,12
   41260:	11801b84 	addi	r6,r2,110
   41264:	300490fa 	slli	r2,r6,3
   41268:	003f4106 	br	40f70 <_malloc_r+0xb4>
   4126c:	d0a00e17 	ldw	r2,-32712(gp)
   41270:	d0e00317 	ldw	r3,-32756(gp)
   41274:	053fffc4 	movi	r20,-1
   41278:	10800404 	addi	r2,r2,16
   4127c:	88a7883a 	add	r19,r17,r2
   41280:	1d000326 	beq	r3,r20,41290 <_malloc_r+0x3d4>
   41284:	98c3ffc4 	addi	r3,r19,4095
   41288:	00bc0004 	movi	r2,-4096
   4128c:	18a6703a 	and	r19,r3,r2
   41290:	9009883a 	mov	r4,r18
   41294:	980b883a 	mov	r5,r19
   41298:	0041e540 	call	41e54 <_sbrk_r>
   4129c:	1009883a 	mov	r4,r2
   412a0:	15000426 	beq	r2,r20,412b4 <_malloc_r+0x3f8>
   412a4:	854b883a 	add	r5,r16,r21
   412a8:	1029883a 	mov	r20,r2
   412ac:	11405a2e 	bgeu	r2,r5,41418 <_malloc_r+0x55c>
   412b0:	87000c26 	beq	r16,fp,412e4 <_malloc_r+0x428>
   412b4:	e4000217 	ldw	r16,8(fp)
   412b8:	80c00117 	ldw	r3,4(r16)
   412bc:	00bfff04 	movi	r2,-4
   412c0:	1884703a 	and	r2,r3,r2
   412c4:	14400336 	bltu	r2,r17,412d4 <_malloc_r+0x418>
   412c8:	1449c83a 	sub	r4,r2,r17
   412cc:	008003c4 	movi	r2,15
   412d0:	113fd316 	blt	r2,r4,41220 <_malloc_r+0x364>
   412d4:	9009883a 	mov	r4,r18
   412d8:	00438ac0 	call	438ac <__malloc_unlock>
   412dc:	0007883a 	mov	r3,zero
   412e0:	003f0a06 	br	40f0c <_malloc_r+0x50>
   412e4:	05d00034 	movhi	r23,16384
   412e8:	bdc6b204 	addi	r23,r23,6856
   412ec:	b8800017 	ldw	r2,0(r23)
   412f0:	988d883a 	add	r6,r19,r2
   412f4:	b9800015 	stw	r6,0(r23)
   412f8:	d0e00317 	ldw	r3,-32756(gp)
   412fc:	00bfffc4 	movi	r2,-1
   41300:	18808e26 	beq	r3,r2,4153c <_malloc_r+0x680>
   41304:	2145c83a 	sub	r2,r4,r5
   41308:	3085883a 	add	r2,r6,r2
   4130c:	b8800015 	stw	r2,0(r23)
   41310:	20c001cc 	andi	r3,r4,7
   41314:	18005f1e 	bne	r3,zero,41494 <_malloc_r+0x5d8>
   41318:	000b883a 	mov	r5,zero
   4131c:	a4c5883a 	add	r2,r20,r19
   41320:	1083ffcc 	andi	r2,r2,4095
   41324:	00c40004 	movi	r3,4096
   41328:	1887c83a 	sub	r3,r3,r2
   4132c:	28e7883a 	add	r19,r5,r3
   41330:	9009883a 	mov	r4,r18
   41334:	980b883a 	mov	r5,r19
   41338:	0041e540 	call	41e54 <_sbrk_r>
   4133c:	1007883a 	mov	r3,r2
   41340:	00bfffc4 	movi	r2,-1
   41344:	18807a26 	beq	r3,r2,41530 <_malloc_r+0x674>
   41348:	1d05c83a 	sub	r2,r3,r20
   4134c:	9885883a 	add	r2,r19,r2
   41350:	10c00054 	ori	r3,r2,1
   41354:	b8800017 	ldw	r2,0(r23)
   41358:	a021883a 	mov	r16,r20
   4135c:	a0c00115 	stw	r3,4(r20)
   41360:	9885883a 	add	r2,r19,r2
   41364:	b8800015 	stw	r2,0(r23)
   41368:	e5000215 	stw	r20,8(fp)
   4136c:	b7003626 	beq	r22,fp,41448 <_malloc_r+0x58c>
   41370:	018003c4 	movi	r6,15
   41374:	35404b36 	bltu	r6,r21,414a4 <_malloc_r+0x5e8>
   41378:	00800044 	movi	r2,1
   4137c:	a0800115 	stw	r2,4(r20)
   41380:	003fcd06 	br	412b8 <_malloc_r+0x3fc>
   41384:	2808d27a 	srli	r4,r5,9
   41388:	2000371e 	bne	r4,zero,41468 <_malloc_r+0x5ac>
   4138c:	2808d0fa 	srli	r4,r5,3
   41390:	200690fa 	slli	r3,r4,3
   41394:	1ad1883a 	add	r8,r3,r11
   41398:	41800217 	ldw	r6,8(r8)
   4139c:	41805b26 	beq	r8,r6,4150c <_malloc_r+0x650>
   413a0:	30800117 	ldw	r2,4(r6)
   413a4:	00ffff04 	movi	r3,-4
   413a8:	10c4703a 	and	r2,r2,r3
   413ac:	2880022e 	bgeu	r5,r2,413b8 <_malloc_r+0x4fc>
   413b0:	31800217 	ldw	r6,8(r6)
   413b4:	41bffa1e 	bne	r8,r6,413a0 <_malloc_r+0x4e4>
   413b8:	32000317 	ldw	r8,12(r6)
   413bc:	39c00117 	ldw	r7,4(r7)
   413c0:	82000315 	stw	r8,12(r16)
   413c4:	81800215 	stw	r6,8(r16)
   413c8:	07100034 	movhi	fp,16384
   413cc:	e7011604 	addi	fp,fp,1112
   413d0:	34000315 	stw	r16,12(r6)
   413d4:	44000215 	stw	r16,8(r8)
   413d8:	003f3e06 	br	410d4 <_malloc_r+0x218>
   413dc:	63000044 	addi	r12,r12,1
   413e0:	608000cc 	andi	r2,r12,3
   413e4:	10005d26 	beq	r2,zero,4155c <_malloc_r+0x6a0>
   413e8:	18c00204 	addi	r3,r3,8
   413ec:	003f5106 	br	41134 <_malloc_r+0x278>
   413f0:	8089883a 	add	r4,r16,r2
   413f4:	003f6d06 	br	411ac <_malloc_r+0x2f0>
   413f8:	00805504 	movi	r2,340
   413fc:	10c02036 	bltu	r2,r3,41480 <_malloc_r+0x5c4>
   41400:	8804d3fa 	srli	r2,r17,15
   41404:	11801dc4 	addi	r6,r2,119
   41408:	300490fa 	slli	r2,r6,3
   4140c:	003ed806 	br	40f70 <_malloc_r+0xb4>
   41410:	48c000c4 	addi	r3,r9,3
   41414:	003f3106 	br	410dc <_malloc_r+0x220>
   41418:	05d00034 	movhi	r23,16384
   4141c:	bdc6b204 	addi	r23,r23,6856
   41420:	b8800017 	ldw	r2,0(r23)
   41424:	988d883a 	add	r6,r19,r2
   41428:	b9800015 	stw	r6,0(r23)
   4142c:	293fb21e 	bne	r5,r4,412f8 <_malloc_r+0x43c>
   41430:	2083ffcc 	andi	r2,r4,4095
   41434:	103fb01e 	bne	r2,zero,412f8 <_malloc_r+0x43c>
   41438:	e4000217 	ldw	r16,8(fp)
   4143c:	9d45883a 	add	r2,r19,r21
   41440:	10800054 	ori	r2,r2,1
   41444:	80800115 	stw	r2,4(r16)
   41448:	b8c00017 	ldw	r3,0(r23)
   4144c:	d0a00f17 	ldw	r2,-32708(gp)
   41450:	10c0012e 	bgeu	r2,r3,41458 <_malloc_r+0x59c>
   41454:	d0e00f15 	stw	r3,-32708(gp)
   41458:	d0a01017 	ldw	r2,-32704(gp)
   4145c:	10ff962e 	bgeu	r2,r3,412b8 <_malloc_r+0x3fc>
   41460:	d0e01015 	stw	r3,-32704(gp)
   41464:	003f9406 	br	412b8 <_malloc_r+0x3fc>
   41468:	00800104 	movi	r2,4
   4146c:	11001e36 	bltu	r2,r4,414e8 <_malloc_r+0x62c>
   41470:	2804d1ba 	srli	r2,r5,6
   41474:	11000e04 	addi	r4,r2,56
   41478:	200690fa 	slli	r3,r4,3
   4147c:	003fc506 	br	41394 <_malloc_r+0x4d8>
   41480:	00815504 	movi	r2,1364
   41484:	10c01d2e 	bgeu	r2,r3,414fc <_malloc_r+0x640>
   41488:	01801f84 	movi	r6,126
   4148c:	0080fc04 	movi	r2,1008
   41490:	003eb706 	br	40f70 <_malloc_r+0xb4>
   41494:	00800204 	movi	r2,8
   41498:	10cbc83a 	sub	r5,r2,r3
   4149c:	2169883a 	add	r20,r4,r5
   414a0:	003f9e06 	br	4131c <_malloc_r+0x460>
   414a4:	00bffe04 	movi	r2,-8
   414a8:	a93ffd04 	addi	r4,r21,-12
   414ac:	2088703a 	and	r4,r4,r2
   414b0:	b10b883a 	add	r5,r22,r4
   414b4:	00c00144 	movi	r3,5
   414b8:	28c00215 	stw	r3,8(r5)
   414bc:	28c00115 	stw	r3,4(r5)
   414c0:	b0800117 	ldw	r2,4(r22)
   414c4:	1080004c 	andi	r2,r2,1
   414c8:	2084b03a 	or	r2,r4,r2
   414cc:	b0800115 	stw	r2,4(r22)
   414d0:	313fdd2e 	bgeu	r6,r4,41448 <_malloc_r+0x58c>
   414d4:	b1400204 	addi	r5,r22,8
   414d8:	9009883a 	mov	r4,r18
   414dc:	004261c0 	call	4261c <_free_r>
   414e0:	e4000217 	ldw	r16,8(fp)
   414e4:	003fd806 	br	41448 <_malloc_r+0x58c>
   414e8:	00800504 	movi	r2,20
   414ec:	11001536 	bltu	r2,r4,41544 <_malloc_r+0x688>
   414f0:	210016c4 	addi	r4,r4,91
   414f4:	200690fa 	slli	r3,r4,3
   414f8:	003fa606 	br	41394 <_malloc_r+0x4d8>
   414fc:	8804d4ba 	srli	r2,r17,18
   41500:	11801f04 	addi	r6,r2,124
   41504:	300490fa 	slli	r2,r6,3
   41508:	003e9906 	br	40f70 <_malloc_r+0xb4>
   4150c:	2009d0ba 	srai	r4,r4,2
   41510:	01500034 	movhi	r5,16384
   41514:	29411604 	addi	r5,r5,1112
   41518:	00c00044 	movi	r3,1
   4151c:	28800117 	ldw	r2,4(r5)
   41520:	1906983a 	sll	r3,r3,r4
   41524:	10c4b03a 	or	r2,r2,r3
   41528:	28800115 	stw	r2,4(r5)
   4152c:	003fa306 	br	413bc <_malloc_r+0x500>
   41530:	0027883a 	mov	r19,zero
   41534:	00c00044 	movi	r3,1
   41538:	003f8606 	br	41354 <_malloc_r+0x498>
   4153c:	d1200315 	stw	r4,-32756(gp)
   41540:	003f7306 	br	41310 <_malloc_r+0x454>
   41544:	00801504 	movi	r2,84
   41548:	11001936 	bltu	r2,r4,415b0 <_malloc_r+0x6f4>
   4154c:	2804d33a 	srli	r2,r5,12
   41550:	11001b84 	addi	r4,r2,110
   41554:	200690fa 	slli	r3,r4,3
   41558:	003f8e06 	br	41394 <_malloc_r+0x4d8>
   4155c:	480b883a 	mov	r5,r9
   41560:	6807883a 	mov	r3,r13
   41564:	288000cc 	andi	r2,r5,3
   41568:	18fffe04 	addi	r3,r3,-8
   4156c:	297fffc4 	addi	r5,r5,-1
   41570:	10001526 	beq	r2,zero,415c8 <_malloc_r+0x70c>
   41574:	18800217 	ldw	r2,8(r3)
   41578:	10fffa26 	beq	r2,r3,41564 <_malloc_r+0x6a8>
   4157c:	2109883a 	add	r4,r4,r4
   41580:	393f1e36 	bltu	r7,r4,411fc <_malloc_r+0x340>
   41584:	203f1d26 	beq	r4,zero,411fc <_malloc_r+0x340>
   41588:	21c4703a 	and	r2,r4,r7
   4158c:	10000226 	beq	r2,zero,41598 <_malloc_r+0x6dc>
   41590:	6013883a 	mov	r9,r12
   41594:	003ee106 	br	4111c <_malloc_r+0x260>
   41598:	2109883a 	add	r4,r4,r4
   4159c:	3904703a 	and	r2,r7,r4
   415a0:	63000104 	addi	r12,r12,4
   415a4:	103ffc26 	beq	r2,zero,41598 <_malloc_r+0x6dc>
   415a8:	6013883a 	mov	r9,r12
   415ac:	003edb06 	br	4111c <_malloc_r+0x260>
   415b0:	00805504 	movi	r2,340
   415b4:	11000836 	bltu	r2,r4,415d8 <_malloc_r+0x71c>
   415b8:	2804d3fa 	srli	r2,r5,15
   415bc:	11001dc4 	addi	r4,r2,119
   415c0:	200690fa 	slli	r3,r4,3
   415c4:	003f7306 	br	41394 <_malloc_r+0x4d8>
   415c8:	0104303a 	nor	r2,zero,r4
   415cc:	388e703a 	and	r7,r7,r2
   415d0:	e1c00115 	stw	r7,4(fp)
   415d4:	003fe906 	br	4157c <_malloc_r+0x6c0>
   415d8:	00815504 	movi	r2,1364
   415dc:	1100032e 	bgeu	r2,r4,415ec <_malloc_r+0x730>
   415e0:	01001f84 	movi	r4,126
   415e4:	00c0fc04 	movi	r3,1008
   415e8:	003f6a06 	br	41394 <_malloc_r+0x4d8>
   415ec:	2804d4ba 	srli	r2,r5,18
   415f0:	11001f04 	addi	r4,r2,124
   415f4:	200690fa 	slli	r3,r4,3
   415f8:	003f6606 	br	41394 <_malloc_r+0x4d8>

000415fc <memchr>:
   415fc:	008000c4 	movi	r2,3
   41600:	29403fcc 	andi	r5,r5,255
   41604:	2007883a 	mov	r3,r4
   41608:	1180022e 	bgeu	r2,r6,41614 <memchr+0x18>
   4160c:	2084703a 	and	r2,r4,r2
   41610:	10000b26 	beq	r2,zero,41640 <memchr+0x44>
   41614:	313fffc4 	addi	r4,r6,-1
   41618:	3000051e 	bne	r6,zero,41630 <memchr+0x34>
   4161c:	00002c06 	br	416d0 <memchr+0xd4>
   41620:	213fffc4 	addi	r4,r4,-1
   41624:	00bfffc4 	movi	r2,-1
   41628:	18c00044 	addi	r3,r3,1
   4162c:	20802826 	beq	r4,r2,416d0 <memchr+0xd4>
   41630:	18800003 	ldbu	r2,0(r3)
   41634:	28bffa1e 	bne	r5,r2,41620 <memchr+0x24>
   41638:	1805883a 	mov	r2,r3
   4163c:	f800283a 	ret
   41640:	0011883a 	mov	r8,zero
   41644:	0007883a 	mov	r3,zero
   41648:	01c00104 	movi	r7,4
   4164c:	4004923a 	slli	r2,r8,8
   41650:	18c00044 	addi	r3,r3,1
   41654:	1151883a 	add	r8,r2,r5
   41658:	19fffc1e 	bne	r3,r7,4164c <memchr+0x50>
   4165c:	02bfbff4 	movhi	r10,65279
   41660:	52bfbfc4 	addi	r10,r10,-257
   41664:	02602074 	movhi	r9,32897
   41668:	4a602004 	addi	r9,r9,-32640
   4166c:	02c000c4 	movi	r11,3
   41670:	20800017 	ldw	r2,0(r4)
   41674:	31bfff04 	addi	r6,r6,-4
   41678:	200f883a 	mov	r7,r4
   4167c:	1204f03a 	xor	r2,r2,r8
   41680:	1287883a 	add	r3,r2,r10
   41684:	1a46703a 	and	r3,r3,r9
   41688:	0084303a 	nor	r2,zero,r2
   4168c:	10c4703a 	and	r2,r2,r3
   41690:	10000b26 	beq	r2,zero,416c0 <memchr+0xc4>
   41694:	20800003 	ldbu	r2,0(r4)
   41698:	28800f26 	beq	r5,r2,416d8 <memchr+0xdc>
   4169c:	20800043 	ldbu	r2,1(r4)
   416a0:	21c00044 	addi	r7,r4,1
   416a4:	28800c26 	beq	r5,r2,416d8 <memchr+0xdc>
   416a8:	20800083 	ldbu	r2,2(r4)
   416ac:	21c00084 	addi	r7,r4,2
   416b0:	28800926 	beq	r5,r2,416d8 <memchr+0xdc>
   416b4:	208000c3 	ldbu	r2,3(r4)
   416b8:	21c000c4 	addi	r7,r4,3
   416bc:	28800626 	beq	r5,r2,416d8 <memchr+0xdc>
   416c0:	21000104 	addi	r4,r4,4
   416c4:	59bfea36 	bltu	r11,r6,41670 <memchr+0x74>
   416c8:	2007883a 	mov	r3,r4
   416cc:	003fd106 	br	41614 <memchr+0x18>
   416d0:	0005883a 	mov	r2,zero
   416d4:	f800283a 	ret
   416d8:	3805883a 	mov	r2,r7
   416dc:	f800283a 	ret

000416e0 <memcpy>:
   416e0:	01c003c4 	movi	r7,15
   416e4:	2007883a 	mov	r3,r4
   416e8:	3980032e 	bgeu	r7,r6,416f8 <memcpy+0x18>
   416ec:	2904b03a 	or	r2,r5,r4
   416f0:	108000cc 	andi	r2,r2,3
   416f4:	10000926 	beq	r2,zero,4171c <memcpy+0x3c>
   416f8:	30000626 	beq	r6,zero,41714 <memcpy+0x34>
   416fc:	30cd883a 	add	r6,r6,r3
   41700:	28800003 	ldbu	r2,0(r5)
   41704:	29400044 	addi	r5,r5,1
   41708:	18800005 	stb	r2,0(r3)
   4170c:	18c00044 	addi	r3,r3,1
   41710:	30fffb1e 	bne	r6,r3,41700 <memcpy+0x20>
   41714:	2005883a 	mov	r2,r4
   41718:	f800283a 	ret
   4171c:	3811883a 	mov	r8,r7
   41720:	200f883a 	mov	r7,r4
   41724:	28c00017 	ldw	r3,0(r5)
   41728:	31bffc04 	addi	r6,r6,-16
   4172c:	38c00015 	stw	r3,0(r7)
   41730:	28800117 	ldw	r2,4(r5)
   41734:	38800115 	stw	r2,4(r7)
   41738:	28c00217 	ldw	r3,8(r5)
   4173c:	38c00215 	stw	r3,8(r7)
   41740:	28800317 	ldw	r2,12(r5)
   41744:	29400404 	addi	r5,r5,16
   41748:	38800315 	stw	r2,12(r7)
   4174c:	39c00404 	addi	r7,r7,16
   41750:	41bff436 	bltu	r8,r6,41724 <memcpy+0x44>
   41754:	008000c4 	movi	r2,3
   41758:	1180072e 	bgeu	r2,r6,41778 <memcpy+0x98>
   4175c:	1007883a 	mov	r3,r2
   41760:	28800017 	ldw	r2,0(r5)
   41764:	31bfff04 	addi	r6,r6,-4
   41768:	29400104 	addi	r5,r5,4
   4176c:	38800015 	stw	r2,0(r7)
   41770:	39c00104 	addi	r7,r7,4
   41774:	19bffa36 	bltu	r3,r6,41760 <memcpy+0x80>
   41778:	3807883a 	mov	r3,r7
   4177c:	003fde06 	br	416f8 <memcpy+0x18>

00041780 <memmove>:
   41780:	2807883a 	mov	r3,r5
   41784:	2011883a 	mov	r8,r4
   41788:	29000c2e 	bgeu	r5,r4,417bc <memmove+0x3c>
   4178c:	298f883a 	add	r7,r5,r6
   41790:	21c00a2e 	bgeu	r4,r7,417bc <memmove+0x3c>
   41794:	30000726 	beq	r6,zero,417b4 <memmove+0x34>
   41798:	2187883a 	add	r3,r4,r6
   4179c:	198dc83a 	sub	r6,r3,r6
   417a0:	39ffffc4 	addi	r7,r7,-1
   417a4:	38800003 	ldbu	r2,0(r7)
   417a8:	18ffffc4 	addi	r3,r3,-1
   417ac:	18800005 	stb	r2,0(r3)
   417b0:	19bffb1e 	bne	r3,r6,417a0 <memmove+0x20>
   417b4:	2005883a 	mov	r2,r4
   417b8:	f800283a 	ret
   417bc:	01c003c4 	movi	r7,15
   417c0:	39800a36 	bltu	r7,r6,417ec <memmove+0x6c>
   417c4:	303ffb26 	beq	r6,zero,417b4 <memmove+0x34>
   417c8:	400f883a 	mov	r7,r8
   417cc:	320d883a 	add	r6,r6,r8
   417d0:	28800003 	ldbu	r2,0(r5)
   417d4:	29400044 	addi	r5,r5,1
   417d8:	38800005 	stb	r2,0(r7)
   417dc:	39c00044 	addi	r7,r7,1
   417e0:	39bffb1e 	bne	r7,r6,417d0 <memmove+0x50>
   417e4:	2005883a 	mov	r2,r4
   417e8:	f800283a 	ret
   417ec:	1904b03a 	or	r2,r3,r4
   417f0:	108000cc 	andi	r2,r2,3
   417f4:	103ff31e 	bne	r2,zero,417c4 <memmove+0x44>
   417f8:	3811883a 	mov	r8,r7
   417fc:	180b883a 	mov	r5,r3
   41800:	200f883a 	mov	r7,r4
   41804:	28c00017 	ldw	r3,0(r5)
   41808:	31bffc04 	addi	r6,r6,-16
   4180c:	38c00015 	stw	r3,0(r7)
   41810:	28800117 	ldw	r2,4(r5)
   41814:	38800115 	stw	r2,4(r7)
   41818:	28c00217 	ldw	r3,8(r5)
   4181c:	38c00215 	stw	r3,8(r7)
   41820:	28800317 	ldw	r2,12(r5)
   41824:	29400404 	addi	r5,r5,16
   41828:	38800315 	stw	r2,12(r7)
   4182c:	39c00404 	addi	r7,r7,16
   41830:	41bff436 	bltu	r8,r6,41804 <memmove+0x84>
   41834:	008000c4 	movi	r2,3
   41838:	1180072e 	bgeu	r2,r6,41858 <memmove+0xd8>
   4183c:	1007883a 	mov	r3,r2
   41840:	28800017 	ldw	r2,0(r5)
   41844:	31bfff04 	addi	r6,r6,-4
   41848:	29400104 	addi	r5,r5,4
   4184c:	38800015 	stw	r2,0(r7)
   41850:	39c00104 	addi	r7,r7,4
   41854:	19bffa36 	bltu	r3,r6,41840 <memmove+0xc0>
   41858:	3811883a 	mov	r8,r7
   4185c:	003fd906 	br	417c4 <memmove+0x44>

00041860 <_realloc_r>:
   41860:	defff404 	addi	sp,sp,-48
   41864:	dd800815 	stw	r22,32(sp)
   41868:	dc800415 	stw	r18,16(sp)
   4186c:	dc400315 	stw	r17,12(sp)
   41870:	dfc00b15 	stw	ra,44(sp)
   41874:	df000a15 	stw	fp,40(sp)
   41878:	ddc00915 	stw	r23,36(sp)
   4187c:	dd400715 	stw	r21,28(sp)
   41880:	dd000615 	stw	r20,24(sp)
   41884:	dcc00515 	stw	r19,20(sp)
   41888:	dc000215 	stw	r16,8(sp)
   4188c:	2825883a 	mov	r18,r5
   41890:	3023883a 	mov	r17,r6
   41894:	202d883a 	mov	r22,r4
   41898:	2800c926 	beq	r5,zero,41bc0 <_realloc_r+0x360>
   4189c:	004388c0 	call	4388c <__malloc_lock>
   418a0:	943ffe04 	addi	r16,r18,-8
   418a4:	88c002c4 	addi	r3,r17,11
   418a8:	00800584 	movi	r2,22
   418ac:	82000117 	ldw	r8,4(r16)
   418b0:	10c01b2e 	bgeu	r2,r3,41920 <_realloc_r+0xc0>
   418b4:	00bffe04 	movi	r2,-8
   418b8:	188e703a 	and	r7,r3,r2
   418bc:	3839883a 	mov	fp,r7
   418c0:	38001a16 	blt	r7,zero,4192c <_realloc_r+0xcc>
   418c4:	e4401936 	bltu	fp,r17,4192c <_realloc_r+0xcc>
   418c8:	013fff04 	movi	r4,-4
   418cc:	4126703a 	and	r19,r8,r4
   418d0:	99c02616 	blt	r19,r7,4196c <_realloc_r+0x10c>
   418d4:	802b883a 	mov	r21,r16
   418d8:	9829883a 	mov	r20,r19
   418dc:	84000204 	addi	r16,r16,8
   418e0:	a80f883a 	mov	r7,r21
   418e4:	a70dc83a 	sub	r6,r20,fp
   418e8:	008003c4 	movi	r2,15
   418ec:	1180c136 	bltu	r2,r6,41bf4 <_realloc_r+0x394>
   418f0:	38800117 	ldw	r2,4(r7)
   418f4:	a549883a 	add	r4,r20,r21
   418f8:	1080004c 	andi	r2,r2,1
   418fc:	a084b03a 	or	r2,r20,r2
   41900:	38800115 	stw	r2,4(r7)
   41904:	20c00117 	ldw	r3,4(r4)
   41908:	18c00054 	ori	r3,r3,1
   4190c:	20c00115 	stw	r3,4(r4)
   41910:	b009883a 	mov	r4,r22
   41914:	00438ac0 	call	438ac <__malloc_unlock>
   41918:	8023883a 	mov	r17,r16
   4191c:	00000606 	br	41938 <_realloc_r+0xd8>
   41920:	01c00404 	movi	r7,16
   41924:	3839883a 	mov	fp,r7
   41928:	e47fe72e 	bgeu	fp,r17,418c8 <_realloc_r+0x68>
   4192c:	00800304 	movi	r2,12
   41930:	0023883a 	mov	r17,zero
   41934:	b0800015 	stw	r2,0(r22)
   41938:	8805883a 	mov	r2,r17
   4193c:	dfc00b17 	ldw	ra,44(sp)
   41940:	df000a17 	ldw	fp,40(sp)
   41944:	ddc00917 	ldw	r23,36(sp)
   41948:	dd800817 	ldw	r22,32(sp)
   4194c:	dd400717 	ldw	r21,28(sp)
   41950:	dd000617 	ldw	r20,24(sp)
   41954:	dcc00517 	ldw	r19,20(sp)
   41958:	dc800417 	ldw	r18,16(sp)
   4195c:	dc400317 	ldw	r17,12(sp)
   41960:	dc000217 	ldw	r16,8(sp)
   41964:	dec00c04 	addi	sp,sp,48
   41968:	f800283a 	ret
   4196c:	00900034 	movhi	r2,16384
   41970:	10811604 	addi	r2,r2,1112
   41974:	12400217 	ldw	r9,8(r2)
   41978:	84cd883a 	add	r6,r16,r19
   4197c:	802b883a 	mov	r21,r16
   41980:	3240b926 	beq	r6,r9,41c68 <_realloc_r+0x408>
   41984:	31400117 	ldw	r5,4(r6)
   41988:	00bfff84 	movi	r2,-2
   4198c:	2884703a 	and	r2,r5,r2
   41990:	1185883a 	add	r2,r2,r6
   41994:	10c00117 	ldw	r3,4(r2)
   41998:	18c0004c 	andi	r3,r3,1
   4199c:	1807003a 	cmpeq	r3,r3,zero
   419a0:	1800a326 	beq	r3,zero,41c30 <_realloc_r+0x3d0>
   419a4:	2908703a 	and	r4,r5,r4
   419a8:	9929883a 	add	r20,r19,r4
   419ac:	a1c0a30e 	bge	r20,r7,41c3c <_realloc_r+0x3dc>
   419b0:	4080004c 	andi	r2,r8,1
   419b4:	1000551e 	bne	r2,zero,41b0c <_realloc_r+0x2ac>
   419b8:	80800017 	ldw	r2,0(r16)
   419bc:	80afc83a 	sub	r23,r16,r2
   419c0:	b8c00117 	ldw	r3,4(r23)
   419c4:	00bfff04 	movi	r2,-4
   419c8:	1884703a 	and	r2,r3,r2
   419cc:	30002e26 	beq	r6,zero,41a88 <_realloc_r+0x228>
   419d0:	3240b926 	beq	r6,r9,41cb8 <_realloc_r+0x458>
   419d4:	98a9883a 	add	r20,r19,r2
   419d8:	2509883a 	add	r4,r4,r20
   419dc:	d9000015 	stw	r4,0(sp)
   419e0:	21c02a16 	blt	r4,r7,41a8c <_realloc_r+0x22c>
   419e4:	30800317 	ldw	r2,12(r6)
   419e8:	30c00217 	ldw	r3,8(r6)
   419ec:	01400904 	movi	r5,36
   419f0:	99bfff04 	addi	r6,r19,-4
   419f4:	18800315 	stw	r2,12(r3)
   419f8:	10c00215 	stw	r3,8(r2)
   419fc:	b9000317 	ldw	r4,12(r23)
   41a00:	b8800217 	ldw	r2,8(r23)
   41a04:	b82b883a 	mov	r21,r23
   41a08:	bc000204 	addi	r16,r23,8
   41a0c:	20800215 	stw	r2,8(r4)
   41a10:	11000315 	stw	r4,12(r2)
   41a14:	2980e436 	bltu	r5,r6,41da8 <_realloc_r+0x548>
   41a18:	008004c4 	movi	r2,19
   41a1c:	9009883a 	mov	r4,r18
   41a20:	8011883a 	mov	r8,r16
   41a24:	11800f2e 	bgeu	r2,r6,41a64 <_realloc_r+0x204>
   41a28:	90800017 	ldw	r2,0(r18)
   41a2c:	ba000404 	addi	r8,r23,16
   41a30:	91000204 	addi	r4,r18,8
   41a34:	b8800215 	stw	r2,8(r23)
   41a38:	90c00117 	ldw	r3,4(r18)
   41a3c:	008006c4 	movi	r2,27
   41a40:	b8c00315 	stw	r3,12(r23)
   41a44:	1180072e 	bgeu	r2,r6,41a64 <_realloc_r+0x204>
   41a48:	90c00217 	ldw	r3,8(r18)
   41a4c:	ba000604 	addi	r8,r23,24
   41a50:	91000404 	addi	r4,r18,16
   41a54:	b8c00415 	stw	r3,16(r23)
   41a58:	90800317 	ldw	r2,12(r18)
   41a5c:	b8800515 	stw	r2,20(r23)
   41a60:	3140e726 	beq	r6,r5,41e00 <_realloc_r+0x5a0>
   41a64:	20800017 	ldw	r2,0(r4)
   41a68:	dd000017 	ldw	r20,0(sp)
   41a6c:	b80f883a 	mov	r7,r23
   41a70:	40800015 	stw	r2,0(r8)
   41a74:	20c00117 	ldw	r3,4(r4)
   41a78:	40c00115 	stw	r3,4(r8)
   41a7c:	20800217 	ldw	r2,8(r4)
   41a80:	40800215 	stw	r2,8(r8)
   41a84:	003f9706 	br	418e4 <_realloc_r+0x84>
   41a88:	98a9883a 	add	r20,r19,r2
   41a8c:	a1c01f16 	blt	r20,r7,41b0c <_realloc_r+0x2ac>
   41a90:	b8c00317 	ldw	r3,12(r23)
   41a94:	b8800217 	ldw	r2,8(r23)
   41a98:	99bfff04 	addi	r6,r19,-4
   41a9c:	01400904 	movi	r5,36
   41aa0:	b82b883a 	mov	r21,r23
   41aa4:	18800215 	stw	r2,8(r3)
   41aa8:	10c00315 	stw	r3,12(r2)
   41aac:	bc000204 	addi	r16,r23,8
   41ab0:	2980c336 	bltu	r5,r6,41dc0 <_realloc_r+0x560>
   41ab4:	008004c4 	movi	r2,19
   41ab8:	9009883a 	mov	r4,r18
   41abc:	8011883a 	mov	r8,r16
   41ac0:	11800f2e 	bgeu	r2,r6,41b00 <_realloc_r+0x2a0>
   41ac4:	90800017 	ldw	r2,0(r18)
   41ac8:	ba000404 	addi	r8,r23,16
   41acc:	91000204 	addi	r4,r18,8
   41ad0:	b8800215 	stw	r2,8(r23)
   41ad4:	90c00117 	ldw	r3,4(r18)
   41ad8:	008006c4 	movi	r2,27
   41adc:	b8c00315 	stw	r3,12(r23)
   41ae0:	1180072e 	bgeu	r2,r6,41b00 <_realloc_r+0x2a0>
   41ae4:	90c00217 	ldw	r3,8(r18)
   41ae8:	ba000604 	addi	r8,r23,24
   41aec:	91000404 	addi	r4,r18,16
   41af0:	b8c00415 	stw	r3,16(r23)
   41af4:	90800317 	ldw	r2,12(r18)
   41af8:	b8800515 	stw	r2,20(r23)
   41afc:	3140c726 	beq	r6,r5,41e1c <_realloc_r+0x5bc>
   41b00:	20800017 	ldw	r2,0(r4)
   41b04:	b80f883a 	mov	r7,r23
   41b08:	003fd906 	br	41a70 <_realloc_r+0x210>
   41b0c:	880b883a 	mov	r5,r17
   41b10:	b009883a 	mov	r4,r22
   41b14:	0040ebc0 	call	40ebc <_malloc_r>
   41b18:	1023883a 	mov	r17,r2
   41b1c:	10002526 	beq	r2,zero,41bb4 <_realloc_r+0x354>
   41b20:	80800117 	ldw	r2,4(r16)
   41b24:	00ffff84 	movi	r3,-2
   41b28:	893ffe04 	addi	r4,r17,-8
   41b2c:	10c4703a 	and	r2,r2,r3
   41b30:	8085883a 	add	r2,r16,r2
   41b34:	20809526 	beq	r4,r2,41d8c <_realloc_r+0x52c>
   41b38:	99bfff04 	addi	r6,r19,-4
   41b3c:	01c00904 	movi	r7,36
   41b40:	39804536 	bltu	r7,r6,41c58 <_realloc_r+0x3f8>
   41b44:	008004c4 	movi	r2,19
   41b48:	9009883a 	mov	r4,r18
   41b4c:	880b883a 	mov	r5,r17
   41b50:	11800f2e 	bgeu	r2,r6,41b90 <_realloc_r+0x330>
   41b54:	90800017 	ldw	r2,0(r18)
   41b58:	89400204 	addi	r5,r17,8
   41b5c:	91000204 	addi	r4,r18,8
   41b60:	88800015 	stw	r2,0(r17)
   41b64:	90c00117 	ldw	r3,4(r18)
   41b68:	008006c4 	movi	r2,27
   41b6c:	88c00115 	stw	r3,4(r17)
   41b70:	1180072e 	bgeu	r2,r6,41b90 <_realloc_r+0x330>
   41b74:	90c00217 	ldw	r3,8(r18)
   41b78:	89400404 	addi	r5,r17,16
   41b7c:	91000404 	addi	r4,r18,16
   41b80:	88c00215 	stw	r3,8(r17)
   41b84:	90800317 	ldw	r2,12(r18)
   41b88:	88800315 	stw	r2,12(r17)
   41b8c:	31c09126 	beq	r6,r7,41dd4 <_realloc_r+0x574>
   41b90:	20800017 	ldw	r2,0(r4)
   41b94:	28800015 	stw	r2,0(r5)
   41b98:	20c00117 	ldw	r3,4(r4)
   41b9c:	28c00115 	stw	r3,4(r5)
   41ba0:	20800217 	ldw	r2,8(r4)
   41ba4:	28800215 	stw	r2,8(r5)
   41ba8:	900b883a 	mov	r5,r18
   41bac:	b009883a 	mov	r4,r22
   41bb0:	004261c0 	call	4261c <_free_r>
   41bb4:	b009883a 	mov	r4,r22
   41bb8:	00438ac0 	call	438ac <__malloc_unlock>
   41bbc:	003f5e06 	br	41938 <_realloc_r+0xd8>
   41bc0:	300b883a 	mov	r5,r6
   41bc4:	dfc00b17 	ldw	ra,44(sp)
   41bc8:	df000a17 	ldw	fp,40(sp)
   41bcc:	ddc00917 	ldw	r23,36(sp)
   41bd0:	dd800817 	ldw	r22,32(sp)
   41bd4:	dd400717 	ldw	r21,28(sp)
   41bd8:	dd000617 	ldw	r20,24(sp)
   41bdc:	dcc00517 	ldw	r19,20(sp)
   41be0:	dc800417 	ldw	r18,16(sp)
   41be4:	dc400317 	ldw	r17,12(sp)
   41be8:	dc000217 	ldw	r16,8(sp)
   41bec:	dec00c04 	addi	sp,sp,48
   41bf0:	0040ebc1 	jmpi	40ebc <_malloc_r>
   41bf4:	38800117 	ldw	r2,4(r7)
   41bf8:	e54b883a 	add	r5,fp,r21
   41bfc:	31000054 	ori	r4,r6,1
   41c00:	1080004c 	andi	r2,r2,1
   41c04:	1704b03a 	or	r2,r2,fp
   41c08:	38800115 	stw	r2,4(r7)
   41c0c:	29000115 	stw	r4,4(r5)
   41c10:	2987883a 	add	r3,r5,r6
   41c14:	18800117 	ldw	r2,4(r3)
   41c18:	29400204 	addi	r5,r5,8
   41c1c:	b009883a 	mov	r4,r22
   41c20:	10800054 	ori	r2,r2,1
   41c24:	18800115 	stw	r2,4(r3)
   41c28:	004261c0 	call	4261c <_free_r>
   41c2c:	003f3806 	br	41910 <_realloc_r+0xb0>
   41c30:	000d883a 	mov	r6,zero
   41c34:	0009883a 	mov	r4,zero
   41c38:	003f5d06 	br	419b0 <_realloc_r+0x150>
   41c3c:	30c00217 	ldw	r3,8(r6)
   41c40:	30800317 	ldw	r2,12(r6)
   41c44:	800f883a 	mov	r7,r16
   41c48:	84000204 	addi	r16,r16,8
   41c4c:	10c00215 	stw	r3,8(r2)
   41c50:	18800315 	stw	r2,12(r3)
   41c54:	003f2306 	br	418e4 <_realloc_r+0x84>
   41c58:	8809883a 	mov	r4,r17
   41c5c:	900b883a 	mov	r5,r18
   41c60:	00417800 	call	41780 <memmove>
   41c64:	003fd006 	br	41ba8 <_realloc_r+0x348>
   41c68:	30800117 	ldw	r2,4(r6)
   41c6c:	e0c00404 	addi	r3,fp,16
   41c70:	1108703a 	and	r4,r2,r4
   41c74:	9905883a 	add	r2,r19,r4
   41c78:	10ff4d16 	blt	r2,r3,419b0 <_realloc_r+0x150>
   41c7c:	1705c83a 	sub	r2,r2,fp
   41c80:	870b883a 	add	r5,r16,fp
   41c84:	10800054 	ori	r2,r2,1
   41c88:	28800115 	stw	r2,4(r5)
   41c8c:	80c00117 	ldw	r3,4(r16)
   41c90:	00900034 	movhi	r2,16384
   41c94:	10811604 	addi	r2,r2,1112
   41c98:	b009883a 	mov	r4,r22
   41c9c:	18c0004c 	andi	r3,r3,1
   41ca0:	e0c6b03a 	or	r3,fp,r3
   41ca4:	11400215 	stw	r5,8(r2)
   41ca8:	80c00115 	stw	r3,4(r16)
   41cac:	00438ac0 	call	438ac <__malloc_unlock>
   41cb0:	84400204 	addi	r17,r16,8
   41cb4:	003f2006 	br	41938 <_realloc_r+0xd8>
   41cb8:	98a9883a 	add	r20,r19,r2
   41cbc:	2509883a 	add	r4,r4,r20
   41cc0:	e0800404 	addi	r2,fp,16
   41cc4:	d9000115 	stw	r4,4(sp)
   41cc8:	20bf7016 	blt	r4,r2,41a8c <_realloc_r+0x22c>
   41ccc:	b8c00317 	ldw	r3,12(r23)
   41cd0:	b8800217 	ldw	r2,8(r23)
   41cd4:	99bfff04 	addi	r6,r19,-4
   41cd8:	01400904 	movi	r5,36
   41cdc:	18800215 	stw	r2,8(r3)
   41ce0:	10c00315 	stw	r3,12(r2)
   41ce4:	bc400204 	addi	r17,r23,8
   41ce8:	29804136 	bltu	r5,r6,41df0 <_realloc_r+0x590>
   41cec:	008004c4 	movi	r2,19
   41cf0:	9009883a 	mov	r4,r18
   41cf4:	880f883a 	mov	r7,r17
   41cf8:	11800f2e 	bgeu	r2,r6,41d38 <_realloc_r+0x4d8>
   41cfc:	90800017 	ldw	r2,0(r18)
   41d00:	b9c00404 	addi	r7,r23,16
   41d04:	91000204 	addi	r4,r18,8
   41d08:	b8800215 	stw	r2,8(r23)
   41d0c:	90c00117 	ldw	r3,4(r18)
   41d10:	008006c4 	movi	r2,27
   41d14:	b8c00315 	stw	r3,12(r23)
   41d18:	1180072e 	bgeu	r2,r6,41d38 <_realloc_r+0x4d8>
   41d1c:	90c00217 	ldw	r3,8(r18)
   41d20:	b9c00604 	addi	r7,r23,24
   41d24:	91000404 	addi	r4,r18,16
   41d28:	b8c00415 	stw	r3,16(r23)
   41d2c:	90800317 	ldw	r2,12(r18)
   41d30:	b8800515 	stw	r2,20(r23)
   41d34:	31404026 	beq	r6,r5,41e38 <_realloc_r+0x5d8>
   41d38:	20800017 	ldw	r2,0(r4)
   41d3c:	38800015 	stw	r2,0(r7)
   41d40:	20c00117 	ldw	r3,4(r4)
   41d44:	38c00115 	stw	r3,4(r7)
   41d48:	20800217 	ldw	r2,8(r4)
   41d4c:	38800215 	stw	r2,8(r7)
   41d50:	d8c00117 	ldw	r3,4(sp)
   41d54:	bf0b883a 	add	r5,r23,fp
   41d58:	b009883a 	mov	r4,r22
   41d5c:	1f05c83a 	sub	r2,r3,fp
   41d60:	10800054 	ori	r2,r2,1
   41d64:	28800115 	stw	r2,4(r5)
   41d68:	b8c00117 	ldw	r3,4(r23)
   41d6c:	00900034 	movhi	r2,16384
   41d70:	10811604 	addi	r2,r2,1112
   41d74:	11400215 	stw	r5,8(r2)
   41d78:	18c0004c 	andi	r3,r3,1
   41d7c:	e0c6b03a 	or	r3,fp,r3
   41d80:	b8c00115 	stw	r3,4(r23)
   41d84:	00438ac0 	call	438ac <__malloc_unlock>
   41d88:	003eeb06 	br	41938 <_realloc_r+0xd8>
   41d8c:	20800117 	ldw	r2,4(r4)
   41d90:	00ffff04 	movi	r3,-4
   41d94:	800f883a 	mov	r7,r16
   41d98:	10c4703a 	and	r2,r2,r3
   41d9c:	98a9883a 	add	r20,r19,r2
   41da0:	84000204 	addi	r16,r16,8
   41da4:	003ecf06 	br	418e4 <_realloc_r+0x84>
   41da8:	900b883a 	mov	r5,r18
   41dac:	8009883a 	mov	r4,r16
   41db0:	00417800 	call	41780 <memmove>
   41db4:	dd000017 	ldw	r20,0(sp)
   41db8:	b80f883a 	mov	r7,r23
   41dbc:	003ec906 	br	418e4 <_realloc_r+0x84>
   41dc0:	900b883a 	mov	r5,r18
   41dc4:	8009883a 	mov	r4,r16
   41dc8:	00417800 	call	41780 <memmove>
   41dcc:	b80f883a 	mov	r7,r23
   41dd0:	003ec406 	br	418e4 <_realloc_r+0x84>
   41dd4:	90c00417 	ldw	r3,16(r18)
   41dd8:	89400604 	addi	r5,r17,24
   41ddc:	91000604 	addi	r4,r18,24
   41de0:	88c00415 	stw	r3,16(r17)
   41de4:	90800517 	ldw	r2,20(r18)
   41de8:	88800515 	stw	r2,20(r17)
   41dec:	003f6806 	br	41b90 <_realloc_r+0x330>
   41df0:	900b883a 	mov	r5,r18
   41df4:	8809883a 	mov	r4,r17
   41df8:	00417800 	call	41780 <memmove>
   41dfc:	003fd406 	br	41d50 <_realloc_r+0x4f0>
   41e00:	90c00417 	ldw	r3,16(r18)
   41e04:	91000604 	addi	r4,r18,24
   41e08:	ba000804 	addi	r8,r23,32
   41e0c:	b8c00615 	stw	r3,24(r23)
   41e10:	90800517 	ldw	r2,20(r18)
   41e14:	b8800715 	stw	r2,28(r23)
   41e18:	003f1206 	br	41a64 <_realloc_r+0x204>
   41e1c:	90c00417 	ldw	r3,16(r18)
   41e20:	91000604 	addi	r4,r18,24
   41e24:	ba000804 	addi	r8,r23,32
   41e28:	b8c00615 	stw	r3,24(r23)
   41e2c:	90800517 	ldw	r2,20(r18)
   41e30:	b8800715 	stw	r2,28(r23)
   41e34:	003f3206 	br	41b00 <_realloc_r+0x2a0>
   41e38:	90c00417 	ldw	r3,16(r18)
   41e3c:	91000604 	addi	r4,r18,24
   41e40:	b9c00804 	addi	r7,r23,32
   41e44:	b8c00615 	stw	r3,24(r23)
   41e48:	90800517 	ldw	r2,20(r18)
   41e4c:	b8800715 	stw	r2,28(r23)
   41e50:	003fb906 	br	41d38 <_realloc_r+0x4d8>

00041e54 <_sbrk_r>:
   41e54:	defffd04 	addi	sp,sp,-12
   41e58:	dc000015 	stw	r16,0(sp)
   41e5c:	04100034 	movhi	r16,16384
   41e60:	8406ab04 	addi	r16,r16,6828
   41e64:	dc400115 	stw	r17,4(sp)
   41e68:	80000015 	stw	zero,0(r16)
   41e6c:	2023883a 	mov	r17,r4
   41e70:	2809883a 	mov	r4,r5
   41e74:	dfc00215 	stw	ra,8(sp)
   41e78:	0043aac0 	call	43aac <sbrk>
   41e7c:	1007883a 	mov	r3,r2
   41e80:	00bfffc4 	movi	r2,-1
   41e84:	18800626 	beq	r3,r2,41ea0 <_sbrk_r+0x4c>
   41e88:	1805883a 	mov	r2,r3
   41e8c:	dfc00217 	ldw	ra,8(sp)
   41e90:	dc400117 	ldw	r17,4(sp)
   41e94:	dc000017 	ldw	r16,0(sp)
   41e98:	dec00304 	addi	sp,sp,12
   41e9c:	f800283a 	ret
   41ea0:	80800017 	ldw	r2,0(r16)
   41ea4:	103ff826 	beq	r2,zero,41e88 <_sbrk_r+0x34>
   41ea8:	88800015 	stw	r2,0(r17)
   41eac:	1805883a 	mov	r2,r3
   41eb0:	dfc00217 	ldw	ra,8(sp)
   41eb4:	dc400117 	ldw	r17,4(sp)
   41eb8:	dc000017 	ldw	r16,0(sp)
   41ebc:	dec00304 	addi	sp,sp,12
   41ec0:	f800283a 	ret

00041ec4 <__swsetup_r>:
   41ec4:	00900034 	movhi	r2,16384
   41ec8:	10869a04 	addi	r2,r2,6760
   41ecc:	10c00017 	ldw	r3,0(r2)
   41ed0:	defffd04 	addi	sp,sp,-12
   41ed4:	dc400115 	stw	r17,4(sp)
   41ed8:	dc000015 	stw	r16,0(sp)
   41edc:	dfc00215 	stw	ra,8(sp)
   41ee0:	2023883a 	mov	r17,r4
   41ee4:	2821883a 	mov	r16,r5
   41ee8:	18000226 	beq	r3,zero,41ef4 <__swsetup_r+0x30>
   41eec:	18800e17 	ldw	r2,56(r3)
   41ef0:	10001f26 	beq	r2,zero,41f70 <__swsetup_r+0xac>
   41ef4:	8100030b 	ldhu	r4,12(r16)
   41ef8:	2080020c 	andi	r2,r4,8
   41efc:	10002826 	beq	r2,zero,41fa0 <__swsetup_r+0xdc>
   41f00:	81400417 	ldw	r5,16(r16)
   41f04:	28001d26 	beq	r5,zero,41f7c <__swsetup_r+0xb8>
   41f08:	2080004c 	andi	r2,r4,1
   41f0c:	1005003a 	cmpeq	r2,r2,zero
   41f10:	10000b26 	beq	r2,zero,41f40 <__swsetup_r+0x7c>
   41f14:	2080008c 	andi	r2,r4,2
   41f18:	10001226 	beq	r2,zero,41f64 <__swsetup_r+0xa0>
   41f1c:	0005883a 	mov	r2,zero
   41f20:	80800215 	stw	r2,8(r16)
   41f24:	28000b26 	beq	r5,zero,41f54 <__swsetup_r+0x90>
   41f28:	0005883a 	mov	r2,zero
   41f2c:	dfc00217 	ldw	ra,8(sp)
   41f30:	dc400117 	ldw	r17,4(sp)
   41f34:	dc000017 	ldw	r16,0(sp)
   41f38:	dec00304 	addi	sp,sp,12
   41f3c:	f800283a 	ret
   41f40:	80800517 	ldw	r2,20(r16)
   41f44:	80000215 	stw	zero,8(r16)
   41f48:	0085c83a 	sub	r2,zero,r2
   41f4c:	80800615 	stw	r2,24(r16)
   41f50:	283ff51e 	bne	r5,zero,41f28 <__swsetup_r+0x64>
   41f54:	2080200c 	andi	r2,r4,128
   41f58:	103ff326 	beq	r2,zero,41f28 <__swsetup_r+0x64>
   41f5c:	00bfffc4 	movi	r2,-1
   41f60:	003ff206 	br	41f2c <__swsetup_r+0x68>
   41f64:	80800517 	ldw	r2,20(r16)
   41f68:	80800215 	stw	r2,8(r16)
   41f6c:	003fed06 	br	41f24 <__swsetup_r+0x60>
   41f70:	1809883a 	mov	r4,r3
   41f74:	00422980 	call	42298 <__sinit>
   41f78:	003fde06 	br	41ef4 <__swsetup_r+0x30>
   41f7c:	20c0a00c 	andi	r3,r4,640
   41f80:	00808004 	movi	r2,512
   41f84:	18bfe026 	beq	r3,r2,41f08 <__swsetup_r+0x44>
   41f88:	8809883a 	mov	r4,r17
   41f8c:	800b883a 	mov	r5,r16
   41f90:	0042ab00 	call	42ab0 <__smakebuf_r>
   41f94:	8100030b 	ldhu	r4,12(r16)
   41f98:	81400417 	ldw	r5,16(r16)
   41f9c:	003fda06 	br	41f08 <__swsetup_r+0x44>
   41fa0:	2080040c 	andi	r2,r4,16
   41fa4:	103fed26 	beq	r2,zero,41f5c <__swsetup_r+0x98>
   41fa8:	2080010c 	andi	r2,r4,4
   41fac:	10001226 	beq	r2,zero,41ff8 <__swsetup_r+0x134>
   41fb0:	81400c17 	ldw	r5,48(r16)
   41fb4:	28000526 	beq	r5,zero,41fcc <__swsetup_r+0x108>
   41fb8:	80801004 	addi	r2,r16,64
   41fbc:	28800226 	beq	r5,r2,41fc8 <__swsetup_r+0x104>
   41fc0:	8809883a 	mov	r4,r17
   41fc4:	004261c0 	call	4261c <_free_r>
   41fc8:	80000c15 	stw	zero,48(r16)
   41fcc:	8080030b 	ldhu	r2,12(r16)
   41fd0:	81400417 	ldw	r5,16(r16)
   41fd4:	80000115 	stw	zero,4(r16)
   41fd8:	10bff6cc 	andi	r2,r2,65499
   41fdc:	8080030d 	sth	r2,12(r16)
   41fe0:	81400015 	stw	r5,0(r16)
   41fe4:	8080030b 	ldhu	r2,12(r16)
   41fe8:	10800214 	ori	r2,r2,8
   41fec:	113fffcc 	andi	r4,r2,65535
   41ff0:	8080030d 	sth	r2,12(r16)
   41ff4:	003fc306 	br	41f04 <__swsetup_r+0x40>
   41ff8:	81400417 	ldw	r5,16(r16)
   41ffc:	003ff906 	br	41fe4 <__swsetup_r+0x120>

00042000 <_fflush_r>:
   42000:	defffb04 	addi	sp,sp,-20
   42004:	dcc00315 	stw	r19,12(sp)
   42008:	dc800215 	stw	r18,8(sp)
   4200c:	dfc00415 	stw	ra,16(sp)
   42010:	dc400115 	stw	r17,4(sp)
   42014:	dc000015 	stw	r16,0(sp)
   42018:	2027883a 	mov	r19,r4
   4201c:	2825883a 	mov	r18,r5
   42020:	20000226 	beq	r4,zero,4202c <_fflush_r+0x2c>
   42024:	20800e17 	ldw	r2,56(r4)
   42028:	10005626 	beq	r2,zero,42184 <_fflush_r+0x184>
   4202c:	9100030b 	ldhu	r4,12(r18)
   42030:	20ffffcc 	andi	r3,r4,65535
   42034:	18e0001c 	xori	r3,r3,32768
   42038:	18e00004 	addi	r3,r3,-32768
   4203c:	1880020c 	andi	r2,r3,8
   42040:	1000261e 	bne	r2,zero,420dc <_fflush_r+0xdc>
   42044:	90c00117 	ldw	r3,4(r18)
   42048:	20820014 	ori	r2,r4,2048
   4204c:	9080030d 	sth	r2,12(r18)
   42050:	1009883a 	mov	r4,r2
   42054:	00c0400e 	bge	zero,r3,42158 <_fflush_r+0x158>
   42058:	92000a17 	ldw	r8,40(r18)
   4205c:	40004026 	beq	r8,zero,42160 <_fflush_r+0x160>
   42060:	2084000c 	andi	r2,r4,4096
   42064:	10005326 	beq	r2,zero,421b4 <_fflush_r+0x1b4>
   42068:	94001417 	ldw	r16,80(r18)
   4206c:	9080030b 	ldhu	r2,12(r18)
   42070:	1080010c 	andi	r2,r2,4
   42074:	1000481e 	bne	r2,zero,42198 <_fflush_r+0x198>
   42078:	91400717 	ldw	r5,28(r18)
   4207c:	9809883a 	mov	r4,r19
   42080:	800d883a 	mov	r6,r16
   42084:	000f883a 	mov	r7,zero
   42088:	403ee83a 	callr	r8
   4208c:	8080261e 	bne	r16,r2,42128 <_fflush_r+0x128>
   42090:	9080030b 	ldhu	r2,12(r18)
   42094:	91000417 	ldw	r4,16(r18)
   42098:	90000115 	stw	zero,4(r18)
   4209c:	10bdffcc 	andi	r2,r2,63487
   420a0:	10ffffcc 	andi	r3,r2,65535
   420a4:	18c4000c 	andi	r3,r3,4096
   420a8:	9080030d 	sth	r2,12(r18)
   420ac:	91000015 	stw	r4,0(r18)
   420b0:	18002b26 	beq	r3,zero,42160 <_fflush_r+0x160>
   420b4:	0007883a 	mov	r3,zero
   420b8:	1805883a 	mov	r2,r3
   420bc:	94001415 	stw	r16,80(r18)
   420c0:	dfc00417 	ldw	ra,16(sp)
   420c4:	dcc00317 	ldw	r19,12(sp)
   420c8:	dc800217 	ldw	r18,8(sp)
   420cc:	dc400117 	ldw	r17,4(sp)
   420d0:	dc000017 	ldw	r16,0(sp)
   420d4:	dec00504 	addi	sp,sp,20
   420d8:	f800283a 	ret
   420dc:	94400417 	ldw	r17,16(r18)
   420e0:	88001f26 	beq	r17,zero,42160 <_fflush_r+0x160>
   420e4:	90800017 	ldw	r2,0(r18)
   420e8:	18c000cc 	andi	r3,r3,3
   420ec:	94400015 	stw	r17,0(r18)
   420f0:	1461c83a 	sub	r16,r2,r17
   420f4:	18002526 	beq	r3,zero,4218c <_fflush_r+0x18c>
   420f8:	0005883a 	mov	r2,zero
   420fc:	90800215 	stw	r2,8(r18)
   42100:	0400170e 	bge	zero,r16,42160 <_fflush_r+0x160>
   42104:	90c00917 	ldw	r3,36(r18)
   42108:	91400717 	ldw	r5,28(r18)
   4210c:	880d883a 	mov	r6,r17
   42110:	800f883a 	mov	r7,r16
   42114:	9809883a 	mov	r4,r19
   42118:	183ee83a 	callr	r3
   4211c:	88a3883a 	add	r17,r17,r2
   42120:	80a1c83a 	sub	r16,r16,r2
   42124:	00bff616 	blt	zero,r2,42100 <_fflush_r+0x100>
   42128:	9080030b 	ldhu	r2,12(r18)
   4212c:	00ffffc4 	movi	r3,-1
   42130:	10801014 	ori	r2,r2,64
   42134:	9080030d 	sth	r2,12(r18)
   42138:	1805883a 	mov	r2,r3
   4213c:	dfc00417 	ldw	ra,16(sp)
   42140:	dcc00317 	ldw	r19,12(sp)
   42144:	dc800217 	ldw	r18,8(sp)
   42148:	dc400117 	ldw	r17,4(sp)
   4214c:	dc000017 	ldw	r16,0(sp)
   42150:	dec00504 	addi	sp,sp,20
   42154:	f800283a 	ret
   42158:	90800f17 	ldw	r2,60(r18)
   4215c:	00bfbe16 	blt	zero,r2,42058 <_fflush_r+0x58>
   42160:	0007883a 	mov	r3,zero
   42164:	1805883a 	mov	r2,r3
   42168:	dfc00417 	ldw	ra,16(sp)
   4216c:	dcc00317 	ldw	r19,12(sp)
   42170:	dc800217 	ldw	r18,8(sp)
   42174:	dc400117 	ldw	r17,4(sp)
   42178:	dc000017 	ldw	r16,0(sp)
   4217c:	dec00504 	addi	sp,sp,20
   42180:	f800283a 	ret
   42184:	00422980 	call	42298 <__sinit>
   42188:	003fa806 	br	4202c <_fflush_r+0x2c>
   4218c:	90800517 	ldw	r2,20(r18)
   42190:	90800215 	stw	r2,8(r18)
   42194:	003fda06 	br	42100 <_fflush_r+0x100>
   42198:	90800117 	ldw	r2,4(r18)
   4219c:	90c00c17 	ldw	r3,48(r18)
   421a0:	80a1c83a 	sub	r16,r16,r2
   421a4:	183fb426 	beq	r3,zero,42078 <_fflush_r+0x78>
   421a8:	90800f17 	ldw	r2,60(r18)
   421ac:	80a1c83a 	sub	r16,r16,r2
   421b0:	003fb106 	br	42078 <_fflush_r+0x78>
   421b4:	91400717 	ldw	r5,28(r18)
   421b8:	9809883a 	mov	r4,r19
   421bc:	000d883a 	mov	r6,zero
   421c0:	01c00044 	movi	r7,1
   421c4:	403ee83a 	callr	r8
   421c8:	1021883a 	mov	r16,r2
   421cc:	00bfffc4 	movi	r2,-1
   421d0:	80800226 	beq	r16,r2,421dc <_fflush_r+0x1dc>
   421d4:	92000a17 	ldw	r8,40(r18)
   421d8:	003fa406 	br	4206c <_fflush_r+0x6c>
   421dc:	98c00017 	ldw	r3,0(r19)
   421e0:	00800744 	movi	r2,29
   421e4:	18bfde26 	beq	r3,r2,42160 <_fflush_r+0x160>
   421e8:	9080030b 	ldhu	r2,12(r18)
   421ec:	8007883a 	mov	r3,r16
   421f0:	10801014 	ori	r2,r2,64
   421f4:	9080030d 	sth	r2,12(r18)
   421f8:	003fcf06 	br	42138 <_fflush_r+0x138>

000421fc <fflush>:
   421fc:	01400134 	movhi	r5,4
   42200:	29480004 	addi	r5,r5,8192
   42204:	2007883a 	mov	r3,r4
   42208:	20000526 	beq	r4,zero,42220 <fflush+0x24>
   4220c:	00900034 	movhi	r2,16384
   42210:	10869a04 	addi	r2,r2,6760
   42214:	11000017 	ldw	r4,0(r2)
   42218:	180b883a 	mov	r5,r3
   4221c:	00420001 	jmpi	42000 <_fflush_r>
   42220:	00900034 	movhi	r2,16384
   42224:	10869b04 	addi	r2,r2,6764
   42228:	11000017 	ldw	r4,0(r2)
   4222c:	00429301 	jmpi	42930 <_fwalk_reent>

00042230 <std>:
   42230:	00800134 	movhi	r2,4
   42234:	108b3704 	addi	r2,r2,11484
   42238:	20800b15 	stw	r2,44(r4)
   4223c:	00800134 	movhi	r2,4
   42240:	108b7204 	addi	r2,r2,11720
   42244:	20800815 	stw	r2,32(r4)
   42248:	00c00134 	movhi	r3,4
   4224c:	18cb5304 	addi	r3,r3,11596
   42250:	00800134 	movhi	r2,4
   42254:	108b3904 	addi	r2,r2,11492
   42258:	2140030d 	sth	r5,12(r4)
   4225c:	2180038d 	sth	r6,14(r4)
   42260:	20c00915 	stw	r3,36(r4)
   42264:	20800a15 	stw	r2,40(r4)
   42268:	20000015 	stw	zero,0(r4)
   4226c:	20000115 	stw	zero,4(r4)
   42270:	20000215 	stw	zero,8(r4)
   42274:	20000415 	stw	zero,16(r4)
   42278:	20000515 	stw	zero,20(r4)
   4227c:	20000615 	stw	zero,24(r4)
   42280:	21000715 	stw	r4,28(r4)
   42284:	f800283a 	ret

00042288 <__sfp_lock_acquire>:
   42288:	f800283a 	ret

0004228c <__sfp_lock_release>:
   4228c:	f800283a 	ret

00042290 <__sinit_lock_acquire>:
   42290:	f800283a 	ret

00042294 <__sinit_lock_release>:
   42294:	f800283a 	ret

00042298 <__sinit>:
   42298:	20800e17 	ldw	r2,56(r4)
   4229c:	defffd04 	addi	sp,sp,-12
   422a0:	dc400115 	stw	r17,4(sp)
   422a4:	dc000015 	stw	r16,0(sp)
   422a8:	dfc00215 	stw	ra,8(sp)
   422ac:	04400044 	movi	r17,1
   422b0:	01400104 	movi	r5,4
   422b4:	000d883a 	mov	r6,zero
   422b8:	2021883a 	mov	r16,r4
   422bc:	2200bb04 	addi	r8,r4,748
   422c0:	200f883a 	mov	r7,r4
   422c4:	10000526 	beq	r2,zero,422dc <__sinit+0x44>
   422c8:	dfc00217 	ldw	ra,8(sp)
   422cc:	dc400117 	ldw	r17,4(sp)
   422d0:	dc000017 	ldw	r16,0(sp)
   422d4:	dec00304 	addi	sp,sp,12
   422d8:	f800283a 	ret
   422dc:	21000117 	ldw	r4,4(r4)
   422e0:	00800134 	movhi	r2,4
   422e4:	1088df04 	addi	r2,r2,9084
   422e8:	00c000c4 	movi	r3,3
   422ec:	80800f15 	stw	r2,60(r16)
   422f0:	80c0b915 	stw	r3,740(r16)
   422f4:	8200ba15 	stw	r8,744(r16)
   422f8:	84400e15 	stw	r17,56(r16)
   422fc:	8000b815 	stw	zero,736(r16)
   42300:	00422300 	call	42230 <std>
   42304:	81000217 	ldw	r4,8(r16)
   42308:	880d883a 	mov	r6,r17
   4230c:	800f883a 	mov	r7,r16
   42310:	01400284 	movi	r5,10
   42314:	00422300 	call	42230 <std>
   42318:	81000317 	ldw	r4,12(r16)
   4231c:	800f883a 	mov	r7,r16
   42320:	01400484 	movi	r5,18
   42324:	01800084 	movi	r6,2
   42328:	dfc00217 	ldw	ra,8(sp)
   4232c:	dc400117 	ldw	r17,4(sp)
   42330:	dc000017 	ldw	r16,0(sp)
   42334:	dec00304 	addi	sp,sp,12
   42338:	00422301 	jmpi	42230 <std>

0004233c <__fp_lock>:
   4233c:	0005883a 	mov	r2,zero
   42340:	f800283a 	ret

00042344 <__fp_unlock>:
   42344:	0005883a 	mov	r2,zero
   42348:	f800283a 	ret

0004234c <__fp_unlock_all>:
   4234c:	00900034 	movhi	r2,16384
   42350:	10869a04 	addi	r2,r2,6760
   42354:	11000017 	ldw	r4,0(r2)
   42358:	01400134 	movhi	r5,4
   4235c:	2948d104 	addi	r5,r5,9028
   42360:	00429f81 	jmpi	429f8 <_fwalk>

00042364 <__fp_lock_all>:
   42364:	00900034 	movhi	r2,16384
   42368:	10869a04 	addi	r2,r2,6760
   4236c:	11000017 	ldw	r4,0(r2)
   42370:	01400134 	movhi	r5,4
   42374:	2948cf04 	addi	r5,r5,9020
   42378:	00429f81 	jmpi	429f8 <_fwalk>

0004237c <_cleanup_r>:
   4237c:	01400134 	movhi	r5,4
   42380:	294c0804 	addi	r5,r5,12320
   42384:	00429f81 	jmpi	429f8 <_fwalk>

00042388 <_cleanup>:
   42388:	00900034 	movhi	r2,16384
   4238c:	10869b04 	addi	r2,r2,6764
   42390:	11000017 	ldw	r4,0(r2)
   42394:	004237c1 	jmpi	4237c <_cleanup_r>

00042398 <__sfmoreglue>:
   42398:	defffc04 	addi	sp,sp,-16
   4239c:	dc400115 	stw	r17,4(sp)
   423a0:	2c401724 	muli	r17,r5,92
   423a4:	dc800215 	stw	r18,8(sp)
   423a8:	2825883a 	mov	r18,r5
   423ac:	89400304 	addi	r5,r17,12
   423b0:	dc000015 	stw	r16,0(sp)
   423b4:	dfc00315 	stw	ra,12(sp)
   423b8:	0040ebc0 	call	40ebc <_malloc_r>
   423bc:	0021883a 	mov	r16,zero
   423c0:	880d883a 	mov	r6,r17
   423c4:	000b883a 	mov	r5,zero
   423c8:	10000626 	beq	r2,zero,423e4 <__sfmoreglue+0x4c>
   423cc:	11000304 	addi	r4,r2,12
   423d0:	14800115 	stw	r18,4(r2)
   423d4:	10000015 	stw	zero,0(r2)
   423d8:	11000215 	stw	r4,8(r2)
   423dc:	1021883a 	mov	r16,r2
   423e0:	0042c440 	call	42c44 <memset>
   423e4:	8005883a 	mov	r2,r16
   423e8:	dfc00317 	ldw	ra,12(sp)
   423ec:	dc800217 	ldw	r18,8(sp)
   423f0:	dc400117 	ldw	r17,4(sp)
   423f4:	dc000017 	ldw	r16,0(sp)
   423f8:	dec00404 	addi	sp,sp,16
   423fc:	f800283a 	ret

00042400 <__sfp>:
   42400:	defffd04 	addi	sp,sp,-12
   42404:	00900034 	movhi	r2,16384
   42408:	10869b04 	addi	r2,r2,6764
   4240c:	dc000015 	stw	r16,0(sp)
   42410:	14000017 	ldw	r16,0(r2)
   42414:	dc400115 	stw	r17,4(sp)
   42418:	dfc00215 	stw	ra,8(sp)
   4241c:	80800e17 	ldw	r2,56(r16)
   42420:	2023883a 	mov	r17,r4
   42424:	10002626 	beq	r2,zero,424c0 <__sfp+0xc0>
   42428:	8400b804 	addi	r16,r16,736
   4242c:	80800117 	ldw	r2,4(r16)
   42430:	81000217 	ldw	r4,8(r16)
   42434:	10ffffc4 	addi	r3,r2,-1
   42438:	18000916 	blt	r3,zero,42460 <__sfp+0x60>
   4243c:	2080030f 	ldh	r2,12(r4)
   42440:	10000b26 	beq	r2,zero,42470 <__sfp+0x70>
   42444:	017fffc4 	movi	r5,-1
   42448:	00000206 	br	42454 <__sfp+0x54>
   4244c:	2080030f 	ldh	r2,12(r4)
   42450:	10000726 	beq	r2,zero,42470 <__sfp+0x70>
   42454:	18ffffc4 	addi	r3,r3,-1
   42458:	21001704 	addi	r4,r4,92
   4245c:	197ffb1e 	bne	r3,r5,4244c <__sfp+0x4c>
   42460:	80800017 	ldw	r2,0(r16)
   42464:	10001926 	beq	r2,zero,424cc <__sfp+0xcc>
   42468:	1021883a 	mov	r16,r2
   4246c:	003fef06 	br	4242c <__sfp+0x2c>
   42470:	00bfffc4 	movi	r2,-1
   42474:	00c00044 	movi	r3,1
   42478:	2080038d 	sth	r2,14(r4)
   4247c:	20c0030d 	sth	r3,12(r4)
   42480:	20000015 	stw	zero,0(r4)
   42484:	20000215 	stw	zero,8(r4)
   42488:	20000115 	stw	zero,4(r4)
   4248c:	20000415 	stw	zero,16(r4)
   42490:	20000515 	stw	zero,20(r4)
   42494:	20000615 	stw	zero,24(r4)
   42498:	20000c15 	stw	zero,48(r4)
   4249c:	20000d15 	stw	zero,52(r4)
   424a0:	20001115 	stw	zero,68(r4)
   424a4:	20001215 	stw	zero,72(r4)
   424a8:	2005883a 	mov	r2,r4
   424ac:	dfc00217 	ldw	ra,8(sp)
   424b0:	dc400117 	ldw	r17,4(sp)
   424b4:	dc000017 	ldw	r16,0(sp)
   424b8:	dec00304 	addi	sp,sp,12
   424bc:	f800283a 	ret
   424c0:	8009883a 	mov	r4,r16
   424c4:	00422980 	call	42298 <__sinit>
   424c8:	003fd706 	br	42428 <__sfp+0x28>
   424cc:	8809883a 	mov	r4,r17
   424d0:	01400104 	movi	r5,4
   424d4:	00423980 	call	42398 <__sfmoreglue>
   424d8:	80800015 	stw	r2,0(r16)
   424dc:	103fe21e 	bne	r2,zero,42468 <__sfp+0x68>
   424e0:	00800304 	movi	r2,12
   424e4:	0009883a 	mov	r4,zero
   424e8:	88800015 	stw	r2,0(r17)
   424ec:	003fee06 	br	424a8 <__sfp+0xa8>

000424f0 <_malloc_trim_r>:
   424f0:	defffb04 	addi	sp,sp,-20
   424f4:	dcc00315 	stw	r19,12(sp)
   424f8:	04d00034 	movhi	r19,16384
   424fc:	9cc11604 	addi	r19,r19,1112
   42500:	dc800215 	stw	r18,8(sp)
   42504:	dc400115 	stw	r17,4(sp)
   42508:	dc000015 	stw	r16,0(sp)
   4250c:	2823883a 	mov	r17,r5
   42510:	2025883a 	mov	r18,r4
   42514:	dfc00415 	stw	ra,16(sp)
   42518:	004388c0 	call	4388c <__malloc_lock>
   4251c:	98800217 	ldw	r2,8(r19)
   42520:	9009883a 	mov	r4,r18
   42524:	000b883a 	mov	r5,zero
   42528:	10c00117 	ldw	r3,4(r2)
   4252c:	00bfff04 	movi	r2,-4
   42530:	18a0703a 	and	r16,r3,r2
   42534:	8463c83a 	sub	r17,r16,r17
   42538:	8c43fbc4 	addi	r17,r17,4079
   4253c:	8822d33a 	srli	r17,r17,12
   42540:	0083ffc4 	movi	r2,4095
   42544:	8c7fffc4 	addi	r17,r17,-1
   42548:	8822933a 	slli	r17,r17,12
   4254c:	1440060e 	bge	r2,r17,42568 <_malloc_trim_r+0x78>
   42550:	0041e540 	call	41e54 <_sbrk_r>
   42554:	98c00217 	ldw	r3,8(r19)
   42558:	9009883a 	mov	r4,r18
   4255c:	044bc83a 	sub	r5,zero,r17
   42560:	80c7883a 	add	r3,r16,r3
   42564:	10c00926 	beq	r2,r3,4258c <_malloc_trim_r+0x9c>
   42568:	00438ac0 	call	438ac <__malloc_unlock>
   4256c:	0005883a 	mov	r2,zero
   42570:	dfc00417 	ldw	ra,16(sp)
   42574:	dcc00317 	ldw	r19,12(sp)
   42578:	dc800217 	ldw	r18,8(sp)
   4257c:	dc400117 	ldw	r17,4(sp)
   42580:	dc000017 	ldw	r16,0(sp)
   42584:	dec00504 	addi	sp,sp,20
   42588:	f800283a 	ret
   4258c:	9009883a 	mov	r4,r18
   42590:	0041e540 	call	41e54 <_sbrk_r>
   42594:	844dc83a 	sub	r6,r16,r17
   42598:	00ffffc4 	movi	r3,-1
   4259c:	9009883a 	mov	r4,r18
   425a0:	000b883a 	mov	r5,zero
   425a4:	01d00034 	movhi	r7,16384
   425a8:	39c6b204 	addi	r7,r7,6856
   425ac:	31800054 	ori	r6,r6,1
   425b0:	10c00926 	beq	r2,r3,425d8 <_malloc_trim_r+0xe8>
   425b4:	38800017 	ldw	r2,0(r7)
   425b8:	98c00217 	ldw	r3,8(r19)
   425bc:	9009883a 	mov	r4,r18
   425c0:	1445c83a 	sub	r2,r2,r17
   425c4:	38800015 	stw	r2,0(r7)
   425c8:	19800115 	stw	r6,4(r3)
   425cc:	00438ac0 	call	438ac <__malloc_unlock>
   425d0:	00800044 	movi	r2,1
   425d4:	003fe606 	br	42570 <_malloc_trim_r+0x80>
   425d8:	0041e540 	call	41e54 <_sbrk_r>
   425dc:	99800217 	ldw	r6,8(r19)
   425e0:	100f883a 	mov	r7,r2
   425e4:	9009883a 	mov	r4,r18
   425e8:	1187c83a 	sub	r3,r2,r6
   425ec:	008003c4 	movi	r2,15
   425f0:	19400054 	ori	r5,r3,1
   425f4:	10ffdc0e 	bge	r2,r3,42568 <_malloc_trim_r+0x78>
   425f8:	00900034 	movhi	r2,16384
   425fc:	10869d04 	addi	r2,r2,6772
   42600:	10c00017 	ldw	r3,0(r2)
   42604:	00900034 	movhi	r2,16384
   42608:	1086b204 	addi	r2,r2,6856
   4260c:	31400115 	stw	r5,4(r6)
   42610:	38c7c83a 	sub	r3,r7,r3
   42614:	10c00015 	stw	r3,0(r2)
   42618:	003fd306 	br	42568 <_malloc_trim_r+0x78>

0004261c <_free_r>:
   4261c:	defffd04 	addi	sp,sp,-12
   42620:	dc400115 	stw	r17,4(sp)
   42624:	dc000015 	stw	r16,0(sp)
   42628:	dfc00215 	stw	ra,8(sp)
   4262c:	2821883a 	mov	r16,r5
   42630:	2023883a 	mov	r17,r4
   42634:	28005a26 	beq	r5,zero,427a0 <_free_r+0x184>
   42638:	004388c0 	call	4388c <__malloc_lock>
   4263c:	823ffe04 	addi	r8,r16,-8
   42640:	41400117 	ldw	r5,4(r8)
   42644:	00bfff84 	movi	r2,-2
   42648:	02900034 	movhi	r10,16384
   4264c:	52811604 	addi	r10,r10,1112
   42650:	288e703a 	and	r7,r5,r2
   42654:	41cd883a 	add	r6,r8,r7
   42658:	30c00117 	ldw	r3,4(r6)
   4265c:	51000217 	ldw	r4,8(r10)
   42660:	00bfff04 	movi	r2,-4
   42664:	1892703a 	and	r9,r3,r2
   42668:	5017883a 	mov	r11,r10
   4266c:	31006726 	beq	r6,r4,4280c <_free_r+0x1f0>
   42670:	2880004c 	andi	r2,r5,1
   42674:	1005003a 	cmpeq	r2,r2,zero
   42678:	32400115 	stw	r9,4(r6)
   4267c:	10001a1e 	bne	r2,zero,426e8 <_free_r+0xcc>
   42680:	000b883a 	mov	r5,zero
   42684:	3247883a 	add	r3,r6,r9
   42688:	18800117 	ldw	r2,4(r3)
   4268c:	1080004c 	andi	r2,r2,1
   42690:	1000231e 	bne	r2,zero,42720 <_free_r+0x104>
   42694:	280ac03a 	cmpne	r5,r5,zero
   42698:	3a4f883a 	add	r7,r7,r9
   4269c:	2800451e 	bne	r5,zero,427b4 <_free_r+0x198>
   426a0:	31000217 	ldw	r4,8(r6)
   426a4:	00900034 	movhi	r2,16384
   426a8:	10811804 	addi	r2,r2,1120
   426ac:	20807b26 	beq	r4,r2,4289c <_free_r+0x280>
   426b0:	30800317 	ldw	r2,12(r6)
   426b4:	3a07883a 	add	r3,r7,r8
   426b8:	19c00015 	stw	r7,0(r3)
   426bc:	11000215 	stw	r4,8(r2)
   426c0:	20800315 	stw	r2,12(r4)
   426c4:	38800054 	ori	r2,r7,1
   426c8:	40800115 	stw	r2,4(r8)
   426cc:	28001a26 	beq	r5,zero,42738 <_free_r+0x11c>
   426d0:	8809883a 	mov	r4,r17
   426d4:	dfc00217 	ldw	ra,8(sp)
   426d8:	dc400117 	ldw	r17,4(sp)
   426dc:	dc000017 	ldw	r16,0(sp)
   426e0:	dec00304 	addi	sp,sp,12
   426e4:	00438ac1 	jmpi	438ac <__malloc_unlock>
   426e8:	80bffe17 	ldw	r2,-8(r16)
   426ec:	50c00204 	addi	r3,r10,8
   426f0:	4091c83a 	sub	r8,r8,r2
   426f4:	41000217 	ldw	r4,8(r8)
   426f8:	388f883a 	add	r7,r7,r2
   426fc:	20c06126 	beq	r4,r3,42884 <_free_r+0x268>
   42700:	40800317 	ldw	r2,12(r8)
   42704:	3247883a 	add	r3,r6,r9
   42708:	000b883a 	mov	r5,zero
   4270c:	11000215 	stw	r4,8(r2)
   42710:	20800315 	stw	r2,12(r4)
   42714:	18800117 	ldw	r2,4(r3)
   42718:	1080004c 	andi	r2,r2,1
   4271c:	103fdd26 	beq	r2,zero,42694 <_free_r+0x78>
   42720:	38800054 	ori	r2,r7,1
   42724:	3a07883a 	add	r3,r7,r8
   42728:	280ac03a 	cmpne	r5,r5,zero
   4272c:	40800115 	stw	r2,4(r8)
   42730:	19c00015 	stw	r7,0(r3)
   42734:	283fe61e 	bne	r5,zero,426d0 <_free_r+0xb4>
   42738:	00807fc4 	movi	r2,511
   4273c:	11c01f2e 	bgeu	r2,r7,427bc <_free_r+0x1a0>
   42740:	3806d27a 	srli	r3,r7,9
   42744:	1800481e 	bne	r3,zero,42868 <_free_r+0x24c>
   42748:	3804d0fa 	srli	r2,r7,3
   4274c:	100690fa 	slli	r3,r2,3
   42750:	1acd883a 	add	r6,r3,r11
   42754:	31400217 	ldw	r5,8(r6)
   42758:	31405926 	beq	r6,r5,428c0 <_free_r+0x2a4>
   4275c:	28800117 	ldw	r2,4(r5)
   42760:	00ffff04 	movi	r3,-4
   42764:	10c4703a 	and	r2,r2,r3
   42768:	3880022e 	bgeu	r7,r2,42774 <_free_r+0x158>
   4276c:	29400217 	ldw	r5,8(r5)
   42770:	317ffa1e 	bne	r6,r5,4275c <_free_r+0x140>
   42774:	29800317 	ldw	r6,12(r5)
   42778:	41800315 	stw	r6,12(r8)
   4277c:	41400215 	stw	r5,8(r8)
   42780:	8809883a 	mov	r4,r17
   42784:	2a000315 	stw	r8,12(r5)
   42788:	32000215 	stw	r8,8(r6)
   4278c:	dfc00217 	ldw	ra,8(sp)
   42790:	dc400117 	ldw	r17,4(sp)
   42794:	dc000017 	ldw	r16,0(sp)
   42798:	dec00304 	addi	sp,sp,12
   4279c:	00438ac1 	jmpi	438ac <__malloc_unlock>
   427a0:	dfc00217 	ldw	ra,8(sp)
   427a4:	dc400117 	ldw	r17,4(sp)
   427a8:	dc000017 	ldw	r16,0(sp)
   427ac:	dec00304 	addi	sp,sp,12
   427b0:	f800283a 	ret
   427b4:	31000217 	ldw	r4,8(r6)
   427b8:	003fbd06 	br	426b0 <_free_r+0x94>
   427bc:	3806d0fa 	srli	r3,r7,3
   427c0:	00800044 	movi	r2,1
   427c4:	51400117 	ldw	r5,4(r10)
   427c8:	180890fa 	slli	r4,r3,3
   427cc:	1807d0ba 	srai	r3,r3,2
   427d0:	22c9883a 	add	r4,r4,r11
   427d4:	21800217 	ldw	r6,8(r4)
   427d8:	10c4983a 	sll	r2,r2,r3
   427dc:	41000315 	stw	r4,12(r8)
   427e0:	41800215 	stw	r6,8(r8)
   427e4:	288ab03a 	or	r5,r5,r2
   427e8:	22000215 	stw	r8,8(r4)
   427ec:	8809883a 	mov	r4,r17
   427f0:	51400115 	stw	r5,4(r10)
   427f4:	32000315 	stw	r8,12(r6)
   427f8:	dfc00217 	ldw	ra,8(sp)
   427fc:	dc400117 	ldw	r17,4(sp)
   42800:	dc000017 	ldw	r16,0(sp)
   42804:	dec00304 	addi	sp,sp,12
   42808:	00438ac1 	jmpi	438ac <__malloc_unlock>
   4280c:	2880004c 	andi	r2,r5,1
   42810:	3a4d883a 	add	r6,r7,r9
   42814:	1000071e 	bne	r2,zero,42834 <_free_r+0x218>
   42818:	80bffe17 	ldw	r2,-8(r16)
   4281c:	4091c83a 	sub	r8,r8,r2
   42820:	41000317 	ldw	r4,12(r8)
   42824:	40c00217 	ldw	r3,8(r8)
   42828:	308d883a 	add	r6,r6,r2
   4282c:	20c00215 	stw	r3,8(r4)
   42830:	19000315 	stw	r4,12(r3)
   42834:	00900034 	movhi	r2,16384
   42838:	10869c04 	addi	r2,r2,6768
   4283c:	11000017 	ldw	r4,0(r2)
   42840:	30c00054 	ori	r3,r6,1
   42844:	52000215 	stw	r8,8(r10)
   42848:	40c00115 	stw	r3,4(r8)
   4284c:	313fa036 	bltu	r6,r4,426d0 <_free_r+0xb4>
   42850:	00900034 	movhi	r2,16384
   42854:	1086a804 	addi	r2,r2,6816
   42858:	11400017 	ldw	r5,0(r2)
   4285c:	8809883a 	mov	r4,r17
   42860:	00424f00 	call	424f0 <_malloc_trim_r>
   42864:	003f9a06 	br	426d0 <_free_r+0xb4>
   42868:	00800104 	movi	r2,4
   4286c:	10c0072e 	bgeu	r2,r3,4288c <_free_r+0x270>
   42870:	00800504 	movi	r2,20
   42874:	10c01936 	bltu	r2,r3,428dc <_free_r+0x2c0>
   42878:	188016c4 	addi	r2,r3,91
   4287c:	100690fa 	slli	r3,r2,3
   42880:	003fb306 	br	42750 <_free_r+0x134>
   42884:	01400044 	movi	r5,1
   42888:	003f7e06 	br	42684 <_free_r+0x68>
   4288c:	3804d1ba 	srli	r2,r7,6
   42890:	10800e04 	addi	r2,r2,56
   42894:	100690fa 	slli	r3,r2,3
   42898:	003fad06 	br	42750 <_free_r+0x134>
   4289c:	22000315 	stw	r8,12(r4)
   428a0:	22000215 	stw	r8,8(r4)
   428a4:	3a05883a 	add	r2,r7,r8
   428a8:	38c00054 	ori	r3,r7,1
   428ac:	11c00015 	stw	r7,0(r2)
   428b0:	41000215 	stw	r4,8(r8)
   428b4:	40c00115 	stw	r3,4(r8)
   428b8:	41000315 	stw	r4,12(r8)
   428bc:	003f8406 	br	426d0 <_free_r+0xb4>
   428c0:	1005d0ba 	srai	r2,r2,2
   428c4:	00c00044 	movi	r3,1
   428c8:	51000117 	ldw	r4,4(r10)
   428cc:	1886983a 	sll	r3,r3,r2
   428d0:	20c8b03a 	or	r4,r4,r3
   428d4:	51000115 	stw	r4,4(r10)
   428d8:	003fa706 	br	42778 <_free_r+0x15c>
   428dc:	00801504 	movi	r2,84
   428e0:	10c00436 	bltu	r2,r3,428f4 <_free_r+0x2d8>
   428e4:	3804d33a 	srli	r2,r7,12
   428e8:	10801b84 	addi	r2,r2,110
   428ec:	100690fa 	slli	r3,r2,3
   428f0:	003f9706 	br	42750 <_free_r+0x134>
   428f4:	00805504 	movi	r2,340
   428f8:	10c00436 	bltu	r2,r3,4290c <_free_r+0x2f0>
   428fc:	3804d3fa 	srli	r2,r7,15
   42900:	10801dc4 	addi	r2,r2,119
   42904:	100690fa 	slli	r3,r2,3
   42908:	003f9106 	br	42750 <_free_r+0x134>
   4290c:	00815504 	movi	r2,1364
   42910:	10c0032e 	bgeu	r2,r3,42920 <_free_r+0x304>
   42914:	00801f84 	movi	r2,126
   42918:	00c0fc04 	movi	r3,1008
   4291c:	003f8c06 	br	42750 <_free_r+0x134>
   42920:	3804d4ba 	srli	r2,r7,18
   42924:	10801f04 	addi	r2,r2,124
   42928:	100690fa 	slli	r3,r2,3
   4292c:	003f8806 	br	42750 <_free_r+0x134>

00042930 <_fwalk_reent>:
   42930:	defff704 	addi	sp,sp,-36
   42934:	dcc00315 	stw	r19,12(sp)
   42938:	24c0b804 	addi	r19,r4,736
   4293c:	dd800615 	stw	r22,24(sp)
   42940:	dd400515 	stw	r21,20(sp)
   42944:	dfc00815 	stw	ra,32(sp)
   42948:	ddc00715 	stw	r23,28(sp)
   4294c:	dd000415 	stw	r20,16(sp)
   42950:	dc800215 	stw	r18,8(sp)
   42954:	dc400115 	stw	r17,4(sp)
   42958:	dc000015 	stw	r16,0(sp)
   4295c:	202b883a 	mov	r21,r4
   42960:	282d883a 	mov	r22,r5
   42964:	00422880 	call	42288 <__sfp_lock_acquire>
   42968:	98002126 	beq	r19,zero,429f0 <_fwalk_reent+0xc0>
   4296c:	002f883a 	mov	r23,zero
   42970:	9c800117 	ldw	r18,4(r19)
   42974:	9c000217 	ldw	r16,8(r19)
   42978:	90bfffc4 	addi	r2,r18,-1
   4297c:	10000d16 	blt	r2,zero,429b4 <_fwalk_reent+0x84>
   42980:	0023883a 	mov	r17,zero
   42984:	053fffc4 	movi	r20,-1
   42988:	8080030f 	ldh	r2,12(r16)
   4298c:	8c400044 	addi	r17,r17,1
   42990:	10000626 	beq	r2,zero,429ac <_fwalk_reent+0x7c>
   42994:	8080038f 	ldh	r2,14(r16)
   42998:	800b883a 	mov	r5,r16
   4299c:	a809883a 	mov	r4,r21
   429a0:	15000226 	beq	r2,r20,429ac <_fwalk_reent+0x7c>
   429a4:	b03ee83a 	callr	r22
   429a8:	b8aeb03a 	or	r23,r23,r2
   429ac:	84001704 	addi	r16,r16,92
   429b0:	947ff51e 	bne	r18,r17,42988 <_fwalk_reent+0x58>
   429b4:	9cc00017 	ldw	r19,0(r19)
   429b8:	983fed1e 	bne	r19,zero,42970 <_fwalk_reent+0x40>
   429bc:	004228c0 	call	4228c <__sfp_lock_release>
   429c0:	b805883a 	mov	r2,r23
   429c4:	dfc00817 	ldw	ra,32(sp)
   429c8:	ddc00717 	ldw	r23,28(sp)
   429cc:	dd800617 	ldw	r22,24(sp)
   429d0:	dd400517 	ldw	r21,20(sp)
   429d4:	dd000417 	ldw	r20,16(sp)
   429d8:	dcc00317 	ldw	r19,12(sp)
   429dc:	dc800217 	ldw	r18,8(sp)
   429e0:	dc400117 	ldw	r17,4(sp)
   429e4:	dc000017 	ldw	r16,0(sp)
   429e8:	dec00904 	addi	sp,sp,36
   429ec:	f800283a 	ret
   429f0:	002f883a 	mov	r23,zero
   429f4:	003ff106 	br	429bc <_fwalk_reent+0x8c>

000429f8 <_fwalk>:
   429f8:	defff804 	addi	sp,sp,-32
   429fc:	dcc00315 	stw	r19,12(sp)
   42a00:	24c0b804 	addi	r19,r4,736
   42a04:	dd400515 	stw	r21,20(sp)
   42a08:	dfc00715 	stw	ra,28(sp)
   42a0c:	dd800615 	stw	r22,24(sp)
   42a10:	dd000415 	stw	r20,16(sp)
   42a14:	dc800215 	stw	r18,8(sp)
   42a18:	dc400115 	stw	r17,4(sp)
   42a1c:	dc000015 	stw	r16,0(sp)
   42a20:	282b883a 	mov	r21,r5
   42a24:	00422880 	call	42288 <__sfp_lock_acquire>
   42a28:	98001f26 	beq	r19,zero,42aa8 <_fwalk+0xb0>
   42a2c:	002d883a 	mov	r22,zero
   42a30:	9c800117 	ldw	r18,4(r19)
   42a34:	9c000217 	ldw	r16,8(r19)
   42a38:	90bfffc4 	addi	r2,r18,-1
   42a3c:	10000c16 	blt	r2,zero,42a70 <_fwalk+0x78>
   42a40:	0023883a 	mov	r17,zero
   42a44:	053fffc4 	movi	r20,-1
   42a48:	8080030f 	ldh	r2,12(r16)
   42a4c:	8c400044 	addi	r17,r17,1
   42a50:	10000526 	beq	r2,zero,42a68 <_fwalk+0x70>
   42a54:	8080038f 	ldh	r2,14(r16)
   42a58:	8009883a 	mov	r4,r16
   42a5c:	15000226 	beq	r2,r20,42a68 <_fwalk+0x70>
   42a60:	a83ee83a 	callr	r21
   42a64:	b0acb03a 	or	r22,r22,r2
   42a68:	84001704 	addi	r16,r16,92
   42a6c:	947ff61e 	bne	r18,r17,42a48 <_fwalk+0x50>
   42a70:	9cc00017 	ldw	r19,0(r19)
   42a74:	983fee1e 	bne	r19,zero,42a30 <_fwalk+0x38>
   42a78:	004228c0 	call	4228c <__sfp_lock_release>
   42a7c:	b005883a 	mov	r2,r22
   42a80:	dfc00717 	ldw	ra,28(sp)
   42a84:	dd800617 	ldw	r22,24(sp)
   42a88:	dd400517 	ldw	r21,20(sp)
   42a8c:	dd000417 	ldw	r20,16(sp)
   42a90:	dcc00317 	ldw	r19,12(sp)
   42a94:	dc800217 	ldw	r18,8(sp)
   42a98:	dc400117 	ldw	r17,4(sp)
   42a9c:	dc000017 	ldw	r16,0(sp)
   42aa0:	dec00804 	addi	sp,sp,32
   42aa4:	f800283a 	ret
   42aa8:	002d883a 	mov	r22,zero
   42aac:	003ff206 	br	42a78 <_fwalk+0x80>

00042ab0 <__smakebuf_r>:
   42ab0:	2880030b 	ldhu	r2,12(r5)
   42ab4:	deffed04 	addi	sp,sp,-76
   42ab8:	dc401015 	stw	r17,64(sp)
   42abc:	1080008c 	andi	r2,r2,2
   42ac0:	dc000f15 	stw	r16,60(sp)
   42ac4:	dfc01215 	stw	ra,72(sp)
   42ac8:	dc801115 	stw	r18,68(sp)
   42acc:	2821883a 	mov	r16,r5
   42ad0:	2023883a 	mov	r17,r4
   42ad4:	10000b26 	beq	r2,zero,42b04 <__smakebuf_r+0x54>
   42ad8:	28c010c4 	addi	r3,r5,67
   42adc:	00800044 	movi	r2,1
   42ae0:	28800515 	stw	r2,20(r5)
   42ae4:	28c00415 	stw	r3,16(r5)
   42ae8:	28c00015 	stw	r3,0(r5)
   42aec:	dfc01217 	ldw	ra,72(sp)
   42af0:	dc801117 	ldw	r18,68(sp)
   42af4:	dc401017 	ldw	r17,64(sp)
   42af8:	dc000f17 	ldw	r16,60(sp)
   42afc:	dec01304 	addi	sp,sp,76
   42b00:	f800283a 	ret
   42b04:	2940038f 	ldh	r5,14(r5)
   42b08:	28002116 	blt	r5,zero,42b90 <__smakebuf_r+0xe0>
   42b0c:	d80d883a 	mov	r6,sp
   42b10:	00430340 	call	43034 <_fstat_r>
   42b14:	10001e16 	blt	r2,zero,42b90 <__smakebuf_r+0xe0>
   42b18:	d8800117 	ldw	r2,4(sp)
   42b1c:	00e00014 	movui	r3,32768
   42b20:	113c000c 	andi	r4,r2,61440
   42b24:	20c03126 	beq	r4,r3,42bec <__smakebuf_r+0x13c>
   42b28:	8080030b 	ldhu	r2,12(r16)
   42b2c:	00c80004 	movi	r3,8192
   42b30:	10820014 	ori	r2,r2,2048
   42b34:	8080030d 	sth	r2,12(r16)
   42b38:	20c01e26 	beq	r4,r3,42bb4 <__smakebuf_r+0x104>
   42b3c:	04810004 	movi	r18,1024
   42b40:	8809883a 	mov	r4,r17
   42b44:	900b883a 	mov	r5,r18
   42b48:	0040ebc0 	call	40ebc <_malloc_r>
   42b4c:	1009883a 	mov	r4,r2
   42b50:	10003126 	beq	r2,zero,42c18 <__smakebuf_r+0x168>
   42b54:	80c0030b 	ldhu	r3,12(r16)
   42b58:	00800134 	movhi	r2,4
   42b5c:	1088df04 	addi	r2,r2,9084
   42b60:	88800f15 	stw	r2,60(r17)
   42b64:	18c02014 	ori	r3,r3,128
   42b68:	84800515 	stw	r18,20(r16)
   42b6c:	80c0030d 	sth	r3,12(r16)
   42b70:	81000415 	stw	r4,16(r16)
   42b74:	81000015 	stw	r4,0(r16)
   42b78:	dfc01217 	ldw	ra,72(sp)
   42b7c:	dc801117 	ldw	r18,68(sp)
   42b80:	dc401017 	ldw	r17,64(sp)
   42b84:	dc000f17 	ldw	r16,60(sp)
   42b88:	dec01304 	addi	sp,sp,76
   42b8c:	f800283a 	ret
   42b90:	80c0030b 	ldhu	r3,12(r16)
   42b94:	1880200c 	andi	r2,r3,128
   42b98:	10000426 	beq	r2,zero,42bac <__smakebuf_r+0xfc>
   42b9c:	04801004 	movi	r18,64
   42ba0:	18820014 	ori	r2,r3,2048
   42ba4:	8080030d 	sth	r2,12(r16)
   42ba8:	003fe506 	br	42b40 <__smakebuf_r+0x90>
   42bac:	04810004 	movi	r18,1024
   42bb0:	003ffb06 	br	42ba0 <__smakebuf_r+0xf0>
   42bb4:	8140038f 	ldh	r5,14(r16)
   42bb8:	8809883a 	mov	r4,r17
   42bbc:	00430a80 	call	430a8 <_isatty_r>
   42bc0:	103fde26 	beq	r2,zero,42b3c <__smakebuf_r+0x8c>
   42bc4:	8080030b 	ldhu	r2,12(r16)
   42bc8:	80c010c4 	addi	r3,r16,67
   42bcc:	04810004 	movi	r18,1024
   42bd0:	10800054 	ori	r2,r2,1
   42bd4:	8080030d 	sth	r2,12(r16)
   42bd8:	00800044 	movi	r2,1
   42bdc:	80c00415 	stw	r3,16(r16)
   42be0:	80800515 	stw	r2,20(r16)
   42be4:	80c00015 	stw	r3,0(r16)
   42be8:	003fd506 	br	42b40 <__smakebuf_r+0x90>
   42bec:	80c00a17 	ldw	r3,40(r16)
   42bf0:	00800134 	movhi	r2,4
   42bf4:	108b3904 	addi	r2,r2,11492
   42bf8:	18bfcb1e 	bne	r3,r2,42b28 <__smakebuf_r+0x78>
   42bfc:	8080030b 	ldhu	r2,12(r16)
   42c00:	00c10004 	movi	r3,1024
   42c04:	1825883a 	mov	r18,r3
   42c08:	10c4b03a 	or	r2,r2,r3
   42c0c:	8080030d 	sth	r2,12(r16)
   42c10:	80c01315 	stw	r3,76(r16)
   42c14:	003fca06 	br	42b40 <__smakebuf_r+0x90>
   42c18:	8100030b 	ldhu	r4,12(r16)
   42c1c:	2080800c 	andi	r2,r4,512
   42c20:	103fb21e 	bne	r2,zero,42aec <__smakebuf_r+0x3c>
   42c24:	80c010c4 	addi	r3,r16,67
   42c28:	21000094 	ori	r4,r4,2
   42c2c:	00800044 	movi	r2,1
   42c30:	80800515 	stw	r2,20(r16)
   42c34:	8100030d 	sth	r4,12(r16)
   42c38:	80c00415 	stw	r3,16(r16)
   42c3c:	80c00015 	stw	r3,0(r16)
   42c40:	003faa06 	br	42aec <__smakebuf_r+0x3c>

00042c44 <memset>:
   42c44:	008000c4 	movi	r2,3
   42c48:	29403fcc 	andi	r5,r5,255
   42c4c:	2007883a 	mov	r3,r4
   42c50:	1180022e 	bgeu	r2,r6,42c5c <memset+0x18>
   42c54:	2084703a 	and	r2,r4,r2
   42c58:	10000826 	beq	r2,zero,42c7c <memset+0x38>
   42c5c:	30000526 	beq	r6,zero,42c74 <memset+0x30>
   42c60:	2805883a 	mov	r2,r5
   42c64:	30cd883a 	add	r6,r6,r3
   42c68:	18800005 	stb	r2,0(r3)
   42c6c:	18c00044 	addi	r3,r3,1
   42c70:	19bffd1e 	bne	r3,r6,42c68 <memset+0x24>
   42c74:	2005883a 	mov	r2,r4
   42c78:	f800283a 	ret
   42c7c:	2804923a 	slli	r2,r5,8
   42c80:	020003c4 	movi	r8,15
   42c84:	200f883a 	mov	r7,r4
   42c88:	2884b03a 	or	r2,r5,r2
   42c8c:	1006943a 	slli	r3,r2,16
   42c90:	10c6b03a 	or	r3,r2,r3
   42c94:	41800a2e 	bgeu	r8,r6,42cc0 <memset+0x7c>
   42c98:	4005883a 	mov	r2,r8
   42c9c:	31bffc04 	addi	r6,r6,-16
   42ca0:	38c00015 	stw	r3,0(r7)
   42ca4:	38c00115 	stw	r3,4(r7)
   42ca8:	38c00215 	stw	r3,8(r7)
   42cac:	38c00315 	stw	r3,12(r7)
   42cb0:	39c00404 	addi	r7,r7,16
   42cb4:	11bff936 	bltu	r2,r6,42c9c <memset+0x58>
   42cb8:	008000c4 	movi	r2,3
   42cbc:	1180052e 	bgeu	r2,r6,42cd4 <memset+0x90>
   42cc0:	31bfff04 	addi	r6,r6,-4
   42cc4:	008000c4 	movi	r2,3
   42cc8:	38c00015 	stw	r3,0(r7)
   42ccc:	39c00104 	addi	r7,r7,4
   42cd0:	11bffb36 	bltu	r2,r6,42cc0 <memset+0x7c>
   42cd4:	3807883a 	mov	r3,r7
   42cd8:	003fe006 	br	42c5c <memset+0x18>

00042cdc <__sclose>:
   42cdc:	2940038f 	ldh	r5,14(r5)
   42ce0:	0042ea01 	jmpi	42ea0 <_close_r>

00042ce4 <__sseek>:
   42ce4:	defffe04 	addi	sp,sp,-8
   42ce8:	dc000015 	stw	r16,0(sp)
   42cec:	2821883a 	mov	r16,r5
   42cf0:	2940038f 	ldh	r5,14(r5)
   42cf4:	dfc00115 	stw	ra,4(sp)
   42cf8:	00431180 	call	43118 <_lseek_r>
   42cfc:	1007883a 	mov	r3,r2
   42d00:	00bfffc4 	movi	r2,-1
   42d04:	18800926 	beq	r3,r2,42d2c <__sseek+0x48>
   42d08:	8080030b 	ldhu	r2,12(r16)
   42d0c:	80c01415 	stw	r3,80(r16)
   42d10:	10840014 	ori	r2,r2,4096
   42d14:	8080030d 	sth	r2,12(r16)
   42d18:	1805883a 	mov	r2,r3
   42d1c:	dfc00117 	ldw	ra,4(sp)
   42d20:	dc000017 	ldw	r16,0(sp)
   42d24:	dec00204 	addi	sp,sp,8
   42d28:	f800283a 	ret
   42d2c:	8080030b 	ldhu	r2,12(r16)
   42d30:	10bbffcc 	andi	r2,r2,61439
   42d34:	8080030d 	sth	r2,12(r16)
   42d38:	1805883a 	mov	r2,r3
   42d3c:	dfc00117 	ldw	ra,4(sp)
   42d40:	dc000017 	ldw	r16,0(sp)
   42d44:	dec00204 	addi	sp,sp,8
   42d48:	f800283a 	ret

00042d4c <__swrite>:
   42d4c:	2880030b 	ldhu	r2,12(r5)
   42d50:	defffb04 	addi	sp,sp,-20
   42d54:	dcc00315 	stw	r19,12(sp)
   42d58:	1080400c 	andi	r2,r2,256
   42d5c:	dc800215 	stw	r18,8(sp)
   42d60:	dc400115 	stw	r17,4(sp)
   42d64:	dc000015 	stw	r16,0(sp)
   42d68:	3027883a 	mov	r19,r6
   42d6c:	3825883a 	mov	r18,r7
   42d70:	dfc00415 	stw	ra,16(sp)
   42d74:	2821883a 	mov	r16,r5
   42d78:	000d883a 	mov	r6,zero
   42d7c:	01c00084 	movi	r7,2
   42d80:	2023883a 	mov	r17,r4
   42d84:	10000226 	beq	r2,zero,42d90 <__swrite+0x44>
   42d88:	2940038f 	ldh	r5,14(r5)
   42d8c:	00431180 	call	43118 <_lseek_r>
   42d90:	8080030b 	ldhu	r2,12(r16)
   42d94:	8140038f 	ldh	r5,14(r16)
   42d98:	8809883a 	mov	r4,r17
   42d9c:	10bbffcc 	andi	r2,r2,61439
   42da0:	980d883a 	mov	r6,r19
   42da4:	900f883a 	mov	r7,r18
   42da8:	8080030d 	sth	r2,12(r16)
   42dac:	dfc00417 	ldw	ra,16(sp)
   42db0:	dcc00317 	ldw	r19,12(sp)
   42db4:	dc800217 	ldw	r18,8(sp)
   42db8:	dc400117 	ldw	r17,4(sp)
   42dbc:	dc000017 	ldw	r16,0(sp)
   42dc0:	dec00504 	addi	sp,sp,20
   42dc4:	0042e281 	jmpi	42e28 <_write_r>

00042dc8 <__sread>:
   42dc8:	defffe04 	addi	sp,sp,-8
   42dcc:	dc000015 	stw	r16,0(sp)
   42dd0:	2821883a 	mov	r16,r5
   42dd4:	2940038f 	ldh	r5,14(r5)
   42dd8:	dfc00115 	stw	ra,4(sp)
   42ddc:	00431900 	call	43190 <_read_r>
   42de0:	1007883a 	mov	r3,r2
   42de4:	10000816 	blt	r2,zero,42e08 <__sread+0x40>
   42de8:	80801417 	ldw	r2,80(r16)
   42dec:	10c5883a 	add	r2,r2,r3
   42df0:	80801415 	stw	r2,80(r16)
   42df4:	1805883a 	mov	r2,r3
   42df8:	dfc00117 	ldw	ra,4(sp)
   42dfc:	dc000017 	ldw	r16,0(sp)
   42e00:	dec00204 	addi	sp,sp,8
   42e04:	f800283a 	ret
   42e08:	8080030b 	ldhu	r2,12(r16)
   42e0c:	10bbffcc 	andi	r2,r2,61439
   42e10:	8080030d 	sth	r2,12(r16)
   42e14:	1805883a 	mov	r2,r3
   42e18:	dfc00117 	ldw	ra,4(sp)
   42e1c:	dc000017 	ldw	r16,0(sp)
   42e20:	dec00204 	addi	sp,sp,8
   42e24:	f800283a 	ret

00042e28 <_write_r>:
   42e28:	defffd04 	addi	sp,sp,-12
   42e2c:	dc000015 	stw	r16,0(sp)
   42e30:	04100034 	movhi	r16,16384
   42e34:	8406ab04 	addi	r16,r16,6828
   42e38:	dc400115 	stw	r17,4(sp)
   42e3c:	80000015 	stw	zero,0(r16)
   42e40:	2023883a 	mov	r17,r4
   42e44:	2809883a 	mov	r4,r5
   42e48:	300b883a 	mov	r5,r6
   42e4c:	380d883a 	mov	r6,r7
   42e50:	dfc00215 	stw	ra,8(sp)
   42e54:	0043b980 	call	43b98 <write>
   42e58:	1007883a 	mov	r3,r2
   42e5c:	00bfffc4 	movi	r2,-1
   42e60:	18800626 	beq	r3,r2,42e7c <_write_r+0x54>
   42e64:	1805883a 	mov	r2,r3
   42e68:	dfc00217 	ldw	ra,8(sp)
   42e6c:	dc400117 	ldw	r17,4(sp)
   42e70:	dc000017 	ldw	r16,0(sp)
   42e74:	dec00304 	addi	sp,sp,12
   42e78:	f800283a 	ret
   42e7c:	80800017 	ldw	r2,0(r16)
   42e80:	103ff826 	beq	r2,zero,42e64 <_write_r+0x3c>
   42e84:	88800015 	stw	r2,0(r17)
   42e88:	1805883a 	mov	r2,r3
   42e8c:	dfc00217 	ldw	ra,8(sp)
   42e90:	dc400117 	ldw	r17,4(sp)
   42e94:	dc000017 	ldw	r16,0(sp)
   42e98:	dec00304 	addi	sp,sp,12
   42e9c:	f800283a 	ret

00042ea0 <_close_r>:
   42ea0:	defffd04 	addi	sp,sp,-12
   42ea4:	dc000015 	stw	r16,0(sp)
   42ea8:	04100034 	movhi	r16,16384
   42eac:	8406ab04 	addi	r16,r16,6828
   42eb0:	dc400115 	stw	r17,4(sp)
   42eb4:	80000015 	stw	zero,0(r16)
   42eb8:	2023883a 	mov	r17,r4
   42ebc:	2809883a 	mov	r4,r5
   42ec0:	dfc00215 	stw	ra,8(sp)
   42ec4:	00432080 	call	43208 <close>
   42ec8:	1007883a 	mov	r3,r2
   42ecc:	00bfffc4 	movi	r2,-1
   42ed0:	18800626 	beq	r3,r2,42eec <_close_r+0x4c>
   42ed4:	1805883a 	mov	r2,r3
   42ed8:	dfc00217 	ldw	ra,8(sp)
   42edc:	dc400117 	ldw	r17,4(sp)
   42ee0:	dc000017 	ldw	r16,0(sp)
   42ee4:	dec00304 	addi	sp,sp,12
   42ee8:	f800283a 	ret
   42eec:	80800017 	ldw	r2,0(r16)
   42ef0:	103ff826 	beq	r2,zero,42ed4 <_close_r+0x34>
   42ef4:	88800015 	stw	r2,0(r17)
   42ef8:	1805883a 	mov	r2,r3
   42efc:	dfc00217 	ldw	ra,8(sp)
   42f00:	dc400117 	ldw	r17,4(sp)
   42f04:	dc000017 	ldw	r16,0(sp)
   42f08:	dec00304 	addi	sp,sp,12
   42f0c:	f800283a 	ret

00042f10 <_fclose_r>:
   42f10:	defffc04 	addi	sp,sp,-16
   42f14:	dc400115 	stw	r17,4(sp)
   42f18:	dc000015 	stw	r16,0(sp)
   42f1c:	dfc00315 	stw	ra,12(sp)
   42f20:	dc800215 	stw	r18,8(sp)
   42f24:	2821883a 	mov	r16,r5
   42f28:	2023883a 	mov	r17,r4
   42f2c:	28002926 	beq	r5,zero,42fd4 <_fclose_r+0xc4>
   42f30:	00422880 	call	42288 <__sfp_lock_acquire>
   42f34:	88000226 	beq	r17,zero,42f40 <_fclose_r+0x30>
   42f38:	88800e17 	ldw	r2,56(r17)
   42f3c:	10002d26 	beq	r2,zero,42ff4 <_fclose_r+0xe4>
   42f40:	8080030f 	ldh	r2,12(r16)
   42f44:	10002226 	beq	r2,zero,42fd0 <_fclose_r+0xc0>
   42f48:	8809883a 	mov	r4,r17
   42f4c:	800b883a 	mov	r5,r16
   42f50:	00420000 	call	42000 <_fflush_r>
   42f54:	1025883a 	mov	r18,r2
   42f58:	80800b17 	ldw	r2,44(r16)
   42f5c:	10000426 	beq	r2,zero,42f70 <_fclose_r+0x60>
   42f60:	81400717 	ldw	r5,28(r16)
   42f64:	8809883a 	mov	r4,r17
   42f68:	103ee83a 	callr	r2
   42f6c:	10002a16 	blt	r2,zero,43018 <_fclose_r+0x108>
   42f70:	8080030b 	ldhu	r2,12(r16)
   42f74:	1080200c 	andi	r2,r2,128
   42f78:	1000231e 	bne	r2,zero,43008 <_fclose_r+0xf8>
   42f7c:	81400c17 	ldw	r5,48(r16)
   42f80:	28000526 	beq	r5,zero,42f98 <_fclose_r+0x88>
   42f84:	80801004 	addi	r2,r16,64
   42f88:	28800226 	beq	r5,r2,42f94 <_fclose_r+0x84>
   42f8c:	8809883a 	mov	r4,r17
   42f90:	004261c0 	call	4261c <_free_r>
   42f94:	80000c15 	stw	zero,48(r16)
   42f98:	81401117 	ldw	r5,68(r16)
   42f9c:	28000326 	beq	r5,zero,42fac <_fclose_r+0x9c>
   42fa0:	8809883a 	mov	r4,r17
   42fa4:	004261c0 	call	4261c <_free_r>
   42fa8:	80001115 	stw	zero,68(r16)
   42fac:	8000030d 	sth	zero,12(r16)
   42fb0:	004228c0 	call	4228c <__sfp_lock_release>
   42fb4:	9005883a 	mov	r2,r18
   42fb8:	dfc00317 	ldw	ra,12(sp)
   42fbc:	dc800217 	ldw	r18,8(sp)
   42fc0:	dc400117 	ldw	r17,4(sp)
   42fc4:	dc000017 	ldw	r16,0(sp)
   42fc8:	dec00404 	addi	sp,sp,16
   42fcc:	f800283a 	ret
   42fd0:	004228c0 	call	4228c <__sfp_lock_release>
   42fd4:	0025883a 	mov	r18,zero
   42fd8:	9005883a 	mov	r2,r18
   42fdc:	dfc00317 	ldw	ra,12(sp)
   42fe0:	dc800217 	ldw	r18,8(sp)
   42fe4:	dc400117 	ldw	r17,4(sp)
   42fe8:	dc000017 	ldw	r16,0(sp)
   42fec:	dec00404 	addi	sp,sp,16
   42ff0:	f800283a 	ret
   42ff4:	8809883a 	mov	r4,r17
   42ff8:	00422980 	call	42298 <__sinit>
   42ffc:	8080030f 	ldh	r2,12(r16)
   43000:	103fd11e 	bne	r2,zero,42f48 <_fclose_r+0x38>
   43004:	003ff206 	br	42fd0 <_fclose_r+0xc0>
   43008:	81400417 	ldw	r5,16(r16)
   4300c:	8809883a 	mov	r4,r17
   43010:	004261c0 	call	4261c <_free_r>
   43014:	003fd906 	br	42f7c <_fclose_r+0x6c>
   43018:	04bfffc4 	movi	r18,-1
   4301c:	003fd406 	br	42f70 <_fclose_r+0x60>

00043020 <fclose>:
   43020:	00900034 	movhi	r2,16384
   43024:	10869a04 	addi	r2,r2,6760
   43028:	200b883a 	mov	r5,r4
   4302c:	11000017 	ldw	r4,0(r2)
   43030:	0042f101 	jmpi	42f10 <_fclose_r>

00043034 <_fstat_r>:
   43034:	defffd04 	addi	sp,sp,-12
   43038:	dc000015 	stw	r16,0(sp)
   4303c:	04100034 	movhi	r16,16384
   43040:	8406ab04 	addi	r16,r16,6828
   43044:	dc400115 	stw	r17,4(sp)
   43048:	80000015 	stw	zero,0(r16)
   4304c:	2023883a 	mov	r17,r4
   43050:	2809883a 	mov	r4,r5
   43054:	300b883a 	mov	r5,r6
   43058:	dfc00215 	stw	ra,8(sp)
   4305c:	00433900 	call	43390 <fstat>
   43060:	1007883a 	mov	r3,r2
   43064:	00bfffc4 	movi	r2,-1
   43068:	18800626 	beq	r3,r2,43084 <_fstat_r+0x50>
   4306c:	1805883a 	mov	r2,r3
   43070:	dfc00217 	ldw	ra,8(sp)
   43074:	dc400117 	ldw	r17,4(sp)
   43078:	dc000017 	ldw	r16,0(sp)
   4307c:	dec00304 	addi	sp,sp,12
   43080:	f800283a 	ret
   43084:	80800017 	ldw	r2,0(r16)
   43088:	103ff826 	beq	r2,zero,4306c <_fstat_r+0x38>
   4308c:	88800015 	stw	r2,0(r17)
   43090:	1805883a 	mov	r2,r3
   43094:	dfc00217 	ldw	ra,8(sp)
   43098:	dc400117 	ldw	r17,4(sp)
   4309c:	dc000017 	ldw	r16,0(sp)
   430a0:	dec00304 	addi	sp,sp,12
   430a4:	f800283a 	ret

000430a8 <_isatty_r>:
   430a8:	defffd04 	addi	sp,sp,-12
   430ac:	dc000015 	stw	r16,0(sp)
   430b0:	04100034 	movhi	r16,16384
   430b4:	8406ab04 	addi	r16,r16,6828
   430b8:	dc400115 	stw	r17,4(sp)
   430bc:	80000015 	stw	zero,0(r16)
   430c0:	2023883a 	mov	r17,r4
   430c4:	2809883a 	mov	r4,r5
   430c8:	dfc00215 	stw	ra,8(sp)
   430cc:	00434c40 	call	434c4 <isatty>
   430d0:	1007883a 	mov	r3,r2
   430d4:	00bfffc4 	movi	r2,-1
   430d8:	18800626 	beq	r3,r2,430f4 <_isatty_r+0x4c>
   430dc:	1805883a 	mov	r2,r3
   430e0:	dfc00217 	ldw	ra,8(sp)
   430e4:	dc400117 	ldw	r17,4(sp)
   430e8:	dc000017 	ldw	r16,0(sp)
   430ec:	dec00304 	addi	sp,sp,12
   430f0:	f800283a 	ret
   430f4:	80800017 	ldw	r2,0(r16)
   430f8:	103ff826 	beq	r2,zero,430dc <_isatty_r+0x34>
   430fc:	88800015 	stw	r2,0(r17)
   43100:	1805883a 	mov	r2,r3
   43104:	dfc00217 	ldw	ra,8(sp)
   43108:	dc400117 	ldw	r17,4(sp)
   4310c:	dc000017 	ldw	r16,0(sp)
   43110:	dec00304 	addi	sp,sp,12
   43114:	f800283a 	ret

00043118 <_lseek_r>:
   43118:	defffd04 	addi	sp,sp,-12
   4311c:	dc000015 	stw	r16,0(sp)
   43120:	04100034 	movhi	r16,16384
   43124:	8406ab04 	addi	r16,r16,6828
   43128:	dc400115 	stw	r17,4(sp)
   4312c:	80000015 	stw	zero,0(r16)
   43130:	2023883a 	mov	r17,r4
   43134:	2809883a 	mov	r4,r5
   43138:	300b883a 	mov	r5,r6
   4313c:	380d883a 	mov	r6,r7
   43140:	dfc00215 	stw	ra,8(sp)
   43144:	00436d00 	call	436d0 <lseek>
   43148:	1007883a 	mov	r3,r2
   4314c:	00bfffc4 	movi	r2,-1
   43150:	18800626 	beq	r3,r2,4316c <_lseek_r+0x54>
   43154:	1805883a 	mov	r2,r3
   43158:	dfc00217 	ldw	ra,8(sp)
   4315c:	dc400117 	ldw	r17,4(sp)
   43160:	dc000017 	ldw	r16,0(sp)
   43164:	dec00304 	addi	sp,sp,12
   43168:	f800283a 	ret
   4316c:	80800017 	ldw	r2,0(r16)
   43170:	103ff826 	beq	r2,zero,43154 <_lseek_r+0x3c>
   43174:	88800015 	stw	r2,0(r17)
   43178:	1805883a 	mov	r2,r3
   4317c:	dfc00217 	ldw	ra,8(sp)
   43180:	dc400117 	ldw	r17,4(sp)
   43184:	dc000017 	ldw	r16,0(sp)
   43188:	dec00304 	addi	sp,sp,12
   4318c:	f800283a 	ret

00043190 <_read_r>:
   43190:	defffd04 	addi	sp,sp,-12
   43194:	dc000015 	stw	r16,0(sp)
   43198:	04100034 	movhi	r16,16384
   4319c:	8406ab04 	addi	r16,r16,6828
   431a0:	dc400115 	stw	r17,4(sp)
   431a4:	80000015 	stw	zero,0(r16)
   431a8:	2023883a 	mov	r17,r4
   431ac:	2809883a 	mov	r4,r5
   431b0:	300b883a 	mov	r5,r6
   431b4:	380d883a 	mov	r6,r7
   431b8:	dfc00215 	stw	ra,8(sp)
   431bc:	00438cc0 	call	438cc <read>
   431c0:	1007883a 	mov	r3,r2
   431c4:	00bfffc4 	movi	r2,-1
   431c8:	18800626 	beq	r3,r2,431e4 <_read_r+0x54>
   431cc:	1805883a 	mov	r2,r3
   431d0:	dfc00217 	ldw	ra,8(sp)
   431d4:	dc400117 	ldw	r17,4(sp)
   431d8:	dc000017 	ldw	r16,0(sp)
   431dc:	dec00304 	addi	sp,sp,12
   431e0:	f800283a 	ret
   431e4:	80800017 	ldw	r2,0(r16)
   431e8:	103ff826 	beq	r2,zero,431cc <_read_r+0x3c>
   431ec:	88800015 	stw	r2,0(r17)
   431f0:	1805883a 	mov	r2,r3
   431f4:	dfc00217 	ldw	ra,8(sp)
   431f8:	dc400117 	ldw	r17,4(sp)
   431fc:	dc000017 	ldw	r16,0(sp)
   43200:	dec00304 	addi	sp,sp,12
   43204:	f800283a 	ret

00043208 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   43208:	defff804 	addi	sp,sp,-32
   4320c:	dfc00715 	stw	ra,28(sp)
   43210:	df000615 	stw	fp,24(sp)
   43214:	df000604 	addi	fp,sp,24
   43218:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   4321c:	e0bffc17 	ldw	r2,-16(fp)
   43220:	1004803a 	cmplt	r2,r2,zero
   43224:	1000081e 	bne	r2,zero,43248 <close+0x40>
   43228:	e0bffc17 	ldw	r2,-16(fp)
   4322c:	10800324 	muli	r2,r2,12
   43230:	1007883a 	mov	r3,r2
   43234:	00900034 	movhi	r2,16384
   43238:	10822204 	addi	r2,r2,2184
   4323c:	1887883a 	add	r3,r3,r2
   43240:	e0ffff15 	stw	r3,-4(fp)
   43244:	00000106 	br	4324c <close+0x44>
   43248:	e03fff15 	stw	zero,-4(fp)
   4324c:	e0bfff17 	ldw	r2,-4(fp)
   43250:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
   43254:	e0bffb17 	ldw	r2,-20(fp)
   43258:	1005003a 	cmpeq	r2,r2,zero
   4325c:	10001d1e 	bne	r2,zero,432d4 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   43260:	e0bffb17 	ldw	r2,-20(fp)
   43264:	10800017 	ldw	r2,0(r2)
   43268:	10800417 	ldw	r2,16(r2)
   4326c:	1005003a 	cmpeq	r2,r2,zero
   43270:	1000071e 	bne	r2,zero,43290 <close+0x88>
   43274:	e0bffb17 	ldw	r2,-20(fp)
   43278:	10800017 	ldw	r2,0(r2)
   4327c:	10800417 	ldw	r2,16(r2)
   43280:	e13ffb17 	ldw	r4,-20(fp)
   43284:	103ee83a 	callr	r2
   43288:	e0bffe15 	stw	r2,-8(fp)
   4328c:	00000106 	br	43294 <close+0x8c>
   43290:	e03ffe15 	stw	zero,-8(fp)
   43294:	e0bffe17 	ldw	r2,-8(fp)
   43298:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   4329c:	e13ffc17 	ldw	r4,-16(fp)
   432a0:	0043a4c0 	call	43a4c <alt_release_fd>
    if (rval < 0)
   432a4:	e0bffa17 	ldw	r2,-24(fp)
   432a8:	1004403a 	cmpge	r2,r2,zero
   432ac:	1000071e 	bne	r2,zero,432cc <close+0xc4>
    {
      ALT_ERRNO = -rval;
   432b0:	00433040 	call	43304 <alt_get_errno>
   432b4:	e0fffa17 	ldw	r3,-24(fp)
   432b8:	00c7c83a 	sub	r3,zero,r3
   432bc:	10c00015 	stw	r3,0(r2)
      return -1;
   432c0:	00bfffc4 	movi	r2,-1
   432c4:	e0bffd15 	stw	r2,-12(fp)
   432c8:	00000806 	br	432ec <close+0xe4>
    }
    return 0;
   432cc:	e03ffd15 	stw	zero,-12(fp)
   432d0:	00000606 	br	432ec <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   432d4:	00433040 	call	43304 <alt_get_errno>
   432d8:	1007883a 	mov	r3,r2
   432dc:	00801444 	movi	r2,81
   432e0:	18800015 	stw	r2,0(r3)
    return -1;
   432e4:	00bfffc4 	movi	r2,-1
   432e8:	e0bffd15 	stw	r2,-12(fp)
   432ec:	e0bffd17 	ldw	r2,-12(fp)
  }
}
   432f0:	e037883a 	mov	sp,fp
   432f4:	dfc00117 	ldw	ra,4(sp)
   432f8:	df000017 	ldw	fp,0(sp)
   432fc:	dec00204 	addi	sp,sp,8
   43300:	f800283a 	ret

00043304 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   43304:	defffd04 	addi	sp,sp,-12
   43308:	dfc00215 	stw	ra,8(sp)
   4330c:	df000115 	stw	fp,4(sp)
   43310:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   43314:	00900034 	movhi	r2,16384
   43318:	1086a304 	addi	r2,r2,6796
   4331c:	10800017 	ldw	r2,0(r2)
   43320:	1005003a 	cmpeq	r2,r2,zero
   43324:	1000061e 	bne	r2,zero,43340 <alt_get_errno+0x3c>
   43328:	00900034 	movhi	r2,16384
   4332c:	1086a304 	addi	r2,r2,6796
   43330:	10800017 	ldw	r2,0(r2)
   43334:	103ee83a 	callr	r2
   43338:	e0bfff15 	stw	r2,-4(fp)
   4333c:	00000306 	br	4334c <alt_get_errno+0x48>
   43340:	00900034 	movhi	r2,16384
   43344:	1086ab04 	addi	r2,r2,6828
   43348:	e0bfff15 	stw	r2,-4(fp)
   4334c:	e0bfff17 	ldw	r2,-4(fp)
}
   43350:	e037883a 	mov	sp,fp
   43354:	dfc00117 	ldw	ra,4(sp)
   43358:	df000017 	ldw	fp,0(sp)
   4335c:	dec00204 	addi	sp,sp,8
   43360:	f800283a 	ret

00043364 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   43364:	defffc04 	addi	sp,sp,-16
   43368:	df000315 	stw	fp,12(sp)
   4336c:	df000304 	addi	fp,sp,12
   43370:	e13ffd15 	stw	r4,-12(fp)
   43374:	e17ffe15 	stw	r5,-8(fp)
   43378:	e1bfff15 	stw	r6,-4(fp)
  return len;
   4337c:	e0bfff17 	ldw	r2,-4(fp)
}
   43380:	e037883a 	mov	sp,fp
   43384:	df000017 	ldw	fp,0(sp)
   43388:	dec00104 	addi	sp,sp,4
   4338c:	f800283a 	ret

00043390 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   43390:	defff904 	addi	sp,sp,-28
   43394:	dfc00615 	stw	ra,24(sp)
   43398:	df000515 	stw	fp,20(sp)
   4339c:	df000504 	addi	fp,sp,20
   433a0:	e13ffc15 	stw	r4,-16(fp)
   433a4:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   433a8:	e0bffc17 	ldw	r2,-16(fp)
   433ac:	1004803a 	cmplt	r2,r2,zero
   433b0:	1000081e 	bne	r2,zero,433d4 <fstat+0x44>
   433b4:	e0bffc17 	ldw	r2,-16(fp)
   433b8:	10800324 	muli	r2,r2,12
   433bc:	1007883a 	mov	r3,r2
   433c0:	00900034 	movhi	r2,16384
   433c4:	10822204 	addi	r2,r2,2184
   433c8:	1887883a 	add	r3,r3,r2
   433cc:	e0ffff15 	stw	r3,-4(fp)
   433d0:	00000106 	br	433d8 <fstat+0x48>
   433d4:	e03fff15 	stw	zero,-4(fp)
   433d8:	e0bfff17 	ldw	r2,-4(fp)
   433dc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   433e0:	e0bffb17 	ldw	r2,-20(fp)
   433e4:	1005003a 	cmpeq	r2,r2,zero
   433e8:	1000121e 	bne	r2,zero,43434 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   433ec:	e0bffb17 	ldw	r2,-20(fp)
   433f0:	10800017 	ldw	r2,0(r2)
   433f4:	10800817 	ldw	r2,32(r2)
   433f8:	1005003a 	cmpeq	r2,r2,zero
   433fc:	1000081e 	bne	r2,zero,43420 <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
   43400:	e0bffb17 	ldw	r2,-20(fp)
   43404:	10800017 	ldw	r2,0(r2)
   43408:	10800817 	ldw	r2,32(r2)
   4340c:	e13ffb17 	ldw	r4,-20(fp)
   43410:	e17ffd17 	ldw	r5,-12(fp)
   43414:	103ee83a 	callr	r2
   43418:	e0bffe15 	stw	r2,-8(fp)
   4341c:	00000b06 	br	4344c <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   43420:	e0fffd17 	ldw	r3,-12(fp)
   43424:	00880004 	movi	r2,8192
   43428:	18800115 	stw	r2,4(r3)
      return 0;
   4342c:	e03ffe15 	stw	zero,-8(fp)
   43430:	00000606 	br	4344c <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   43434:	00434640 	call	43464 <alt_get_errno>
   43438:	1007883a 	mov	r3,r2
   4343c:	00801444 	movi	r2,81
   43440:	18800015 	stw	r2,0(r3)
    return -1;
   43444:	00bfffc4 	movi	r2,-1
   43448:	e0bffe15 	stw	r2,-8(fp)
   4344c:	e0bffe17 	ldw	r2,-8(fp)
  }
}
   43450:	e037883a 	mov	sp,fp
   43454:	dfc00117 	ldw	ra,4(sp)
   43458:	df000017 	ldw	fp,0(sp)
   4345c:	dec00204 	addi	sp,sp,8
   43460:	f800283a 	ret

00043464 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   43464:	defffd04 	addi	sp,sp,-12
   43468:	dfc00215 	stw	ra,8(sp)
   4346c:	df000115 	stw	fp,4(sp)
   43470:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   43474:	00900034 	movhi	r2,16384
   43478:	1086a304 	addi	r2,r2,6796
   4347c:	10800017 	ldw	r2,0(r2)
   43480:	1005003a 	cmpeq	r2,r2,zero
   43484:	1000061e 	bne	r2,zero,434a0 <alt_get_errno+0x3c>
   43488:	00900034 	movhi	r2,16384
   4348c:	1086a304 	addi	r2,r2,6796
   43490:	10800017 	ldw	r2,0(r2)
   43494:	103ee83a 	callr	r2
   43498:	e0bfff15 	stw	r2,-4(fp)
   4349c:	00000306 	br	434ac <alt_get_errno+0x48>
   434a0:	00900034 	movhi	r2,16384
   434a4:	1086ab04 	addi	r2,r2,6828
   434a8:	e0bfff15 	stw	r2,-4(fp)
   434ac:	e0bfff17 	ldw	r2,-4(fp)
}
   434b0:	e037883a 	mov	sp,fp
   434b4:	dfc00117 	ldw	ra,4(sp)
   434b8:	df000017 	ldw	fp,0(sp)
   434bc:	dec00204 	addi	sp,sp,8
   434c0:	f800283a 	ret

000434c4 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   434c4:	deffeb04 	addi	sp,sp,-84
   434c8:	dfc01415 	stw	ra,80(sp)
   434cc:	df001315 	stw	fp,76(sp)
   434d0:	df001304 	addi	fp,sp,76
   434d4:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   434d8:	e0bffd17 	ldw	r2,-12(fp)
   434dc:	1004803a 	cmplt	r2,r2,zero
   434e0:	1000081e 	bne	r2,zero,43504 <isatty+0x40>
   434e4:	e0bffd17 	ldw	r2,-12(fp)
   434e8:	10800324 	muli	r2,r2,12
   434ec:	1007883a 	mov	r3,r2
   434f0:	00900034 	movhi	r2,16384
   434f4:	10822204 	addi	r2,r2,2184
   434f8:	1887883a 	add	r3,r3,r2
   434fc:	e0ffff15 	stw	r3,-4(fp)
   43500:	00000106 	br	43508 <isatty+0x44>
   43504:	e03fff15 	stw	zero,-4(fp)
   43508:	e0bfff17 	ldw	r2,-4(fp)
   4350c:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
   43510:	e0bfed17 	ldw	r2,-76(fp)
   43514:	1005003a 	cmpeq	r2,r2,zero
   43518:	10000f1e 	bne	r2,zero,43558 <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   4351c:	e0bfed17 	ldw	r2,-76(fp)
   43520:	10800017 	ldw	r2,0(r2)
   43524:	10800817 	ldw	r2,32(r2)
   43528:	1004c03a 	cmpne	r2,r2,zero
   4352c:	1000031e 	bne	r2,zero,4353c <isatty+0x78>
    {
      return 1;
   43530:	00800044 	movi	r2,1
   43534:	e0bffe15 	stw	r2,-8(fp)
   43538:	00000c06 	br	4356c <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   4353c:	e17fee04 	addi	r5,fp,-72
   43540:	e13ffd17 	ldw	r4,-12(fp)
   43544:	00433900 	call	43390 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   43548:	e0bfef17 	ldw	r2,-68(fp)
   4354c:	10880020 	cmpeqi	r2,r2,8192
   43550:	e0bffe15 	stw	r2,-8(fp)
   43554:	00000506 	br	4356c <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   43558:	00435840 	call	43584 <alt_get_errno>
   4355c:	1007883a 	mov	r3,r2
   43560:	00801444 	movi	r2,81
   43564:	18800015 	stw	r2,0(r3)
    return 0;
   43568:	e03ffe15 	stw	zero,-8(fp)
   4356c:	e0bffe17 	ldw	r2,-8(fp)
  }
}
   43570:	e037883a 	mov	sp,fp
   43574:	dfc00117 	ldw	ra,4(sp)
   43578:	df000017 	ldw	fp,0(sp)
   4357c:	dec00204 	addi	sp,sp,8
   43580:	f800283a 	ret

00043584 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   43584:	defffd04 	addi	sp,sp,-12
   43588:	dfc00215 	stw	ra,8(sp)
   4358c:	df000115 	stw	fp,4(sp)
   43590:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   43594:	00900034 	movhi	r2,16384
   43598:	1086a304 	addi	r2,r2,6796
   4359c:	10800017 	ldw	r2,0(r2)
   435a0:	1005003a 	cmpeq	r2,r2,zero
   435a4:	1000061e 	bne	r2,zero,435c0 <alt_get_errno+0x3c>
   435a8:	00900034 	movhi	r2,16384
   435ac:	1086a304 	addi	r2,r2,6796
   435b0:	10800017 	ldw	r2,0(r2)
   435b4:	103ee83a 	callr	r2
   435b8:	e0bfff15 	stw	r2,-4(fp)
   435bc:	00000306 	br	435cc <alt_get_errno+0x48>
   435c0:	00900034 	movhi	r2,16384
   435c4:	1086ab04 	addi	r2,r2,6828
   435c8:	e0bfff15 	stw	r2,-4(fp)
   435cc:	e0bfff17 	ldw	r2,-4(fp)
}
   435d0:	e037883a 	mov	sp,fp
   435d4:	dfc00117 	ldw	ra,4(sp)
   435d8:	df000017 	ldw	fp,0(sp)
   435dc:	dec00204 	addi	sp,sp,8
   435e0:	f800283a 	ret

000435e4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   435e4:	defffe04 	addi	sp,sp,-8
   435e8:	dfc00115 	stw	ra,4(sp)
   435ec:	df000015 	stw	fp,0(sp)
   435f0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   435f4:	01000134 	movhi	r4,4
   435f8:	21187c04 	addi	r4,r4,25072
   435fc:	01500034 	movhi	r5,16384
   43600:	29401604 	addi	r5,r5,88
   43604:	01900034 	movhi	r6,16384
   43608:	3186a804 	addi	r6,r6,6816
   4360c:	00436640 	call	43664 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   43610:	01000134 	movhi	r4,4
   43614:	21000804 	addi	r4,r4,32
   43618:	01400134 	movhi	r5,4
   4361c:	29400804 	addi	r5,r5,32
   43620:	01800134 	movhi	r6,4
   43624:	31806d04 	addi	r6,r6,436
   43628:	00436640 	call	43664 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   4362c:	01000134 	movhi	r4,4
   43630:	21186604 	addi	r4,r4,24984
   43634:	01500034 	movhi	r5,16384
   43638:	29400004 	addi	r5,r5,0
   4363c:	01900034 	movhi	r6,16384
   43640:	31801604 	addi	r6,r6,88
   43644:	00436640 	call	43664 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   43648:	0044e640 	call	44e64 <alt_dcache_flush_all>
  alt_icache_flush_all();
   4364c:	00450840 	call	45084 <alt_icache_flush_all>
}
   43650:	e037883a 	mov	sp,fp
   43654:	dfc00117 	ldw	ra,4(sp)
   43658:	df000017 	ldw	fp,0(sp)
   4365c:	dec00204 	addi	sp,sp,8
   43660:	f800283a 	ret

00043664 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   43664:	defffc04 	addi	sp,sp,-16
   43668:	df000315 	stw	fp,12(sp)
   4366c:	df000304 	addi	fp,sp,12
   43670:	e13ffd15 	stw	r4,-12(fp)
   43674:	e17ffe15 	stw	r5,-8(fp)
   43678:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   4367c:	e0fffe17 	ldw	r3,-8(fp)
   43680:	e0bffd17 	ldw	r2,-12(fp)
   43684:	18800e26 	beq	r3,r2,436c0 <alt_load_section+0x5c>
  {
    while( to != end )
   43688:	00000a06 	br	436b4 <alt_load_section+0x50>
    {
      *to++ = *from++;
   4368c:	e0bffd17 	ldw	r2,-12(fp)
   43690:	10c00017 	ldw	r3,0(r2)
   43694:	e0bffe17 	ldw	r2,-8(fp)
   43698:	10c00015 	stw	r3,0(r2)
   4369c:	e0bffe17 	ldw	r2,-8(fp)
   436a0:	10800104 	addi	r2,r2,4
   436a4:	e0bffe15 	stw	r2,-8(fp)
   436a8:	e0bffd17 	ldw	r2,-12(fp)
   436ac:	10800104 	addi	r2,r2,4
   436b0:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   436b4:	e0fffe17 	ldw	r3,-8(fp)
   436b8:	e0bfff17 	ldw	r2,-4(fp)
   436bc:	18bff31e 	bne	r3,r2,4368c <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   436c0:	e037883a 	mov	sp,fp
   436c4:	df000017 	ldw	fp,0(sp)
   436c8:	dec00104 	addi	sp,sp,4
   436cc:	f800283a 	ret

000436d0 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   436d0:	defff804 	addi	sp,sp,-32
   436d4:	dfc00715 	stw	ra,28(sp)
   436d8:	df000615 	stw	fp,24(sp)
   436dc:	df000604 	addi	fp,sp,24
   436e0:	e13ffc15 	stw	r4,-16(fp)
   436e4:	e17ffd15 	stw	r5,-12(fp)
   436e8:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   436ec:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   436f0:	e0bffc17 	ldw	r2,-16(fp)
   436f4:	1004803a 	cmplt	r2,r2,zero
   436f8:	1000081e 	bne	r2,zero,4371c <lseek+0x4c>
   436fc:	e0bffc17 	ldw	r2,-16(fp)
   43700:	10800324 	muli	r2,r2,12
   43704:	1007883a 	mov	r3,r2
   43708:	00900034 	movhi	r2,16384
   4370c:	10822204 	addi	r2,r2,2184
   43710:	1887883a 	add	r3,r3,r2
   43714:	e0ffff15 	stw	r3,-4(fp)
   43718:	00000106 	br	43720 <lseek+0x50>
   4371c:	e03fff15 	stw	zero,-4(fp)
   43720:	e0bfff17 	ldw	r2,-4(fp)
   43724:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
   43728:	e0bffb17 	ldw	r2,-20(fp)
   4372c:	1005003a 	cmpeq	r2,r2,zero
   43730:	1000111e 	bne	r2,zero,43778 <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   43734:	e0bffb17 	ldw	r2,-20(fp)
   43738:	10800017 	ldw	r2,0(r2)
   4373c:	10800717 	ldw	r2,28(r2)
   43740:	1005003a 	cmpeq	r2,r2,zero
   43744:	1000091e 	bne	r2,zero,4376c <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   43748:	e0bffb17 	ldw	r2,-20(fp)
   4374c:	10800017 	ldw	r2,0(r2)
   43750:	10800717 	ldw	r2,28(r2)
   43754:	e13ffb17 	ldw	r4,-20(fp)
   43758:	e17ffd17 	ldw	r5,-12(fp)
   4375c:	e1bffe17 	ldw	r6,-8(fp)
   43760:	103ee83a 	callr	r2
   43764:	e0bffa15 	stw	r2,-24(fp)
   43768:	00000506 	br	43780 <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   4376c:	00bfde84 	movi	r2,-134
   43770:	e0bffa15 	stw	r2,-24(fp)
   43774:	00000206 	br	43780 <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
   43778:	00bfebc4 	movi	r2,-81
   4377c:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
   43780:	e0bffa17 	ldw	r2,-24(fp)
   43784:	1004403a 	cmpge	r2,r2,zero
   43788:	1000071e 	bne	r2,zero,437a8 <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
   4378c:	00437c00 	call	437c0 <alt_get_errno>
   43790:	1007883a 	mov	r3,r2
   43794:	e0bffa17 	ldw	r2,-24(fp)
   43798:	0085c83a 	sub	r2,zero,r2
   4379c:	18800015 	stw	r2,0(r3)
    rc = -1;
   437a0:	00bfffc4 	movi	r2,-1
   437a4:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
   437a8:	e0bffa17 	ldw	r2,-24(fp)
}
   437ac:	e037883a 	mov	sp,fp
   437b0:	dfc00117 	ldw	ra,4(sp)
   437b4:	df000017 	ldw	fp,0(sp)
   437b8:	dec00204 	addi	sp,sp,8
   437bc:	f800283a 	ret

000437c0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   437c0:	defffd04 	addi	sp,sp,-12
   437c4:	dfc00215 	stw	ra,8(sp)
   437c8:	df000115 	stw	fp,4(sp)
   437cc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   437d0:	00900034 	movhi	r2,16384
   437d4:	1086a304 	addi	r2,r2,6796
   437d8:	10800017 	ldw	r2,0(r2)
   437dc:	1005003a 	cmpeq	r2,r2,zero
   437e0:	1000061e 	bne	r2,zero,437fc <alt_get_errno+0x3c>
   437e4:	00900034 	movhi	r2,16384
   437e8:	1086a304 	addi	r2,r2,6796
   437ec:	10800017 	ldw	r2,0(r2)
   437f0:	103ee83a 	callr	r2
   437f4:	e0bfff15 	stw	r2,-4(fp)
   437f8:	00000306 	br	43808 <alt_get_errno+0x48>
   437fc:	00900034 	movhi	r2,16384
   43800:	1086ab04 	addi	r2,r2,6828
   43804:	e0bfff15 	stw	r2,-4(fp)
   43808:	e0bfff17 	ldw	r2,-4(fp)
}
   4380c:	e037883a 	mov	sp,fp
   43810:	dfc00117 	ldw	ra,4(sp)
   43814:	df000017 	ldw	fp,0(sp)
   43818:	dec00204 	addi	sp,sp,8
   4381c:	f800283a 	ret

00043820 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   43820:	defffd04 	addi	sp,sp,-12
   43824:	dfc00215 	stw	ra,8(sp)
   43828:	df000115 	stw	fp,4(sp)
   4382c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   43830:	0009883a 	mov	r4,zero
   43834:	0043d180 	call	43d18 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   43838:	0043d4c0 	call	43d4c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   4383c:	01100034 	movhi	r4,16384
   43840:	21000e04 	addi	r4,r4,56
   43844:	01500034 	movhi	r5,16384
   43848:	29400e04 	addi	r5,r5,56
   4384c:	01900034 	movhi	r6,16384
   43850:	31800e04 	addi	r6,r6,56
   43854:	00454440 	call	45444 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   43858:	0044fbc0 	call	44fbc <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   4385c:	01000134 	movhi	r4,4
   43860:	21140804 	addi	r4,r4,20512
   43864:	0045c400 	call	45c40 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   43868:	d1201217 	ldw	r4,-32696(gp)
   4386c:	d1601317 	ldw	r5,-32692(gp)
   43870:	d1a01417 	ldw	r6,-32688(gp)
   43874:	00408280 	call	40828 <main>
   43878:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   4387c:	01000044 	movi	r4,1
   43880:	00432080 	call	43208 <close>
  exit (result);
   43884:	e13fff17 	ldw	r4,-4(fp)
   43888:	0045c540 	call	45c54 <exit>

0004388c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   4388c:	defffe04 	addi	sp,sp,-8
   43890:	df000115 	stw	fp,4(sp)
   43894:	df000104 	addi	fp,sp,4
   43898:	e13fff15 	stw	r4,-4(fp)
}
   4389c:	e037883a 	mov	sp,fp
   438a0:	df000017 	ldw	fp,0(sp)
   438a4:	dec00104 	addi	sp,sp,4
   438a8:	f800283a 	ret

000438ac <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   438ac:	defffe04 	addi	sp,sp,-8
   438b0:	df000115 	stw	fp,4(sp)
   438b4:	df000104 	addi	fp,sp,4
   438b8:	e13fff15 	stw	r4,-4(fp)
}
   438bc:	e037883a 	mov	sp,fp
   438c0:	df000017 	ldw	fp,0(sp)
   438c4:	dec00104 	addi	sp,sp,4
   438c8:	f800283a 	ret

000438cc <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   438cc:	defff704 	addi	sp,sp,-36
   438d0:	dfc00815 	stw	ra,32(sp)
   438d4:	df000715 	stw	fp,28(sp)
   438d8:	df000704 	addi	fp,sp,28
   438dc:	e13ffb15 	stw	r4,-20(fp)
   438e0:	e17ffc15 	stw	r5,-16(fp)
   438e4:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   438e8:	e0bffb17 	ldw	r2,-20(fp)
   438ec:	1004803a 	cmplt	r2,r2,zero
   438f0:	1000081e 	bne	r2,zero,43914 <read+0x48>
   438f4:	e0bffb17 	ldw	r2,-20(fp)
   438f8:	10800324 	muli	r2,r2,12
   438fc:	1007883a 	mov	r3,r2
   43900:	00900034 	movhi	r2,16384
   43904:	10822204 	addi	r2,r2,2184
   43908:	1887883a 	add	r3,r3,r2
   4390c:	e0ffff15 	stw	r3,-4(fp)
   43910:	00000106 	br	43918 <read+0x4c>
   43914:	e03fff15 	stw	zero,-4(fp)
   43918:	e0bfff17 	ldw	r2,-4(fp)
   4391c:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   43920:	e0bffa17 	ldw	r2,-24(fp)
   43924:	1005003a 	cmpeq	r2,r2,zero
   43928:	1000241e 	bne	r2,zero,439bc <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   4392c:	e0bffa17 	ldw	r2,-24(fp)
   43930:	10800217 	ldw	r2,8(r2)
   43934:	108000cc 	andi	r2,r2,3
   43938:	10800060 	cmpeqi	r2,r2,1
   4393c:	10001a1e 	bne	r2,zero,439a8 <read+0xdc>
   43940:	e0bffa17 	ldw	r2,-24(fp)
   43944:	10800017 	ldw	r2,0(r2)
   43948:	10800517 	ldw	r2,20(r2)
   4394c:	1005003a 	cmpeq	r2,r2,zero
   43950:	1000151e 	bne	r2,zero,439a8 <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   43954:	e0bffa17 	ldw	r2,-24(fp)
   43958:	10800017 	ldw	r2,0(r2)
   4395c:	10800517 	ldw	r2,20(r2)
   43960:	e17ffc17 	ldw	r5,-16(fp)
   43964:	e1bffd17 	ldw	r6,-12(fp)
   43968:	e13ffa17 	ldw	r4,-24(fp)
   4396c:	103ee83a 	callr	r2
   43970:	e0bff915 	stw	r2,-28(fp)
   43974:	e0bff917 	ldw	r2,-28(fp)
   43978:	1004403a 	cmpge	r2,r2,zero
   4397c:	1000071e 	bne	r2,zero,4399c <read+0xd0>
        {
          ALT_ERRNO = -rval;
   43980:	00439ec0 	call	439ec <alt_get_errno>
   43984:	e0fff917 	ldw	r3,-28(fp)
   43988:	00c7c83a 	sub	r3,zero,r3
   4398c:	10c00015 	stw	r3,0(r2)
          return -1;
   43990:	00bfffc4 	movi	r2,-1
   43994:	e0bffe15 	stw	r2,-8(fp)
   43998:	00000e06 	br	439d4 <read+0x108>
        }
        return rval;
   4399c:	e0bff917 	ldw	r2,-28(fp)
   439a0:	e0bffe15 	stw	r2,-8(fp)
   439a4:	00000b06 	br	439d4 <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
   439a8:	00439ec0 	call	439ec <alt_get_errno>
   439ac:	1007883a 	mov	r3,r2
   439b0:	00800344 	movi	r2,13
   439b4:	18800015 	stw	r2,0(r3)
   439b8:	00000406 	br	439cc <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   439bc:	00439ec0 	call	439ec <alt_get_errno>
   439c0:	1007883a 	mov	r3,r2
   439c4:	00801444 	movi	r2,81
   439c8:	18800015 	stw	r2,0(r3)
  }
  return -1;
   439cc:	00bfffc4 	movi	r2,-1
   439d0:	e0bffe15 	stw	r2,-8(fp)
   439d4:	e0bffe17 	ldw	r2,-8(fp)
}
   439d8:	e037883a 	mov	sp,fp
   439dc:	dfc00117 	ldw	ra,4(sp)
   439e0:	df000017 	ldw	fp,0(sp)
   439e4:	dec00204 	addi	sp,sp,8
   439e8:	f800283a 	ret

000439ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   439ec:	defffd04 	addi	sp,sp,-12
   439f0:	dfc00215 	stw	ra,8(sp)
   439f4:	df000115 	stw	fp,4(sp)
   439f8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   439fc:	00900034 	movhi	r2,16384
   43a00:	1086a304 	addi	r2,r2,6796
   43a04:	10800017 	ldw	r2,0(r2)
   43a08:	1005003a 	cmpeq	r2,r2,zero
   43a0c:	1000061e 	bne	r2,zero,43a28 <alt_get_errno+0x3c>
   43a10:	00900034 	movhi	r2,16384
   43a14:	1086a304 	addi	r2,r2,6796
   43a18:	10800017 	ldw	r2,0(r2)
   43a1c:	103ee83a 	callr	r2
   43a20:	e0bfff15 	stw	r2,-4(fp)
   43a24:	00000306 	br	43a34 <alt_get_errno+0x48>
   43a28:	00900034 	movhi	r2,16384
   43a2c:	1086ab04 	addi	r2,r2,6828
   43a30:	e0bfff15 	stw	r2,-4(fp)
   43a34:	e0bfff17 	ldw	r2,-4(fp)
}
   43a38:	e037883a 	mov	sp,fp
   43a3c:	dfc00117 	ldw	ra,4(sp)
   43a40:	df000017 	ldw	fp,0(sp)
   43a44:	dec00204 	addi	sp,sp,8
   43a48:	f800283a 	ret

00043a4c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   43a4c:	defffe04 	addi	sp,sp,-8
   43a50:	df000115 	stw	fp,4(sp)
   43a54:	df000104 	addi	fp,sp,4
   43a58:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   43a5c:	e0bfff17 	ldw	r2,-4(fp)
   43a60:	108000d0 	cmplti	r2,r2,3
   43a64:	10000d1e 	bne	r2,zero,43a9c <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   43a68:	e0bfff17 	ldw	r2,-4(fp)
   43a6c:	00d00034 	movhi	r3,16384
   43a70:	18c22204 	addi	r3,r3,2184
   43a74:	10800324 	muli	r2,r2,12
   43a78:	10c5883a 	add	r2,r2,r3
   43a7c:	10800204 	addi	r2,r2,8
   43a80:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   43a84:	e0bfff17 	ldw	r2,-4(fp)
   43a88:	00d00034 	movhi	r3,16384
   43a8c:	18c22204 	addi	r3,r3,2184
   43a90:	10800324 	muli	r2,r2,12
   43a94:	10c5883a 	add	r2,r2,r3
   43a98:	10000015 	stw	zero,0(r2)
  }
}
   43a9c:	e037883a 	mov	sp,fp
   43aa0:	df000017 	ldw	fp,0(sp)
   43aa4:	dec00104 	addi	sp,sp,4
   43aa8:	f800283a 	ret

00043aac <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   43aac:	defff804 	addi	sp,sp,-32
   43ab0:	df000715 	stw	fp,28(sp)
   43ab4:	df000704 	addi	fp,sp,28
   43ab8:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   43abc:	0005303a 	rdctl	r2,status
   43ac0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   43ac4:	e0fffb17 	ldw	r3,-20(fp)
   43ac8:	00bfff84 	movi	r2,-2
   43acc:	1884703a 	and	r2,r3,r2
   43ad0:	1001703a 	wrctl	status,r2
  
  return context;
   43ad4:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   43ad8:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   43adc:	d0a00a17 	ldw	r2,-32728(gp)
   43ae0:	10c000c4 	addi	r3,r2,3
   43ae4:	00bfff04 	movi	r2,-4
   43ae8:	1884703a 	and	r2,r3,r2
   43aec:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   43af0:	d0e00a17 	ldw	r3,-32728(gp)
   43af4:	e0bffe17 	ldw	r2,-8(fp)
   43af8:	1887883a 	add	r3,r3,r2
   43afc:	00a00034 	movhi	r2,32768
   43b00:	10800004 	addi	r2,r2,0
   43b04:	10c0072e 	bgeu	r2,r3,43b24 <sbrk+0x78>
   43b08:	e0bffd17 	ldw	r2,-12(fp)
   43b0c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   43b10:	e0bffa17 	ldw	r2,-24(fp)
   43b14:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   43b18:	00bfffc4 	movi	r2,-1
   43b1c:	e0bfff15 	stw	r2,-4(fp)
   43b20:	00000c06 	br	43b54 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
   43b24:	d0a00a17 	ldw	r2,-32728(gp)
   43b28:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
   43b2c:	d0e00a17 	ldw	r3,-32728(gp)
   43b30:	e0bffe17 	ldw	r2,-8(fp)
   43b34:	1885883a 	add	r2,r3,r2
   43b38:	d0a00a15 	stw	r2,-32728(gp)
   43b3c:	e0bffd17 	ldw	r2,-12(fp)
   43b40:	e0bff915 	stw	r2,-28(fp)
   43b44:	e0bff917 	ldw	r2,-28(fp)
   43b48:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   43b4c:	e0bffc17 	ldw	r2,-16(fp)
   43b50:	e0bfff15 	stw	r2,-4(fp)
   43b54:	e0bfff17 	ldw	r2,-4(fp)
} 
   43b58:	e037883a 	mov	sp,fp
   43b5c:	df000017 	ldw	fp,0(sp)
   43b60:	dec00104 	addi	sp,sp,4
   43b64:	f800283a 	ret

00043b68 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   43b68:	defffd04 	addi	sp,sp,-12
   43b6c:	dfc00215 	stw	ra,8(sp)
   43b70:	df000115 	stw	fp,4(sp)
   43b74:	df000104 	addi	fp,sp,4
   43b78:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   43b7c:	e13fff17 	ldw	r4,-4(fp)
   43b80:	0044d180 	call	44d18 <alt_busy_sleep>
}
   43b84:	e037883a 	mov	sp,fp
   43b88:	dfc00117 	ldw	ra,4(sp)
   43b8c:	df000017 	ldw	fp,0(sp)
   43b90:	dec00204 	addi	sp,sp,8
   43b94:	f800283a 	ret

00043b98 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   43b98:	defff704 	addi	sp,sp,-36
   43b9c:	dfc00815 	stw	ra,32(sp)
   43ba0:	df000715 	stw	fp,28(sp)
   43ba4:	df000704 	addi	fp,sp,28
   43ba8:	e13ffb15 	stw	r4,-20(fp)
   43bac:	e17ffc15 	stw	r5,-16(fp)
   43bb0:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   43bb4:	e0bffb17 	ldw	r2,-20(fp)
   43bb8:	1004803a 	cmplt	r2,r2,zero
   43bbc:	1000081e 	bne	r2,zero,43be0 <write+0x48>
   43bc0:	e0bffb17 	ldw	r2,-20(fp)
   43bc4:	10800324 	muli	r2,r2,12
   43bc8:	1007883a 	mov	r3,r2
   43bcc:	00900034 	movhi	r2,16384
   43bd0:	10822204 	addi	r2,r2,2184
   43bd4:	1887883a 	add	r3,r3,r2
   43bd8:	e0ffff15 	stw	r3,-4(fp)
   43bdc:	00000106 	br	43be4 <write+0x4c>
   43be0:	e03fff15 	stw	zero,-4(fp)
   43be4:	e0bfff17 	ldw	r2,-4(fp)
   43be8:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   43bec:	e0bffa17 	ldw	r2,-24(fp)
   43bf0:	1005003a 	cmpeq	r2,r2,zero
   43bf4:	1000241e 	bne	r2,zero,43c88 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   43bf8:	e0bffa17 	ldw	r2,-24(fp)
   43bfc:	10800217 	ldw	r2,8(r2)
   43c00:	108000cc 	andi	r2,r2,3
   43c04:	1005003a 	cmpeq	r2,r2,zero
   43c08:	10001a1e 	bne	r2,zero,43c74 <write+0xdc>
   43c0c:	e0bffa17 	ldw	r2,-24(fp)
   43c10:	10800017 	ldw	r2,0(r2)
   43c14:	10800617 	ldw	r2,24(r2)
   43c18:	1005003a 	cmpeq	r2,r2,zero
   43c1c:	1000151e 	bne	r2,zero,43c74 <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   43c20:	e0bffa17 	ldw	r2,-24(fp)
   43c24:	10800017 	ldw	r2,0(r2)
   43c28:	10800617 	ldw	r2,24(r2)
   43c2c:	e17ffc17 	ldw	r5,-16(fp)
   43c30:	e1bffd17 	ldw	r6,-12(fp)
   43c34:	e13ffa17 	ldw	r4,-24(fp)
   43c38:	103ee83a 	callr	r2
   43c3c:	e0bff915 	stw	r2,-28(fp)
   43c40:	e0bff917 	ldw	r2,-28(fp)
   43c44:	1004403a 	cmpge	r2,r2,zero
   43c48:	1000071e 	bne	r2,zero,43c68 <write+0xd0>
      {
        ALT_ERRNO = -rval;
   43c4c:	0043cb80 	call	43cb8 <alt_get_errno>
   43c50:	e0fff917 	ldw	r3,-28(fp)
   43c54:	00c7c83a 	sub	r3,zero,r3
   43c58:	10c00015 	stw	r3,0(r2)
        return -1;
   43c5c:	00bfffc4 	movi	r2,-1
   43c60:	e0bffe15 	stw	r2,-8(fp)
   43c64:	00000e06 	br	43ca0 <write+0x108>
      }
      return rval;
   43c68:	e0bff917 	ldw	r2,-28(fp)
   43c6c:	e0bffe15 	stw	r2,-8(fp)
   43c70:	00000b06 	br	43ca0 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
   43c74:	0043cb80 	call	43cb8 <alt_get_errno>
   43c78:	1007883a 	mov	r3,r2
   43c7c:	00800344 	movi	r2,13
   43c80:	18800015 	stw	r2,0(r3)
   43c84:	00000406 	br	43c98 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   43c88:	0043cb80 	call	43cb8 <alt_get_errno>
   43c8c:	1007883a 	mov	r3,r2
   43c90:	00801444 	movi	r2,81
   43c94:	18800015 	stw	r2,0(r3)
  }
  return -1;
   43c98:	00bfffc4 	movi	r2,-1
   43c9c:	e0bffe15 	stw	r2,-8(fp)
   43ca0:	e0bffe17 	ldw	r2,-8(fp)
}
   43ca4:	e037883a 	mov	sp,fp
   43ca8:	dfc00117 	ldw	ra,4(sp)
   43cac:	df000017 	ldw	fp,0(sp)
   43cb0:	dec00204 	addi	sp,sp,8
   43cb4:	f800283a 	ret

00043cb8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   43cb8:	defffd04 	addi	sp,sp,-12
   43cbc:	dfc00215 	stw	ra,8(sp)
   43cc0:	df000115 	stw	fp,4(sp)
   43cc4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   43cc8:	00900034 	movhi	r2,16384
   43ccc:	1086a304 	addi	r2,r2,6796
   43cd0:	10800017 	ldw	r2,0(r2)
   43cd4:	1005003a 	cmpeq	r2,r2,zero
   43cd8:	1000061e 	bne	r2,zero,43cf4 <alt_get_errno+0x3c>
   43cdc:	00900034 	movhi	r2,16384
   43ce0:	1086a304 	addi	r2,r2,6796
   43ce4:	10800017 	ldw	r2,0(r2)
   43ce8:	103ee83a 	callr	r2
   43cec:	e0bfff15 	stw	r2,-4(fp)
   43cf0:	00000306 	br	43d00 <alt_get_errno+0x48>
   43cf4:	00900034 	movhi	r2,16384
   43cf8:	1086ab04 	addi	r2,r2,6828
   43cfc:	e0bfff15 	stw	r2,-4(fp)
   43d00:	e0bfff17 	ldw	r2,-4(fp)
}
   43d04:	e037883a 	mov	sp,fp
   43d08:	dfc00117 	ldw	ra,4(sp)
   43d0c:	df000017 	ldw	fp,0(sp)
   43d10:	dec00204 	addi	sp,sp,8
   43d14:	f800283a 	ret

00043d18 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   43d18:	defffd04 	addi	sp,sp,-12
   43d1c:	dfc00215 	stw	ra,8(sp)
   43d20:	df000115 	stw	fp,4(sp)
   43d24:	df000104 	addi	fp,sp,4
   43d28:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS, nios2_qsys);
   43d2c:	00459240 	call	45924 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   43d30:	00800044 	movi	r2,1
   43d34:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   43d38:	e037883a 	mov	sp,fp
   43d3c:	dfc00117 	ldw	ra,4(sp)
   43d40:	df000017 	ldw	fp,0(sp)
   43d44:	dec00204 	addi	sp,sp,8
   43d48:	f800283a 	ret

00043d4c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   43d4c:	defffe04 	addi	sp,sp,-8
   43d50:	dfc00115 	stw	ra,4(sp)
   43d54:	df000015 	stw	fp,0(sp)
   43d58:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
   43d5c:	01004034 	movhi	r4,256
   43d60:	21001004 	addi	r4,r4,64
   43d64:	000b883a 	mov	r5,zero
   43d68:	01800044 	movi	r6,1
   43d6c:	01c0fa04 	movi	r7,1000
   43d70:	0044b340 	call	44b34 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   43d74:	01100034 	movhi	r4,16384
   43d78:	21028c04 	addi	r4,r4,2608
   43d7c:	000b883a 	mov	r5,zero
   43d80:	000d883a 	mov	r6,zero
   43d84:	0043f280 	call	43f28 <altera_avalon_jtag_uart_init>
   43d88:	01100034 	movhi	r4,16384
   43d8c:	21028204 	addi	r4,r4,2568
   43d90:	0043da80 	call	43da8 <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SPI_1, spi_1);
    ALTERA_AVALON_SPI_INIT ( SPI_2, spi_2);
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
}
   43d94:	e037883a 	mov	sp,fp
   43d98:	dfc00117 	ldw	ra,4(sp)
   43d9c:	df000017 	ldw	fp,0(sp)
   43da0:	dec00204 	addi	sp,sp,8
   43da4:	f800283a 	ret

00043da8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   43da8:	defffd04 	addi	sp,sp,-12
   43dac:	dfc00215 	stw	ra,8(sp)
   43db0:	df000115 	stw	fp,4(sp)
   43db4:	df000104 	addi	fp,sp,4
   43db8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   43dbc:	e13fff17 	ldw	r4,-4(fp)
   43dc0:	01500034 	movhi	r5,16384
   43dc4:	2946a004 	addi	r5,r5,6784
   43dc8:	0044ea80 	call	44ea8 <alt_dev_llist_insert>
}
   43dcc:	e037883a 	mov	sp,fp
   43dd0:	dfc00117 	ldw	ra,4(sp)
   43dd4:	df000017 	ldw	fp,0(sp)
   43dd8:	dec00204 	addi	sp,sp,8
   43ddc:	f800283a 	ret

00043de0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   43de0:	defffa04 	addi	sp,sp,-24
   43de4:	dfc00515 	stw	ra,20(sp)
   43de8:	df000415 	stw	fp,16(sp)
   43dec:	df000404 	addi	fp,sp,16
   43df0:	e13ffd15 	stw	r4,-12(fp)
   43df4:	e17ffe15 	stw	r5,-8(fp)
   43df8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   43dfc:	e0bffd17 	ldw	r2,-12(fp)
   43e00:	10800017 	ldw	r2,0(r2)
   43e04:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   43e08:	e0bffc17 	ldw	r2,-16(fp)
   43e0c:	11000a04 	addi	r4,r2,40
   43e10:	e0bffd17 	ldw	r2,-12(fp)
   43e14:	11c00217 	ldw	r7,8(r2)
   43e18:	e17ffe17 	ldw	r5,-8(fp)
   43e1c:	e1bfff17 	ldw	r6,-4(fp)
   43e20:	00444280 	call	44428 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   43e24:	e037883a 	mov	sp,fp
   43e28:	dfc00117 	ldw	ra,4(sp)
   43e2c:	df000017 	ldw	fp,0(sp)
   43e30:	dec00204 	addi	sp,sp,8
   43e34:	f800283a 	ret

00043e38 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   43e38:	defffa04 	addi	sp,sp,-24
   43e3c:	dfc00515 	stw	ra,20(sp)
   43e40:	df000415 	stw	fp,16(sp)
   43e44:	df000404 	addi	fp,sp,16
   43e48:	e13ffd15 	stw	r4,-12(fp)
   43e4c:	e17ffe15 	stw	r5,-8(fp)
   43e50:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   43e54:	e0bffd17 	ldw	r2,-12(fp)
   43e58:	10800017 	ldw	r2,0(r2)
   43e5c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   43e60:	e0bffc17 	ldw	r2,-16(fp)
   43e64:	11000a04 	addi	r4,r2,40
   43e68:	e0bffd17 	ldw	r2,-12(fp)
   43e6c:	11c00217 	ldw	r7,8(r2)
   43e70:	e17ffe17 	ldw	r5,-8(fp)
   43e74:	e1bfff17 	ldw	r6,-4(fp)
   43e78:	004464c0 	call	4464c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   43e7c:	e037883a 	mov	sp,fp
   43e80:	dfc00117 	ldw	ra,4(sp)
   43e84:	df000017 	ldw	fp,0(sp)
   43e88:	dec00204 	addi	sp,sp,8
   43e8c:	f800283a 	ret

00043e90 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   43e90:	defffc04 	addi	sp,sp,-16
   43e94:	dfc00315 	stw	ra,12(sp)
   43e98:	df000215 	stw	fp,8(sp)
   43e9c:	df000204 	addi	fp,sp,8
   43ea0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   43ea4:	e0bfff17 	ldw	r2,-4(fp)
   43ea8:	10800017 	ldw	r2,0(r2)
   43eac:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   43eb0:	e0bffe17 	ldw	r2,-8(fp)
   43eb4:	11000a04 	addi	r4,r2,40
   43eb8:	e0bfff17 	ldw	r2,-4(fp)
   43ebc:	11400217 	ldw	r5,8(r2)
   43ec0:	00442c00 	call	442c0 <altera_avalon_jtag_uart_close>
}
   43ec4:	e037883a 	mov	sp,fp
   43ec8:	dfc00117 	ldw	ra,4(sp)
   43ecc:	df000017 	ldw	fp,0(sp)
   43ed0:	dec00204 	addi	sp,sp,8
   43ed4:	f800283a 	ret

00043ed8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   43ed8:	defffa04 	addi	sp,sp,-24
   43edc:	dfc00515 	stw	ra,20(sp)
   43ee0:	df000415 	stw	fp,16(sp)
   43ee4:	df000404 	addi	fp,sp,16
   43ee8:	e13ffd15 	stw	r4,-12(fp)
   43eec:	e17ffe15 	stw	r5,-8(fp)
   43ef0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   43ef4:	e0bffd17 	ldw	r2,-12(fp)
   43ef8:	10800017 	ldw	r2,0(r2)
   43efc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   43f00:	e0bffc17 	ldw	r2,-16(fp)
   43f04:	11000a04 	addi	r4,r2,40
   43f08:	e17ffe17 	ldw	r5,-8(fp)
   43f0c:	e1bfff17 	ldw	r6,-4(fp)
   43f10:	00443340 	call	44334 <altera_avalon_jtag_uart_ioctl>
}
   43f14:	e037883a 	mov	sp,fp
   43f18:	dfc00117 	ldw	ra,4(sp)
   43f1c:	df000017 	ldw	fp,0(sp)
   43f20:	dec00204 	addi	sp,sp,8
   43f24:	f800283a 	ret

00043f28 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   43f28:	defffa04 	addi	sp,sp,-24
   43f2c:	dfc00515 	stw	ra,20(sp)
   43f30:	df000415 	stw	fp,16(sp)
   43f34:	df000404 	addi	fp,sp,16
   43f38:	e13ffd15 	stw	r4,-12(fp)
   43f3c:	e17ffe15 	stw	r5,-8(fp)
   43f40:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   43f44:	e0fffd17 	ldw	r3,-12(fp)
   43f48:	00800044 	movi	r2,1
   43f4c:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   43f50:	e0bffd17 	ldw	r2,-12(fp)
   43f54:	10800017 	ldw	r2,0(r2)
   43f58:	11000104 	addi	r4,r2,4
   43f5c:	e0bffd17 	ldw	r2,-12(fp)
   43f60:	10800817 	ldw	r2,32(r2)
   43f64:	1007883a 	mov	r3,r2
   43f68:	2005883a 	mov	r2,r4
   43f6c:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   43f70:	e13ffe17 	ldw	r4,-8(fp)
   43f74:	e17fff17 	ldw	r5,-4(fp)
   43f78:	d8000015 	stw	zero,0(sp)
   43f7c:	01800134 	movhi	r6,4
   43f80:	318ffa04 	addi	r6,r6,16360
   43f84:	e1fffd17 	ldw	r7,-12(fp)
   43f88:	00450b40 	call	450b4 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   43f8c:	e0bffd17 	ldw	r2,-12(fp)
   43f90:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   43f94:	e0bffd17 	ldw	r2,-12(fp)
   43f98:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   43f9c:	00900034 	movhi	r2,16384
   43fa0:	1086b004 	addi	r2,r2,6848
   43fa4:	10800017 	ldw	r2,0(r2)
   43fa8:	100b883a 	mov	r5,r2
   43fac:	01800134 	movhi	r6,4
   43fb0:	31908404 	addi	r6,r6,16912
   43fb4:	e1fffd17 	ldw	r7,-12(fp)
   43fb8:	0044bc40 	call	44bc4 <alt_alarm_start>
   43fbc:	1004403a 	cmpge	r2,r2,zero
   43fc0:	1000041e 	bne	r2,zero,43fd4 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   43fc4:	e0fffd17 	ldw	r3,-12(fp)
   43fc8:	00a00034 	movhi	r2,32768
   43fcc:	10bfffc4 	addi	r2,r2,-1
   43fd0:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   43fd4:	e037883a 	mov	sp,fp
   43fd8:	dfc00117 	ldw	ra,4(sp)
   43fdc:	df000017 	ldw	fp,0(sp)
   43fe0:	dec00204 	addi	sp,sp,8
   43fe4:	f800283a 	ret

00043fe8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   43fe8:	defff804 	addi	sp,sp,-32
   43fec:	df000715 	stw	fp,28(sp)
   43ff0:	df000704 	addi	fp,sp,28
   43ff4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   43ff8:	e0bfff17 	ldw	r2,-4(fp)
   43ffc:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
   44000:	e0bffe17 	ldw	r2,-8(fp)
   44004:	10800017 	ldw	r2,0(r2)
   44008:	e0bffd15 	stw	r2,-12(fp)
   4400c:	00000006 	br	44010 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   44010:	e0bffd17 	ldw	r2,-12(fp)
   44014:	10800104 	addi	r2,r2,4
   44018:	10800037 	ldwio	r2,0(r2)
   4401c:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   44020:	e0bffc17 	ldw	r2,-16(fp)
   44024:	1080c00c 	andi	r2,r2,768
   44028:	1005003a 	cmpeq	r2,r2,zero
   4402c:	1000741e 	bne	r2,zero,44200 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   44030:	e0bffc17 	ldw	r2,-16(fp)
   44034:	1080400c 	andi	r2,r2,256
   44038:	1005003a 	cmpeq	r2,r2,zero
   4403c:	1000351e 	bne	r2,zero,44114 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   44040:	00800074 	movhi	r2,1
   44044:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   44048:	e0bffe17 	ldw	r2,-8(fp)
   4404c:	10800a17 	ldw	r2,40(r2)
   44050:	10800044 	addi	r2,r2,1
   44054:	1081ffcc 	andi	r2,r2,2047
   44058:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
   4405c:	e0bffe17 	ldw	r2,-8(fp)
   44060:	10c00b17 	ldw	r3,44(r2)
   44064:	e0bffa17 	ldw	r2,-24(fp)
   44068:	18801626 	beq	r3,r2,440c4 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   4406c:	e0bffd17 	ldw	r2,-12(fp)
   44070:	10800037 	ldwio	r2,0(r2)
   44074:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   44078:	e0bffb17 	ldw	r2,-20(fp)
   4407c:	10a0000c 	andi	r2,r2,32768
   44080:	1005003a 	cmpeq	r2,r2,zero
   44084:	10000f1e 	bne	r2,zero,440c4 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   44088:	e0bffe17 	ldw	r2,-8(fp)
   4408c:	10c00a17 	ldw	r3,40(r2)
   44090:	e0bffb17 	ldw	r2,-20(fp)
   44094:	1009883a 	mov	r4,r2
   44098:	e0bffe17 	ldw	r2,-8(fp)
   4409c:	1885883a 	add	r2,r3,r2
   440a0:	10800e04 	addi	r2,r2,56
   440a4:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   440a8:	e0bffe17 	ldw	r2,-8(fp)
   440ac:	10800a17 	ldw	r2,40(r2)
   440b0:	10800044 	addi	r2,r2,1
   440b4:	10c1ffcc 	andi	r3,r2,2047
   440b8:	e0bffe17 	ldw	r2,-8(fp)
   440bc:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   440c0:	003fe106 	br	44048 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   440c4:	e0bffb17 	ldw	r2,-20(fp)
   440c8:	10bfffec 	andhi	r2,r2,65535
   440cc:	1005003a 	cmpeq	r2,r2,zero
   440d0:	1000101e 	bne	r2,zero,44114 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   440d4:	e0bffe17 	ldw	r2,-8(fp)
   440d8:	10c00817 	ldw	r3,32(r2)
   440dc:	00bfff84 	movi	r2,-2
   440e0:	1886703a 	and	r3,r3,r2
   440e4:	e0bffe17 	ldw	r2,-8(fp)
   440e8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   440ec:	e0bffd17 	ldw	r2,-12(fp)
   440f0:	11000104 	addi	r4,r2,4
   440f4:	e0bffe17 	ldw	r2,-8(fp)
   440f8:	10800817 	ldw	r2,32(r2)
   440fc:	1007883a 	mov	r3,r2
   44100:	2005883a 	mov	r2,r4
   44104:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   44108:	e0bffd17 	ldw	r2,-12(fp)
   4410c:	10800104 	addi	r2,r2,4
   44110:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   44114:	e0bffc17 	ldw	r2,-16(fp)
   44118:	1080800c 	andi	r2,r2,512
   4411c:	1005003a 	cmpeq	r2,r2,zero
   44120:	103fbb1e 	bne	r2,zero,44010 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   44124:	e0bffc17 	ldw	r2,-16(fp)
   44128:	10bfffec 	andhi	r2,r2,65535
   4412c:	1004d43a 	srli	r2,r2,16
   44130:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   44134:	00001506 	br	4418c <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   44138:	e13ffd17 	ldw	r4,-12(fp)
   4413c:	e0bffe17 	ldw	r2,-8(fp)
   44140:	10c00d17 	ldw	r3,52(r2)
   44144:	e0bffe17 	ldw	r2,-8(fp)
   44148:	1885883a 	add	r2,r3,r2
   4414c:	10820e04 	addi	r2,r2,2104
   44150:	10800003 	ldbu	r2,0(r2)
   44154:	10c03fcc 	andi	r3,r2,255
   44158:	18c0201c 	xori	r3,r3,128
   4415c:	18ffe004 	addi	r3,r3,-128
   44160:	2005883a 	mov	r2,r4
   44164:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   44168:	e0bffe17 	ldw	r2,-8(fp)
   4416c:	10800d17 	ldw	r2,52(r2)
   44170:	10800044 	addi	r2,r2,1
   44174:	10c1ffcc 	andi	r3,r2,2047
   44178:	e0bffe17 	ldw	r2,-8(fp)
   4417c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   44180:	e0bff917 	ldw	r2,-28(fp)
   44184:	10bfffc4 	addi	r2,r2,-1
   44188:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   4418c:	e0bff917 	ldw	r2,-28(fp)
   44190:	1005003a 	cmpeq	r2,r2,zero
   44194:	1000051e 	bne	r2,zero,441ac <altera_avalon_jtag_uart_irq+0x1c4>
   44198:	e0bffe17 	ldw	r2,-8(fp)
   4419c:	10c00d17 	ldw	r3,52(r2)
   441a0:	e0bffe17 	ldw	r2,-8(fp)
   441a4:	10800c17 	ldw	r2,48(r2)
   441a8:	18bfe31e 	bne	r3,r2,44138 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   441ac:	e0bff917 	ldw	r2,-28(fp)
   441b0:	1005003a 	cmpeq	r2,r2,zero
   441b4:	103f961e 	bne	r2,zero,44010 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   441b8:	e0bffe17 	ldw	r2,-8(fp)
   441bc:	10c00817 	ldw	r3,32(r2)
   441c0:	00bfff44 	movi	r2,-3
   441c4:	1886703a 	and	r3,r3,r2
   441c8:	e0bffe17 	ldw	r2,-8(fp)
   441cc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   441d0:	e0bffe17 	ldw	r2,-8(fp)
   441d4:	10800017 	ldw	r2,0(r2)
   441d8:	11000104 	addi	r4,r2,4
   441dc:	e0bffe17 	ldw	r2,-8(fp)
   441e0:	10800817 	ldw	r2,32(r2)
   441e4:	1007883a 	mov	r3,r2
   441e8:	2005883a 	mov	r2,r4
   441ec:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   441f0:	e0bffd17 	ldw	r2,-12(fp)
   441f4:	10800104 	addi	r2,r2,4
   441f8:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   441fc:	003f8406 	br	44010 <altera_avalon_jtag_uart_irq+0x28>
}
   44200:	e037883a 	mov	sp,fp
   44204:	df000017 	ldw	fp,0(sp)
   44208:	dec00104 	addi	sp,sp,4
   4420c:	f800283a 	ret

00044210 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   44210:	defffc04 	addi	sp,sp,-16
   44214:	df000315 	stw	fp,12(sp)
   44218:	df000304 	addi	fp,sp,12
   4421c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   44220:	e0bfff17 	ldw	r2,-4(fp)
   44224:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   44228:	e0bffe17 	ldw	r2,-8(fp)
   4422c:	10800017 	ldw	r2,0(r2)
   44230:	10800104 	addi	r2,r2,4
   44234:	10800037 	ldwio	r2,0(r2)
   44238:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   4423c:	e0bffd17 	ldw	r2,-12(fp)
   44240:	1081000c 	andi	r2,r2,1024
   44244:	1005003a 	cmpeq	r2,r2,zero
   44248:	10000c1e 	bne	r2,zero,4427c <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   4424c:	e0bffe17 	ldw	r2,-8(fp)
   44250:	10800017 	ldw	r2,0(r2)
   44254:	11000104 	addi	r4,r2,4
   44258:	e0bffe17 	ldw	r2,-8(fp)
   4425c:	10800817 	ldw	r2,32(r2)
   44260:	10810014 	ori	r2,r2,1024
   44264:	1007883a 	mov	r3,r2
   44268:	2005883a 	mov	r2,r4
   4426c:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
   44270:	e0bffe17 	ldw	r2,-8(fp)
   44274:	10000915 	stw	zero,36(r2)
   44278:	00000a06 	br	442a4 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   4427c:	e0bffe17 	ldw	r2,-8(fp)
   44280:	10c00917 	ldw	r3,36(r2)
   44284:	00a00034 	movhi	r2,32768
   44288:	10bfff04 	addi	r2,r2,-4
   4428c:	10c00536 	bltu	r2,r3,442a4 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
   44290:	e0bffe17 	ldw	r2,-8(fp)
   44294:	10800917 	ldw	r2,36(r2)
   44298:	10c00044 	addi	r3,r2,1
   4429c:	e0bffe17 	ldw	r2,-8(fp)
   442a0:	10c00915 	stw	r3,36(r2)
   442a4:	00900034 	movhi	r2,16384
   442a8:	1086b004 	addi	r2,r2,6848
   442ac:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   442b0:	e037883a 	mov	sp,fp
   442b4:	df000017 	ldw	fp,0(sp)
   442b8:	dec00104 	addi	sp,sp,4
   442bc:	f800283a 	ret

000442c0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   442c0:	defffc04 	addi	sp,sp,-16
   442c4:	df000315 	stw	fp,12(sp)
   442c8:	df000304 	addi	fp,sp,12
   442cc:	e13ffd15 	stw	r4,-12(fp)
   442d0:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   442d4:	00000706 	br	442f4 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
   442d8:	e0bffe17 	ldw	r2,-8(fp)
   442dc:	1090000c 	andi	r2,r2,16384
   442e0:	1005003a 	cmpeq	r2,r2,zero
   442e4:	1000031e 	bne	r2,zero,442f4 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
   442e8:	00bffd44 	movi	r2,-11
   442ec:	e0bfff15 	stw	r2,-4(fp)
   442f0:	00000b06 	br	44320 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   442f4:	e0bffd17 	ldw	r2,-12(fp)
   442f8:	10c00d17 	ldw	r3,52(r2)
   442fc:	e0bffd17 	ldw	r2,-12(fp)
   44300:	10800c17 	ldw	r2,48(r2)
   44304:	18800526 	beq	r3,r2,4431c <altera_avalon_jtag_uart_close+0x5c>
   44308:	e0bffd17 	ldw	r2,-12(fp)
   4430c:	10c00917 	ldw	r3,36(r2)
   44310:	e0bffd17 	ldw	r2,-12(fp)
   44314:	10800117 	ldw	r2,4(r2)
   44318:	18bfef36 	bltu	r3,r2,442d8 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   4431c:	e03fff15 	stw	zero,-4(fp)
   44320:	e0bfff17 	ldw	r2,-4(fp)
}
   44324:	e037883a 	mov	sp,fp
   44328:	df000017 	ldw	fp,0(sp)
   4432c:	dec00104 	addi	sp,sp,4
   44330:	f800283a 	ret

00044334 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   44334:	defff804 	addi	sp,sp,-32
   44338:	df000715 	stw	fp,28(sp)
   4433c:	df000704 	addi	fp,sp,28
   44340:	e13ffb15 	stw	r4,-20(fp)
   44344:	e17ffc15 	stw	r5,-16(fp)
   44348:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
   4434c:	00bff9c4 	movi	r2,-25
   44350:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
   44354:	e0bffc17 	ldw	r2,-16(fp)
   44358:	e0bfff15 	stw	r2,-4(fp)
   4435c:	e0ffff17 	ldw	r3,-4(fp)
   44360:	189a8060 	cmpeqi	r2,r3,27137
   44364:	1000041e 	bne	r2,zero,44378 <altera_avalon_jtag_uart_ioctl+0x44>
   44368:	e0ffff17 	ldw	r3,-4(fp)
   4436c:	189a80a0 	cmpeqi	r2,r3,27138
   44370:	10001b1e 	bne	r2,zero,443e0 <altera_avalon_jtag_uart_ioctl+0xac>
   44374:	00002706 	br	44414 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   44378:	e0bffb17 	ldw	r2,-20(fp)
   4437c:	10c00117 	ldw	r3,4(r2)
   44380:	00a00034 	movhi	r2,32768
   44384:	10bfffc4 	addi	r2,r2,-1
   44388:	18802226 	beq	r3,r2,44414 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
   4438c:	e0bffd17 	ldw	r2,-12(fp)
   44390:	10800017 	ldw	r2,0(r2)
   44394:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   44398:	e0bff917 	ldw	r2,-28(fp)
   4439c:	10800090 	cmplti	r2,r2,2
   443a0:	1000071e 	bne	r2,zero,443c0 <altera_avalon_jtag_uart_ioctl+0x8c>
   443a4:	e0fff917 	ldw	r3,-28(fp)
   443a8:	00a00034 	movhi	r2,32768
   443ac:	10bfffc4 	addi	r2,r2,-1
   443b0:	18800326 	beq	r3,r2,443c0 <altera_avalon_jtag_uart_ioctl+0x8c>
   443b4:	e0bff917 	ldw	r2,-28(fp)
   443b8:	e0bffe15 	stw	r2,-8(fp)
   443bc:	00000306 	br	443cc <altera_avalon_jtag_uart_ioctl+0x98>
   443c0:	00e00034 	movhi	r3,32768
   443c4:	18ffff84 	addi	r3,r3,-2
   443c8:	e0fffe15 	stw	r3,-8(fp)
   443cc:	e0bffb17 	ldw	r2,-20(fp)
   443d0:	e0fffe17 	ldw	r3,-8(fp)
   443d4:	10c00115 	stw	r3,4(r2)
      rc = 0;
   443d8:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
   443dc:	00000d06 	br	44414 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   443e0:	e0bffb17 	ldw	r2,-20(fp)
   443e4:	10c00117 	ldw	r3,4(r2)
   443e8:	00a00034 	movhi	r2,32768
   443ec:	10bfffc4 	addi	r2,r2,-1
   443f0:	18800826 	beq	r3,r2,44414 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   443f4:	e13ffd17 	ldw	r4,-12(fp)
   443f8:	e0bffb17 	ldw	r2,-20(fp)
   443fc:	10c00917 	ldw	r3,36(r2)
   44400:	e0bffb17 	ldw	r2,-20(fp)
   44404:	10800117 	ldw	r2,4(r2)
   44408:	1885803a 	cmpltu	r2,r3,r2
   4440c:	20800015 	stw	r2,0(r4)
      rc = 0;
   44410:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
   44414:	e0bffa17 	ldw	r2,-24(fp)
}
   44418:	e037883a 	mov	sp,fp
   4441c:	df000017 	ldw	fp,0(sp)
   44420:	dec00104 	addi	sp,sp,4
   44424:	f800283a 	ret

00044428 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   44428:	defff204 	addi	sp,sp,-56
   4442c:	dfc00d15 	stw	ra,52(sp)
   44430:	df000c15 	stw	fp,48(sp)
   44434:	df000c04 	addi	fp,sp,48
   44438:	e13ffb15 	stw	r4,-20(fp)
   4443c:	e17ffc15 	stw	r5,-16(fp)
   44440:	e1bffd15 	stw	r6,-12(fp)
   44444:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
   44448:	e0bffc17 	ldw	r2,-16(fp)
   4444c:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   44450:	00004806 	br	44574 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   44454:	e0bffb17 	ldw	r2,-20(fp)
   44458:	10800a17 	ldw	r2,40(r2)
   4445c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   44460:	e0bffb17 	ldw	r2,-20(fp)
   44464:	10800b17 	ldw	r2,44(r2)
   44468:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
   4446c:	e0fff717 	ldw	r3,-36(fp)
   44470:	e0bff617 	ldw	r2,-40(fp)
   44474:	18800536 	bltu	r3,r2,4448c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   44478:	e0bff717 	ldw	r2,-36(fp)
   4447c:	e0fff617 	ldw	r3,-40(fp)
   44480:	10c5c83a 	sub	r2,r2,r3
   44484:	e0bff815 	stw	r2,-32(fp)
   44488:	00000406 	br	4449c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   4448c:	00820004 	movi	r2,2048
   44490:	e0fff617 	ldw	r3,-40(fp)
   44494:	10c5c83a 	sub	r2,r2,r3
   44498:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
   4449c:	e0bff817 	ldw	r2,-32(fp)
   444a0:	1005003a 	cmpeq	r2,r2,zero
   444a4:	10001f1e 	bne	r2,zero,44524 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
   444a8:	e0fffd17 	ldw	r3,-12(fp)
   444ac:	e0bff817 	ldw	r2,-32(fp)
   444b0:	1880022e 	bgeu	r3,r2,444bc <altera_avalon_jtag_uart_read+0x94>
        n = space;
   444b4:	e0bffd17 	ldw	r2,-12(fp)
   444b8:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   444bc:	e0bffb17 	ldw	r2,-20(fp)
   444c0:	10c00e04 	addi	r3,r2,56
   444c4:	e0bff617 	ldw	r2,-40(fp)
   444c8:	1887883a 	add	r3,r3,r2
   444cc:	e0bffa17 	ldw	r2,-24(fp)
   444d0:	1009883a 	mov	r4,r2
   444d4:	180b883a 	mov	r5,r3
   444d8:	e1bff817 	ldw	r6,-32(fp)
   444dc:	00416e00 	call	416e0 <memcpy>
      ptr   += n;
   444e0:	e0fff817 	ldw	r3,-32(fp)
   444e4:	e0bffa17 	ldw	r2,-24(fp)
   444e8:	10c5883a 	add	r2,r2,r3
   444ec:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
   444f0:	e0fffd17 	ldw	r3,-12(fp)
   444f4:	e0bff817 	ldw	r2,-32(fp)
   444f8:	1885c83a 	sub	r2,r3,r2
   444fc:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   44500:	e0fff617 	ldw	r3,-40(fp)
   44504:	e0bff817 	ldw	r2,-32(fp)
   44508:	1885883a 	add	r2,r3,r2
   4450c:	10c1ffcc 	andi	r3,r2,2047
   44510:	e0bffb17 	ldw	r2,-20(fp)
   44514:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   44518:	e0bffd17 	ldw	r2,-12(fp)
   4451c:	10800048 	cmpgei	r2,r2,1
   44520:	103fcc1e 	bne	r2,zero,44454 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
   44524:	e0fffa17 	ldw	r3,-24(fp)
   44528:	e0bffc17 	ldw	r2,-16(fp)
   4452c:	1880141e 	bne	r3,r2,44580 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   44530:	e0bffe17 	ldw	r2,-8(fp)
   44534:	1090000c 	andi	r2,r2,16384
   44538:	1004c03a 	cmpne	r2,r2,zero
   4453c:	1000101e 	bne	r2,zero,44580 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   44540:	e0bffb17 	ldw	r2,-20(fp)
   44544:	10c00a17 	ldw	r3,40(r2)
   44548:	e0bff717 	ldw	r2,-36(fp)
   4454c:	1880051e 	bne	r3,r2,44564 <altera_avalon_jtag_uart_read+0x13c>
   44550:	e0bffb17 	ldw	r2,-20(fp)
   44554:	10c00917 	ldw	r3,36(r2)
   44558:	e0bffb17 	ldw	r2,-20(fp)
   4455c:	10800117 	ldw	r2,4(r2)
   44560:	18bff736 	bltu	r3,r2,44540 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   44564:	e0bffb17 	ldw	r2,-20(fp)
   44568:	10c00a17 	ldw	r3,40(r2)
   4456c:	e0bff717 	ldw	r2,-36(fp)
   44570:	18800326 	beq	r3,r2,44580 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   44574:	e0bffd17 	ldw	r2,-12(fp)
   44578:	10800048 	cmpgei	r2,r2,1
   4457c:	103fb51e 	bne	r2,zero,44454 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   44580:	e0fffa17 	ldw	r3,-24(fp)
   44584:	e0bffc17 	ldw	r2,-16(fp)
   44588:	18801926 	beq	r3,r2,445f0 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4458c:	0005303a 	rdctl	r2,status
   44590:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   44594:	e0fff517 	ldw	r3,-44(fp)
   44598:	00bfff84 	movi	r2,-2
   4459c:	1884703a 	and	r2,r3,r2
   445a0:	1001703a 	wrctl	status,r2
  
  return context;
   445a4:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   445a8:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   445ac:	e0bffb17 	ldw	r2,-20(fp)
   445b0:	10800817 	ldw	r2,32(r2)
   445b4:	10c00054 	ori	r3,r2,1
   445b8:	e0bffb17 	ldw	r2,-20(fp)
   445bc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   445c0:	e0bffb17 	ldw	r2,-20(fp)
   445c4:	10800017 	ldw	r2,0(r2)
   445c8:	11000104 	addi	r4,r2,4
   445cc:	e0bffb17 	ldw	r2,-20(fp)
   445d0:	10800817 	ldw	r2,32(r2)
   445d4:	1007883a 	mov	r3,r2
   445d8:	2005883a 	mov	r2,r4
   445dc:	10c00035 	stwio	r3,0(r2)
   445e0:	e0bff917 	ldw	r2,-28(fp)
   445e4:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   445e8:	e0bff417 	ldw	r2,-48(fp)
   445ec:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   445f0:	e0fffa17 	ldw	r3,-24(fp)
   445f4:	e0bffc17 	ldw	r2,-16(fp)
   445f8:	18800526 	beq	r3,r2,44610 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
   445fc:	e0fffa17 	ldw	r3,-24(fp)
   44600:	e0bffc17 	ldw	r2,-16(fp)
   44604:	1887c83a 	sub	r3,r3,r2
   44608:	e0ffff15 	stw	r3,-4(fp)
   4460c:	00000906 	br	44634 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
   44610:	e0bffe17 	ldw	r2,-8(fp)
   44614:	1090000c 	andi	r2,r2,16384
   44618:	1005003a 	cmpeq	r2,r2,zero
   4461c:	1000031e 	bne	r2,zero,4462c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   44620:	00bffd44 	movi	r2,-11
   44624:	e0bfff15 	stw	r2,-4(fp)
   44628:	00000206 	br	44634 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
   4462c:	00bffec4 	movi	r2,-5
   44630:	e0bfff15 	stw	r2,-4(fp)
   44634:	e0bfff17 	ldw	r2,-4(fp)
}
   44638:	e037883a 	mov	sp,fp
   4463c:	dfc00117 	ldw	ra,4(sp)
   44640:	df000017 	ldw	fp,0(sp)
   44644:	dec00204 	addi	sp,sp,8
   44648:	f800283a 	ret

0004464c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   4464c:	defff204 	addi	sp,sp,-56
   44650:	dfc00d15 	stw	ra,52(sp)
   44654:	df000c15 	stw	fp,48(sp)
   44658:	df000c04 	addi	fp,sp,48
   4465c:	e13ffb15 	stw	r4,-20(fp)
   44660:	e17ffc15 	stw	r5,-16(fp)
   44664:	e1bffd15 	stw	r6,-12(fp)
   44668:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   4466c:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   44670:	e0bffc17 	ldw	r2,-16(fp)
   44674:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   44678:	00003a06 	br	44764 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   4467c:	e0bffb17 	ldw	r2,-20(fp)
   44680:	10800c17 	ldw	r2,48(r2)
   44684:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
   44688:	e0bffb17 	ldw	r2,-20(fp)
   4468c:	10800d17 	ldw	r2,52(r2)
   44690:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
   44694:	e0fffa17 	ldw	r3,-24(fp)
   44698:	e0bff917 	ldw	r2,-28(fp)
   4469c:	1880062e 	bgeu	r3,r2,446b8 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   446a0:	e0fff917 	ldw	r3,-28(fp)
   446a4:	e0bffa17 	ldw	r2,-24(fp)
   446a8:	1885c83a 	sub	r2,r3,r2
   446ac:	10bfffc4 	addi	r2,r2,-1
   446b0:	e0bff815 	stw	r2,-32(fp)
   446b4:	00000c06 	br	446e8 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
   446b8:	e0bff917 	ldw	r2,-28(fp)
   446bc:	1005003a 	cmpeq	r2,r2,zero
   446c0:	1000051e 	bne	r2,zero,446d8 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   446c4:	00820004 	movi	r2,2048
   446c8:	e0fffa17 	ldw	r3,-24(fp)
   446cc:	10c5c83a 	sub	r2,r2,r3
   446d0:	e0bff815 	stw	r2,-32(fp)
   446d4:	00000406 	br	446e8 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   446d8:	0081ffc4 	movi	r2,2047
   446dc:	e0fffa17 	ldw	r3,-24(fp)
   446e0:	10c5c83a 	sub	r2,r2,r3
   446e4:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
   446e8:	e0bff817 	ldw	r2,-32(fp)
   446ec:	1005003a 	cmpeq	r2,r2,zero
   446f0:	10001f1e 	bne	r2,zero,44770 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
   446f4:	e0fffd17 	ldw	r3,-12(fp)
   446f8:	e0bff817 	ldw	r2,-32(fp)
   446fc:	1880022e 	bgeu	r3,r2,44708 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
   44700:	e0bffd17 	ldw	r2,-12(fp)
   44704:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   44708:	e0bffb17 	ldw	r2,-20(fp)
   4470c:	10c20e04 	addi	r3,r2,2104
   44710:	e0bffa17 	ldw	r2,-24(fp)
   44714:	1885883a 	add	r2,r3,r2
   44718:	e0fffc17 	ldw	r3,-16(fp)
   4471c:	1009883a 	mov	r4,r2
   44720:	180b883a 	mov	r5,r3
   44724:	e1bff817 	ldw	r6,-32(fp)
   44728:	00416e00 	call	416e0 <memcpy>
      ptr   += n;
   4472c:	e0fff817 	ldw	r3,-32(fp)
   44730:	e0bffc17 	ldw	r2,-16(fp)
   44734:	10c5883a 	add	r2,r2,r3
   44738:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
   4473c:	e0fffd17 	ldw	r3,-12(fp)
   44740:	e0bff817 	ldw	r2,-32(fp)
   44744:	1885c83a 	sub	r2,r3,r2
   44748:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4474c:	e0fffa17 	ldw	r3,-24(fp)
   44750:	e0bff817 	ldw	r2,-32(fp)
   44754:	1885883a 	add	r2,r3,r2
   44758:	10c1ffcc 	andi	r3,r2,2047
   4475c:	e0bffb17 	ldw	r2,-20(fp)
   44760:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   44764:	e0bffd17 	ldw	r2,-12(fp)
   44768:	10800048 	cmpgei	r2,r2,1
   4476c:	103fc31e 	bne	r2,zero,4467c <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   44770:	0005303a 	rdctl	r2,status
   44774:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   44778:	e0fff517 	ldw	r3,-44(fp)
   4477c:	00bfff84 	movi	r2,-2
   44780:	1884703a 	and	r2,r3,r2
   44784:	1001703a 	wrctl	status,r2
  
  return context;
   44788:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   4478c:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   44790:	e0bffb17 	ldw	r2,-20(fp)
   44794:	10800817 	ldw	r2,32(r2)
   44798:	10c00094 	ori	r3,r2,2
   4479c:	e0bffb17 	ldw	r2,-20(fp)
   447a0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   447a4:	e0bffb17 	ldw	r2,-20(fp)
   447a8:	10800017 	ldw	r2,0(r2)
   447ac:	11000104 	addi	r4,r2,4
   447b0:	e0bffb17 	ldw	r2,-20(fp)
   447b4:	10800817 	ldw	r2,32(r2)
   447b8:	1007883a 	mov	r3,r2
   447bc:	2005883a 	mov	r2,r4
   447c0:	10c00035 	stwio	r3,0(r2)
   447c4:	e0bff717 	ldw	r2,-36(fp)
   447c8:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   447cc:	e0bff417 	ldw	r2,-48(fp)
   447d0:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   447d4:	e0bffd17 	ldw	r2,-12(fp)
   447d8:	10800050 	cmplti	r2,r2,1
   447dc:	1000111e 	bne	r2,zero,44824 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
   447e0:	e0bffe17 	ldw	r2,-8(fp)
   447e4:	1090000c 	andi	r2,r2,16384
   447e8:	1004c03a 	cmpne	r2,r2,zero
   447ec:	1000101e 	bne	r2,zero,44830 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   447f0:	e0bffb17 	ldw	r2,-20(fp)
   447f4:	10c00d17 	ldw	r3,52(r2)
   447f8:	e0bff917 	ldw	r2,-28(fp)
   447fc:	1880051e 	bne	r3,r2,44814 <altera_avalon_jtag_uart_write+0x1c8>
   44800:	e0bffb17 	ldw	r2,-20(fp)
   44804:	10c00917 	ldw	r3,36(r2)
   44808:	e0bffb17 	ldw	r2,-20(fp)
   4480c:	10800117 	ldw	r2,4(r2)
   44810:	18bff736 	bltu	r3,r2,447f0 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
   44814:	e0bffb17 	ldw	r2,-20(fp)
   44818:	10c00d17 	ldw	r3,52(r2)
   4481c:	e0bff917 	ldw	r2,-28(fp)
   44820:	18800326 	beq	r3,r2,44830 <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
   44824:	e0bffd17 	ldw	r2,-12(fp)
   44828:	10800048 	cmpgei	r2,r2,1
   4482c:	103fcd1e 	bne	r2,zero,44764 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   44830:	e0fffc17 	ldw	r3,-16(fp)
   44834:	e0bff617 	ldw	r2,-40(fp)
   44838:	18800526 	beq	r3,r2,44850 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
   4483c:	e0fffc17 	ldw	r3,-16(fp)
   44840:	e0bff617 	ldw	r2,-40(fp)
   44844:	1887c83a 	sub	r3,r3,r2
   44848:	e0ffff15 	stw	r3,-4(fp)
   4484c:	00000906 	br	44874 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
   44850:	e0bffe17 	ldw	r2,-8(fp)
   44854:	1090000c 	andi	r2,r2,16384
   44858:	1005003a 	cmpeq	r2,r2,zero
   4485c:	1000031e 	bne	r2,zero,4486c <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
   44860:	00bffd44 	movi	r2,-11
   44864:	e0bfff15 	stw	r2,-4(fp)
   44868:	00000206 	br	44874 <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
   4486c:	00bffec4 	movi	r2,-5
   44870:	e0bfff15 	stw	r2,-4(fp)
   44874:	e0bfff17 	ldw	r2,-4(fp)
}
   44878:	e037883a 	mov	sp,fp
   4487c:	dfc00117 	ldw	ra,4(sp)
   44880:	df000017 	ldw	fp,0(sp)
   44884:	dec00204 	addi	sp,sp,8
   44888:	f800283a 	ret

0004488c <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
   4488c:	defff404 	addi	sp,sp,-48
   44890:	df000b15 	stw	fp,44(sp)
   44894:	df000b04 	addi	fp,sp,44
   44898:	e13ffc15 	stw	r4,-16(fp)
   4489c:	e17ffd15 	stw	r5,-12(fp)
   448a0:	e1bffe15 	stw	r6,-8(fp)
   448a4:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
   448a8:	e0fffe17 	ldw	r3,-8(fp)
   448ac:	e0bfff17 	ldw	r2,-4(fp)
   448b0:	10c5883a 	add	r2,r2,r3
   448b4:	e0bffb15 	stw	r2,-20(fp)
  alt_u8 * read_end = read_data + read_length;
   448b8:	e0c00117 	ldw	r3,4(fp)
   448bc:	e0800217 	ldw	r2,8(fp)
   448c0:	10c5883a 	add	r2,r2,r3
   448c4:	e0bffa15 	stw	r2,-24(fp)

  alt_u32 write_zeros = read_length;
   448c8:	e0800117 	ldw	r2,4(fp)
   448cc:	e0bff915 	stw	r2,-28(fp)
  alt_u32 read_ignore = write_length;
   448d0:	e0bffe17 	ldw	r2,-8(fp)
   448d4:	e0bff815 	stw	r2,-32(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
   448d8:	00800044 	movi	r2,1
   448dc:	e0bff615 	stw	r2,-40(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
   448e0:	e0bffc17 	ldw	r2,-16(fp)
   448e4:	11000504 	addi	r4,r2,20
   448e8:	e0fffd17 	ldw	r3,-12(fp)
   448ec:	00800044 	movi	r2,1
   448f0:	10c6983a 	sll	r3,r2,r3
   448f4:	2005883a 	mov	r2,r4
   448f8:	10c00035 	stwio	r3,0(r2)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
   448fc:	e0800317 	ldw	r2,12(fp)
   44900:	1080008c 	andi	r2,r2,2
   44904:	1004c03a 	cmpne	r2,r2,zero
   44908:	1000051e 	bne	r2,zero,44920 <alt_avalon_spi_command+0x94>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
   4490c:	e0bffc17 	ldw	r2,-16(fp)
   44910:	10800304 	addi	r2,r2,12
   44914:	1007883a 	mov	r3,r2
   44918:	00810004 	movi	r2,1024
   4491c:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
   44920:	e0bffc17 	ldw	r2,-16(fp)
   44924:	10800037 	ldwio	r2,0(r2)
   44928:	00000006 	br	4492c <alt_avalon_spi_command+0xa0>
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
   4492c:	e0bffc17 	ldw	r2,-16(fp)
   44930:	10800204 	addi	r2,r2,8
   44934:	10800037 	ldwio	r2,0(r2)
   44938:	e0bff715 	stw	r2,-36(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
   4493c:	e0bff717 	ldw	r2,-36(fp)
   44940:	1080100c 	andi	r2,r2,64
   44944:	1005003a 	cmpeq	r2,r2,zero
   44948:	1000031e 	bne	r2,zero,44958 <alt_avalon_spi_command+0xcc>
   4494c:	e0bff617 	ldw	r2,-40(fp)
   44950:	1004c03a 	cmpne	r2,r2,zero
   44954:	1000041e 	bne	r2,zero,44968 <alt_avalon_spi_command+0xdc>
   44958:	e0bff717 	ldw	r2,-36(fp)
   4495c:	1080200c 	andi	r2,r2,128
   44960:	1005003a 	cmpeq	r2,r2,zero
   44964:	103ff11e 	bne	r2,zero,4492c <alt_avalon_spi_command+0xa0>

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
   44968:	e0bff717 	ldw	r2,-36(fp)
   4496c:	1080100c 	andi	r2,r2,64
   44970:	1005003a 	cmpeq	r2,r2,zero
   44974:	1000201e 	bne	r2,zero,449f8 <alt_avalon_spi_command+0x16c>
   44978:	e0bff617 	ldw	r2,-40(fp)
   4497c:	10800050 	cmplti	r2,r2,1
   44980:	10001d1e 	bne	r2,zero,449f8 <alt_avalon_spi_command+0x16c>
    {
      credits--;
   44984:	e0bff617 	ldw	r2,-40(fp)
   44988:	10bfffc4 	addi	r2,r2,-1
   4498c:	e0bff615 	stw	r2,-40(fp)

      if (write_data < write_end)
   44990:	e0ffff17 	ldw	r3,-4(fp)
   44994:	e0bffb17 	ldw	r2,-20(fp)
   44998:	18800b2e 	bgeu	r3,r2,449c8 <alt_avalon_spi_command+0x13c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
   4499c:	e0bffc17 	ldw	r2,-16(fp)
   449a0:	11000104 	addi	r4,r2,4
   449a4:	e0bfff17 	ldw	r2,-4(fp)
   449a8:	10800003 	ldbu	r2,0(r2)
   449ac:	10c03fcc 	andi	r3,r2,255
   449b0:	e0bfff17 	ldw	r2,-4(fp)
   449b4:	10800044 	addi	r2,r2,1
   449b8:	e0bfff15 	stw	r2,-4(fp)
   449bc:	2005883a 	mov	r2,r4
   449c0:	10c00035 	stwio	r3,0(r2)
   449c4:	00000c06 	br	449f8 <alt_avalon_spi_command+0x16c>
      else if (write_zeros > 0)
   449c8:	e0bff917 	ldw	r2,-28(fp)
   449cc:	1005003a 	cmpeq	r2,r2,zero
   449d0:	1000071e 	bne	r2,zero,449f0 <alt_avalon_spi_command+0x164>
      {
        write_zeros--;
   449d4:	e0bff917 	ldw	r2,-28(fp)
   449d8:	10bfffc4 	addi	r2,r2,-1
   449dc:	e0bff915 	stw	r2,-28(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
   449e0:	e0bffc17 	ldw	r2,-16(fp)
   449e4:	10800104 	addi	r2,r2,4
   449e8:	10000035 	stwio	zero,0(r2)
   449ec:	00000206 	br	449f8 <alt_avalon_spi_command+0x16c>
      }
      else
        credits = -1024;
   449f0:	00bf0004 	movi	r2,-1024
   449f4:	e0bff615 	stw	r2,-40(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
   449f8:	e0bff717 	ldw	r2,-36(fp)
   449fc:	1080200c 	andi	r2,r2,128
   44a00:	1005003a 	cmpeq	r2,r2,zero
   44a04:	103fc91e 	bne	r2,zero,4492c <alt_avalon_spi_command+0xa0>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
   44a08:	e0bffc17 	ldw	r2,-16(fp)
   44a0c:	10800037 	ldwio	r2,0(r2)
   44a10:	e0bff515 	stw	r2,-44(fp)

      if (read_ignore > 0)
   44a14:	e0bff817 	ldw	r2,-32(fp)
   44a18:	1005003a 	cmpeq	r2,r2,zero
   44a1c:	1000041e 	bne	r2,zero,44a30 <alt_avalon_spi_command+0x1a4>
        read_ignore--;
   44a20:	e0bff817 	ldw	r2,-32(fp)
   44a24:	10bfffc4 	addi	r2,r2,-1
   44a28:	e0bff815 	stw	r2,-32(fp)
   44a2c:	00000706 	br	44a4c <alt_avalon_spi_command+0x1c0>
      else
        *read_data++ = (alt_u8)rxdata;
   44a30:	e0bff517 	ldw	r2,-44(fp)
   44a34:	1007883a 	mov	r3,r2
   44a38:	e0800217 	ldw	r2,8(fp)
   44a3c:	10c00005 	stb	r3,0(r2)
   44a40:	e0800217 	ldw	r2,8(fp)
   44a44:	10800044 	addi	r2,r2,1
   44a48:	e0800215 	stw	r2,8(fp)
      credits++;
   44a4c:	e0bff617 	ldw	r2,-40(fp)
   44a50:	10800044 	addi	r2,r2,1
   44a54:	e0bff615 	stw	r2,-40(fp)

      if (read_ignore == 0 && read_data == read_end)
   44a58:	e0bff817 	ldw	r2,-32(fp)
   44a5c:	1004c03a 	cmpne	r2,r2,zero
   44a60:	103fb21e 	bne	r2,zero,4492c <alt_avalon_spi_command+0xa0>
   44a64:	e0c00217 	ldw	r3,8(fp)
   44a68:	e0bffa17 	ldw	r2,-24(fp)
   44a6c:	18800126 	beq	r3,r2,44a74 <alt_avalon_spi_command+0x1e8>
        break;
    }
    
  }
   44a70:	003fae06 	br	4492c <alt_avalon_spi_command+0xa0>

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
   44a74:	e0bffc17 	ldw	r2,-16(fp)
   44a78:	10800204 	addi	r2,r2,8
   44a7c:	10800037 	ldwio	r2,0(r2)
   44a80:	e0bff715 	stw	r2,-36(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
   44a84:	e0bff717 	ldw	r2,-36(fp)
   44a88:	1080080c 	andi	r2,r2,32
   44a8c:	1005003a 	cmpeq	r2,r2,zero
   44a90:	103ff81e 	bne	r2,zero,44a74 <alt_avalon_spi_command+0x1e8>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
   44a94:	e0800317 	ldw	r2,12(fp)
   44a98:	1080004c 	andi	r2,r2,1
   44a9c:	1004c03a 	cmpne	r2,r2,zero
   44aa0:	1000031e 	bne	r2,zero,44ab0 <alt_avalon_spi_command+0x224>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
   44aa4:	e0bffc17 	ldw	r2,-16(fp)
   44aa8:	10800304 	addi	r2,r2,12
   44aac:	10000035 	stwio	zero,0(r2)

  return read_length;
   44ab0:	e0800117 	ldw	r2,4(fp)
}
   44ab4:	e037883a 	mov	sp,fp
   44ab8:	df000017 	ldw	fp,0(sp)
   44abc:	dec00104 	addi	sp,sp,4
   44ac0:	f800283a 	ret

00044ac4 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   44ac4:	defffa04 	addi	sp,sp,-24
   44ac8:	dfc00515 	stw	ra,20(sp)
   44acc:	df000415 	stw	fp,16(sp)
   44ad0:	df000404 	addi	fp,sp,16
   44ad4:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   44ad8:	e0bfff17 	ldw	r2,-4(fp)
   44adc:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   44ae0:	e0bfff17 	ldw	r2,-4(fp)
   44ae4:	10800104 	addi	r2,r2,4
   44ae8:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   44aec:	0005303a 	rdctl	r2,status
   44af0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   44af4:	e0fffd17 	ldw	r3,-12(fp)
   44af8:	00bfff84 	movi	r2,-2
   44afc:	1884703a 	and	r2,r3,r2
   44b00:	1001703a 	wrctl	status,r2
  
  return context;
   44b04:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   44b08:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
   44b0c:	00458180 	call	45818 <alt_tick>
   44b10:	e0bffe17 	ldw	r2,-8(fp)
   44b14:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   44b18:	e0bffc17 	ldw	r2,-16(fp)
   44b1c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   44b20:	e037883a 	mov	sp,fp
   44b24:	dfc00117 	ldw	ra,4(sp)
   44b28:	df000017 	ldw	fp,0(sp)
   44b2c:	dec00204 	addi	sp,sp,8
   44b30:	f800283a 	ret

00044b34 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   44b34:	defff804 	addi	sp,sp,-32
   44b38:	dfc00715 	stw	ra,28(sp)
   44b3c:	df000615 	stw	fp,24(sp)
   44b40:	df000604 	addi	fp,sp,24
   44b44:	e13ffc15 	stw	r4,-16(fp)
   44b48:	e17ffd15 	stw	r5,-12(fp)
   44b4c:	e1bffe15 	stw	r6,-8(fp)
   44b50:	e1ffff15 	stw	r7,-4(fp)
   44b54:	e0bfff17 	ldw	r2,-4(fp)
   44b58:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   44b5c:	00900034 	movhi	r2,16384
   44b60:	1086b004 	addi	r2,r2,6848
   44b64:	10800017 	ldw	r2,0(r2)
   44b68:	1004c03a 	cmpne	r2,r2,zero
   44b6c:	1000041e 	bne	r2,zero,44b80 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
   44b70:	00d00034 	movhi	r3,16384
   44b74:	18c6b004 	addi	r3,r3,6848
   44b78:	e0bffb17 	ldw	r2,-20(fp)
   44b7c:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   44b80:	e0bffc17 	ldw	r2,-16(fp)
   44b84:	10800104 	addi	r2,r2,4
   44b88:	1007883a 	mov	r3,r2
   44b8c:	008001c4 	movi	r2,7
   44b90:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   44b94:	d8000015 	stw	zero,0(sp)
   44b98:	e13ffd17 	ldw	r4,-12(fp)
   44b9c:	e17ffe17 	ldw	r5,-8(fp)
   44ba0:	01800134 	movhi	r6,4
   44ba4:	3192b104 	addi	r6,r6,19140
   44ba8:	e1fffc17 	ldw	r7,-16(fp)
   44bac:	00450b40 	call	450b4 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   44bb0:	e037883a 	mov	sp,fp
   44bb4:	dfc00117 	ldw	ra,4(sp)
   44bb8:	df000017 	ldw	fp,0(sp)
   44bbc:	dec00204 	addi	sp,sp,8
   44bc0:	f800283a 	ret

00044bc4 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   44bc4:	defff404 	addi	sp,sp,-48
   44bc8:	df000b15 	stw	fp,44(sp)
   44bcc:	df000b04 	addi	fp,sp,44
   44bd0:	e13ffb15 	stw	r4,-20(fp)
   44bd4:	e17ffc15 	stw	r5,-16(fp)
   44bd8:	e1bffd15 	stw	r6,-12(fp)
   44bdc:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   44be0:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   44be4:	00900034 	movhi	r2,16384
   44be8:	1086b004 	addi	r2,r2,6848
   44bec:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   44bf0:	1005003a 	cmpeq	r2,r2,zero
   44bf4:	1000411e 	bne	r2,zero,44cfc <alt_alarm_start+0x138>
  {
    if (alarm)
   44bf8:	e0bffb17 	ldw	r2,-20(fp)
   44bfc:	1005003a 	cmpeq	r2,r2,zero
   44c00:	10003b1e 	bne	r2,zero,44cf0 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
   44c04:	e0fffb17 	ldw	r3,-20(fp)
   44c08:	e0bffd17 	ldw	r2,-12(fp)
   44c0c:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
   44c10:	e0fffb17 	ldw	r3,-20(fp)
   44c14:	e0bffe17 	ldw	r2,-8(fp)
   44c18:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   44c1c:	0005303a 	rdctl	r2,status
   44c20:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   44c24:	e0fff817 	ldw	r3,-32(fp)
   44c28:	00bfff84 	movi	r2,-2
   44c2c:	1884703a 	and	r2,r3,r2
   44c30:	1001703a 	wrctl	status,r2
  
  return context;
   44c34:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   44c38:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   44c3c:	00900034 	movhi	r2,16384
   44c40:	1086b104 	addi	r2,r2,6852
   44c44:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   44c48:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   44c4c:	e0fffc17 	ldw	r3,-16(fp)
   44c50:	e0bff917 	ldw	r2,-28(fp)
   44c54:	1885883a 	add	r2,r3,r2
   44c58:	10c00044 	addi	r3,r2,1
   44c5c:	e0bffb17 	ldw	r2,-20(fp)
   44c60:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   44c64:	e0bffb17 	ldw	r2,-20(fp)
   44c68:	10c00217 	ldw	r3,8(r2)
   44c6c:	e0bff917 	ldw	r2,-28(fp)
   44c70:	1880042e 	bgeu	r3,r2,44c84 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
   44c74:	e0fffb17 	ldw	r3,-20(fp)
   44c78:	00800044 	movi	r2,1
   44c7c:	18800405 	stb	r2,16(r3)
   44c80:	00000206 	br	44c8c <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
   44c84:	e0bffb17 	ldw	r2,-20(fp)
   44c88:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   44c8c:	e0fffb17 	ldw	r3,-20(fp)
   44c90:	00900034 	movhi	r2,16384
   44c94:	1086a604 	addi	r2,r2,6808
   44c98:	e0bff615 	stw	r2,-40(fp)
   44c9c:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   44ca0:	e0fff717 	ldw	r3,-36(fp)
   44ca4:	e0bff617 	ldw	r2,-40(fp)
   44ca8:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   44cac:	e0bff617 	ldw	r2,-40(fp)
   44cb0:	10c00017 	ldw	r3,0(r2)
   44cb4:	e0bff717 	ldw	r2,-36(fp)
   44cb8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   44cbc:	e0bff617 	ldw	r2,-40(fp)
   44cc0:	10c00017 	ldw	r3,0(r2)
   44cc4:	e0bff717 	ldw	r2,-36(fp)
   44cc8:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   44ccc:	e0fff617 	ldw	r3,-40(fp)
   44cd0:	e0bff717 	ldw	r2,-36(fp)
   44cd4:	18800015 	stw	r2,0(r3)
   44cd8:	e0bffa17 	ldw	r2,-24(fp)
   44cdc:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   44ce0:	e0bff517 	ldw	r2,-44(fp)
   44ce4:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   44ce8:	e03fff15 	stw	zero,-4(fp)
   44cec:	00000506 	br	44d04 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
   44cf0:	00bffa84 	movi	r2,-22
   44cf4:	e0bfff15 	stw	r2,-4(fp)
   44cf8:	00000206 	br	44d04 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
   44cfc:	00bfde84 	movi	r2,-134
   44d00:	e0bfff15 	stw	r2,-4(fp)
   44d04:	e0bfff17 	ldw	r2,-4(fp)
  }
}
   44d08:	e037883a 	mov	sp,fp
   44d0c:	df000017 	ldw	fp,0(sp)
   44d10:	dec00104 	addi	sp,sp,4
   44d14:	f800283a 	ret

00044d18 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   44d18:	defffa04 	addi	sp,sp,-24
   44d1c:	dfc00515 	stw	ra,20(sp)
   44d20:	df000415 	stw	fp,16(sp)
   44d24:	df000404 	addi	fp,sp,16
   44d28:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
   44d2c:	008000c4 	movi	r2,3
   44d30:	e0bffc15 	stw	r2,-16(fp)
  }
  

  big_loops = us / (INT_MAX/
   44d34:	e0fffc17 	ldw	r3,-16(fp)
   44d38:	008003f4 	movhi	r2,15
   44d3c:	10909004 	addi	r2,r2,16960
   44d40:	188b383a 	mul	r5,r3,r2
   44d44:	0102fb34 	movhi	r4,3052
   44d48:	21308004 	addi	r4,r4,-15872
   44d4c:	00461240 	call	46124 <__udivsi3>
   44d50:	100b883a 	mov	r5,r2
   44d54:	01200034 	movhi	r4,32768
   44d58:	213fffc4 	addi	r4,r4,-1
   44d5c:	00461240 	call	46124 <__udivsi3>
   44d60:	100b883a 	mov	r5,r2
   44d64:	e13fff17 	ldw	r4,-4(fp)
   44d68:	00461240 	call	46124 <__udivsi3>
   44d6c:	e0bffd15 	stw	r2,-12(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   44d70:	e0bffd17 	ldw	r2,-12(fp)
   44d74:	1005003a 	cmpeq	r2,r2,zero
   44d78:	1000281e 	bne	r2,zero,44e1c <alt_busy_sleep+0x104>
  {
    for(i=0;i<big_loops;i++)
   44d7c:	e03ffe15 	stw	zero,-8(fp)
   44d80:	00001606 	br	44ddc <alt_busy_sleep+0xc4>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   44d84:	00a00034 	movhi	r2,32768
   44d88:	10bfffc4 	addi	r2,r2,-1
   44d8c:	10bfffc4 	addi	r2,r2,-1
   44d90:	103ffe1e 	bne	r2,zero,44d8c <alt_busy_sleep+0x74>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   44d94:	e0fffc17 	ldw	r3,-16(fp)
   44d98:	008003f4 	movhi	r2,15
   44d9c:	10909004 	addi	r2,r2,16960
   44da0:	188b383a 	mul	r5,r3,r2
   44da4:	0102fb34 	movhi	r4,3052
   44da8:	21308004 	addi	r4,r4,-15872
   44dac:	00461240 	call	46124 <__udivsi3>
   44db0:	100b883a 	mov	r5,r2
   44db4:	01200034 	movhi	r4,32768
   44db8:	213fffc4 	addi	r4,r4,-1
   44dbc:	00461240 	call	46124 <__udivsi3>
   44dc0:	1007883a 	mov	r3,r2
   44dc4:	e0bfff17 	ldw	r2,-4(fp)
   44dc8:	10c5c83a 	sub	r2,r2,r3
   44dcc:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   44dd0:	e0bffe17 	ldw	r2,-8(fp)
   44dd4:	10800044 	addi	r2,r2,1
   44dd8:	e0bffe15 	stw	r2,-8(fp)
   44ddc:	e0fffe17 	ldw	r3,-8(fp)
   44de0:	e0bffd17 	ldw	r2,-12(fp)
   44de4:	18bfe716 	blt	r3,r2,44d84 <alt_busy_sleep+0x6c>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   44de8:	e0fffc17 	ldw	r3,-16(fp)
   44dec:	008003f4 	movhi	r2,15
   44df0:	10909004 	addi	r2,r2,16960
   44df4:	188b383a 	mul	r5,r3,r2
   44df8:	0102fb34 	movhi	r4,3052
   44dfc:	21308004 	addi	r4,r4,-15872
   44e00:	00461240 	call	46124 <__udivsi3>
   44e04:	1007883a 	mov	r3,r2
   44e08:	e0bfff17 	ldw	r2,-4(fp)
   44e0c:	1885383a 	mul	r2,r3,r2
   44e10:	10bfffc4 	addi	r2,r2,-1
   44e14:	103ffe1e 	bne	r2,zero,44e10 <alt_busy_sleep+0xf8>
   44e18:	00000c06 	br	44e4c <alt_busy_sleep+0x134>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   44e1c:	e0fffc17 	ldw	r3,-16(fp)
   44e20:	008003f4 	movhi	r2,15
   44e24:	10909004 	addi	r2,r2,16960
   44e28:	188b383a 	mul	r5,r3,r2
   44e2c:	0102fb34 	movhi	r4,3052
   44e30:	21308004 	addi	r4,r4,-15872
   44e34:	00461240 	call	46124 <__udivsi3>
   44e38:	1007883a 	mov	r3,r2
   44e3c:	e0bfff17 	ldw	r2,-4(fp)
   44e40:	1885383a 	mul	r2,r3,r2
   44e44:	10bfffc4 	addi	r2,r2,-1
   44e48:	00bffe16 	blt	zero,r2,44e44 <alt_busy_sleep+0x12c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   44e4c:	0005883a 	mov	r2,zero
}
   44e50:	e037883a 	mov	sp,fp
   44e54:	dfc00117 	ldw	ra,4(sp)
   44e58:	df000017 	ldw	fp,0(sp)
   44e5c:	dec00204 	addi	sp,sp,8
   44e60:	f800283a 	ret

00044e64 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   44e64:	defffe04 	addi	sp,sp,-8
   44e68:	df000115 	stw	fp,4(sp)
   44e6c:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   44e70:	e03fff15 	stw	zero,-4(fp)
   44e74:	00000506 	br	44e8c <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   44e78:	e0bfff17 	ldw	r2,-4(fp)
   44e7c:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   44e80:	e0bfff17 	ldw	r2,-4(fp)
   44e84:	10800804 	addi	r2,r2,32
   44e88:	e0bfff15 	stw	r2,-4(fp)
   44e8c:	e0bfff17 	ldw	r2,-4(fp)
   44e90:	10820030 	cmpltui	r2,r2,2048
   44e94:	103ff81e 	bne	r2,zero,44e78 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   44e98:	e037883a 	mov	sp,fp
   44e9c:	df000017 	ldw	fp,0(sp)
   44ea0:	dec00104 	addi	sp,sp,4
   44ea4:	f800283a 	ret

00044ea8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   44ea8:	defff904 	addi	sp,sp,-28
   44eac:	dfc00615 	stw	ra,24(sp)
   44eb0:	df000515 	stw	fp,20(sp)
   44eb4:	df000504 	addi	fp,sp,20
   44eb8:	e13ffd15 	stw	r4,-12(fp)
   44ebc:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   44ec0:	e0bffd17 	ldw	r2,-12(fp)
   44ec4:	1005003a 	cmpeq	r2,r2,zero
   44ec8:	1000041e 	bne	r2,zero,44edc <alt_dev_llist_insert+0x34>
   44ecc:	e0bffd17 	ldw	r2,-12(fp)
   44ed0:	10800217 	ldw	r2,8(r2)
   44ed4:	1004c03a 	cmpne	r2,r2,zero
   44ed8:	1000071e 	bne	r2,zero,44ef8 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
   44edc:	0044f5c0 	call	44f5c <alt_get_errno>
   44ee0:	1007883a 	mov	r3,r2
   44ee4:	00800584 	movi	r2,22
   44ee8:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   44eec:	00bffa84 	movi	r2,-22
   44ef0:	e0bfff15 	stw	r2,-4(fp)
   44ef4:	00001306 	br	44f44 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   44ef8:	e0fffd17 	ldw	r3,-12(fp)
   44efc:	e0bffe17 	ldw	r2,-8(fp)
   44f00:	e0bffb15 	stw	r2,-20(fp)
   44f04:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   44f08:	e0fffc17 	ldw	r3,-16(fp)
   44f0c:	e0bffb17 	ldw	r2,-20(fp)
   44f10:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   44f14:	e0bffb17 	ldw	r2,-20(fp)
   44f18:	10c00017 	ldw	r3,0(r2)
   44f1c:	e0bffc17 	ldw	r2,-16(fp)
   44f20:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   44f24:	e0bffb17 	ldw	r2,-20(fp)
   44f28:	10c00017 	ldw	r3,0(r2)
   44f2c:	e0bffc17 	ldw	r2,-16(fp)
   44f30:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   44f34:	e0fffb17 	ldw	r3,-20(fp)
   44f38:	e0bffc17 	ldw	r2,-16(fp)
   44f3c:	18800015 	stw	r2,0(r3)

  return 0;  
   44f40:	e03fff15 	stw	zero,-4(fp)
   44f44:	e0bfff17 	ldw	r2,-4(fp)
}
   44f48:	e037883a 	mov	sp,fp
   44f4c:	dfc00117 	ldw	ra,4(sp)
   44f50:	df000017 	ldw	fp,0(sp)
   44f54:	dec00204 	addi	sp,sp,8
   44f58:	f800283a 	ret

00044f5c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   44f5c:	defffd04 	addi	sp,sp,-12
   44f60:	dfc00215 	stw	ra,8(sp)
   44f64:	df000115 	stw	fp,4(sp)
   44f68:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   44f6c:	00900034 	movhi	r2,16384
   44f70:	1086a304 	addi	r2,r2,6796
   44f74:	10800017 	ldw	r2,0(r2)
   44f78:	1005003a 	cmpeq	r2,r2,zero
   44f7c:	1000061e 	bne	r2,zero,44f98 <alt_get_errno+0x3c>
   44f80:	00900034 	movhi	r2,16384
   44f84:	1086a304 	addi	r2,r2,6796
   44f88:	10800017 	ldw	r2,0(r2)
   44f8c:	103ee83a 	callr	r2
   44f90:	e0bfff15 	stw	r2,-4(fp)
   44f94:	00000306 	br	44fa4 <alt_get_errno+0x48>
   44f98:	00900034 	movhi	r2,16384
   44f9c:	1086ab04 	addi	r2,r2,6828
   44fa0:	e0bfff15 	stw	r2,-4(fp)
   44fa4:	e0bfff17 	ldw	r2,-4(fp)
}
   44fa8:	e037883a 	mov	sp,fp
   44fac:	dfc00117 	ldw	ra,4(sp)
   44fb0:	df000017 	ldw	fp,0(sp)
   44fb4:	dec00204 	addi	sp,sp,8
   44fb8:	f800283a 	ret

00044fbc <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   44fbc:	defffd04 	addi	sp,sp,-12
   44fc0:	dfc00215 	stw	ra,8(sp)
   44fc4:	df000115 	stw	fp,4(sp)
   44fc8:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   44fcc:	00bfff04 	movi	r2,-4
   44fd0:	00c00134 	movhi	r3,4
   44fd4:	18d86604 	addi	r3,r3,24984
   44fd8:	1885883a 	add	r2,r3,r2
   44fdc:	e0bfff15 	stw	r2,-4(fp)
   44fe0:	00000606 	br	44ffc <_do_ctors+0x40>
        (*ctor) (); 
   44fe4:	e0bfff17 	ldw	r2,-4(fp)
   44fe8:	10800017 	ldw	r2,0(r2)
   44fec:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   44ff0:	e0bfff17 	ldw	r2,-4(fp)
   44ff4:	10bfff04 	addi	r2,r2,-4
   44ff8:	e0bfff15 	stw	r2,-4(fp)
   44ffc:	e0ffff17 	ldw	r3,-4(fp)
   45000:	00800134 	movhi	r2,4
   45004:	10986504 	addi	r2,r2,24980
   45008:	18bff62e 	bgeu	r3,r2,44fe4 <_do_ctors+0x28>
        (*ctor) (); 
}
   4500c:	e037883a 	mov	sp,fp
   45010:	dfc00117 	ldw	ra,4(sp)
   45014:	df000017 	ldw	fp,0(sp)
   45018:	dec00204 	addi	sp,sp,8
   4501c:	f800283a 	ret

00045020 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   45020:	defffd04 	addi	sp,sp,-12
   45024:	dfc00215 	stw	ra,8(sp)
   45028:	df000115 	stw	fp,4(sp)
   4502c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   45030:	00bfff04 	movi	r2,-4
   45034:	00c00134 	movhi	r3,4
   45038:	18d86604 	addi	r3,r3,24984
   4503c:	1885883a 	add	r2,r3,r2
   45040:	e0bfff15 	stw	r2,-4(fp)
   45044:	00000606 	br	45060 <_do_dtors+0x40>
        (*dtor) (); 
   45048:	e0bfff17 	ldw	r2,-4(fp)
   4504c:	10800017 	ldw	r2,0(r2)
   45050:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   45054:	e0bfff17 	ldw	r2,-4(fp)
   45058:	10bfff04 	addi	r2,r2,-4
   4505c:	e0bfff15 	stw	r2,-4(fp)
   45060:	e0ffff17 	ldw	r3,-4(fp)
   45064:	00800134 	movhi	r2,4
   45068:	10986604 	addi	r2,r2,24984
   4506c:	18bff62e 	bgeu	r3,r2,45048 <_do_dtors+0x28>
        (*dtor) (); 
}
   45070:	e037883a 	mov	sp,fp
   45074:	dfc00117 	ldw	ra,4(sp)
   45078:	df000017 	ldw	fp,0(sp)
   4507c:	dec00204 	addi	sp,sp,8
   45080:	f800283a 	ret

00045084 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   45084:	defffe04 	addi	sp,sp,-8
   45088:	dfc00115 	stw	ra,4(sp)
   4508c:	df000015 	stw	fp,0(sp)
   45090:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   45094:	0009883a 	mov	r4,zero
   45098:	01440004 	movi	r5,4096
   4509c:	0045bb00 	call	45bb0 <alt_icache_flush>
#endif
}
   450a0:	e037883a 	mov	sp,fp
   450a4:	dfc00117 	ldw	ra,4(sp)
   450a8:	df000017 	ldw	fp,0(sp)
   450ac:	dec00204 	addi	sp,sp,8
   450b0:	f800283a 	ret

000450b4 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   450b4:	defff904 	addi	sp,sp,-28
   450b8:	dfc00615 	stw	ra,24(sp)
   450bc:	df000515 	stw	fp,20(sp)
   450c0:	df000504 	addi	fp,sp,20
   450c4:	e13ffc15 	stw	r4,-16(fp)
   450c8:	e17ffd15 	stw	r5,-12(fp)
   450cc:	e1bffe15 	stw	r6,-8(fp)
   450d0:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   450d4:	e0800217 	ldw	r2,8(fp)
   450d8:	d8800015 	stw	r2,0(sp)
   450dc:	e13ffc17 	ldw	r4,-16(fp)
   450e0:	e17ffd17 	ldw	r5,-12(fp)
   450e4:	e1bffe17 	ldw	r6,-8(fp)
   450e8:	e1ffff17 	ldw	r7,-4(fp)
   450ec:	00452880 	call	45288 <alt_iic_isr_register>
}  
   450f0:	e037883a 	mov	sp,fp
   450f4:	dfc00117 	ldw	ra,4(sp)
   450f8:	df000017 	ldw	fp,0(sp)
   450fc:	dec00204 	addi	sp,sp,8
   45100:	f800283a 	ret

00045104 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   45104:	defff904 	addi	sp,sp,-28
   45108:	df000615 	stw	fp,24(sp)
   4510c:	df000604 	addi	fp,sp,24
   45110:	e13ffe15 	stw	r4,-8(fp)
   45114:	e17fff15 	stw	r5,-4(fp)
   45118:	e0bfff17 	ldw	r2,-4(fp)
   4511c:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   45120:	0005303a 	rdctl	r2,status
   45124:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   45128:	e0fffb17 	ldw	r3,-20(fp)
   4512c:	00bfff84 	movi	r2,-2
   45130:	1884703a 	and	r2,r3,r2
   45134:	1001703a 	wrctl	status,r2
  
  return context;
   45138:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   4513c:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
   45140:	e0fffc17 	ldw	r3,-16(fp)
   45144:	00800044 	movi	r2,1
   45148:	10c4983a 	sll	r2,r2,r3
   4514c:	1007883a 	mov	r3,r2
   45150:	00900034 	movhi	r2,16384
   45154:	1086af04 	addi	r2,r2,6844
   45158:	10800017 	ldw	r2,0(r2)
   4515c:	1886b03a 	or	r3,r3,r2
   45160:	00900034 	movhi	r2,16384
   45164:	1086af04 	addi	r2,r2,6844
   45168:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   4516c:	00900034 	movhi	r2,16384
   45170:	1086af04 	addi	r2,r2,6844
   45174:	10800017 	ldw	r2,0(r2)
   45178:	100170fa 	wrctl	ienable,r2
   4517c:	e0bffd17 	ldw	r2,-12(fp)
   45180:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   45184:	e0bffa17 	ldw	r2,-24(fp)
   45188:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   4518c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   45190:	e037883a 	mov	sp,fp
   45194:	df000017 	ldw	fp,0(sp)
   45198:	dec00104 	addi	sp,sp,4
   4519c:	f800283a 	ret

000451a0 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   451a0:	defff904 	addi	sp,sp,-28
   451a4:	df000615 	stw	fp,24(sp)
   451a8:	df000604 	addi	fp,sp,24
   451ac:	e13ffe15 	stw	r4,-8(fp)
   451b0:	e17fff15 	stw	r5,-4(fp)
   451b4:	e0bfff17 	ldw	r2,-4(fp)
   451b8:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   451bc:	0005303a 	rdctl	r2,status
   451c0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   451c4:	e0fffb17 	ldw	r3,-20(fp)
   451c8:	00bfff84 	movi	r2,-2
   451cc:	1884703a 	and	r2,r3,r2
   451d0:	1001703a 	wrctl	status,r2
  
  return context;
   451d4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   451d8:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
   451dc:	e0fffc17 	ldw	r3,-16(fp)
   451e0:	00800044 	movi	r2,1
   451e4:	10c4983a 	sll	r2,r2,r3
   451e8:	0084303a 	nor	r2,zero,r2
   451ec:	1007883a 	mov	r3,r2
   451f0:	00900034 	movhi	r2,16384
   451f4:	1086af04 	addi	r2,r2,6844
   451f8:	10800017 	ldw	r2,0(r2)
   451fc:	1886703a 	and	r3,r3,r2
   45200:	00900034 	movhi	r2,16384
   45204:	1086af04 	addi	r2,r2,6844
   45208:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   4520c:	00900034 	movhi	r2,16384
   45210:	1086af04 	addi	r2,r2,6844
   45214:	10800017 	ldw	r2,0(r2)
   45218:	100170fa 	wrctl	ienable,r2
   4521c:	e0bffd17 	ldw	r2,-12(fp)
   45220:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   45224:	e0bffa17 	ldw	r2,-24(fp)
   45228:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   4522c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   45230:	e037883a 	mov	sp,fp
   45234:	df000017 	ldw	fp,0(sp)
   45238:	dec00104 	addi	sp,sp,4
   4523c:	f800283a 	ret

00045240 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   45240:	defffc04 	addi	sp,sp,-16
   45244:	df000315 	stw	fp,12(sp)
   45248:	df000304 	addi	fp,sp,12
   4524c:	e13ffe15 	stw	r4,-8(fp)
   45250:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   45254:	000530fa 	rdctl	r2,ienable
   45258:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   4525c:	e0ffff17 	ldw	r3,-4(fp)
   45260:	00800044 	movi	r2,1
   45264:	10c4983a 	sll	r2,r2,r3
   45268:	1007883a 	mov	r3,r2
   4526c:	e0bffd17 	ldw	r2,-12(fp)
   45270:	1884703a 	and	r2,r3,r2
   45274:	1004c03a 	cmpne	r2,r2,zero
}
   45278:	e037883a 	mov	sp,fp
   4527c:	df000017 	ldw	fp,0(sp)
   45280:	dec00104 	addi	sp,sp,4
   45284:	f800283a 	ret

00045288 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   45288:	defff404 	addi	sp,sp,-48
   4528c:	dfc00b15 	stw	ra,44(sp)
   45290:	df000a15 	stw	fp,40(sp)
   45294:	df000a04 	addi	fp,sp,40
   45298:	e13ffb15 	stw	r4,-20(fp)
   4529c:	e17ffc15 	stw	r5,-16(fp)
   452a0:	e1bffd15 	stw	r6,-12(fp)
   452a4:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
   452a8:	00bffa84 	movi	r2,-22
   452ac:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   452b0:	e0bffc17 	ldw	r2,-16(fp)
   452b4:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   452b8:	e0bff917 	ldw	r2,-28(fp)
   452bc:	10800808 	cmpgei	r2,r2,32
   452c0:	1000291e 	bne	r2,zero,45368 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   452c4:	0005303a 	rdctl	r2,status
   452c8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   452cc:	e0fff717 	ldw	r3,-36(fp)
   452d0:	00bfff84 	movi	r2,-2
   452d4:	1884703a 	and	r2,r3,r2
   452d8:	1001703a 	wrctl	status,r2
  
  return context;
   452dc:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   452e0:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
   452e4:	e0bff917 	ldw	r2,-28(fp)
   452e8:	00d00034 	movhi	r3,16384
   452ec:	18c6bc04 	addi	r3,r3,6896
   452f0:	100490fa 	slli	r2,r2,3
   452f4:	10c7883a 	add	r3,r2,r3
   452f8:	e0bffd17 	ldw	r2,-12(fp)
   452fc:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
   45300:	e0bff917 	ldw	r2,-28(fp)
   45304:	00d00034 	movhi	r3,16384
   45308:	18c6bc04 	addi	r3,r3,6896
   4530c:	100490fa 	slli	r2,r2,3
   45310:	10c5883a 	add	r2,r2,r3
   45314:	10c00104 	addi	r3,r2,4
   45318:	e0bffe17 	ldw	r2,-8(fp)
   4531c:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   45320:	e0bffd17 	ldw	r2,-12(fp)
   45324:	1005003a 	cmpeq	r2,r2,zero
   45328:	1000051e 	bne	r2,zero,45340 <alt_iic_isr_register+0xb8>
   4532c:	e17ff917 	ldw	r5,-28(fp)
   45330:	e13ffb17 	ldw	r4,-20(fp)
   45334:	00451040 	call	45104 <alt_ic_irq_enable>
   45338:	e0bfff15 	stw	r2,-4(fp)
   4533c:	00000406 	br	45350 <alt_iic_isr_register+0xc8>
   45340:	e17ff917 	ldw	r5,-28(fp)
   45344:	e13ffb17 	ldw	r4,-20(fp)
   45348:	00451a00 	call	451a0 <alt_ic_irq_disable>
   4534c:	e0bfff15 	stw	r2,-4(fp)
   45350:	e0bfff17 	ldw	r2,-4(fp)
   45354:	e0bffa15 	stw	r2,-24(fp)
   45358:	e0bff817 	ldw	r2,-32(fp)
   4535c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   45360:	e0bff617 	ldw	r2,-40(fp)
   45364:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   45368:	e0bffa17 	ldw	r2,-24(fp)
}
   4536c:	e037883a 	mov	sp,fp
   45370:	dfc00117 	ldw	ra,4(sp)
   45374:	df000017 	ldw	fp,0(sp)
   45378:	dec00204 	addi	sp,sp,8
   4537c:	f800283a 	ret

00045380 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   45380:	defff904 	addi	sp,sp,-28
   45384:	dfc00615 	stw	ra,24(sp)
   45388:	df000515 	stw	fp,20(sp)
   4538c:	df000504 	addi	fp,sp,20
   45390:	e13ffc15 	stw	r4,-16(fp)
   45394:	e17ffd15 	stw	r5,-12(fp)
   45398:	e1bffe15 	stw	r6,-8(fp)
   4539c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   453a0:	e13ffd17 	ldw	r4,-12(fp)
   453a4:	e17ffe17 	ldw	r5,-8(fp)
   453a8:	e1bfff17 	ldw	r6,-4(fp)
   453ac:	00455980 	call	45598 <open>
   453b0:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   453b4:	e0bffb17 	ldw	r2,-20(fp)
   453b8:	1004803a 	cmplt	r2,r2,zero
   453bc:	10001c1e 	bne	r2,zero,45430 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
   453c0:	e0bffb17 	ldw	r2,-20(fp)
   453c4:	00d00034 	movhi	r3,16384
   453c8:	18c22204 	addi	r3,r3,2184
   453cc:	10800324 	muli	r2,r2,12
   453d0:	10c5883a 	add	r2,r2,r3
   453d4:	10c00017 	ldw	r3,0(r2)
   453d8:	e0bffc17 	ldw	r2,-16(fp)
   453dc:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   453e0:	e0bffb17 	ldw	r2,-20(fp)
   453e4:	00d00034 	movhi	r3,16384
   453e8:	18c22204 	addi	r3,r3,2184
   453ec:	10800324 	muli	r2,r2,12
   453f0:	10c5883a 	add	r2,r2,r3
   453f4:	10800104 	addi	r2,r2,4
   453f8:	10c00017 	ldw	r3,0(r2)
   453fc:	e0bffc17 	ldw	r2,-16(fp)
   45400:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   45404:	e0bffb17 	ldw	r2,-20(fp)
   45408:	00d00034 	movhi	r3,16384
   4540c:	18c22204 	addi	r3,r3,2184
   45410:	10800324 	muli	r2,r2,12
   45414:	10c5883a 	add	r2,r2,r3
   45418:	10800204 	addi	r2,r2,8
   4541c:	10c00017 	ldw	r3,0(r2)
   45420:	e0bffc17 	ldw	r2,-16(fp)
   45424:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   45428:	e13ffb17 	ldw	r4,-20(fp)
   4542c:	0043a4c0 	call	43a4c <alt_release_fd>
  }
} 
   45430:	e037883a 	mov	sp,fp
   45434:	dfc00117 	ldw	ra,4(sp)
   45438:	df000017 	ldw	fp,0(sp)
   4543c:	dec00204 	addi	sp,sp,8
   45440:	f800283a 	ret

00045444 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   45444:	defffb04 	addi	sp,sp,-20
   45448:	dfc00415 	stw	ra,16(sp)
   4544c:	df000315 	stw	fp,12(sp)
   45450:	df000304 	addi	fp,sp,12
   45454:	e13ffd15 	stw	r4,-12(fp)
   45458:	e17ffe15 	stw	r5,-8(fp)
   4545c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   45460:	01100034 	movhi	r4,16384
   45464:	21022504 	addi	r4,r4,2196
   45468:	e17ffd17 	ldw	r5,-12(fp)
   4546c:	01800044 	movi	r6,1
   45470:	01c07fc4 	movi	r7,511
   45474:	00453800 	call	45380 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   45478:	01100034 	movhi	r4,16384
   4547c:	21022204 	addi	r4,r4,2184
   45480:	e17ffe17 	ldw	r5,-8(fp)
   45484:	000d883a 	mov	r6,zero
   45488:	01c07fc4 	movi	r7,511
   4548c:	00453800 	call	45380 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   45490:	01100034 	movhi	r4,16384
   45494:	21022804 	addi	r4,r4,2208
   45498:	e17fff17 	ldw	r5,-4(fp)
   4549c:	01800044 	movi	r6,1
   454a0:	01c07fc4 	movi	r7,511
   454a4:	00453800 	call	45380 <alt_open_fd>
}  
   454a8:	e037883a 	mov	sp,fp
   454ac:	dfc00117 	ldw	ra,4(sp)
   454b0:	df000017 	ldw	fp,0(sp)
   454b4:	dec00204 	addi	sp,sp,8
   454b8:	f800283a 	ret

000454bc <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   454bc:	defffc04 	addi	sp,sp,-16
   454c0:	df000315 	stw	fp,12(sp)
   454c4:	df000304 	addi	fp,sp,12
   454c8:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   454cc:	e0bffe17 	ldw	r2,-8(fp)
   454d0:	10800217 	ldw	r2,8(r2)
   454d4:	10d00034 	orhi	r3,r2,16384
   454d8:	e0bffe17 	ldw	r2,-8(fp)
   454dc:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   454e0:	e03ffd15 	stw	zero,-12(fp)
   454e4:	00002006 	br	45568 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   454e8:	e0bffd17 	ldw	r2,-12(fp)
   454ec:	00d00034 	movhi	r3,16384
   454f0:	18c22204 	addi	r3,r3,2184
   454f4:	10800324 	muli	r2,r2,12
   454f8:	10c5883a 	add	r2,r2,r3
   454fc:	10c00017 	ldw	r3,0(r2)
   45500:	e0bffe17 	ldw	r2,-8(fp)
   45504:	10800017 	ldw	r2,0(r2)
   45508:	1880141e 	bne	r3,r2,4555c <alt_file_locked+0xa0>
   4550c:	e0bffd17 	ldw	r2,-12(fp)
   45510:	00d00034 	movhi	r3,16384
   45514:	18c22204 	addi	r3,r3,2184
   45518:	10800324 	muli	r2,r2,12
   4551c:	10c5883a 	add	r2,r2,r3
   45520:	10800204 	addi	r2,r2,8
   45524:	10800017 	ldw	r2,0(r2)
   45528:	1004403a 	cmpge	r2,r2,zero
   4552c:	10000b1e 	bne	r2,zero,4555c <alt_file_locked+0xa0>
   45530:	e0bffd17 	ldw	r2,-12(fp)
   45534:	10800324 	muli	r2,r2,12
   45538:	1007883a 	mov	r3,r2
   4553c:	00900034 	movhi	r2,16384
   45540:	10822204 	addi	r2,r2,2184
   45544:	1887883a 	add	r3,r3,r2
   45548:	e0bffe17 	ldw	r2,-8(fp)
   4554c:	18800326 	beq	r3,r2,4555c <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   45550:	00bffcc4 	movi	r2,-13
   45554:	e0bfff15 	stw	r2,-4(fp)
   45558:	00000a06 	br	45584 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   4555c:	e0bffd17 	ldw	r2,-12(fp)
   45560:	10800044 	addi	r2,r2,1
   45564:	e0bffd15 	stw	r2,-12(fp)
   45568:	00900034 	movhi	r2,16384
   4556c:	1086a204 	addi	r2,r2,6792
   45570:	10800017 	ldw	r2,0(r2)
   45574:	1007883a 	mov	r3,r2
   45578:	e0bffd17 	ldw	r2,-12(fp)
   4557c:	18bfda2e 	bgeu	r3,r2,454e8 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   45580:	e03fff15 	stw	zero,-4(fp)
   45584:	e0bfff17 	ldw	r2,-4(fp)
}
   45588:	e037883a 	mov	sp,fp
   4558c:	df000017 	ldw	fp,0(sp)
   45590:	dec00104 	addi	sp,sp,4
   45594:	f800283a 	ret

00045598 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   45598:	defff404 	addi	sp,sp,-48
   4559c:	dfc00b15 	stw	ra,44(sp)
   455a0:	df000a15 	stw	fp,40(sp)
   455a4:	df000a04 	addi	fp,sp,40
   455a8:	e13ffb15 	stw	r4,-20(fp)
   455ac:	e17ffc15 	stw	r5,-16(fp)
   455b0:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   455b4:	00bfffc4 	movi	r2,-1
   455b8:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
   455bc:	00bffb44 	movi	r2,-19
   455c0:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
   455c4:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   455c8:	e13ffb17 	ldw	r4,-20(fp)
   455cc:	01500034 	movhi	r5,16384
   455d0:	2946a004 	addi	r5,r5,6784
   455d4:	00459440 	call	45944 <alt_find_dev>
   455d8:	e0bffa15 	stw	r2,-24(fp)
   455dc:	e0bffa17 	ldw	r2,-24(fp)
   455e0:	1004c03a 	cmpne	r2,r2,zero
   455e4:	1000051e 	bne	r2,zero,455fc <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   455e8:	e13ffb17 	ldw	r4,-20(fp)
   455ec:	00459d80 	call	459d8 <alt_find_file>
   455f0:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
   455f4:	00800044 	movi	r2,1
   455f8:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   455fc:	e0bffa17 	ldw	r2,-24(fp)
   45600:	1005003a 	cmpeq	r2,r2,zero
   45604:	1000301e 	bne	r2,zero,456c8 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
   45608:	e13ffa17 	ldw	r4,-24(fp)
   4560c:	0045af80 	call	45af8 <alt_get_fd>
   45610:	e0bff815 	stw	r2,-32(fp)
   45614:	e0bff817 	ldw	r2,-32(fp)
   45618:	1004403a 	cmpge	r2,r2,zero
   4561c:	1000031e 	bne	r2,zero,4562c <open+0x94>
    {
      status = index;
   45620:	e0bff817 	ldw	r2,-32(fp)
   45624:	e0bff715 	stw	r2,-36(fp)
   45628:	00002906 	br	456d0 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
   4562c:	e0bff817 	ldw	r2,-32(fp)
   45630:	10800324 	muli	r2,r2,12
   45634:	1007883a 	mov	r3,r2
   45638:	00900034 	movhi	r2,16384
   4563c:	10822204 	addi	r2,r2,2184
   45640:	1885883a 	add	r2,r3,r2
   45644:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   45648:	e0fffc17 	ldw	r3,-16(fp)
   4564c:	00900034 	movhi	r2,16384
   45650:	10bfffc4 	addi	r2,r2,-1
   45654:	1886703a 	and	r3,r3,r2
   45658:	e0bff917 	ldw	r2,-28(fp)
   4565c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   45660:	e0bff617 	ldw	r2,-40(fp)
   45664:	1004c03a 	cmpne	r2,r2,zero
   45668:	1000061e 	bne	r2,zero,45684 <open+0xec>
   4566c:	e13ff917 	ldw	r4,-28(fp)
   45670:	00454bc0 	call	454bc <alt_file_locked>
   45674:	e0bff715 	stw	r2,-36(fp)
   45678:	e0bff717 	ldw	r2,-36(fp)
   4567c:	1004803a 	cmplt	r2,r2,zero
   45680:	1000131e 	bne	r2,zero,456d0 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   45684:	e0bffa17 	ldw	r2,-24(fp)
   45688:	10800317 	ldw	r2,12(r2)
   4568c:	1005003a 	cmpeq	r2,r2,zero
   45690:	1000091e 	bne	r2,zero,456b8 <open+0x120>
   45694:	e0bffa17 	ldw	r2,-24(fp)
   45698:	10800317 	ldw	r2,12(r2)
   4569c:	e13ff917 	ldw	r4,-28(fp)
   456a0:	e17ffb17 	ldw	r5,-20(fp)
   456a4:	e1bffc17 	ldw	r6,-16(fp)
   456a8:	e1fffd17 	ldw	r7,-12(fp)
   456ac:	103ee83a 	callr	r2
   456b0:	e0bfff15 	stw	r2,-4(fp)
   456b4:	00000106 	br	456bc <open+0x124>
   456b8:	e03fff15 	stw	zero,-4(fp)
   456bc:	e0bfff17 	ldw	r2,-4(fp)
   456c0:	e0bff715 	stw	r2,-36(fp)
   456c4:	00000206 	br	456d0 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
   456c8:	00bffb44 	movi	r2,-19
   456cc:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   456d0:	e0bff717 	ldw	r2,-36(fp)
   456d4:	1004403a 	cmpge	r2,r2,zero
   456d8:	1000091e 	bne	r2,zero,45700 <open+0x168>
  {
    alt_release_fd (index);  
   456dc:	e13ff817 	ldw	r4,-32(fp)
   456e0:	0043a4c0 	call	43a4c <alt_release_fd>
    ALT_ERRNO = -status;
   456e4:	00457200 	call	45720 <alt_get_errno>
   456e8:	e0fff717 	ldw	r3,-36(fp)
   456ec:	00c7c83a 	sub	r3,zero,r3
   456f0:	10c00015 	stw	r3,0(r2)
    return -1;
   456f4:	00bfffc4 	movi	r2,-1
   456f8:	e0bffe15 	stw	r2,-8(fp)
   456fc:	00000206 	br	45708 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
   45700:	e0bff817 	ldw	r2,-32(fp)
   45704:	e0bffe15 	stw	r2,-8(fp)
   45708:	e0bffe17 	ldw	r2,-8(fp)
}
   4570c:	e037883a 	mov	sp,fp
   45710:	dfc00117 	ldw	ra,4(sp)
   45714:	df000017 	ldw	fp,0(sp)
   45718:	dec00204 	addi	sp,sp,8
   4571c:	f800283a 	ret

00045720 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   45720:	defffd04 	addi	sp,sp,-12
   45724:	dfc00215 	stw	ra,8(sp)
   45728:	df000115 	stw	fp,4(sp)
   4572c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   45730:	00900034 	movhi	r2,16384
   45734:	1086a304 	addi	r2,r2,6796
   45738:	10800017 	ldw	r2,0(r2)
   4573c:	1005003a 	cmpeq	r2,r2,zero
   45740:	1000061e 	bne	r2,zero,4575c <alt_get_errno+0x3c>
   45744:	00900034 	movhi	r2,16384
   45748:	1086a304 	addi	r2,r2,6796
   4574c:	10800017 	ldw	r2,0(r2)
   45750:	103ee83a 	callr	r2
   45754:	e0bfff15 	stw	r2,-4(fp)
   45758:	00000306 	br	45768 <alt_get_errno+0x48>
   4575c:	00900034 	movhi	r2,16384
   45760:	1086ab04 	addi	r2,r2,6828
   45764:	e0bfff15 	stw	r2,-4(fp)
   45768:	e0bfff17 	ldw	r2,-4(fp)
}
   4576c:	e037883a 	mov	sp,fp
   45770:	dfc00117 	ldw	ra,4(sp)
   45774:	df000017 	ldw	fp,0(sp)
   45778:	dec00204 	addi	sp,sp,8
   4577c:	f800283a 	ret

00045780 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   45780:	defffa04 	addi	sp,sp,-24
   45784:	df000515 	stw	fp,20(sp)
   45788:	df000504 	addi	fp,sp,20
   4578c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   45790:	0005303a 	rdctl	r2,status
   45794:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   45798:	e0fffd17 	ldw	r3,-12(fp)
   4579c:	00bfff84 	movi	r2,-2
   457a0:	1884703a 	and	r2,r3,r2
   457a4:	1001703a 	wrctl	status,r2
  
  return context;
   457a8:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   457ac:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
   457b0:	e0bfff17 	ldw	r2,-4(fp)
   457b4:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   457b8:	e0bffc17 	ldw	r2,-16(fp)
   457bc:	10c00017 	ldw	r3,0(r2)
   457c0:	e0bffc17 	ldw	r2,-16(fp)
   457c4:	10800117 	ldw	r2,4(r2)
   457c8:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
   457cc:	e0bffc17 	ldw	r2,-16(fp)
   457d0:	10c00117 	ldw	r3,4(r2)
   457d4:	e0bffc17 	ldw	r2,-16(fp)
   457d8:	10800017 	ldw	r2,0(r2)
   457dc:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   457e0:	e0fffc17 	ldw	r3,-16(fp)
   457e4:	e0bffc17 	ldw	r2,-16(fp)
   457e8:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
   457ec:	e0fffc17 	ldw	r3,-16(fp)
   457f0:	e0bffc17 	ldw	r2,-16(fp)
   457f4:	18800015 	stw	r2,0(r3)
   457f8:	e0bffe17 	ldw	r2,-8(fp)
   457fc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   45800:	e0bffb17 	ldw	r2,-20(fp)
   45804:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   45808:	e037883a 	mov	sp,fp
   4580c:	df000017 	ldw	fp,0(sp)
   45810:	dec00104 	addi	sp,sp,4
   45814:	f800283a 	ret

00045818 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   45818:	defffb04 	addi	sp,sp,-20
   4581c:	dfc00415 	stw	ra,16(sp)
   45820:	df000315 	stw	fp,12(sp)
   45824:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   45828:	d0a00c17 	ldw	r2,-32720(gp)
   4582c:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   45830:	d0a01717 	ldw	r2,-32676(gp)
   45834:	10800044 	addi	r2,r2,1
   45838:	d0a01715 	stw	r2,-32676(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   4583c:	00003106 	br	45904 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
   45840:	e0bffe17 	ldw	r2,-8(fp)
   45844:	10800017 	ldw	r2,0(r2)
   45848:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   4584c:	e0bffe17 	ldw	r2,-8(fp)
   45850:	10800403 	ldbu	r2,16(r2)
   45854:	10803fcc 	andi	r2,r2,255
   45858:	1005003a 	cmpeq	r2,r2,zero
   4585c:	1000051e 	bne	r2,zero,45874 <alt_tick+0x5c>
   45860:	d0a01717 	ldw	r2,-32676(gp)
   45864:	1004c03a 	cmpne	r2,r2,zero
   45868:	1000021e 	bne	r2,zero,45874 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
   4586c:	e0bffe17 	ldw	r2,-8(fp)
   45870:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   45874:	e0bffe17 	ldw	r2,-8(fp)
   45878:	10c00217 	ldw	r3,8(r2)
   4587c:	d0a01717 	ldw	r2,-32676(gp)
   45880:	10c01e36 	bltu	r2,r3,458fc <alt_tick+0xe4>
   45884:	e0bffe17 	ldw	r2,-8(fp)
   45888:	10800403 	ldbu	r2,16(r2)
   4588c:	10803fcc 	andi	r2,r2,255
   45890:	1004c03a 	cmpne	r2,r2,zero
   45894:	1000191e 	bne	r2,zero,458fc <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
   45898:	e0bffe17 	ldw	r2,-8(fp)
   4589c:	10c00317 	ldw	r3,12(r2)
   458a0:	e0bffe17 	ldw	r2,-8(fp)
   458a4:	11000517 	ldw	r4,20(r2)
   458a8:	183ee83a 	callr	r3
   458ac:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   458b0:	e0bffd17 	ldw	r2,-12(fp)
   458b4:	1004c03a 	cmpne	r2,r2,zero
   458b8:	1000031e 	bne	r2,zero,458c8 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
   458bc:	e13ffe17 	ldw	r4,-8(fp)
   458c0:	00457800 	call	45780 <alt_alarm_stop>
   458c4:	00000d06 	br	458fc <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
   458c8:	e0bffe17 	ldw	r2,-8(fp)
   458cc:	10c00217 	ldw	r3,8(r2)
   458d0:	e0bffd17 	ldw	r2,-12(fp)
   458d4:	1887883a 	add	r3,r3,r2
   458d8:	e0bffe17 	ldw	r2,-8(fp)
   458dc:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   458e0:	e0bffe17 	ldw	r2,-8(fp)
   458e4:	10c00217 	ldw	r3,8(r2)
   458e8:	d0a01717 	ldw	r2,-32676(gp)
   458ec:	1880032e 	bgeu	r3,r2,458fc <alt_tick+0xe4>
        {
          alarm->rollover = 1;
   458f0:	e0fffe17 	ldw	r3,-8(fp)
   458f4:	00800044 	movi	r2,1
   458f8:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
   458fc:	e0bfff17 	ldw	r2,-4(fp)
   45900:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   45904:	d0e00c04 	addi	r3,gp,-32720
   45908:	e0bffe17 	ldw	r2,-8(fp)
   4590c:	10ffcc1e 	bne	r2,r3,45840 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
   45910:	e037883a 	mov	sp,fp
   45914:	dfc00117 	ldw	ra,4(sp)
   45918:	df000017 	ldw	fp,0(sp)
   4591c:	dec00204 	addi	sp,sp,8
   45920:	f800283a 	ret

00045924 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   45924:	deffff04 	addi	sp,sp,-4
   45928:	df000015 	stw	fp,0(sp)
   4592c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   45930:	000170fa 	wrctl	ienable,zero
}
   45934:	e037883a 	mov	sp,fp
   45938:	df000017 	ldw	fp,0(sp)
   4593c:	dec00104 	addi	sp,sp,4
   45940:	f800283a 	ret

00045944 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   45944:	defff904 	addi	sp,sp,-28
   45948:	dfc00615 	stw	ra,24(sp)
   4594c:	df000515 	stw	fp,20(sp)
   45950:	df000504 	addi	fp,sp,20
   45954:	e13ffd15 	stw	r4,-12(fp)
   45958:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
   4595c:	e0bffe17 	ldw	r2,-8(fp)
   45960:	10800017 	ldw	r2,0(r2)
   45964:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   45968:	e13ffd17 	ldw	r4,-12(fp)
   4596c:	00409ac0 	call	409ac <strlen>
   45970:	10800044 	addi	r2,r2,1
   45974:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   45978:	00000d06 	br	459b0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   4597c:	e0bffc17 	ldw	r2,-16(fp)
   45980:	11000217 	ldw	r4,8(r2)
   45984:	e1bffb17 	ldw	r6,-20(fp)
   45988:	e17ffd17 	ldw	r5,-12(fp)
   4598c:	0045c8c0 	call	45c8c <memcmp>
   45990:	1004c03a 	cmpne	r2,r2,zero
   45994:	1000031e 	bne	r2,zero,459a4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   45998:	e0bffc17 	ldw	r2,-16(fp)
   4599c:	e0bfff15 	stw	r2,-4(fp)
   459a0:	00000706 	br	459c0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   459a4:	e0bffc17 	ldw	r2,-16(fp)
   459a8:	10800017 	ldw	r2,0(r2)
   459ac:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   459b0:	e0fffe17 	ldw	r3,-8(fp)
   459b4:	e0bffc17 	ldw	r2,-16(fp)
   459b8:	10fff01e 	bne	r2,r3,4597c <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   459bc:	e03fff15 	stw	zero,-4(fp)
   459c0:	e0bfff17 	ldw	r2,-4(fp)
}
   459c4:	e037883a 	mov	sp,fp
   459c8:	dfc00117 	ldw	ra,4(sp)
   459cc:	df000017 	ldw	fp,0(sp)
   459d0:	dec00204 	addi	sp,sp,8
   459d4:	f800283a 	ret

000459d8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   459d8:	defffa04 	addi	sp,sp,-24
   459dc:	dfc00515 	stw	ra,20(sp)
   459e0:	df000415 	stw	fp,16(sp)
   459e4:	df000404 	addi	fp,sp,16
   459e8:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   459ec:	00900034 	movhi	r2,16384
   459f0:	10869e04 	addi	r2,r2,6776
   459f4:	10800017 	ldw	r2,0(r2)
   459f8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   459fc:	00003306 	br	45acc <alt_find_file+0xf4>
  {
    len = strlen(next->name);
   45a00:	e0bffd17 	ldw	r2,-12(fp)
   45a04:	11000217 	ldw	r4,8(r2)
   45a08:	00409ac0 	call	409ac <strlen>
   45a0c:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
   45a10:	e0bffd17 	ldw	r2,-12(fp)
   45a14:	10c00217 	ldw	r3,8(r2)
   45a18:	e0bffc17 	ldw	r2,-16(fp)
   45a1c:	1885883a 	add	r2,r3,r2
   45a20:	10bfffc4 	addi	r2,r2,-1
   45a24:	10800003 	ldbu	r2,0(r2)
   45a28:	10803fcc 	andi	r2,r2,255
   45a2c:	1080201c 	xori	r2,r2,128
   45a30:	10bfe004 	addi	r2,r2,-128
   45a34:	10800bd8 	cmpnei	r2,r2,47
   45a38:	1000031e 	bne	r2,zero,45a48 <alt_find_file+0x70>
    {
      len -= 1;
   45a3c:	e0bffc17 	ldw	r2,-16(fp)
   45a40:	10bfffc4 	addi	r2,r2,-1
   45a44:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   45a48:	e0bffc17 	ldw	r2,-16(fp)
   45a4c:	1007883a 	mov	r3,r2
   45a50:	e0bffe17 	ldw	r2,-8(fp)
   45a54:	1885883a 	add	r2,r3,r2
   45a58:	10800003 	ldbu	r2,0(r2)
   45a5c:	10803fcc 	andi	r2,r2,255
   45a60:	1080201c 	xori	r2,r2,128
   45a64:	10bfe004 	addi	r2,r2,-128
   45a68:	10800be0 	cmpeqi	r2,r2,47
   45a6c:	10000a1e 	bne	r2,zero,45a98 <alt_find_file+0xc0>
   45a70:	e0bffc17 	ldw	r2,-16(fp)
   45a74:	1007883a 	mov	r3,r2
   45a78:	e0bffe17 	ldw	r2,-8(fp)
   45a7c:	1885883a 	add	r2,r3,r2
   45a80:	10800003 	ldbu	r2,0(r2)
   45a84:	10803fcc 	andi	r2,r2,255
   45a88:	1080201c 	xori	r2,r2,128
   45a8c:	10bfe004 	addi	r2,r2,-128
   45a90:	1004c03a 	cmpne	r2,r2,zero
   45a94:	10000a1e 	bne	r2,zero,45ac0 <alt_find_file+0xe8>
   45a98:	e0bffd17 	ldw	r2,-12(fp)
   45a9c:	11000217 	ldw	r4,8(r2)
   45aa0:	e1bffc17 	ldw	r6,-16(fp)
   45aa4:	e17ffe17 	ldw	r5,-8(fp)
   45aa8:	0045c8c0 	call	45c8c <memcmp>
   45aac:	1004c03a 	cmpne	r2,r2,zero
   45ab0:	1000031e 	bne	r2,zero,45ac0 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   45ab4:	e0bffd17 	ldw	r2,-12(fp)
   45ab8:	e0bfff15 	stw	r2,-4(fp)
   45abc:	00000806 	br	45ae0 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
   45ac0:	e0bffd17 	ldw	r2,-12(fp)
   45ac4:	10800017 	ldw	r2,0(r2)
   45ac8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   45acc:	00d00034 	movhi	r3,16384
   45ad0:	18c69e04 	addi	r3,r3,6776
   45ad4:	e0bffd17 	ldw	r2,-12(fp)
   45ad8:	10ffc91e 	bne	r2,r3,45a00 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   45adc:	e03fff15 	stw	zero,-4(fp)
   45ae0:	e0bfff17 	ldw	r2,-4(fp)
}
   45ae4:	e037883a 	mov	sp,fp
   45ae8:	dfc00117 	ldw	ra,4(sp)
   45aec:	df000017 	ldw	fp,0(sp)
   45af0:	dec00204 	addi	sp,sp,8
   45af4:	f800283a 	ret

00045af8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   45af8:	defffc04 	addi	sp,sp,-16
   45afc:	df000315 	stw	fp,12(sp)
   45b00:	df000304 	addi	fp,sp,12
   45b04:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   45b08:	00bffa04 	movi	r2,-24
   45b0c:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   45b10:	e03ffe15 	stw	zero,-8(fp)
   45b14:	00001e06 	br	45b90 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
   45b18:	e0bffe17 	ldw	r2,-8(fp)
   45b1c:	00d00034 	movhi	r3,16384
   45b20:	18c22204 	addi	r3,r3,2184
   45b24:	10800324 	muli	r2,r2,12
   45b28:	10c5883a 	add	r2,r2,r3
   45b2c:	10800017 	ldw	r2,0(r2)
   45b30:	1004c03a 	cmpne	r2,r2,zero
   45b34:	1000131e 	bne	r2,zero,45b84 <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
   45b38:	e0bffe17 	ldw	r2,-8(fp)
   45b3c:	00d00034 	movhi	r3,16384
   45b40:	18c22204 	addi	r3,r3,2184
   45b44:	10800324 	muli	r2,r2,12
   45b48:	10c7883a 	add	r3,r2,r3
   45b4c:	e0bfff17 	ldw	r2,-4(fp)
   45b50:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
   45b54:	00900034 	movhi	r2,16384
   45b58:	1086a204 	addi	r2,r2,6792
   45b5c:	10c00017 	ldw	r3,0(r2)
   45b60:	e0bffe17 	ldw	r2,-8(fp)
   45b64:	1880040e 	bge	r3,r2,45b78 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
   45b68:	00d00034 	movhi	r3,16384
   45b6c:	18c6a204 	addi	r3,r3,6792
   45b70:	e0bffe17 	ldw	r2,-8(fp)
   45b74:	18800015 	stw	r2,0(r3)
      }
      rc = i;
   45b78:	e0bffe17 	ldw	r2,-8(fp)
   45b7c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   45b80:	00000606 	br	45b9c <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   45b84:	e0bffe17 	ldw	r2,-8(fp)
   45b88:	10800044 	addi	r2,r2,1
   45b8c:	e0bffe15 	stw	r2,-8(fp)
   45b90:	e0bffe17 	ldw	r2,-8(fp)
   45b94:	10800810 	cmplti	r2,r2,32
   45b98:	103fdf1e 	bne	r2,zero,45b18 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   45b9c:	e0bffd17 	ldw	r2,-12(fp)
}
   45ba0:	e037883a 	mov	sp,fp
   45ba4:	df000017 	ldw	fp,0(sp)
   45ba8:	dec00104 	addi	sp,sp,4
   45bac:	f800283a 	ret

00045bb0 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   45bb0:	defffb04 	addi	sp,sp,-20
   45bb4:	df000415 	stw	fp,16(sp)
   45bb8:	df000404 	addi	fp,sp,16
   45bbc:	e13ffe15 	stw	r4,-8(fp)
   45bc0:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   45bc4:	e0bfff17 	ldw	r2,-4(fp)
   45bc8:	10840070 	cmpltui	r2,r2,4097
   45bcc:	1000021e 	bne	r2,zero,45bd8 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   45bd0:	00840004 	movi	r2,4096
   45bd4:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   45bd8:	e0fffe17 	ldw	r3,-8(fp)
   45bdc:	e0bfff17 	ldw	r2,-4(fp)
   45be0:	1885883a 	add	r2,r3,r2
   45be4:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   45be8:	e0bffe17 	ldw	r2,-8(fp)
   45bec:	e0bffd15 	stw	r2,-12(fp)
   45bf0:	00000506 	br	45c08 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   45bf4:	e0bffd17 	ldw	r2,-12(fp)
   45bf8:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   45bfc:	e0bffd17 	ldw	r2,-12(fp)
   45c00:	10800804 	addi	r2,r2,32
   45c04:	e0bffd15 	stw	r2,-12(fp)
   45c08:	e0fffd17 	ldw	r3,-12(fp)
   45c0c:	e0bffc17 	ldw	r2,-16(fp)
   45c10:	18bff836 	bltu	r3,r2,45bf4 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   45c14:	e0bffe17 	ldw	r2,-8(fp)
   45c18:	108007cc 	andi	r2,r2,31
   45c1c:	1005003a 	cmpeq	r2,r2,zero
   45c20:	1000021e 	bne	r2,zero,45c2c <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   45c24:	e0bffd17 	ldw	r2,-12(fp)
   45c28:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   45c2c:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   45c30:	e037883a 	mov	sp,fp
   45c34:	df000017 	ldw	fp,0(sp)
   45c38:	dec00104 	addi	sp,sp,4
   45c3c:	f800283a 	ret

00045c40 <atexit>:
   45c40:	200b883a 	mov	r5,r4
   45c44:	000d883a 	mov	r6,zero
   45c48:	0009883a 	mov	r4,zero
   45c4c:	000f883a 	mov	r7,zero
   45c50:	0045d001 	jmpi	45d00 <__register_exitproc>

00045c54 <exit>:
   45c54:	defffe04 	addi	sp,sp,-8
   45c58:	000b883a 	mov	r5,zero
   45c5c:	dc000015 	stw	r16,0(sp)
   45c60:	dfc00115 	stw	ra,4(sp)
   45c64:	2021883a 	mov	r16,r4
   45c68:	0045e380 	call	45e38 <__call_exitprocs>
   45c6c:	00900034 	movhi	r2,16384
   45c70:	10869b04 	addi	r2,r2,6764
   45c74:	11000017 	ldw	r4,0(r2)
   45c78:	20800f17 	ldw	r2,60(r4)
   45c7c:	10000126 	beq	r2,zero,45c84 <exit+0x30>
   45c80:	103ee83a 	callr	r2
   45c84:	8009883a 	mov	r4,r16
   45c88:	00461740 	call	46174 <_exit>

00045c8c <memcmp>:
   45c8c:	00c000c4 	movi	r3,3
   45c90:	1980032e 	bgeu	r3,r6,45ca0 <memcmp+0x14>
   45c94:	2144b03a 	or	r2,r4,r5
   45c98:	10c4703a 	and	r2,r2,r3
   45c9c:	10000f26 	beq	r2,zero,45cdc <memcmp+0x50>
   45ca0:	31ffffc4 	addi	r7,r6,-1
   45ca4:	3000061e 	bne	r6,zero,45cc0 <memcmp+0x34>
   45ca8:	00000a06 	br	45cd4 <memcmp+0x48>
   45cac:	39ffffc4 	addi	r7,r7,-1
   45cb0:	00bfffc4 	movi	r2,-1
   45cb4:	21000044 	addi	r4,r4,1
   45cb8:	29400044 	addi	r5,r5,1
   45cbc:	38800526 	beq	r7,r2,45cd4 <memcmp+0x48>
   45cc0:	20c00003 	ldbu	r3,0(r4)
   45cc4:	28800003 	ldbu	r2,0(r5)
   45cc8:	18bff826 	beq	r3,r2,45cac <memcmp+0x20>
   45ccc:	1885c83a 	sub	r2,r3,r2
   45cd0:	f800283a 	ret
   45cd4:	0005883a 	mov	r2,zero
   45cd8:	f800283a 	ret
   45cdc:	180f883a 	mov	r7,r3
   45ce0:	20c00017 	ldw	r3,0(r4)
   45ce4:	28800017 	ldw	r2,0(r5)
   45ce8:	18bfed1e 	bne	r3,r2,45ca0 <memcmp+0x14>
   45cec:	31bfff04 	addi	r6,r6,-4
   45cf0:	21000104 	addi	r4,r4,4
   45cf4:	29400104 	addi	r5,r5,4
   45cf8:	39bff936 	bltu	r7,r6,45ce0 <memcmp+0x54>
   45cfc:	003fe806 	br	45ca0 <memcmp+0x14>

00045d00 <__register_exitproc>:
   45d00:	defffa04 	addi	sp,sp,-24
   45d04:	00900034 	movhi	r2,16384
   45d08:	10869b04 	addi	r2,r2,6764
   45d0c:	dc000015 	stw	r16,0(sp)
   45d10:	14000017 	ldw	r16,0(r2)
   45d14:	dd000415 	stw	r20,16(sp)
   45d18:	2829883a 	mov	r20,r5
   45d1c:	81405217 	ldw	r5,328(r16)
   45d20:	dcc00315 	stw	r19,12(sp)
   45d24:	dc800215 	stw	r18,8(sp)
   45d28:	dc400115 	stw	r17,4(sp)
   45d2c:	dfc00515 	stw	ra,20(sp)
   45d30:	2023883a 	mov	r17,r4
   45d34:	3027883a 	mov	r19,r6
   45d38:	3825883a 	mov	r18,r7
   45d3c:	28002526 	beq	r5,zero,45dd4 <__register_exitproc+0xd4>
   45d40:	29000117 	ldw	r4,4(r5)
   45d44:	008007c4 	movi	r2,31
   45d48:	11002716 	blt	r2,r4,45de8 <__register_exitproc+0xe8>
   45d4c:	8800101e 	bne	r17,zero,45d90 <__register_exitproc+0x90>
   45d50:	2105883a 	add	r2,r4,r4
   45d54:	1085883a 	add	r2,r2,r2
   45d58:	20c00044 	addi	r3,r4,1
   45d5c:	1145883a 	add	r2,r2,r5
   45d60:	0009883a 	mov	r4,zero
   45d64:	15000215 	stw	r20,8(r2)
   45d68:	28c00115 	stw	r3,4(r5)
   45d6c:	2005883a 	mov	r2,r4
   45d70:	dfc00517 	ldw	ra,20(sp)
   45d74:	dd000417 	ldw	r20,16(sp)
   45d78:	dcc00317 	ldw	r19,12(sp)
   45d7c:	dc800217 	ldw	r18,8(sp)
   45d80:	dc400117 	ldw	r17,4(sp)
   45d84:	dc000017 	ldw	r16,0(sp)
   45d88:	dec00604 	addi	sp,sp,24
   45d8c:	f800283a 	ret
   45d90:	29802204 	addi	r6,r5,136
   45d94:	00800044 	movi	r2,1
   45d98:	110e983a 	sll	r7,r2,r4
   45d9c:	30c04017 	ldw	r3,256(r6)
   45da0:	2105883a 	add	r2,r4,r4
   45da4:	1085883a 	add	r2,r2,r2
   45da8:	1185883a 	add	r2,r2,r6
   45dac:	19c6b03a 	or	r3,r3,r7
   45db0:	14802015 	stw	r18,128(r2)
   45db4:	14c00015 	stw	r19,0(r2)
   45db8:	00800084 	movi	r2,2
   45dbc:	30c04015 	stw	r3,256(r6)
   45dc0:	88bfe31e 	bne	r17,r2,45d50 <__register_exitproc+0x50>
   45dc4:	30804117 	ldw	r2,260(r6)
   45dc8:	11c4b03a 	or	r2,r2,r7
   45dcc:	30804115 	stw	r2,260(r6)
   45dd0:	003fdf06 	br	45d50 <__register_exitproc+0x50>
   45dd4:	00900034 	movhi	r2,16384
   45dd8:	1086fc04 	addi	r2,r2,7152
   45ddc:	100b883a 	mov	r5,r2
   45de0:	80805215 	stw	r2,328(r16)
   45de4:	003fd606 	br	45d40 <__register_exitproc+0x40>
   45de8:	00800034 	movhi	r2,0
   45dec:	10800004 	addi	r2,r2,0
   45df0:	1000021e 	bne	r2,zero,45dfc <__register_exitproc+0xfc>
   45df4:	013fffc4 	movi	r4,-1
   45df8:	003fdc06 	br	45d6c <__register_exitproc+0x6c>
   45dfc:	01006404 	movi	r4,400
   45e00:	103ee83a 	callr	r2
   45e04:	1007883a 	mov	r3,r2
   45e08:	103ffa26 	beq	r2,zero,45df4 <__register_exitproc+0xf4>
   45e0c:	80805217 	ldw	r2,328(r16)
   45e10:	180b883a 	mov	r5,r3
   45e14:	18000115 	stw	zero,4(r3)
   45e18:	18800015 	stw	r2,0(r3)
   45e1c:	80c05215 	stw	r3,328(r16)
   45e20:	18006215 	stw	zero,392(r3)
   45e24:	18006315 	stw	zero,396(r3)
   45e28:	0009883a 	mov	r4,zero
   45e2c:	883fc826 	beq	r17,zero,45d50 <__register_exitproc+0x50>
   45e30:	003fd706 	br	45d90 <__register_exitproc+0x90>

00045e34 <register_fini>:
   45e34:	f800283a 	ret

00045e38 <__call_exitprocs>:
   45e38:	00900034 	movhi	r2,16384
   45e3c:	10869b04 	addi	r2,r2,6764
   45e40:	10800017 	ldw	r2,0(r2)
   45e44:	defff304 	addi	sp,sp,-52
   45e48:	df000b15 	stw	fp,44(sp)
   45e4c:	d8800115 	stw	r2,4(sp)
   45e50:	00800034 	movhi	r2,0
   45e54:	10800004 	addi	r2,r2,0
   45e58:	1005003a 	cmpeq	r2,r2,zero
   45e5c:	d8800215 	stw	r2,8(sp)
   45e60:	d8800117 	ldw	r2,4(sp)
   45e64:	dd400815 	stw	r21,32(sp)
   45e68:	dd000715 	stw	r20,28(sp)
   45e6c:	10805204 	addi	r2,r2,328
   45e70:	dfc00c15 	stw	ra,48(sp)
   45e74:	ddc00a15 	stw	r23,40(sp)
   45e78:	dd800915 	stw	r22,36(sp)
   45e7c:	dcc00615 	stw	r19,24(sp)
   45e80:	dc800515 	stw	r18,20(sp)
   45e84:	dc400415 	stw	r17,16(sp)
   45e88:	dc000315 	stw	r16,12(sp)
   45e8c:	282b883a 	mov	r21,r5
   45e90:	2039883a 	mov	fp,r4
   45e94:	d8800015 	stw	r2,0(sp)
   45e98:	2829003a 	cmpeq	r20,r5,zero
   45e9c:	d8800117 	ldw	r2,4(sp)
   45ea0:	14405217 	ldw	r17,328(r2)
   45ea4:	88001026 	beq	r17,zero,45ee8 <__call_exitprocs+0xb0>
   45ea8:	ddc00017 	ldw	r23,0(sp)
   45eac:	88800117 	ldw	r2,4(r17)
   45eb0:	8c802204 	addi	r18,r17,136
   45eb4:	143fffc4 	addi	r16,r2,-1
   45eb8:	80000916 	blt	r16,zero,45ee0 <__call_exitprocs+0xa8>
   45ebc:	05bfffc4 	movi	r22,-1
   45ec0:	a000151e 	bne	r20,zero,45f18 <__call_exitprocs+0xe0>
   45ec4:	8409883a 	add	r4,r16,r16
   45ec8:	2105883a 	add	r2,r4,r4
   45ecc:	1485883a 	add	r2,r2,r18
   45ed0:	10c02017 	ldw	r3,128(r2)
   45ed4:	a8c01126 	beq	r21,r3,45f1c <__call_exitprocs+0xe4>
   45ed8:	843fffc4 	addi	r16,r16,-1
   45edc:	85bff81e 	bne	r16,r22,45ec0 <__call_exitprocs+0x88>
   45ee0:	d8800217 	ldw	r2,8(sp)
   45ee4:	10003126 	beq	r2,zero,45fac <__call_exitprocs+0x174>
   45ee8:	dfc00c17 	ldw	ra,48(sp)
   45eec:	df000b17 	ldw	fp,44(sp)
   45ef0:	ddc00a17 	ldw	r23,40(sp)
   45ef4:	dd800917 	ldw	r22,36(sp)
   45ef8:	dd400817 	ldw	r21,32(sp)
   45efc:	dd000717 	ldw	r20,28(sp)
   45f00:	dcc00617 	ldw	r19,24(sp)
   45f04:	dc800517 	ldw	r18,20(sp)
   45f08:	dc400417 	ldw	r17,16(sp)
   45f0c:	dc000317 	ldw	r16,12(sp)
   45f10:	dec00d04 	addi	sp,sp,52
   45f14:	f800283a 	ret
   45f18:	8409883a 	add	r4,r16,r16
   45f1c:	88c00117 	ldw	r3,4(r17)
   45f20:	2105883a 	add	r2,r4,r4
   45f24:	1445883a 	add	r2,r2,r17
   45f28:	18ffffc4 	addi	r3,r3,-1
   45f2c:	11800217 	ldw	r6,8(r2)
   45f30:	1c001526 	beq	r3,r16,45f88 <__call_exitprocs+0x150>
   45f34:	10000215 	stw	zero,8(r2)
   45f38:	303fe726 	beq	r6,zero,45ed8 <__call_exitprocs+0xa0>
   45f3c:	00c00044 	movi	r3,1
   45f40:	1c06983a 	sll	r3,r3,r16
   45f44:	90804017 	ldw	r2,256(r18)
   45f48:	8cc00117 	ldw	r19,4(r17)
   45f4c:	1884703a 	and	r2,r3,r2
   45f50:	10001426 	beq	r2,zero,45fa4 <__call_exitprocs+0x16c>
   45f54:	90804117 	ldw	r2,260(r18)
   45f58:	1884703a 	and	r2,r3,r2
   45f5c:	10000c1e 	bne	r2,zero,45f90 <__call_exitprocs+0x158>
   45f60:	2105883a 	add	r2,r4,r4
   45f64:	1485883a 	add	r2,r2,r18
   45f68:	11400017 	ldw	r5,0(r2)
   45f6c:	e009883a 	mov	r4,fp
   45f70:	303ee83a 	callr	r6
   45f74:	88800117 	ldw	r2,4(r17)
   45f78:	98bfc81e 	bne	r19,r2,45e9c <__call_exitprocs+0x64>
   45f7c:	b8800017 	ldw	r2,0(r23)
   45f80:	147fd526 	beq	r2,r17,45ed8 <__call_exitprocs+0xa0>
   45f84:	003fc506 	br	45e9c <__call_exitprocs+0x64>
   45f88:	8c000115 	stw	r16,4(r17)
   45f8c:	003fea06 	br	45f38 <__call_exitprocs+0x100>
   45f90:	2105883a 	add	r2,r4,r4
   45f94:	1485883a 	add	r2,r2,r18
   45f98:	11000017 	ldw	r4,0(r2)
   45f9c:	303ee83a 	callr	r6
   45fa0:	003ff406 	br	45f74 <__call_exitprocs+0x13c>
   45fa4:	303ee83a 	callr	r6
   45fa8:	003ff206 	br	45f74 <__call_exitprocs+0x13c>
   45fac:	88800117 	ldw	r2,4(r17)
   45fb0:	1000081e 	bne	r2,zero,45fd4 <__call_exitprocs+0x19c>
   45fb4:	89000017 	ldw	r4,0(r17)
   45fb8:	20000726 	beq	r4,zero,45fd8 <__call_exitprocs+0x1a0>
   45fbc:	b9000015 	stw	r4,0(r23)
   45fc0:	8809883a 	mov	r4,r17
   45fc4:	00000000 	call	0 <__alt_mem_onchip_memory-0x40000>
   45fc8:	bc400017 	ldw	r17,0(r23)
   45fcc:	883fb71e 	bne	r17,zero,45eac <__call_exitprocs+0x74>
   45fd0:	003fc506 	br	45ee8 <__call_exitprocs+0xb0>
   45fd4:	89000017 	ldw	r4,0(r17)
   45fd8:	882f883a 	mov	r23,r17
   45fdc:	2023883a 	mov	r17,r4
   45fe0:	883fb21e 	bne	r17,zero,45eac <__call_exitprocs+0x74>
   45fe4:	003fc006 	br	45ee8 <__call_exitprocs+0xb0>

00045fe8 <udivmodsi4>:
   45fe8:	29001b2e 	bgeu	r5,r4,46058 <udivmodsi4+0x70>
   45fec:	28001a16 	blt	r5,zero,46058 <udivmodsi4+0x70>
   45ff0:	00800044 	movi	r2,1
   45ff4:	0007883a 	mov	r3,zero
   45ff8:	01c007c4 	movi	r7,31
   45ffc:	00000306 	br	4600c <udivmodsi4+0x24>
   46000:	19c01326 	beq	r3,r7,46050 <udivmodsi4+0x68>
   46004:	18c00044 	addi	r3,r3,1
   46008:	28000416 	blt	r5,zero,4601c <udivmodsi4+0x34>
   4600c:	294b883a 	add	r5,r5,r5
   46010:	1085883a 	add	r2,r2,r2
   46014:	293ffa36 	bltu	r5,r4,46000 <udivmodsi4+0x18>
   46018:	10000d26 	beq	r2,zero,46050 <udivmodsi4+0x68>
   4601c:	0007883a 	mov	r3,zero
   46020:	21400236 	bltu	r4,r5,4602c <udivmodsi4+0x44>
   46024:	2149c83a 	sub	r4,r4,r5
   46028:	1886b03a 	or	r3,r3,r2
   4602c:	1004d07a 	srli	r2,r2,1
   46030:	280ad07a 	srli	r5,r5,1
   46034:	103ffa1e 	bne	r2,zero,46020 <udivmodsi4+0x38>
   46038:	30000226 	beq	r6,zero,46044 <udivmodsi4+0x5c>
   4603c:	2005883a 	mov	r2,r4
   46040:	f800283a 	ret
   46044:	1809883a 	mov	r4,r3
   46048:	2005883a 	mov	r2,r4
   4604c:	f800283a 	ret
   46050:	0007883a 	mov	r3,zero
   46054:	003ff806 	br	46038 <udivmodsi4+0x50>
   46058:	00800044 	movi	r2,1
   4605c:	0007883a 	mov	r3,zero
   46060:	003fef06 	br	46020 <udivmodsi4+0x38>

00046064 <__divsi3>:
   46064:	defffe04 	addi	sp,sp,-8
   46068:	dc000015 	stw	r16,0(sp)
   4606c:	dfc00115 	stw	ra,4(sp)
   46070:	0021883a 	mov	r16,zero
   46074:	20000c16 	blt	r4,zero,460a8 <__divsi3+0x44>
   46078:	000d883a 	mov	r6,zero
   4607c:	28000e16 	blt	r5,zero,460b8 <__divsi3+0x54>
   46080:	0045fe80 	call	45fe8 <udivmodsi4>
   46084:	1007883a 	mov	r3,r2
   46088:	8005003a 	cmpeq	r2,r16,zero
   4608c:	1000011e 	bne	r2,zero,46094 <__divsi3+0x30>
   46090:	00c7c83a 	sub	r3,zero,r3
   46094:	1805883a 	mov	r2,r3
   46098:	dfc00117 	ldw	ra,4(sp)
   4609c:	dc000017 	ldw	r16,0(sp)
   460a0:	dec00204 	addi	sp,sp,8
   460a4:	f800283a 	ret
   460a8:	0109c83a 	sub	r4,zero,r4
   460ac:	04000044 	movi	r16,1
   460b0:	000d883a 	mov	r6,zero
   460b4:	283ff20e 	bge	r5,zero,46080 <__divsi3+0x1c>
   460b8:	014bc83a 	sub	r5,zero,r5
   460bc:	8021003a 	cmpeq	r16,r16,zero
   460c0:	003fef06 	br	46080 <__divsi3+0x1c>

000460c4 <__modsi3>:
   460c4:	deffff04 	addi	sp,sp,-4
   460c8:	dfc00015 	stw	ra,0(sp)
   460cc:	01800044 	movi	r6,1
   460d0:	2807883a 	mov	r3,r5
   460d4:	20000416 	blt	r4,zero,460e8 <__modsi3+0x24>
   460d8:	28000c16 	blt	r5,zero,4610c <__modsi3+0x48>
   460dc:	dfc00017 	ldw	ra,0(sp)
   460e0:	dec00104 	addi	sp,sp,4
   460e4:	0045fe81 	jmpi	45fe8 <udivmodsi4>
   460e8:	0109c83a 	sub	r4,zero,r4
   460ec:	28000b16 	blt	r5,zero,4611c <__modsi3+0x58>
   460f0:	180b883a 	mov	r5,r3
   460f4:	01800044 	movi	r6,1
   460f8:	0045fe80 	call	45fe8 <udivmodsi4>
   460fc:	0085c83a 	sub	r2,zero,r2
   46100:	dfc00017 	ldw	ra,0(sp)
   46104:	dec00104 	addi	sp,sp,4
   46108:	f800283a 	ret
   4610c:	014bc83a 	sub	r5,zero,r5
   46110:	dfc00017 	ldw	ra,0(sp)
   46114:	dec00104 	addi	sp,sp,4
   46118:	0045fe81 	jmpi	45fe8 <udivmodsi4>
   4611c:	0147c83a 	sub	r3,zero,r5
   46120:	003ff306 	br	460f0 <__modsi3+0x2c>

00046124 <__udivsi3>:
   46124:	000d883a 	mov	r6,zero
   46128:	0045fe81 	jmpi	45fe8 <udivmodsi4>

0004612c <__umodsi3>:
   4612c:	01800044 	movi	r6,1
   46130:	0045fe81 	jmpi	45fe8 <udivmodsi4>

00046134 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
   46134:	defffd04 	addi	sp,sp,-12
   46138:	df000215 	stw	fp,8(sp)
   4613c:	df000204 	addi	fp,sp,8
   46140:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
   46144:	e0bfff17 	ldw	r2,-4(fp)
   46148:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   4614c:	e0bffe17 	ldw	r2,-8(fp)
   46150:	1005003a 	cmpeq	r2,r2,zero
   46154:	1000021e 	bne	r2,zero,46160 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
   46158:	002af070 	cmpltui	zero,zero,43969
   4615c:	00000106 	br	46164 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
   46160:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
   46164:	e037883a 	mov	sp,fp
   46168:	df000017 	ldw	fp,0(sp)
   4616c:	dec00104 	addi	sp,sp,4
   46170:	f800283a 	ret

00046174 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   46174:	defffd04 	addi	sp,sp,-12
   46178:	dfc00215 	stw	ra,8(sp)
   4617c:	df000115 	stw	fp,4(sp)
   46180:	df000104 	addi	fp,sp,4
   46184:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
   46188:	e13fff17 	ldw	r4,-4(fp)
   4618c:	00461340 	call	46134 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   46190:	003fff06 	br	46190 <_exit+0x1c>
   46194:	00045e34 	movhi	zero,4472
