
camera_nios_2.elf:     file format elf32-littlenios2
camera_nios_2.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000401b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00040000 paddr 0x00040000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00040020 paddr 0x00040020 align 2**12
         filesz 0x0000cba0 memsz 0x0000cba0 flags r-x
    LOAD off    0x0000e000 vaddr 0x40000000 paddr 0x0004cbc0 align 2**12
         filesz 0x00001dd8 memsz 0x000020c4 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00040000  00040000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00040020  00040020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000ca0c  000401b4  000401b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000037c  40000000  0004cbc0  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a5c  4000037c  0004cf3c  0000e37c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002ec  40001dd8  0004e998  0000fdd8  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  0000fdd8  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000c98  00000000  00000000  0000fe00  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 0000135b  00000000  00000000  00010a98  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00022fa6  00000000  00000000  00011df3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000790c  00000000  00000000  00034d99  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00013a44  00000000  00000000  0003c6a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001834  00000000  00000000  000500ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002205  00000000  00000000  00051920  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000bc63  00000000  00000000  00053b25  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  0005f788  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000928  00000000  00000000  0005f7b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00063013  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000a  00000000  00000000  00063016  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00063020  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00063021  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00063022  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00063026  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0006302a  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0006302e  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  00063037  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  00063040  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000008  00000000  00000000  00063049  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000034  00000000  00000000  00063051  2**0
                  CONTENTS, READONLY
 29 .jdi          00004d22  00000000  00000000  00063085  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     000a0d3f  00000000  00000000  00067da7  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00040000 l    d  .entry	00000000 .entry
00040020 l    d  .exceptions	00000000 .exceptions
000401b4 l    d  .text	00000000 .text
40000000 l    d  .rodata	00000000 .rodata
4000037c l    d  .rwdata	00000000 .rwdata
40001dd8 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000401fc l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 camera.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
000409fc l     F .text	00000058 __sprint_r
400000b2 l     O .rodata	00000010 blanks.3452
400000a2 l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00042a60 l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0004445c l     F .text	00000058 std
00044568 l     F .text	00000008 __fp_lock
00044570 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
4000037c l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 locale.c
40001da4 l     O .rwdata	00000004 charset
400000e8 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
40000230 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
000486fc l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00049818 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
00049ff4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0004a054 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0004a154 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0004a274 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0004a354 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0004a4b0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0004a6dc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
40001dc8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0004a978 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
40000d38 l     O .rwdata	00001060 jtag_uart
0004aa68 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0004aca8 l     F .text	00000228 altera_avalon_jtag_uart_irq
0004aed0 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0004b784 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0004bad0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0004bef4 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0004c030 l     F .text	000000dc alt_file_locked
0004c294 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0004c9a8 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
0004cb5c l     F .text	00000040 alt_sim_halt
00046218 g     F .text	00000094 _mprec_log10
00046304 g     F .text	00000088 __any_on
00047a10 g     F .text	00000070 _isatty_r
40000208 g     O .rodata	00000028 __mprec_tinytens
0004a510 g     F .text	0000006c alt_main
000408d4 g     F .text	000000a0 _puts_r
40001e34 g     O .bss	00000100 alt_irq
00047a80 g     F .text	00000078 _lseek_r
0004cf3c g       *ABS*	00000000 __flash_rwdata_start
0004920c g     F .text	00000088 __eqdf2
400020c4 g       *ABS*	00000000 __alt_heap_start
0004085c g     F .text	00000044 printf
000474dc g     F .text	00000068 __sseek
000444c4 g     F .text	000000a4 __sinit
0004519c g     F .text	00000084 _setlocale_r
000445c4 g     F .text	00000068 __sfmoreglue
0004a59c g     F .text	00000020 __malloc_unlock
00045c94 g     F .text	000000e0 memmove
000445b4 g     F .text	00000010 _cleanup
0004638c g     F .text	000000bc _Balloc
0004931c g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
00040000 g     F .entry	0000001c __reset
00040020 g       *ABS*	00000000 __flash_exceptions_start
0004799c g     F .text	00000074 _fstat_r
40001df0 g     O .bss	00000004 errno
40001df8 g     O .bss	00000004 alt_argv
40009d98 g       *ABS*	00000000 _gp
40000bb8 g     O .rwdata	00000180 alt_fd_list
0004c4b8 g     F .text	00000094 alt_find_dev
00045bf4 g     F .text	000000a0 memcpy
000445a8 g     F .text	0000000c _cleanup_r
000494b4 g     F .text	000000f8 __floatsidf
0004bfb8 g     F .text	00000078 alt_io_redirect
0004942c g     F .text	00000088 __ltdf2
0004cbc0 g       *ABS*	00000000 __DTOR_END__
00040974 g     F .text	00000014 puts
00046168 g     F .text	000000b0 __ratio
0004b0e8 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
000408a0 g     F .text	00000034 _printf_r
00049954 g     F .text	00000008 __udivsi3
0004a1b4 g     F .text	000000c0 isatty
40000118 g     O .rodata	000000c8 __mprec_tens
00045178 g     F .text	00000008 __locale_charset
0004c724 g     F .text	00000090 alt_icache_flush
40001de4 g     O .bss	00000004 __malloc_top_pad
40001da0 g     O .rwdata	00000004 __mb_cur_max
00045180 g     F .text	0000000c _localeconv_r
00046a84 g     F .text	0000003c __i2b
00044b5c g     F .text	0000049c __sfvwrite_r
00047464 g     F .text	00000070 _sbrk_r
00047af8 g     F .text	00000078 _read_r
4000077c g     O .rwdata	0000000c __lc_ctype
40001dc0 g     O .rwdata	00000004 alt_max_fd
00049cf8 g     F .text	00000138 __unpack_d
00047878 g     F .text	00000110 _fclose_r
00044428 g     F .text	00000034 fflush
40001de8 g     O .bss	00000004 __malloc_max_sbrked_mem
00048b8c g     F .text	00000074 __adddf3
00046048 g     F .text	00000120 __b2d
0004814c g     F .text	000005b0 __umoddi3
0004a3c0 g     F .text	000000f0 lseek
40001d9c g     O .rwdata	00000004 _global_impure_ptr
00046e00 g     F .text	000005f4 _realloc_r
400020c4 g       *ABS*	00000000 __bss_end
0004bdfc g     F .text	000000f8 alt_iic_isr_register
0004c38c g     F .text	0000010c alt_tick
00047b70 g     F .text	000005dc __udivdi3
400001e0 g     O .rodata	00000028 __mprec_bigtens
00046ce0 g     F .text	00000120 __s2b
00049684 g     F .text	00000194 __floatunsidf
00045f68 g     F .text	00000060 __mcmp
00044590 g     F .text	00000018 __fp_lock_all
0004bdb4 g     F .text	00000048 alt_ic_irq_enabled
0004c2f4 g     F .text	00000098 alt_alarm_stop
40001e00 g     O .bss	00000004 alt_irq_active
000400ec g     F .exceptions	000000c8 alt_irq_handler
40000b90 g     O .rwdata	00000028 alt_dev_null
0004b9d8 g     F .text	00000044 alt_dcache_flush_all
00045e34 g     F .text	00000070 __hi0bits
000495ac g     F .text	000000d8 __fixdfsi
40001dd8 g       *ABS*	00000000 __ram_rwdata_end
00040000 g       *ABS*	00000000 __alt_mem_onchip_memory
40001db8 g     O .rwdata	00000008 alt_dev_list
0004a858 g     F .text	00000120 write
4000037c g       *ABS*	00000000 __ram_rodata_end
0004a080 g     F .text	000000d4 fstat
00046bc0 g     F .text	00000120 __pow5mult
40001dd8 g     O .bss	00000004 __nlocale_changed
0004995c g     F .text	00000008 __umodsi3
400020c4 g       *ABS*	00000000 end
0004abe8 g     F .text	000000c0 altera_avalon_jtag_uart_init
0004cbbc g       *ABS*	00000000 __CTOR_LIST__
80000000 g       *ABS*	00000000 __alt_stack_pointer
0004b7f4 g     F .text	00000090 alt_avalon_timer_sc_init
00049964 g     F .text	00000080 __clzsi2
0004b30c g     F .text	00000240 altera_avalon_jtag_uart_write
000444b4 g     F .text	00000004 __sfp_lock_acquire
00045b10 g     F .text	000000e4 memchr
00040a54 g     F .text	00001eac ___vfprintf_internal_r
00044848 g     F .text	00000314 _free_r
0004c9ac g     F .text	000001b0 __call_exitprocs
40001ddc g     O .bss	00000004 __mlocale_changed
40001dac g     O .rwdata	00000004 __malloc_sbrk_base
000401b4 g     F .text	0000004c _start
40001e04 g     O .bss	00000004 _alt_tick_rate
00046750 g     F .text	0000014c __lshift
0004b54c g     F .text	00000238 alt_avalon_spi_command
40001e08 g     O .bss	00000004 _alt_nticks
0004a5bc g     F .text	00000120 read
0004aa0c g     F .text	0000005c alt_sys_init
0004c874 g     F .text	00000134 __register_exitproc
0004689c g     F .text	000001e8 __multiply
0004af80 g     F .text	00000074 altera_avalon_jtag_uart_close
4000037c g       *ABS*	00000000 __ram_rwdata_start
40000000 g       *ABS*	00000000 __ram_rodata_start
40001e0c g     O .bss	00000028 __malloc_current_mallinfo
00046448 g     F .text	0000017c __d2b
0004aaa0 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0004c66c g     F .text	000000b8 alt_get_fd
00049e30 g     F .text	000000c8 __fpcmp_parts_d
00047808 g     F .text	00000070 _close_r
0004c800 g     F .text	00000074 memcmp
0004ab50 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
400020c4 g       *ABS*	00000000 __alt_stack_base
0004ab98 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00042924 g     F .text	0000013c __swsetup_r
00048fb4 g     F .text	00000258 __divdf3
0004462c g     F .text	000000f0 __sfp
000462ac g     F .text	00000058 __copybits
40000788 g     O .rwdata	00000408 __malloc_av_
000444c0 g     F .text	00000004 __sinit_lock_release
00048c00 g     F .text	000003b4 __muldf3
000475c0 g     F .text	00000060 __sread
0004c54c g     F .text	00000120 alt_find_file
0004ba1c g     F .text	000000b4 alt_dev_llist_insert
0004a57c g     F .text	00000020 __malloc_lock
0004a79c g     F .text	000000bc sbrk
0004422c g     F .text	000001fc _fflush_r
00047754 g     F .text	000000b4 _calloc_r
40001dd8 g       *ABS*	00000000 __bss_start
00045d74 g     F .text	00000098 memset
000407fc g     F .text	00000060 main
40001dfc g     O .bss	00000004 alt_envp
40001dec g     O .bss	00000004 __malloc_max_total_mem
0004aaf8 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
000474d4 g     F .text	00000008 __sclose
80000000 g       *ABS*	00000000 __alt_heap_limit
00047988 g     F .text	00000014 fclose
40001f34 g     O .bss	00000190 _atexit0
00042c78 g     F .text	000015b4 _dtoa_r
000453d0 g     F .text	00000740 _malloc_r
40001dc4 g     O .rwdata	00000004 alt_errno
40000000 g       *ABS*	00000000 __alt_mem_mem_if_ddr2_emif
000450c0 g     F .text	000000b8 _fwalk
00049894 g     F .text	00000060 __divsi3
4000023c g     O .rodata	00000014 __thenan_df
0004471c g     F .text	0000012c _malloc_trim_r
0004cbc0 g       *ABS*	00000000 __CTOR_END__
00047620 g     F .text	000000bc strcmp
0004cbc0 g       *ABS*	00000000 __flash_rodata_start
0004cbc0 g       *ABS*	00000000 __DTOR_LIST__
00049294 g     F .text	00000088 __nedf2
0004a9d8 g     F .text	00000034 alt_irq_init
0004a73c g     F .text	00000060 alt_release_fd
40000250 g     O .rodata	00000100 __clz_tab
40001de0 g     O .bss	00000004 _PathLocale
0004c7b4 g     F .text	00000014 atexit
000476dc g     F .text	00000078 _write_r
00045220 g     F .text	0000001c setlocale
40001d98 g     O .rwdata	00000004 _impure_ptr
40001df4 g     O .bss	00000004 alt_argc
0004bb94 g     F .text	00000064 _do_dtors
00040020 g       .exceptions	00000000 alt_irq_entry
00045fc8 g     F .text	00000080 __ulp
000473f4 g     F .text	00000040 __isinfd
00044578 g     F .text	00000018 __fp_unlock_all
40001db0 g     O .rwdata	00000008 alt_fs_list
00040020 g       *ABS*	00000000 __ram_exceptions_start
0004518c g     F .text	00000010 localeconv
0004bc28 g     F .text	00000050 alt_ic_isr_register
40001dd8 g       *ABS*	00000000 _edata
400020c4 g       *ABS*	00000000 _end
000401b4 g       *ABS*	00000000 __ram_exceptions_end
0004aff4 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0004bd14 g     F .text	000000a0 alt_ic_irq_disable
00047544 g     F .text	0000007c __swrite
40001da8 g     O .rwdata	00000004 __malloc_trim_threshold
0004c498 g     F .text	00000020 altera_nios2_qsys_irq_init
0004c7c8 g     F .text	00000038 exit
00044ff8 g     F .text	000000c8 _fwalk_reent
000465c4 g     F .text	0000018c __mdiff
000498f4 g     F .text	00000060 __modsi3
80000000 g       *ABS*	00000000 __alt_data_end
00040020 g     F .exceptions	00000000 alt_exception
000444b8 g     F .text	00000004 __sfp_lock_release
0004cb9c g     F .text	00000020 _exit
00047434 g     F .text	00000030 __isnand
0004b884 g     F .text	00000154 alt_alarm_start
0004523c g     F .text	00000194 __smakebuf_r
00040988 g     F .text	00000074 strlen
0004c10c g     F .text	00000188 open
000493a4 g     F .text	00000088 __gedf2
0004bbf8 g     F .text	00000030 alt_icache_flush_all
40001dcc g     O .rwdata	00000004 alt_priority_mask
0004bc78 g     F .text	0000009c alt_ic_irq_enable
00042900 g     F .text	00000024 __vfprintf_internal
00040200 g     F .text	000005fc camera_init
00048b0c g     F .text	00000080 __subdf3
00045ea4 g     F .text	000000c4 __lo0bits
40001dd0 g     O .rwdata	00000008 alt_alarm_list
0004bb30 g     F .text	00000064 _do_ctors
00049ef8 g     F .text	000000fc close
0004a2d4 g     F .text	00000080 alt_load
000499e4 g     F .text	00000314 __pack_d
00000000  w      *UND*	00000000 free
000444bc g     F .text	00000004 __sinit_lock_acquire
00046ac0 g     F .text	00000100 __multadd
00045e0c g     F .text	00000028 _Bfree



Disassembly of section .entry:

00040000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   40000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   40004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   40008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   4000c:	00bffd16 	blt	zero,r2,40004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   40010:	00400134 	movhi	at,4
    ori r1, r1, %lo(_start)
   40014:	08406d14 	ori	at,at,436
    jmp r1
   40018:	0800683a 	jmp	at
   4001c:	00000000 	call	0 <__reset-0x40000>

Disassembly of section .exceptions:

00040020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
   40020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
   40024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
   40028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   4002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   40030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   40034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   40038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   4003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   40040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
   40044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
   40048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   4004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   40050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   40054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   40058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   4005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   40060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   40064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   40068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   4006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   40070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   40074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   40078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   4007c:	10000326 	beq	r2,zero,4008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   40080:	20000226 	beq	r4,zero,4008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   40084:	00400ec0 	call	400ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   40088:	00000306 	br	40098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   4008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   40090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   40094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   40098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   4009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   400a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   400a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   400a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   400ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   400b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   400b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   400b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   400bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   400c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
   400c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   400c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   400cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   400d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   400d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   400d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   400dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   400e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
   400e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   400e8:	ef80083a 	eret

000400ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   400ec:	defff904 	addi	sp,sp,-28
   400f0:	dfc00615 	stw	ra,24(sp)
   400f4:	df000515 	stw	fp,20(sp)
   400f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   400fc:	0005313a 	rdctl	r2,ipending
   40100:	e0bffc15 	stw	r2,-16(fp)

  return active;
   40104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   40108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
   4010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   40110:	00800044 	movi	r2,1
   40114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   40118:	e0ffff17 	ldw	r3,-4(fp)
   4011c:	e0bffe17 	ldw	r2,-8(fp)
   40120:	1884703a 	and	r2,r3,r2
   40124:	1005003a 	cmpeq	r2,r2,zero
   40128:	1000161e 	bne	r2,zero,40184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   4012c:	e0bffd17 	ldw	r2,-12(fp)
   40130:	00d00034 	movhi	r3,16384
   40134:	18c78d04 	addi	r3,r3,7732
   40138:	100490fa 	slli	r2,r2,3
   4013c:	10c5883a 	add	r2,r2,r3
   40140:	11400017 	ldw	r5,0(r2)
   40144:	e0bffd17 	ldw	r2,-12(fp)
   40148:	00d00034 	movhi	r3,16384
   4014c:	18c78d04 	addi	r3,r3,7732
   40150:	100490fa 	slli	r2,r2,3
   40154:	10c5883a 	add	r2,r2,r3
   40158:	10800104 	addi	r2,r2,4
   4015c:	11000017 	ldw	r4,0(r2)
   40160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   40164:	0005313a 	rdctl	r2,ipending
   40168:	e0bffb15 	stw	r2,-20(fp)

  return active;
   4016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
   40170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
   40174:	e0bfff17 	ldw	r2,-4(fp)
   40178:	1004c03a 	cmpne	r2,r2,zero
   4017c:	103fe31e 	bne	r2,zero,4010c <alt_irq_handler+0x20>
   40180:	00000706 	br	401a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   40184:	e0bffe17 	ldw	r2,-8(fp)
   40188:	1085883a 	add	r2,r2,r2
   4018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
   40190:	e0bffd17 	ldw	r2,-12(fp)
   40194:	10800044 	addi	r2,r2,1
   40198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   4019c:	003fde06 	br	40118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   401a0:	e037883a 	mov	sp,fp
   401a4:	dfc00117 	ldw	ra,4(sp)
   401a8:	df000017 	ldw	fp,0(sp)
   401ac:	dec00204 	addi	sp,sp,8
   401b0:	f800283a 	ret

Disassembly of section .text:

000401b4 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
   401b4:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
   401b8:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
   401bc:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   401c0:	00bffd16 	blt	zero,r2,401b8 <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   401c4:	06e00034 	movhi	sp,32768
    ori sp, sp, %lo(__alt_stack_pointer)
   401c8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
   401cc:	06900034 	movhi	gp,16384
    ori gp, gp, %lo(_gp)
   401d0:	d6a76614 	ori	gp,gp,40344
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   401d4:	00900034 	movhi	r2,16384
    ori r2, r2, %lo(__bss_start)
   401d8:	10877614 	ori	r2,r2,7640

    movhi r3, %hi(__bss_end)
   401dc:	00d00034 	movhi	r3,16384
    ori r3, r3, %lo(__bss_end)
   401e0:	18c83114 	ori	r3,r3,8388

    beq r2, r3, 1f
   401e4:	10c00326 	beq	r2,r3,401f4 <_start+0x40>

0:
    stw zero, (r2)
   401e8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   401ec:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   401f0:	10fffd36 	bltu	r2,r3,401e8 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   401f4:	004a2d40 	call	4a2d4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   401f8:	004a5100 	call	4a510 <alt_main>

000401fc <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   401fc:	003fff06 	br	401fc <alt_after_alt_main>

00040200 <camera_init>:
 */

#include "system.h"
#include "altera_avalon_spi.h"

void camera_init(alt_u32 SPI_BASE) {
   40200:	defff904 	addi	sp,sp,-28
   40204:	dfc00615 	stw	ra,24(sp)
   40208:	df000515 	stw	fp,20(sp)
   4020c:	df000504 	addi	fp,sp,20
   40210:	e13fff15 	stw	r4,-4(fp)

	alt_u8 sentwrite[2];
	alt_u8 received = 0;
   40214:	e03ffe85 	stb	zero,-6(fp)

	sentwrite[1] = 44;
   40218:	00800b04 	movi	r2,44
   4021c:	e0bffe45 	stb	r2,-7(fp)
	sentwrite[0] = 103 | 0x80;
   40220:	00bff9c4 	movi	r2,-25
   40224:	e0bffe05 	stb	r2,-8(fp)
	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   40228:	d8000015 	stw	zero,0(sp)
   4022c:	e0bffe84 	addi	r2,fp,-6
   40230:	d8800115 	stw	r2,4(sp)
   40234:	d8000215 	stw	zero,8(sp)
   40238:	e13fff17 	ldw	r4,-4(fp)
   4023c:	000b883a 	mov	r5,zero
   40240:	01800084 	movi	r6,2
   40244:	e1fffe04 	addi	r7,fp,-8
   40248:	004b54c0 	call	4b54c <alt_avalon_spi_command>

	sentwrite[1] = 4;
   4024c:	00800104 	movi	r2,4
   40250:	e0bffe45 	stb	r2,-7(fp)
	sentwrite[0] = 84 | 0x80;
   40254:	00bff504 	movi	r2,-44
   40258:	e0bffe05 	stb	r2,-8(fp)
	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   4025c:	d8000015 	stw	zero,0(sp)
   40260:	e0bffe84 	addi	r2,fp,-6
   40264:	d8800115 	stw	r2,4(sp)
   40268:	d8000215 	stw	zero,8(sp)
   4026c:	e13fff17 	ldw	r4,-4(fp)
   40270:	000b883a 	mov	r5,zero
   40274:	01800084 	movi	r6,2
   40278:	e1fffe04 	addi	r7,fp,-8
   4027c:	004b54c0 	call	4b54c <alt_avalon_spi_command>

	sentwrite[1] = 1;
   40280:	00800044 	movi	r2,1
   40284:	e0bffe45 	stb	r2,-7(fp)
	sentwrite[0] = 85 | 0x80;
   40288:	00bff544 	movi	r2,-43
   4028c:	e0bffe05 	stb	r2,-8(fp)
	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   40290:	d8000015 	stw	zero,0(sp)
   40294:	e0bffe84 	addi	r2,fp,-6
   40298:	d8800115 	stw	r2,4(sp)
   4029c:	d8000215 	stw	zero,8(sp)
   402a0:	e13fff17 	ldw	r4,-4(fp)
   402a4:	000b883a 	mov	r5,zero
   402a8:	01800084 	movi	r6,2
   402ac:	e1fffe04 	addi	r7,fp,-8
   402b0:	004b54c0 	call	4b54c <alt_avalon_spi_command>

	sentwrite[1] = 64;
   402b4:	00801004 	movi	r2,64
   402b8:	e0bffe45 	stb	r2,-7(fp)
	sentwrite[0] = 88 | 0x80;
   402bc:	00bff604 	movi	r2,-40
   402c0:	e0bffe05 	stb	r2,-8(fp)
	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   402c4:	d8000015 	stw	zero,0(sp)
   402c8:	e0bffe84 	addi	r2,fp,-6
   402cc:	d8800115 	stw	r2,4(sp)
   402d0:	d8000215 	stw	zero,8(sp)
   402d4:	e13fff17 	ldw	r4,-4(fp)
   402d8:	000b883a 	mov	r5,zero
   402dc:	01800084 	movi	r6,2
   402e0:	e1fffe04 	addi	r7,fp,-8
   402e4:	004b54c0 	call	4b54c <alt_avalon_spi_command>

	sentwrite[1] = 64;
   402e8:	00801004 	movi	r2,64
   402ec:	e0bffe45 	stb	r2,-7(fp)
	sentwrite[0] = 91 | 0x80;
   402f0:	00bff6c4 	movi	r2,-37
   402f4:	e0bffe05 	stb	r2,-8(fp)
	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   402f8:	d8000015 	stw	zero,0(sp)
   402fc:	e0bffe84 	addi	r2,fp,-6
   40300:	d8800115 	stw	r2,4(sp)
   40304:	d8000215 	stw	zero,8(sp)
   40308:	e13fff17 	ldw	r4,-4(fp)
   4030c:	000b883a 	mov	r5,zero
   40310:	01800084 	movi	r6,2
   40314:	e1fffe04 	addi	r7,fp,-8
   40318:	004b54c0 	call	4b54c <alt_avalon_spi_command>

	sentwrite[1] = 101;
   4031c:	00801944 	movi	r2,101
   40320:	e0bffe45 	stb	r2,-7(fp)
	sentwrite[0] = 94 | 0x80;
   40324:	00bff784 	movi	r2,-34
   40328:	e0bffe05 	stb	r2,-8(fp)
	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   4032c:	d8000015 	stw	zero,0(sp)
   40330:	e0bffe84 	addi	r2,fp,-6
   40334:	d8800115 	stw	r2,4(sp)
   40338:	d8000215 	stw	zero,8(sp)
   4033c:	e13fff17 	ldw	r4,-4(fp)
   40340:	000b883a 	mov	r5,zero
   40344:	01800084 	movi	r6,2
   40348:	e1fffe04 	addi	r7,fp,-8
   4034c:	004b54c0 	call	4b54c <alt_avalon_spi_command>

	sentwrite[1] = 109;
   40350:	00801b44 	movi	r2,109
   40354:	e0bffe45 	stb	r2,-7(fp)
	sentwrite[0] = 98 | 0x80;
   40358:	00bff884 	movi	r2,-30
   4035c:	e0bffe05 	stb	r2,-8(fp)
	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   40360:	d8000015 	stw	zero,0(sp)
   40364:	e0bffe84 	addi	r2,fp,-6
   40368:	d8800115 	stw	r2,4(sp)
   4036c:	d8000215 	stw	zero,8(sp)
   40370:	e13fff17 	ldw	r4,-4(fp)
   40374:	000b883a 	mov	r5,zero
   40378:	01800084 	movi	r6,2
   4037c:	e1fffe04 	addi	r7,fp,-8
   40380:	004b54c0 	call	4b54c <alt_avalon_spi_command>

	sentwrite[1] = 109;
   40384:	00801b44 	movi	r2,109
   40388:	e0bffe45 	stb	r2,-7(fp)
	sentwrite[0] = 99 | 0x80;
   4038c:	00bff8c4 	movi	r2,-29
   40390:	e0bffe05 	stb	r2,-8(fp)
	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   40394:	d8000015 	stw	zero,0(sp)
   40398:	e0bffe84 	addi	r2,fp,-6
   4039c:	d8800115 	stw	r2,4(sp)
   403a0:	d8000215 	stw	zero,8(sp)
   403a4:	e13fff17 	ldw	r4,-4(fp)
   403a8:	000b883a 	mov	r5,zero
   403ac:	01800084 	movi	r6,2
   403b0:	e1fffe04 	addi	r7,fp,-8
   403b4:	004b54c0 	call	4b54c <alt_avalon_spi_command>

	sentwrite[1] = 106;
   403b8:	00801a84 	movi	r2,106
   403bc:	e0bffe45 	stb	r2,-7(fp)
	sentwrite[0] = 95 | 0x80;
   403c0:	00bff7c4 	movi	r2,-33
   403c4:	e0bffe05 	stb	r2,-8(fp)
	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   403c8:	d8000015 	stw	zero,0(sp)
   403cc:	e0bffe84 	addi	r2,fp,-6
   403d0:	d8800115 	stw	r2,4(sp)
   403d4:	d8000215 	stw	zero,8(sp)
   403d8:	e13fff17 	ldw	r4,-4(fp)
   403dc:	000b883a 	mov	r5,zero
   403e0:	01800084 	movi	r6,2
   403e4:	e1fffe04 	addi	r7,fp,-8
   403e8:	004b54c0 	call	4b54c <alt_avalon_spi_command>

	sentwrite[1] = 1;
   403ec:	00800044 	movi	r2,1
   403f0:	e0bffe45 	stb	r2,-7(fp)
	sentwrite[0] = 117 | 0x80;
   403f4:	00bffd44 	movi	r2,-11
   403f8:	e0bffe05 	stb	r2,-8(fp)
	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   403fc:	d8000015 	stw	zero,0(sp)
   40400:	e0bffe84 	addi	r2,fp,-6
   40404:	d8800115 	stw	r2,4(sp)
   40408:	d8000215 	stw	zero,8(sp)
   4040c:	e13fff17 	ldw	r4,-4(fp)
   40410:	000b883a 	mov	r5,zero
   40414:	01800084 	movi	r6,2
   40418:	e1fffe04 	addi	r7,fp,-8
   4041c:	004b54c0 	call	4b54c <alt_avalon_spi_command>

	sentwrite[1] = 1;
   40420:	00800044 	movi	r2,1
   40424:	e0bffe45 	stb	r2,-7(fp)
	sentwrite[0] = 115 | 0x80;
   40428:	00bffcc4 	movi	r2,-13
   4042c:	e0bffe05 	stb	r2,-8(fp)
	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   40430:	d8000015 	stw	zero,0(sp)
   40434:	e0bffe84 	addi	r2,fp,-6
   40438:	d8800115 	stw	r2,4(sp)
   4043c:	d8000215 	stw	zero,8(sp)
   40440:	e13fff17 	ldw	r4,-4(fp)
   40444:	000b883a 	mov	r5,zero
   40448:	01800084 	movi	r6,2
   4044c:	e1fffe04 	addi	r7,fp,-8
   40450:	004b54c0 	call	4b54c <alt_avalon_spi_command>

	sentwrite[1] = 7;
   40454:	008001c4 	movi	r2,7
   40458:	e0bffe45 	stb	r2,-7(fp)
	sentwrite[0] = 82 | 0x80;
   4045c:	00bff484 	movi	r2,-46
   40460:	e0bffe05 	stb	r2,-8(fp)
	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   40464:	d8000015 	stw	zero,0(sp)
   40468:	e0bffe84 	addi	r2,fp,-6
   4046c:	d8800115 	stw	r2,4(sp)
   40470:	d8000215 	stw	zero,8(sp)
   40474:	e13fff17 	ldw	r4,-4(fp)
   40478:	000b883a 	mov	r5,zero
   4047c:	01800084 	movi	r6,2
   40480:	e1fffe04 	addi	r7,fp,-8
   40484:	004b54c0 	call	4b54c <alt_avalon_spi_command>

	//adjusting registers for optimal performance
	sentwrite[1] = 44; //req:44, valid:40-55
   40488:	00800b04 	movi	r2,44
   4048c:	e0bffe45 	stb	r2,-7(fp)
	sentwrite[0] = 103 | 0x80;
   40490:	00bff9c4 	movi	r2,-25
   40494:	e0bffe05 	stb	r2,-8(fp)
	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   40498:	d8000015 	stw	zero,0(sp)
   4049c:	e0bffe84 	addi	r2,fp,-6
   404a0:	d8800115 	stw	r2,4(sp)
   404a4:	d8000215 	stw	zero,8(sp)
   404a8:	e13fff17 	ldw	r4,-4(fp)
   404ac:	000b883a 	mov	r5,zero
   404b0:	01800084 	movi	r6,2
   404b4:	e1fffe04 	addi	r7,fp,-8
   404b8:	004b54c0 	call	4b54c <alt_avalon_spi_command>

	sentwrite[1] = 109; //req:109, valid:102-115
   404bc:	00801b44 	movi	r2,109
   404c0:	e0bffe45 	stb	r2,-7(fp)
	sentwrite[0] = 98 | 0x80;
   404c4:	00bff884 	movi	r2,-30
   404c8:	e0bffe05 	stb	r2,-8(fp)
	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   404cc:	d8000015 	stw	zero,0(sp)
   404d0:	e0bffe84 	addi	r2,fp,-6
   404d4:	d8800115 	stw	r2,4(sp)
   404d8:	d8000215 	stw	zero,8(sp)
   404dc:	e13fff17 	ldw	r4,-4(fp)
   404e0:	000b883a 	mov	r5,zero
   404e4:	01800084 	movi	r6,2
   404e8:	e1fffe04 	addi	r7,fp,-8
   404ec:	004b54c0 	call	4b54c <alt_avalon_spi_command>

	sentwrite[1] = 109; //req:109, valid:102-115
   404f0:	00801b44 	movi	r2,109
   404f4:	e0bffe45 	stb	r2,-7(fp)
	sentwrite[0] = 99 | 0x80;
   404f8:	00bff8c4 	movi	r2,-29
   404fc:	e0bffe05 	stb	r2,-8(fp)
	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   40500:	d8000015 	stw	zero,0(sp)
   40504:	e0bffe84 	addi	r2,fp,-6
   40508:	d8800115 	stw	r2,4(sp)
   4050c:	d8000215 	stw	zero,8(sp)
   40510:	e13fff17 	ldw	r4,-4(fp)
   40514:	000b883a 	mov	r5,zero
   40518:	01800084 	movi	r6,2
   4051c:	e1fffe04 	addi	r7,fp,-8
   40520:	004b54c0 	call	4b54c <alt_avalon_spi_command>

	//channel mode 0=16 channels; 1=8 channels; 2=4 channels; 3=2 channels
	sentwrite[1] = 2;
   40524:	00800084 	movi	r2,2
   40528:	e0bffe45 	stb	r2,-7(fp)
	sentwrite[0] = 72 | 0x80;
   4052c:	00bff204 	movi	r2,-56
   40530:	e0bffe05 	stb	r2,-8(fp)
	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   40534:	d8000015 	stw	zero,0(sp)
   40538:	e0bffe84 	addi	r2,fp,-6
   4053c:	d8800115 	stw	r2,4(sp)
   40540:	d8000215 	stw	zero,8(sp)
   40544:	e13fff17 	ldw	r4,-4(fp)
   40548:	000b883a 	mov	r5,zero
   4054c:	01800084 	movi	r6,2
   40550:	e1fffe04 	addi	r7,fp,-8
   40554:	004b54c0 	call	4b54c <alt_avalon_spi_command>

	//	request amount of frames
	sentwrite[1] = 10;
   40558:	00800284 	movi	r2,10
   4055c:	e0bffe45 	stb	r2,-7(fp)
	sentwrite[0] = 70 | 0x80;
   40560:	00bff184 	movi	r2,-58
   40564:	e0bffe05 	stb	r2,-8(fp)

	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   40568:	d8000015 	stw	zero,0(sp)
   4056c:	e0bffe84 	addi	r2,fp,-6
   40570:	d8800115 	stw	r2,4(sp)
   40574:	d8000215 	stw	zero,8(sp)
   40578:	e13fff17 	ldw	r4,-4(fp)
   4057c:	000b883a 	mov	r5,zero
   40580:	01800084 	movi	r6,2
   40584:	e1fffe04 	addi	r7,fp,-8
   40588:	004b54c0 	call	4b54c <alt_avalon_spi_command>

	//	training pattern 1
	//sentwrite[1] = 0xFF;
	sentwrite[1] = 0x01 | 0x80;
   4058c:	00bfe044 	movi	r2,-127
   40590:	e0bffe45 	stb	r2,-7(fp)
	sentwrite[0] = 78 | 0x80;
   40594:	00bff384 	movi	r2,-50
   40598:	e0bffe05 	stb	r2,-8(fp)

	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   4059c:	d8000015 	stw	zero,0(sp)
   405a0:	e0bffe84 	addi	r2,fp,-6
   405a4:	d8800115 	stw	r2,4(sp)
   405a8:	d8000215 	stw	zero,8(sp)
   405ac:	e13fff17 	ldw	r4,-4(fp)
   405b0:	000b883a 	mov	r5,zero
   405b4:	01800084 	movi	r6,2
   405b8:	e1fffe04 	addi	r7,fp,-8
   405bc:	004b54c0 	call	4b54c <alt_avalon_spi_command>

	//	training pattern 2
	//sentwrite[1] = 0x03;
	sentwrite[1] = 0x01 | 0x80;
   405c0:	00bfe044 	movi	r2,-127
   405c4:	e0bffe45 	stb	r2,-7(fp)
	sentwrite[0] = 79 | 0x80;
   405c8:	00bff3c4 	movi	r2,-49
   405cc:	e0bffe05 	stb	r2,-8(fp)

	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   405d0:	d8000015 	stw	zero,0(sp)
   405d4:	e0bffe84 	addi	r2,fp,-6
   405d8:	d8800115 	stw	r2,4(sp)
   405dc:	d8000215 	stw	zero,8(sp)
   405e0:	e13fff17 	ldw	r4,-4(fp)
   405e4:	000b883a 	mov	r5,zero
   405e8:	01800084 	movi	r6,2
   405ec:	e1fffe04 	addi	r7,fp,-8
   405f0:	004b54c0 	call	4b54c <alt_avalon_spi_command>

	//number of lines 1 255
	sentwrite[1] = 0x30; //0x40
   405f4:	00800c04 	movi	r2,48
   405f8:	e0bffe45 	stb	r2,-7(fp)
	sentwrite[0] = 1 | 0x80;
   405fc:	00bfe044 	movi	r2,-127
   40600:	e0bffe05 	stb	r2,-8(fp)
	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   40604:	d8000015 	stw	zero,0(sp)
   40608:	e0bffe84 	addi	r2,fp,-6
   4060c:	d8800115 	stw	r2,4(sp)
   40610:	d8000215 	stw	zero,8(sp)
   40614:	e13fff17 	ldw	r4,-4(fp)
   40618:	000b883a 	mov	r5,zero
   4061c:	01800084 	movi	r6,2
   40620:	e1fffe04 	addi	r7,fp,-8
   40624:	004b54c0 	call	4b54c <alt_avalon_spi_command>

	//number of lines 2 1
	sentwrite[1] = 0x04; //0x04
   40628:	00800104 	movi	r2,4
   4062c:	e0bffe45 	stb	r2,-7(fp)
	sentwrite[0] = 2 | 0x80;
   40630:	00bfe084 	movi	r2,-126
   40634:	e0bffe05 	stb	r2,-8(fp)
	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   40638:	d8000015 	stw	zero,0(sp)
   4063c:	e0bffe84 	addi	r2,fp,-6
   40640:	d8800115 	stw	r2,4(sp)
   40644:	d8000215 	stw	zero,8(sp)
   40648:	e13fff17 	ldw	r4,-4(fp)
   4064c:	000b883a 	mov	r5,zero
   40650:	01800084 	movi	r6,2
   40654:	e1fffe04 	addi	r7,fp,-8
   40658:	004b54c0 	call	4b54c <alt_avalon_spi_command>

	//start row window 1
	sentwrite[1] = 0x00; //0x00
   4065c:	e03ffe45 	stb	zero,-7(fp)
	sentwrite[0] = 3 | 0x80;
   40660:	00bfe0c4 	movi	r2,-125
   40664:	e0bffe05 	stb	r2,-8(fp)
	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   40668:	d8000015 	stw	zero,0(sp)
   4066c:	e0bffe84 	addi	r2,fp,-6
   40670:	d8800115 	stw	r2,4(sp)
   40674:	d8000215 	stw	zero,8(sp)
   40678:	e13fff17 	ldw	r4,-4(fp)
   4067c:	000b883a 	mov	r5,zero
   40680:	01800084 	movi	r6,2
   40684:	e1fffe04 	addi	r7,fp,-8
   40688:	004b54c0 	call	4b54c <alt_avalon_spi_command>

	//start row window 2
	sentwrite[1] = 0x00; //0x00
   4068c:	e03ffe45 	stb	zero,-7(fp)
	sentwrite[0] = 4 | 0x80;
   40690:	00bfe104 	movi	r2,-124
   40694:	e0bffe05 	stb	r2,-8(fp)
	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   40698:	d8000015 	stw	zero,0(sp)
   4069c:	e0bffe84 	addi	r2,fp,-6
   406a0:	d8800115 	stw	r2,4(sp)
   406a4:	d8000215 	stw	zero,8(sp)
   406a8:	e13fff17 	ldw	r4,-4(fp)
   406ac:	000b883a 	mov	r5,zero
   406b0:	01800084 	movi	r6,2
   406b4:	e1fffe04 	addi	r7,fp,-8
   406b8:	004b54c0 	call	4b54c <alt_avalon_spi_command>

	// row skip 1
	sentwrite[1] = 0x00; //0x00
   406bc:	e03ffe45 	stb	zero,-7(fp)
	sentwrite[0] = 35 | 0x80;
   406c0:	00bfe8c4 	movi	r2,-93
   406c4:	e0bffe05 	stb	r2,-8(fp)
	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   406c8:	d8000015 	stw	zero,0(sp)
   406cc:	e0bffe84 	addi	r2,fp,-6
   406d0:	d8800115 	stw	r2,4(sp)
   406d4:	d8000215 	stw	zero,8(sp)
   406d8:	e13fff17 	ldw	r4,-4(fp)
   406dc:	000b883a 	mov	r5,zero
   406e0:	01800084 	movi	r6,2
   406e4:	e1fffe04 	addi	r7,fp,-8
   406e8:	004b54c0 	call	4b54c <alt_avalon_spi_command>

	// row skip 2
	sentwrite[1] = 0x00; //0x00
   406ec:	e03ffe45 	stb	zero,-7(fp)
	sentwrite[0] = 37 | 0x80;
   406f0:	00bfe944 	movi	r2,-91
   406f4:	e0bffe05 	stb	r2,-8(fp)
	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   406f8:	d8000015 	stw	zero,0(sp)
   406fc:	e0bffe84 	addi	r2,fp,-6
   40700:	d8800115 	stw	r2,4(sp)
   40704:	d8000215 	stw	zero,8(sp)
   40708:	e13fff17 	ldw	r4,-4(fp)
   4070c:	000b883a 	mov	r5,zero
   40710:	01800084 	movi	r6,2
   40714:	e1fffe04 	addi	r7,fp,-8
   40718:	004b54c0 	call	4b54c <alt_avalon_spi_command>
//	sentwrite[1] = 0x01;
//	sentwrite[0] = 111 | 0x80;
//	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);

	//	image flipping x/y
	sentwrite[1] = 0x01; //0x00
   4071c:	00800044 	movi	r2,1
   40720:	e0bffe45 	stb	r2,-7(fp)
	sentwrite[0] = 40 | 0x80;
   40724:	00bfea04 	movi	r2,-88
   40728:	e0bffe05 	stb	r2,-8(fp)
	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   4072c:	d8000015 	stw	zero,0(sp)
   40730:	e0bffe84 	addi	r2,fp,-6
   40734:	d8800115 	stw	r2,4(sp)
   40738:	d8000215 	stw	zero,8(sp)
   4073c:	e13fff17 	ldw	r4,-4(fp)
   40740:	000b883a 	mov	r5,zero
   40744:	01800084 	movi	r6,2
   40748:	e1fffe04 	addi	r7,fp,-8
   4074c:	004b54c0 	call	4b54c <alt_avalon_spi_command>

	//	exposure time 1
	sentwrite[1] = 0x40; //0x40
   40750:	00801004 	movi	r2,64
   40754:	e0bffe45 	stb	r2,-7(fp)
	sentwrite[0] = 42 | 0x80;
   40758:	00bfea84 	movi	r2,-86
   4075c:	e0bffe05 	stb	r2,-8(fp)
	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   40760:	d8000015 	stw	zero,0(sp)
   40764:	e0bffe84 	addi	r2,fp,-6
   40768:	d8800115 	stw	r2,4(sp)
   4076c:	d8000215 	stw	zero,8(sp)
   40770:	e13fff17 	ldw	r4,-4(fp)
   40774:	000b883a 	mov	r5,zero
   40778:	01800084 	movi	r6,2
   4077c:	e1fffe04 	addi	r7,fp,-8
   40780:	004b54c0 	call	4b54c <alt_avalon_spi_command>

	//	exposure time 2
	sentwrite[1] = 0x0F; //0x04
   40784:	008003c4 	movi	r2,15
   40788:	e0bffe45 	stb	r2,-7(fp)
	sentwrite[0] = 43 | 0x80;
   4078c:	00bfeac4 	movi	r2,-85
   40790:	e0bffe05 	stb	r2,-8(fp)
	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   40794:	d8000015 	stw	zero,0(sp)
   40798:	e0bffe84 	addi	r2,fp,-6
   4079c:	d8800115 	stw	r2,4(sp)
   407a0:	d8000215 	stw	zero,8(sp)
   407a4:	e13fff17 	ldw	r4,-4(fp)
   407a8:	000b883a 	mov	r5,zero
   407ac:	01800084 	movi	r6,2
   407b0:	e1fffe04 	addi	r7,fp,-8
   407b4:	004b54c0 	call	4b54c <alt_avalon_spi_command>

	//	exposure time 3
	sentwrite[1] = 0x00; //0x00
   407b8:	e03ffe45 	stb	zero,-7(fp)
	sentwrite[0] = 44 | 0x80;
   407bc:	00bfeb04 	movi	r2,-84
   407c0:	e0bffe05 	stb	r2,-8(fp)
	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   407c4:	d8000015 	stw	zero,0(sp)
   407c8:	e0bffe84 	addi	r2,fp,-6
   407cc:	d8800115 	stw	r2,4(sp)
   407d0:	d8000215 	stw	zero,8(sp)
   407d4:	e13fff17 	ldw	r4,-4(fp)
   407d8:	000b883a 	mov	r5,zero
   407dc:	01800084 	movi	r6,2
   407e0:	e1fffe04 	addi	r7,fp,-8
   407e4:	004b54c0 	call	4b54c <alt_avalon_spi_command>

}
   407e8:	e037883a 	mov	sp,fp
   407ec:	dfc00117 	ldw	ra,4(sp)
   407f0:	df000017 	ldw	fp,0(sp)
   407f4:	dec00204 	addi	sp,sp,8
   407f8:	f800283a 	ret

000407fc <main>:
#include "altera_avalon_pio_regs.h"
#include "terasic_includes.h"
#include "altera_avalon_spi.h"
#include "camera.h"

int main() {
   407fc:	defffe04 	addi	sp,sp,-8
   40800:	dfc00115 	stw	ra,4(sp)
   40804:	df000015 	stw	fp,0(sp)
   40808:	d839883a 	mov	fp,sp
	printf("Hello from semester thesis Nios II!\n");
   4080c:	01100034 	movhi	r4,16384
   40810:	21000004 	addi	r4,r4,0
   40814:	00409740 	call	40974 <puts>
	printf("DDR2_1  Size: %d MBytes\n", MEM_IF_DDR2_EMIF_SPAN/1024/1024);
   40818:	01100034 	movhi	r4,16384
   4081c:	21000904 	addi	r4,r4,36
   40820:	01410004 	movi	r5,1024
   40824:	004085c0 	call	4085c <printf>

	IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE, 0x00);
   40828:	00804034 	movhi	r2,256
   4082c:	10801804 	addi	r2,r2,96
   40830:	10000035 	stwio	zero,0(r2)
	camera_init(SPI_1_BASE);
   40834:	01004034 	movhi	r4,256
   40838:	00402000 	call	40200 <camera_init>
	camera_init(SPI_2_BASE);
   4083c:	01004034 	movhi	r4,256
   40840:	21000804 	addi	r4,r4,32
   40844:	00402000 	call	40200 <camera_init>

	while(1) {
		IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE, 0x80|0x40); //sets pio[7] which is connected to cmv frameRequest
   40848:	00c04034 	movhi	r3,256
   4084c:	18c01804 	addi	r3,r3,96
   40850:	00803004 	movi	r2,192
   40854:	18800035 	stwio	r2,0(r3)
	}
   40858:	003ffb06 	br	40848 <main+0x4c>

0004085c <printf>:
   4085c:	defffb04 	addi	sp,sp,-20
   40860:	dfc00115 	stw	ra,4(sp)
   40864:	d9400215 	stw	r5,8(sp)
   40868:	d9800315 	stw	r6,12(sp)
   4086c:	d9c00415 	stw	r7,16(sp)
   40870:	00900034 	movhi	r2,16384
   40874:	10876604 	addi	r2,r2,7576
   40878:	10c00017 	ldw	r3,0(r2)
   4087c:	200b883a 	mov	r5,r4
   40880:	d8800204 	addi	r2,sp,8
   40884:	19000217 	ldw	r4,8(r3)
   40888:	100d883a 	mov	r6,r2
   4088c:	d8800015 	stw	r2,0(sp)
   40890:	00429000 	call	42900 <__vfprintf_internal>
   40894:	dfc00117 	ldw	ra,4(sp)
   40898:	dec00504 	addi	sp,sp,20
   4089c:	f800283a 	ret

000408a0 <_printf_r>:
   408a0:	defffc04 	addi	sp,sp,-16
   408a4:	dfc00115 	stw	ra,4(sp)
   408a8:	d9800215 	stw	r6,8(sp)
   408ac:	d9c00315 	stw	r7,12(sp)
   408b0:	280d883a 	mov	r6,r5
   408b4:	21400217 	ldw	r5,8(r4)
   408b8:	d8c00204 	addi	r3,sp,8
   408bc:	180f883a 	mov	r7,r3
   408c0:	d8c00015 	stw	r3,0(sp)
   408c4:	0040a540 	call	40a54 <___vfprintf_internal_r>
   408c8:	dfc00117 	ldw	ra,4(sp)
   408cc:	dec00404 	addi	sp,sp,16
   408d0:	f800283a 	ret

000408d4 <_puts_r>:
   408d4:	defff604 	addi	sp,sp,-40
   408d8:	dc400715 	stw	r17,28(sp)
   408dc:	2023883a 	mov	r17,r4
   408e0:	2809883a 	mov	r4,r5
   408e4:	dfc00915 	stw	ra,36(sp)
   408e8:	dcc00815 	stw	r19,32(sp)
   408ec:	2827883a 	mov	r19,r5
   408f0:	00409880 	call	40988 <strlen>
   408f4:	89400217 	ldw	r5,8(r17)
   408f8:	00d00034 	movhi	r3,16384
   408fc:	18c01004 	addi	r3,r3,64
   40900:	01c00044 	movi	r7,1
   40904:	12000044 	addi	r8,r2,1
   40908:	d8c00515 	stw	r3,20(sp)
   4090c:	d9c00615 	stw	r7,24(sp)
   40910:	d8c00304 	addi	r3,sp,12
   40914:	01c00084 	movi	r7,2
   40918:	8809883a 	mov	r4,r17
   4091c:	d80d883a 	mov	r6,sp
   40920:	d8c00015 	stw	r3,0(sp)
   40924:	dcc00315 	stw	r19,12(sp)
   40928:	da000215 	stw	r8,8(sp)
   4092c:	d9c00115 	stw	r7,4(sp)
   40930:	d8800415 	stw	r2,16(sp)
   40934:	0044b5c0 	call	44b5c <__sfvwrite_r>
   40938:	00ffffc4 	movi	r3,-1
   4093c:	10000626 	beq	r2,zero,40958 <_puts_r+0x84>
   40940:	1805883a 	mov	r2,r3
   40944:	dfc00917 	ldw	ra,36(sp)
   40948:	dcc00817 	ldw	r19,32(sp)
   4094c:	dc400717 	ldw	r17,28(sp)
   40950:	dec00a04 	addi	sp,sp,40
   40954:	f800283a 	ret
   40958:	00c00284 	movi	r3,10
   4095c:	1805883a 	mov	r2,r3
   40960:	dfc00917 	ldw	ra,36(sp)
   40964:	dcc00817 	ldw	r19,32(sp)
   40968:	dc400717 	ldw	r17,28(sp)
   4096c:	dec00a04 	addi	sp,sp,40
   40970:	f800283a 	ret

00040974 <puts>:
   40974:	00900034 	movhi	r2,16384
   40978:	10876604 	addi	r2,r2,7576
   4097c:	200b883a 	mov	r5,r4
   40980:	11000017 	ldw	r4,0(r2)
   40984:	00408d41 	jmpi	408d4 <_puts_r>

00040988 <strlen>:
   40988:	208000cc 	andi	r2,r4,3
   4098c:	2011883a 	mov	r8,r4
   40990:	1000161e 	bne	r2,zero,409ec <strlen+0x64>
   40994:	20c00017 	ldw	r3,0(r4)
   40998:	017fbff4 	movhi	r5,65279
   4099c:	297fbfc4 	addi	r5,r5,-257
   409a0:	01e02074 	movhi	r7,32897
   409a4:	39e02004 	addi	r7,r7,-32640
   409a8:	1945883a 	add	r2,r3,r5
   409ac:	11c4703a 	and	r2,r2,r7
   409b0:	00c6303a 	nor	r3,zero,r3
   409b4:	1886703a 	and	r3,r3,r2
   409b8:	18000c1e 	bne	r3,zero,409ec <strlen+0x64>
   409bc:	280d883a 	mov	r6,r5
   409c0:	380b883a 	mov	r5,r7
   409c4:	21000104 	addi	r4,r4,4
   409c8:	20800017 	ldw	r2,0(r4)
   409cc:	1187883a 	add	r3,r2,r6
   409d0:	1946703a 	and	r3,r3,r5
   409d4:	0084303a 	nor	r2,zero,r2
   409d8:	10c4703a 	and	r2,r2,r3
   409dc:	103ff926 	beq	r2,zero,409c4 <strlen+0x3c>
   409e0:	20800007 	ldb	r2,0(r4)
   409e4:	10000326 	beq	r2,zero,409f4 <strlen+0x6c>
   409e8:	21000044 	addi	r4,r4,1
   409ec:	20800007 	ldb	r2,0(r4)
   409f0:	103ffd1e 	bne	r2,zero,409e8 <strlen+0x60>
   409f4:	2205c83a 	sub	r2,r4,r8
   409f8:	f800283a 	ret

000409fc <__sprint_r>:
   409fc:	30800217 	ldw	r2,8(r6)
   40a00:	defffe04 	addi	sp,sp,-8
   40a04:	dc000015 	stw	r16,0(sp)
   40a08:	dfc00115 	stw	ra,4(sp)
   40a0c:	3021883a 	mov	r16,r6
   40a10:	0007883a 	mov	r3,zero
   40a14:	1000061e 	bne	r2,zero,40a30 <__sprint_r+0x34>
   40a18:	1805883a 	mov	r2,r3
   40a1c:	30000115 	stw	zero,4(r6)
   40a20:	dfc00117 	ldw	ra,4(sp)
   40a24:	dc000017 	ldw	r16,0(sp)
   40a28:	dec00204 	addi	sp,sp,8
   40a2c:	f800283a 	ret
   40a30:	0044b5c0 	call	44b5c <__sfvwrite_r>
   40a34:	1007883a 	mov	r3,r2
   40a38:	1805883a 	mov	r2,r3
   40a3c:	80000115 	stw	zero,4(r16)
   40a40:	80000215 	stw	zero,8(r16)
   40a44:	dfc00117 	ldw	ra,4(sp)
   40a48:	dc000017 	ldw	r16,0(sp)
   40a4c:	dec00204 	addi	sp,sp,8
   40a50:	f800283a 	ret

00040a54 <___vfprintf_internal_r>:
   40a54:	defea404 	addi	sp,sp,-1392
   40a58:	dd815815 	stw	r22,1376(sp)
   40a5c:	dc015215 	stw	r16,1352(sp)
   40a60:	d9c15115 	stw	r7,1348(sp)
   40a64:	dfc15b15 	stw	ra,1388(sp)
   40a68:	df015a15 	stw	fp,1384(sp)
   40a6c:	ddc15915 	stw	r23,1380(sp)
   40a70:	dd415715 	stw	r21,1372(sp)
   40a74:	dd015615 	stw	r20,1368(sp)
   40a78:	dcc15515 	stw	r19,1364(sp)
   40a7c:	dc815415 	stw	r18,1360(sp)
   40a80:	dc415315 	stw	r17,1356(sp)
   40a84:	282d883a 	mov	r22,r5
   40a88:	3021883a 	mov	r16,r6
   40a8c:	d9014f15 	stw	r4,1340(sp)
   40a90:	00451800 	call	45180 <_localeconv_r>
   40a94:	10800017 	ldw	r2,0(r2)
   40a98:	d9c15117 	ldw	r7,1348(sp)
   40a9c:	d8814915 	stw	r2,1316(sp)
   40aa0:	d8814f17 	ldw	r2,1340(sp)
   40aa4:	10000226 	beq	r2,zero,40ab0 <___vfprintf_internal_r+0x5c>
   40aa8:	10800e17 	ldw	r2,56(r2)
   40aac:	10020d26 	beq	r2,zero,412e4 <___vfprintf_internal_r+0x890>
   40ab0:	b080030b 	ldhu	r2,12(r22)
   40ab4:	1080020c 	andi	r2,r2,8
   40ab8:	10020e26 	beq	r2,zero,412f4 <___vfprintf_internal_r+0x8a0>
   40abc:	b0800417 	ldw	r2,16(r22)
   40ac0:	10020c26 	beq	r2,zero,412f4 <___vfprintf_internal_r+0x8a0>
   40ac4:	b200030b 	ldhu	r8,12(r22)
   40ac8:	00800284 	movi	r2,10
   40acc:	40c0068c 	andi	r3,r8,26
   40ad0:	18802f1e 	bne	r3,r2,40b90 <___vfprintf_internal_r+0x13c>
   40ad4:	b080038f 	ldh	r2,14(r22)
   40ad8:	10002d16 	blt	r2,zero,40b90 <___vfprintf_internal_r+0x13c>
   40adc:	b240038b 	ldhu	r9,14(r22)
   40ae0:	b2800717 	ldw	r10,28(r22)
   40ae4:	b2c00917 	ldw	r11,36(r22)
   40ae8:	d9014f17 	ldw	r4,1340(sp)
   40aec:	dc402904 	addi	r17,sp,164
   40af0:	d8804004 	addi	r2,sp,256
   40af4:	00c10004 	movi	r3,1024
   40af8:	423fff4c 	andi	r8,r8,65533
   40afc:	800d883a 	mov	r6,r16
   40b00:	880b883a 	mov	r5,r17
   40b04:	da002c0d 	sth	r8,176(sp)
   40b08:	da402c8d 	sth	r9,178(sp)
   40b0c:	da803015 	stw	r10,192(sp)
   40b10:	dac03215 	stw	r11,200(sp)
   40b14:	d8802d15 	stw	r2,180(sp)
   40b18:	d8c02e15 	stw	r3,184(sp)
   40b1c:	d8802915 	stw	r2,164(sp)
   40b20:	d8c02b15 	stw	r3,172(sp)
   40b24:	d8002f15 	stw	zero,188(sp)
   40b28:	0040a540 	call	40a54 <___vfprintf_internal_r>
   40b2c:	d8814b15 	stw	r2,1324(sp)
   40b30:	10000416 	blt	r2,zero,40b44 <___vfprintf_internal_r+0xf0>
   40b34:	d9014f17 	ldw	r4,1340(sp)
   40b38:	880b883a 	mov	r5,r17
   40b3c:	004422c0 	call	4422c <_fflush_r>
   40b40:	1002321e 	bne	r2,zero,4140c <___vfprintf_internal_r+0x9b8>
   40b44:	d8802c0b 	ldhu	r2,176(sp)
   40b48:	1080100c 	andi	r2,r2,64
   40b4c:	10000326 	beq	r2,zero,40b5c <___vfprintf_internal_r+0x108>
   40b50:	b080030b 	ldhu	r2,12(r22)
   40b54:	10801014 	ori	r2,r2,64
   40b58:	b080030d 	sth	r2,12(r22)
   40b5c:	d8814b17 	ldw	r2,1324(sp)
   40b60:	dfc15b17 	ldw	ra,1388(sp)
   40b64:	df015a17 	ldw	fp,1384(sp)
   40b68:	ddc15917 	ldw	r23,1380(sp)
   40b6c:	dd815817 	ldw	r22,1376(sp)
   40b70:	dd415717 	ldw	r21,1372(sp)
   40b74:	dd015617 	ldw	r20,1368(sp)
   40b78:	dcc15517 	ldw	r19,1364(sp)
   40b7c:	dc815417 	ldw	r18,1360(sp)
   40b80:	dc415317 	ldw	r17,1356(sp)
   40b84:	dc015217 	ldw	r16,1352(sp)
   40b88:	dec15c04 	addi	sp,sp,1392
   40b8c:	f800283a 	ret
   40b90:	0005883a 	mov	r2,zero
   40b94:	0007883a 	mov	r3,zero
   40b98:	dd401904 	addi	r21,sp,100
   40b9c:	d8814215 	stw	r2,1288(sp)
   40ba0:	802f883a 	mov	r23,r16
   40ba4:	d8c14315 	stw	r3,1292(sp)
   40ba8:	d8014b15 	stw	zero,1324(sp)
   40bac:	d8014815 	stw	zero,1312(sp)
   40bb0:	d8014415 	stw	zero,1296(sp)
   40bb4:	d8014715 	stw	zero,1308(sp)
   40bb8:	dd400c15 	stw	r21,48(sp)
   40bbc:	d8000e15 	stw	zero,56(sp)
   40bc0:	d8000d15 	stw	zero,52(sp)
   40bc4:	b8800007 	ldb	r2,0(r23)
   40bc8:	10001926 	beq	r2,zero,40c30 <___vfprintf_internal_r+0x1dc>
   40bcc:	00c00944 	movi	r3,37
   40bd0:	10c01726 	beq	r2,r3,40c30 <___vfprintf_internal_r+0x1dc>
   40bd4:	b821883a 	mov	r16,r23
   40bd8:	00000106 	br	40be0 <___vfprintf_internal_r+0x18c>
   40bdc:	10c00326 	beq	r2,r3,40bec <___vfprintf_internal_r+0x198>
   40be0:	84000044 	addi	r16,r16,1
   40be4:	80800007 	ldb	r2,0(r16)
   40be8:	103ffc1e 	bne	r2,zero,40bdc <___vfprintf_internal_r+0x188>
   40bec:	85e7c83a 	sub	r19,r16,r23
   40bf0:	98000e26 	beq	r19,zero,40c2c <___vfprintf_internal_r+0x1d8>
   40bf4:	dc800e17 	ldw	r18,56(sp)
   40bf8:	dc400d17 	ldw	r17,52(sp)
   40bfc:	008001c4 	movi	r2,7
   40c00:	94e5883a 	add	r18,r18,r19
   40c04:	8c400044 	addi	r17,r17,1
   40c08:	adc00015 	stw	r23,0(r21)
   40c0c:	dc800e15 	stw	r18,56(sp)
   40c10:	acc00115 	stw	r19,4(r21)
   40c14:	dc400d15 	stw	r17,52(sp)
   40c18:	14428b16 	blt	r2,r17,41648 <___vfprintf_internal_r+0xbf4>
   40c1c:	ad400204 	addi	r21,r21,8
   40c20:	d9014b17 	ldw	r4,1324(sp)
   40c24:	24c9883a 	add	r4,r4,r19
   40c28:	d9014b15 	stw	r4,1324(sp)
   40c2c:	802f883a 	mov	r23,r16
   40c30:	b8800007 	ldb	r2,0(r23)
   40c34:	10013c26 	beq	r2,zero,41128 <___vfprintf_internal_r+0x6d4>
   40c38:	bdc00044 	addi	r23,r23,1
   40c3c:	d8000405 	stb	zero,16(sp)
   40c40:	b8c00007 	ldb	r3,0(r23)
   40c44:	04ffffc4 	movi	r19,-1
   40c48:	d8014c15 	stw	zero,1328(sp)
   40c4c:	d8014a15 	stw	zero,1320(sp)
   40c50:	d8c14d15 	stw	r3,1332(sp)
   40c54:	bdc00044 	addi	r23,r23,1
   40c58:	d9414d17 	ldw	r5,1332(sp)
   40c5c:	00801604 	movi	r2,88
   40c60:	28fff804 	addi	r3,r5,-32
   40c64:	10c06036 	bltu	r2,r3,40de8 <___vfprintf_internal_r+0x394>
   40c68:	18c5883a 	add	r2,r3,r3
   40c6c:	1085883a 	add	r2,r2,r2
   40c70:	00c00134 	movhi	r3,4
   40c74:	18c32104 	addi	r3,r3,3204
   40c78:	10c5883a 	add	r2,r2,r3
   40c7c:	11000017 	ldw	r4,0(r2)
   40c80:	2000683a 	jmp	r4
   40c84:	00041bf8 	rdprs	zero,zero,4207
   40c88:	00040de8 	cmpgeui	zero,zero,4151
   40c8c:	00040de8 	cmpgeui	zero,zero,4151
   40c90:	00041be4 	muli	zero,zero,4207
   40c94:	00040de8 	cmpgeui	zero,zero,4151
   40c98:	00040de8 	cmpgeui	zero,zero,4151
   40c9c:	00040de8 	cmpgeui	zero,zero,4151
   40ca0:	00040de8 	cmpgeui	zero,zero,4151
   40ca4:	00040de8 	cmpgeui	zero,zero,4151
   40ca8:	00040de8 	cmpgeui	zero,zero,4151
   40cac:	000419c4 	movi	zero,4199
   40cb0:	00041bd4 	movui	zero,4207
   40cb4:	00040de8 	cmpgeui	zero,zero,4151
   40cb8:	000419dc 	xori	zero,zero,4199
   40cbc:	00041c70 	cmpltui	zero,zero,4209
   40cc0:	00040de8 	cmpgeui	zero,zero,4151
   40cc4:	00041c5c 	xori	zero,zero,4209
   40cc8:	00041c24 	muli	zero,zero,4208
   40ccc:	00041c24 	muli	zero,zero,4208
   40cd0:	00041c24 	muli	zero,zero,4208
   40cd4:	00041c24 	muli	zero,zero,4208
   40cd8:	00041c24 	muli	zero,zero,4208
   40cdc:	00041c24 	muli	zero,zero,4208
   40ce0:	00041c24 	muli	zero,zero,4208
   40ce4:	00041c24 	muli	zero,zero,4208
   40ce8:	00041c24 	muli	zero,zero,4208
   40cec:	00040de8 	cmpgeui	zero,zero,4151
   40cf0:	00040de8 	cmpgeui	zero,zero,4151
   40cf4:	00040de8 	cmpgeui	zero,zero,4151
   40cf8:	00040de8 	cmpgeui	zero,zero,4151
   40cfc:	00040de8 	cmpgeui	zero,zero,4151
   40d00:	00040de8 	cmpgeui	zero,zero,4151
   40d04:	00040de8 	cmpgeui	zero,zero,4151
   40d08:	00040de8 	cmpgeui	zero,zero,4151
   40d0c:	00040de8 	cmpgeui	zero,zero,4151
   40d10:	00040de8 	cmpgeui	zero,zero,4151
   40d14:	00041440 	call	4144 <__reset-0x3bebc>
   40d18:	00041aac 	andhi	zero,zero,4202
   40d1c:	00040de8 	cmpgeui	zero,zero,4151
   40d20:	00041aac 	andhi	zero,zero,4202
   40d24:	00040de8 	cmpgeui	zero,zero,4151
   40d28:	00040de8 	cmpgeui	zero,zero,4151
   40d2c:	00040de8 	cmpgeui	zero,zero,4151
   40d30:	00040de8 	cmpgeui	zero,zero,4151
   40d34:	00041c10 	cmplti	zero,zero,4208
   40d38:	00040de8 	cmpgeui	zero,zero,4151
   40d3c:	00040de8 	cmpgeui	zero,zero,4151
   40d40:	000414f4 	movhi	zero,4179
   40d44:	00040de8 	cmpgeui	zero,zero,4151
   40d48:	00040de8 	cmpgeui	zero,zero,4151
   40d4c:	00040de8 	cmpgeui	zero,zero,4151
   40d50:	00040de8 	cmpgeui	zero,zero,4151
   40d54:	00040de8 	cmpgeui	zero,zero,4151
   40d58:	00041540 	call	4154 <__reset-0x3beac>
   40d5c:	00040de8 	cmpgeui	zero,zero,4151
   40d60:	00040de8 	cmpgeui	zero,zero,4151
   40d64:	00041b60 	cmpeqi	zero,zero,4205
   40d68:	00040de8 	cmpgeui	zero,zero,4151
   40d6c:	00040de8 	cmpgeui	zero,zero,4151
   40d70:	00040de8 	cmpgeui	zero,zero,4151
   40d74:	00040de8 	cmpgeui	zero,zero,4151
   40d78:	00040de8 	cmpgeui	zero,zero,4151
   40d7c:	00040de8 	cmpgeui	zero,zero,4151
   40d80:	00040de8 	cmpgeui	zero,zero,4151
   40d84:	00040de8 	cmpgeui	zero,zero,4151
   40d88:	00040de8 	cmpgeui	zero,zero,4151
   40d8c:	00040de8 	cmpgeui	zero,zero,4151
   40d90:	00041b34 	movhi	zero,4204
   40d94:	0004144c 	andi	zero,zero,4177
   40d98:	00041aac 	andhi	zero,zero,4202
   40d9c:	00041aac 	andhi	zero,zero,4202
   40da0:	00041aac 	andhi	zero,zero,4202
   40da4:	00041a98 	cmpnei	zero,zero,4202
   40da8:	0004144c 	andi	zero,zero,4177
   40dac:	00040de8 	cmpgeui	zero,zero,4151
   40db0:	00040de8 	cmpgeui	zero,zero,4151
   40db4:	00041a20 	cmpeqi	zero,zero,4200
   40db8:	00040de8 	cmpgeui	zero,zero,4151
   40dbc:	000419f0 	cmpltui	zero,zero,4199
   40dc0:	00041500 	call	4150 <__reset-0x3beb0>
   40dc4:	00041a50 	cmplti	zero,zero,4201
   40dc8:	00041a3c 	xorhi	zero,zero,4200
   40dcc:	00040de8 	cmpgeui	zero,zero,4151
   40dd0:	00041ccc 	andi	zero,zero,4211
   40dd4:	00040de8 	cmpgeui	zero,zero,4151
   40dd8:	0004154c 	andi	zero,zero,4181
   40ddc:	00040de8 	cmpgeui	zero,zero,4151
   40de0:	00040de8 	cmpgeui	zero,zero,4151
   40de4:	00041bc4 	movi	zero,4207
   40de8:	d9014d17 	ldw	r4,1332(sp)
   40dec:	2000ce26 	beq	r4,zero,41128 <___vfprintf_internal_r+0x6d4>
   40df0:	01400044 	movi	r5,1
   40df4:	d9800f04 	addi	r6,sp,60
   40df8:	d9c14015 	stw	r7,1280(sp)
   40dfc:	d9414515 	stw	r5,1300(sp)
   40e00:	d9814115 	stw	r6,1284(sp)
   40e04:	280f883a 	mov	r7,r5
   40e08:	d9000f05 	stb	r4,60(sp)
   40e0c:	d8000405 	stb	zero,16(sp)
   40e10:	d8014615 	stw	zero,1304(sp)
   40e14:	d8c14c17 	ldw	r3,1328(sp)
   40e18:	1880008c 	andi	r2,r3,2
   40e1c:	1005003a 	cmpeq	r2,r2,zero
   40e20:	d8815015 	stw	r2,1344(sp)
   40e24:	1000031e 	bne	r2,zero,40e34 <___vfprintf_internal_r+0x3e0>
   40e28:	d9014517 	ldw	r4,1300(sp)
   40e2c:	21000084 	addi	r4,r4,2
   40e30:	d9014515 	stw	r4,1300(sp)
   40e34:	d9414c17 	ldw	r5,1328(sp)
   40e38:	2940210c 	andi	r5,r5,132
   40e3c:	d9414e15 	stw	r5,1336(sp)
   40e40:	28002d1e 	bne	r5,zero,40ef8 <___vfprintf_internal_r+0x4a4>
   40e44:	d9814a17 	ldw	r6,1320(sp)
   40e48:	d8814517 	ldw	r2,1300(sp)
   40e4c:	30a1c83a 	sub	r16,r6,r2
   40e50:	0400290e 	bge	zero,r16,40ef8 <___vfprintf_internal_r+0x4a4>
   40e54:	00800404 	movi	r2,16
   40e58:	1404580e 	bge	r2,r16,41fbc <___vfprintf_internal_r+0x1568>
   40e5c:	dc800e17 	ldw	r18,56(sp)
   40e60:	dc400d17 	ldw	r17,52(sp)
   40e64:	1027883a 	mov	r19,r2
   40e68:	07100034 	movhi	fp,16384
   40e6c:	e7002c84 	addi	fp,fp,178
   40e70:	050001c4 	movi	r20,7
   40e74:	00000306 	br	40e84 <___vfprintf_internal_r+0x430>
   40e78:	843ffc04 	addi	r16,r16,-16
   40e7c:	ad400204 	addi	r21,r21,8
   40e80:	9c00130e 	bge	r19,r16,40ed0 <___vfprintf_internal_r+0x47c>
   40e84:	94800404 	addi	r18,r18,16
   40e88:	8c400044 	addi	r17,r17,1
   40e8c:	af000015 	stw	fp,0(r21)
   40e90:	acc00115 	stw	r19,4(r21)
   40e94:	dc800e15 	stw	r18,56(sp)
   40e98:	dc400d15 	stw	r17,52(sp)
   40e9c:	a47ff60e 	bge	r20,r17,40e78 <___vfprintf_internal_r+0x424>
   40ea0:	d9014f17 	ldw	r4,1340(sp)
   40ea4:	b00b883a 	mov	r5,r22
   40ea8:	d9800c04 	addi	r6,sp,48
   40eac:	d9c15115 	stw	r7,1348(sp)
   40eb0:	00409fc0 	call	409fc <__sprint_r>
   40eb4:	d9c15117 	ldw	r7,1348(sp)
   40eb8:	10009e1e 	bne	r2,zero,41134 <___vfprintf_internal_r+0x6e0>
   40ebc:	843ffc04 	addi	r16,r16,-16
   40ec0:	dc800e17 	ldw	r18,56(sp)
   40ec4:	dc400d17 	ldw	r17,52(sp)
   40ec8:	dd401904 	addi	r21,sp,100
   40ecc:	9c3fed16 	blt	r19,r16,40e84 <___vfprintf_internal_r+0x430>
   40ed0:	9425883a 	add	r18,r18,r16
   40ed4:	8c400044 	addi	r17,r17,1
   40ed8:	008001c4 	movi	r2,7
   40edc:	af000015 	stw	fp,0(r21)
   40ee0:	ac000115 	stw	r16,4(r21)
   40ee4:	dc800e15 	stw	r18,56(sp)
   40ee8:	dc400d15 	stw	r17,52(sp)
   40eec:	1441f516 	blt	r2,r17,416c4 <___vfprintf_internal_r+0xc70>
   40ef0:	ad400204 	addi	r21,r21,8
   40ef4:	00000206 	br	40f00 <___vfprintf_internal_r+0x4ac>
   40ef8:	dc800e17 	ldw	r18,56(sp)
   40efc:	dc400d17 	ldw	r17,52(sp)
   40f00:	d8800407 	ldb	r2,16(sp)
   40f04:	10000b26 	beq	r2,zero,40f34 <___vfprintf_internal_r+0x4e0>
   40f08:	00800044 	movi	r2,1
   40f0c:	94800044 	addi	r18,r18,1
   40f10:	8c400044 	addi	r17,r17,1
   40f14:	a8800115 	stw	r2,4(r21)
   40f18:	d8c00404 	addi	r3,sp,16
   40f1c:	008001c4 	movi	r2,7
   40f20:	a8c00015 	stw	r3,0(r21)
   40f24:	dc800e15 	stw	r18,56(sp)
   40f28:	dc400d15 	stw	r17,52(sp)
   40f2c:	1441da16 	blt	r2,r17,41698 <___vfprintf_internal_r+0xc44>
   40f30:	ad400204 	addi	r21,r21,8
   40f34:	d9015017 	ldw	r4,1344(sp)
   40f38:	20000b1e 	bne	r4,zero,40f68 <___vfprintf_internal_r+0x514>
   40f3c:	d8800444 	addi	r2,sp,17
   40f40:	94800084 	addi	r18,r18,2
   40f44:	8c400044 	addi	r17,r17,1
   40f48:	a8800015 	stw	r2,0(r21)
   40f4c:	00c00084 	movi	r3,2
   40f50:	008001c4 	movi	r2,7
   40f54:	a8c00115 	stw	r3,4(r21)
   40f58:	dc800e15 	stw	r18,56(sp)
   40f5c:	dc400d15 	stw	r17,52(sp)
   40f60:	1441c216 	blt	r2,r17,4166c <___vfprintf_internal_r+0xc18>
   40f64:	ad400204 	addi	r21,r21,8
   40f68:	d9414e17 	ldw	r5,1336(sp)
   40f6c:	00802004 	movi	r2,128
   40f70:	2880b126 	beq	r5,r2,41238 <___vfprintf_internal_r+0x7e4>
   40f74:	d8c14617 	ldw	r3,1304(sp)
   40f78:	19e1c83a 	sub	r16,r3,r7
   40f7c:	0400260e 	bge	zero,r16,41018 <___vfprintf_internal_r+0x5c4>
   40f80:	00800404 	movi	r2,16
   40f84:	1403c90e 	bge	r2,r16,41eac <___vfprintf_internal_r+0x1458>
   40f88:	1027883a 	mov	r19,r2
   40f8c:	07100034 	movhi	fp,16384
   40f90:	e7002884 	addi	fp,fp,162
   40f94:	050001c4 	movi	r20,7
   40f98:	00000306 	br	40fa8 <___vfprintf_internal_r+0x554>
   40f9c:	843ffc04 	addi	r16,r16,-16
   40fa0:	ad400204 	addi	r21,r21,8
   40fa4:	9c00130e 	bge	r19,r16,40ff4 <___vfprintf_internal_r+0x5a0>
   40fa8:	94800404 	addi	r18,r18,16
   40fac:	8c400044 	addi	r17,r17,1
   40fb0:	af000015 	stw	fp,0(r21)
   40fb4:	acc00115 	stw	r19,4(r21)
   40fb8:	dc800e15 	stw	r18,56(sp)
   40fbc:	dc400d15 	stw	r17,52(sp)
   40fc0:	a47ff60e 	bge	r20,r17,40f9c <___vfprintf_internal_r+0x548>
   40fc4:	d9014f17 	ldw	r4,1340(sp)
   40fc8:	b00b883a 	mov	r5,r22
   40fcc:	d9800c04 	addi	r6,sp,48
   40fd0:	d9c15115 	stw	r7,1348(sp)
   40fd4:	00409fc0 	call	409fc <__sprint_r>
   40fd8:	d9c15117 	ldw	r7,1348(sp)
   40fdc:	1000551e 	bne	r2,zero,41134 <___vfprintf_internal_r+0x6e0>
   40fe0:	843ffc04 	addi	r16,r16,-16
   40fe4:	dc800e17 	ldw	r18,56(sp)
   40fe8:	dc400d17 	ldw	r17,52(sp)
   40fec:	dd401904 	addi	r21,sp,100
   40ff0:	9c3fed16 	blt	r19,r16,40fa8 <___vfprintf_internal_r+0x554>
   40ff4:	9425883a 	add	r18,r18,r16
   40ff8:	8c400044 	addi	r17,r17,1
   40ffc:	008001c4 	movi	r2,7
   41000:	af000015 	stw	fp,0(r21)
   41004:	ac000115 	stw	r16,4(r21)
   41008:	dc800e15 	stw	r18,56(sp)
   4100c:	dc400d15 	stw	r17,52(sp)
   41010:	14418216 	blt	r2,r17,4161c <___vfprintf_internal_r+0xbc8>
   41014:	ad400204 	addi	r21,r21,8
   41018:	d9014c17 	ldw	r4,1328(sp)
   4101c:	2080400c 	andi	r2,r4,256
   41020:	10004a1e 	bne	r2,zero,4114c <___vfprintf_internal_r+0x6f8>
   41024:	d9414117 	ldw	r5,1284(sp)
   41028:	91e5883a 	add	r18,r18,r7
   4102c:	8c400044 	addi	r17,r17,1
   41030:	008001c4 	movi	r2,7
   41034:	a9400015 	stw	r5,0(r21)
   41038:	a9c00115 	stw	r7,4(r21)
   4103c:	dc800e15 	stw	r18,56(sp)
   41040:	dc400d15 	stw	r17,52(sp)
   41044:	14416716 	blt	r2,r17,415e4 <___vfprintf_internal_r+0xb90>
   41048:	a8c00204 	addi	r3,r21,8
   4104c:	d9814c17 	ldw	r6,1328(sp)
   41050:	3080010c 	andi	r2,r6,4
   41054:	10002826 	beq	r2,zero,410f8 <___vfprintf_internal_r+0x6a4>
   41058:	d8814a17 	ldw	r2,1320(sp)
   4105c:	d9014517 	ldw	r4,1300(sp)
   41060:	1121c83a 	sub	r16,r2,r4
   41064:	0400240e 	bge	zero,r16,410f8 <___vfprintf_internal_r+0x6a4>
   41068:	00800404 	movi	r2,16
   4106c:	14044f0e 	bge	r2,r16,421ac <___vfprintf_internal_r+0x1758>
   41070:	dc400d17 	ldw	r17,52(sp)
   41074:	1027883a 	mov	r19,r2
   41078:	07100034 	movhi	fp,16384
   4107c:	e7002c84 	addi	fp,fp,178
   41080:	050001c4 	movi	r20,7
   41084:	00000306 	br	41094 <___vfprintf_internal_r+0x640>
   41088:	843ffc04 	addi	r16,r16,-16
   4108c:	18c00204 	addi	r3,r3,8
   41090:	9c00110e 	bge	r19,r16,410d8 <___vfprintf_internal_r+0x684>
   41094:	94800404 	addi	r18,r18,16
   41098:	8c400044 	addi	r17,r17,1
   4109c:	1f000015 	stw	fp,0(r3)
   410a0:	1cc00115 	stw	r19,4(r3)
   410a4:	dc800e15 	stw	r18,56(sp)
   410a8:	dc400d15 	stw	r17,52(sp)
   410ac:	a47ff60e 	bge	r20,r17,41088 <___vfprintf_internal_r+0x634>
   410b0:	d9014f17 	ldw	r4,1340(sp)
   410b4:	b00b883a 	mov	r5,r22
   410b8:	d9800c04 	addi	r6,sp,48
   410bc:	00409fc0 	call	409fc <__sprint_r>
   410c0:	10001c1e 	bne	r2,zero,41134 <___vfprintf_internal_r+0x6e0>
   410c4:	843ffc04 	addi	r16,r16,-16
   410c8:	dc800e17 	ldw	r18,56(sp)
   410cc:	dc400d17 	ldw	r17,52(sp)
   410d0:	d8c01904 	addi	r3,sp,100
   410d4:	9c3fef16 	blt	r19,r16,41094 <___vfprintf_internal_r+0x640>
   410d8:	9425883a 	add	r18,r18,r16
   410dc:	8c400044 	addi	r17,r17,1
   410e0:	008001c4 	movi	r2,7
   410e4:	1f000015 	stw	fp,0(r3)
   410e8:	1c000115 	stw	r16,4(r3)
   410ec:	dc800e15 	stw	r18,56(sp)
   410f0:	dc400d15 	stw	r17,52(sp)
   410f4:	1440cb16 	blt	r2,r17,41424 <___vfprintf_internal_r+0x9d0>
   410f8:	d8814a17 	ldw	r2,1320(sp)
   410fc:	d9414517 	ldw	r5,1300(sp)
   41100:	1140010e 	bge	r2,r5,41108 <___vfprintf_internal_r+0x6b4>
   41104:	2805883a 	mov	r2,r5
   41108:	d9814b17 	ldw	r6,1324(sp)
   4110c:	308d883a 	add	r6,r6,r2
   41110:	d9814b15 	stw	r6,1324(sp)
   41114:	90013b1e 	bne	r18,zero,41604 <___vfprintf_internal_r+0xbb0>
   41118:	d9c14017 	ldw	r7,1280(sp)
   4111c:	dd401904 	addi	r21,sp,100
   41120:	d8000d15 	stw	zero,52(sp)
   41124:	003ea706 	br	40bc4 <___vfprintf_internal_r+0x170>
   41128:	d8800e17 	ldw	r2,56(sp)
   4112c:	10053f1e 	bne	r2,zero,4262c <___vfprintf_internal_r+0x1bd8>
   41130:	d8000d15 	stw	zero,52(sp)
   41134:	b080030b 	ldhu	r2,12(r22)
   41138:	1080100c 	andi	r2,r2,64
   4113c:	103e8726 	beq	r2,zero,40b5c <___vfprintf_internal_r+0x108>
   41140:	00bfffc4 	movi	r2,-1
   41144:	d8814b15 	stw	r2,1324(sp)
   41148:	003e8406 	br	40b5c <___vfprintf_internal_r+0x108>
   4114c:	d9814d17 	ldw	r6,1332(sp)
   41150:	00801944 	movi	r2,101
   41154:	11806e16 	blt	r2,r6,41310 <___vfprintf_internal_r+0x8bc>
   41158:	d9414717 	ldw	r5,1308(sp)
   4115c:	00c00044 	movi	r3,1
   41160:	1943430e 	bge	r3,r5,41e70 <___vfprintf_internal_r+0x141c>
   41164:	d8814117 	ldw	r2,1284(sp)
   41168:	94800044 	addi	r18,r18,1
   4116c:	8c400044 	addi	r17,r17,1
   41170:	a8800015 	stw	r2,0(r21)
   41174:	008001c4 	movi	r2,7
   41178:	a8c00115 	stw	r3,4(r21)
   4117c:	dc800e15 	stw	r18,56(sp)
   41180:	dc400d15 	stw	r17,52(sp)
   41184:	1441ca16 	blt	r2,r17,418b0 <___vfprintf_internal_r+0xe5c>
   41188:	a8c00204 	addi	r3,r21,8
   4118c:	d9014917 	ldw	r4,1316(sp)
   41190:	00800044 	movi	r2,1
   41194:	94800044 	addi	r18,r18,1
   41198:	8c400044 	addi	r17,r17,1
   4119c:	18800115 	stw	r2,4(r3)
   411a0:	008001c4 	movi	r2,7
   411a4:	19000015 	stw	r4,0(r3)
   411a8:	dc800e15 	stw	r18,56(sp)
   411ac:	dc400d15 	stw	r17,52(sp)
   411b0:	1441b616 	blt	r2,r17,4188c <___vfprintf_internal_r+0xe38>
   411b4:	1cc00204 	addi	r19,r3,8
   411b8:	d9014217 	ldw	r4,1288(sp)
   411bc:	d9414317 	ldw	r5,1292(sp)
   411c0:	000d883a 	mov	r6,zero
   411c4:	000f883a 	mov	r7,zero
   411c8:	00492940 	call	49294 <__nedf2>
   411cc:	10017426 	beq	r2,zero,417a0 <___vfprintf_internal_r+0xd4c>
   411d0:	d9414717 	ldw	r5,1308(sp)
   411d4:	d9814117 	ldw	r6,1284(sp)
   411d8:	8c400044 	addi	r17,r17,1
   411dc:	2c85883a 	add	r2,r5,r18
   411e0:	14bfffc4 	addi	r18,r2,-1
   411e4:	28bfffc4 	addi	r2,r5,-1
   411e8:	30c00044 	addi	r3,r6,1
   411ec:	98800115 	stw	r2,4(r19)
   411f0:	008001c4 	movi	r2,7
   411f4:	98c00015 	stw	r3,0(r19)
   411f8:	dc800e15 	stw	r18,56(sp)
   411fc:	dc400d15 	stw	r17,52(sp)
   41200:	14418e16 	blt	r2,r17,4183c <___vfprintf_internal_r+0xde8>
   41204:	9cc00204 	addi	r19,r19,8
   41208:	d9414817 	ldw	r5,1312(sp)
   4120c:	d8800804 	addi	r2,sp,32
   41210:	8c400044 	addi	r17,r17,1
   41214:	9165883a 	add	r18,r18,r5
   41218:	98800015 	stw	r2,0(r19)
   4121c:	008001c4 	movi	r2,7
   41220:	99400115 	stw	r5,4(r19)
   41224:	dc800e15 	stw	r18,56(sp)
   41228:	dc400d15 	stw	r17,52(sp)
   4122c:	1440ed16 	blt	r2,r17,415e4 <___vfprintf_internal_r+0xb90>
   41230:	98c00204 	addi	r3,r19,8
   41234:	003f8506 	br	4104c <___vfprintf_internal_r+0x5f8>
   41238:	d9814a17 	ldw	r6,1320(sp)
   4123c:	d8814517 	ldw	r2,1300(sp)
   41240:	30a1c83a 	sub	r16,r6,r2
   41244:	043f4b0e 	bge	zero,r16,40f74 <___vfprintf_internal_r+0x520>
   41248:	00800404 	movi	r2,16
   4124c:	1404340e 	bge	r2,r16,42320 <___vfprintf_internal_r+0x18cc>
   41250:	1027883a 	mov	r19,r2
   41254:	07100034 	movhi	fp,16384
   41258:	e7002884 	addi	fp,fp,162
   4125c:	050001c4 	movi	r20,7
   41260:	00000306 	br	41270 <___vfprintf_internal_r+0x81c>
   41264:	843ffc04 	addi	r16,r16,-16
   41268:	ad400204 	addi	r21,r21,8
   4126c:	9c00130e 	bge	r19,r16,412bc <___vfprintf_internal_r+0x868>
   41270:	94800404 	addi	r18,r18,16
   41274:	8c400044 	addi	r17,r17,1
   41278:	af000015 	stw	fp,0(r21)
   4127c:	acc00115 	stw	r19,4(r21)
   41280:	dc800e15 	stw	r18,56(sp)
   41284:	dc400d15 	stw	r17,52(sp)
   41288:	a47ff60e 	bge	r20,r17,41264 <___vfprintf_internal_r+0x810>
   4128c:	d9014f17 	ldw	r4,1340(sp)
   41290:	b00b883a 	mov	r5,r22
   41294:	d9800c04 	addi	r6,sp,48
   41298:	d9c15115 	stw	r7,1348(sp)
   4129c:	00409fc0 	call	409fc <__sprint_r>
   412a0:	d9c15117 	ldw	r7,1348(sp)
   412a4:	103fa31e 	bne	r2,zero,41134 <___vfprintf_internal_r+0x6e0>
   412a8:	843ffc04 	addi	r16,r16,-16
   412ac:	dc800e17 	ldw	r18,56(sp)
   412b0:	dc400d17 	ldw	r17,52(sp)
   412b4:	dd401904 	addi	r21,sp,100
   412b8:	9c3fed16 	blt	r19,r16,41270 <___vfprintf_internal_r+0x81c>
   412bc:	9425883a 	add	r18,r18,r16
   412c0:	8c400044 	addi	r17,r17,1
   412c4:	008001c4 	movi	r2,7
   412c8:	af000015 	stw	fp,0(r21)
   412cc:	ac000115 	stw	r16,4(r21)
   412d0:	dc800e15 	stw	r18,56(sp)
   412d4:	dc400d15 	stw	r17,52(sp)
   412d8:	14416116 	blt	r2,r17,41860 <___vfprintf_internal_r+0xe0c>
   412dc:	ad400204 	addi	r21,r21,8
   412e0:	003f2406 	br	40f74 <___vfprintf_internal_r+0x520>
   412e4:	d9014f17 	ldw	r4,1340(sp)
   412e8:	00444c40 	call	444c4 <__sinit>
   412ec:	d9c15117 	ldw	r7,1348(sp)
   412f0:	003def06 	br	40ab0 <___vfprintf_internal_r+0x5c>
   412f4:	d9014f17 	ldw	r4,1340(sp)
   412f8:	b00b883a 	mov	r5,r22
   412fc:	d9c15115 	stw	r7,1348(sp)
   41300:	00429240 	call	42924 <__swsetup_r>
   41304:	d9c15117 	ldw	r7,1348(sp)
   41308:	103dee26 	beq	r2,zero,40ac4 <___vfprintf_internal_r+0x70>
   4130c:	003f8c06 	br	41140 <___vfprintf_internal_r+0x6ec>
   41310:	d9014217 	ldw	r4,1288(sp)
   41314:	d9414317 	ldw	r5,1292(sp)
   41318:	000d883a 	mov	r6,zero
   4131c:	000f883a 	mov	r7,zero
   41320:	004920c0 	call	4920c <__eqdf2>
   41324:	1000f21e 	bne	r2,zero,416f0 <___vfprintf_internal_r+0xc9c>
   41328:	00900034 	movhi	r2,16384
   4132c:	10802804 	addi	r2,r2,160
   41330:	94800044 	addi	r18,r18,1
   41334:	8c400044 	addi	r17,r17,1
   41338:	a8800015 	stw	r2,0(r21)
   4133c:	00c00044 	movi	r3,1
   41340:	008001c4 	movi	r2,7
   41344:	a8c00115 	stw	r3,4(r21)
   41348:	dc800e15 	stw	r18,56(sp)
   4134c:	dc400d15 	stw	r17,52(sp)
   41350:	1442fa16 	blt	r2,r17,41f3c <___vfprintf_internal_r+0x14e8>
   41354:	a8c00204 	addi	r3,r21,8
   41358:	d8800517 	ldw	r2,20(sp)
   4135c:	d9014717 	ldw	r4,1308(sp)
   41360:	11015c0e 	bge	r2,r4,418d4 <___vfprintf_internal_r+0xe80>
   41364:	dc400d17 	ldw	r17,52(sp)
   41368:	d9814917 	ldw	r6,1316(sp)
   4136c:	00800044 	movi	r2,1
   41370:	94800044 	addi	r18,r18,1
   41374:	8c400044 	addi	r17,r17,1
   41378:	18800115 	stw	r2,4(r3)
   4137c:	008001c4 	movi	r2,7
   41380:	19800015 	stw	r6,0(r3)
   41384:	dc800e15 	stw	r18,56(sp)
   41388:	dc400d15 	stw	r17,52(sp)
   4138c:	14431016 	blt	r2,r17,41fd0 <___vfprintf_internal_r+0x157c>
   41390:	18c00204 	addi	r3,r3,8
   41394:	d8814717 	ldw	r2,1308(sp)
   41398:	143fffc4 	addi	r16,r2,-1
   4139c:	043f2b0e 	bge	zero,r16,4104c <___vfprintf_internal_r+0x5f8>
   413a0:	00800404 	movi	r2,16
   413a4:	1402a20e 	bge	r2,r16,41e30 <___vfprintf_internal_r+0x13dc>
   413a8:	dc400d17 	ldw	r17,52(sp)
   413ac:	1027883a 	mov	r19,r2
   413b0:	07100034 	movhi	fp,16384
   413b4:	e7002884 	addi	fp,fp,162
   413b8:	050001c4 	movi	r20,7
   413bc:	00000306 	br	413cc <___vfprintf_internal_r+0x978>
   413c0:	18c00204 	addi	r3,r3,8
   413c4:	843ffc04 	addi	r16,r16,-16
   413c8:	9c029c0e 	bge	r19,r16,41e3c <___vfprintf_internal_r+0x13e8>
   413cc:	94800404 	addi	r18,r18,16
   413d0:	8c400044 	addi	r17,r17,1
   413d4:	1f000015 	stw	fp,0(r3)
   413d8:	1cc00115 	stw	r19,4(r3)
   413dc:	dc800e15 	stw	r18,56(sp)
   413e0:	dc400d15 	stw	r17,52(sp)
   413e4:	a47ff60e 	bge	r20,r17,413c0 <___vfprintf_internal_r+0x96c>
   413e8:	d9014f17 	ldw	r4,1340(sp)
   413ec:	b00b883a 	mov	r5,r22
   413f0:	d9800c04 	addi	r6,sp,48
   413f4:	00409fc0 	call	409fc <__sprint_r>
   413f8:	103f4e1e 	bne	r2,zero,41134 <___vfprintf_internal_r+0x6e0>
   413fc:	dc800e17 	ldw	r18,56(sp)
   41400:	dc400d17 	ldw	r17,52(sp)
   41404:	d8c01904 	addi	r3,sp,100
   41408:	003fee06 	br	413c4 <___vfprintf_internal_r+0x970>
   4140c:	d8802c0b 	ldhu	r2,176(sp)
   41410:	00ffffc4 	movi	r3,-1
   41414:	d8c14b15 	stw	r3,1324(sp)
   41418:	1080100c 	andi	r2,r2,64
   4141c:	103dcc1e 	bne	r2,zero,40b50 <___vfprintf_internal_r+0xfc>
   41420:	003dce06 	br	40b5c <___vfprintf_internal_r+0x108>
   41424:	d9014f17 	ldw	r4,1340(sp)
   41428:	b00b883a 	mov	r5,r22
   4142c:	d9800c04 	addi	r6,sp,48
   41430:	00409fc0 	call	409fc <__sprint_r>
   41434:	103f3f1e 	bne	r2,zero,41134 <___vfprintf_internal_r+0x6e0>
   41438:	dc800e17 	ldw	r18,56(sp)
   4143c:	003f2e06 	br	410f8 <___vfprintf_internal_r+0x6a4>
   41440:	d9414c17 	ldw	r5,1328(sp)
   41444:	29400414 	ori	r5,r5,16
   41448:	d9414c15 	stw	r5,1328(sp)
   4144c:	d9814c17 	ldw	r6,1328(sp)
   41450:	3080080c 	andi	r2,r6,32
   41454:	10014f1e 	bne	r2,zero,41994 <___vfprintf_internal_r+0xf40>
   41458:	d8c14c17 	ldw	r3,1328(sp)
   4145c:	1880040c 	andi	r2,r3,16
   41460:	1002ea1e 	bne	r2,zero,4200c <___vfprintf_internal_r+0x15b8>
   41464:	d9014c17 	ldw	r4,1328(sp)
   41468:	2080100c 	andi	r2,r4,64
   4146c:	1002e726 	beq	r2,zero,4200c <___vfprintf_internal_r+0x15b8>
   41470:	3880000f 	ldh	r2,0(r7)
   41474:	39c00104 	addi	r7,r7,4
   41478:	d9c14015 	stw	r7,1280(sp)
   4147c:	1023d7fa 	srai	r17,r2,31
   41480:	1021883a 	mov	r16,r2
   41484:	88037216 	blt	r17,zero,42250 <___vfprintf_internal_r+0x17fc>
   41488:	01000044 	movi	r4,1
   4148c:	98000416 	blt	r19,zero,414a0 <___vfprintf_internal_r+0xa4c>
   41490:	d8c14c17 	ldw	r3,1328(sp)
   41494:	00bfdfc4 	movi	r2,-129
   41498:	1886703a 	and	r3,r3,r2
   4149c:	d8c14c15 	stw	r3,1328(sp)
   414a0:	8444b03a 	or	r2,r16,r17
   414a4:	1002261e 	bne	r2,zero,41d40 <___vfprintf_internal_r+0x12ec>
   414a8:	9802251e 	bne	r19,zero,41d40 <___vfprintf_internal_r+0x12ec>
   414ac:	20803fcc 	andi	r2,r4,255
   414b0:	10029b26 	beq	r2,zero,41f20 <___vfprintf_internal_r+0x14cc>
   414b4:	d8c01904 	addi	r3,sp,100
   414b8:	dd000f04 	addi	r20,sp,60
   414bc:	d8c14115 	stw	r3,1284(sp)
   414c0:	d8c14117 	ldw	r3,1284(sp)
   414c4:	dcc14515 	stw	r19,1300(sp)
   414c8:	a0c5c83a 	sub	r2,r20,r3
   414cc:	11c00a04 	addi	r7,r2,40
   414d0:	99c0010e 	bge	r19,r7,414d8 <___vfprintf_internal_r+0xa84>
   414d4:	d9c14515 	stw	r7,1300(sp)
   414d8:	dcc14615 	stw	r19,1304(sp)
   414dc:	d8800407 	ldb	r2,16(sp)
   414e0:	103e4c26 	beq	r2,zero,40e14 <___vfprintf_internal_r+0x3c0>
   414e4:	d8814517 	ldw	r2,1300(sp)
   414e8:	10800044 	addi	r2,r2,1
   414ec:	d8814515 	stw	r2,1300(sp)
   414f0:	003e4806 	br	40e14 <___vfprintf_internal_r+0x3c0>
   414f4:	d9814c17 	ldw	r6,1328(sp)
   414f8:	31800414 	ori	r6,r6,16
   414fc:	d9814c15 	stw	r6,1328(sp)
   41500:	d8c14c17 	ldw	r3,1328(sp)
   41504:	1880080c 	andi	r2,r3,32
   41508:	1001271e 	bne	r2,zero,419a8 <___vfprintf_internal_r+0xf54>
   4150c:	d9414c17 	ldw	r5,1328(sp)
   41510:	2880040c 	andi	r2,r5,16
   41514:	1002b61e 	bne	r2,zero,41ff0 <___vfprintf_internal_r+0x159c>
   41518:	d9814c17 	ldw	r6,1328(sp)
   4151c:	3080100c 	andi	r2,r6,64
   41520:	1002b326 	beq	r2,zero,41ff0 <___vfprintf_internal_r+0x159c>
   41524:	3c00000b 	ldhu	r16,0(r7)
   41528:	0009883a 	mov	r4,zero
   4152c:	39c00104 	addi	r7,r7,4
   41530:	0023883a 	mov	r17,zero
   41534:	d9c14015 	stw	r7,1280(sp)
   41538:	d8000405 	stb	zero,16(sp)
   4153c:	003fd306 	br	4148c <___vfprintf_internal_r+0xa38>
   41540:	d9014c17 	ldw	r4,1328(sp)
   41544:	21000414 	ori	r4,r4,16
   41548:	d9014c15 	stw	r4,1328(sp)
   4154c:	d9414c17 	ldw	r5,1328(sp)
   41550:	2880080c 	andi	r2,r5,32
   41554:	1001081e 	bne	r2,zero,41978 <___vfprintf_internal_r+0xf24>
   41558:	d8c14c17 	ldw	r3,1328(sp)
   4155c:	1880040c 	andi	r2,r3,16
   41560:	1002b01e 	bne	r2,zero,42024 <___vfprintf_internal_r+0x15d0>
   41564:	d9014c17 	ldw	r4,1328(sp)
   41568:	2080100c 	andi	r2,r4,64
   4156c:	1002ad26 	beq	r2,zero,42024 <___vfprintf_internal_r+0x15d0>
   41570:	3c00000b 	ldhu	r16,0(r7)
   41574:	01000044 	movi	r4,1
   41578:	39c00104 	addi	r7,r7,4
   4157c:	0023883a 	mov	r17,zero
   41580:	d9c14015 	stw	r7,1280(sp)
   41584:	d8000405 	stb	zero,16(sp)
   41588:	003fc006 	br	4148c <___vfprintf_internal_r+0xa38>
   4158c:	d9014f17 	ldw	r4,1340(sp)
   41590:	b00b883a 	mov	r5,r22
   41594:	d9800c04 	addi	r6,sp,48
   41598:	00409fc0 	call	409fc <__sprint_r>
   4159c:	103ee51e 	bne	r2,zero,41134 <___vfprintf_internal_r+0x6e0>
   415a0:	dc800e17 	ldw	r18,56(sp)
   415a4:	d8c01904 	addi	r3,sp,100
   415a8:	d9814c17 	ldw	r6,1328(sp)
   415ac:	3080004c 	andi	r2,r6,1
   415b0:	1005003a 	cmpeq	r2,r2,zero
   415b4:	103ea51e 	bne	r2,zero,4104c <___vfprintf_internal_r+0x5f8>
   415b8:	00800044 	movi	r2,1
   415bc:	dc400d17 	ldw	r17,52(sp)
   415c0:	18800115 	stw	r2,4(r3)
   415c4:	d8814917 	ldw	r2,1316(sp)
   415c8:	94800044 	addi	r18,r18,1
   415cc:	8c400044 	addi	r17,r17,1
   415d0:	18800015 	stw	r2,0(r3)
   415d4:	008001c4 	movi	r2,7
   415d8:	dc800e15 	stw	r18,56(sp)
   415dc:	dc400d15 	stw	r17,52(sp)
   415e0:	14421e0e 	bge	r2,r17,41e5c <___vfprintf_internal_r+0x1408>
   415e4:	d9014f17 	ldw	r4,1340(sp)
   415e8:	b00b883a 	mov	r5,r22
   415ec:	d9800c04 	addi	r6,sp,48
   415f0:	00409fc0 	call	409fc <__sprint_r>
   415f4:	103ecf1e 	bne	r2,zero,41134 <___vfprintf_internal_r+0x6e0>
   415f8:	dc800e17 	ldw	r18,56(sp)
   415fc:	d8c01904 	addi	r3,sp,100
   41600:	003e9206 	br	4104c <___vfprintf_internal_r+0x5f8>
   41604:	d9014f17 	ldw	r4,1340(sp)
   41608:	b00b883a 	mov	r5,r22
   4160c:	d9800c04 	addi	r6,sp,48
   41610:	00409fc0 	call	409fc <__sprint_r>
   41614:	103ec026 	beq	r2,zero,41118 <___vfprintf_internal_r+0x6c4>
   41618:	003ec606 	br	41134 <___vfprintf_internal_r+0x6e0>
   4161c:	d9014f17 	ldw	r4,1340(sp)
   41620:	b00b883a 	mov	r5,r22
   41624:	d9800c04 	addi	r6,sp,48
   41628:	d9c15115 	stw	r7,1348(sp)
   4162c:	00409fc0 	call	409fc <__sprint_r>
   41630:	d9c15117 	ldw	r7,1348(sp)
   41634:	103ebf1e 	bne	r2,zero,41134 <___vfprintf_internal_r+0x6e0>
   41638:	dc800e17 	ldw	r18,56(sp)
   4163c:	dc400d17 	ldw	r17,52(sp)
   41640:	dd401904 	addi	r21,sp,100
   41644:	003e7406 	br	41018 <___vfprintf_internal_r+0x5c4>
   41648:	d9014f17 	ldw	r4,1340(sp)
   4164c:	b00b883a 	mov	r5,r22
   41650:	d9800c04 	addi	r6,sp,48
   41654:	d9c15115 	stw	r7,1348(sp)
   41658:	00409fc0 	call	409fc <__sprint_r>
   4165c:	d9c15117 	ldw	r7,1348(sp)
   41660:	103eb41e 	bne	r2,zero,41134 <___vfprintf_internal_r+0x6e0>
   41664:	dd401904 	addi	r21,sp,100
   41668:	003d6d06 	br	40c20 <___vfprintf_internal_r+0x1cc>
   4166c:	d9014f17 	ldw	r4,1340(sp)
   41670:	b00b883a 	mov	r5,r22
   41674:	d9800c04 	addi	r6,sp,48
   41678:	d9c15115 	stw	r7,1348(sp)
   4167c:	00409fc0 	call	409fc <__sprint_r>
   41680:	d9c15117 	ldw	r7,1348(sp)
   41684:	103eab1e 	bne	r2,zero,41134 <___vfprintf_internal_r+0x6e0>
   41688:	dc800e17 	ldw	r18,56(sp)
   4168c:	dc400d17 	ldw	r17,52(sp)
   41690:	dd401904 	addi	r21,sp,100
   41694:	003e3406 	br	40f68 <___vfprintf_internal_r+0x514>
   41698:	d9014f17 	ldw	r4,1340(sp)
   4169c:	b00b883a 	mov	r5,r22
   416a0:	d9800c04 	addi	r6,sp,48
   416a4:	d9c15115 	stw	r7,1348(sp)
   416a8:	00409fc0 	call	409fc <__sprint_r>
   416ac:	d9c15117 	ldw	r7,1348(sp)
   416b0:	103ea01e 	bne	r2,zero,41134 <___vfprintf_internal_r+0x6e0>
   416b4:	dc800e17 	ldw	r18,56(sp)
   416b8:	dc400d17 	ldw	r17,52(sp)
   416bc:	dd401904 	addi	r21,sp,100
   416c0:	003e1c06 	br	40f34 <___vfprintf_internal_r+0x4e0>
   416c4:	d9014f17 	ldw	r4,1340(sp)
   416c8:	b00b883a 	mov	r5,r22
   416cc:	d9800c04 	addi	r6,sp,48
   416d0:	d9c15115 	stw	r7,1348(sp)
   416d4:	00409fc0 	call	409fc <__sprint_r>
   416d8:	d9c15117 	ldw	r7,1348(sp)
   416dc:	103e951e 	bne	r2,zero,41134 <___vfprintf_internal_r+0x6e0>
   416e0:	dc800e17 	ldw	r18,56(sp)
   416e4:	dc400d17 	ldw	r17,52(sp)
   416e8:	dd401904 	addi	r21,sp,100
   416ec:	003e0406 	br	40f00 <___vfprintf_internal_r+0x4ac>
   416f0:	d9000517 	ldw	r4,20(sp)
   416f4:	0102520e 	bge	zero,r4,42040 <___vfprintf_internal_r+0x15ec>
   416f8:	d9814717 	ldw	r6,1308(sp)
   416fc:	21807a16 	blt	r4,r6,418e8 <___vfprintf_internal_r+0xe94>
   41700:	d8814117 	ldw	r2,1284(sp)
   41704:	91a5883a 	add	r18,r18,r6
   41708:	8c400044 	addi	r17,r17,1
   4170c:	a8800015 	stw	r2,0(r21)
   41710:	008001c4 	movi	r2,7
   41714:	a9800115 	stw	r6,4(r21)
   41718:	dc800e15 	stw	r18,56(sp)
   4171c:	dc400d15 	stw	r17,52(sp)
   41720:	1442f616 	blt	r2,r17,422fc <___vfprintf_internal_r+0x18a8>
   41724:	a8c00204 	addi	r3,r21,8
   41728:	d9414717 	ldw	r5,1308(sp)
   4172c:	2161c83a 	sub	r16,r4,r5
   41730:	043f9d0e 	bge	zero,r16,415a8 <___vfprintf_internal_r+0xb54>
   41734:	00800404 	movi	r2,16
   41738:	1402130e 	bge	r2,r16,41f88 <___vfprintf_internal_r+0x1534>
   4173c:	dc400d17 	ldw	r17,52(sp)
   41740:	1027883a 	mov	r19,r2
   41744:	07100034 	movhi	fp,16384
   41748:	e7002884 	addi	fp,fp,162
   4174c:	050001c4 	movi	r20,7
   41750:	00000306 	br	41760 <___vfprintf_internal_r+0xd0c>
   41754:	18c00204 	addi	r3,r3,8
   41758:	843ffc04 	addi	r16,r16,-16
   4175c:	9c020d0e 	bge	r19,r16,41f94 <___vfprintf_internal_r+0x1540>
   41760:	94800404 	addi	r18,r18,16
   41764:	8c400044 	addi	r17,r17,1
   41768:	1f000015 	stw	fp,0(r3)
   4176c:	1cc00115 	stw	r19,4(r3)
   41770:	dc800e15 	stw	r18,56(sp)
   41774:	dc400d15 	stw	r17,52(sp)
   41778:	a47ff60e 	bge	r20,r17,41754 <___vfprintf_internal_r+0xd00>
   4177c:	d9014f17 	ldw	r4,1340(sp)
   41780:	b00b883a 	mov	r5,r22
   41784:	d9800c04 	addi	r6,sp,48
   41788:	00409fc0 	call	409fc <__sprint_r>
   4178c:	103e691e 	bne	r2,zero,41134 <___vfprintf_internal_r+0x6e0>
   41790:	dc800e17 	ldw	r18,56(sp)
   41794:	dc400d17 	ldw	r17,52(sp)
   41798:	d8c01904 	addi	r3,sp,100
   4179c:	003fee06 	br	41758 <___vfprintf_internal_r+0xd04>
   417a0:	d8814717 	ldw	r2,1308(sp)
   417a4:	143fffc4 	addi	r16,r2,-1
   417a8:	043e970e 	bge	zero,r16,41208 <___vfprintf_internal_r+0x7b4>
   417ac:	00800404 	movi	r2,16
   417b0:	1400180e 	bge	r2,r16,41814 <___vfprintf_internal_r+0xdc0>
   417b4:	1029883a 	mov	r20,r2
   417b8:	07100034 	movhi	fp,16384
   417bc:	e7002884 	addi	fp,fp,162
   417c0:	054001c4 	movi	r21,7
   417c4:	00000306 	br	417d4 <___vfprintf_internal_r+0xd80>
   417c8:	9cc00204 	addi	r19,r19,8
   417cc:	843ffc04 	addi	r16,r16,-16
   417d0:	a400120e 	bge	r20,r16,4181c <___vfprintf_internal_r+0xdc8>
   417d4:	94800404 	addi	r18,r18,16
   417d8:	8c400044 	addi	r17,r17,1
   417dc:	9f000015 	stw	fp,0(r19)
   417e0:	9d000115 	stw	r20,4(r19)
   417e4:	dc800e15 	stw	r18,56(sp)
   417e8:	dc400d15 	stw	r17,52(sp)
   417ec:	ac7ff60e 	bge	r21,r17,417c8 <___vfprintf_internal_r+0xd74>
   417f0:	d9014f17 	ldw	r4,1340(sp)
   417f4:	b00b883a 	mov	r5,r22
   417f8:	d9800c04 	addi	r6,sp,48
   417fc:	00409fc0 	call	409fc <__sprint_r>
   41800:	103e4c1e 	bne	r2,zero,41134 <___vfprintf_internal_r+0x6e0>
   41804:	dc800e17 	ldw	r18,56(sp)
   41808:	dc400d17 	ldw	r17,52(sp)
   4180c:	dcc01904 	addi	r19,sp,100
   41810:	003fee06 	br	417cc <___vfprintf_internal_r+0xd78>
   41814:	07100034 	movhi	fp,16384
   41818:	e7002884 	addi	fp,fp,162
   4181c:	9425883a 	add	r18,r18,r16
   41820:	8c400044 	addi	r17,r17,1
   41824:	008001c4 	movi	r2,7
   41828:	9f000015 	stw	fp,0(r19)
   4182c:	9c000115 	stw	r16,4(r19)
   41830:	dc800e15 	stw	r18,56(sp)
   41834:	dc400d15 	stw	r17,52(sp)
   41838:	147e720e 	bge	r2,r17,41204 <___vfprintf_internal_r+0x7b0>
   4183c:	d9014f17 	ldw	r4,1340(sp)
   41840:	b00b883a 	mov	r5,r22
   41844:	d9800c04 	addi	r6,sp,48
   41848:	00409fc0 	call	409fc <__sprint_r>
   4184c:	103e391e 	bne	r2,zero,41134 <___vfprintf_internal_r+0x6e0>
   41850:	dc800e17 	ldw	r18,56(sp)
   41854:	dc400d17 	ldw	r17,52(sp)
   41858:	dcc01904 	addi	r19,sp,100
   4185c:	003e6a06 	br	41208 <___vfprintf_internal_r+0x7b4>
   41860:	d9014f17 	ldw	r4,1340(sp)
   41864:	b00b883a 	mov	r5,r22
   41868:	d9800c04 	addi	r6,sp,48
   4186c:	d9c15115 	stw	r7,1348(sp)
   41870:	00409fc0 	call	409fc <__sprint_r>
   41874:	d9c15117 	ldw	r7,1348(sp)
   41878:	103e2e1e 	bne	r2,zero,41134 <___vfprintf_internal_r+0x6e0>
   4187c:	dc800e17 	ldw	r18,56(sp)
   41880:	dc400d17 	ldw	r17,52(sp)
   41884:	dd401904 	addi	r21,sp,100
   41888:	003dba06 	br	40f74 <___vfprintf_internal_r+0x520>
   4188c:	d9014f17 	ldw	r4,1340(sp)
   41890:	b00b883a 	mov	r5,r22
   41894:	d9800c04 	addi	r6,sp,48
   41898:	00409fc0 	call	409fc <__sprint_r>
   4189c:	103e251e 	bne	r2,zero,41134 <___vfprintf_internal_r+0x6e0>
   418a0:	dc800e17 	ldw	r18,56(sp)
   418a4:	dc400d17 	ldw	r17,52(sp)
   418a8:	dcc01904 	addi	r19,sp,100
   418ac:	003e4206 	br	411b8 <___vfprintf_internal_r+0x764>
   418b0:	d9014f17 	ldw	r4,1340(sp)
   418b4:	b00b883a 	mov	r5,r22
   418b8:	d9800c04 	addi	r6,sp,48
   418bc:	00409fc0 	call	409fc <__sprint_r>
   418c0:	103e1c1e 	bne	r2,zero,41134 <___vfprintf_internal_r+0x6e0>
   418c4:	dc800e17 	ldw	r18,56(sp)
   418c8:	dc400d17 	ldw	r17,52(sp)
   418cc:	d8c01904 	addi	r3,sp,100
   418d0:	003e2e06 	br	4118c <___vfprintf_internal_r+0x738>
   418d4:	d9414c17 	ldw	r5,1328(sp)
   418d8:	2880004c 	andi	r2,r5,1
   418dc:	1005003a 	cmpeq	r2,r2,zero
   418e0:	103dda1e 	bne	r2,zero,4104c <___vfprintf_internal_r+0x5f8>
   418e4:	003e9f06 	br	41364 <___vfprintf_internal_r+0x910>
   418e8:	d8c14117 	ldw	r3,1284(sp)
   418ec:	9125883a 	add	r18,r18,r4
   418f0:	8c400044 	addi	r17,r17,1
   418f4:	008001c4 	movi	r2,7
   418f8:	a8c00015 	stw	r3,0(r21)
   418fc:	a9000115 	stw	r4,4(r21)
   41900:	dc800e15 	stw	r18,56(sp)
   41904:	dc400d15 	stw	r17,52(sp)
   41908:	14426616 	blt	r2,r17,422a4 <___vfprintf_internal_r+0x1850>
   4190c:	a8c00204 	addi	r3,r21,8
   41910:	d9414917 	ldw	r5,1316(sp)
   41914:	00800044 	movi	r2,1
   41918:	94800044 	addi	r18,r18,1
   4191c:	8c400044 	addi	r17,r17,1
   41920:	18800115 	stw	r2,4(r3)
   41924:	008001c4 	movi	r2,7
   41928:	19400015 	stw	r5,0(r3)
   4192c:	dc800e15 	stw	r18,56(sp)
   41930:	dc400d15 	stw	r17,52(sp)
   41934:	2021883a 	mov	r16,r4
   41938:	14425016 	blt	r2,r17,4227c <___vfprintf_internal_r+0x1828>
   4193c:	19400204 	addi	r5,r3,8
   41940:	d9814717 	ldw	r6,1308(sp)
   41944:	8c400044 	addi	r17,r17,1
   41948:	dc400d15 	stw	r17,52(sp)
   4194c:	3107c83a 	sub	r3,r6,r4
   41950:	d9014117 	ldw	r4,1284(sp)
   41954:	90e5883a 	add	r18,r18,r3
   41958:	28c00115 	stw	r3,4(r5)
   4195c:	8105883a 	add	r2,r16,r4
   41960:	28800015 	stw	r2,0(r5)
   41964:	008001c4 	movi	r2,7
   41968:	dc800e15 	stw	r18,56(sp)
   4196c:	147f1d16 	blt	r2,r17,415e4 <___vfprintf_internal_r+0xb90>
   41970:	28c00204 	addi	r3,r5,8
   41974:	003db506 	br	4104c <___vfprintf_internal_r+0x5f8>
   41978:	3c000017 	ldw	r16,0(r7)
   4197c:	3c400117 	ldw	r17,4(r7)
   41980:	39800204 	addi	r6,r7,8
   41984:	01000044 	movi	r4,1
   41988:	d9814015 	stw	r6,1280(sp)
   4198c:	d8000405 	stb	zero,16(sp)
   41990:	003ebe06 	br	4148c <___vfprintf_internal_r+0xa38>
   41994:	3c000017 	ldw	r16,0(r7)
   41998:	3c400117 	ldw	r17,4(r7)
   4199c:	38800204 	addi	r2,r7,8
   419a0:	d8814015 	stw	r2,1280(sp)
   419a4:	003eb706 	br	41484 <___vfprintf_internal_r+0xa30>
   419a8:	3c000017 	ldw	r16,0(r7)
   419ac:	3c400117 	ldw	r17,4(r7)
   419b0:	39000204 	addi	r4,r7,8
   419b4:	d9014015 	stw	r4,1280(sp)
   419b8:	0009883a 	mov	r4,zero
   419bc:	d8000405 	stb	zero,16(sp)
   419c0:	003eb206 	br	4148c <___vfprintf_internal_r+0xa38>
   419c4:	38c00017 	ldw	r3,0(r7)
   419c8:	39c00104 	addi	r7,r7,4
   419cc:	d8c14a15 	stw	r3,1320(sp)
   419d0:	1800d10e 	bge	r3,zero,41d18 <___vfprintf_internal_r+0x12c4>
   419d4:	00c7c83a 	sub	r3,zero,r3
   419d8:	d8c14a15 	stw	r3,1320(sp)
   419dc:	d9014c17 	ldw	r4,1328(sp)
   419e0:	b8c00007 	ldb	r3,0(r23)
   419e4:	21000114 	ori	r4,r4,4
   419e8:	d9014c15 	stw	r4,1328(sp)
   419ec:	003c9806 	br	40c50 <___vfprintf_internal_r+0x1fc>
   419f0:	d9814c17 	ldw	r6,1328(sp)
   419f4:	3080080c 	andi	r2,r6,32
   419f8:	1001f026 	beq	r2,zero,421bc <___vfprintf_internal_r+0x1768>
   419fc:	d9014b17 	ldw	r4,1324(sp)
   41a00:	38800017 	ldw	r2,0(r7)
   41a04:	39c00104 	addi	r7,r7,4
   41a08:	d9c14015 	stw	r7,1280(sp)
   41a0c:	2007d7fa 	srai	r3,r4,31
   41a10:	d9c14017 	ldw	r7,1280(sp)
   41a14:	11000015 	stw	r4,0(r2)
   41a18:	10c00115 	stw	r3,4(r2)
   41a1c:	003c6906 	br	40bc4 <___vfprintf_internal_r+0x170>
   41a20:	b8c00007 	ldb	r3,0(r23)
   41a24:	00801b04 	movi	r2,108
   41a28:	18824f26 	beq	r3,r2,42368 <___vfprintf_internal_r+0x1914>
   41a2c:	d9414c17 	ldw	r5,1328(sp)
   41a30:	29400414 	ori	r5,r5,16
   41a34:	d9414c15 	stw	r5,1328(sp)
   41a38:	003c8506 	br	40c50 <___vfprintf_internal_r+0x1fc>
   41a3c:	d9814c17 	ldw	r6,1328(sp)
   41a40:	b8c00007 	ldb	r3,0(r23)
   41a44:	31800814 	ori	r6,r6,32
   41a48:	d9814c15 	stw	r6,1328(sp)
   41a4c:	003c8006 	br	40c50 <___vfprintf_internal_r+0x1fc>
   41a50:	d8814c17 	ldw	r2,1328(sp)
   41a54:	3c000017 	ldw	r16,0(r7)
   41a58:	00c01e04 	movi	r3,120
   41a5c:	10800094 	ori	r2,r2,2
   41a60:	d8814c15 	stw	r2,1328(sp)
   41a64:	39c00104 	addi	r7,r7,4
   41a68:	01500034 	movhi	r5,16384
   41a6c:	29401104 	addi	r5,r5,68
   41a70:	00800c04 	movi	r2,48
   41a74:	0023883a 	mov	r17,zero
   41a78:	01000084 	movi	r4,2
   41a7c:	d9c14015 	stw	r7,1280(sp)
   41a80:	d8c14d15 	stw	r3,1332(sp)
   41a84:	d9414415 	stw	r5,1296(sp)
   41a88:	d8800445 	stb	r2,17(sp)
   41a8c:	d8c00485 	stb	r3,18(sp)
   41a90:	d8000405 	stb	zero,16(sp)
   41a94:	003e7d06 	br	4148c <___vfprintf_internal_r+0xa38>
   41a98:	d8814c17 	ldw	r2,1328(sp)
   41a9c:	b8c00007 	ldb	r3,0(r23)
   41aa0:	10801014 	ori	r2,r2,64
   41aa4:	d8814c15 	stw	r2,1328(sp)
   41aa8:	003c6906 	br	40c50 <___vfprintf_internal_r+0x1fc>
   41aac:	d9414c17 	ldw	r5,1328(sp)
   41ab0:	2880020c 	andi	r2,r5,8
   41ab4:	1001df26 	beq	r2,zero,42234 <___vfprintf_internal_r+0x17e0>
   41ab8:	39800017 	ldw	r6,0(r7)
   41abc:	38800204 	addi	r2,r7,8
   41ac0:	d8814015 	stw	r2,1280(sp)
   41ac4:	d9814215 	stw	r6,1288(sp)
   41ac8:	39c00117 	ldw	r7,4(r7)
   41acc:	d9c14315 	stw	r7,1292(sp)
   41ad0:	d9014217 	ldw	r4,1288(sp)
   41ad4:	d9414317 	ldw	r5,1292(sp)
   41ad8:	00473f40 	call	473f4 <__isinfd>
   41adc:	10021726 	beq	r2,zero,4233c <___vfprintf_internal_r+0x18e8>
   41ae0:	d9014217 	ldw	r4,1288(sp)
   41ae4:	d9414317 	ldw	r5,1292(sp)
   41ae8:	000d883a 	mov	r6,zero
   41aec:	000f883a 	mov	r7,zero
   41af0:	004942c0 	call	4942c <__ltdf2>
   41af4:	1002ca16 	blt	r2,zero,42620 <___vfprintf_internal_r+0x1bcc>
   41af8:	d9414d17 	ldw	r5,1332(sp)
   41afc:	008011c4 	movi	r2,71
   41b00:	11420a16 	blt	r2,r5,4232c <___vfprintf_internal_r+0x18d8>
   41b04:	01900034 	movhi	r6,16384
   41b08:	31801604 	addi	r6,r6,88
   41b0c:	d9814115 	stw	r6,1284(sp)
   41b10:	d9014c17 	ldw	r4,1328(sp)
   41b14:	00c000c4 	movi	r3,3
   41b18:	00bfdfc4 	movi	r2,-129
   41b1c:	2088703a 	and	r4,r4,r2
   41b20:	180f883a 	mov	r7,r3
   41b24:	d8c14515 	stw	r3,1300(sp)
   41b28:	d9014c15 	stw	r4,1328(sp)
   41b2c:	d8014615 	stw	zero,1304(sp)
   41b30:	003e6a06 	br	414dc <___vfprintf_internal_r+0xa88>
   41b34:	38800017 	ldw	r2,0(r7)
   41b38:	00c00044 	movi	r3,1
   41b3c:	39c00104 	addi	r7,r7,4
   41b40:	d9c14015 	stw	r7,1280(sp)
   41b44:	d9000f04 	addi	r4,sp,60
   41b48:	180f883a 	mov	r7,r3
   41b4c:	d8c14515 	stw	r3,1300(sp)
   41b50:	d9014115 	stw	r4,1284(sp)
   41b54:	d8800f05 	stb	r2,60(sp)
   41b58:	d8000405 	stb	zero,16(sp)
   41b5c:	003cac06 	br	40e10 <___vfprintf_internal_r+0x3bc>
   41b60:	01500034 	movhi	r5,16384
   41b64:	29401c04 	addi	r5,r5,112
   41b68:	d9414415 	stw	r5,1296(sp)
   41b6c:	d9814c17 	ldw	r6,1328(sp)
   41b70:	3080080c 	andi	r2,r6,32
   41b74:	1000f926 	beq	r2,zero,41f5c <___vfprintf_internal_r+0x1508>
   41b78:	3c000017 	ldw	r16,0(r7)
   41b7c:	3c400117 	ldw	r17,4(r7)
   41b80:	38800204 	addi	r2,r7,8
   41b84:	d8814015 	stw	r2,1280(sp)
   41b88:	d9414c17 	ldw	r5,1328(sp)
   41b8c:	2880004c 	andi	r2,r5,1
   41b90:	1005003a 	cmpeq	r2,r2,zero
   41b94:	1000b31e 	bne	r2,zero,41e64 <___vfprintf_internal_r+0x1410>
   41b98:	8444b03a 	or	r2,r16,r17
   41b9c:	1000b126 	beq	r2,zero,41e64 <___vfprintf_internal_r+0x1410>
   41ba0:	d9814d17 	ldw	r6,1332(sp)
   41ba4:	29400094 	ori	r5,r5,2
   41ba8:	00800c04 	movi	r2,48
   41bac:	01000084 	movi	r4,2
   41bb0:	d9414c15 	stw	r5,1328(sp)
   41bb4:	d8800445 	stb	r2,17(sp)
   41bb8:	d9800485 	stb	r6,18(sp)
   41bbc:	d8000405 	stb	zero,16(sp)
   41bc0:	003e3206 	br	4148c <___vfprintf_internal_r+0xa38>
   41bc4:	01900034 	movhi	r6,16384
   41bc8:	31801104 	addi	r6,r6,68
   41bcc:	d9814415 	stw	r6,1296(sp)
   41bd0:	003fe606 	br	41b6c <___vfprintf_internal_r+0x1118>
   41bd4:	00800ac4 	movi	r2,43
   41bd8:	d8800405 	stb	r2,16(sp)
   41bdc:	b8c00007 	ldb	r3,0(r23)
   41be0:	003c1b06 	br	40c50 <___vfprintf_internal_r+0x1fc>
   41be4:	d8814c17 	ldw	r2,1328(sp)
   41be8:	b8c00007 	ldb	r3,0(r23)
   41bec:	10800054 	ori	r2,r2,1
   41bf0:	d8814c15 	stw	r2,1328(sp)
   41bf4:	003c1606 	br	40c50 <___vfprintf_internal_r+0x1fc>
   41bf8:	d8800407 	ldb	r2,16(sp)
   41bfc:	1000461e 	bne	r2,zero,41d18 <___vfprintf_internal_r+0x12c4>
   41c00:	00800804 	movi	r2,32
   41c04:	d8800405 	stb	r2,16(sp)
   41c08:	b8c00007 	ldb	r3,0(r23)
   41c0c:	003c1006 	br	40c50 <___vfprintf_internal_r+0x1fc>
   41c10:	d9814c17 	ldw	r6,1328(sp)
   41c14:	b8c00007 	ldb	r3,0(r23)
   41c18:	31800214 	ori	r6,r6,8
   41c1c:	d9814c15 	stw	r6,1328(sp)
   41c20:	003c0b06 	br	40c50 <___vfprintf_internal_r+0x1fc>
   41c24:	0007883a 	mov	r3,zero
   41c28:	01000244 	movi	r4,9
   41c2c:	188002a4 	muli	r2,r3,10
   41c30:	b8c00007 	ldb	r3,0(r23)
   41c34:	d9814d17 	ldw	r6,1332(sp)
   41c38:	bdc00044 	addi	r23,r23,1
   41c3c:	d8c14d15 	stw	r3,1332(sp)
   41c40:	d9414d17 	ldw	r5,1332(sp)
   41c44:	3085883a 	add	r2,r6,r2
   41c48:	10fff404 	addi	r3,r2,-48
   41c4c:	28bff404 	addi	r2,r5,-48
   41c50:	20bff62e 	bgeu	r4,r2,41c2c <___vfprintf_internal_r+0x11d8>
   41c54:	d8c14a15 	stw	r3,1320(sp)
   41c58:	003bff06 	br	40c58 <___vfprintf_internal_r+0x204>
   41c5c:	d9414c17 	ldw	r5,1328(sp)
   41c60:	b8c00007 	ldb	r3,0(r23)
   41c64:	29402014 	ori	r5,r5,128
   41c68:	d9414c15 	stw	r5,1328(sp)
   41c6c:	003bf806 	br	40c50 <___vfprintf_internal_r+0x1fc>
   41c70:	b8c00007 	ldb	r3,0(r23)
   41c74:	00800a84 	movi	r2,42
   41c78:	bdc00044 	addi	r23,r23,1
   41c7c:	18831526 	beq	r3,r2,428d4 <___vfprintf_internal_r+0x1e80>
   41c80:	d8c14d15 	stw	r3,1332(sp)
   41c84:	18bff404 	addi	r2,r3,-48
   41c88:	00c00244 	movi	r3,9
   41c8c:	18827836 	bltu	r3,r2,42670 <___vfprintf_internal_r+0x1c1c>
   41c90:	000d883a 	mov	r6,zero
   41c94:	308002a4 	muli	r2,r6,10
   41c98:	b9800007 	ldb	r6,0(r23)
   41c9c:	d9414d17 	ldw	r5,1332(sp)
   41ca0:	bdc00044 	addi	r23,r23,1
   41ca4:	d9814d15 	stw	r6,1332(sp)
   41ca8:	d9014d17 	ldw	r4,1332(sp)
   41cac:	1145883a 	add	r2,r2,r5
   41cb0:	11bff404 	addi	r6,r2,-48
   41cb4:	20bff404 	addi	r2,r4,-48
   41cb8:	18bff62e 	bgeu	r3,r2,41c94 <___vfprintf_internal_r+0x1240>
   41cbc:	3027883a 	mov	r19,r6
   41cc0:	303be50e 	bge	r6,zero,40c58 <___vfprintf_internal_r+0x204>
   41cc4:	04ffffc4 	movi	r19,-1
   41cc8:	003be306 	br	40c58 <___vfprintf_internal_r+0x204>
   41ccc:	d8000405 	stb	zero,16(sp)
   41cd0:	39800017 	ldw	r6,0(r7)
   41cd4:	39c00104 	addi	r7,r7,4
   41cd8:	d9c14015 	stw	r7,1280(sp)
   41cdc:	d9814115 	stw	r6,1284(sp)
   41ce0:	3001c926 	beq	r6,zero,42408 <___vfprintf_internal_r+0x19b4>
   41ce4:	98000e16 	blt	r19,zero,41d20 <___vfprintf_internal_r+0x12cc>
   41ce8:	d9014117 	ldw	r4,1284(sp)
   41cec:	000b883a 	mov	r5,zero
   41cf0:	980d883a 	mov	r6,r19
   41cf4:	0045b100 	call	45b10 <memchr>
   41cf8:	10025926 	beq	r2,zero,42660 <___vfprintf_internal_r+0x1c0c>
   41cfc:	d8c14117 	ldw	r3,1284(sp)
   41d00:	10cfc83a 	sub	r7,r2,r3
   41d04:	99c19e16 	blt	r19,r7,42380 <___vfprintf_internal_r+0x192c>
   41d08:	d9c14515 	stw	r7,1300(sp)
   41d0c:	38000916 	blt	r7,zero,41d34 <___vfprintf_internal_r+0x12e0>
   41d10:	d8014615 	stw	zero,1304(sp)
   41d14:	003df106 	br	414dc <___vfprintf_internal_r+0xa88>
   41d18:	b8c00007 	ldb	r3,0(r23)
   41d1c:	003bcc06 	br	40c50 <___vfprintf_internal_r+0x1fc>
   41d20:	d9014117 	ldw	r4,1284(sp)
   41d24:	00409880 	call	40988 <strlen>
   41d28:	d8814515 	stw	r2,1300(sp)
   41d2c:	100f883a 	mov	r7,r2
   41d30:	103ff70e 	bge	r2,zero,41d10 <___vfprintf_internal_r+0x12bc>
   41d34:	d8014515 	stw	zero,1300(sp)
   41d38:	d8014615 	stw	zero,1304(sp)
   41d3c:	003de706 	br	414dc <___vfprintf_internal_r+0xa88>
   41d40:	20c03fcc 	andi	r3,r4,255
   41d44:	00800044 	movi	r2,1
   41d48:	18802d26 	beq	r3,r2,41e00 <___vfprintf_internal_r+0x13ac>
   41d4c:	18800e36 	bltu	r3,r2,41d88 <___vfprintf_internal_r+0x1334>
   41d50:	00800084 	movi	r2,2
   41d54:	1880fa26 	beq	r3,r2,42140 <___vfprintf_internal_r+0x16ec>
   41d58:	01100034 	movhi	r4,16384
   41d5c:	21002104 	addi	r4,r4,132
   41d60:	00409880 	call	40988 <strlen>
   41d64:	100f883a 	mov	r7,r2
   41d68:	dcc14515 	stw	r19,1300(sp)
   41d6c:	9880010e 	bge	r19,r2,41d74 <___vfprintf_internal_r+0x1320>
   41d70:	d8814515 	stw	r2,1300(sp)
   41d74:	00900034 	movhi	r2,16384
   41d78:	10802104 	addi	r2,r2,132
   41d7c:	dcc14615 	stw	r19,1304(sp)
   41d80:	d8814115 	stw	r2,1284(sp)
   41d84:	003dd506 	br	414dc <___vfprintf_internal_r+0xa88>
   41d88:	d9401904 	addi	r5,sp,100
   41d8c:	dd000f04 	addi	r20,sp,60
   41d90:	d9414115 	stw	r5,1284(sp)
   41d94:	880a977a 	slli	r5,r17,29
   41d98:	d9814117 	ldw	r6,1284(sp)
   41d9c:	8004d0fa 	srli	r2,r16,3
   41da0:	8806d0fa 	srli	r3,r17,3
   41da4:	810001cc 	andi	r4,r16,7
   41da8:	2884b03a 	or	r2,r5,r2
   41dac:	31bfffc4 	addi	r6,r6,-1
   41db0:	21000c04 	addi	r4,r4,48
   41db4:	d9814115 	stw	r6,1284(sp)
   41db8:	10cab03a 	or	r5,r2,r3
   41dbc:	31000005 	stb	r4,0(r6)
   41dc0:	1021883a 	mov	r16,r2
   41dc4:	1823883a 	mov	r17,r3
   41dc8:	283ff21e 	bne	r5,zero,41d94 <___vfprintf_internal_r+0x1340>
   41dcc:	d8c14c17 	ldw	r3,1328(sp)
   41dd0:	1880004c 	andi	r2,r3,1
   41dd4:	1005003a 	cmpeq	r2,r2,zero
   41dd8:	103db91e 	bne	r2,zero,414c0 <___vfprintf_internal_r+0xa6c>
   41ddc:	20803fcc 	andi	r2,r4,255
   41de0:	1080201c 	xori	r2,r2,128
   41de4:	10bfe004 	addi	r2,r2,-128
   41de8:	00c00c04 	movi	r3,48
   41dec:	10fdb426 	beq	r2,r3,414c0 <___vfprintf_internal_r+0xa6c>
   41df0:	31bfffc4 	addi	r6,r6,-1
   41df4:	d9814115 	stw	r6,1284(sp)
   41df8:	30c00005 	stb	r3,0(r6)
   41dfc:	003db006 	br	414c0 <___vfprintf_internal_r+0xa6c>
   41e00:	88800068 	cmpgeui	r2,r17,1
   41e04:	10002c1e 	bne	r2,zero,41eb8 <___vfprintf_internal_r+0x1464>
   41e08:	8800021e 	bne	r17,zero,41e14 <___vfprintf_internal_r+0x13c0>
   41e0c:	00800244 	movi	r2,9
   41e10:	14002936 	bltu	r2,r16,41eb8 <___vfprintf_internal_r+0x1464>
   41e14:	d90018c4 	addi	r4,sp,99
   41e18:	dd000f04 	addi	r20,sp,60
   41e1c:	d9014115 	stw	r4,1284(sp)
   41e20:	d9014117 	ldw	r4,1284(sp)
   41e24:	80800c04 	addi	r2,r16,48
   41e28:	20800005 	stb	r2,0(r4)
   41e2c:	003da406 	br	414c0 <___vfprintf_internal_r+0xa6c>
   41e30:	dc400d17 	ldw	r17,52(sp)
   41e34:	07100034 	movhi	fp,16384
   41e38:	e7002884 	addi	fp,fp,162
   41e3c:	9425883a 	add	r18,r18,r16
   41e40:	8c400044 	addi	r17,r17,1
   41e44:	008001c4 	movi	r2,7
   41e48:	1f000015 	stw	fp,0(r3)
   41e4c:	1c000115 	stw	r16,4(r3)
   41e50:	dc800e15 	stw	r18,56(sp)
   41e54:	dc400d15 	stw	r17,52(sp)
   41e58:	147de216 	blt	r2,r17,415e4 <___vfprintf_internal_r+0xb90>
   41e5c:	18c00204 	addi	r3,r3,8
   41e60:	003c7a06 	br	4104c <___vfprintf_internal_r+0x5f8>
   41e64:	01000084 	movi	r4,2
   41e68:	d8000405 	stb	zero,16(sp)
   41e6c:	003d8706 	br	4148c <___vfprintf_internal_r+0xa38>
   41e70:	d9814c17 	ldw	r6,1328(sp)
   41e74:	30c4703a 	and	r2,r6,r3
   41e78:	1005003a 	cmpeq	r2,r2,zero
   41e7c:	103cb926 	beq	r2,zero,41164 <___vfprintf_internal_r+0x710>
   41e80:	d9014117 	ldw	r4,1284(sp)
   41e84:	94800044 	addi	r18,r18,1
   41e88:	8c400044 	addi	r17,r17,1
   41e8c:	008001c4 	movi	r2,7
   41e90:	a9000015 	stw	r4,0(r21)
   41e94:	a8c00115 	stw	r3,4(r21)
   41e98:	dc800e15 	stw	r18,56(sp)
   41e9c:	dc400d15 	stw	r17,52(sp)
   41ea0:	147e6616 	blt	r2,r17,4183c <___vfprintf_internal_r+0xde8>
   41ea4:	acc00204 	addi	r19,r21,8
   41ea8:	003cd706 	br	41208 <___vfprintf_internal_r+0x7b4>
   41eac:	07100034 	movhi	fp,16384
   41eb0:	e7002884 	addi	fp,fp,162
   41eb4:	003c4f06 	br	40ff4 <___vfprintf_internal_r+0x5a0>
   41eb8:	dd000f04 	addi	r20,sp,60
   41ebc:	dc801904 	addi	r18,sp,100
   41ec0:	8009883a 	mov	r4,r16
   41ec4:	880b883a 	mov	r5,r17
   41ec8:	01800284 	movi	r6,10
   41ecc:	000f883a 	mov	r7,zero
   41ed0:	004814c0 	call	4814c <__umoddi3>
   41ed4:	12000c04 	addi	r8,r2,48
   41ed8:	94bfffc4 	addi	r18,r18,-1
   41edc:	8009883a 	mov	r4,r16
   41ee0:	880b883a 	mov	r5,r17
   41ee4:	01800284 	movi	r6,10
   41ee8:	000f883a 	mov	r7,zero
   41eec:	92000005 	stb	r8,0(r18)
   41ef0:	0047b700 	call	47b70 <__udivdi3>
   41ef4:	1009883a 	mov	r4,r2
   41ef8:	1021883a 	mov	r16,r2
   41efc:	18800068 	cmpgeui	r2,r3,1
   41f00:	1823883a 	mov	r17,r3
   41f04:	103fee1e 	bne	r2,zero,41ec0 <___vfprintf_internal_r+0x146c>
   41f08:	1800021e 	bne	r3,zero,41f14 <___vfprintf_internal_r+0x14c0>
   41f0c:	00800244 	movi	r2,9
   41f10:	113feb36 	bltu	r2,r4,41ec0 <___vfprintf_internal_r+0x146c>
   41f14:	94bfffc4 	addi	r18,r18,-1
   41f18:	dc814115 	stw	r18,1284(sp)
   41f1c:	003fc006 	br	41e20 <___vfprintf_internal_r+0x13cc>
   41f20:	d9014c17 	ldw	r4,1328(sp)
   41f24:	2080004c 	andi	r2,r4,1
   41f28:	10009a1e 	bne	r2,zero,42194 <___vfprintf_internal_r+0x1740>
   41f2c:	d9401904 	addi	r5,sp,100
   41f30:	dd000f04 	addi	r20,sp,60
   41f34:	d9414115 	stw	r5,1284(sp)
   41f38:	003d6106 	br	414c0 <___vfprintf_internal_r+0xa6c>
   41f3c:	d9014f17 	ldw	r4,1340(sp)
   41f40:	b00b883a 	mov	r5,r22
   41f44:	d9800c04 	addi	r6,sp,48
   41f48:	00409fc0 	call	409fc <__sprint_r>
   41f4c:	103c791e 	bne	r2,zero,41134 <___vfprintf_internal_r+0x6e0>
   41f50:	dc800e17 	ldw	r18,56(sp)
   41f54:	d8c01904 	addi	r3,sp,100
   41f58:	003cff06 	br	41358 <___vfprintf_internal_r+0x904>
   41f5c:	d8c14c17 	ldw	r3,1328(sp)
   41f60:	1880040c 	andi	r2,r3,16
   41f64:	1000711e 	bne	r2,zero,4212c <___vfprintf_internal_r+0x16d8>
   41f68:	d9014c17 	ldw	r4,1328(sp)
   41f6c:	2080100c 	andi	r2,r4,64
   41f70:	10006e26 	beq	r2,zero,4212c <___vfprintf_internal_r+0x16d8>
   41f74:	3c00000b 	ldhu	r16,0(r7)
   41f78:	0023883a 	mov	r17,zero
   41f7c:	39c00104 	addi	r7,r7,4
   41f80:	d9c14015 	stw	r7,1280(sp)
   41f84:	003f0006 	br	41b88 <___vfprintf_internal_r+0x1134>
   41f88:	dc400d17 	ldw	r17,52(sp)
   41f8c:	07100034 	movhi	fp,16384
   41f90:	e7002884 	addi	fp,fp,162
   41f94:	9425883a 	add	r18,r18,r16
   41f98:	8c400044 	addi	r17,r17,1
   41f9c:	008001c4 	movi	r2,7
   41fa0:	1f000015 	stw	fp,0(r3)
   41fa4:	1c000115 	stw	r16,4(r3)
   41fa8:	dc800e15 	stw	r18,56(sp)
   41fac:	dc400d15 	stw	r17,52(sp)
   41fb0:	147d7616 	blt	r2,r17,4158c <___vfprintf_internal_r+0xb38>
   41fb4:	18c00204 	addi	r3,r3,8
   41fb8:	003d7b06 	br	415a8 <___vfprintf_internal_r+0xb54>
   41fbc:	dc800e17 	ldw	r18,56(sp)
   41fc0:	dc400d17 	ldw	r17,52(sp)
   41fc4:	07100034 	movhi	fp,16384
   41fc8:	e7002c84 	addi	fp,fp,178
   41fcc:	003bc006 	br	40ed0 <___vfprintf_internal_r+0x47c>
   41fd0:	d9014f17 	ldw	r4,1340(sp)
   41fd4:	b00b883a 	mov	r5,r22
   41fd8:	d9800c04 	addi	r6,sp,48
   41fdc:	00409fc0 	call	409fc <__sprint_r>
   41fe0:	103c541e 	bne	r2,zero,41134 <___vfprintf_internal_r+0x6e0>
   41fe4:	dc800e17 	ldw	r18,56(sp)
   41fe8:	d8c01904 	addi	r3,sp,100
   41fec:	003ce906 	br	41394 <___vfprintf_internal_r+0x940>
   41ff0:	3c000017 	ldw	r16,0(r7)
   41ff4:	0009883a 	mov	r4,zero
   41ff8:	39c00104 	addi	r7,r7,4
   41ffc:	0023883a 	mov	r17,zero
   42000:	d9c14015 	stw	r7,1280(sp)
   42004:	d8000405 	stb	zero,16(sp)
   42008:	003d2006 	br	4148c <___vfprintf_internal_r+0xa38>
   4200c:	38800017 	ldw	r2,0(r7)
   42010:	39c00104 	addi	r7,r7,4
   42014:	d9c14015 	stw	r7,1280(sp)
   42018:	1023d7fa 	srai	r17,r2,31
   4201c:	1021883a 	mov	r16,r2
   42020:	003d1806 	br	41484 <___vfprintf_internal_r+0xa30>
   42024:	3c000017 	ldw	r16,0(r7)
   42028:	01000044 	movi	r4,1
   4202c:	39c00104 	addi	r7,r7,4
   42030:	0023883a 	mov	r17,zero
   42034:	d9c14015 	stw	r7,1280(sp)
   42038:	d8000405 	stb	zero,16(sp)
   4203c:	003d1306 	br	4148c <___vfprintf_internal_r+0xa38>
   42040:	00900034 	movhi	r2,16384
   42044:	10802804 	addi	r2,r2,160
   42048:	94800044 	addi	r18,r18,1
   4204c:	8c400044 	addi	r17,r17,1
   42050:	a8800015 	stw	r2,0(r21)
   42054:	00c00044 	movi	r3,1
   42058:	008001c4 	movi	r2,7
   4205c:	a8c00115 	stw	r3,4(r21)
   42060:	dc800e15 	stw	r18,56(sp)
   42064:	dc400d15 	stw	r17,52(sp)
   42068:	1440ca16 	blt	r2,r17,42394 <___vfprintf_internal_r+0x1940>
   4206c:	a8c00204 	addi	r3,r21,8
   42070:	2000061e 	bne	r4,zero,4208c <___vfprintf_internal_r+0x1638>
   42074:	d9414717 	ldw	r5,1308(sp)
   42078:	2800041e 	bne	r5,zero,4208c <___vfprintf_internal_r+0x1638>
   4207c:	d9814c17 	ldw	r6,1328(sp)
   42080:	3080004c 	andi	r2,r6,1
   42084:	1005003a 	cmpeq	r2,r2,zero
   42088:	103bf01e 	bne	r2,zero,4104c <___vfprintf_internal_r+0x5f8>
   4208c:	00800044 	movi	r2,1
   42090:	dc400d17 	ldw	r17,52(sp)
   42094:	18800115 	stw	r2,4(r3)
   42098:	d8814917 	ldw	r2,1316(sp)
   4209c:	94800044 	addi	r18,r18,1
   420a0:	8c400044 	addi	r17,r17,1
   420a4:	18800015 	stw	r2,0(r3)
   420a8:	008001c4 	movi	r2,7
   420ac:	dc800e15 	stw	r18,56(sp)
   420b0:	dc400d15 	stw	r17,52(sp)
   420b4:	1440ca16 	blt	r2,r17,423e0 <___vfprintf_internal_r+0x198c>
   420b8:	18c00204 	addi	r3,r3,8
   420bc:	0121c83a 	sub	r16,zero,r4
   420c0:	0400500e 	bge	zero,r16,42204 <___vfprintf_internal_r+0x17b0>
   420c4:	00800404 	movi	r2,16
   420c8:	1400800e 	bge	r2,r16,422cc <___vfprintf_internal_r+0x1878>
   420cc:	1027883a 	mov	r19,r2
   420d0:	07100034 	movhi	fp,16384
   420d4:	e7002884 	addi	fp,fp,162
   420d8:	050001c4 	movi	r20,7
   420dc:	00000306 	br	420ec <___vfprintf_internal_r+0x1698>
   420e0:	18c00204 	addi	r3,r3,8
   420e4:	843ffc04 	addi	r16,r16,-16
   420e8:	9c007a0e 	bge	r19,r16,422d4 <___vfprintf_internal_r+0x1880>
   420ec:	94800404 	addi	r18,r18,16
   420f0:	8c400044 	addi	r17,r17,1
   420f4:	1f000015 	stw	fp,0(r3)
   420f8:	1cc00115 	stw	r19,4(r3)
   420fc:	dc800e15 	stw	r18,56(sp)
   42100:	dc400d15 	stw	r17,52(sp)
   42104:	a47ff60e 	bge	r20,r17,420e0 <___vfprintf_internal_r+0x168c>
   42108:	d9014f17 	ldw	r4,1340(sp)
   4210c:	b00b883a 	mov	r5,r22
   42110:	d9800c04 	addi	r6,sp,48
   42114:	00409fc0 	call	409fc <__sprint_r>
   42118:	103c061e 	bne	r2,zero,41134 <___vfprintf_internal_r+0x6e0>
   4211c:	dc800e17 	ldw	r18,56(sp)
   42120:	dc400d17 	ldw	r17,52(sp)
   42124:	d8c01904 	addi	r3,sp,100
   42128:	003fee06 	br	420e4 <___vfprintf_internal_r+0x1690>
   4212c:	3c000017 	ldw	r16,0(r7)
   42130:	0023883a 	mov	r17,zero
   42134:	39c00104 	addi	r7,r7,4
   42138:	d9c14015 	stw	r7,1280(sp)
   4213c:	003e9206 	br	41b88 <___vfprintf_internal_r+0x1134>
   42140:	d9401904 	addi	r5,sp,100
   42144:	dd000f04 	addi	r20,sp,60
   42148:	d9414115 	stw	r5,1284(sp)
   4214c:	d9814417 	ldw	r6,1296(sp)
   42150:	880a973a 	slli	r5,r17,28
   42154:	8004d13a 	srli	r2,r16,4
   42158:	810003cc 	andi	r4,r16,15
   4215c:	3109883a 	add	r4,r6,r4
   42160:	2884b03a 	or	r2,r5,r2
   42164:	21400003 	ldbu	r5,0(r4)
   42168:	d9014117 	ldw	r4,1284(sp)
   4216c:	8806d13a 	srli	r3,r17,4
   42170:	1021883a 	mov	r16,r2
   42174:	213fffc4 	addi	r4,r4,-1
   42178:	d9014115 	stw	r4,1284(sp)
   4217c:	d9814117 	ldw	r6,1284(sp)
   42180:	10c8b03a 	or	r4,r2,r3
   42184:	1823883a 	mov	r17,r3
   42188:	31400005 	stb	r5,0(r6)
   4218c:	203fef1e 	bne	r4,zero,4214c <___vfprintf_internal_r+0x16f8>
   42190:	003ccb06 	br	414c0 <___vfprintf_internal_r+0xa6c>
   42194:	00800c04 	movi	r2,48
   42198:	d98018c4 	addi	r6,sp,99
   4219c:	dd000f04 	addi	r20,sp,60
   421a0:	d88018c5 	stb	r2,99(sp)
   421a4:	d9814115 	stw	r6,1284(sp)
   421a8:	003cc506 	br	414c0 <___vfprintf_internal_r+0xa6c>
   421ac:	dc400d17 	ldw	r17,52(sp)
   421b0:	07100034 	movhi	fp,16384
   421b4:	e7002c84 	addi	fp,fp,178
   421b8:	003bc706 	br	410d8 <___vfprintf_internal_r+0x684>
   421bc:	d9414c17 	ldw	r5,1328(sp)
   421c0:	2880040c 	andi	r2,r5,16
   421c4:	10007c26 	beq	r2,zero,423b8 <___vfprintf_internal_r+0x1964>
   421c8:	38800017 	ldw	r2,0(r7)
   421cc:	39c00104 	addi	r7,r7,4
   421d0:	d9c14015 	stw	r7,1280(sp)
   421d4:	d9814b17 	ldw	r6,1324(sp)
   421d8:	d9c14017 	ldw	r7,1280(sp)
   421dc:	11800015 	stw	r6,0(r2)
   421e0:	003a7806 	br	40bc4 <___vfprintf_internal_r+0x170>
   421e4:	d9014f17 	ldw	r4,1340(sp)
   421e8:	b00b883a 	mov	r5,r22
   421ec:	d9800c04 	addi	r6,sp,48
   421f0:	00409fc0 	call	409fc <__sprint_r>
   421f4:	103bcf1e 	bne	r2,zero,41134 <___vfprintf_internal_r+0x6e0>
   421f8:	dc800e17 	ldw	r18,56(sp)
   421fc:	dc400d17 	ldw	r17,52(sp)
   42200:	d8c01904 	addi	r3,sp,100
   42204:	d9014717 	ldw	r4,1308(sp)
   42208:	d9414117 	ldw	r5,1284(sp)
   4220c:	8c400044 	addi	r17,r17,1
   42210:	9125883a 	add	r18,r18,r4
   42214:	008001c4 	movi	r2,7
   42218:	19400015 	stw	r5,0(r3)
   4221c:	19000115 	stw	r4,4(r3)
   42220:	dc800e15 	stw	r18,56(sp)
   42224:	dc400d15 	stw	r17,52(sp)
   42228:	147cee16 	blt	r2,r17,415e4 <___vfprintf_internal_r+0xb90>
   4222c:	18c00204 	addi	r3,r3,8
   42230:	003b8606 	br	4104c <___vfprintf_internal_r+0x5f8>
   42234:	38c00017 	ldw	r3,0(r7)
   42238:	39000204 	addi	r4,r7,8
   4223c:	d9014015 	stw	r4,1280(sp)
   42240:	d8c14215 	stw	r3,1288(sp)
   42244:	39c00117 	ldw	r7,4(r7)
   42248:	d9c14315 	stw	r7,1292(sp)
   4224c:	003e2006 	br	41ad0 <___vfprintf_internal_r+0x107c>
   42250:	0005883a 	mov	r2,zero
   42254:	1409c83a 	sub	r4,r2,r16
   42258:	1105803a 	cmpltu	r2,r2,r4
   4225c:	044bc83a 	sub	r5,zero,r17
   42260:	2885c83a 	sub	r2,r5,r2
   42264:	2021883a 	mov	r16,r4
   42268:	1023883a 	mov	r17,r2
   4226c:	01000044 	movi	r4,1
   42270:	00800b44 	movi	r2,45
   42274:	d8800405 	stb	r2,16(sp)
   42278:	003c8406 	br	4148c <___vfprintf_internal_r+0xa38>
   4227c:	d9014f17 	ldw	r4,1340(sp)
   42280:	b00b883a 	mov	r5,r22
   42284:	d9800c04 	addi	r6,sp,48
   42288:	00409fc0 	call	409fc <__sprint_r>
   4228c:	103ba91e 	bne	r2,zero,41134 <___vfprintf_internal_r+0x6e0>
   42290:	dc800e17 	ldw	r18,56(sp)
   42294:	dc400d17 	ldw	r17,52(sp)
   42298:	d9000517 	ldw	r4,20(sp)
   4229c:	d9401904 	addi	r5,sp,100
   422a0:	003da706 	br	41940 <___vfprintf_internal_r+0xeec>
   422a4:	d9014f17 	ldw	r4,1340(sp)
   422a8:	b00b883a 	mov	r5,r22
   422ac:	d9800c04 	addi	r6,sp,48
   422b0:	00409fc0 	call	409fc <__sprint_r>
   422b4:	103b9f1e 	bne	r2,zero,41134 <___vfprintf_internal_r+0x6e0>
   422b8:	dc800e17 	ldw	r18,56(sp)
   422bc:	dc400d17 	ldw	r17,52(sp)
   422c0:	d9000517 	ldw	r4,20(sp)
   422c4:	d8c01904 	addi	r3,sp,100
   422c8:	003d9106 	br	41910 <___vfprintf_internal_r+0xebc>
   422cc:	07100034 	movhi	fp,16384
   422d0:	e7002884 	addi	fp,fp,162
   422d4:	9425883a 	add	r18,r18,r16
   422d8:	8c400044 	addi	r17,r17,1
   422dc:	008001c4 	movi	r2,7
   422e0:	1f000015 	stw	fp,0(r3)
   422e4:	1c000115 	stw	r16,4(r3)
   422e8:	dc800e15 	stw	r18,56(sp)
   422ec:	dc400d15 	stw	r17,52(sp)
   422f0:	147fbc16 	blt	r2,r17,421e4 <___vfprintf_internal_r+0x1790>
   422f4:	18c00204 	addi	r3,r3,8
   422f8:	003fc206 	br	42204 <___vfprintf_internal_r+0x17b0>
   422fc:	d9014f17 	ldw	r4,1340(sp)
   42300:	b00b883a 	mov	r5,r22
   42304:	d9800c04 	addi	r6,sp,48
   42308:	00409fc0 	call	409fc <__sprint_r>
   4230c:	103b891e 	bne	r2,zero,41134 <___vfprintf_internal_r+0x6e0>
   42310:	dc800e17 	ldw	r18,56(sp)
   42314:	d9000517 	ldw	r4,20(sp)
   42318:	d8c01904 	addi	r3,sp,100
   4231c:	003d0206 	br	41728 <___vfprintf_internal_r+0xcd4>
   42320:	07100034 	movhi	fp,16384
   42324:	e7002884 	addi	fp,fp,162
   42328:	003be406 	br	412bc <___vfprintf_internal_r+0x868>
   4232c:	00900034 	movhi	r2,16384
   42330:	10801704 	addi	r2,r2,92
   42334:	d8814115 	stw	r2,1284(sp)
   42338:	003df506 	br	41b10 <___vfprintf_internal_r+0x10bc>
   4233c:	d9014217 	ldw	r4,1288(sp)
   42340:	d9414317 	ldw	r5,1292(sp)
   42344:	00474340 	call	47434 <__isnand>
   42348:	10003926 	beq	r2,zero,42430 <___vfprintf_internal_r+0x19dc>
   4234c:	d9414d17 	ldw	r5,1332(sp)
   42350:	008011c4 	movi	r2,71
   42354:	1140ce16 	blt	r2,r5,42690 <___vfprintf_internal_r+0x1c3c>
   42358:	01900034 	movhi	r6,16384
   4235c:	31801804 	addi	r6,r6,96
   42360:	d9814115 	stw	r6,1284(sp)
   42364:	003dea06 	br	41b10 <___vfprintf_internal_r+0x10bc>
   42368:	d9014c17 	ldw	r4,1328(sp)
   4236c:	bdc00044 	addi	r23,r23,1
   42370:	b8c00007 	ldb	r3,0(r23)
   42374:	21000814 	ori	r4,r4,32
   42378:	d9014c15 	stw	r4,1328(sp)
   4237c:	003a3406 	br	40c50 <___vfprintf_internal_r+0x1fc>
   42380:	dcc14515 	stw	r19,1300(sp)
   42384:	98011016 	blt	r19,zero,427c8 <___vfprintf_internal_r+0x1d74>
   42388:	980f883a 	mov	r7,r19
   4238c:	d8014615 	stw	zero,1304(sp)
   42390:	003c5206 	br	414dc <___vfprintf_internal_r+0xa88>
   42394:	d9014f17 	ldw	r4,1340(sp)
   42398:	b00b883a 	mov	r5,r22
   4239c:	d9800c04 	addi	r6,sp,48
   423a0:	00409fc0 	call	409fc <__sprint_r>
   423a4:	103b631e 	bne	r2,zero,41134 <___vfprintf_internal_r+0x6e0>
   423a8:	dc800e17 	ldw	r18,56(sp)
   423ac:	d9000517 	ldw	r4,20(sp)
   423b0:	d8c01904 	addi	r3,sp,100
   423b4:	003f2e06 	br	42070 <___vfprintf_internal_r+0x161c>
   423b8:	d8c14c17 	ldw	r3,1328(sp)
   423bc:	1880100c 	andi	r2,r3,64
   423c0:	1000a026 	beq	r2,zero,42644 <___vfprintf_internal_r+0x1bf0>
   423c4:	38800017 	ldw	r2,0(r7)
   423c8:	39c00104 	addi	r7,r7,4
   423cc:	d9c14015 	stw	r7,1280(sp)
   423d0:	d9014b17 	ldw	r4,1324(sp)
   423d4:	d9c14017 	ldw	r7,1280(sp)
   423d8:	1100000d 	sth	r4,0(r2)
   423dc:	0039f906 	br	40bc4 <___vfprintf_internal_r+0x170>
   423e0:	d9014f17 	ldw	r4,1340(sp)
   423e4:	b00b883a 	mov	r5,r22
   423e8:	d9800c04 	addi	r6,sp,48
   423ec:	00409fc0 	call	409fc <__sprint_r>
   423f0:	103b501e 	bne	r2,zero,41134 <___vfprintf_internal_r+0x6e0>
   423f4:	dc800e17 	ldw	r18,56(sp)
   423f8:	dc400d17 	ldw	r17,52(sp)
   423fc:	d9000517 	ldw	r4,20(sp)
   42400:	d8c01904 	addi	r3,sp,100
   42404:	003f2d06 	br	420bc <___vfprintf_internal_r+0x1668>
   42408:	00800184 	movi	r2,6
   4240c:	14c09a36 	bltu	r2,r19,42678 <___vfprintf_internal_r+0x1c24>
   42410:	dcc14515 	stw	r19,1300(sp)
   42414:	9800010e 	bge	r19,zero,4241c <___vfprintf_internal_r+0x19c8>
   42418:	d8014515 	stw	zero,1300(sp)
   4241c:	00900034 	movhi	r2,16384
   42420:	10801a04 	addi	r2,r2,104
   42424:	980f883a 	mov	r7,r19
   42428:	d8814115 	stw	r2,1284(sp)
   4242c:	003a7806 	br	40e10 <___vfprintf_internal_r+0x3bc>
   42430:	00bfffc4 	movi	r2,-1
   42434:	9880e226 	beq	r19,r2,427c0 <___vfprintf_internal_r+0x1d6c>
   42438:	d9414d17 	ldw	r5,1332(sp)
   4243c:	008019c4 	movi	r2,103
   42440:	2880dc26 	beq	r5,r2,427b4 <___vfprintf_internal_r+0x1d60>
   42444:	008011c4 	movi	r2,71
   42448:	2880da26 	beq	r5,r2,427b4 <___vfprintf_internal_r+0x1d60>
   4244c:	d9414c17 	ldw	r5,1328(sp)
   42450:	d9014317 	ldw	r4,1292(sp)
   42454:	d9814217 	ldw	r6,1288(sp)
   42458:	29404014 	ori	r5,r5,256
   4245c:	d9414c15 	stw	r5,1328(sp)
   42460:	2000cc16 	blt	r4,zero,42794 <___vfprintf_internal_r+0x1d40>
   42464:	3021883a 	mov	r16,r6
   42468:	2023883a 	mov	r17,r4
   4246c:	0039883a 	mov	fp,zero
   42470:	d9414d17 	ldw	r5,1332(sp)
   42474:	00801984 	movi	r2,102
   42478:	2880b726 	beq	r5,r2,42758 <___vfprintf_internal_r+0x1d04>
   4247c:	00801184 	movi	r2,70
   42480:	2880b526 	beq	r5,r2,42758 <___vfprintf_internal_r+0x1d04>
   42484:	00801944 	movi	r2,101
   42488:	2880c826 	beq	r5,r2,427ac <___vfprintf_internal_r+0x1d58>
   4248c:	00801144 	movi	r2,69
   42490:	2880c626 	beq	r5,r2,427ac <___vfprintf_internal_r+0x1d58>
   42494:	9829883a 	mov	r20,r19
   42498:	d9014f17 	ldw	r4,1340(sp)
   4249c:	d8800504 	addi	r2,sp,20
   424a0:	880d883a 	mov	r6,r17
   424a4:	d8800115 	stw	r2,4(sp)
   424a8:	d8c00604 	addi	r3,sp,24
   424ac:	d8800704 	addi	r2,sp,28
   424b0:	800b883a 	mov	r5,r16
   424b4:	01c00084 	movi	r7,2
   424b8:	d8c00215 	stw	r3,8(sp)
   424bc:	d8800315 	stw	r2,12(sp)
   424c0:	dd000015 	stw	r20,0(sp)
   424c4:	0042c780 	call	42c78 <_dtoa_r>
   424c8:	d9814d17 	ldw	r6,1332(sp)
   424cc:	d8814115 	stw	r2,1284(sp)
   424d0:	008019c4 	movi	r2,103
   424d4:	30809526 	beq	r6,r2,4272c <___vfprintf_internal_r+0x1cd8>
   424d8:	d8c14d17 	ldw	r3,1332(sp)
   424dc:	008011c4 	movi	r2,71
   424e0:	18809226 	beq	r3,r2,4272c <___vfprintf_internal_r+0x1cd8>
   424e4:	d9414117 	ldw	r5,1284(sp)
   424e8:	d9814d17 	ldw	r6,1332(sp)
   424ec:	00801984 	movi	r2,102
   424f0:	2d25883a 	add	r18,r5,r20
   424f4:	30808626 	beq	r6,r2,42710 <___vfprintf_internal_r+0x1cbc>
   424f8:	00801184 	movi	r2,70
   424fc:	30808426 	beq	r6,r2,42710 <___vfprintf_internal_r+0x1cbc>
   42500:	000d883a 	mov	r6,zero
   42504:	000f883a 	mov	r7,zero
   42508:	880b883a 	mov	r5,r17
   4250c:	8009883a 	mov	r4,r16
   42510:	004920c0 	call	4920c <__eqdf2>
   42514:	1000751e 	bne	r2,zero,426ec <___vfprintf_internal_r+0x1c98>
   42518:	9005883a 	mov	r2,r18
   4251c:	dc800715 	stw	r18,28(sp)
   42520:	d9014117 	ldw	r4,1284(sp)
   42524:	d9414d17 	ldw	r5,1332(sp)
   42528:	00c019c4 	movi	r3,103
   4252c:	1125c83a 	sub	r18,r2,r4
   42530:	28c06826 	beq	r5,r3,426d4 <___vfprintf_internal_r+0x1c80>
   42534:	008011c4 	movi	r2,71
   42538:	28806626 	beq	r5,r2,426d4 <___vfprintf_internal_r+0x1c80>
   4253c:	d9000517 	ldw	r4,20(sp)
   42540:	d8c14d17 	ldw	r3,1332(sp)
   42544:	00801944 	movi	r2,101
   42548:	10c05516 	blt	r2,r3,426a0 <___vfprintf_internal_r+0x1c4c>
   4254c:	213fffc4 	addi	r4,r4,-1
   42550:	d9000515 	stw	r4,20(sp)
   42554:	d8c00805 	stb	r3,32(sp)
   42558:	2021883a 	mov	r16,r4
   4255c:	2000c116 	blt	r4,zero,42864 <___vfprintf_internal_r+0x1e10>
   42560:	00800ac4 	movi	r2,43
   42564:	d8800845 	stb	r2,33(sp)
   42568:	00800244 	movi	r2,9
   4256c:	1400af0e 	bge	r2,r16,4282c <___vfprintf_internal_r+0x1dd8>
   42570:	1027883a 	mov	r19,r2
   42574:	dc400b84 	addi	r17,sp,46
   42578:	8009883a 	mov	r4,r16
   4257c:	01400284 	movi	r5,10
   42580:	00498f40 	call	498f4 <__modsi3>
   42584:	10800c04 	addi	r2,r2,48
   42588:	8c7fffc4 	addi	r17,r17,-1
   4258c:	8009883a 	mov	r4,r16
   42590:	01400284 	movi	r5,10
   42594:	88800005 	stb	r2,0(r17)
   42598:	00498940 	call	49894 <__divsi3>
   4259c:	1021883a 	mov	r16,r2
   425a0:	98bff516 	blt	r19,r2,42578 <___vfprintf_internal_r+0x1b24>
   425a4:	10c00c04 	addi	r3,r2,48
   425a8:	d88009c4 	addi	r2,sp,39
   425ac:	108001c4 	addi	r2,r2,7
   425b0:	897fffc4 	addi	r5,r17,-1
   425b4:	88ffffc5 	stb	r3,-1(r17)
   425b8:	2880a72e 	bgeu	r5,r2,42858 <___vfprintf_internal_r+0x1e04>
   425bc:	1009883a 	mov	r4,r2
   425c0:	d9800804 	addi	r6,sp,32
   425c4:	d8c00884 	addi	r3,sp,34
   425c8:	28800003 	ldbu	r2,0(r5)
   425cc:	29400044 	addi	r5,r5,1
   425d0:	18800005 	stb	r2,0(r3)
   425d4:	18c00044 	addi	r3,r3,1
   425d8:	293ffb36 	bltu	r5,r4,425c8 <___vfprintf_internal_r+0x1b74>
   425dc:	1987c83a 	sub	r3,r3,r6
   425e0:	00800044 	movi	r2,1
   425e4:	d8c14815 	stw	r3,1312(sp)
   425e8:	90cf883a 	add	r7,r18,r3
   425ec:	1480960e 	bge	r2,r18,42848 <___vfprintf_internal_r+0x1df4>
   425f0:	39c00044 	addi	r7,r7,1
   425f4:	d9c14515 	stw	r7,1300(sp)
   425f8:	38003416 	blt	r7,zero,426cc <___vfprintf_internal_r+0x1c78>
   425fc:	e0803fcc 	andi	r2,fp,255
   42600:	1080201c 	xori	r2,r2,128
   42604:	10bfe004 	addi	r2,r2,-128
   42608:	10004e26 	beq	r2,zero,42744 <___vfprintf_internal_r+0x1cf0>
   4260c:	00800b44 	movi	r2,45
   42610:	dc814715 	stw	r18,1308(sp)
   42614:	d8014615 	stw	zero,1304(sp)
   42618:	d8800405 	stb	r2,16(sp)
   4261c:	003bb106 	br	414e4 <___vfprintf_internal_r+0xa90>
   42620:	00800b44 	movi	r2,45
   42624:	d8800405 	stb	r2,16(sp)
   42628:	003d3306 	br	41af8 <___vfprintf_internal_r+0x10a4>
   4262c:	d9014f17 	ldw	r4,1340(sp)
   42630:	b00b883a 	mov	r5,r22
   42634:	d9800c04 	addi	r6,sp,48
   42638:	00409fc0 	call	409fc <__sprint_r>
   4263c:	103abd1e 	bne	r2,zero,41134 <___vfprintf_internal_r+0x6e0>
   42640:	003abb06 	br	41130 <___vfprintf_internal_r+0x6dc>
   42644:	38800017 	ldw	r2,0(r7)
   42648:	39c00104 	addi	r7,r7,4
   4264c:	d9c14015 	stw	r7,1280(sp)
   42650:	d9414b17 	ldw	r5,1324(sp)
   42654:	d9c14017 	ldw	r7,1280(sp)
   42658:	11400015 	stw	r5,0(r2)
   4265c:	00395906 	br	40bc4 <___vfprintf_internal_r+0x170>
   42660:	980f883a 	mov	r7,r19
   42664:	dcc14515 	stw	r19,1300(sp)
   42668:	d8014615 	stw	zero,1304(sp)
   4266c:	003b9b06 	br	414dc <___vfprintf_internal_r+0xa88>
   42670:	0027883a 	mov	r19,zero
   42674:	00397806 	br	40c58 <___vfprintf_internal_r+0x204>
   42678:	00d00034 	movhi	r3,16384
   4267c:	18c01a04 	addi	r3,r3,104
   42680:	100f883a 	mov	r7,r2
   42684:	d8814515 	stw	r2,1300(sp)
   42688:	d8c14115 	stw	r3,1284(sp)
   4268c:	0039e006 	br	40e10 <___vfprintf_internal_r+0x3bc>
   42690:	00900034 	movhi	r2,16384
   42694:	10801904 	addi	r2,r2,100
   42698:	d8814115 	stw	r2,1284(sp)
   4269c:	003d1c06 	br	41b10 <___vfprintf_internal_r+0x10bc>
   426a0:	d9414d17 	ldw	r5,1332(sp)
   426a4:	00801984 	movi	r2,102
   426a8:	28804926 	beq	r5,r2,427d0 <___vfprintf_internal_r+0x1d7c>
   426ac:	200f883a 	mov	r7,r4
   426b0:	24805716 	blt	r4,r18,42810 <___vfprintf_internal_r+0x1dbc>
   426b4:	d9414c17 	ldw	r5,1328(sp)
   426b8:	2880004c 	andi	r2,r5,1
   426bc:	10000126 	beq	r2,zero,426c4 <___vfprintf_internal_r+0x1c70>
   426c0:	21c00044 	addi	r7,r4,1
   426c4:	d9c14515 	stw	r7,1300(sp)
   426c8:	383fcc0e 	bge	r7,zero,425fc <___vfprintf_internal_r+0x1ba8>
   426cc:	d8014515 	stw	zero,1300(sp)
   426d0:	003fca06 	br	425fc <___vfprintf_internal_r+0x1ba8>
   426d4:	d9000517 	ldw	r4,20(sp)
   426d8:	00bfff04 	movi	r2,-4
   426dc:	1100480e 	bge	r2,r4,42800 <___vfprintf_internal_r+0x1dac>
   426e0:	99004716 	blt	r19,r4,42800 <___vfprintf_internal_r+0x1dac>
   426e4:	d8c14d15 	stw	r3,1332(sp)
   426e8:	003ff006 	br	426ac <___vfprintf_internal_r+0x1c58>
   426ec:	d8800717 	ldw	r2,28(sp)
   426f0:	14bf8b2e 	bgeu	r2,r18,42520 <___vfprintf_internal_r+0x1acc>
   426f4:	9007883a 	mov	r3,r18
   426f8:	01000c04 	movi	r4,48
   426fc:	11000005 	stb	r4,0(r2)
   42700:	10800044 	addi	r2,r2,1
   42704:	d8800715 	stw	r2,28(sp)
   42708:	18bffc1e 	bne	r3,r2,426fc <___vfprintf_internal_r+0x1ca8>
   4270c:	003f8406 	br	42520 <___vfprintf_internal_r+0x1acc>
   42710:	d8814117 	ldw	r2,1284(sp)
   42714:	10c00007 	ldb	r3,0(r2)
   42718:	00800c04 	movi	r2,48
   4271c:	18805b26 	beq	r3,r2,4288c <___vfprintf_internal_r+0x1e38>
   42720:	d9000517 	ldw	r4,20(sp)
   42724:	9125883a 	add	r18,r18,r4
   42728:	003f7506 	br	42500 <___vfprintf_internal_r+0x1aac>
   4272c:	d9014c17 	ldw	r4,1328(sp)
   42730:	2080004c 	andi	r2,r4,1
   42734:	1005003a 	cmpeq	r2,r2,zero
   42738:	103f6a26 	beq	r2,zero,424e4 <___vfprintf_internal_r+0x1a90>
   4273c:	d8800717 	ldw	r2,28(sp)
   42740:	003f7706 	br	42520 <___vfprintf_internal_r+0x1acc>
   42744:	d9c14515 	stw	r7,1300(sp)
   42748:	38004d16 	blt	r7,zero,42880 <___vfprintf_internal_r+0x1e2c>
   4274c:	dc814715 	stw	r18,1308(sp)
   42750:	d8014615 	stw	zero,1304(sp)
   42754:	003b6106 	br	414dc <___vfprintf_internal_r+0xa88>
   42758:	d9014f17 	ldw	r4,1340(sp)
   4275c:	d8800504 	addi	r2,sp,20
   42760:	d8800115 	stw	r2,4(sp)
   42764:	d8c00604 	addi	r3,sp,24
   42768:	d8800704 	addi	r2,sp,28
   4276c:	800b883a 	mov	r5,r16
   42770:	880d883a 	mov	r6,r17
   42774:	01c000c4 	movi	r7,3
   42778:	d8c00215 	stw	r3,8(sp)
   4277c:	d8800315 	stw	r2,12(sp)
   42780:	dcc00015 	stw	r19,0(sp)
   42784:	9829883a 	mov	r20,r19
   42788:	0042c780 	call	42c78 <_dtoa_r>
   4278c:	d8814115 	stw	r2,1284(sp)
   42790:	003f5106 	br	424d8 <___vfprintf_internal_r+0x1a84>
   42794:	d8c14217 	ldw	r3,1288(sp)
   42798:	d9014317 	ldw	r4,1292(sp)
   4279c:	07000b44 	movi	fp,45
   427a0:	1821883a 	mov	r16,r3
   427a4:	2460003c 	xorhi	r17,r4,32768
   427a8:	003f3106 	br	42470 <___vfprintf_internal_r+0x1a1c>
   427ac:	9d000044 	addi	r20,r19,1
   427b0:	003f3906 	br	42498 <___vfprintf_internal_r+0x1a44>
   427b4:	983f251e 	bne	r19,zero,4244c <___vfprintf_internal_r+0x19f8>
   427b8:	04c00044 	movi	r19,1
   427bc:	003f2306 	br	4244c <___vfprintf_internal_r+0x19f8>
   427c0:	04c00184 	movi	r19,6
   427c4:	003f2106 	br	4244c <___vfprintf_internal_r+0x19f8>
   427c8:	d8014515 	stw	zero,1300(sp)
   427cc:	003eee06 	br	42388 <___vfprintf_internal_r+0x1934>
   427d0:	200f883a 	mov	r7,r4
   427d4:	0100370e 	bge	zero,r4,428b4 <___vfprintf_internal_r+0x1e60>
   427d8:	9800031e 	bne	r19,zero,427e8 <___vfprintf_internal_r+0x1d94>
   427dc:	d9814c17 	ldw	r6,1328(sp)
   427e0:	3080004c 	andi	r2,r6,1
   427e4:	103fb726 	beq	r2,zero,426c4 <___vfprintf_internal_r+0x1c70>
   427e8:	20800044 	addi	r2,r4,1
   427ec:	98a7883a 	add	r19,r19,r2
   427f0:	dcc14515 	stw	r19,1300(sp)
   427f4:	980f883a 	mov	r7,r19
   427f8:	983f800e 	bge	r19,zero,425fc <___vfprintf_internal_r+0x1ba8>
   427fc:	003fb306 	br	426cc <___vfprintf_internal_r+0x1c78>
   42800:	d9814d17 	ldw	r6,1332(sp)
   42804:	31bfff84 	addi	r6,r6,-2
   42808:	d9814d15 	stw	r6,1332(sp)
   4280c:	003f4c06 	br	42540 <___vfprintf_internal_r+0x1aec>
   42810:	0100180e 	bge	zero,r4,42874 <___vfprintf_internal_r+0x1e20>
   42814:	00800044 	movi	r2,1
   42818:	1485883a 	add	r2,r2,r18
   4281c:	d8814515 	stw	r2,1300(sp)
   42820:	100f883a 	mov	r7,r2
   42824:	103f750e 	bge	r2,zero,425fc <___vfprintf_internal_r+0x1ba8>
   42828:	003fa806 	br	426cc <___vfprintf_internal_r+0x1c78>
   4282c:	80c00c04 	addi	r3,r16,48
   42830:	00800c04 	movi	r2,48
   42834:	d8c008c5 	stb	r3,35(sp)
   42838:	d9800804 	addi	r6,sp,32
   4283c:	d8c00904 	addi	r3,sp,36
   42840:	d8800885 	stb	r2,34(sp)
   42844:	003f6506 	br	425dc <___vfprintf_internal_r+0x1b88>
   42848:	d9014c17 	ldw	r4,1328(sp)
   4284c:	2084703a 	and	r2,r4,r2
   42850:	103f9c26 	beq	r2,zero,426c4 <___vfprintf_internal_r+0x1c70>
   42854:	003f6606 	br	425f0 <___vfprintf_internal_r+0x1b9c>
   42858:	d9800804 	addi	r6,sp,32
   4285c:	d8c00884 	addi	r3,sp,34
   42860:	003f5e06 	br	425dc <___vfprintf_internal_r+0x1b88>
   42864:	00800b44 	movi	r2,45
   42868:	0121c83a 	sub	r16,zero,r4
   4286c:	d8800845 	stb	r2,33(sp)
   42870:	003f3d06 	br	42568 <___vfprintf_internal_r+0x1b14>
   42874:	00800084 	movi	r2,2
   42878:	1105c83a 	sub	r2,r2,r4
   4287c:	003fe606 	br	42818 <___vfprintf_internal_r+0x1dc4>
   42880:	d8014515 	stw	zero,1300(sp)
   42884:	dc814715 	stw	r18,1308(sp)
   42888:	003fb106 	br	42750 <___vfprintf_internal_r+0x1cfc>
   4288c:	000d883a 	mov	r6,zero
   42890:	000f883a 	mov	r7,zero
   42894:	8009883a 	mov	r4,r16
   42898:	880b883a 	mov	r5,r17
   4289c:	00492940 	call	49294 <__nedf2>
   428a0:	103f9f26 	beq	r2,zero,42720 <___vfprintf_internal_r+0x1ccc>
   428a4:	00800044 	movi	r2,1
   428a8:	1509c83a 	sub	r4,r2,r20
   428ac:	d9000515 	stw	r4,20(sp)
   428b0:	003f9b06 	br	42720 <___vfprintf_internal_r+0x1ccc>
   428b4:	98000d1e 	bne	r19,zero,428ec <___vfprintf_internal_r+0x1e98>
   428b8:	d8c14c17 	ldw	r3,1328(sp)
   428bc:	1880004c 	andi	r2,r3,1
   428c0:	10000a1e 	bne	r2,zero,428ec <___vfprintf_internal_r+0x1e98>
   428c4:	01000044 	movi	r4,1
   428c8:	200f883a 	mov	r7,r4
   428cc:	d9014515 	stw	r4,1300(sp)
   428d0:	003f4a06 	br	425fc <___vfprintf_internal_r+0x1ba8>
   428d4:	3cc00017 	ldw	r19,0(r7)
   428d8:	39c00104 	addi	r7,r7,4
   428dc:	983d0e0e 	bge	r19,zero,41d18 <___vfprintf_internal_r+0x12c4>
   428e0:	b8c00007 	ldb	r3,0(r23)
   428e4:	04ffffc4 	movi	r19,-1
   428e8:	0038d906 	br	40c50 <___vfprintf_internal_r+0x1fc>
   428ec:	9cc00084 	addi	r19,r19,2
   428f0:	dcc14515 	stw	r19,1300(sp)
   428f4:	980f883a 	mov	r7,r19
   428f8:	983f400e 	bge	r19,zero,425fc <___vfprintf_internal_r+0x1ba8>
   428fc:	003f7306 	br	426cc <___vfprintf_internal_r+0x1c78>

00042900 <__vfprintf_internal>:
   42900:	00900034 	movhi	r2,16384
   42904:	10876604 	addi	r2,r2,7576
   42908:	2013883a 	mov	r9,r4
   4290c:	11000017 	ldw	r4,0(r2)
   42910:	2805883a 	mov	r2,r5
   42914:	300f883a 	mov	r7,r6
   42918:	480b883a 	mov	r5,r9
   4291c:	100d883a 	mov	r6,r2
   42920:	0040a541 	jmpi	40a54 <___vfprintf_internal_r>

00042924 <__swsetup_r>:
   42924:	00900034 	movhi	r2,16384
   42928:	10876604 	addi	r2,r2,7576
   4292c:	10c00017 	ldw	r3,0(r2)
   42930:	defffd04 	addi	sp,sp,-12
   42934:	dc400115 	stw	r17,4(sp)
   42938:	dc000015 	stw	r16,0(sp)
   4293c:	dfc00215 	stw	ra,8(sp)
   42940:	2023883a 	mov	r17,r4
   42944:	2821883a 	mov	r16,r5
   42948:	18000226 	beq	r3,zero,42954 <__swsetup_r+0x30>
   4294c:	18800e17 	ldw	r2,56(r3)
   42950:	10001f26 	beq	r2,zero,429d0 <__swsetup_r+0xac>
   42954:	8100030b 	ldhu	r4,12(r16)
   42958:	2080020c 	andi	r2,r4,8
   4295c:	10002826 	beq	r2,zero,42a00 <__swsetup_r+0xdc>
   42960:	81400417 	ldw	r5,16(r16)
   42964:	28001d26 	beq	r5,zero,429dc <__swsetup_r+0xb8>
   42968:	2080004c 	andi	r2,r4,1
   4296c:	1005003a 	cmpeq	r2,r2,zero
   42970:	10000b26 	beq	r2,zero,429a0 <__swsetup_r+0x7c>
   42974:	2080008c 	andi	r2,r4,2
   42978:	10001226 	beq	r2,zero,429c4 <__swsetup_r+0xa0>
   4297c:	0005883a 	mov	r2,zero
   42980:	80800215 	stw	r2,8(r16)
   42984:	28000b26 	beq	r5,zero,429b4 <__swsetup_r+0x90>
   42988:	0005883a 	mov	r2,zero
   4298c:	dfc00217 	ldw	ra,8(sp)
   42990:	dc400117 	ldw	r17,4(sp)
   42994:	dc000017 	ldw	r16,0(sp)
   42998:	dec00304 	addi	sp,sp,12
   4299c:	f800283a 	ret
   429a0:	80800517 	ldw	r2,20(r16)
   429a4:	80000215 	stw	zero,8(r16)
   429a8:	0085c83a 	sub	r2,zero,r2
   429ac:	80800615 	stw	r2,24(r16)
   429b0:	283ff51e 	bne	r5,zero,42988 <__swsetup_r+0x64>
   429b4:	2080200c 	andi	r2,r4,128
   429b8:	103ff326 	beq	r2,zero,42988 <__swsetup_r+0x64>
   429bc:	00bfffc4 	movi	r2,-1
   429c0:	003ff206 	br	4298c <__swsetup_r+0x68>
   429c4:	80800517 	ldw	r2,20(r16)
   429c8:	80800215 	stw	r2,8(r16)
   429cc:	003fed06 	br	42984 <__swsetup_r+0x60>
   429d0:	1809883a 	mov	r4,r3
   429d4:	00444c40 	call	444c4 <__sinit>
   429d8:	003fde06 	br	42954 <__swsetup_r+0x30>
   429dc:	20c0a00c 	andi	r3,r4,640
   429e0:	00808004 	movi	r2,512
   429e4:	18bfe026 	beq	r3,r2,42968 <__swsetup_r+0x44>
   429e8:	8809883a 	mov	r4,r17
   429ec:	800b883a 	mov	r5,r16
   429f0:	004523c0 	call	4523c <__smakebuf_r>
   429f4:	8100030b 	ldhu	r4,12(r16)
   429f8:	81400417 	ldw	r5,16(r16)
   429fc:	003fda06 	br	42968 <__swsetup_r+0x44>
   42a00:	2080040c 	andi	r2,r4,16
   42a04:	103fed26 	beq	r2,zero,429bc <__swsetup_r+0x98>
   42a08:	2080010c 	andi	r2,r4,4
   42a0c:	10001226 	beq	r2,zero,42a58 <__swsetup_r+0x134>
   42a10:	81400c17 	ldw	r5,48(r16)
   42a14:	28000526 	beq	r5,zero,42a2c <__swsetup_r+0x108>
   42a18:	80801004 	addi	r2,r16,64
   42a1c:	28800226 	beq	r5,r2,42a28 <__swsetup_r+0x104>
   42a20:	8809883a 	mov	r4,r17
   42a24:	00448480 	call	44848 <_free_r>
   42a28:	80000c15 	stw	zero,48(r16)
   42a2c:	8080030b 	ldhu	r2,12(r16)
   42a30:	81400417 	ldw	r5,16(r16)
   42a34:	80000115 	stw	zero,4(r16)
   42a38:	10bff6cc 	andi	r2,r2,65499
   42a3c:	8080030d 	sth	r2,12(r16)
   42a40:	81400015 	stw	r5,0(r16)
   42a44:	8080030b 	ldhu	r2,12(r16)
   42a48:	10800214 	ori	r2,r2,8
   42a4c:	113fffcc 	andi	r4,r2,65535
   42a50:	8080030d 	sth	r2,12(r16)
   42a54:	003fc306 	br	42964 <__swsetup_r+0x40>
   42a58:	81400417 	ldw	r5,16(r16)
   42a5c:	003ff906 	br	42a44 <__swsetup_r+0x120>

00042a60 <quorem>:
   42a60:	28c00417 	ldw	r3,16(r5)
   42a64:	20800417 	ldw	r2,16(r4)
   42a68:	defff604 	addi	sp,sp,-40
   42a6c:	ddc00715 	stw	r23,28(sp)
   42a70:	dd400515 	stw	r21,20(sp)
   42a74:	dfc00915 	stw	ra,36(sp)
   42a78:	df000815 	stw	fp,32(sp)
   42a7c:	dd800615 	stw	r22,24(sp)
   42a80:	dd000415 	stw	r20,16(sp)
   42a84:	dcc00315 	stw	r19,12(sp)
   42a88:	dc800215 	stw	r18,8(sp)
   42a8c:	dc400115 	stw	r17,4(sp)
   42a90:	dc000015 	stw	r16,0(sp)
   42a94:	202f883a 	mov	r23,r4
   42a98:	282b883a 	mov	r21,r5
   42a9c:	10c07416 	blt	r2,r3,42c70 <quorem+0x210>
   42aa0:	1c7fffc4 	addi	r17,r3,-1
   42aa4:	8c45883a 	add	r2,r17,r17
   42aa8:	1085883a 	add	r2,r2,r2
   42aac:	2c000504 	addi	r16,r5,20
   42ab0:	24c00504 	addi	r19,r4,20
   42ab4:	14ed883a 	add	r22,r2,r19
   42ab8:	80a5883a 	add	r18,r16,r2
   42abc:	b7000017 	ldw	fp,0(r22)
   42ac0:	91400017 	ldw	r5,0(r18)
   42ac4:	e009883a 	mov	r4,fp
   42ac8:	29400044 	addi	r5,r5,1
   42acc:	00499540 	call	49954 <__udivsi3>
   42ad0:	1029883a 	mov	r20,r2
   42ad4:	10003c1e 	bne	r2,zero,42bc8 <quorem+0x168>
   42ad8:	a80b883a 	mov	r5,r21
   42adc:	b809883a 	mov	r4,r23
   42ae0:	0045f680 	call	45f68 <__mcmp>
   42ae4:	10002b16 	blt	r2,zero,42b94 <quorem+0x134>
   42ae8:	a5000044 	addi	r20,r20,1
   42aec:	980f883a 	mov	r7,r19
   42af0:	0011883a 	mov	r8,zero
   42af4:	0009883a 	mov	r4,zero
   42af8:	81400017 	ldw	r5,0(r16)
   42afc:	38c00017 	ldw	r3,0(r7)
   42b00:	84000104 	addi	r16,r16,4
   42b04:	28bfffcc 	andi	r2,r5,65535
   42b08:	2085883a 	add	r2,r4,r2
   42b0c:	11bfffcc 	andi	r6,r2,65535
   42b10:	193fffcc 	andi	r4,r3,65535
   42b14:	1004d43a 	srli	r2,r2,16
   42b18:	280ad43a 	srli	r5,r5,16
   42b1c:	2189c83a 	sub	r4,r4,r6
   42b20:	2209883a 	add	r4,r4,r8
   42b24:	1806d43a 	srli	r3,r3,16
   42b28:	288b883a 	add	r5,r5,r2
   42b2c:	200dd43a 	srai	r6,r4,16
   42b30:	28bfffcc 	andi	r2,r5,65535
   42b34:	1887c83a 	sub	r3,r3,r2
   42b38:	1987883a 	add	r3,r3,r6
   42b3c:	3900000d 	sth	r4,0(r7)
   42b40:	38c0008d 	sth	r3,2(r7)
   42b44:	2808d43a 	srli	r4,r5,16
   42b48:	39c00104 	addi	r7,r7,4
   42b4c:	1811d43a 	srai	r8,r3,16
   42b50:	943fe92e 	bgeu	r18,r16,42af8 <quorem+0x98>
   42b54:	8c45883a 	add	r2,r17,r17
   42b58:	1085883a 	add	r2,r2,r2
   42b5c:	9885883a 	add	r2,r19,r2
   42b60:	10c00017 	ldw	r3,0(r2)
   42b64:	18000b1e 	bne	r3,zero,42b94 <quorem+0x134>
   42b68:	113fff04 	addi	r4,r2,-4
   42b6c:	9900082e 	bgeu	r19,r4,42b90 <quorem+0x130>
   42b70:	10bfff17 	ldw	r2,-4(r2)
   42b74:	10000326 	beq	r2,zero,42b84 <quorem+0x124>
   42b78:	00000506 	br	42b90 <quorem+0x130>
   42b7c:	20800017 	ldw	r2,0(r4)
   42b80:	1000031e 	bne	r2,zero,42b90 <quorem+0x130>
   42b84:	213fff04 	addi	r4,r4,-4
   42b88:	8c7fffc4 	addi	r17,r17,-1
   42b8c:	993ffb36 	bltu	r19,r4,42b7c <quorem+0x11c>
   42b90:	bc400415 	stw	r17,16(r23)
   42b94:	a005883a 	mov	r2,r20
   42b98:	dfc00917 	ldw	ra,36(sp)
   42b9c:	df000817 	ldw	fp,32(sp)
   42ba0:	ddc00717 	ldw	r23,28(sp)
   42ba4:	dd800617 	ldw	r22,24(sp)
   42ba8:	dd400517 	ldw	r21,20(sp)
   42bac:	dd000417 	ldw	r20,16(sp)
   42bb0:	dcc00317 	ldw	r19,12(sp)
   42bb4:	dc800217 	ldw	r18,8(sp)
   42bb8:	dc400117 	ldw	r17,4(sp)
   42bbc:	dc000017 	ldw	r16,0(sp)
   42bc0:	dec00a04 	addi	sp,sp,40
   42bc4:	f800283a 	ret
   42bc8:	980f883a 	mov	r7,r19
   42bcc:	8011883a 	mov	r8,r16
   42bd0:	0013883a 	mov	r9,zero
   42bd4:	000d883a 	mov	r6,zero
   42bd8:	40c00017 	ldw	r3,0(r8)
   42bdc:	39000017 	ldw	r4,0(r7)
   42be0:	42000104 	addi	r8,r8,4
   42be4:	18bfffcc 	andi	r2,r3,65535
   42be8:	a085383a 	mul	r2,r20,r2
   42bec:	1806d43a 	srli	r3,r3,16
   42bf0:	217fffcc 	andi	r5,r4,65535
   42bf4:	3085883a 	add	r2,r6,r2
   42bf8:	11bfffcc 	andi	r6,r2,65535
   42bfc:	a0c7383a 	mul	r3,r20,r3
   42c00:	1004d43a 	srli	r2,r2,16
   42c04:	298bc83a 	sub	r5,r5,r6
   42c08:	2a4b883a 	add	r5,r5,r9
   42c0c:	2008d43a 	srli	r4,r4,16
   42c10:	1887883a 	add	r3,r3,r2
   42c14:	280dd43a 	srai	r6,r5,16
   42c18:	18bfffcc 	andi	r2,r3,65535
   42c1c:	2089c83a 	sub	r4,r4,r2
   42c20:	2189883a 	add	r4,r4,r6
   42c24:	3900008d 	sth	r4,2(r7)
   42c28:	3940000d 	sth	r5,0(r7)
   42c2c:	180cd43a 	srli	r6,r3,16
   42c30:	39c00104 	addi	r7,r7,4
   42c34:	2013d43a 	srai	r9,r4,16
   42c38:	923fe72e 	bgeu	r18,r8,42bd8 <quorem+0x178>
   42c3c:	e03fa61e 	bne	fp,zero,42ad8 <quorem+0x78>
   42c40:	b0ffff04 	addi	r3,r22,-4
   42c44:	98c0082e 	bgeu	r19,r3,42c68 <quorem+0x208>
   42c48:	b0bfff17 	ldw	r2,-4(r22)
   42c4c:	10000326 	beq	r2,zero,42c5c <quorem+0x1fc>
   42c50:	00000506 	br	42c68 <quorem+0x208>
   42c54:	18800017 	ldw	r2,0(r3)
   42c58:	1000031e 	bne	r2,zero,42c68 <quorem+0x208>
   42c5c:	18ffff04 	addi	r3,r3,-4
   42c60:	8c7fffc4 	addi	r17,r17,-1
   42c64:	98fffb36 	bltu	r19,r3,42c54 <quorem+0x1f4>
   42c68:	bc400415 	stw	r17,16(r23)
   42c6c:	003f9a06 	br	42ad8 <quorem+0x78>
   42c70:	0005883a 	mov	r2,zero
   42c74:	003fc806 	br	42b98 <quorem+0x138>

00042c78 <_dtoa_r>:
   42c78:	22001017 	ldw	r8,64(r4)
   42c7c:	deffda04 	addi	sp,sp,-152
   42c80:	dd402115 	stw	r21,132(sp)
   42c84:	dd002015 	stw	r20,128(sp)
   42c88:	dc801e15 	stw	r18,120(sp)
   42c8c:	dc401d15 	stw	r17,116(sp)
   42c90:	dfc02515 	stw	ra,148(sp)
   42c94:	df002415 	stw	fp,144(sp)
   42c98:	ddc02315 	stw	r23,140(sp)
   42c9c:	dd802215 	stw	r22,136(sp)
   42ca0:	dcc01f15 	stw	r19,124(sp)
   42ca4:	dc001c15 	stw	r16,112(sp)
   42ca8:	d9001615 	stw	r4,88(sp)
   42cac:	3023883a 	mov	r17,r6
   42cb0:	2829883a 	mov	r20,r5
   42cb4:	d9c01715 	stw	r7,92(sp)
   42cb8:	dc802817 	ldw	r18,160(sp)
   42cbc:	302b883a 	mov	r21,r6
   42cc0:	40000a26 	beq	r8,zero,42cec <_dtoa_r+0x74>
   42cc4:	20801117 	ldw	r2,68(r4)
   42cc8:	400b883a 	mov	r5,r8
   42ccc:	40800115 	stw	r2,4(r8)
   42cd0:	20c01117 	ldw	r3,68(r4)
   42cd4:	00800044 	movi	r2,1
   42cd8:	10c4983a 	sll	r2,r2,r3
   42cdc:	40800215 	stw	r2,8(r8)
   42ce0:	0045e0c0 	call	45e0c <_Bfree>
   42ce4:	d8c01617 	ldw	r3,88(sp)
   42ce8:	18001015 	stw	zero,64(r3)
   42cec:	8800a316 	blt	r17,zero,42f7c <_dtoa_r+0x304>
   42cf0:	90000015 	stw	zero,0(r18)
   42cf4:	a8dffc2c 	andhi	r3,r21,32752
   42cf8:	009ffc34 	movhi	r2,32752
   42cfc:	18809126 	beq	r3,r2,42f44 <_dtoa_r+0x2cc>
   42d00:	000d883a 	mov	r6,zero
   42d04:	000f883a 	mov	r7,zero
   42d08:	a009883a 	mov	r4,r20
   42d0c:	a80b883a 	mov	r5,r21
   42d10:	dd001215 	stw	r20,72(sp)
   42d14:	dd401315 	stw	r21,76(sp)
   42d18:	00492940 	call	49294 <__nedf2>
   42d1c:	1000171e 	bne	r2,zero,42d7c <_dtoa_r+0x104>
   42d20:	d9802717 	ldw	r6,156(sp)
   42d24:	00800044 	movi	r2,1
   42d28:	30800015 	stw	r2,0(r6)
   42d2c:	d8802917 	ldw	r2,164(sp)
   42d30:	10029b26 	beq	r2,zero,437a0 <_dtoa_r+0xb28>
   42d34:	d9002917 	ldw	r4,164(sp)
   42d38:	00900034 	movhi	r2,16384
   42d3c:	10802844 	addi	r2,r2,161
   42d40:	10ffffc4 	addi	r3,r2,-1
   42d44:	20800015 	stw	r2,0(r4)
   42d48:	1805883a 	mov	r2,r3
   42d4c:	dfc02517 	ldw	ra,148(sp)
   42d50:	df002417 	ldw	fp,144(sp)
   42d54:	ddc02317 	ldw	r23,140(sp)
   42d58:	dd802217 	ldw	r22,136(sp)
   42d5c:	dd402117 	ldw	r21,132(sp)
   42d60:	dd002017 	ldw	r20,128(sp)
   42d64:	dcc01f17 	ldw	r19,124(sp)
   42d68:	dc801e17 	ldw	r18,120(sp)
   42d6c:	dc401d17 	ldw	r17,116(sp)
   42d70:	dc001c17 	ldw	r16,112(sp)
   42d74:	dec02604 	addi	sp,sp,152
   42d78:	f800283a 	ret
   42d7c:	d9001617 	ldw	r4,88(sp)
   42d80:	d9401217 	ldw	r5,72(sp)
   42d84:	d8800104 	addi	r2,sp,4
   42d88:	a80d883a 	mov	r6,r21
   42d8c:	d9c00204 	addi	r7,sp,8
   42d90:	d8800015 	stw	r2,0(sp)
   42d94:	00464480 	call	46448 <__d2b>
   42d98:	d8800715 	stw	r2,28(sp)
   42d9c:	a804d53a 	srli	r2,r21,20
   42da0:	1101ffcc 	andi	r4,r2,2047
   42da4:	20008626 	beq	r4,zero,42fc0 <_dtoa_r+0x348>
   42da8:	d8c01217 	ldw	r3,72(sp)
   42dac:	00800434 	movhi	r2,16
   42db0:	10bfffc4 	addi	r2,r2,-1
   42db4:	ddc00117 	ldw	r23,4(sp)
   42db8:	a884703a 	and	r2,r21,r2
   42dbc:	1811883a 	mov	r8,r3
   42dc0:	124ffc34 	orhi	r9,r2,16368
   42dc4:	25bf0044 	addi	r22,r4,-1023
   42dc8:	d8000815 	stw	zero,32(sp)
   42dcc:	0005883a 	mov	r2,zero
   42dd0:	00cffe34 	movhi	r3,16376
   42dd4:	480b883a 	mov	r5,r9
   42dd8:	4009883a 	mov	r4,r8
   42ddc:	180f883a 	mov	r7,r3
   42de0:	100d883a 	mov	r6,r2
   42de4:	0048b0c0 	call	48b0c <__subdf3>
   42de8:	0218dbf4 	movhi	r8,25455
   42dec:	4210d844 	addi	r8,r8,17249
   42df0:	024ff4f4 	movhi	r9,16339
   42df4:	4a61e9c4 	addi	r9,r9,-30809
   42df8:	480f883a 	mov	r7,r9
   42dfc:	400d883a 	mov	r6,r8
   42e00:	180b883a 	mov	r5,r3
   42e04:	1009883a 	mov	r4,r2
   42e08:	0048c000 	call	48c00 <__muldf3>
   42e0c:	0222d874 	movhi	r8,35681
   42e10:	42322cc4 	addi	r8,r8,-14157
   42e14:	024ff1f4 	movhi	r9,16327
   42e18:	4a628a04 	addi	r9,r9,-30168
   42e1c:	480f883a 	mov	r7,r9
   42e20:	400d883a 	mov	r6,r8
   42e24:	180b883a 	mov	r5,r3
   42e28:	1009883a 	mov	r4,r2
   42e2c:	0048b8c0 	call	48b8c <__adddf3>
   42e30:	b009883a 	mov	r4,r22
   42e34:	1021883a 	mov	r16,r2
   42e38:	1823883a 	mov	r17,r3
   42e3c:	00494b40 	call	494b4 <__floatsidf>
   42e40:	021427f4 	movhi	r8,20639
   42e44:	421e7ec4 	addi	r8,r8,31227
   42e48:	024ff4f4 	movhi	r9,16339
   42e4c:	4a5104c4 	addi	r9,r9,17427
   42e50:	480f883a 	mov	r7,r9
   42e54:	400d883a 	mov	r6,r8
   42e58:	180b883a 	mov	r5,r3
   42e5c:	1009883a 	mov	r4,r2
   42e60:	0048c000 	call	48c00 <__muldf3>
   42e64:	180f883a 	mov	r7,r3
   42e68:	880b883a 	mov	r5,r17
   42e6c:	100d883a 	mov	r6,r2
   42e70:	8009883a 	mov	r4,r16
   42e74:	0048b8c0 	call	48b8c <__adddf3>
   42e78:	1009883a 	mov	r4,r2
   42e7c:	180b883a 	mov	r5,r3
   42e80:	1021883a 	mov	r16,r2
   42e84:	1823883a 	mov	r17,r3
   42e88:	00495ac0 	call	495ac <__fixdfsi>
   42e8c:	000d883a 	mov	r6,zero
   42e90:	000f883a 	mov	r7,zero
   42e94:	8009883a 	mov	r4,r16
   42e98:	880b883a 	mov	r5,r17
   42e9c:	d8800d15 	stw	r2,52(sp)
   42ea0:	004942c0 	call	4942c <__ltdf2>
   42ea4:	10031716 	blt	r2,zero,43b04 <_dtoa_r+0xe8c>
   42ea8:	d8c00d17 	ldw	r3,52(sp)
   42eac:	00800584 	movi	r2,22
   42eb0:	10c1482e 	bgeu	r2,r3,433d4 <_dtoa_r+0x75c>
   42eb4:	01000044 	movi	r4,1
   42eb8:	d9000c15 	stw	r4,48(sp)
   42ebc:	bd85c83a 	sub	r2,r23,r22
   42ec0:	11bfffc4 	addi	r6,r2,-1
   42ec4:	30030b16 	blt	r6,zero,43af4 <_dtoa_r+0xe7c>
   42ec8:	d9800a15 	stw	r6,40(sp)
   42ecc:	d8001115 	stw	zero,68(sp)
   42ed0:	d8c00d17 	ldw	r3,52(sp)
   42ed4:	1802ff16 	blt	r3,zero,43ad4 <_dtoa_r+0xe5c>
   42ed8:	d9000a17 	ldw	r4,40(sp)
   42edc:	d8c00915 	stw	r3,36(sp)
   42ee0:	d8001015 	stw	zero,64(sp)
   42ee4:	20c9883a 	add	r4,r4,r3
   42ee8:	d9000a15 	stw	r4,40(sp)
   42eec:	d9001717 	ldw	r4,92(sp)
   42ef0:	00800244 	movi	r2,9
   42ef4:	11004636 	bltu	r2,r4,43010 <_dtoa_r+0x398>
   42ef8:	00800144 	movi	r2,5
   42efc:	11020416 	blt	r2,r4,43710 <_dtoa_r+0xa98>
   42f00:	04400044 	movi	r17,1
   42f04:	d8c01717 	ldw	r3,92(sp)
   42f08:	00800144 	movi	r2,5
   42f0c:	10c1ed36 	bltu	r2,r3,436c4 <_dtoa_r+0xa4c>
   42f10:	18c5883a 	add	r2,r3,r3
   42f14:	1085883a 	add	r2,r2,r2
   42f18:	00c00134 	movhi	r3,4
   42f1c:	18cbcb04 	addi	r3,r3,12076
   42f20:	10c5883a 	add	r2,r2,r3
   42f24:	11000017 	ldw	r4,0(r2)
   42f28:	2000683a 	jmp	r4
   42f2c:	00043018 	cmpnei	zero,zero,4288
   42f30:	00043018 	cmpnei	zero,zero,4288
   42f34:	00043a18 	cmpnei	zero,zero,4328
   42f38:	000439f0 	cmpltui	zero,zero,4327
   42f3c:	00043a34 	movhi	zero,4328
   42f40:	00043a40 	call	43a4 <__reset-0x3bc5c>
   42f44:	d9002717 	ldw	r4,156(sp)
   42f48:	0089c3c4 	movi	r2,9999
   42f4c:	20800015 	stw	r2,0(r4)
   42f50:	a0001026 	beq	r20,zero,42f94 <_dtoa_r+0x31c>
   42f54:	00d00034 	movhi	r3,16384
   42f58:	18c03404 	addi	r3,r3,208
   42f5c:	d9802917 	ldw	r6,164(sp)
   42f60:	303f7926 	beq	r6,zero,42d48 <_dtoa_r+0xd0>
   42f64:	188000c7 	ldb	r2,3(r3)
   42f68:	190000c4 	addi	r4,r3,3
   42f6c:	1000101e 	bne	r2,zero,42fb0 <_dtoa_r+0x338>
   42f70:	d8802917 	ldw	r2,164(sp)
   42f74:	11000015 	stw	r4,0(r2)
   42f78:	003f7306 	br	42d48 <_dtoa_r+0xd0>
   42f7c:	00a00034 	movhi	r2,32768
   42f80:	10bfffc4 	addi	r2,r2,-1
   42f84:	00c00044 	movi	r3,1
   42f88:	88aa703a 	and	r21,r17,r2
   42f8c:	90c00015 	stw	r3,0(r18)
   42f90:	003f5806 	br	42cf4 <_dtoa_r+0x7c>
   42f94:	00800434 	movhi	r2,16
   42f98:	10bfffc4 	addi	r2,r2,-1
   42f9c:	a884703a 	and	r2,r21,r2
   42fa0:	103fec1e 	bne	r2,zero,42f54 <_dtoa_r+0x2dc>
   42fa4:	00d00034 	movhi	r3,16384
   42fa8:	18c03104 	addi	r3,r3,196
   42fac:	003feb06 	br	42f5c <_dtoa_r+0x2e4>
   42fb0:	d8802917 	ldw	r2,164(sp)
   42fb4:	19000204 	addi	r4,r3,8
   42fb8:	11000015 	stw	r4,0(r2)
   42fbc:	003f6206 	br	42d48 <_dtoa_r+0xd0>
   42fc0:	ddc00117 	ldw	r23,4(sp)
   42fc4:	d8800217 	ldw	r2,8(sp)
   42fc8:	01000804 	movi	r4,32
   42fcc:	b8c10c84 	addi	r3,r23,1074
   42fd0:	18a3883a 	add	r17,r3,r2
   42fd4:	2441b80e 	bge	r4,r17,436b8 <_dtoa_r+0xa40>
   42fd8:	00c01004 	movi	r3,64
   42fdc:	1c47c83a 	sub	r3,r3,r17
   42fe0:	88bff804 	addi	r2,r17,-32
   42fe4:	a8c6983a 	sll	r3,r21,r3
   42fe8:	a084d83a 	srl	r2,r20,r2
   42fec:	1888b03a 	or	r4,r3,r2
   42ff0:	00496840 	call	49684 <__floatunsidf>
   42ff4:	1011883a 	mov	r8,r2
   42ff8:	00bf8434 	movhi	r2,65040
   42ffc:	01000044 	movi	r4,1
   43000:	10d3883a 	add	r9,r2,r3
   43004:	8dbef344 	addi	r22,r17,-1075
   43008:	d9000815 	stw	r4,32(sp)
   4300c:	003f6f06 	br	42dcc <_dtoa_r+0x154>
   43010:	d8001715 	stw	zero,92(sp)
   43014:	04400044 	movi	r17,1
   43018:	00bfffc4 	movi	r2,-1
   4301c:	00c00044 	movi	r3,1
   43020:	d8800e15 	stw	r2,56(sp)
   43024:	d8002615 	stw	zero,152(sp)
   43028:	d8800f15 	stw	r2,60(sp)
   4302c:	d8c00b15 	stw	r3,44(sp)
   43030:	1021883a 	mov	r16,r2
   43034:	d8801617 	ldw	r2,88(sp)
   43038:	10001115 	stw	zero,68(r2)
   4303c:	d8801617 	ldw	r2,88(sp)
   43040:	11401117 	ldw	r5,68(r2)
   43044:	1009883a 	mov	r4,r2
   43048:	004638c0 	call	4638c <_Balloc>
   4304c:	d8c01617 	ldw	r3,88(sp)
   43050:	d8800515 	stw	r2,20(sp)
   43054:	18801015 	stw	r2,64(r3)
   43058:	00800384 	movi	r2,14
   4305c:	14006836 	bltu	r2,r16,43200 <_dtoa_r+0x588>
   43060:	8805003a 	cmpeq	r2,r17,zero
   43064:	1000661e 	bne	r2,zero,43200 <_dtoa_r+0x588>
   43068:	d9000d17 	ldw	r4,52(sp)
   4306c:	0102300e 	bge	zero,r4,43930 <_dtoa_r+0xcb8>
   43070:	208003cc 	andi	r2,r4,15
   43074:	100490fa 	slli	r2,r2,3
   43078:	2025d13a 	srai	r18,r4,4
   4307c:	00d00034 	movhi	r3,16384
   43080:	18c04604 	addi	r3,r3,280
   43084:	10c5883a 	add	r2,r2,r3
   43088:	90c0040c 	andi	r3,r18,16
   4308c:	14000017 	ldw	r16,0(r2)
   43090:	14400117 	ldw	r17,4(r2)
   43094:	18036a1e 	bne	r3,zero,43e40 <_dtoa_r+0x11c8>
   43098:	05800084 	movi	r22,2
   4309c:	90001026 	beq	r18,zero,430e0 <_dtoa_r+0x468>
   430a0:	04d00034 	movhi	r19,16384
   430a4:	9cc07804 	addi	r19,r19,480
   430a8:	9080004c 	andi	r2,r18,1
   430ac:	1005003a 	cmpeq	r2,r2,zero
   430b0:	1000081e 	bne	r2,zero,430d4 <_dtoa_r+0x45c>
   430b4:	99800017 	ldw	r6,0(r19)
   430b8:	99c00117 	ldw	r7,4(r19)
   430bc:	880b883a 	mov	r5,r17
   430c0:	8009883a 	mov	r4,r16
   430c4:	0048c000 	call	48c00 <__muldf3>
   430c8:	1021883a 	mov	r16,r2
   430cc:	b5800044 	addi	r22,r22,1
   430d0:	1823883a 	mov	r17,r3
   430d4:	9025d07a 	srai	r18,r18,1
   430d8:	9cc00204 	addi	r19,r19,8
   430dc:	903ff21e 	bne	r18,zero,430a8 <_dtoa_r+0x430>
   430e0:	a80b883a 	mov	r5,r21
   430e4:	a009883a 	mov	r4,r20
   430e8:	880f883a 	mov	r7,r17
   430ec:	800d883a 	mov	r6,r16
   430f0:	0048fb40 	call	48fb4 <__divdf3>
   430f4:	1029883a 	mov	r20,r2
   430f8:	182b883a 	mov	r21,r3
   430fc:	d8c00c17 	ldw	r3,48(sp)
   43100:	1805003a 	cmpeq	r2,r3,zero
   43104:	1000081e 	bne	r2,zero,43128 <_dtoa_r+0x4b0>
   43108:	0005883a 	mov	r2,zero
   4310c:	00cffc34 	movhi	r3,16368
   43110:	180f883a 	mov	r7,r3
   43114:	a009883a 	mov	r4,r20
   43118:	a80b883a 	mov	r5,r21
   4311c:	100d883a 	mov	r6,r2
   43120:	004942c0 	call	4942c <__ltdf2>
   43124:	1003fe16 	blt	r2,zero,44120 <_dtoa_r+0x14a8>
   43128:	b009883a 	mov	r4,r22
   4312c:	00494b40 	call	494b4 <__floatsidf>
   43130:	180b883a 	mov	r5,r3
   43134:	1009883a 	mov	r4,r2
   43138:	a00d883a 	mov	r6,r20
   4313c:	a80f883a 	mov	r7,r21
   43140:	0048c000 	call	48c00 <__muldf3>
   43144:	0011883a 	mov	r8,zero
   43148:	02500734 	movhi	r9,16412
   4314c:	1009883a 	mov	r4,r2
   43150:	180b883a 	mov	r5,r3
   43154:	480f883a 	mov	r7,r9
   43158:	400d883a 	mov	r6,r8
   4315c:	0048b8c0 	call	48b8c <__adddf3>
   43160:	d9000f17 	ldw	r4,60(sp)
   43164:	102d883a 	mov	r22,r2
   43168:	00bf3034 	movhi	r2,64704
   4316c:	18b9883a 	add	fp,r3,r2
   43170:	e02f883a 	mov	r23,fp
   43174:	20028f1e 	bne	r4,zero,43bb4 <_dtoa_r+0xf3c>
   43178:	0005883a 	mov	r2,zero
   4317c:	00d00534 	movhi	r3,16404
   43180:	a009883a 	mov	r4,r20
   43184:	a80b883a 	mov	r5,r21
   43188:	180f883a 	mov	r7,r3
   4318c:	100d883a 	mov	r6,r2
   43190:	0048b0c0 	call	48b0c <__subdf3>
   43194:	1009883a 	mov	r4,r2
   43198:	e00f883a 	mov	r7,fp
   4319c:	180b883a 	mov	r5,r3
   431a0:	b00d883a 	mov	r6,r22
   431a4:	1025883a 	mov	r18,r2
   431a8:	1827883a 	mov	r19,r3
   431ac:	004931c0 	call	4931c <__gtdf2>
   431b0:	00834f16 	blt	zero,r2,43ef0 <_dtoa_r+0x1278>
   431b4:	e0e0003c 	xorhi	r3,fp,32768
   431b8:	9009883a 	mov	r4,r18
   431bc:	980b883a 	mov	r5,r19
   431c0:	180f883a 	mov	r7,r3
   431c4:	b00d883a 	mov	r6,r22
   431c8:	004942c0 	call	4942c <__ltdf2>
   431cc:	1000080e 	bge	r2,zero,431f0 <_dtoa_r+0x578>
   431d0:	0027883a 	mov	r19,zero
   431d4:	0025883a 	mov	r18,zero
   431d8:	d8802617 	ldw	r2,152(sp)
   431dc:	df000517 	ldw	fp,20(sp)
   431e0:	d8000615 	stw	zero,24(sp)
   431e4:	0084303a 	nor	r2,zero,r2
   431e8:	d8800d15 	stw	r2,52(sp)
   431ec:	00019b06 	br	4385c <_dtoa_r+0xbe4>
   431f0:	d9801217 	ldw	r6,72(sp)
   431f4:	d8801317 	ldw	r2,76(sp)
   431f8:	3029883a 	mov	r20,r6
   431fc:	102b883a 	mov	r21,r2
   43200:	d8c00217 	ldw	r3,8(sp)
   43204:	18008516 	blt	r3,zero,4341c <_dtoa_r+0x7a4>
   43208:	d9000d17 	ldw	r4,52(sp)
   4320c:	00800384 	movi	r2,14
   43210:	11008216 	blt	r2,r4,4341c <_dtoa_r+0x7a4>
   43214:	200490fa 	slli	r2,r4,3
   43218:	d9802617 	ldw	r6,152(sp)
   4321c:	00d00034 	movhi	r3,16384
   43220:	18c04604 	addi	r3,r3,280
   43224:	10c5883a 	add	r2,r2,r3
   43228:	14800017 	ldw	r18,0(r2)
   4322c:	14c00117 	ldw	r19,4(r2)
   43230:	30031e16 	blt	r6,zero,43eac <_dtoa_r+0x1234>
   43234:	d9000517 	ldw	r4,20(sp)
   43238:	d8c00f17 	ldw	r3,60(sp)
   4323c:	a823883a 	mov	r17,r21
   43240:	a021883a 	mov	r16,r20
   43244:	192b883a 	add	r21,r3,r4
   43248:	2039883a 	mov	fp,r4
   4324c:	00000f06 	br	4328c <_dtoa_r+0x614>
   43250:	0005883a 	mov	r2,zero
   43254:	00d00934 	movhi	r3,16420
   43258:	5009883a 	mov	r4,r10
   4325c:	580b883a 	mov	r5,r11
   43260:	180f883a 	mov	r7,r3
   43264:	100d883a 	mov	r6,r2
   43268:	0048c000 	call	48c00 <__muldf3>
   4326c:	180b883a 	mov	r5,r3
   43270:	000d883a 	mov	r6,zero
   43274:	000f883a 	mov	r7,zero
   43278:	1009883a 	mov	r4,r2
   4327c:	1021883a 	mov	r16,r2
   43280:	1823883a 	mov	r17,r3
   43284:	00492940 	call	49294 <__nedf2>
   43288:	10004526 	beq	r2,zero,433a0 <_dtoa_r+0x728>
   4328c:	900d883a 	mov	r6,r18
   43290:	980f883a 	mov	r7,r19
   43294:	8009883a 	mov	r4,r16
   43298:	880b883a 	mov	r5,r17
   4329c:	0048fb40 	call	48fb4 <__divdf3>
   432a0:	180b883a 	mov	r5,r3
   432a4:	1009883a 	mov	r4,r2
   432a8:	00495ac0 	call	495ac <__fixdfsi>
   432ac:	1009883a 	mov	r4,r2
   432b0:	1029883a 	mov	r20,r2
   432b4:	00494b40 	call	494b4 <__floatsidf>
   432b8:	180f883a 	mov	r7,r3
   432bc:	9009883a 	mov	r4,r18
   432c0:	980b883a 	mov	r5,r19
   432c4:	100d883a 	mov	r6,r2
   432c8:	0048c000 	call	48c00 <__muldf3>
   432cc:	180f883a 	mov	r7,r3
   432d0:	880b883a 	mov	r5,r17
   432d4:	8009883a 	mov	r4,r16
   432d8:	100d883a 	mov	r6,r2
   432dc:	0048b0c0 	call	48b0c <__subdf3>
   432e0:	1015883a 	mov	r10,r2
   432e4:	a0800c04 	addi	r2,r20,48
   432e8:	e0800005 	stb	r2,0(fp)
   432ec:	e7000044 	addi	fp,fp,1
   432f0:	1817883a 	mov	r11,r3
   432f4:	e57fd61e 	bne	fp,r21,43250 <_dtoa_r+0x5d8>
   432f8:	500d883a 	mov	r6,r10
   432fc:	180f883a 	mov	r7,r3
   43300:	5009883a 	mov	r4,r10
   43304:	180b883a 	mov	r5,r3
   43308:	0048b8c0 	call	48b8c <__adddf3>
   4330c:	100d883a 	mov	r6,r2
   43310:	9009883a 	mov	r4,r18
   43314:	980b883a 	mov	r5,r19
   43318:	180f883a 	mov	r7,r3
   4331c:	1021883a 	mov	r16,r2
   43320:	1823883a 	mov	r17,r3
   43324:	004942c0 	call	4942c <__ltdf2>
   43328:	10000816 	blt	r2,zero,4334c <_dtoa_r+0x6d4>
   4332c:	980b883a 	mov	r5,r19
   43330:	800d883a 	mov	r6,r16
   43334:	880f883a 	mov	r7,r17
   43338:	9009883a 	mov	r4,r18
   4333c:	004920c0 	call	4920c <__eqdf2>
   43340:	1000171e 	bne	r2,zero,433a0 <_dtoa_r+0x728>
   43344:	a080004c 	andi	r2,r20,1
   43348:	10001526 	beq	r2,zero,433a0 <_dtoa_r+0x728>
   4334c:	d8800d17 	ldw	r2,52(sp)
   43350:	d8800415 	stw	r2,16(sp)
   43354:	e009883a 	mov	r4,fp
   43358:	213fffc4 	addi	r4,r4,-1
   4335c:	20c00007 	ldb	r3,0(r4)
   43360:	00800e44 	movi	r2,57
   43364:	1880081e 	bne	r3,r2,43388 <_dtoa_r+0x710>
   43368:	d8800517 	ldw	r2,20(sp)
   4336c:	113ffa1e 	bne	r2,r4,43358 <_dtoa_r+0x6e0>
   43370:	d8c00417 	ldw	r3,16(sp)
   43374:	d9800517 	ldw	r6,20(sp)
   43378:	00800c04 	movi	r2,48
   4337c:	18c00044 	addi	r3,r3,1
   43380:	d8c00415 	stw	r3,16(sp)
   43384:	30800005 	stb	r2,0(r6)
   43388:	20800003 	ldbu	r2,0(r4)
   4338c:	d8c00417 	ldw	r3,16(sp)
   43390:	27000044 	addi	fp,r4,1
   43394:	10800044 	addi	r2,r2,1
   43398:	d8c00d15 	stw	r3,52(sp)
   4339c:	20800005 	stb	r2,0(r4)
   433a0:	d9001617 	ldw	r4,88(sp)
   433a4:	d9400717 	ldw	r5,28(sp)
   433a8:	0045e0c0 	call	45e0c <_Bfree>
   433ac:	e0000005 	stb	zero,0(fp)
   433b0:	d9800d17 	ldw	r6,52(sp)
   433b4:	d8c02717 	ldw	r3,156(sp)
   433b8:	d9002917 	ldw	r4,164(sp)
   433bc:	30800044 	addi	r2,r6,1
   433c0:	18800015 	stw	r2,0(r3)
   433c4:	20029c26 	beq	r4,zero,43e38 <_dtoa_r+0x11c0>
   433c8:	d8c00517 	ldw	r3,20(sp)
   433cc:	27000015 	stw	fp,0(r4)
   433d0:	003e5d06 	br	42d48 <_dtoa_r+0xd0>
   433d4:	d9800d17 	ldw	r6,52(sp)
   433d8:	00d00034 	movhi	r3,16384
   433dc:	18c04604 	addi	r3,r3,280
   433e0:	d9001217 	ldw	r4,72(sp)
   433e4:	300490fa 	slli	r2,r6,3
   433e8:	d9401317 	ldw	r5,76(sp)
   433ec:	10c5883a 	add	r2,r2,r3
   433f0:	12000017 	ldw	r8,0(r2)
   433f4:	12400117 	ldw	r9,4(r2)
   433f8:	400d883a 	mov	r6,r8
   433fc:	480f883a 	mov	r7,r9
   43400:	004942c0 	call	4942c <__ltdf2>
   43404:	1000030e 	bge	r2,zero,43414 <_dtoa_r+0x79c>
   43408:	d8800d17 	ldw	r2,52(sp)
   4340c:	10bfffc4 	addi	r2,r2,-1
   43410:	d8800d15 	stw	r2,52(sp)
   43414:	d8000c15 	stw	zero,48(sp)
   43418:	003ea806 	br	42ebc <_dtoa_r+0x244>
   4341c:	d9000b17 	ldw	r4,44(sp)
   43420:	202cc03a 	cmpne	r22,r4,zero
   43424:	b000c71e 	bne	r22,zero,43744 <_dtoa_r+0xacc>
   43428:	dc001117 	ldw	r16,68(sp)
   4342c:	dc801017 	ldw	r18,64(sp)
   43430:	0027883a 	mov	r19,zero
   43434:	04000b0e 	bge	zero,r16,43464 <_dtoa_r+0x7ec>
   43438:	d8c00a17 	ldw	r3,40(sp)
   4343c:	00c0090e 	bge	zero,r3,43464 <_dtoa_r+0x7ec>
   43440:	8005883a 	mov	r2,r16
   43444:	1c011316 	blt	r3,r16,43894 <_dtoa_r+0xc1c>
   43448:	d9000a17 	ldw	r4,40(sp)
   4344c:	d9801117 	ldw	r6,68(sp)
   43450:	80a1c83a 	sub	r16,r16,r2
   43454:	2089c83a 	sub	r4,r4,r2
   43458:	308dc83a 	sub	r6,r6,r2
   4345c:	d9000a15 	stw	r4,40(sp)
   43460:	d9801115 	stw	r6,68(sp)
   43464:	d8801017 	ldw	r2,64(sp)
   43468:	0080150e 	bge	zero,r2,434c0 <_dtoa_r+0x848>
   4346c:	d8c00b17 	ldw	r3,44(sp)
   43470:	1805003a 	cmpeq	r2,r3,zero
   43474:	1001c91e 	bne	r2,zero,43b9c <_dtoa_r+0xf24>
   43478:	04800e0e 	bge	zero,r18,434b4 <_dtoa_r+0x83c>
   4347c:	d9001617 	ldw	r4,88(sp)
   43480:	980b883a 	mov	r5,r19
   43484:	900d883a 	mov	r6,r18
   43488:	0046bc00 	call	46bc0 <__pow5mult>
   4348c:	d9001617 	ldw	r4,88(sp)
   43490:	d9800717 	ldw	r6,28(sp)
   43494:	100b883a 	mov	r5,r2
   43498:	1027883a 	mov	r19,r2
   4349c:	004689c0 	call	4689c <__multiply>
   434a0:	d9001617 	ldw	r4,88(sp)
   434a4:	d9400717 	ldw	r5,28(sp)
   434a8:	1023883a 	mov	r17,r2
   434ac:	0045e0c0 	call	45e0c <_Bfree>
   434b0:	dc400715 	stw	r17,28(sp)
   434b4:	d9001017 	ldw	r4,64(sp)
   434b8:	248dc83a 	sub	r6,r4,r18
   434bc:	30010e1e 	bne	r6,zero,438f8 <_dtoa_r+0xc80>
   434c0:	d9001617 	ldw	r4,88(sp)
   434c4:	04400044 	movi	r17,1
   434c8:	880b883a 	mov	r5,r17
   434cc:	0046a840 	call	46a84 <__i2b>
   434d0:	d9800917 	ldw	r6,36(sp)
   434d4:	1025883a 	mov	r18,r2
   434d8:	0180040e 	bge	zero,r6,434ec <_dtoa_r+0x874>
   434dc:	d9001617 	ldw	r4,88(sp)
   434e0:	100b883a 	mov	r5,r2
   434e4:	0046bc00 	call	46bc0 <__pow5mult>
   434e8:	1025883a 	mov	r18,r2
   434ec:	d8801717 	ldw	r2,92(sp)
   434f0:	8880f30e 	bge	r17,r2,438c0 <_dtoa_r+0xc48>
   434f4:	0023883a 	mov	r17,zero
   434f8:	d9800917 	ldw	r6,36(sp)
   434fc:	30019e1e 	bne	r6,zero,43b78 <_dtoa_r+0xf00>
   43500:	00c00044 	movi	r3,1
   43504:	d9000a17 	ldw	r4,40(sp)
   43508:	20c5883a 	add	r2,r4,r3
   4350c:	10c007cc 	andi	r3,r2,31
   43510:	1800841e 	bne	r3,zero,43724 <_dtoa_r+0xaac>
   43514:	00800704 	movi	r2,28
   43518:	d9000a17 	ldw	r4,40(sp)
   4351c:	d9801117 	ldw	r6,68(sp)
   43520:	80a1883a 	add	r16,r16,r2
   43524:	2089883a 	add	r4,r4,r2
   43528:	308d883a 	add	r6,r6,r2
   4352c:	d9000a15 	stw	r4,40(sp)
   43530:	d9801115 	stw	r6,68(sp)
   43534:	d8801117 	ldw	r2,68(sp)
   43538:	0080050e 	bge	zero,r2,43550 <_dtoa_r+0x8d8>
   4353c:	d9400717 	ldw	r5,28(sp)
   43540:	d9001617 	ldw	r4,88(sp)
   43544:	100d883a 	mov	r6,r2
   43548:	00467500 	call	46750 <__lshift>
   4354c:	d8800715 	stw	r2,28(sp)
   43550:	d8c00a17 	ldw	r3,40(sp)
   43554:	00c0050e 	bge	zero,r3,4356c <_dtoa_r+0x8f4>
   43558:	d9001617 	ldw	r4,88(sp)
   4355c:	900b883a 	mov	r5,r18
   43560:	180d883a 	mov	r6,r3
   43564:	00467500 	call	46750 <__lshift>
   43568:	1025883a 	mov	r18,r2
   4356c:	d9000c17 	ldw	r4,48(sp)
   43570:	2005003a 	cmpeq	r2,r4,zero
   43574:	10016f26 	beq	r2,zero,43b34 <_dtoa_r+0xebc>
   43578:	d9000f17 	ldw	r4,60(sp)
   4357c:	0102170e 	bge	zero,r4,43ddc <_dtoa_r+0x1164>
   43580:	d9800b17 	ldw	r6,44(sp)
   43584:	3005003a 	cmpeq	r2,r6,zero
   43588:	1000881e 	bne	r2,zero,437ac <_dtoa_r+0xb34>
   4358c:	0400050e 	bge	zero,r16,435a4 <_dtoa_r+0x92c>
   43590:	d9001617 	ldw	r4,88(sp)
   43594:	980b883a 	mov	r5,r19
   43598:	800d883a 	mov	r6,r16
   4359c:	00467500 	call	46750 <__lshift>
   435a0:	1027883a 	mov	r19,r2
   435a4:	8804c03a 	cmpne	r2,r17,zero
   435a8:	1002541e 	bne	r2,zero,43efc <_dtoa_r+0x1284>
   435ac:	980b883a 	mov	r5,r19
   435b0:	dd800517 	ldw	r22,20(sp)
   435b4:	dcc00615 	stw	r19,24(sp)
   435b8:	a700004c 	andi	fp,r20,1
   435bc:	2827883a 	mov	r19,r5
   435c0:	d9000717 	ldw	r4,28(sp)
   435c4:	900b883a 	mov	r5,r18
   435c8:	0042a600 	call	42a60 <quorem>
   435cc:	d9000717 	ldw	r4,28(sp)
   435d0:	d9400617 	ldw	r5,24(sp)
   435d4:	1023883a 	mov	r17,r2
   435d8:	8dc00c04 	addi	r23,r17,48
   435dc:	0045f680 	call	45f68 <__mcmp>
   435e0:	d9001617 	ldw	r4,88(sp)
   435e4:	900b883a 	mov	r5,r18
   435e8:	980d883a 	mov	r6,r19
   435ec:	1029883a 	mov	r20,r2
   435f0:	00465c40 	call	465c4 <__mdiff>
   435f4:	102b883a 	mov	r21,r2
   435f8:	10800317 	ldw	r2,12(r2)
   435fc:	1001281e 	bne	r2,zero,43aa0 <_dtoa_r+0xe28>
   43600:	d9000717 	ldw	r4,28(sp)
   43604:	a80b883a 	mov	r5,r21
   43608:	0045f680 	call	45f68 <__mcmp>
   4360c:	d9001617 	ldw	r4,88(sp)
   43610:	1021883a 	mov	r16,r2
   43614:	a80b883a 	mov	r5,r21
   43618:	0045e0c0 	call	45e0c <_Bfree>
   4361c:	8000041e 	bne	r16,zero,43630 <_dtoa_r+0x9b8>
   43620:	d8801717 	ldw	r2,92(sp)
   43624:	1000021e 	bne	r2,zero,43630 <_dtoa_r+0x9b8>
   43628:	e004c03a 	cmpne	r2,fp,zero
   4362c:	10011726 	beq	r2,zero,43a8c <_dtoa_r+0xe14>
   43630:	a0010616 	blt	r20,zero,43a4c <_dtoa_r+0xdd4>
   43634:	a000041e 	bne	r20,zero,43648 <_dtoa_r+0x9d0>
   43638:	d8c01717 	ldw	r3,92(sp)
   4363c:	1800021e 	bne	r3,zero,43648 <_dtoa_r+0x9d0>
   43640:	e004c03a 	cmpne	r2,fp,zero
   43644:	10010126 	beq	r2,zero,43a4c <_dtoa_r+0xdd4>
   43648:	04023d16 	blt	zero,r16,43f40 <_dtoa_r+0x12c8>
   4364c:	b5c00005 	stb	r23,0(r22)
   43650:	d9800517 	ldw	r6,20(sp)
   43654:	d9000f17 	ldw	r4,60(sp)
   43658:	b5800044 	addi	r22,r22,1
   4365c:	3105883a 	add	r2,r6,r4
   43660:	b0806526 	beq	r22,r2,437f8 <_dtoa_r+0xb80>
   43664:	d9400717 	ldw	r5,28(sp)
   43668:	d9001617 	ldw	r4,88(sp)
   4366c:	01800284 	movi	r6,10
   43670:	000f883a 	mov	r7,zero
   43674:	0046ac00 	call	46ac0 <__multadd>
   43678:	d8800715 	stw	r2,28(sp)
   4367c:	d8800617 	ldw	r2,24(sp)
   43680:	14c10c26 	beq	r2,r19,43ab4 <_dtoa_r+0xe3c>
   43684:	d9400617 	ldw	r5,24(sp)
   43688:	d9001617 	ldw	r4,88(sp)
   4368c:	01800284 	movi	r6,10
   43690:	000f883a 	mov	r7,zero
   43694:	0046ac00 	call	46ac0 <__multadd>
   43698:	d9001617 	ldw	r4,88(sp)
   4369c:	980b883a 	mov	r5,r19
   436a0:	01800284 	movi	r6,10
   436a4:	000f883a 	mov	r7,zero
   436a8:	d8800615 	stw	r2,24(sp)
   436ac:	0046ac00 	call	46ac0 <__multadd>
   436b0:	1027883a 	mov	r19,r2
   436b4:	003fc206 	br	435c0 <_dtoa_r+0x948>
   436b8:	2445c83a 	sub	r2,r4,r17
   436bc:	a088983a 	sll	r4,r20,r2
   436c0:	003e4b06 	br	42ff0 <_dtoa_r+0x378>
   436c4:	01bfffc4 	movi	r6,-1
   436c8:	00800044 	movi	r2,1
   436cc:	d9800e15 	stw	r6,56(sp)
   436d0:	d9800f15 	stw	r6,60(sp)
   436d4:	d8800b15 	stw	r2,44(sp)
   436d8:	d8c01617 	ldw	r3,88(sp)
   436dc:	008005c4 	movi	r2,23
   436e0:	18001115 	stw	zero,68(r3)
   436e4:	1580082e 	bgeu	r2,r22,43708 <_dtoa_r+0xa90>
   436e8:	00c00104 	movi	r3,4
   436ec:	0009883a 	mov	r4,zero
   436f0:	18c7883a 	add	r3,r3,r3
   436f4:	18800504 	addi	r2,r3,20
   436f8:	21000044 	addi	r4,r4,1
   436fc:	b0bffc2e 	bgeu	r22,r2,436f0 <_dtoa_r+0xa78>
   43700:	d9801617 	ldw	r6,88(sp)
   43704:	31001115 	stw	r4,68(r6)
   43708:	dc000f17 	ldw	r16,60(sp)
   4370c:	003e4b06 	br	4303c <_dtoa_r+0x3c4>
   43710:	d9801717 	ldw	r6,92(sp)
   43714:	0023883a 	mov	r17,zero
   43718:	31bfff04 	addi	r6,r6,-4
   4371c:	d9801715 	stw	r6,92(sp)
   43720:	003df806 	br	42f04 <_dtoa_r+0x28c>
   43724:	00800804 	movi	r2,32
   43728:	10c9c83a 	sub	r4,r2,r3
   4372c:	00c00104 	movi	r3,4
   43730:	19005a16 	blt	r3,r4,4389c <_dtoa_r+0xc24>
   43734:	008000c4 	movi	r2,3
   43738:	113f7e16 	blt	r2,r4,43534 <_dtoa_r+0x8bc>
   4373c:	20800704 	addi	r2,r4,28
   43740:	003f7506 	br	43518 <_dtoa_r+0x8a0>
   43744:	d9801717 	ldw	r6,92(sp)
   43748:	00800044 	movi	r2,1
   4374c:	1180a10e 	bge	r2,r6,439d4 <_dtoa_r+0xd5c>
   43750:	d9800f17 	ldw	r6,60(sp)
   43754:	d8c01017 	ldw	r3,64(sp)
   43758:	30bfffc4 	addi	r2,r6,-1
   4375c:	1881c616 	blt	r3,r2,43e78 <_dtoa_r+0x1200>
   43760:	18a5c83a 	sub	r18,r3,r2
   43764:	d8800f17 	ldw	r2,60(sp)
   43768:	10026216 	blt	r2,zero,440f4 <_dtoa_r+0x147c>
   4376c:	dc001117 	ldw	r16,68(sp)
   43770:	1007883a 	mov	r3,r2
   43774:	d9800a17 	ldw	r6,40(sp)
   43778:	d8801117 	ldw	r2,68(sp)
   4377c:	d9001617 	ldw	r4,88(sp)
   43780:	30cd883a 	add	r6,r6,r3
   43784:	10c5883a 	add	r2,r2,r3
   43788:	01400044 	movi	r5,1
   4378c:	d9800a15 	stw	r6,40(sp)
   43790:	d8801115 	stw	r2,68(sp)
   43794:	0046a840 	call	46a84 <__i2b>
   43798:	1027883a 	mov	r19,r2
   4379c:	003f2506 	br	43434 <_dtoa_r+0x7bc>
   437a0:	00d00034 	movhi	r3,16384
   437a4:	18c02804 	addi	r3,r3,160
   437a8:	003d6706 	br	42d48 <_dtoa_r+0xd0>
   437ac:	dd800517 	ldw	r22,20(sp)
   437b0:	04000044 	movi	r16,1
   437b4:	00000706 	br	437d4 <_dtoa_r+0xb5c>
   437b8:	d9400717 	ldw	r5,28(sp)
   437bc:	d9001617 	ldw	r4,88(sp)
   437c0:	01800284 	movi	r6,10
   437c4:	000f883a 	mov	r7,zero
   437c8:	0046ac00 	call	46ac0 <__multadd>
   437cc:	d8800715 	stw	r2,28(sp)
   437d0:	84000044 	addi	r16,r16,1
   437d4:	d9000717 	ldw	r4,28(sp)
   437d8:	900b883a 	mov	r5,r18
   437dc:	0042a600 	call	42a60 <quorem>
   437e0:	15c00c04 	addi	r23,r2,48
   437e4:	b5c00005 	stb	r23,0(r22)
   437e8:	d8c00f17 	ldw	r3,60(sp)
   437ec:	b5800044 	addi	r22,r22,1
   437f0:	80fff116 	blt	r16,r3,437b8 <_dtoa_r+0xb40>
   437f4:	d8000615 	stw	zero,24(sp)
   437f8:	d9400717 	ldw	r5,28(sp)
   437fc:	d9001617 	ldw	r4,88(sp)
   43800:	01800044 	movi	r6,1
   43804:	00467500 	call	46750 <__lshift>
   43808:	1009883a 	mov	r4,r2
   4380c:	900b883a 	mov	r5,r18
   43810:	d8800715 	stw	r2,28(sp)
   43814:	0045f680 	call	45f68 <__mcmp>
   43818:	00803c0e 	bge	zero,r2,4390c <_dtoa_r+0xc94>
   4381c:	b009883a 	mov	r4,r22
   43820:	213fffc4 	addi	r4,r4,-1
   43824:	21400003 	ldbu	r5,0(r4)
   43828:	00800e44 	movi	r2,57
   4382c:	28c03fcc 	andi	r3,r5,255
   43830:	18c0201c 	xori	r3,r3,128
   43834:	18ffe004 	addi	r3,r3,-128
   43838:	1881981e 	bne	r3,r2,43e9c <_dtoa_r+0x1224>
   4383c:	d9800517 	ldw	r6,20(sp)
   43840:	21bff71e 	bne	r4,r6,43820 <_dtoa_r+0xba8>
   43844:	d8800d17 	ldw	r2,52(sp)
   43848:	37000044 	addi	fp,r6,1
   4384c:	10800044 	addi	r2,r2,1
   43850:	d8800d15 	stw	r2,52(sp)
   43854:	00800c44 	movi	r2,49
   43858:	30800005 	stb	r2,0(r6)
   4385c:	d9001617 	ldw	r4,88(sp)
   43860:	900b883a 	mov	r5,r18
   43864:	0045e0c0 	call	45e0c <_Bfree>
   43868:	983ecd26 	beq	r19,zero,433a0 <_dtoa_r+0x728>
   4386c:	d8c00617 	ldw	r3,24(sp)
   43870:	18000426 	beq	r3,zero,43884 <_dtoa_r+0xc0c>
   43874:	1cc00326 	beq	r3,r19,43884 <_dtoa_r+0xc0c>
   43878:	d9001617 	ldw	r4,88(sp)
   4387c:	180b883a 	mov	r5,r3
   43880:	0045e0c0 	call	45e0c <_Bfree>
   43884:	d9001617 	ldw	r4,88(sp)
   43888:	980b883a 	mov	r5,r19
   4388c:	0045e0c0 	call	45e0c <_Bfree>
   43890:	003ec306 	br	433a0 <_dtoa_r+0x728>
   43894:	1805883a 	mov	r2,r3
   43898:	003eeb06 	br	43448 <_dtoa_r+0x7d0>
   4389c:	d9800a17 	ldw	r6,40(sp)
   438a0:	d8c01117 	ldw	r3,68(sp)
   438a4:	20bfff04 	addi	r2,r4,-4
   438a8:	308d883a 	add	r6,r6,r2
   438ac:	1887883a 	add	r3,r3,r2
   438b0:	80a1883a 	add	r16,r16,r2
   438b4:	d9800a15 	stw	r6,40(sp)
   438b8:	d8c01115 	stw	r3,68(sp)
   438bc:	003f1d06 	br	43534 <_dtoa_r+0x8bc>
   438c0:	a03f0c1e 	bne	r20,zero,434f4 <_dtoa_r+0x87c>
   438c4:	00800434 	movhi	r2,16
   438c8:	10bfffc4 	addi	r2,r2,-1
   438cc:	a884703a 	and	r2,r21,r2
   438d0:	103f081e 	bne	r2,zero,434f4 <_dtoa_r+0x87c>
   438d4:	a89ffc2c 	andhi	r2,r21,32752
   438d8:	103f0626 	beq	r2,zero,434f4 <_dtoa_r+0x87c>
   438dc:	d8c01117 	ldw	r3,68(sp)
   438e0:	d9000a17 	ldw	r4,40(sp)
   438e4:	18c00044 	addi	r3,r3,1
   438e8:	21000044 	addi	r4,r4,1
   438ec:	d8c01115 	stw	r3,68(sp)
   438f0:	d9000a15 	stw	r4,40(sp)
   438f4:	003f0006 	br	434f8 <_dtoa_r+0x880>
   438f8:	d9400717 	ldw	r5,28(sp)
   438fc:	d9001617 	ldw	r4,88(sp)
   43900:	0046bc00 	call	46bc0 <__pow5mult>
   43904:	d8800715 	stw	r2,28(sp)
   43908:	003eed06 	br	434c0 <_dtoa_r+0x848>
   4390c:	1000021e 	bne	r2,zero,43918 <_dtoa_r+0xca0>
   43910:	b880004c 	andi	r2,r23,1
   43914:	103fc11e 	bne	r2,zero,4381c <_dtoa_r+0xba4>
   43918:	b5bfffc4 	addi	r22,r22,-1
   4391c:	b0c00007 	ldb	r3,0(r22)
   43920:	00800c04 	movi	r2,48
   43924:	18bffc26 	beq	r3,r2,43918 <_dtoa_r+0xca0>
   43928:	b7000044 	addi	fp,r22,1
   4392c:	003fcb06 	br	4385c <_dtoa_r+0xbe4>
   43930:	d9800d17 	ldw	r6,52(sp)
   43934:	018fc83a 	sub	r7,zero,r6
   43938:	3801f726 	beq	r7,zero,44118 <_dtoa_r+0x14a0>
   4393c:	398003cc 	andi	r6,r7,15
   43940:	300c90fa 	slli	r6,r6,3
   43944:	01500034 	movhi	r5,16384
   43948:	29404604 	addi	r5,r5,280
   4394c:	d9001217 	ldw	r4,72(sp)
   43950:	314d883a 	add	r6,r6,r5
   43954:	30c00117 	ldw	r3,4(r6)
   43958:	30800017 	ldw	r2,0(r6)
   4395c:	d9401317 	ldw	r5,76(sp)
   43960:	3821d13a 	srai	r16,r7,4
   43964:	100d883a 	mov	r6,r2
   43968:	180f883a 	mov	r7,r3
   4396c:	0048c000 	call	48c00 <__muldf3>
   43970:	1011883a 	mov	r8,r2
   43974:	1813883a 	mov	r9,r3
   43978:	1029883a 	mov	r20,r2
   4397c:	182b883a 	mov	r21,r3
   43980:	8001e526 	beq	r16,zero,44118 <_dtoa_r+0x14a0>
   43984:	05800084 	movi	r22,2
   43988:	04500034 	movhi	r17,16384
   4398c:	8c407804 	addi	r17,r17,480
   43990:	8080004c 	andi	r2,r16,1
   43994:	1005003a 	cmpeq	r2,r2,zero
   43998:	1000081e 	bne	r2,zero,439bc <_dtoa_r+0xd44>
   4399c:	89800017 	ldw	r6,0(r17)
   439a0:	89c00117 	ldw	r7,4(r17)
   439a4:	480b883a 	mov	r5,r9
   439a8:	4009883a 	mov	r4,r8
   439ac:	0048c000 	call	48c00 <__muldf3>
   439b0:	1011883a 	mov	r8,r2
   439b4:	b5800044 	addi	r22,r22,1
   439b8:	1813883a 	mov	r9,r3
   439bc:	8021d07a 	srai	r16,r16,1
   439c0:	8c400204 	addi	r17,r17,8
   439c4:	803ff21e 	bne	r16,zero,43990 <_dtoa_r+0xd18>
   439c8:	4029883a 	mov	r20,r8
   439cc:	482b883a 	mov	r21,r9
   439d0:	003dca06 	br	430fc <_dtoa_r+0x484>
   439d4:	d9000817 	ldw	r4,32(sp)
   439d8:	2005003a 	cmpeq	r2,r4,zero
   439dc:	1001f61e 	bne	r2,zero,441b8 <_dtoa_r+0x1540>
   439e0:	dc001117 	ldw	r16,68(sp)
   439e4:	dc801017 	ldw	r18,64(sp)
   439e8:	18c10cc4 	addi	r3,r3,1075
   439ec:	003f6106 	br	43774 <_dtoa_r+0xafc>
   439f0:	d8000b15 	stw	zero,44(sp)
   439f4:	d9802617 	ldw	r6,152(sp)
   439f8:	d8c00d17 	ldw	r3,52(sp)
   439fc:	30800044 	addi	r2,r6,1
   43a00:	18ad883a 	add	r22,r3,r2
   43a04:	b13fffc4 	addi	r4,r22,-1
   43a08:	d9000e15 	stw	r4,56(sp)
   43a0c:	0581f60e 	bge	zero,r22,441e8 <_dtoa_r+0x1570>
   43a10:	dd800f15 	stw	r22,60(sp)
   43a14:	003f3006 	br	436d8 <_dtoa_r+0xa60>
   43a18:	d8000b15 	stw	zero,44(sp)
   43a1c:	d9002617 	ldw	r4,152(sp)
   43a20:	0101eb0e 	bge	zero,r4,441d0 <_dtoa_r+0x1558>
   43a24:	202d883a 	mov	r22,r4
   43a28:	d9000e15 	stw	r4,56(sp)
   43a2c:	d9000f15 	stw	r4,60(sp)
   43a30:	003f2906 	br	436d8 <_dtoa_r+0xa60>
   43a34:	01800044 	movi	r6,1
   43a38:	d9800b15 	stw	r6,44(sp)
   43a3c:	003ff706 	br	43a1c <_dtoa_r+0xda4>
   43a40:	01000044 	movi	r4,1
   43a44:	d9000b15 	stw	r4,44(sp)
   43a48:	003fea06 	br	439f4 <_dtoa_r+0xd7c>
   43a4c:	04000c0e 	bge	zero,r16,43a80 <_dtoa_r+0xe08>
   43a50:	d9400717 	ldw	r5,28(sp)
   43a54:	d9001617 	ldw	r4,88(sp)
   43a58:	01800044 	movi	r6,1
   43a5c:	00467500 	call	46750 <__lshift>
   43a60:	1009883a 	mov	r4,r2
   43a64:	900b883a 	mov	r5,r18
   43a68:	d8800715 	stw	r2,28(sp)
   43a6c:	0045f680 	call	45f68 <__mcmp>
   43a70:	0081e00e 	bge	zero,r2,441f4 <_dtoa_r+0x157c>
   43a74:	bdc00044 	addi	r23,r23,1
   43a78:	00800e84 	movi	r2,58
   43a7c:	b881a226 	beq	r23,r2,44108 <_dtoa_r+0x1490>
   43a80:	b7000044 	addi	fp,r22,1
   43a84:	b5c00005 	stb	r23,0(r22)
   43a88:	003f7406 	br	4385c <_dtoa_r+0xbe4>
   43a8c:	00800e44 	movi	r2,57
   43a90:	b8819d26 	beq	r23,r2,44108 <_dtoa_r+0x1490>
   43a94:	053ffa0e 	bge	zero,r20,43a80 <_dtoa_r+0xe08>
   43a98:	8dc00c44 	addi	r23,r17,49
   43a9c:	003ff806 	br	43a80 <_dtoa_r+0xe08>
   43aa0:	d9001617 	ldw	r4,88(sp)
   43aa4:	a80b883a 	mov	r5,r21
   43aa8:	04000044 	movi	r16,1
   43aac:	0045e0c0 	call	45e0c <_Bfree>
   43ab0:	003edf06 	br	43630 <_dtoa_r+0x9b8>
   43ab4:	d9001617 	ldw	r4,88(sp)
   43ab8:	980b883a 	mov	r5,r19
   43abc:	01800284 	movi	r6,10
   43ac0:	000f883a 	mov	r7,zero
   43ac4:	0046ac00 	call	46ac0 <__multadd>
   43ac8:	1027883a 	mov	r19,r2
   43acc:	d8800615 	stw	r2,24(sp)
   43ad0:	003ebb06 	br	435c0 <_dtoa_r+0x948>
   43ad4:	d9801117 	ldw	r6,68(sp)
   43ad8:	d8800d17 	ldw	r2,52(sp)
   43adc:	d8000915 	stw	zero,36(sp)
   43ae0:	308dc83a 	sub	r6,r6,r2
   43ae4:	0087c83a 	sub	r3,zero,r2
   43ae8:	d9801115 	stw	r6,68(sp)
   43aec:	d8c01015 	stw	r3,64(sp)
   43af0:	003cfe06 	br	42eec <_dtoa_r+0x274>
   43af4:	018dc83a 	sub	r6,zero,r6
   43af8:	d9801115 	stw	r6,68(sp)
   43afc:	d8000a15 	stw	zero,40(sp)
   43b00:	003cf306 	br	42ed0 <_dtoa_r+0x258>
   43b04:	d9000d17 	ldw	r4,52(sp)
   43b08:	00494b40 	call	494b4 <__floatsidf>
   43b0c:	880b883a 	mov	r5,r17
   43b10:	8009883a 	mov	r4,r16
   43b14:	180f883a 	mov	r7,r3
   43b18:	100d883a 	mov	r6,r2
   43b1c:	00492940 	call	49294 <__nedf2>
   43b20:	103ce126 	beq	r2,zero,42ea8 <_dtoa_r+0x230>
   43b24:	d9800d17 	ldw	r6,52(sp)
   43b28:	31bfffc4 	addi	r6,r6,-1
   43b2c:	d9800d15 	stw	r6,52(sp)
   43b30:	003cdd06 	br	42ea8 <_dtoa_r+0x230>
   43b34:	d9000717 	ldw	r4,28(sp)
   43b38:	900b883a 	mov	r5,r18
   43b3c:	0045f680 	call	45f68 <__mcmp>
   43b40:	103e8d0e 	bge	r2,zero,43578 <_dtoa_r+0x900>
   43b44:	d9400717 	ldw	r5,28(sp)
   43b48:	d9001617 	ldw	r4,88(sp)
   43b4c:	01800284 	movi	r6,10
   43b50:	000f883a 	mov	r7,zero
   43b54:	0046ac00 	call	46ac0 <__multadd>
   43b58:	d9800d17 	ldw	r6,52(sp)
   43b5c:	d8800715 	stw	r2,28(sp)
   43b60:	31bfffc4 	addi	r6,r6,-1
   43b64:	d9800d15 	stw	r6,52(sp)
   43b68:	b001a71e 	bne	r22,zero,44208 <_dtoa_r+0x1590>
   43b6c:	d8800e17 	ldw	r2,56(sp)
   43b70:	d8800f15 	stw	r2,60(sp)
   43b74:	003e8006 	br	43578 <_dtoa_r+0x900>
   43b78:	90800417 	ldw	r2,16(r18)
   43b7c:	1085883a 	add	r2,r2,r2
   43b80:	1085883a 	add	r2,r2,r2
   43b84:	1485883a 	add	r2,r2,r18
   43b88:	11000417 	ldw	r4,16(r2)
   43b8c:	0045e340 	call	45e34 <__hi0bits>
   43b90:	00c00804 	movi	r3,32
   43b94:	1887c83a 	sub	r3,r3,r2
   43b98:	003e5a06 	br	43504 <_dtoa_r+0x88c>
   43b9c:	d9400717 	ldw	r5,28(sp)
   43ba0:	d9801017 	ldw	r6,64(sp)
   43ba4:	d9001617 	ldw	r4,88(sp)
   43ba8:	0046bc00 	call	46bc0 <__pow5mult>
   43bac:	d8800715 	stw	r2,28(sp)
   43bb0:	003e4306 	br	434c0 <_dtoa_r+0x848>
   43bb4:	d9800f17 	ldw	r6,60(sp)
   43bb8:	d8800d17 	ldw	r2,52(sp)
   43bbc:	d9800315 	stw	r6,12(sp)
   43bc0:	d8800415 	stw	r2,16(sp)
   43bc4:	d8c00b17 	ldw	r3,44(sp)
   43bc8:	1805003a 	cmpeq	r2,r3,zero
   43bcc:	1000e21e 	bne	r2,zero,43f58 <_dtoa_r+0x12e0>
   43bd0:	d9000317 	ldw	r4,12(sp)
   43bd4:	0005883a 	mov	r2,zero
   43bd8:	00cff834 	movhi	r3,16352
   43bdc:	200c90fa 	slli	r6,r4,3
   43be0:	01100034 	movhi	r4,16384
   43be4:	21004604 	addi	r4,r4,280
   43be8:	180b883a 	mov	r5,r3
   43bec:	310d883a 	add	r6,r6,r4
   43bf0:	327fff17 	ldw	r9,-4(r6)
   43bf4:	323ffe17 	ldw	r8,-8(r6)
   43bf8:	1009883a 	mov	r4,r2
   43bfc:	480f883a 	mov	r7,r9
   43c00:	400d883a 	mov	r6,r8
   43c04:	0048fb40 	call	48fb4 <__divdf3>
   43c08:	180b883a 	mov	r5,r3
   43c0c:	b00d883a 	mov	r6,r22
   43c10:	b80f883a 	mov	r7,r23
   43c14:	1009883a 	mov	r4,r2
   43c18:	0048b0c0 	call	48b0c <__subdf3>
   43c1c:	a80b883a 	mov	r5,r21
   43c20:	a009883a 	mov	r4,r20
   43c24:	d8c01915 	stw	r3,100(sp)
   43c28:	d8801815 	stw	r2,96(sp)
   43c2c:	00495ac0 	call	495ac <__fixdfsi>
   43c30:	1009883a 	mov	r4,r2
   43c34:	1027883a 	mov	r19,r2
   43c38:	00494b40 	call	494b4 <__floatsidf>
   43c3c:	a80b883a 	mov	r5,r21
   43c40:	a009883a 	mov	r4,r20
   43c44:	180f883a 	mov	r7,r3
   43c48:	100d883a 	mov	r6,r2
   43c4c:	0048b0c0 	call	48b0c <__subdf3>
   43c50:	d9801817 	ldw	r6,96(sp)
   43c54:	1823883a 	mov	r17,r3
   43c58:	d8801415 	stw	r2,80(sp)
   43c5c:	302d883a 	mov	r22,r6
   43c60:	d9800517 	ldw	r6,20(sp)
   43c64:	9cc00c04 	addi	r19,r19,48
   43c68:	dc401515 	stw	r17,84(sp)
   43c6c:	d8c01917 	ldw	r3,100(sp)
   43c70:	34c00005 	stb	r19,0(r6)
   43c74:	d8800517 	ldw	r2,20(sp)
   43c78:	d9401917 	ldw	r5,100(sp)
   43c7c:	d9801417 	ldw	r6,80(sp)
   43c80:	b009883a 	mov	r4,r22
   43c84:	880f883a 	mov	r7,r17
   43c88:	182f883a 	mov	r23,r3
   43c8c:	17000044 	addi	fp,r2,1
   43c90:	004931c0 	call	4931c <__gtdf2>
   43c94:	00804e16 	blt	zero,r2,43dd0 <_dtoa_r+0x1158>
   43c98:	d9801417 	ldw	r6,80(sp)
   43c9c:	0005883a 	mov	r2,zero
   43ca0:	00cffc34 	movhi	r3,16368
   43ca4:	180b883a 	mov	r5,r3
   43ca8:	880f883a 	mov	r7,r17
   43cac:	1009883a 	mov	r4,r2
   43cb0:	0048b0c0 	call	48b0c <__subdf3>
   43cb4:	d9401917 	ldw	r5,100(sp)
   43cb8:	180f883a 	mov	r7,r3
   43cbc:	b009883a 	mov	r4,r22
   43cc0:	100d883a 	mov	r6,r2
   43cc4:	004931c0 	call	4931c <__gtdf2>
   43cc8:	00bda216 	blt	zero,r2,43354 <_dtoa_r+0x6dc>
   43ccc:	d8c00317 	ldw	r3,12(sp)
   43cd0:	00800044 	movi	r2,1
   43cd4:	10c01216 	blt	r2,r3,43d20 <_dtoa_r+0x10a8>
   43cd8:	003d4506 	br	431f0 <_dtoa_r+0x578>
   43cdc:	d9801417 	ldw	r6,80(sp)
   43ce0:	0005883a 	mov	r2,zero
   43ce4:	00cffc34 	movhi	r3,16368
   43ce8:	180b883a 	mov	r5,r3
   43cec:	880f883a 	mov	r7,r17
   43cf0:	1009883a 	mov	r4,r2
   43cf4:	0048b0c0 	call	48b0c <__subdf3>
   43cf8:	d9c01b17 	ldw	r7,108(sp)
   43cfc:	180b883a 	mov	r5,r3
   43d00:	1009883a 	mov	r4,r2
   43d04:	b00d883a 	mov	r6,r22
   43d08:	004942c0 	call	4942c <__ltdf2>
   43d0c:	103d9116 	blt	r2,zero,43354 <_dtoa_r+0x6dc>
   43d10:	d9800517 	ldw	r6,20(sp)
   43d14:	d9000317 	ldw	r4,12(sp)
   43d18:	3105883a 	add	r2,r6,r4
   43d1c:	e0bd3426 	beq	fp,r2,431f0 <_dtoa_r+0x578>
   43d20:	04500934 	movhi	r17,16420
   43d24:	0021883a 	mov	r16,zero
   43d28:	b80b883a 	mov	r5,r23
   43d2c:	b009883a 	mov	r4,r22
   43d30:	800d883a 	mov	r6,r16
   43d34:	880f883a 	mov	r7,r17
   43d38:	0048c000 	call	48c00 <__muldf3>
   43d3c:	d9401517 	ldw	r5,84(sp)
   43d40:	d9001417 	ldw	r4,80(sp)
   43d44:	880f883a 	mov	r7,r17
   43d48:	000d883a 	mov	r6,zero
   43d4c:	d8801a15 	stw	r2,104(sp)
   43d50:	d8c01b15 	stw	r3,108(sp)
   43d54:	0048c000 	call	48c00 <__muldf3>
   43d58:	180b883a 	mov	r5,r3
   43d5c:	1009883a 	mov	r4,r2
   43d60:	1823883a 	mov	r17,r3
   43d64:	1021883a 	mov	r16,r2
   43d68:	00495ac0 	call	495ac <__fixdfsi>
   43d6c:	1009883a 	mov	r4,r2
   43d70:	102b883a 	mov	r21,r2
   43d74:	00494b40 	call	494b4 <__floatsidf>
   43d78:	880b883a 	mov	r5,r17
   43d7c:	8009883a 	mov	r4,r16
   43d80:	180f883a 	mov	r7,r3
   43d84:	100d883a 	mov	r6,r2
   43d88:	0048b0c0 	call	48b0c <__subdf3>
   43d8c:	1021883a 	mov	r16,r2
   43d90:	d9001b17 	ldw	r4,108(sp)
   43d94:	1823883a 	mov	r17,r3
   43d98:	dc001415 	stw	r16,80(sp)
   43d9c:	ad400c04 	addi	r21,r21,48
   43da0:	dc401515 	stw	r17,84(sp)
   43da4:	d8801a17 	ldw	r2,104(sp)
   43da8:	e5400005 	stb	r21,0(fp)
   43dac:	202f883a 	mov	r23,r4
   43db0:	d9c01b17 	ldw	r7,108(sp)
   43db4:	d9001417 	ldw	r4,80(sp)
   43db8:	880b883a 	mov	r5,r17
   43dbc:	100d883a 	mov	r6,r2
   43dc0:	102d883a 	mov	r22,r2
   43dc4:	e7000044 	addi	fp,fp,1
   43dc8:	004942c0 	call	4942c <__ltdf2>
   43dcc:	103fc30e 	bge	r2,zero,43cdc <_dtoa_r+0x1064>
   43dd0:	d9000417 	ldw	r4,16(sp)
   43dd4:	d9000d15 	stw	r4,52(sp)
   43dd8:	003d7106 	br	433a0 <_dtoa_r+0x728>
   43ddc:	d9801717 	ldw	r6,92(sp)
   43de0:	00800084 	movi	r2,2
   43de4:	11bde60e 	bge	r2,r6,43580 <_dtoa_r+0x908>
   43de8:	203cfb1e 	bne	r4,zero,431d8 <_dtoa_r+0x560>
   43dec:	d9001617 	ldw	r4,88(sp)
   43df0:	900b883a 	mov	r5,r18
   43df4:	01800144 	movi	r6,5
   43df8:	000f883a 	mov	r7,zero
   43dfc:	0046ac00 	call	46ac0 <__multadd>
   43e00:	d9000717 	ldw	r4,28(sp)
   43e04:	100b883a 	mov	r5,r2
   43e08:	1025883a 	mov	r18,r2
   43e0c:	0045f680 	call	45f68 <__mcmp>
   43e10:	00bcf10e 	bge	zero,r2,431d8 <_dtoa_r+0x560>
   43e14:	d8c00d17 	ldw	r3,52(sp)
   43e18:	d9000517 	ldw	r4,20(sp)
   43e1c:	d8000615 	stw	zero,24(sp)
   43e20:	18c00044 	addi	r3,r3,1
   43e24:	d8c00d15 	stw	r3,52(sp)
   43e28:	00800c44 	movi	r2,49
   43e2c:	27000044 	addi	fp,r4,1
   43e30:	20800005 	stb	r2,0(r4)
   43e34:	003e8906 	br	4385c <_dtoa_r+0xbe4>
   43e38:	d8c00517 	ldw	r3,20(sp)
   43e3c:	003bc206 	br	42d48 <_dtoa_r+0xd0>
   43e40:	01900034 	movhi	r6,16384
   43e44:	31807804 	addi	r6,r6,480
   43e48:	30c00917 	ldw	r3,36(r6)
   43e4c:	30800817 	ldw	r2,32(r6)
   43e50:	d9001217 	ldw	r4,72(sp)
   43e54:	d9401317 	ldw	r5,76(sp)
   43e58:	180f883a 	mov	r7,r3
   43e5c:	100d883a 	mov	r6,r2
   43e60:	0048fb40 	call	48fb4 <__divdf3>
   43e64:	948003cc 	andi	r18,r18,15
   43e68:	058000c4 	movi	r22,3
   43e6c:	1029883a 	mov	r20,r2
   43e70:	182b883a 	mov	r21,r3
   43e74:	003c8906 	br	4309c <_dtoa_r+0x424>
   43e78:	d9001017 	ldw	r4,64(sp)
   43e7c:	d9800917 	ldw	r6,36(sp)
   43e80:	0025883a 	mov	r18,zero
   43e84:	1105c83a 	sub	r2,r2,r4
   43e88:	2089883a 	add	r4,r4,r2
   43e8c:	308d883a 	add	r6,r6,r2
   43e90:	d9001015 	stw	r4,64(sp)
   43e94:	d9800915 	stw	r6,36(sp)
   43e98:	003e3206 	br	43764 <_dtoa_r+0xaec>
   43e9c:	28800044 	addi	r2,r5,1
   43ea0:	27000044 	addi	fp,r4,1
   43ea4:	20800005 	stb	r2,0(r4)
   43ea8:	003e6c06 	br	4385c <_dtoa_r+0xbe4>
   43eac:	d8800f17 	ldw	r2,60(sp)
   43eb0:	00bce016 	blt	zero,r2,43234 <_dtoa_r+0x5bc>
   43eb4:	d9800f17 	ldw	r6,60(sp)
   43eb8:	303cc51e 	bne	r6,zero,431d0 <_dtoa_r+0x558>
   43ebc:	0005883a 	mov	r2,zero
   43ec0:	00d00534 	movhi	r3,16404
   43ec4:	980b883a 	mov	r5,r19
   43ec8:	180f883a 	mov	r7,r3
   43ecc:	9009883a 	mov	r4,r18
   43ed0:	100d883a 	mov	r6,r2
   43ed4:	0048c000 	call	48c00 <__muldf3>
   43ed8:	180b883a 	mov	r5,r3
   43edc:	a80f883a 	mov	r7,r21
   43ee0:	1009883a 	mov	r4,r2
   43ee4:	a00d883a 	mov	r6,r20
   43ee8:	00493a40 	call	493a4 <__gedf2>
   43eec:	103cb80e 	bge	r2,zero,431d0 <_dtoa_r+0x558>
   43ef0:	0027883a 	mov	r19,zero
   43ef4:	0025883a 	mov	r18,zero
   43ef8:	003fc606 	br	43e14 <_dtoa_r+0x119c>
   43efc:	99400117 	ldw	r5,4(r19)
   43f00:	d9001617 	ldw	r4,88(sp)
   43f04:	004638c0 	call	4638c <_Balloc>
   43f08:	99800417 	ldw	r6,16(r19)
   43f0c:	11000304 	addi	r4,r2,12
   43f10:	99400304 	addi	r5,r19,12
   43f14:	318d883a 	add	r6,r6,r6
   43f18:	318d883a 	add	r6,r6,r6
   43f1c:	31800204 	addi	r6,r6,8
   43f20:	1023883a 	mov	r17,r2
   43f24:	0045bf40 	call	45bf4 <memcpy>
   43f28:	d9001617 	ldw	r4,88(sp)
   43f2c:	880b883a 	mov	r5,r17
   43f30:	01800044 	movi	r6,1
   43f34:	00467500 	call	46750 <__lshift>
   43f38:	100b883a 	mov	r5,r2
   43f3c:	003d9c06 	br	435b0 <_dtoa_r+0x938>
   43f40:	00800e44 	movi	r2,57
   43f44:	b8807026 	beq	r23,r2,44108 <_dtoa_r+0x1490>
   43f48:	b8800044 	addi	r2,r23,1
   43f4c:	b7000044 	addi	fp,r22,1
   43f50:	b0800005 	stb	r2,0(r22)
   43f54:	003e4106 	br	4385c <_dtoa_r+0xbe4>
   43f58:	d8800317 	ldw	r2,12(sp)
   43f5c:	01900034 	movhi	r6,16384
   43f60:	31804604 	addi	r6,r6,280
   43f64:	b009883a 	mov	r4,r22
   43f68:	100e90fa 	slli	r7,r2,3
   43f6c:	b80b883a 	mov	r5,r23
   43f70:	398f883a 	add	r7,r7,r6
   43f74:	38bffe17 	ldw	r2,-8(r7)
   43f78:	d9800517 	ldw	r6,20(sp)
   43f7c:	38ffff17 	ldw	r3,-4(r7)
   43f80:	37000044 	addi	fp,r6,1
   43f84:	180f883a 	mov	r7,r3
   43f88:	100d883a 	mov	r6,r2
   43f8c:	0048c000 	call	48c00 <__muldf3>
   43f90:	a80b883a 	mov	r5,r21
   43f94:	a009883a 	mov	r4,r20
   43f98:	182f883a 	mov	r23,r3
   43f9c:	102d883a 	mov	r22,r2
   43fa0:	00495ac0 	call	495ac <__fixdfsi>
   43fa4:	1009883a 	mov	r4,r2
   43fa8:	1027883a 	mov	r19,r2
   43fac:	00494b40 	call	494b4 <__floatsidf>
   43fb0:	a80b883a 	mov	r5,r21
   43fb4:	a009883a 	mov	r4,r20
   43fb8:	180f883a 	mov	r7,r3
   43fbc:	100d883a 	mov	r6,r2
   43fc0:	0048b0c0 	call	48b0c <__subdf3>
   43fc4:	180b883a 	mov	r5,r3
   43fc8:	d8c00517 	ldw	r3,20(sp)
   43fcc:	9cc00c04 	addi	r19,r19,48
   43fd0:	1009883a 	mov	r4,r2
   43fd4:	1cc00005 	stb	r19,0(r3)
   43fd8:	2021883a 	mov	r16,r4
   43fdc:	d9000317 	ldw	r4,12(sp)
   43fe0:	00800044 	movi	r2,1
   43fe4:	2823883a 	mov	r17,r5
   43fe8:	20802226 	beq	r4,r2,44074 <_dtoa_r+0x13fc>
   43fec:	1029883a 	mov	r20,r2
   43ff0:	0005883a 	mov	r2,zero
   43ff4:	00d00934 	movhi	r3,16420
   43ff8:	180f883a 	mov	r7,r3
   43ffc:	100d883a 	mov	r6,r2
   44000:	880b883a 	mov	r5,r17
   44004:	8009883a 	mov	r4,r16
   44008:	0048c000 	call	48c00 <__muldf3>
   4400c:	180b883a 	mov	r5,r3
   44010:	1009883a 	mov	r4,r2
   44014:	1823883a 	mov	r17,r3
   44018:	1021883a 	mov	r16,r2
   4401c:	00495ac0 	call	495ac <__fixdfsi>
   44020:	1009883a 	mov	r4,r2
   44024:	102b883a 	mov	r21,r2
   44028:	00494b40 	call	494b4 <__floatsidf>
   4402c:	880b883a 	mov	r5,r17
   44030:	8009883a 	mov	r4,r16
   44034:	180f883a 	mov	r7,r3
   44038:	100d883a 	mov	r6,r2
   4403c:	0048b0c0 	call	48b0c <__subdf3>
   44040:	180b883a 	mov	r5,r3
   44044:	d8c00517 	ldw	r3,20(sp)
   44048:	1009883a 	mov	r4,r2
   4404c:	ad400c04 	addi	r21,r21,48
   44050:	1d05883a 	add	r2,r3,r20
   44054:	15400005 	stb	r21,0(r2)
   44058:	2021883a 	mov	r16,r4
   4405c:	d9000317 	ldw	r4,12(sp)
   44060:	a5000044 	addi	r20,r20,1
   44064:	2823883a 	mov	r17,r5
   44068:	a13fe11e 	bne	r20,r4,43ff0 <_dtoa_r+0x1378>
   4406c:	e505883a 	add	r2,fp,r20
   44070:	173fffc4 	addi	fp,r2,-1
   44074:	0025883a 	mov	r18,zero
   44078:	04cff834 	movhi	r19,16352
   4407c:	b009883a 	mov	r4,r22
   44080:	b80b883a 	mov	r5,r23
   44084:	900d883a 	mov	r6,r18
   44088:	980f883a 	mov	r7,r19
   4408c:	0048b8c0 	call	48b8c <__adddf3>
   44090:	180b883a 	mov	r5,r3
   44094:	1009883a 	mov	r4,r2
   44098:	800d883a 	mov	r6,r16
   4409c:	880f883a 	mov	r7,r17
   440a0:	004942c0 	call	4942c <__ltdf2>
   440a4:	103cab16 	blt	r2,zero,43354 <_dtoa_r+0x6dc>
   440a8:	0009883a 	mov	r4,zero
   440ac:	980b883a 	mov	r5,r19
   440b0:	b80f883a 	mov	r7,r23
   440b4:	b00d883a 	mov	r6,r22
   440b8:	0048b0c0 	call	48b0c <__subdf3>
   440bc:	180b883a 	mov	r5,r3
   440c0:	880f883a 	mov	r7,r17
   440c4:	1009883a 	mov	r4,r2
   440c8:	800d883a 	mov	r6,r16
   440cc:	004931c0 	call	4931c <__gtdf2>
   440d0:	00bc470e 	bge	zero,r2,431f0 <_dtoa_r+0x578>
   440d4:	00c00c04 	movi	r3,48
   440d8:	e73fffc4 	addi	fp,fp,-1
   440dc:	e0800007 	ldb	r2,0(fp)
   440e0:	10fffd26 	beq	r2,r3,440d8 <_dtoa_r+0x1460>
   440e4:	d9800417 	ldw	r6,16(sp)
   440e8:	e7000044 	addi	fp,fp,1
   440ec:	d9800d15 	stw	r6,52(sp)
   440f0:	003cab06 	br	433a0 <_dtoa_r+0x728>
   440f4:	d8c00f17 	ldw	r3,60(sp)
   440f8:	d9001117 	ldw	r4,68(sp)
   440fc:	20e1c83a 	sub	r16,r4,r3
   44100:	0007883a 	mov	r3,zero
   44104:	003d9b06 	br	43774 <_dtoa_r+0xafc>
   44108:	00800e44 	movi	r2,57
   4410c:	b0800005 	stb	r2,0(r22)
   44110:	b5800044 	addi	r22,r22,1
   44114:	003dc106 	br	4381c <_dtoa_r+0xba4>
   44118:	05800084 	movi	r22,2
   4411c:	003bf706 	br	430fc <_dtoa_r+0x484>
   44120:	d9000f17 	ldw	r4,60(sp)
   44124:	013c000e 	bge	zero,r4,43128 <_dtoa_r+0x4b0>
   44128:	d9800e17 	ldw	r6,56(sp)
   4412c:	01bc300e 	bge	zero,r6,431f0 <_dtoa_r+0x578>
   44130:	0005883a 	mov	r2,zero
   44134:	00d00934 	movhi	r3,16420
   44138:	a80b883a 	mov	r5,r21
   4413c:	180f883a 	mov	r7,r3
   44140:	a009883a 	mov	r4,r20
   44144:	100d883a 	mov	r6,r2
   44148:	0048c000 	call	48c00 <__muldf3>
   4414c:	b1000044 	addi	r4,r22,1
   44150:	1021883a 	mov	r16,r2
   44154:	1823883a 	mov	r17,r3
   44158:	00494b40 	call	494b4 <__floatsidf>
   4415c:	880b883a 	mov	r5,r17
   44160:	8009883a 	mov	r4,r16
   44164:	180f883a 	mov	r7,r3
   44168:	100d883a 	mov	r6,r2
   4416c:	0048c000 	call	48c00 <__muldf3>
   44170:	0011883a 	mov	r8,zero
   44174:	02500734 	movhi	r9,16412
   44178:	180b883a 	mov	r5,r3
   4417c:	480f883a 	mov	r7,r9
   44180:	1009883a 	mov	r4,r2
   44184:	400d883a 	mov	r6,r8
   44188:	0048b8c0 	call	48b8c <__adddf3>
   4418c:	102d883a 	mov	r22,r2
   44190:	00bf3034 	movhi	r2,64704
   44194:	10ef883a 	add	r23,r2,r3
   44198:	d8800d17 	ldw	r2,52(sp)
   4419c:	d8c00e17 	ldw	r3,56(sp)
   441a0:	8029883a 	mov	r20,r16
   441a4:	10bfffc4 	addi	r2,r2,-1
   441a8:	882b883a 	mov	r21,r17
   441ac:	d8800415 	stw	r2,16(sp)
   441b0:	d8c00315 	stw	r3,12(sp)
   441b4:	003e8306 	br	43bc4 <_dtoa_r+0xf4c>
   441b8:	d8800117 	ldw	r2,4(sp)
   441bc:	dc001117 	ldw	r16,68(sp)
   441c0:	dc801017 	ldw	r18,64(sp)
   441c4:	00c00d84 	movi	r3,54
   441c8:	1887c83a 	sub	r3,r3,r2
   441cc:	003d6906 	br	43774 <_dtoa_r+0xafc>
   441d0:	01800044 	movi	r6,1
   441d4:	3021883a 	mov	r16,r6
   441d8:	d9800f15 	stw	r6,60(sp)
   441dc:	d9802615 	stw	r6,152(sp)
   441e0:	d9800e15 	stw	r6,56(sp)
   441e4:	003b9306 	br	43034 <_dtoa_r+0x3bc>
   441e8:	b021883a 	mov	r16,r22
   441ec:	dd800f15 	stw	r22,60(sp)
   441f0:	003b9006 	br	43034 <_dtoa_r+0x3bc>
   441f4:	103e221e 	bne	r2,zero,43a80 <_dtoa_r+0xe08>
   441f8:	b880004c 	andi	r2,r23,1
   441fc:	1005003a 	cmpeq	r2,r2,zero
   44200:	103e1f1e 	bne	r2,zero,43a80 <_dtoa_r+0xe08>
   44204:	003e1b06 	br	43a74 <_dtoa_r+0xdfc>
   44208:	d9001617 	ldw	r4,88(sp)
   4420c:	980b883a 	mov	r5,r19
   44210:	01800284 	movi	r6,10
   44214:	000f883a 	mov	r7,zero
   44218:	0046ac00 	call	46ac0 <__multadd>
   4421c:	d8c00e17 	ldw	r3,56(sp)
   44220:	1027883a 	mov	r19,r2
   44224:	d8c00f15 	stw	r3,60(sp)
   44228:	003cd306 	br	43578 <_dtoa_r+0x900>

0004422c <_fflush_r>:
   4422c:	defffb04 	addi	sp,sp,-20
   44230:	dcc00315 	stw	r19,12(sp)
   44234:	dc800215 	stw	r18,8(sp)
   44238:	dfc00415 	stw	ra,16(sp)
   4423c:	dc400115 	stw	r17,4(sp)
   44240:	dc000015 	stw	r16,0(sp)
   44244:	2027883a 	mov	r19,r4
   44248:	2825883a 	mov	r18,r5
   4424c:	20000226 	beq	r4,zero,44258 <_fflush_r+0x2c>
   44250:	20800e17 	ldw	r2,56(r4)
   44254:	10005626 	beq	r2,zero,443b0 <_fflush_r+0x184>
   44258:	9100030b 	ldhu	r4,12(r18)
   4425c:	20ffffcc 	andi	r3,r4,65535
   44260:	18e0001c 	xori	r3,r3,32768
   44264:	18e00004 	addi	r3,r3,-32768
   44268:	1880020c 	andi	r2,r3,8
   4426c:	1000261e 	bne	r2,zero,44308 <_fflush_r+0xdc>
   44270:	90c00117 	ldw	r3,4(r18)
   44274:	20820014 	ori	r2,r4,2048
   44278:	9080030d 	sth	r2,12(r18)
   4427c:	1009883a 	mov	r4,r2
   44280:	00c0400e 	bge	zero,r3,44384 <_fflush_r+0x158>
   44284:	92000a17 	ldw	r8,40(r18)
   44288:	40004026 	beq	r8,zero,4438c <_fflush_r+0x160>
   4428c:	2084000c 	andi	r2,r4,4096
   44290:	10005326 	beq	r2,zero,443e0 <_fflush_r+0x1b4>
   44294:	94001417 	ldw	r16,80(r18)
   44298:	9080030b 	ldhu	r2,12(r18)
   4429c:	1080010c 	andi	r2,r2,4
   442a0:	1000481e 	bne	r2,zero,443c4 <_fflush_r+0x198>
   442a4:	91400717 	ldw	r5,28(r18)
   442a8:	9809883a 	mov	r4,r19
   442ac:	800d883a 	mov	r6,r16
   442b0:	000f883a 	mov	r7,zero
   442b4:	403ee83a 	callr	r8
   442b8:	8080261e 	bne	r16,r2,44354 <_fflush_r+0x128>
   442bc:	9080030b 	ldhu	r2,12(r18)
   442c0:	91000417 	ldw	r4,16(r18)
   442c4:	90000115 	stw	zero,4(r18)
   442c8:	10bdffcc 	andi	r2,r2,63487
   442cc:	10ffffcc 	andi	r3,r2,65535
   442d0:	18c4000c 	andi	r3,r3,4096
   442d4:	9080030d 	sth	r2,12(r18)
   442d8:	91000015 	stw	r4,0(r18)
   442dc:	18002b26 	beq	r3,zero,4438c <_fflush_r+0x160>
   442e0:	0007883a 	mov	r3,zero
   442e4:	1805883a 	mov	r2,r3
   442e8:	94001415 	stw	r16,80(r18)
   442ec:	dfc00417 	ldw	ra,16(sp)
   442f0:	dcc00317 	ldw	r19,12(sp)
   442f4:	dc800217 	ldw	r18,8(sp)
   442f8:	dc400117 	ldw	r17,4(sp)
   442fc:	dc000017 	ldw	r16,0(sp)
   44300:	dec00504 	addi	sp,sp,20
   44304:	f800283a 	ret
   44308:	94400417 	ldw	r17,16(r18)
   4430c:	88001f26 	beq	r17,zero,4438c <_fflush_r+0x160>
   44310:	90800017 	ldw	r2,0(r18)
   44314:	18c000cc 	andi	r3,r3,3
   44318:	94400015 	stw	r17,0(r18)
   4431c:	1461c83a 	sub	r16,r2,r17
   44320:	18002526 	beq	r3,zero,443b8 <_fflush_r+0x18c>
   44324:	0005883a 	mov	r2,zero
   44328:	90800215 	stw	r2,8(r18)
   4432c:	0400170e 	bge	zero,r16,4438c <_fflush_r+0x160>
   44330:	90c00917 	ldw	r3,36(r18)
   44334:	91400717 	ldw	r5,28(r18)
   44338:	880d883a 	mov	r6,r17
   4433c:	800f883a 	mov	r7,r16
   44340:	9809883a 	mov	r4,r19
   44344:	183ee83a 	callr	r3
   44348:	88a3883a 	add	r17,r17,r2
   4434c:	80a1c83a 	sub	r16,r16,r2
   44350:	00bff616 	blt	zero,r2,4432c <_fflush_r+0x100>
   44354:	9080030b 	ldhu	r2,12(r18)
   44358:	00ffffc4 	movi	r3,-1
   4435c:	10801014 	ori	r2,r2,64
   44360:	9080030d 	sth	r2,12(r18)
   44364:	1805883a 	mov	r2,r3
   44368:	dfc00417 	ldw	ra,16(sp)
   4436c:	dcc00317 	ldw	r19,12(sp)
   44370:	dc800217 	ldw	r18,8(sp)
   44374:	dc400117 	ldw	r17,4(sp)
   44378:	dc000017 	ldw	r16,0(sp)
   4437c:	dec00504 	addi	sp,sp,20
   44380:	f800283a 	ret
   44384:	90800f17 	ldw	r2,60(r18)
   44388:	00bfbe16 	blt	zero,r2,44284 <_fflush_r+0x58>
   4438c:	0007883a 	mov	r3,zero
   44390:	1805883a 	mov	r2,r3
   44394:	dfc00417 	ldw	ra,16(sp)
   44398:	dcc00317 	ldw	r19,12(sp)
   4439c:	dc800217 	ldw	r18,8(sp)
   443a0:	dc400117 	ldw	r17,4(sp)
   443a4:	dc000017 	ldw	r16,0(sp)
   443a8:	dec00504 	addi	sp,sp,20
   443ac:	f800283a 	ret
   443b0:	00444c40 	call	444c4 <__sinit>
   443b4:	003fa806 	br	44258 <_fflush_r+0x2c>
   443b8:	90800517 	ldw	r2,20(r18)
   443bc:	90800215 	stw	r2,8(r18)
   443c0:	003fda06 	br	4432c <_fflush_r+0x100>
   443c4:	90800117 	ldw	r2,4(r18)
   443c8:	90c00c17 	ldw	r3,48(r18)
   443cc:	80a1c83a 	sub	r16,r16,r2
   443d0:	183fb426 	beq	r3,zero,442a4 <_fflush_r+0x78>
   443d4:	90800f17 	ldw	r2,60(r18)
   443d8:	80a1c83a 	sub	r16,r16,r2
   443dc:	003fb106 	br	442a4 <_fflush_r+0x78>
   443e0:	91400717 	ldw	r5,28(r18)
   443e4:	9809883a 	mov	r4,r19
   443e8:	000d883a 	mov	r6,zero
   443ec:	01c00044 	movi	r7,1
   443f0:	403ee83a 	callr	r8
   443f4:	1021883a 	mov	r16,r2
   443f8:	00bfffc4 	movi	r2,-1
   443fc:	80800226 	beq	r16,r2,44408 <_fflush_r+0x1dc>
   44400:	92000a17 	ldw	r8,40(r18)
   44404:	003fa406 	br	44298 <_fflush_r+0x6c>
   44408:	98c00017 	ldw	r3,0(r19)
   4440c:	00800744 	movi	r2,29
   44410:	18bfde26 	beq	r3,r2,4438c <_fflush_r+0x160>
   44414:	9080030b 	ldhu	r2,12(r18)
   44418:	8007883a 	mov	r3,r16
   4441c:	10801014 	ori	r2,r2,64
   44420:	9080030d 	sth	r2,12(r18)
   44424:	003fcf06 	br	44364 <_fflush_r+0x138>

00044428 <fflush>:
   44428:	01400134 	movhi	r5,4
   4442c:	29508b04 	addi	r5,r5,16940
   44430:	2007883a 	mov	r3,r4
   44434:	20000526 	beq	r4,zero,4444c <fflush+0x24>
   44438:	00900034 	movhi	r2,16384
   4443c:	10876604 	addi	r2,r2,7576
   44440:	11000017 	ldw	r4,0(r2)
   44444:	180b883a 	mov	r5,r3
   44448:	004422c1 	jmpi	4422c <_fflush_r>
   4444c:	00900034 	movhi	r2,16384
   44450:	10876704 	addi	r2,r2,7580
   44454:	11000017 	ldw	r4,0(r2)
   44458:	0044ff81 	jmpi	44ff8 <_fwalk_reent>

0004445c <std>:
   4445c:	00800134 	movhi	r2,4
   44460:	109d3504 	addi	r2,r2,29908
   44464:	20800b15 	stw	r2,44(r4)
   44468:	00800134 	movhi	r2,4
   4446c:	109d7004 	addi	r2,r2,30144
   44470:	20800815 	stw	r2,32(r4)
   44474:	00c00134 	movhi	r3,4
   44478:	18dd5104 	addi	r3,r3,30020
   4447c:	00800134 	movhi	r2,4
   44480:	109d3704 	addi	r2,r2,29916
   44484:	2140030d 	sth	r5,12(r4)
   44488:	2180038d 	sth	r6,14(r4)
   4448c:	20c00915 	stw	r3,36(r4)
   44490:	20800a15 	stw	r2,40(r4)
   44494:	20000015 	stw	zero,0(r4)
   44498:	20000115 	stw	zero,4(r4)
   4449c:	20000215 	stw	zero,8(r4)
   444a0:	20000415 	stw	zero,16(r4)
   444a4:	20000515 	stw	zero,20(r4)
   444a8:	20000615 	stw	zero,24(r4)
   444ac:	21000715 	stw	r4,28(r4)
   444b0:	f800283a 	ret

000444b4 <__sfp_lock_acquire>:
   444b4:	f800283a 	ret

000444b8 <__sfp_lock_release>:
   444b8:	f800283a 	ret

000444bc <__sinit_lock_acquire>:
   444bc:	f800283a 	ret

000444c0 <__sinit_lock_release>:
   444c0:	f800283a 	ret

000444c4 <__sinit>:
   444c4:	20800e17 	ldw	r2,56(r4)
   444c8:	defffd04 	addi	sp,sp,-12
   444cc:	dc400115 	stw	r17,4(sp)
   444d0:	dc000015 	stw	r16,0(sp)
   444d4:	dfc00215 	stw	ra,8(sp)
   444d8:	04400044 	movi	r17,1
   444dc:	01400104 	movi	r5,4
   444e0:	000d883a 	mov	r6,zero
   444e4:	2021883a 	mov	r16,r4
   444e8:	2200bb04 	addi	r8,r4,748
   444ec:	200f883a 	mov	r7,r4
   444f0:	10000526 	beq	r2,zero,44508 <__sinit+0x44>
   444f4:	dfc00217 	ldw	ra,8(sp)
   444f8:	dc400117 	ldw	r17,4(sp)
   444fc:	dc000017 	ldw	r16,0(sp)
   44500:	dec00304 	addi	sp,sp,12
   44504:	f800283a 	ret
   44508:	21000117 	ldw	r4,4(r4)
   4450c:	00800134 	movhi	r2,4
   44510:	10916a04 	addi	r2,r2,17832
   44514:	00c000c4 	movi	r3,3
   44518:	80800f15 	stw	r2,60(r16)
   4451c:	80c0b915 	stw	r3,740(r16)
   44520:	8200ba15 	stw	r8,744(r16)
   44524:	84400e15 	stw	r17,56(r16)
   44528:	8000b815 	stw	zero,736(r16)
   4452c:	004445c0 	call	4445c <std>
   44530:	81000217 	ldw	r4,8(r16)
   44534:	880d883a 	mov	r6,r17
   44538:	800f883a 	mov	r7,r16
   4453c:	01400284 	movi	r5,10
   44540:	004445c0 	call	4445c <std>
   44544:	81000317 	ldw	r4,12(r16)
   44548:	800f883a 	mov	r7,r16
   4454c:	01400484 	movi	r5,18
   44550:	01800084 	movi	r6,2
   44554:	dfc00217 	ldw	ra,8(sp)
   44558:	dc400117 	ldw	r17,4(sp)
   4455c:	dc000017 	ldw	r16,0(sp)
   44560:	dec00304 	addi	sp,sp,12
   44564:	004445c1 	jmpi	4445c <std>

00044568 <__fp_lock>:
   44568:	0005883a 	mov	r2,zero
   4456c:	f800283a 	ret

00044570 <__fp_unlock>:
   44570:	0005883a 	mov	r2,zero
   44574:	f800283a 	ret

00044578 <__fp_unlock_all>:
   44578:	00900034 	movhi	r2,16384
   4457c:	10876604 	addi	r2,r2,7576
   44580:	11000017 	ldw	r4,0(r2)
   44584:	01400134 	movhi	r5,4
   44588:	29515c04 	addi	r5,r5,17776
   4458c:	00450c01 	jmpi	450c0 <_fwalk>

00044590 <__fp_lock_all>:
   44590:	00900034 	movhi	r2,16384
   44594:	10876604 	addi	r2,r2,7576
   44598:	11000017 	ldw	r4,0(r2)
   4459c:	01400134 	movhi	r5,4
   445a0:	29515a04 	addi	r5,r5,17768
   445a4:	00450c01 	jmpi	450c0 <_fwalk>

000445a8 <_cleanup_r>:
   445a8:	01400134 	movhi	r5,4
   445ac:	295e6204 	addi	r5,r5,31112
   445b0:	00450c01 	jmpi	450c0 <_fwalk>

000445b4 <_cleanup>:
   445b4:	00900034 	movhi	r2,16384
   445b8:	10876704 	addi	r2,r2,7580
   445bc:	11000017 	ldw	r4,0(r2)
   445c0:	00445a81 	jmpi	445a8 <_cleanup_r>

000445c4 <__sfmoreglue>:
   445c4:	defffc04 	addi	sp,sp,-16
   445c8:	dc400115 	stw	r17,4(sp)
   445cc:	2c401724 	muli	r17,r5,92
   445d0:	dc800215 	stw	r18,8(sp)
   445d4:	2825883a 	mov	r18,r5
   445d8:	89400304 	addi	r5,r17,12
   445dc:	dc000015 	stw	r16,0(sp)
   445e0:	dfc00315 	stw	ra,12(sp)
   445e4:	00453d00 	call	453d0 <_malloc_r>
   445e8:	0021883a 	mov	r16,zero
   445ec:	880d883a 	mov	r6,r17
   445f0:	000b883a 	mov	r5,zero
   445f4:	10000626 	beq	r2,zero,44610 <__sfmoreglue+0x4c>
   445f8:	11000304 	addi	r4,r2,12
   445fc:	14800115 	stw	r18,4(r2)
   44600:	10000015 	stw	zero,0(r2)
   44604:	11000215 	stw	r4,8(r2)
   44608:	1021883a 	mov	r16,r2
   4460c:	0045d740 	call	45d74 <memset>
   44610:	8005883a 	mov	r2,r16
   44614:	dfc00317 	ldw	ra,12(sp)
   44618:	dc800217 	ldw	r18,8(sp)
   4461c:	dc400117 	ldw	r17,4(sp)
   44620:	dc000017 	ldw	r16,0(sp)
   44624:	dec00404 	addi	sp,sp,16
   44628:	f800283a 	ret

0004462c <__sfp>:
   4462c:	defffd04 	addi	sp,sp,-12
   44630:	00900034 	movhi	r2,16384
   44634:	10876704 	addi	r2,r2,7580
   44638:	dc000015 	stw	r16,0(sp)
   4463c:	14000017 	ldw	r16,0(r2)
   44640:	dc400115 	stw	r17,4(sp)
   44644:	dfc00215 	stw	ra,8(sp)
   44648:	80800e17 	ldw	r2,56(r16)
   4464c:	2023883a 	mov	r17,r4
   44650:	10002626 	beq	r2,zero,446ec <__sfp+0xc0>
   44654:	8400b804 	addi	r16,r16,736
   44658:	80800117 	ldw	r2,4(r16)
   4465c:	81000217 	ldw	r4,8(r16)
   44660:	10ffffc4 	addi	r3,r2,-1
   44664:	18000916 	blt	r3,zero,4468c <__sfp+0x60>
   44668:	2080030f 	ldh	r2,12(r4)
   4466c:	10000b26 	beq	r2,zero,4469c <__sfp+0x70>
   44670:	017fffc4 	movi	r5,-1
   44674:	00000206 	br	44680 <__sfp+0x54>
   44678:	2080030f 	ldh	r2,12(r4)
   4467c:	10000726 	beq	r2,zero,4469c <__sfp+0x70>
   44680:	18ffffc4 	addi	r3,r3,-1
   44684:	21001704 	addi	r4,r4,92
   44688:	197ffb1e 	bne	r3,r5,44678 <__sfp+0x4c>
   4468c:	80800017 	ldw	r2,0(r16)
   44690:	10001926 	beq	r2,zero,446f8 <__sfp+0xcc>
   44694:	1021883a 	mov	r16,r2
   44698:	003fef06 	br	44658 <__sfp+0x2c>
   4469c:	00bfffc4 	movi	r2,-1
   446a0:	00c00044 	movi	r3,1
   446a4:	2080038d 	sth	r2,14(r4)
   446a8:	20c0030d 	sth	r3,12(r4)
   446ac:	20000015 	stw	zero,0(r4)
   446b0:	20000215 	stw	zero,8(r4)
   446b4:	20000115 	stw	zero,4(r4)
   446b8:	20000415 	stw	zero,16(r4)
   446bc:	20000515 	stw	zero,20(r4)
   446c0:	20000615 	stw	zero,24(r4)
   446c4:	20000c15 	stw	zero,48(r4)
   446c8:	20000d15 	stw	zero,52(r4)
   446cc:	20001115 	stw	zero,68(r4)
   446d0:	20001215 	stw	zero,72(r4)
   446d4:	2005883a 	mov	r2,r4
   446d8:	dfc00217 	ldw	ra,8(sp)
   446dc:	dc400117 	ldw	r17,4(sp)
   446e0:	dc000017 	ldw	r16,0(sp)
   446e4:	dec00304 	addi	sp,sp,12
   446e8:	f800283a 	ret
   446ec:	8009883a 	mov	r4,r16
   446f0:	00444c40 	call	444c4 <__sinit>
   446f4:	003fd706 	br	44654 <__sfp+0x28>
   446f8:	8809883a 	mov	r4,r17
   446fc:	01400104 	movi	r5,4
   44700:	00445c40 	call	445c4 <__sfmoreglue>
   44704:	80800015 	stw	r2,0(r16)
   44708:	103fe21e 	bne	r2,zero,44694 <__sfp+0x68>
   4470c:	00800304 	movi	r2,12
   44710:	0009883a 	mov	r4,zero
   44714:	88800015 	stw	r2,0(r17)
   44718:	003fee06 	br	446d4 <__sfp+0xa8>

0004471c <_malloc_trim_r>:
   4471c:	defffb04 	addi	sp,sp,-20
   44720:	dcc00315 	stw	r19,12(sp)
   44724:	04d00034 	movhi	r19,16384
   44728:	9cc1e204 	addi	r19,r19,1928
   4472c:	dc800215 	stw	r18,8(sp)
   44730:	dc400115 	stw	r17,4(sp)
   44734:	dc000015 	stw	r16,0(sp)
   44738:	2823883a 	mov	r17,r5
   4473c:	2025883a 	mov	r18,r4
   44740:	dfc00415 	stw	ra,16(sp)
   44744:	004a57c0 	call	4a57c <__malloc_lock>
   44748:	98800217 	ldw	r2,8(r19)
   4474c:	9009883a 	mov	r4,r18
   44750:	000b883a 	mov	r5,zero
   44754:	10c00117 	ldw	r3,4(r2)
   44758:	00bfff04 	movi	r2,-4
   4475c:	18a0703a 	and	r16,r3,r2
   44760:	8463c83a 	sub	r17,r16,r17
   44764:	8c43fbc4 	addi	r17,r17,4079
   44768:	8822d33a 	srli	r17,r17,12
   4476c:	0083ffc4 	movi	r2,4095
   44770:	8c7fffc4 	addi	r17,r17,-1
   44774:	8822933a 	slli	r17,r17,12
   44778:	1440060e 	bge	r2,r17,44794 <_malloc_trim_r+0x78>
   4477c:	00474640 	call	47464 <_sbrk_r>
   44780:	98c00217 	ldw	r3,8(r19)
   44784:	9009883a 	mov	r4,r18
   44788:	044bc83a 	sub	r5,zero,r17
   4478c:	80c7883a 	add	r3,r16,r3
   44790:	10c00926 	beq	r2,r3,447b8 <_malloc_trim_r+0x9c>
   44794:	004a59c0 	call	4a59c <__malloc_unlock>
   44798:	0005883a 	mov	r2,zero
   4479c:	dfc00417 	ldw	ra,16(sp)
   447a0:	dcc00317 	ldw	r19,12(sp)
   447a4:	dc800217 	ldw	r18,8(sp)
   447a8:	dc400117 	ldw	r17,4(sp)
   447ac:	dc000017 	ldw	r16,0(sp)
   447b0:	dec00504 	addi	sp,sp,20
   447b4:	f800283a 	ret
   447b8:	9009883a 	mov	r4,r18
   447bc:	00474640 	call	47464 <_sbrk_r>
   447c0:	844dc83a 	sub	r6,r16,r17
   447c4:	00ffffc4 	movi	r3,-1
   447c8:	9009883a 	mov	r4,r18
   447cc:	000b883a 	mov	r5,zero
   447d0:	01d00034 	movhi	r7,16384
   447d4:	39c78304 	addi	r7,r7,7692
   447d8:	31800054 	ori	r6,r6,1
   447dc:	10c00926 	beq	r2,r3,44804 <_malloc_trim_r+0xe8>
   447e0:	38800017 	ldw	r2,0(r7)
   447e4:	98c00217 	ldw	r3,8(r19)
   447e8:	9009883a 	mov	r4,r18
   447ec:	1445c83a 	sub	r2,r2,r17
   447f0:	38800015 	stw	r2,0(r7)
   447f4:	19800115 	stw	r6,4(r3)
   447f8:	004a59c0 	call	4a59c <__malloc_unlock>
   447fc:	00800044 	movi	r2,1
   44800:	003fe606 	br	4479c <_malloc_trim_r+0x80>
   44804:	00474640 	call	47464 <_sbrk_r>
   44808:	99800217 	ldw	r6,8(r19)
   4480c:	100f883a 	mov	r7,r2
   44810:	9009883a 	mov	r4,r18
   44814:	1187c83a 	sub	r3,r2,r6
   44818:	008003c4 	movi	r2,15
   4481c:	19400054 	ori	r5,r3,1
   44820:	10ffdc0e 	bge	r2,r3,44794 <_malloc_trim_r+0x78>
   44824:	00900034 	movhi	r2,16384
   44828:	10876b04 	addi	r2,r2,7596
   4482c:	10c00017 	ldw	r3,0(r2)
   44830:	00900034 	movhi	r2,16384
   44834:	10878304 	addi	r2,r2,7692
   44838:	31400115 	stw	r5,4(r6)
   4483c:	38c7c83a 	sub	r3,r7,r3
   44840:	10c00015 	stw	r3,0(r2)
   44844:	003fd306 	br	44794 <_malloc_trim_r+0x78>

00044848 <_free_r>:
   44848:	defffd04 	addi	sp,sp,-12
   4484c:	dc400115 	stw	r17,4(sp)
   44850:	dc000015 	stw	r16,0(sp)
   44854:	dfc00215 	stw	ra,8(sp)
   44858:	2821883a 	mov	r16,r5
   4485c:	2023883a 	mov	r17,r4
   44860:	28005a26 	beq	r5,zero,449cc <_free_r+0x184>
   44864:	004a57c0 	call	4a57c <__malloc_lock>
   44868:	823ffe04 	addi	r8,r16,-8
   4486c:	41400117 	ldw	r5,4(r8)
   44870:	00bfff84 	movi	r2,-2
   44874:	02900034 	movhi	r10,16384
   44878:	5281e204 	addi	r10,r10,1928
   4487c:	288e703a 	and	r7,r5,r2
   44880:	41cd883a 	add	r6,r8,r7
   44884:	30c00117 	ldw	r3,4(r6)
   44888:	51000217 	ldw	r4,8(r10)
   4488c:	00bfff04 	movi	r2,-4
   44890:	1892703a 	and	r9,r3,r2
   44894:	5017883a 	mov	r11,r10
   44898:	31006726 	beq	r6,r4,44a38 <_free_r+0x1f0>
   4489c:	2880004c 	andi	r2,r5,1
   448a0:	1005003a 	cmpeq	r2,r2,zero
   448a4:	32400115 	stw	r9,4(r6)
   448a8:	10001a1e 	bne	r2,zero,44914 <_free_r+0xcc>
   448ac:	000b883a 	mov	r5,zero
   448b0:	3247883a 	add	r3,r6,r9
   448b4:	18800117 	ldw	r2,4(r3)
   448b8:	1080004c 	andi	r2,r2,1
   448bc:	1000231e 	bne	r2,zero,4494c <_free_r+0x104>
   448c0:	280ac03a 	cmpne	r5,r5,zero
   448c4:	3a4f883a 	add	r7,r7,r9
   448c8:	2800451e 	bne	r5,zero,449e0 <_free_r+0x198>
   448cc:	31000217 	ldw	r4,8(r6)
   448d0:	00900034 	movhi	r2,16384
   448d4:	1081e404 	addi	r2,r2,1936
   448d8:	20807b26 	beq	r4,r2,44ac8 <_free_r+0x280>
   448dc:	30800317 	ldw	r2,12(r6)
   448e0:	3a07883a 	add	r3,r7,r8
   448e4:	19c00015 	stw	r7,0(r3)
   448e8:	11000215 	stw	r4,8(r2)
   448ec:	20800315 	stw	r2,12(r4)
   448f0:	38800054 	ori	r2,r7,1
   448f4:	40800115 	stw	r2,4(r8)
   448f8:	28001a26 	beq	r5,zero,44964 <_free_r+0x11c>
   448fc:	8809883a 	mov	r4,r17
   44900:	dfc00217 	ldw	ra,8(sp)
   44904:	dc400117 	ldw	r17,4(sp)
   44908:	dc000017 	ldw	r16,0(sp)
   4490c:	dec00304 	addi	sp,sp,12
   44910:	004a59c1 	jmpi	4a59c <__malloc_unlock>
   44914:	80bffe17 	ldw	r2,-8(r16)
   44918:	50c00204 	addi	r3,r10,8
   4491c:	4091c83a 	sub	r8,r8,r2
   44920:	41000217 	ldw	r4,8(r8)
   44924:	388f883a 	add	r7,r7,r2
   44928:	20c06126 	beq	r4,r3,44ab0 <_free_r+0x268>
   4492c:	40800317 	ldw	r2,12(r8)
   44930:	3247883a 	add	r3,r6,r9
   44934:	000b883a 	mov	r5,zero
   44938:	11000215 	stw	r4,8(r2)
   4493c:	20800315 	stw	r2,12(r4)
   44940:	18800117 	ldw	r2,4(r3)
   44944:	1080004c 	andi	r2,r2,1
   44948:	103fdd26 	beq	r2,zero,448c0 <_free_r+0x78>
   4494c:	38800054 	ori	r2,r7,1
   44950:	3a07883a 	add	r3,r7,r8
   44954:	280ac03a 	cmpne	r5,r5,zero
   44958:	40800115 	stw	r2,4(r8)
   4495c:	19c00015 	stw	r7,0(r3)
   44960:	283fe61e 	bne	r5,zero,448fc <_free_r+0xb4>
   44964:	00807fc4 	movi	r2,511
   44968:	11c01f2e 	bgeu	r2,r7,449e8 <_free_r+0x1a0>
   4496c:	3806d27a 	srli	r3,r7,9
   44970:	1800481e 	bne	r3,zero,44a94 <_free_r+0x24c>
   44974:	3804d0fa 	srli	r2,r7,3
   44978:	100690fa 	slli	r3,r2,3
   4497c:	1acd883a 	add	r6,r3,r11
   44980:	31400217 	ldw	r5,8(r6)
   44984:	31405926 	beq	r6,r5,44aec <_free_r+0x2a4>
   44988:	28800117 	ldw	r2,4(r5)
   4498c:	00ffff04 	movi	r3,-4
   44990:	10c4703a 	and	r2,r2,r3
   44994:	3880022e 	bgeu	r7,r2,449a0 <_free_r+0x158>
   44998:	29400217 	ldw	r5,8(r5)
   4499c:	317ffa1e 	bne	r6,r5,44988 <_free_r+0x140>
   449a0:	29800317 	ldw	r6,12(r5)
   449a4:	41800315 	stw	r6,12(r8)
   449a8:	41400215 	stw	r5,8(r8)
   449ac:	8809883a 	mov	r4,r17
   449b0:	2a000315 	stw	r8,12(r5)
   449b4:	32000215 	stw	r8,8(r6)
   449b8:	dfc00217 	ldw	ra,8(sp)
   449bc:	dc400117 	ldw	r17,4(sp)
   449c0:	dc000017 	ldw	r16,0(sp)
   449c4:	dec00304 	addi	sp,sp,12
   449c8:	004a59c1 	jmpi	4a59c <__malloc_unlock>
   449cc:	dfc00217 	ldw	ra,8(sp)
   449d0:	dc400117 	ldw	r17,4(sp)
   449d4:	dc000017 	ldw	r16,0(sp)
   449d8:	dec00304 	addi	sp,sp,12
   449dc:	f800283a 	ret
   449e0:	31000217 	ldw	r4,8(r6)
   449e4:	003fbd06 	br	448dc <_free_r+0x94>
   449e8:	3806d0fa 	srli	r3,r7,3
   449ec:	00800044 	movi	r2,1
   449f0:	51400117 	ldw	r5,4(r10)
   449f4:	180890fa 	slli	r4,r3,3
   449f8:	1807d0ba 	srai	r3,r3,2
   449fc:	22c9883a 	add	r4,r4,r11
   44a00:	21800217 	ldw	r6,8(r4)
   44a04:	10c4983a 	sll	r2,r2,r3
   44a08:	41000315 	stw	r4,12(r8)
   44a0c:	41800215 	stw	r6,8(r8)
   44a10:	288ab03a 	or	r5,r5,r2
   44a14:	22000215 	stw	r8,8(r4)
   44a18:	8809883a 	mov	r4,r17
   44a1c:	51400115 	stw	r5,4(r10)
   44a20:	32000315 	stw	r8,12(r6)
   44a24:	dfc00217 	ldw	ra,8(sp)
   44a28:	dc400117 	ldw	r17,4(sp)
   44a2c:	dc000017 	ldw	r16,0(sp)
   44a30:	dec00304 	addi	sp,sp,12
   44a34:	004a59c1 	jmpi	4a59c <__malloc_unlock>
   44a38:	2880004c 	andi	r2,r5,1
   44a3c:	3a4d883a 	add	r6,r7,r9
   44a40:	1000071e 	bne	r2,zero,44a60 <_free_r+0x218>
   44a44:	80bffe17 	ldw	r2,-8(r16)
   44a48:	4091c83a 	sub	r8,r8,r2
   44a4c:	41000317 	ldw	r4,12(r8)
   44a50:	40c00217 	ldw	r3,8(r8)
   44a54:	308d883a 	add	r6,r6,r2
   44a58:	20c00215 	stw	r3,8(r4)
   44a5c:	19000315 	stw	r4,12(r3)
   44a60:	00900034 	movhi	r2,16384
   44a64:	10876a04 	addi	r2,r2,7592
   44a68:	11000017 	ldw	r4,0(r2)
   44a6c:	30c00054 	ori	r3,r6,1
   44a70:	52000215 	stw	r8,8(r10)
   44a74:	40c00115 	stw	r3,4(r8)
   44a78:	313fa036 	bltu	r6,r4,448fc <_free_r+0xb4>
   44a7c:	00900034 	movhi	r2,16384
   44a80:	10877904 	addi	r2,r2,7652
   44a84:	11400017 	ldw	r5,0(r2)
   44a88:	8809883a 	mov	r4,r17
   44a8c:	004471c0 	call	4471c <_malloc_trim_r>
   44a90:	003f9a06 	br	448fc <_free_r+0xb4>
   44a94:	00800104 	movi	r2,4
   44a98:	10c0072e 	bgeu	r2,r3,44ab8 <_free_r+0x270>
   44a9c:	00800504 	movi	r2,20
   44aa0:	10c01936 	bltu	r2,r3,44b08 <_free_r+0x2c0>
   44aa4:	188016c4 	addi	r2,r3,91
   44aa8:	100690fa 	slli	r3,r2,3
   44aac:	003fb306 	br	4497c <_free_r+0x134>
   44ab0:	01400044 	movi	r5,1
   44ab4:	003f7e06 	br	448b0 <_free_r+0x68>
   44ab8:	3804d1ba 	srli	r2,r7,6
   44abc:	10800e04 	addi	r2,r2,56
   44ac0:	100690fa 	slli	r3,r2,3
   44ac4:	003fad06 	br	4497c <_free_r+0x134>
   44ac8:	22000315 	stw	r8,12(r4)
   44acc:	22000215 	stw	r8,8(r4)
   44ad0:	3a05883a 	add	r2,r7,r8
   44ad4:	38c00054 	ori	r3,r7,1
   44ad8:	11c00015 	stw	r7,0(r2)
   44adc:	41000215 	stw	r4,8(r8)
   44ae0:	40c00115 	stw	r3,4(r8)
   44ae4:	41000315 	stw	r4,12(r8)
   44ae8:	003f8406 	br	448fc <_free_r+0xb4>
   44aec:	1005d0ba 	srai	r2,r2,2
   44af0:	00c00044 	movi	r3,1
   44af4:	51000117 	ldw	r4,4(r10)
   44af8:	1886983a 	sll	r3,r3,r2
   44afc:	20c8b03a 	or	r4,r4,r3
   44b00:	51000115 	stw	r4,4(r10)
   44b04:	003fa706 	br	449a4 <_free_r+0x15c>
   44b08:	00801504 	movi	r2,84
   44b0c:	10c00436 	bltu	r2,r3,44b20 <_free_r+0x2d8>
   44b10:	3804d33a 	srli	r2,r7,12
   44b14:	10801b84 	addi	r2,r2,110
   44b18:	100690fa 	slli	r3,r2,3
   44b1c:	003f9706 	br	4497c <_free_r+0x134>
   44b20:	00805504 	movi	r2,340
   44b24:	10c00436 	bltu	r2,r3,44b38 <_free_r+0x2f0>
   44b28:	3804d3fa 	srli	r2,r7,15
   44b2c:	10801dc4 	addi	r2,r2,119
   44b30:	100690fa 	slli	r3,r2,3
   44b34:	003f9106 	br	4497c <_free_r+0x134>
   44b38:	00815504 	movi	r2,1364
   44b3c:	10c0032e 	bgeu	r2,r3,44b4c <_free_r+0x304>
   44b40:	00801f84 	movi	r2,126
   44b44:	00c0fc04 	movi	r3,1008
   44b48:	003f8c06 	br	4497c <_free_r+0x134>
   44b4c:	3804d4ba 	srli	r2,r7,18
   44b50:	10801f04 	addi	r2,r2,124
   44b54:	100690fa 	slli	r3,r2,3
   44b58:	003f8806 	br	4497c <_free_r+0x134>

00044b5c <__sfvwrite_r>:
   44b5c:	30800217 	ldw	r2,8(r6)
   44b60:	defff504 	addi	sp,sp,-44
   44b64:	df000915 	stw	fp,36(sp)
   44b68:	dd800715 	stw	r22,28(sp)
   44b6c:	dc800315 	stw	r18,12(sp)
   44b70:	dfc00a15 	stw	ra,40(sp)
   44b74:	ddc00815 	stw	r23,32(sp)
   44b78:	dd400615 	stw	r21,24(sp)
   44b7c:	dd000515 	stw	r20,20(sp)
   44b80:	dcc00415 	stw	r19,16(sp)
   44b84:	dc400215 	stw	r17,8(sp)
   44b88:	dc000115 	stw	r16,4(sp)
   44b8c:	302d883a 	mov	r22,r6
   44b90:	2039883a 	mov	fp,r4
   44b94:	2825883a 	mov	r18,r5
   44b98:	10001c26 	beq	r2,zero,44c0c <__sfvwrite_r+0xb0>
   44b9c:	29c0030b 	ldhu	r7,12(r5)
   44ba0:	3880020c 	andi	r2,r7,8
   44ba4:	10002726 	beq	r2,zero,44c44 <__sfvwrite_r+0xe8>
   44ba8:	28800417 	ldw	r2,16(r5)
   44bac:	10002526 	beq	r2,zero,44c44 <__sfvwrite_r+0xe8>
   44bb0:	3880008c 	andi	r2,r7,2
   44bb4:	b5400017 	ldw	r21,0(r22)
   44bb8:	10002826 	beq	r2,zero,44c5c <__sfvwrite_r+0x100>
   44bbc:	0021883a 	mov	r16,zero
   44bc0:	0023883a 	mov	r17,zero
   44bc4:	880d883a 	mov	r6,r17
   44bc8:	e009883a 	mov	r4,fp
   44bcc:	00810004 	movi	r2,1024
   44bd0:	80006e26 	beq	r16,zero,44d8c <__sfvwrite_r+0x230>
   44bd4:	800f883a 	mov	r7,r16
   44bd8:	91400717 	ldw	r5,28(r18)
   44bdc:	1400012e 	bgeu	r2,r16,44be4 <__sfvwrite_r+0x88>
   44be0:	100f883a 	mov	r7,r2
   44be4:	90c00917 	ldw	r3,36(r18)
   44be8:	183ee83a 	callr	r3
   44bec:	1007883a 	mov	r3,r2
   44bf0:	80a1c83a 	sub	r16,r16,r2
   44bf4:	88a3883a 	add	r17,r17,r2
   44bf8:	00806d0e 	bge	zero,r2,44db0 <__sfvwrite_r+0x254>
   44bfc:	b0800217 	ldw	r2,8(r22)
   44c00:	10c5c83a 	sub	r2,r2,r3
   44c04:	b0800215 	stw	r2,8(r22)
   44c08:	103fee1e 	bne	r2,zero,44bc4 <__sfvwrite_r+0x68>
   44c0c:	0009883a 	mov	r4,zero
   44c10:	2005883a 	mov	r2,r4
   44c14:	dfc00a17 	ldw	ra,40(sp)
   44c18:	df000917 	ldw	fp,36(sp)
   44c1c:	ddc00817 	ldw	r23,32(sp)
   44c20:	dd800717 	ldw	r22,28(sp)
   44c24:	dd400617 	ldw	r21,24(sp)
   44c28:	dd000517 	ldw	r20,20(sp)
   44c2c:	dcc00417 	ldw	r19,16(sp)
   44c30:	dc800317 	ldw	r18,12(sp)
   44c34:	dc400217 	ldw	r17,8(sp)
   44c38:	dc000117 	ldw	r16,4(sp)
   44c3c:	dec00b04 	addi	sp,sp,44
   44c40:	f800283a 	ret
   44c44:	00429240 	call	42924 <__swsetup_r>
   44c48:	1000e41e 	bne	r2,zero,44fdc <__sfvwrite_r+0x480>
   44c4c:	91c0030b 	ldhu	r7,12(r18)
   44c50:	b5400017 	ldw	r21,0(r22)
   44c54:	3880008c 	andi	r2,r7,2
   44c58:	103fd81e 	bne	r2,zero,44bbc <__sfvwrite_r+0x60>
   44c5c:	3880004c 	andi	r2,r7,1
   44c60:	1005003a 	cmpeq	r2,r2,zero
   44c64:	10005726 	beq	r2,zero,44dc4 <__sfvwrite_r+0x268>
   44c68:	0029883a 	mov	r20,zero
   44c6c:	002f883a 	mov	r23,zero
   44c70:	a0004226 	beq	r20,zero,44d7c <__sfvwrite_r+0x220>
   44c74:	3880800c 	andi	r2,r7,512
   44c78:	94000217 	ldw	r16,8(r18)
   44c7c:	10008b26 	beq	r2,zero,44eac <__sfvwrite_r+0x350>
   44c80:	800d883a 	mov	r6,r16
   44c84:	a400a536 	bltu	r20,r16,44f1c <__sfvwrite_r+0x3c0>
   44c88:	3881200c 	andi	r2,r7,1152
   44c8c:	10002726 	beq	r2,zero,44d2c <__sfvwrite_r+0x1d0>
   44c90:	90800517 	ldw	r2,20(r18)
   44c94:	92000417 	ldw	r8,16(r18)
   44c98:	91400017 	ldw	r5,0(r18)
   44c9c:	1087883a 	add	r3,r2,r2
   44ca0:	1887883a 	add	r3,r3,r2
   44ca4:	1808d7fa 	srli	r4,r3,31
   44ca8:	2a21c83a 	sub	r16,r5,r8
   44cac:	80800044 	addi	r2,r16,1
   44cb0:	20c9883a 	add	r4,r4,r3
   44cb4:	2027d07a 	srai	r19,r4,1
   44cb8:	a085883a 	add	r2,r20,r2
   44cbc:	980d883a 	mov	r6,r19
   44cc0:	9880022e 	bgeu	r19,r2,44ccc <__sfvwrite_r+0x170>
   44cc4:	1027883a 	mov	r19,r2
   44cc8:	100d883a 	mov	r6,r2
   44ccc:	3881000c 	andi	r2,r7,1024
   44cd0:	1000b826 	beq	r2,zero,44fb4 <__sfvwrite_r+0x458>
   44cd4:	300b883a 	mov	r5,r6
   44cd8:	e009883a 	mov	r4,fp
   44cdc:	00453d00 	call	453d0 <_malloc_r>
   44ce0:	10003126 	beq	r2,zero,44da8 <__sfvwrite_r+0x24c>
   44ce4:	91400417 	ldw	r5,16(r18)
   44ce8:	1009883a 	mov	r4,r2
   44cec:	800d883a 	mov	r6,r16
   44cf0:	1023883a 	mov	r17,r2
   44cf4:	0045bf40 	call	45bf4 <memcpy>
   44cf8:	90c0030b 	ldhu	r3,12(r18)
   44cfc:	00beffc4 	movi	r2,-1025
   44d00:	1886703a 	and	r3,r3,r2
   44d04:	18c02014 	ori	r3,r3,128
   44d08:	90c0030d 	sth	r3,12(r18)
   44d0c:	9c07c83a 	sub	r3,r19,r16
   44d10:	8c05883a 	add	r2,r17,r16
   44d14:	a00d883a 	mov	r6,r20
   44d18:	a021883a 	mov	r16,r20
   44d1c:	90800015 	stw	r2,0(r18)
   44d20:	90c00215 	stw	r3,8(r18)
   44d24:	94400415 	stw	r17,16(r18)
   44d28:	94c00515 	stw	r19,20(r18)
   44d2c:	91000017 	ldw	r4,0(r18)
   44d30:	b80b883a 	mov	r5,r23
   44d34:	a023883a 	mov	r17,r20
   44d38:	0045c940 	call	45c94 <memmove>
   44d3c:	90c00217 	ldw	r3,8(r18)
   44d40:	90800017 	ldw	r2,0(r18)
   44d44:	a027883a 	mov	r19,r20
   44d48:	1c07c83a 	sub	r3,r3,r16
   44d4c:	1405883a 	add	r2,r2,r16
   44d50:	90c00215 	stw	r3,8(r18)
   44d54:	a021883a 	mov	r16,r20
   44d58:	90800015 	stw	r2,0(r18)
   44d5c:	b0800217 	ldw	r2,8(r22)
   44d60:	1405c83a 	sub	r2,r2,r16
   44d64:	b0800215 	stw	r2,8(r22)
   44d68:	103fa826 	beq	r2,zero,44c0c <__sfvwrite_r+0xb0>
   44d6c:	a469c83a 	sub	r20,r20,r17
   44d70:	91c0030b 	ldhu	r7,12(r18)
   44d74:	bcef883a 	add	r23,r23,r19
   44d78:	a03fbe1e 	bne	r20,zero,44c74 <__sfvwrite_r+0x118>
   44d7c:	adc00017 	ldw	r23,0(r21)
   44d80:	ad000117 	ldw	r20,4(r21)
   44d84:	ad400204 	addi	r21,r21,8
   44d88:	003fb906 	br	44c70 <__sfvwrite_r+0x114>
   44d8c:	ac400017 	ldw	r17,0(r21)
   44d90:	ac000117 	ldw	r16,4(r21)
   44d94:	ad400204 	addi	r21,r21,8
   44d98:	003f8a06 	br	44bc4 <__sfvwrite_r+0x68>
   44d9c:	91400417 	ldw	r5,16(r18)
   44da0:	e009883a 	mov	r4,fp
   44da4:	00448480 	call	44848 <_free_r>
   44da8:	00800304 	movi	r2,12
   44dac:	e0800015 	stw	r2,0(fp)
   44db0:	9080030b 	ldhu	r2,12(r18)
   44db4:	013fffc4 	movi	r4,-1
   44db8:	10801014 	ori	r2,r2,64
   44dbc:	9080030d 	sth	r2,12(r18)
   44dc0:	003f9306 	br	44c10 <__sfvwrite_r+0xb4>
   44dc4:	0027883a 	mov	r19,zero
   44dc8:	002f883a 	mov	r23,zero
   44dcc:	d8000015 	stw	zero,0(sp)
   44dd0:	0029883a 	mov	r20,zero
   44dd4:	98001e26 	beq	r19,zero,44e50 <__sfvwrite_r+0x2f4>
   44dd8:	d8c00017 	ldw	r3,0(sp)
   44ddc:	1804c03a 	cmpne	r2,r3,zero
   44de0:	10005e26 	beq	r2,zero,44f5c <__sfvwrite_r+0x400>
   44de4:	9821883a 	mov	r16,r19
   44de8:	a4c0012e 	bgeu	r20,r19,44df0 <__sfvwrite_r+0x294>
   44dec:	a021883a 	mov	r16,r20
   44df0:	91000017 	ldw	r4,0(r18)
   44df4:	90800417 	ldw	r2,16(r18)
   44df8:	91800217 	ldw	r6,8(r18)
   44dfc:	91c00517 	ldw	r7,20(r18)
   44e00:	1100022e 	bgeu	r2,r4,44e0c <__sfvwrite_r+0x2b0>
   44e04:	31e3883a 	add	r17,r6,r7
   44e08:	8c001616 	blt	r17,r16,44e64 <__sfvwrite_r+0x308>
   44e0c:	81c03816 	blt	r16,r7,44ef0 <__sfvwrite_r+0x394>
   44e10:	90c00917 	ldw	r3,36(r18)
   44e14:	91400717 	ldw	r5,28(r18)
   44e18:	e009883a 	mov	r4,fp
   44e1c:	b80d883a 	mov	r6,r23
   44e20:	183ee83a 	callr	r3
   44e24:	1023883a 	mov	r17,r2
   44e28:	00bfe10e 	bge	zero,r2,44db0 <__sfvwrite_r+0x254>
   44e2c:	a469c83a 	sub	r20,r20,r17
   44e30:	a0001826 	beq	r20,zero,44e94 <__sfvwrite_r+0x338>
   44e34:	b0800217 	ldw	r2,8(r22)
   44e38:	1445c83a 	sub	r2,r2,r17
   44e3c:	b0800215 	stw	r2,8(r22)
   44e40:	103f7226 	beq	r2,zero,44c0c <__sfvwrite_r+0xb0>
   44e44:	9c67c83a 	sub	r19,r19,r17
   44e48:	bc6f883a 	add	r23,r23,r17
   44e4c:	983fe21e 	bne	r19,zero,44dd8 <__sfvwrite_r+0x27c>
   44e50:	adc00017 	ldw	r23,0(r21)
   44e54:	acc00117 	ldw	r19,4(r21)
   44e58:	ad400204 	addi	r21,r21,8
   44e5c:	d8000015 	stw	zero,0(sp)
   44e60:	003fdc06 	br	44dd4 <__sfvwrite_r+0x278>
   44e64:	b80b883a 	mov	r5,r23
   44e68:	880d883a 	mov	r6,r17
   44e6c:	0045c940 	call	45c94 <memmove>
   44e70:	90c00017 	ldw	r3,0(r18)
   44e74:	e009883a 	mov	r4,fp
   44e78:	900b883a 	mov	r5,r18
   44e7c:	1c47883a 	add	r3,r3,r17
   44e80:	90c00015 	stw	r3,0(r18)
   44e84:	004422c0 	call	4422c <_fflush_r>
   44e88:	103fc91e 	bne	r2,zero,44db0 <__sfvwrite_r+0x254>
   44e8c:	a469c83a 	sub	r20,r20,r17
   44e90:	a03fe81e 	bne	r20,zero,44e34 <__sfvwrite_r+0x2d8>
   44e94:	e009883a 	mov	r4,fp
   44e98:	900b883a 	mov	r5,r18
   44e9c:	004422c0 	call	4422c <_fflush_r>
   44ea0:	103fc31e 	bne	r2,zero,44db0 <__sfvwrite_r+0x254>
   44ea4:	d8000015 	stw	zero,0(sp)
   44ea8:	003fe206 	br	44e34 <__sfvwrite_r+0x2d8>
   44eac:	91000017 	ldw	r4,0(r18)
   44eb0:	90800417 	ldw	r2,16(r18)
   44eb4:	1100022e 	bgeu	r2,r4,44ec0 <__sfvwrite_r+0x364>
   44eb8:	8023883a 	mov	r17,r16
   44ebc:	85003136 	bltu	r16,r20,44f84 <__sfvwrite_r+0x428>
   44ec0:	91c00517 	ldw	r7,20(r18)
   44ec4:	a1c01836 	bltu	r20,r7,44f28 <__sfvwrite_r+0x3cc>
   44ec8:	90c00917 	ldw	r3,36(r18)
   44ecc:	91400717 	ldw	r5,28(r18)
   44ed0:	e009883a 	mov	r4,fp
   44ed4:	b80d883a 	mov	r6,r23
   44ed8:	183ee83a 	callr	r3
   44edc:	1021883a 	mov	r16,r2
   44ee0:	00bfb30e 	bge	zero,r2,44db0 <__sfvwrite_r+0x254>
   44ee4:	1023883a 	mov	r17,r2
   44ee8:	1027883a 	mov	r19,r2
   44eec:	003f9b06 	br	44d5c <__sfvwrite_r+0x200>
   44ef0:	b80b883a 	mov	r5,r23
   44ef4:	800d883a 	mov	r6,r16
   44ef8:	0045c940 	call	45c94 <memmove>
   44efc:	90c00217 	ldw	r3,8(r18)
   44f00:	90800017 	ldw	r2,0(r18)
   44f04:	8023883a 	mov	r17,r16
   44f08:	1c07c83a 	sub	r3,r3,r16
   44f0c:	1405883a 	add	r2,r2,r16
   44f10:	90c00215 	stw	r3,8(r18)
   44f14:	90800015 	stw	r2,0(r18)
   44f18:	003fc406 	br	44e2c <__sfvwrite_r+0x2d0>
   44f1c:	a00d883a 	mov	r6,r20
   44f20:	a021883a 	mov	r16,r20
   44f24:	003f8106 	br	44d2c <__sfvwrite_r+0x1d0>
   44f28:	b80b883a 	mov	r5,r23
   44f2c:	a00d883a 	mov	r6,r20
   44f30:	0045c940 	call	45c94 <memmove>
   44f34:	90c00217 	ldw	r3,8(r18)
   44f38:	90800017 	ldw	r2,0(r18)
   44f3c:	a021883a 	mov	r16,r20
   44f40:	1d07c83a 	sub	r3,r3,r20
   44f44:	1505883a 	add	r2,r2,r20
   44f48:	a023883a 	mov	r17,r20
   44f4c:	a027883a 	mov	r19,r20
   44f50:	90c00215 	stw	r3,8(r18)
   44f54:	90800015 	stw	r2,0(r18)
   44f58:	003f8006 	br	44d5c <__sfvwrite_r+0x200>
   44f5c:	b809883a 	mov	r4,r23
   44f60:	01400284 	movi	r5,10
   44f64:	980d883a 	mov	r6,r19
   44f68:	0045b100 	call	45b10 <memchr>
   44f6c:	10001726 	beq	r2,zero,44fcc <__sfvwrite_r+0x470>
   44f70:	15c5c83a 	sub	r2,r2,r23
   44f74:	15000044 	addi	r20,r2,1
   44f78:	00800044 	movi	r2,1
   44f7c:	d8800015 	stw	r2,0(sp)
   44f80:	003f9806 	br	44de4 <__sfvwrite_r+0x288>
   44f84:	b80b883a 	mov	r5,r23
   44f88:	800d883a 	mov	r6,r16
   44f8c:	0045c940 	call	45c94 <memmove>
   44f90:	90c00017 	ldw	r3,0(r18)
   44f94:	e009883a 	mov	r4,fp
   44f98:	900b883a 	mov	r5,r18
   44f9c:	1c07883a 	add	r3,r3,r16
   44fa0:	90c00015 	stw	r3,0(r18)
   44fa4:	8027883a 	mov	r19,r16
   44fa8:	004422c0 	call	4422c <_fflush_r>
   44fac:	103f6b26 	beq	r2,zero,44d5c <__sfvwrite_r+0x200>
   44fb0:	003f7f06 	br	44db0 <__sfvwrite_r+0x254>
   44fb4:	400b883a 	mov	r5,r8
   44fb8:	e009883a 	mov	r4,fp
   44fbc:	0046e000 	call	46e00 <_realloc_r>
   44fc0:	103f7626 	beq	r2,zero,44d9c <__sfvwrite_r+0x240>
   44fc4:	1023883a 	mov	r17,r2
   44fc8:	003f5006 	br	44d0c <__sfvwrite_r+0x1b0>
   44fcc:	00c00044 	movi	r3,1
   44fd0:	9d000044 	addi	r20,r19,1
   44fd4:	d8c00015 	stw	r3,0(sp)
   44fd8:	003f8206 	br	44de4 <__sfvwrite_r+0x288>
   44fdc:	9080030b 	ldhu	r2,12(r18)
   44fe0:	00c00244 	movi	r3,9
   44fe4:	013fffc4 	movi	r4,-1
   44fe8:	10801014 	ori	r2,r2,64
   44fec:	9080030d 	sth	r2,12(r18)
   44ff0:	e0c00015 	stw	r3,0(fp)
   44ff4:	003f0606 	br	44c10 <__sfvwrite_r+0xb4>

00044ff8 <_fwalk_reent>:
   44ff8:	defff704 	addi	sp,sp,-36
   44ffc:	dcc00315 	stw	r19,12(sp)
   45000:	24c0b804 	addi	r19,r4,736
   45004:	dd800615 	stw	r22,24(sp)
   45008:	dd400515 	stw	r21,20(sp)
   4500c:	dfc00815 	stw	ra,32(sp)
   45010:	ddc00715 	stw	r23,28(sp)
   45014:	dd000415 	stw	r20,16(sp)
   45018:	dc800215 	stw	r18,8(sp)
   4501c:	dc400115 	stw	r17,4(sp)
   45020:	dc000015 	stw	r16,0(sp)
   45024:	202b883a 	mov	r21,r4
   45028:	282d883a 	mov	r22,r5
   4502c:	00444b40 	call	444b4 <__sfp_lock_acquire>
   45030:	98002126 	beq	r19,zero,450b8 <_fwalk_reent+0xc0>
   45034:	002f883a 	mov	r23,zero
   45038:	9c800117 	ldw	r18,4(r19)
   4503c:	9c000217 	ldw	r16,8(r19)
   45040:	90bfffc4 	addi	r2,r18,-1
   45044:	10000d16 	blt	r2,zero,4507c <_fwalk_reent+0x84>
   45048:	0023883a 	mov	r17,zero
   4504c:	053fffc4 	movi	r20,-1
   45050:	8080030f 	ldh	r2,12(r16)
   45054:	8c400044 	addi	r17,r17,1
   45058:	10000626 	beq	r2,zero,45074 <_fwalk_reent+0x7c>
   4505c:	8080038f 	ldh	r2,14(r16)
   45060:	800b883a 	mov	r5,r16
   45064:	a809883a 	mov	r4,r21
   45068:	15000226 	beq	r2,r20,45074 <_fwalk_reent+0x7c>
   4506c:	b03ee83a 	callr	r22
   45070:	b8aeb03a 	or	r23,r23,r2
   45074:	84001704 	addi	r16,r16,92
   45078:	947ff51e 	bne	r18,r17,45050 <_fwalk_reent+0x58>
   4507c:	9cc00017 	ldw	r19,0(r19)
   45080:	983fed1e 	bne	r19,zero,45038 <_fwalk_reent+0x40>
   45084:	00444b80 	call	444b8 <__sfp_lock_release>
   45088:	b805883a 	mov	r2,r23
   4508c:	dfc00817 	ldw	ra,32(sp)
   45090:	ddc00717 	ldw	r23,28(sp)
   45094:	dd800617 	ldw	r22,24(sp)
   45098:	dd400517 	ldw	r21,20(sp)
   4509c:	dd000417 	ldw	r20,16(sp)
   450a0:	dcc00317 	ldw	r19,12(sp)
   450a4:	dc800217 	ldw	r18,8(sp)
   450a8:	dc400117 	ldw	r17,4(sp)
   450ac:	dc000017 	ldw	r16,0(sp)
   450b0:	dec00904 	addi	sp,sp,36
   450b4:	f800283a 	ret
   450b8:	002f883a 	mov	r23,zero
   450bc:	003ff106 	br	45084 <_fwalk_reent+0x8c>

000450c0 <_fwalk>:
   450c0:	defff804 	addi	sp,sp,-32
   450c4:	dcc00315 	stw	r19,12(sp)
   450c8:	24c0b804 	addi	r19,r4,736
   450cc:	dd400515 	stw	r21,20(sp)
   450d0:	dfc00715 	stw	ra,28(sp)
   450d4:	dd800615 	stw	r22,24(sp)
   450d8:	dd000415 	stw	r20,16(sp)
   450dc:	dc800215 	stw	r18,8(sp)
   450e0:	dc400115 	stw	r17,4(sp)
   450e4:	dc000015 	stw	r16,0(sp)
   450e8:	282b883a 	mov	r21,r5
   450ec:	00444b40 	call	444b4 <__sfp_lock_acquire>
   450f0:	98001f26 	beq	r19,zero,45170 <_fwalk+0xb0>
   450f4:	002d883a 	mov	r22,zero
   450f8:	9c800117 	ldw	r18,4(r19)
   450fc:	9c000217 	ldw	r16,8(r19)
   45100:	90bfffc4 	addi	r2,r18,-1
   45104:	10000c16 	blt	r2,zero,45138 <_fwalk+0x78>
   45108:	0023883a 	mov	r17,zero
   4510c:	053fffc4 	movi	r20,-1
   45110:	8080030f 	ldh	r2,12(r16)
   45114:	8c400044 	addi	r17,r17,1
   45118:	10000526 	beq	r2,zero,45130 <_fwalk+0x70>
   4511c:	8080038f 	ldh	r2,14(r16)
   45120:	8009883a 	mov	r4,r16
   45124:	15000226 	beq	r2,r20,45130 <_fwalk+0x70>
   45128:	a83ee83a 	callr	r21
   4512c:	b0acb03a 	or	r22,r22,r2
   45130:	84001704 	addi	r16,r16,92
   45134:	947ff61e 	bne	r18,r17,45110 <_fwalk+0x50>
   45138:	9cc00017 	ldw	r19,0(r19)
   4513c:	983fee1e 	bne	r19,zero,450f8 <_fwalk+0x38>
   45140:	00444b80 	call	444b8 <__sfp_lock_release>
   45144:	b005883a 	mov	r2,r22
   45148:	dfc00717 	ldw	ra,28(sp)
   4514c:	dd800617 	ldw	r22,24(sp)
   45150:	dd400517 	ldw	r21,20(sp)
   45154:	dd000417 	ldw	r20,16(sp)
   45158:	dcc00317 	ldw	r19,12(sp)
   4515c:	dc800217 	ldw	r18,8(sp)
   45160:	dc400117 	ldw	r17,4(sp)
   45164:	dc000017 	ldw	r16,0(sp)
   45168:	dec00804 	addi	sp,sp,32
   4516c:	f800283a 	ret
   45170:	002d883a 	mov	r22,zero
   45174:	003ff206 	br	45140 <_fwalk+0x80>

00045178 <__locale_charset>:
   45178:	d0a00317 	ldw	r2,-32756(gp)
   4517c:	f800283a 	ret

00045180 <_localeconv_r>:
   45180:	00900034 	movhi	r2,16384
   45184:	10803a04 	addi	r2,r2,232
   45188:	f800283a 	ret

0004518c <localeconv>:
   4518c:	00900034 	movhi	r2,16384
   45190:	10876604 	addi	r2,r2,7576
   45194:	11000017 	ldw	r4,0(r2)
   45198:	00451801 	jmpi	45180 <_localeconv_r>

0004519c <_setlocale_r>:
   4519c:	defffc04 	addi	sp,sp,-16
   451a0:	00d00034 	movhi	r3,16384
   451a4:	18c03504 	addi	r3,r3,212
   451a8:	dc800215 	stw	r18,8(sp)
   451ac:	dc400115 	stw	r17,4(sp)
   451b0:	dc000015 	stw	r16,0(sp)
   451b4:	2023883a 	mov	r17,r4
   451b8:	2825883a 	mov	r18,r5
   451bc:	dfc00315 	stw	ra,12(sp)
   451c0:	3021883a 	mov	r16,r6
   451c4:	3009883a 	mov	r4,r6
   451c8:	180b883a 	mov	r5,r3
   451cc:	30000926 	beq	r6,zero,451f4 <_setlocale_r+0x58>
   451d0:	00476200 	call	47620 <strcmp>
   451d4:	8009883a 	mov	r4,r16
   451d8:	01500034 	movhi	r5,16384
   451dc:	29402004 	addi	r5,r5,128
   451e0:	10000b1e 	bne	r2,zero,45210 <_setlocale_r+0x74>
   451e4:	8c000d15 	stw	r16,52(r17)
   451e8:	8c800c15 	stw	r18,48(r17)
   451ec:	00d00034 	movhi	r3,16384
   451f0:	18c03504 	addi	r3,r3,212
   451f4:	1805883a 	mov	r2,r3
   451f8:	dfc00317 	ldw	ra,12(sp)
   451fc:	dc800217 	ldw	r18,8(sp)
   45200:	dc400117 	ldw	r17,4(sp)
   45204:	dc000017 	ldw	r16,0(sp)
   45208:	dec00404 	addi	sp,sp,16
   4520c:	f800283a 	ret
   45210:	00476200 	call	47620 <strcmp>
   45214:	0007883a 	mov	r3,zero
   45218:	103ff226 	beq	r2,zero,451e4 <_setlocale_r+0x48>
   4521c:	003ff506 	br	451f4 <_setlocale_r+0x58>

00045220 <setlocale>:
   45220:	01900034 	movhi	r6,16384
   45224:	31876604 	addi	r6,r6,7576
   45228:	2007883a 	mov	r3,r4
   4522c:	31000017 	ldw	r4,0(r6)
   45230:	280d883a 	mov	r6,r5
   45234:	180b883a 	mov	r5,r3
   45238:	004519c1 	jmpi	4519c <_setlocale_r>

0004523c <__smakebuf_r>:
   4523c:	2880030b 	ldhu	r2,12(r5)
   45240:	deffed04 	addi	sp,sp,-76
   45244:	dc401015 	stw	r17,64(sp)
   45248:	1080008c 	andi	r2,r2,2
   4524c:	dc000f15 	stw	r16,60(sp)
   45250:	dfc01215 	stw	ra,72(sp)
   45254:	dc801115 	stw	r18,68(sp)
   45258:	2821883a 	mov	r16,r5
   4525c:	2023883a 	mov	r17,r4
   45260:	10000b26 	beq	r2,zero,45290 <__smakebuf_r+0x54>
   45264:	28c010c4 	addi	r3,r5,67
   45268:	00800044 	movi	r2,1
   4526c:	28800515 	stw	r2,20(r5)
   45270:	28c00415 	stw	r3,16(r5)
   45274:	28c00015 	stw	r3,0(r5)
   45278:	dfc01217 	ldw	ra,72(sp)
   4527c:	dc801117 	ldw	r18,68(sp)
   45280:	dc401017 	ldw	r17,64(sp)
   45284:	dc000f17 	ldw	r16,60(sp)
   45288:	dec01304 	addi	sp,sp,76
   4528c:	f800283a 	ret
   45290:	2940038f 	ldh	r5,14(r5)
   45294:	28002116 	blt	r5,zero,4531c <__smakebuf_r+0xe0>
   45298:	d80d883a 	mov	r6,sp
   4529c:	004799c0 	call	4799c <_fstat_r>
   452a0:	10001e16 	blt	r2,zero,4531c <__smakebuf_r+0xe0>
   452a4:	d8800117 	ldw	r2,4(sp)
   452a8:	00e00014 	movui	r3,32768
   452ac:	113c000c 	andi	r4,r2,61440
   452b0:	20c03126 	beq	r4,r3,45378 <__smakebuf_r+0x13c>
   452b4:	8080030b 	ldhu	r2,12(r16)
   452b8:	00c80004 	movi	r3,8192
   452bc:	10820014 	ori	r2,r2,2048
   452c0:	8080030d 	sth	r2,12(r16)
   452c4:	20c01e26 	beq	r4,r3,45340 <__smakebuf_r+0x104>
   452c8:	04810004 	movi	r18,1024
   452cc:	8809883a 	mov	r4,r17
   452d0:	900b883a 	mov	r5,r18
   452d4:	00453d00 	call	453d0 <_malloc_r>
   452d8:	1009883a 	mov	r4,r2
   452dc:	10003126 	beq	r2,zero,453a4 <__smakebuf_r+0x168>
   452e0:	80c0030b 	ldhu	r3,12(r16)
   452e4:	00800134 	movhi	r2,4
   452e8:	10916a04 	addi	r2,r2,17832
   452ec:	88800f15 	stw	r2,60(r17)
   452f0:	18c02014 	ori	r3,r3,128
   452f4:	84800515 	stw	r18,20(r16)
   452f8:	80c0030d 	sth	r3,12(r16)
   452fc:	81000415 	stw	r4,16(r16)
   45300:	81000015 	stw	r4,0(r16)
   45304:	dfc01217 	ldw	ra,72(sp)
   45308:	dc801117 	ldw	r18,68(sp)
   4530c:	dc401017 	ldw	r17,64(sp)
   45310:	dc000f17 	ldw	r16,60(sp)
   45314:	dec01304 	addi	sp,sp,76
   45318:	f800283a 	ret
   4531c:	80c0030b 	ldhu	r3,12(r16)
   45320:	1880200c 	andi	r2,r3,128
   45324:	10000426 	beq	r2,zero,45338 <__smakebuf_r+0xfc>
   45328:	04801004 	movi	r18,64
   4532c:	18820014 	ori	r2,r3,2048
   45330:	8080030d 	sth	r2,12(r16)
   45334:	003fe506 	br	452cc <__smakebuf_r+0x90>
   45338:	04810004 	movi	r18,1024
   4533c:	003ffb06 	br	4532c <__smakebuf_r+0xf0>
   45340:	8140038f 	ldh	r5,14(r16)
   45344:	8809883a 	mov	r4,r17
   45348:	0047a100 	call	47a10 <_isatty_r>
   4534c:	103fde26 	beq	r2,zero,452c8 <__smakebuf_r+0x8c>
   45350:	8080030b 	ldhu	r2,12(r16)
   45354:	80c010c4 	addi	r3,r16,67
   45358:	04810004 	movi	r18,1024
   4535c:	10800054 	ori	r2,r2,1
   45360:	8080030d 	sth	r2,12(r16)
   45364:	00800044 	movi	r2,1
   45368:	80c00415 	stw	r3,16(r16)
   4536c:	80800515 	stw	r2,20(r16)
   45370:	80c00015 	stw	r3,0(r16)
   45374:	003fd506 	br	452cc <__smakebuf_r+0x90>
   45378:	80c00a17 	ldw	r3,40(r16)
   4537c:	00800134 	movhi	r2,4
   45380:	109d3704 	addi	r2,r2,29916
   45384:	18bfcb1e 	bne	r3,r2,452b4 <__smakebuf_r+0x78>
   45388:	8080030b 	ldhu	r2,12(r16)
   4538c:	00c10004 	movi	r3,1024
   45390:	1825883a 	mov	r18,r3
   45394:	10c4b03a 	or	r2,r2,r3
   45398:	8080030d 	sth	r2,12(r16)
   4539c:	80c01315 	stw	r3,76(r16)
   453a0:	003fca06 	br	452cc <__smakebuf_r+0x90>
   453a4:	8100030b 	ldhu	r4,12(r16)
   453a8:	2080800c 	andi	r2,r4,512
   453ac:	103fb21e 	bne	r2,zero,45278 <__smakebuf_r+0x3c>
   453b0:	80c010c4 	addi	r3,r16,67
   453b4:	21000094 	ori	r4,r4,2
   453b8:	00800044 	movi	r2,1
   453bc:	80800515 	stw	r2,20(r16)
   453c0:	8100030d 	sth	r4,12(r16)
   453c4:	80c00415 	stw	r3,16(r16)
   453c8:	80c00015 	stw	r3,0(r16)
   453cc:	003faa06 	br	45278 <__smakebuf_r+0x3c>

000453d0 <_malloc_r>:
   453d0:	defff604 	addi	sp,sp,-40
   453d4:	28c002c4 	addi	r3,r5,11
   453d8:	00800584 	movi	r2,22
   453dc:	dc800215 	stw	r18,8(sp)
   453e0:	dfc00915 	stw	ra,36(sp)
   453e4:	df000815 	stw	fp,32(sp)
   453e8:	ddc00715 	stw	r23,28(sp)
   453ec:	dd800615 	stw	r22,24(sp)
   453f0:	dd400515 	stw	r21,20(sp)
   453f4:	dd000415 	stw	r20,16(sp)
   453f8:	dcc00315 	stw	r19,12(sp)
   453fc:	dc400115 	stw	r17,4(sp)
   45400:	dc000015 	stw	r16,0(sp)
   45404:	2025883a 	mov	r18,r4
   45408:	10c01236 	bltu	r2,r3,45454 <_malloc_r+0x84>
   4540c:	04400404 	movi	r17,16
   45410:	8940142e 	bgeu	r17,r5,45464 <_malloc_r+0x94>
   45414:	00800304 	movi	r2,12
   45418:	0007883a 	mov	r3,zero
   4541c:	90800015 	stw	r2,0(r18)
   45420:	1805883a 	mov	r2,r3
   45424:	dfc00917 	ldw	ra,36(sp)
   45428:	df000817 	ldw	fp,32(sp)
   4542c:	ddc00717 	ldw	r23,28(sp)
   45430:	dd800617 	ldw	r22,24(sp)
   45434:	dd400517 	ldw	r21,20(sp)
   45438:	dd000417 	ldw	r20,16(sp)
   4543c:	dcc00317 	ldw	r19,12(sp)
   45440:	dc800217 	ldw	r18,8(sp)
   45444:	dc400117 	ldw	r17,4(sp)
   45448:	dc000017 	ldw	r16,0(sp)
   4544c:	dec00a04 	addi	sp,sp,40
   45450:	f800283a 	ret
   45454:	00bffe04 	movi	r2,-8
   45458:	18a2703a 	and	r17,r3,r2
   4545c:	883fed16 	blt	r17,zero,45414 <_malloc_r+0x44>
   45460:	897fec36 	bltu	r17,r5,45414 <_malloc_r+0x44>
   45464:	9009883a 	mov	r4,r18
   45468:	004a57c0 	call	4a57c <__malloc_lock>
   4546c:	00807dc4 	movi	r2,503
   45470:	14402b2e 	bgeu	r2,r17,45520 <_malloc_r+0x150>
   45474:	8806d27a 	srli	r3,r17,9
   45478:	18003f1e 	bne	r3,zero,45578 <_malloc_r+0x1a8>
   4547c:	880cd0fa 	srli	r6,r17,3
   45480:	300490fa 	slli	r2,r6,3
   45484:	02d00034 	movhi	r11,16384
   45488:	5ac1e204 	addi	r11,r11,1928
   4548c:	12cb883a 	add	r5,r2,r11
   45490:	2c000317 	ldw	r16,12(r5)
   45494:	580f883a 	mov	r7,r11
   45498:	2c00041e 	bne	r5,r16,454ac <_malloc_r+0xdc>
   4549c:	00000a06 	br	454c8 <_malloc_r+0xf8>
   454a0:	1800860e 	bge	r3,zero,456bc <_malloc_r+0x2ec>
   454a4:	84000317 	ldw	r16,12(r16)
   454a8:	2c000726 	beq	r5,r16,454c8 <_malloc_r+0xf8>
   454ac:	80800117 	ldw	r2,4(r16)
   454b0:	00ffff04 	movi	r3,-4
   454b4:	10c8703a 	and	r4,r2,r3
   454b8:	2447c83a 	sub	r3,r4,r17
   454bc:	008003c4 	movi	r2,15
   454c0:	10fff70e 	bge	r2,r3,454a0 <_malloc_r+0xd0>
   454c4:	31bfffc4 	addi	r6,r6,-1
   454c8:	32400044 	addi	r9,r6,1
   454cc:	02900034 	movhi	r10,16384
   454d0:	5281e404 	addi	r10,r10,1936
   454d4:	54000217 	ldw	r16,8(r10)
   454d8:	8280a026 	beq	r16,r10,4575c <_malloc_r+0x38c>
   454dc:	80800117 	ldw	r2,4(r16)
   454e0:	00ffff04 	movi	r3,-4
   454e4:	10ca703a 	and	r5,r2,r3
   454e8:	2c4dc83a 	sub	r6,r5,r17
   454ec:	008003c4 	movi	r2,15
   454f0:	11808316 	blt	r2,r6,45700 <_malloc_r+0x330>
   454f4:	52800315 	stw	r10,12(r10)
   454f8:	52800215 	stw	r10,8(r10)
   454fc:	30002916 	blt	r6,zero,455a4 <_malloc_r+0x1d4>
   45500:	8147883a 	add	r3,r16,r5
   45504:	18800117 	ldw	r2,4(r3)
   45508:	9009883a 	mov	r4,r18
   4550c:	10800054 	ori	r2,r2,1
   45510:	18800115 	stw	r2,4(r3)
   45514:	004a59c0 	call	4a59c <__malloc_unlock>
   45518:	80c00204 	addi	r3,r16,8
   4551c:	003fc006 	br	45420 <_malloc_r+0x50>
   45520:	02d00034 	movhi	r11,16384
   45524:	5ac1e204 	addi	r11,r11,1928
   45528:	8ac5883a 	add	r2,r17,r11
   4552c:	14000317 	ldw	r16,12(r2)
   45530:	580f883a 	mov	r7,r11
   45534:	8806d0fa 	srli	r3,r17,3
   45538:	14006c26 	beq	r2,r16,456ec <_malloc_r+0x31c>
   4553c:	80c00117 	ldw	r3,4(r16)
   45540:	00bfff04 	movi	r2,-4
   45544:	81800317 	ldw	r6,12(r16)
   45548:	1886703a 	and	r3,r3,r2
   4554c:	80c7883a 	add	r3,r16,r3
   45550:	18800117 	ldw	r2,4(r3)
   45554:	81400217 	ldw	r5,8(r16)
   45558:	9009883a 	mov	r4,r18
   4555c:	10800054 	ori	r2,r2,1
   45560:	18800115 	stw	r2,4(r3)
   45564:	31400215 	stw	r5,8(r6)
   45568:	29800315 	stw	r6,12(r5)
   4556c:	004a59c0 	call	4a59c <__malloc_unlock>
   45570:	80c00204 	addi	r3,r16,8
   45574:	003faa06 	br	45420 <_malloc_r+0x50>
   45578:	00800104 	movi	r2,4
   4557c:	10c0052e 	bgeu	r2,r3,45594 <_malloc_r+0x1c4>
   45580:	00800504 	movi	r2,20
   45584:	10c07836 	bltu	r2,r3,45768 <_malloc_r+0x398>
   45588:	198016c4 	addi	r6,r3,91
   4558c:	300490fa 	slli	r2,r6,3
   45590:	003fbc06 	br	45484 <_malloc_r+0xb4>
   45594:	8804d1ba 	srli	r2,r17,6
   45598:	11800e04 	addi	r6,r2,56
   4559c:	300490fa 	slli	r2,r6,3
   455a0:	003fb806 	br	45484 <_malloc_r+0xb4>
   455a4:	00807fc4 	movi	r2,511
   455a8:	1140bb36 	bltu	r2,r5,45898 <_malloc_r+0x4c8>
   455ac:	2806d0fa 	srli	r3,r5,3
   455b0:	573ffe04 	addi	fp,r10,-8
   455b4:	00800044 	movi	r2,1
   455b8:	180890fa 	slli	r4,r3,3
   455bc:	1807d0ba 	srai	r3,r3,2
   455c0:	e1c00117 	ldw	r7,4(fp)
   455c4:	5909883a 	add	r4,r11,r4
   455c8:	21400217 	ldw	r5,8(r4)
   455cc:	10c4983a 	sll	r2,r2,r3
   455d0:	81000315 	stw	r4,12(r16)
   455d4:	81400215 	stw	r5,8(r16)
   455d8:	388eb03a 	or	r7,r7,r2
   455dc:	2c000315 	stw	r16,12(r5)
   455e0:	24000215 	stw	r16,8(r4)
   455e4:	e1c00115 	stw	r7,4(fp)
   455e8:	4807883a 	mov	r3,r9
   455ec:	4800cd16 	blt	r9,zero,45924 <_malloc_r+0x554>
   455f0:	1807d0ba 	srai	r3,r3,2
   455f4:	00800044 	movi	r2,1
   455f8:	10c8983a 	sll	r4,r2,r3
   455fc:	39004436 	bltu	r7,r4,45710 <_malloc_r+0x340>
   45600:	21c4703a 	and	r2,r4,r7
   45604:	10000a1e 	bne	r2,zero,45630 <_malloc_r+0x260>
   45608:	2109883a 	add	r4,r4,r4
   4560c:	00bfff04 	movi	r2,-4
   45610:	4884703a 	and	r2,r9,r2
   45614:	3906703a 	and	r3,r7,r4
   45618:	12400104 	addi	r9,r2,4
   4561c:	1800041e 	bne	r3,zero,45630 <_malloc_r+0x260>
   45620:	2109883a 	add	r4,r4,r4
   45624:	3904703a 	and	r2,r7,r4
   45628:	4a400104 	addi	r9,r9,4
   4562c:	103ffc26 	beq	r2,zero,45620 <_malloc_r+0x250>
   45630:	480490fa 	slli	r2,r9,3
   45634:	4819883a 	mov	r12,r9
   45638:	023fff04 	movi	r8,-4
   4563c:	589b883a 	add	r13,r11,r2
   45640:	6807883a 	mov	r3,r13
   45644:	014003c4 	movi	r5,15
   45648:	1c000317 	ldw	r16,12(r3)
   4564c:	1c00041e 	bne	r3,r16,45660 <_malloc_r+0x290>
   45650:	0000a706 	br	458f0 <_malloc_r+0x520>
   45654:	3000ab0e 	bge	r6,zero,45904 <_malloc_r+0x534>
   45658:	84000317 	ldw	r16,12(r16)
   4565c:	1c00a426 	beq	r3,r16,458f0 <_malloc_r+0x520>
   45660:	80800117 	ldw	r2,4(r16)
   45664:	1204703a 	and	r2,r2,r8
   45668:	144dc83a 	sub	r6,r2,r17
   4566c:	29bff90e 	bge	r5,r6,45654 <_malloc_r+0x284>
   45670:	81000317 	ldw	r4,12(r16)
   45674:	80c00217 	ldw	r3,8(r16)
   45678:	89400054 	ori	r5,r17,1
   4567c:	8445883a 	add	r2,r16,r17
   45680:	20c00215 	stw	r3,8(r4)
   45684:	19000315 	stw	r4,12(r3)
   45688:	81400115 	stw	r5,4(r16)
   4568c:	1187883a 	add	r3,r2,r6
   45690:	31000054 	ori	r4,r6,1
   45694:	50800315 	stw	r2,12(r10)
   45698:	50800215 	stw	r2,8(r10)
   4569c:	19800015 	stw	r6,0(r3)
   456a0:	11000115 	stw	r4,4(r2)
   456a4:	12800215 	stw	r10,8(r2)
   456a8:	12800315 	stw	r10,12(r2)
   456ac:	9009883a 	mov	r4,r18
   456b0:	004a59c0 	call	4a59c <__malloc_unlock>
   456b4:	80c00204 	addi	r3,r16,8
   456b8:	003f5906 	br	45420 <_malloc_r+0x50>
   456bc:	8109883a 	add	r4,r16,r4
   456c0:	20800117 	ldw	r2,4(r4)
   456c4:	80c00217 	ldw	r3,8(r16)
   456c8:	81400317 	ldw	r5,12(r16)
   456cc:	10800054 	ori	r2,r2,1
   456d0:	20800115 	stw	r2,4(r4)
   456d4:	28c00215 	stw	r3,8(r5)
   456d8:	19400315 	stw	r5,12(r3)
   456dc:	9009883a 	mov	r4,r18
   456e0:	004a59c0 	call	4a59c <__malloc_unlock>
   456e4:	80c00204 	addi	r3,r16,8
   456e8:	003f4d06 	br	45420 <_malloc_r+0x50>
   456ec:	80800204 	addi	r2,r16,8
   456f0:	14000317 	ldw	r16,12(r2)
   456f4:	143f911e 	bne	r2,r16,4553c <_malloc_r+0x16c>
   456f8:	1a400084 	addi	r9,r3,2
   456fc:	003f7306 	br	454cc <_malloc_r+0xfc>
   45700:	88c00054 	ori	r3,r17,1
   45704:	8445883a 	add	r2,r16,r17
   45708:	80c00115 	stw	r3,4(r16)
   4570c:	003fdf06 	br	4568c <_malloc_r+0x2bc>
   45710:	e4000217 	ldw	r16,8(fp)
   45714:	00bfff04 	movi	r2,-4
   45718:	80c00117 	ldw	r3,4(r16)
   4571c:	802d883a 	mov	r22,r16
   45720:	18aa703a 	and	r21,r3,r2
   45724:	ac401636 	bltu	r21,r17,45780 <_malloc_r+0x3b0>
   45728:	ac49c83a 	sub	r4,r21,r17
   4572c:	008003c4 	movi	r2,15
   45730:	1100130e 	bge	r2,r4,45780 <_malloc_r+0x3b0>
   45734:	88800054 	ori	r2,r17,1
   45738:	8447883a 	add	r3,r16,r17
   4573c:	80800115 	stw	r2,4(r16)
   45740:	20800054 	ori	r2,r4,1
   45744:	18800115 	stw	r2,4(r3)
   45748:	e0c00215 	stw	r3,8(fp)
   4574c:	9009883a 	mov	r4,r18
   45750:	004a59c0 	call	4a59c <__malloc_unlock>
   45754:	80c00204 	addi	r3,r16,8
   45758:	003f3106 	br	45420 <_malloc_r+0x50>
   4575c:	39c00117 	ldw	r7,4(r7)
   45760:	573ffe04 	addi	fp,r10,-8
   45764:	003fa006 	br	455e8 <_malloc_r+0x218>
   45768:	00801504 	movi	r2,84
   4576c:	10c06736 	bltu	r2,r3,4590c <_malloc_r+0x53c>
   45770:	8804d33a 	srli	r2,r17,12
   45774:	11801b84 	addi	r6,r2,110
   45778:	300490fa 	slli	r2,r6,3
   4577c:	003f4106 	br	45484 <_malloc_r+0xb4>
   45780:	d0a01317 	ldw	r2,-32692(gp)
   45784:	d0e00517 	ldw	r3,-32748(gp)
   45788:	053fffc4 	movi	r20,-1
   4578c:	10800404 	addi	r2,r2,16
   45790:	88a7883a 	add	r19,r17,r2
   45794:	1d000326 	beq	r3,r20,457a4 <_malloc_r+0x3d4>
   45798:	98c3ffc4 	addi	r3,r19,4095
   4579c:	00bc0004 	movi	r2,-4096
   457a0:	18a6703a 	and	r19,r3,r2
   457a4:	9009883a 	mov	r4,r18
   457a8:	980b883a 	mov	r5,r19
   457ac:	00474640 	call	47464 <_sbrk_r>
   457b0:	1009883a 	mov	r4,r2
   457b4:	15000426 	beq	r2,r20,457c8 <_malloc_r+0x3f8>
   457b8:	854b883a 	add	r5,r16,r21
   457bc:	1029883a 	mov	r20,r2
   457c0:	11405a2e 	bgeu	r2,r5,4592c <_malloc_r+0x55c>
   457c4:	87000c26 	beq	r16,fp,457f8 <_malloc_r+0x428>
   457c8:	e4000217 	ldw	r16,8(fp)
   457cc:	80c00117 	ldw	r3,4(r16)
   457d0:	00bfff04 	movi	r2,-4
   457d4:	1884703a 	and	r2,r3,r2
   457d8:	14400336 	bltu	r2,r17,457e8 <_malloc_r+0x418>
   457dc:	1449c83a 	sub	r4,r2,r17
   457e0:	008003c4 	movi	r2,15
   457e4:	113fd316 	blt	r2,r4,45734 <_malloc_r+0x364>
   457e8:	9009883a 	mov	r4,r18
   457ec:	004a59c0 	call	4a59c <__malloc_unlock>
   457f0:	0007883a 	mov	r3,zero
   457f4:	003f0a06 	br	45420 <_malloc_r+0x50>
   457f8:	05d00034 	movhi	r23,16384
   457fc:	bdc78304 	addi	r23,r23,7692
   45800:	b8800017 	ldw	r2,0(r23)
   45804:	988d883a 	add	r6,r19,r2
   45808:	b9800015 	stw	r6,0(r23)
   4580c:	d0e00517 	ldw	r3,-32748(gp)
   45810:	00bfffc4 	movi	r2,-1
   45814:	18808e26 	beq	r3,r2,45a50 <_malloc_r+0x680>
   45818:	2145c83a 	sub	r2,r4,r5
   4581c:	3085883a 	add	r2,r6,r2
   45820:	b8800015 	stw	r2,0(r23)
   45824:	20c001cc 	andi	r3,r4,7
   45828:	18005f1e 	bne	r3,zero,459a8 <_malloc_r+0x5d8>
   4582c:	000b883a 	mov	r5,zero
   45830:	a4c5883a 	add	r2,r20,r19
   45834:	1083ffcc 	andi	r2,r2,4095
   45838:	00c40004 	movi	r3,4096
   4583c:	1887c83a 	sub	r3,r3,r2
   45840:	28e7883a 	add	r19,r5,r3
   45844:	9009883a 	mov	r4,r18
   45848:	980b883a 	mov	r5,r19
   4584c:	00474640 	call	47464 <_sbrk_r>
   45850:	1007883a 	mov	r3,r2
   45854:	00bfffc4 	movi	r2,-1
   45858:	18807a26 	beq	r3,r2,45a44 <_malloc_r+0x674>
   4585c:	1d05c83a 	sub	r2,r3,r20
   45860:	9885883a 	add	r2,r19,r2
   45864:	10c00054 	ori	r3,r2,1
   45868:	b8800017 	ldw	r2,0(r23)
   4586c:	a021883a 	mov	r16,r20
   45870:	a0c00115 	stw	r3,4(r20)
   45874:	9885883a 	add	r2,r19,r2
   45878:	b8800015 	stw	r2,0(r23)
   4587c:	e5000215 	stw	r20,8(fp)
   45880:	b7003626 	beq	r22,fp,4595c <_malloc_r+0x58c>
   45884:	018003c4 	movi	r6,15
   45888:	35404b36 	bltu	r6,r21,459b8 <_malloc_r+0x5e8>
   4588c:	00800044 	movi	r2,1
   45890:	a0800115 	stw	r2,4(r20)
   45894:	003fcd06 	br	457cc <_malloc_r+0x3fc>
   45898:	2808d27a 	srli	r4,r5,9
   4589c:	2000371e 	bne	r4,zero,4597c <_malloc_r+0x5ac>
   458a0:	2808d0fa 	srli	r4,r5,3
   458a4:	200690fa 	slli	r3,r4,3
   458a8:	1ad1883a 	add	r8,r3,r11
   458ac:	41800217 	ldw	r6,8(r8)
   458b0:	41805b26 	beq	r8,r6,45a20 <_malloc_r+0x650>
   458b4:	30800117 	ldw	r2,4(r6)
   458b8:	00ffff04 	movi	r3,-4
   458bc:	10c4703a 	and	r2,r2,r3
   458c0:	2880022e 	bgeu	r5,r2,458cc <_malloc_r+0x4fc>
   458c4:	31800217 	ldw	r6,8(r6)
   458c8:	41bffa1e 	bne	r8,r6,458b4 <_malloc_r+0x4e4>
   458cc:	32000317 	ldw	r8,12(r6)
   458d0:	39c00117 	ldw	r7,4(r7)
   458d4:	82000315 	stw	r8,12(r16)
   458d8:	81800215 	stw	r6,8(r16)
   458dc:	07100034 	movhi	fp,16384
   458e0:	e701e204 	addi	fp,fp,1928
   458e4:	34000315 	stw	r16,12(r6)
   458e8:	44000215 	stw	r16,8(r8)
   458ec:	003f3e06 	br	455e8 <_malloc_r+0x218>
   458f0:	63000044 	addi	r12,r12,1
   458f4:	608000cc 	andi	r2,r12,3
   458f8:	10005d26 	beq	r2,zero,45a70 <_malloc_r+0x6a0>
   458fc:	18c00204 	addi	r3,r3,8
   45900:	003f5106 	br	45648 <_malloc_r+0x278>
   45904:	8089883a 	add	r4,r16,r2
   45908:	003f6d06 	br	456c0 <_malloc_r+0x2f0>
   4590c:	00805504 	movi	r2,340
   45910:	10c02036 	bltu	r2,r3,45994 <_malloc_r+0x5c4>
   45914:	8804d3fa 	srli	r2,r17,15
   45918:	11801dc4 	addi	r6,r2,119
   4591c:	300490fa 	slli	r2,r6,3
   45920:	003ed806 	br	45484 <_malloc_r+0xb4>
   45924:	48c000c4 	addi	r3,r9,3
   45928:	003f3106 	br	455f0 <_malloc_r+0x220>
   4592c:	05d00034 	movhi	r23,16384
   45930:	bdc78304 	addi	r23,r23,7692
   45934:	b8800017 	ldw	r2,0(r23)
   45938:	988d883a 	add	r6,r19,r2
   4593c:	b9800015 	stw	r6,0(r23)
   45940:	293fb21e 	bne	r5,r4,4580c <_malloc_r+0x43c>
   45944:	2083ffcc 	andi	r2,r4,4095
   45948:	103fb01e 	bne	r2,zero,4580c <_malloc_r+0x43c>
   4594c:	e4000217 	ldw	r16,8(fp)
   45950:	9d45883a 	add	r2,r19,r21
   45954:	10800054 	ori	r2,r2,1
   45958:	80800115 	stw	r2,4(r16)
   4595c:	b8c00017 	ldw	r3,0(r23)
   45960:	d0a01417 	ldw	r2,-32688(gp)
   45964:	10c0012e 	bgeu	r2,r3,4596c <_malloc_r+0x59c>
   45968:	d0e01415 	stw	r3,-32688(gp)
   4596c:	d0a01517 	ldw	r2,-32684(gp)
   45970:	10ff962e 	bgeu	r2,r3,457cc <_malloc_r+0x3fc>
   45974:	d0e01515 	stw	r3,-32684(gp)
   45978:	003f9406 	br	457cc <_malloc_r+0x3fc>
   4597c:	00800104 	movi	r2,4
   45980:	11001e36 	bltu	r2,r4,459fc <_malloc_r+0x62c>
   45984:	2804d1ba 	srli	r2,r5,6
   45988:	11000e04 	addi	r4,r2,56
   4598c:	200690fa 	slli	r3,r4,3
   45990:	003fc506 	br	458a8 <_malloc_r+0x4d8>
   45994:	00815504 	movi	r2,1364
   45998:	10c01d2e 	bgeu	r2,r3,45a10 <_malloc_r+0x640>
   4599c:	01801f84 	movi	r6,126
   459a0:	0080fc04 	movi	r2,1008
   459a4:	003eb706 	br	45484 <_malloc_r+0xb4>
   459a8:	00800204 	movi	r2,8
   459ac:	10cbc83a 	sub	r5,r2,r3
   459b0:	2169883a 	add	r20,r4,r5
   459b4:	003f9e06 	br	45830 <_malloc_r+0x460>
   459b8:	00bffe04 	movi	r2,-8
   459bc:	a93ffd04 	addi	r4,r21,-12
   459c0:	2088703a 	and	r4,r4,r2
   459c4:	b10b883a 	add	r5,r22,r4
   459c8:	00c00144 	movi	r3,5
   459cc:	28c00215 	stw	r3,8(r5)
   459d0:	28c00115 	stw	r3,4(r5)
   459d4:	b0800117 	ldw	r2,4(r22)
   459d8:	1080004c 	andi	r2,r2,1
   459dc:	2084b03a 	or	r2,r4,r2
   459e0:	b0800115 	stw	r2,4(r22)
   459e4:	313fdd2e 	bgeu	r6,r4,4595c <_malloc_r+0x58c>
   459e8:	b1400204 	addi	r5,r22,8
   459ec:	9009883a 	mov	r4,r18
   459f0:	00448480 	call	44848 <_free_r>
   459f4:	e4000217 	ldw	r16,8(fp)
   459f8:	003fd806 	br	4595c <_malloc_r+0x58c>
   459fc:	00800504 	movi	r2,20
   45a00:	11001536 	bltu	r2,r4,45a58 <_malloc_r+0x688>
   45a04:	210016c4 	addi	r4,r4,91
   45a08:	200690fa 	slli	r3,r4,3
   45a0c:	003fa606 	br	458a8 <_malloc_r+0x4d8>
   45a10:	8804d4ba 	srli	r2,r17,18
   45a14:	11801f04 	addi	r6,r2,124
   45a18:	300490fa 	slli	r2,r6,3
   45a1c:	003e9906 	br	45484 <_malloc_r+0xb4>
   45a20:	2009d0ba 	srai	r4,r4,2
   45a24:	01500034 	movhi	r5,16384
   45a28:	2941e204 	addi	r5,r5,1928
   45a2c:	00c00044 	movi	r3,1
   45a30:	28800117 	ldw	r2,4(r5)
   45a34:	1906983a 	sll	r3,r3,r4
   45a38:	10c4b03a 	or	r2,r2,r3
   45a3c:	28800115 	stw	r2,4(r5)
   45a40:	003fa306 	br	458d0 <_malloc_r+0x500>
   45a44:	0027883a 	mov	r19,zero
   45a48:	00c00044 	movi	r3,1
   45a4c:	003f8606 	br	45868 <_malloc_r+0x498>
   45a50:	d1200515 	stw	r4,-32748(gp)
   45a54:	003f7306 	br	45824 <_malloc_r+0x454>
   45a58:	00801504 	movi	r2,84
   45a5c:	11001936 	bltu	r2,r4,45ac4 <_malloc_r+0x6f4>
   45a60:	2804d33a 	srli	r2,r5,12
   45a64:	11001b84 	addi	r4,r2,110
   45a68:	200690fa 	slli	r3,r4,3
   45a6c:	003f8e06 	br	458a8 <_malloc_r+0x4d8>
   45a70:	480b883a 	mov	r5,r9
   45a74:	6807883a 	mov	r3,r13
   45a78:	288000cc 	andi	r2,r5,3
   45a7c:	18fffe04 	addi	r3,r3,-8
   45a80:	297fffc4 	addi	r5,r5,-1
   45a84:	10001526 	beq	r2,zero,45adc <_malloc_r+0x70c>
   45a88:	18800217 	ldw	r2,8(r3)
   45a8c:	10fffa26 	beq	r2,r3,45a78 <_malloc_r+0x6a8>
   45a90:	2109883a 	add	r4,r4,r4
   45a94:	393f1e36 	bltu	r7,r4,45710 <_malloc_r+0x340>
   45a98:	203f1d26 	beq	r4,zero,45710 <_malloc_r+0x340>
   45a9c:	21c4703a 	and	r2,r4,r7
   45aa0:	10000226 	beq	r2,zero,45aac <_malloc_r+0x6dc>
   45aa4:	6013883a 	mov	r9,r12
   45aa8:	003ee106 	br	45630 <_malloc_r+0x260>
   45aac:	2109883a 	add	r4,r4,r4
   45ab0:	3904703a 	and	r2,r7,r4
   45ab4:	63000104 	addi	r12,r12,4
   45ab8:	103ffc26 	beq	r2,zero,45aac <_malloc_r+0x6dc>
   45abc:	6013883a 	mov	r9,r12
   45ac0:	003edb06 	br	45630 <_malloc_r+0x260>
   45ac4:	00805504 	movi	r2,340
   45ac8:	11000836 	bltu	r2,r4,45aec <_malloc_r+0x71c>
   45acc:	2804d3fa 	srli	r2,r5,15
   45ad0:	11001dc4 	addi	r4,r2,119
   45ad4:	200690fa 	slli	r3,r4,3
   45ad8:	003f7306 	br	458a8 <_malloc_r+0x4d8>
   45adc:	0104303a 	nor	r2,zero,r4
   45ae0:	388e703a 	and	r7,r7,r2
   45ae4:	e1c00115 	stw	r7,4(fp)
   45ae8:	003fe906 	br	45a90 <_malloc_r+0x6c0>
   45aec:	00815504 	movi	r2,1364
   45af0:	1100032e 	bgeu	r2,r4,45b00 <_malloc_r+0x730>
   45af4:	01001f84 	movi	r4,126
   45af8:	00c0fc04 	movi	r3,1008
   45afc:	003f6a06 	br	458a8 <_malloc_r+0x4d8>
   45b00:	2804d4ba 	srli	r2,r5,18
   45b04:	11001f04 	addi	r4,r2,124
   45b08:	200690fa 	slli	r3,r4,3
   45b0c:	003f6606 	br	458a8 <_malloc_r+0x4d8>

00045b10 <memchr>:
   45b10:	008000c4 	movi	r2,3
   45b14:	29403fcc 	andi	r5,r5,255
   45b18:	2007883a 	mov	r3,r4
   45b1c:	1180022e 	bgeu	r2,r6,45b28 <memchr+0x18>
   45b20:	2084703a 	and	r2,r4,r2
   45b24:	10000b26 	beq	r2,zero,45b54 <memchr+0x44>
   45b28:	313fffc4 	addi	r4,r6,-1
   45b2c:	3000051e 	bne	r6,zero,45b44 <memchr+0x34>
   45b30:	00002c06 	br	45be4 <memchr+0xd4>
   45b34:	213fffc4 	addi	r4,r4,-1
   45b38:	00bfffc4 	movi	r2,-1
   45b3c:	18c00044 	addi	r3,r3,1
   45b40:	20802826 	beq	r4,r2,45be4 <memchr+0xd4>
   45b44:	18800003 	ldbu	r2,0(r3)
   45b48:	28bffa1e 	bne	r5,r2,45b34 <memchr+0x24>
   45b4c:	1805883a 	mov	r2,r3
   45b50:	f800283a 	ret
   45b54:	0011883a 	mov	r8,zero
   45b58:	0007883a 	mov	r3,zero
   45b5c:	01c00104 	movi	r7,4
   45b60:	4004923a 	slli	r2,r8,8
   45b64:	18c00044 	addi	r3,r3,1
   45b68:	1151883a 	add	r8,r2,r5
   45b6c:	19fffc1e 	bne	r3,r7,45b60 <memchr+0x50>
   45b70:	02bfbff4 	movhi	r10,65279
   45b74:	52bfbfc4 	addi	r10,r10,-257
   45b78:	02602074 	movhi	r9,32897
   45b7c:	4a602004 	addi	r9,r9,-32640
   45b80:	02c000c4 	movi	r11,3
   45b84:	20800017 	ldw	r2,0(r4)
   45b88:	31bfff04 	addi	r6,r6,-4
   45b8c:	200f883a 	mov	r7,r4
   45b90:	1204f03a 	xor	r2,r2,r8
   45b94:	1287883a 	add	r3,r2,r10
   45b98:	1a46703a 	and	r3,r3,r9
   45b9c:	0084303a 	nor	r2,zero,r2
   45ba0:	10c4703a 	and	r2,r2,r3
   45ba4:	10000b26 	beq	r2,zero,45bd4 <memchr+0xc4>
   45ba8:	20800003 	ldbu	r2,0(r4)
   45bac:	28800f26 	beq	r5,r2,45bec <memchr+0xdc>
   45bb0:	20800043 	ldbu	r2,1(r4)
   45bb4:	21c00044 	addi	r7,r4,1
   45bb8:	28800c26 	beq	r5,r2,45bec <memchr+0xdc>
   45bbc:	20800083 	ldbu	r2,2(r4)
   45bc0:	21c00084 	addi	r7,r4,2
   45bc4:	28800926 	beq	r5,r2,45bec <memchr+0xdc>
   45bc8:	208000c3 	ldbu	r2,3(r4)
   45bcc:	21c000c4 	addi	r7,r4,3
   45bd0:	28800626 	beq	r5,r2,45bec <memchr+0xdc>
   45bd4:	21000104 	addi	r4,r4,4
   45bd8:	59bfea36 	bltu	r11,r6,45b84 <memchr+0x74>
   45bdc:	2007883a 	mov	r3,r4
   45be0:	003fd106 	br	45b28 <memchr+0x18>
   45be4:	0005883a 	mov	r2,zero
   45be8:	f800283a 	ret
   45bec:	3805883a 	mov	r2,r7
   45bf0:	f800283a 	ret

00045bf4 <memcpy>:
   45bf4:	01c003c4 	movi	r7,15
   45bf8:	2007883a 	mov	r3,r4
   45bfc:	3980032e 	bgeu	r7,r6,45c0c <memcpy+0x18>
   45c00:	2904b03a 	or	r2,r5,r4
   45c04:	108000cc 	andi	r2,r2,3
   45c08:	10000926 	beq	r2,zero,45c30 <memcpy+0x3c>
   45c0c:	30000626 	beq	r6,zero,45c28 <memcpy+0x34>
   45c10:	30cd883a 	add	r6,r6,r3
   45c14:	28800003 	ldbu	r2,0(r5)
   45c18:	29400044 	addi	r5,r5,1
   45c1c:	18800005 	stb	r2,0(r3)
   45c20:	18c00044 	addi	r3,r3,1
   45c24:	30fffb1e 	bne	r6,r3,45c14 <memcpy+0x20>
   45c28:	2005883a 	mov	r2,r4
   45c2c:	f800283a 	ret
   45c30:	3811883a 	mov	r8,r7
   45c34:	200f883a 	mov	r7,r4
   45c38:	28c00017 	ldw	r3,0(r5)
   45c3c:	31bffc04 	addi	r6,r6,-16
   45c40:	38c00015 	stw	r3,0(r7)
   45c44:	28800117 	ldw	r2,4(r5)
   45c48:	38800115 	stw	r2,4(r7)
   45c4c:	28c00217 	ldw	r3,8(r5)
   45c50:	38c00215 	stw	r3,8(r7)
   45c54:	28800317 	ldw	r2,12(r5)
   45c58:	29400404 	addi	r5,r5,16
   45c5c:	38800315 	stw	r2,12(r7)
   45c60:	39c00404 	addi	r7,r7,16
   45c64:	41bff436 	bltu	r8,r6,45c38 <memcpy+0x44>
   45c68:	008000c4 	movi	r2,3
   45c6c:	1180072e 	bgeu	r2,r6,45c8c <memcpy+0x98>
   45c70:	1007883a 	mov	r3,r2
   45c74:	28800017 	ldw	r2,0(r5)
   45c78:	31bfff04 	addi	r6,r6,-4
   45c7c:	29400104 	addi	r5,r5,4
   45c80:	38800015 	stw	r2,0(r7)
   45c84:	39c00104 	addi	r7,r7,4
   45c88:	19bffa36 	bltu	r3,r6,45c74 <memcpy+0x80>
   45c8c:	3807883a 	mov	r3,r7
   45c90:	003fde06 	br	45c0c <memcpy+0x18>

00045c94 <memmove>:
   45c94:	2807883a 	mov	r3,r5
   45c98:	2011883a 	mov	r8,r4
   45c9c:	29000c2e 	bgeu	r5,r4,45cd0 <memmove+0x3c>
   45ca0:	298f883a 	add	r7,r5,r6
   45ca4:	21c00a2e 	bgeu	r4,r7,45cd0 <memmove+0x3c>
   45ca8:	30000726 	beq	r6,zero,45cc8 <memmove+0x34>
   45cac:	2187883a 	add	r3,r4,r6
   45cb0:	198dc83a 	sub	r6,r3,r6
   45cb4:	39ffffc4 	addi	r7,r7,-1
   45cb8:	38800003 	ldbu	r2,0(r7)
   45cbc:	18ffffc4 	addi	r3,r3,-1
   45cc0:	18800005 	stb	r2,0(r3)
   45cc4:	19bffb1e 	bne	r3,r6,45cb4 <memmove+0x20>
   45cc8:	2005883a 	mov	r2,r4
   45ccc:	f800283a 	ret
   45cd0:	01c003c4 	movi	r7,15
   45cd4:	39800a36 	bltu	r7,r6,45d00 <memmove+0x6c>
   45cd8:	303ffb26 	beq	r6,zero,45cc8 <memmove+0x34>
   45cdc:	400f883a 	mov	r7,r8
   45ce0:	320d883a 	add	r6,r6,r8
   45ce4:	28800003 	ldbu	r2,0(r5)
   45ce8:	29400044 	addi	r5,r5,1
   45cec:	38800005 	stb	r2,0(r7)
   45cf0:	39c00044 	addi	r7,r7,1
   45cf4:	39bffb1e 	bne	r7,r6,45ce4 <memmove+0x50>
   45cf8:	2005883a 	mov	r2,r4
   45cfc:	f800283a 	ret
   45d00:	1904b03a 	or	r2,r3,r4
   45d04:	108000cc 	andi	r2,r2,3
   45d08:	103ff31e 	bne	r2,zero,45cd8 <memmove+0x44>
   45d0c:	3811883a 	mov	r8,r7
   45d10:	180b883a 	mov	r5,r3
   45d14:	200f883a 	mov	r7,r4
   45d18:	28c00017 	ldw	r3,0(r5)
   45d1c:	31bffc04 	addi	r6,r6,-16
   45d20:	38c00015 	stw	r3,0(r7)
   45d24:	28800117 	ldw	r2,4(r5)
   45d28:	38800115 	stw	r2,4(r7)
   45d2c:	28c00217 	ldw	r3,8(r5)
   45d30:	38c00215 	stw	r3,8(r7)
   45d34:	28800317 	ldw	r2,12(r5)
   45d38:	29400404 	addi	r5,r5,16
   45d3c:	38800315 	stw	r2,12(r7)
   45d40:	39c00404 	addi	r7,r7,16
   45d44:	41bff436 	bltu	r8,r6,45d18 <memmove+0x84>
   45d48:	008000c4 	movi	r2,3
   45d4c:	1180072e 	bgeu	r2,r6,45d6c <memmove+0xd8>
   45d50:	1007883a 	mov	r3,r2
   45d54:	28800017 	ldw	r2,0(r5)
   45d58:	31bfff04 	addi	r6,r6,-4
   45d5c:	29400104 	addi	r5,r5,4
   45d60:	38800015 	stw	r2,0(r7)
   45d64:	39c00104 	addi	r7,r7,4
   45d68:	19bffa36 	bltu	r3,r6,45d54 <memmove+0xc0>
   45d6c:	3811883a 	mov	r8,r7
   45d70:	003fd906 	br	45cd8 <memmove+0x44>

00045d74 <memset>:
   45d74:	008000c4 	movi	r2,3
   45d78:	29403fcc 	andi	r5,r5,255
   45d7c:	2007883a 	mov	r3,r4
   45d80:	1180022e 	bgeu	r2,r6,45d8c <memset+0x18>
   45d84:	2084703a 	and	r2,r4,r2
   45d88:	10000826 	beq	r2,zero,45dac <memset+0x38>
   45d8c:	30000526 	beq	r6,zero,45da4 <memset+0x30>
   45d90:	2805883a 	mov	r2,r5
   45d94:	30cd883a 	add	r6,r6,r3
   45d98:	18800005 	stb	r2,0(r3)
   45d9c:	18c00044 	addi	r3,r3,1
   45da0:	19bffd1e 	bne	r3,r6,45d98 <memset+0x24>
   45da4:	2005883a 	mov	r2,r4
   45da8:	f800283a 	ret
   45dac:	2804923a 	slli	r2,r5,8
   45db0:	020003c4 	movi	r8,15
   45db4:	200f883a 	mov	r7,r4
   45db8:	2884b03a 	or	r2,r5,r2
   45dbc:	1006943a 	slli	r3,r2,16
   45dc0:	10c6b03a 	or	r3,r2,r3
   45dc4:	41800a2e 	bgeu	r8,r6,45df0 <memset+0x7c>
   45dc8:	4005883a 	mov	r2,r8
   45dcc:	31bffc04 	addi	r6,r6,-16
   45dd0:	38c00015 	stw	r3,0(r7)
   45dd4:	38c00115 	stw	r3,4(r7)
   45dd8:	38c00215 	stw	r3,8(r7)
   45ddc:	38c00315 	stw	r3,12(r7)
   45de0:	39c00404 	addi	r7,r7,16
   45de4:	11bff936 	bltu	r2,r6,45dcc <memset+0x58>
   45de8:	008000c4 	movi	r2,3
   45dec:	1180052e 	bgeu	r2,r6,45e04 <memset+0x90>
   45df0:	31bfff04 	addi	r6,r6,-4
   45df4:	008000c4 	movi	r2,3
   45df8:	38c00015 	stw	r3,0(r7)
   45dfc:	39c00104 	addi	r7,r7,4
   45e00:	11bffb36 	bltu	r2,r6,45df0 <memset+0x7c>
   45e04:	3807883a 	mov	r3,r7
   45e08:	003fe006 	br	45d8c <memset+0x18>

00045e0c <_Bfree>:
   45e0c:	28000826 	beq	r5,zero,45e30 <_Bfree+0x24>
   45e10:	28800117 	ldw	r2,4(r5)
   45e14:	21001317 	ldw	r4,76(r4)
   45e18:	1085883a 	add	r2,r2,r2
   45e1c:	1085883a 	add	r2,r2,r2
   45e20:	1105883a 	add	r2,r2,r4
   45e24:	10c00017 	ldw	r3,0(r2)
   45e28:	28c00015 	stw	r3,0(r5)
   45e2c:	11400015 	stw	r5,0(r2)
   45e30:	f800283a 	ret

00045e34 <__hi0bits>:
   45e34:	20bfffec 	andhi	r2,r4,65535
   45e38:	10001426 	beq	r2,zero,45e8c <__hi0bits+0x58>
   45e3c:	0007883a 	mov	r3,zero
   45e40:	20bfc02c 	andhi	r2,r4,65280
   45e44:	1000021e 	bne	r2,zero,45e50 <__hi0bits+0x1c>
   45e48:	2008923a 	slli	r4,r4,8
   45e4c:	18c00204 	addi	r3,r3,8
   45e50:	20bc002c 	andhi	r2,r4,61440
   45e54:	1000021e 	bne	r2,zero,45e60 <__hi0bits+0x2c>
   45e58:	2008913a 	slli	r4,r4,4
   45e5c:	18c00104 	addi	r3,r3,4
   45e60:	20b0002c 	andhi	r2,r4,49152
   45e64:	1000031e 	bne	r2,zero,45e74 <__hi0bits+0x40>
   45e68:	2105883a 	add	r2,r4,r4
   45e6c:	18c00084 	addi	r3,r3,2
   45e70:	1089883a 	add	r4,r2,r2
   45e74:	20000316 	blt	r4,zero,45e84 <__hi0bits+0x50>
   45e78:	2090002c 	andhi	r2,r4,16384
   45e7c:	10000626 	beq	r2,zero,45e98 <__hi0bits+0x64>
   45e80:	18c00044 	addi	r3,r3,1
   45e84:	1805883a 	mov	r2,r3
   45e88:	f800283a 	ret
   45e8c:	2008943a 	slli	r4,r4,16
   45e90:	00c00404 	movi	r3,16
   45e94:	003fea06 	br	45e40 <__hi0bits+0xc>
   45e98:	00c00804 	movi	r3,32
   45e9c:	1805883a 	mov	r2,r3
   45ea0:	f800283a 	ret

00045ea4 <__lo0bits>:
   45ea4:	20c00017 	ldw	r3,0(r4)
   45ea8:	188001cc 	andi	r2,r3,7
   45eac:	10000a26 	beq	r2,zero,45ed8 <__lo0bits+0x34>
   45eb0:	1880004c 	andi	r2,r3,1
   45eb4:	1005003a 	cmpeq	r2,r2,zero
   45eb8:	10002126 	beq	r2,zero,45f40 <__lo0bits+0x9c>
   45ebc:	1880008c 	andi	r2,r3,2
   45ec0:	1000251e 	bne	r2,zero,45f58 <__lo0bits+0xb4>
   45ec4:	1804d0ba 	srli	r2,r3,2
   45ec8:	01400084 	movi	r5,2
   45ecc:	20800015 	stw	r2,0(r4)
   45ed0:	2805883a 	mov	r2,r5
   45ed4:	f800283a 	ret
   45ed8:	18bfffcc 	andi	r2,r3,65535
   45edc:	10001526 	beq	r2,zero,45f34 <__lo0bits+0x90>
   45ee0:	000b883a 	mov	r5,zero
   45ee4:	18803fcc 	andi	r2,r3,255
   45ee8:	1000021e 	bne	r2,zero,45ef4 <__lo0bits+0x50>
   45eec:	1806d23a 	srli	r3,r3,8
   45ef0:	29400204 	addi	r5,r5,8
   45ef4:	188003cc 	andi	r2,r3,15
   45ef8:	1000021e 	bne	r2,zero,45f04 <__lo0bits+0x60>
   45efc:	1806d13a 	srli	r3,r3,4
   45f00:	29400104 	addi	r5,r5,4
   45f04:	188000cc 	andi	r2,r3,3
   45f08:	1000021e 	bne	r2,zero,45f14 <__lo0bits+0x70>
   45f0c:	1806d0ba 	srli	r3,r3,2
   45f10:	29400084 	addi	r5,r5,2
   45f14:	1880004c 	andi	r2,r3,1
   45f18:	1000031e 	bne	r2,zero,45f28 <__lo0bits+0x84>
   45f1c:	1806d07a 	srli	r3,r3,1
   45f20:	18000a26 	beq	r3,zero,45f4c <__lo0bits+0xa8>
   45f24:	29400044 	addi	r5,r5,1
   45f28:	2805883a 	mov	r2,r5
   45f2c:	20c00015 	stw	r3,0(r4)
   45f30:	f800283a 	ret
   45f34:	1806d43a 	srli	r3,r3,16
   45f38:	01400404 	movi	r5,16
   45f3c:	003fe906 	br	45ee4 <__lo0bits+0x40>
   45f40:	000b883a 	mov	r5,zero
   45f44:	2805883a 	mov	r2,r5
   45f48:	f800283a 	ret
   45f4c:	01400804 	movi	r5,32
   45f50:	2805883a 	mov	r2,r5
   45f54:	f800283a 	ret
   45f58:	1804d07a 	srli	r2,r3,1
   45f5c:	01400044 	movi	r5,1
   45f60:	20800015 	stw	r2,0(r4)
   45f64:	003fda06 	br	45ed0 <__lo0bits+0x2c>

00045f68 <__mcmp>:
   45f68:	20800417 	ldw	r2,16(r4)
   45f6c:	28c00417 	ldw	r3,16(r5)
   45f70:	10cfc83a 	sub	r7,r2,r3
   45f74:	38000c1e 	bne	r7,zero,45fa8 <__mcmp+0x40>
   45f78:	18c5883a 	add	r2,r3,r3
   45f7c:	1085883a 	add	r2,r2,r2
   45f80:	10c00504 	addi	r3,r2,20
   45f84:	21000504 	addi	r4,r4,20
   45f88:	28cb883a 	add	r5,r5,r3
   45f8c:	2085883a 	add	r2,r4,r2
   45f90:	10bfff04 	addi	r2,r2,-4
   45f94:	297fff04 	addi	r5,r5,-4
   45f98:	11800017 	ldw	r6,0(r2)
   45f9c:	28c00017 	ldw	r3,0(r5)
   45fa0:	30c0031e 	bne	r6,r3,45fb0 <__mcmp+0x48>
   45fa4:	20bffa36 	bltu	r4,r2,45f90 <__mcmp+0x28>
   45fa8:	3805883a 	mov	r2,r7
   45fac:	f800283a 	ret
   45fb0:	30c00336 	bltu	r6,r3,45fc0 <__mcmp+0x58>
   45fb4:	01c00044 	movi	r7,1
   45fb8:	3805883a 	mov	r2,r7
   45fbc:	f800283a 	ret
   45fc0:	01ffffc4 	movi	r7,-1
   45fc4:	003ff806 	br	45fa8 <__mcmp+0x40>

00045fc8 <__ulp>:
   45fc8:	295ffc2c 	andhi	r5,r5,32752
   45fcc:	013f3034 	movhi	r4,64704
   45fd0:	290b883a 	add	r5,r5,r4
   45fd4:	0145c83a 	sub	r2,zero,r5
   45fd8:	1007d53a 	srai	r3,r2,20
   45fdc:	000d883a 	mov	r6,zero
   45fe0:	0140040e 	bge	zero,r5,45ff4 <__ulp+0x2c>
   45fe4:	280f883a 	mov	r7,r5
   45fe8:	3807883a 	mov	r3,r7
   45fec:	3005883a 	mov	r2,r6
   45ff0:	f800283a 	ret
   45ff4:	008004c4 	movi	r2,19
   45ff8:	193ffb04 	addi	r4,r3,-20
   45ffc:	10c00c0e 	bge	r2,r3,46030 <__ulp+0x68>
   46000:	008007c4 	movi	r2,31
   46004:	1107c83a 	sub	r3,r2,r4
   46008:	00800784 	movi	r2,30
   4600c:	01400044 	movi	r5,1
   46010:	11000216 	blt	r2,r4,4601c <__ulp+0x54>
   46014:	00800044 	movi	r2,1
   46018:	10ca983a 	sll	r5,r2,r3
   4601c:	000f883a 	mov	r7,zero
   46020:	280d883a 	mov	r6,r5
   46024:	3807883a 	mov	r3,r7
   46028:	3005883a 	mov	r2,r6
   4602c:	f800283a 	ret
   46030:	00800234 	movhi	r2,8
   46034:	10cfd83a 	sra	r7,r2,r3
   46038:	000d883a 	mov	r6,zero
   4603c:	3005883a 	mov	r2,r6
   46040:	3807883a 	mov	r3,r7
   46044:	f800283a 	ret

00046048 <__b2d>:
   46048:	20800417 	ldw	r2,16(r4)
   4604c:	defff904 	addi	sp,sp,-28
   46050:	dd000415 	stw	r20,16(sp)
   46054:	1085883a 	add	r2,r2,r2
   46058:	25000504 	addi	r20,r4,20
   4605c:	1085883a 	add	r2,r2,r2
   46060:	dc000015 	stw	r16,0(sp)
   46064:	a0a1883a 	add	r16,r20,r2
   46068:	dd400515 	stw	r21,20(sp)
   4606c:	857fff17 	ldw	r21,-4(r16)
   46070:	dc400115 	stw	r17,4(sp)
   46074:	dfc00615 	stw	ra,24(sp)
   46078:	a809883a 	mov	r4,r21
   4607c:	2823883a 	mov	r17,r5
   46080:	dcc00315 	stw	r19,12(sp)
   46084:	dc800215 	stw	r18,8(sp)
   46088:	0045e340 	call	45e34 <__hi0bits>
   4608c:	100b883a 	mov	r5,r2
   46090:	00800804 	movi	r2,32
   46094:	1145c83a 	sub	r2,r2,r5
   46098:	88800015 	stw	r2,0(r17)
   4609c:	00800284 	movi	r2,10
   460a0:	80ffff04 	addi	r3,r16,-4
   460a4:	11401416 	blt	r2,r5,460f8 <__b2d+0xb0>
   460a8:	008002c4 	movi	r2,11
   460ac:	1149c83a 	sub	r4,r2,r5
   460b0:	a0c02736 	bltu	r20,r3,46150 <__b2d+0x108>
   460b4:	000d883a 	mov	r6,zero
   460b8:	28800544 	addi	r2,r5,21
   460bc:	a906d83a 	srl	r3,r21,r4
   460c0:	a884983a 	sll	r2,r21,r2
   460c4:	1ccffc34 	orhi	r19,r3,16368
   460c8:	11a4b03a 	or	r18,r2,r6
   460cc:	9005883a 	mov	r2,r18
   460d0:	9807883a 	mov	r3,r19
   460d4:	dfc00617 	ldw	ra,24(sp)
   460d8:	dd400517 	ldw	r21,20(sp)
   460dc:	dd000417 	ldw	r20,16(sp)
   460e0:	dcc00317 	ldw	r19,12(sp)
   460e4:	dc800217 	ldw	r18,8(sp)
   460e8:	dc400117 	ldw	r17,4(sp)
   460ec:	dc000017 	ldw	r16,0(sp)
   460f0:	dec00704 	addi	sp,sp,28
   460f4:	f800283a 	ret
   460f8:	a0c00e36 	bltu	r20,r3,46134 <__b2d+0xec>
   460fc:	293ffd44 	addi	r4,r5,-11
   46100:	000d883a 	mov	r6,zero
   46104:	20000f26 	beq	r4,zero,46144 <__b2d+0xfc>
   46108:	00800804 	movi	r2,32
   4610c:	110bc83a 	sub	r5,r2,r4
   46110:	a0c01236 	bltu	r20,r3,4615c <__b2d+0x114>
   46114:	000f883a 	mov	r7,zero
   46118:	a904983a 	sll	r2,r21,r4
   4611c:	3146d83a 	srl	r3,r6,r5
   46120:	3108983a 	sll	r4,r6,r4
   46124:	108ffc34 	orhi	r2,r2,16368
   46128:	18a6b03a 	or	r19,r3,r2
   4612c:	3924b03a 	or	r18,r7,r4
   46130:	003fe606 	br	460cc <__b2d+0x84>
   46134:	293ffd44 	addi	r4,r5,-11
   46138:	81bffe17 	ldw	r6,-8(r16)
   4613c:	80fffe04 	addi	r3,r16,-8
   46140:	203ff11e 	bne	r4,zero,46108 <__b2d+0xc0>
   46144:	accffc34 	orhi	r19,r21,16368
   46148:	3025883a 	mov	r18,r6
   4614c:	003fdf06 	br	460cc <__b2d+0x84>
   46150:	18bfff17 	ldw	r2,-4(r3)
   46154:	110cd83a 	srl	r6,r2,r4
   46158:	003fd706 	br	460b8 <__b2d+0x70>
   4615c:	18bfff17 	ldw	r2,-4(r3)
   46160:	114ed83a 	srl	r7,r2,r5
   46164:	003fec06 	br	46118 <__b2d+0xd0>

00046168 <__ratio>:
   46168:	defff904 	addi	sp,sp,-28
   4616c:	dc400215 	stw	r17,8(sp)
   46170:	2823883a 	mov	r17,r5
   46174:	d80b883a 	mov	r5,sp
   46178:	dfc00615 	stw	ra,24(sp)
   4617c:	dd000515 	stw	r20,20(sp)
   46180:	dcc00415 	stw	r19,16(sp)
   46184:	dc800315 	stw	r18,12(sp)
   46188:	2025883a 	mov	r18,r4
   4618c:	00460480 	call	46048 <__b2d>
   46190:	8809883a 	mov	r4,r17
   46194:	d9400104 	addi	r5,sp,4
   46198:	1027883a 	mov	r19,r2
   4619c:	1829883a 	mov	r20,r3
   461a0:	00460480 	call	46048 <__b2d>
   461a4:	89000417 	ldw	r4,16(r17)
   461a8:	91c00417 	ldw	r7,16(r18)
   461ac:	d9800117 	ldw	r6,4(sp)
   461b0:	180b883a 	mov	r5,r3
   461b4:	390fc83a 	sub	r7,r7,r4
   461b8:	1009883a 	mov	r4,r2
   461bc:	d8800017 	ldw	r2,0(sp)
   461c0:	380e917a 	slli	r7,r7,5
   461c4:	2011883a 	mov	r8,r4
   461c8:	1185c83a 	sub	r2,r2,r6
   461cc:	11c5883a 	add	r2,r2,r7
   461d0:	1006953a 	slli	r3,r2,20
   461d4:	2813883a 	mov	r9,r5
   461d8:	00800d0e 	bge	zero,r2,46210 <__ratio+0xa8>
   461dc:	1d29883a 	add	r20,r3,r20
   461e0:	a00b883a 	mov	r5,r20
   461e4:	480f883a 	mov	r7,r9
   461e8:	9809883a 	mov	r4,r19
   461ec:	400d883a 	mov	r6,r8
   461f0:	0048fb40 	call	48fb4 <__divdf3>
   461f4:	dfc00617 	ldw	ra,24(sp)
   461f8:	dd000517 	ldw	r20,20(sp)
   461fc:	dcc00417 	ldw	r19,16(sp)
   46200:	dc800317 	ldw	r18,12(sp)
   46204:	dc400217 	ldw	r17,8(sp)
   46208:	dec00704 	addi	sp,sp,28
   4620c:	f800283a 	ret
   46210:	28d3c83a 	sub	r9,r5,r3
   46214:	003ff206 	br	461e0 <__ratio+0x78>

00046218 <_mprec_log10>:
   46218:	defffe04 	addi	sp,sp,-8
   4621c:	008005c4 	movi	r2,23
   46220:	dc000015 	stw	r16,0(sp)
   46224:	dfc00115 	stw	ra,4(sp)
   46228:	2021883a 	mov	r16,r4
   4622c:	11000c16 	blt	r2,r4,46260 <_mprec_log10+0x48>
   46230:	200490fa 	slli	r2,r4,3
   46234:	00d00034 	movhi	r3,16384
   46238:	18c04604 	addi	r3,r3,280
   4623c:	10c5883a 	add	r2,r2,r3
   46240:	12400117 	ldw	r9,4(r2)
   46244:	12000017 	ldw	r8,0(r2)
   46248:	4807883a 	mov	r3,r9
   4624c:	4005883a 	mov	r2,r8
   46250:	dfc00117 	ldw	ra,4(sp)
   46254:	dc000017 	ldw	r16,0(sp)
   46258:	dec00204 	addi	sp,sp,8
   4625c:	f800283a 	ret
   46260:	0011883a 	mov	r8,zero
   46264:	024ffc34 	movhi	r9,16368
   46268:	0005883a 	mov	r2,zero
   4626c:	00d00934 	movhi	r3,16420
   46270:	480b883a 	mov	r5,r9
   46274:	4009883a 	mov	r4,r8
   46278:	180f883a 	mov	r7,r3
   4627c:	100d883a 	mov	r6,r2
   46280:	0048c000 	call	48c00 <__muldf3>
   46284:	843fffc4 	addi	r16,r16,-1
   46288:	1011883a 	mov	r8,r2
   4628c:	1813883a 	mov	r9,r3
   46290:	803ff51e 	bne	r16,zero,46268 <_mprec_log10+0x50>
   46294:	4005883a 	mov	r2,r8
   46298:	4807883a 	mov	r3,r9
   4629c:	dfc00117 	ldw	ra,4(sp)
   462a0:	dc000017 	ldw	r16,0(sp)
   462a4:	dec00204 	addi	sp,sp,8
   462a8:	f800283a 	ret

000462ac <__copybits>:
   462ac:	297fffc4 	addi	r5,r5,-1
   462b0:	30800417 	ldw	r2,16(r6)
   462b4:	280bd17a 	srai	r5,r5,5
   462b8:	31800504 	addi	r6,r6,20
   462bc:	1085883a 	add	r2,r2,r2
   462c0:	294b883a 	add	r5,r5,r5
   462c4:	294b883a 	add	r5,r5,r5
   462c8:	1085883a 	add	r2,r2,r2
   462cc:	290b883a 	add	r5,r5,r4
   462d0:	3087883a 	add	r3,r6,r2
   462d4:	29400104 	addi	r5,r5,4
   462d8:	30c0052e 	bgeu	r6,r3,462f0 <__copybits+0x44>
   462dc:	30800017 	ldw	r2,0(r6)
   462e0:	31800104 	addi	r6,r6,4
   462e4:	20800015 	stw	r2,0(r4)
   462e8:	21000104 	addi	r4,r4,4
   462ec:	30fffb36 	bltu	r6,r3,462dc <__copybits+0x30>
   462f0:	2140032e 	bgeu	r4,r5,46300 <__copybits+0x54>
   462f4:	20000015 	stw	zero,0(r4)
   462f8:	21000104 	addi	r4,r4,4
   462fc:	217ffd36 	bltu	r4,r5,462f4 <__copybits+0x48>
   46300:	f800283a 	ret

00046304 <__any_on>:
   46304:	20800417 	ldw	r2,16(r4)
   46308:	2807d17a 	srai	r3,r5,5
   4630c:	21000504 	addi	r4,r4,20
   46310:	10c00d0e 	bge	r2,r3,46348 <__any_on+0x44>
   46314:	1085883a 	add	r2,r2,r2
   46318:	1085883a 	add	r2,r2,r2
   4631c:	208d883a 	add	r6,r4,r2
   46320:	2180182e 	bgeu	r4,r6,46384 <__any_on+0x80>
   46324:	30bfff17 	ldw	r2,-4(r6)
   46328:	30ffff04 	addi	r3,r6,-4
   4632c:	1000041e 	bne	r2,zero,46340 <__any_on+0x3c>
   46330:	20c0142e 	bgeu	r4,r3,46384 <__any_on+0x80>
   46334:	18ffff04 	addi	r3,r3,-4
   46338:	18800017 	ldw	r2,0(r3)
   4633c:	103ffc26 	beq	r2,zero,46330 <__any_on+0x2c>
   46340:	00800044 	movi	r2,1
   46344:	f800283a 	ret
   46348:	18800a0e 	bge	r3,r2,46374 <__any_on+0x70>
   4634c:	294007cc 	andi	r5,r5,31
   46350:	28000826 	beq	r5,zero,46374 <__any_on+0x70>
   46354:	18c5883a 	add	r2,r3,r3
   46358:	1085883a 	add	r2,r2,r2
   4635c:	208d883a 	add	r6,r4,r2
   46360:	30c00017 	ldw	r3,0(r6)
   46364:	1944d83a 	srl	r2,r3,r5
   46368:	1144983a 	sll	r2,r2,r5
   4636c:	18bff41e 	bne	r3,r2,46340 <__any_on+0x3c>
   46370:	003feb06 	br	46320 <__any_on+0x1c>
   46374:	18c5883a 	add	r2,r3,r3
   46378:	1085883a 	add	r2,r2,r2
   4637c:	208d883a 	add	r6,r4,r2
   46380:	003fe706 	br	46320 <__any_on+0x1c>
   46384:	0005883a 	mov	r2,zero
   46388:	f800283a 	ret

0004638c <_Balloc>:
   4638c:	20c01317 	ldw	r3,76(r4)
   46390:	defffb04 	addi	sp,sp,-20
   46394:	dcc00315 	stw	r19,12(sp)
   46398:	dc800215 	stw	r18,8(sp)
   4639c:	dfc00415 	stw	ra,16(sp)
   463a0:	2825883a 	mov	r18,r5
   463a4:	dc400115 	stw	r17,4(sp)
   463a8:	dc000015 	stw	r16,0(sp)
   463ac:	2027883a 	mov	r19,r4
   463b0:	01800404 	movi	r6,16
   463b4:	01400104 	movi	r5,4
   463b8:	18001726 	beq	r3,zero,46418 <_Balloc+0x8c>
   463bc:	01400044 	movi	r5,1
   463c0:	9485883a 	add	r2,r18,r18
   463c4:	2ca2983a 	sll	r17,r5,r18
   463c8:	1085883a 	add	r2,r2,r2
   463cc:	10c7883a 	add	r3,r2,r3
   463d0:	1c000017 	ldw	r16,0(r3)
   463d4:	8c4d883a 	add	r6,r17,r17
   463d8:	318d883a 	add	r6,r6,r6
   463dc:	9809883a 	mov	r4,r19
   463e0:	31800504 	addi	r6,r6,20
   463e4:	80001226 	beq	r16,zero,46430 <_Balloc+0xa4>
   463e8:	80800017 	ldw	r2,0(r16)
   463ec:	18800015 	stw	r2,0(r3)
   463f0:	80000415 	stw	zero,16(r16)
   463f4:	80000315 	stw	zero,12(r16)
   463f8:	8005883a 	mov	r2,r16
   463fc:	dfc00417 	ldw	ra,16(sp)
   46400:	dcc00317 	ldw	r19,12(sp)
   46404:	dc800217 	ldw	r18,8(sp)
   46408:	dc400117 	ldw	r17,4(sp)
   4640c:	dc000017 	ldw	r16,0(sp)
   46410:	dec00504 	addi	sp,sp,20
   46414:	f800283a 	ret
   46418:	00477540 	call	47754 <_calloc_r>
   4641c:	1007883a 	mov	r3,r2
   46420:	0021883a 	mov	r16,zero
   46424:	98801315 	stw	r2,76(r19)
   46428:	103fe41e 	bne	r2,zero,463bc <_Balloc+0x30>
   4642c:	003ff206 	br	463f8 <_Balloc+0x6c>
   46430:	00477540 	call	47754 <_calloc_r>
   46434:	103ff026 	beq	r2,zero,463f8 <_Balloc+0x6c>
   46438:	1021883a 	mov	r16,r2
   4643c:	14800115 	stw	r18,4(r2)
   46440:	14400215 	stw	r17,8(r2)
   46444:	003fea06 	br	463f0 <_Balloc+0x64>

00046448 <__d2b>:
   46448:	defff504 	addi	sp,sp,-44
   4644c:	dcc00515 	stw	r19,20(sp)
   46450:	04c00044 	movi	r19,1
   46454:	dc000215 	stw	r16,8(sp)
   46458:	2821883a 	mov	r16,r5
   4645c:	980b883a 	mov	r5,r19
   46460:	ddc00915 	stw	r23,36(sp)
   46464:	dd800815 	stw	r22,32(sp)
   46468:	dd400715 	stw	r21,28(sp)
   4646c:	dd000615 	stw	r20,24(sp)
   46470:	dc800415 	stw	r18,16(sp)
   46474:	dc400315 	stw	r17,12(sp)
   46478:	dfc00a15 	stw	ra,40(sp)
   4647c:	3023883a 	mov	r17,r6
   46480:	382d883a 	mov	r22,r7
   46484:	ddc00b17 	ldw	r23,44(sp)
   46488:	004638c0 	call	4638c <_Balloc>
   4648c:	1025883a 	mov	r18,r2
   46490:	00a00034 	movhi	r2,32768
   46494:	10bfffc4 	addi	r2,r2,-1
   46498:	8888703a 	and	r4,r17,r2
   4649c:	202ad53a 	srli	r21,r4,20
   464a0:	00800434 	movhi	r2,16
   464a4:	10bfffc4 	addi	r2,r2,-1
   464a8:	8886703a 	and	r3,r17,r2
   464ac:	a829003a 	cmpeq	r20,r21,zero
   464b0:	800b883a 	mov	r5,r16
   464b4:	d8c00115 	stw	r3,4(sp)
   464b8:	94000504 	addi	r16,r18,20
   464bc:	a000021e 	bne	r20,zero,464c8 <__d2b+0x80>
   464c0:	18c00434 	orhi	r3,r3,16
   464c4:	d8c00115 	stw	r3,4(sp)
   464c8:	28002726 	beq	r5,zero,46568 <__d2b+0x120>
   464cc:	d809883a 	mov	r4,sp
   464d0:	d9400015 	stw	r5,0(sp)
   464d4:	0045ea40 	call	45ea4 <__lo0bits>
   464d8:	100d883a 	mov	r6,r2
   464dc:	10003526 	beq	r2,zero,465b4 <__d2b+0x16c>
   464e0:	d8c00117 	ldw	r3,4(sp)
   464e4:	00800804 	movi	r2,32
   464e8:	1185c83a 	sub	r2,r2,r6
   464ec:	d9000017 	ldw	r4,0(sp)
   464f0:	1886983a 	sll	r3,r3,r2
   464f4:	1906b03a 	or	r3,r3,r4
   464f8:	90c00515 	stw	r3,20(r18)
   464fc:	d8c00117 	ldw	r3,4(sp)
   46500:	1986d83a 	srl	r3,r3,r6
   46504:	d8c00115 	stw	r3,4(sp)
   46508:	180b003a 	cmpeq	r5,r3,zero
   4650c:	00800084 	movi	r2,2
   46510:	114bc83a 	sub	r5,r2,r5
   46514:	80c00115 	stw	r3,4(r16)
   46518:	91400415 	stw	r5,16(r18)
   4651c:	a0001a1e 	bne	r20,zero,46588 <__d2b+0x140>
   46520:	3545883a 	add	r2,r6,r21
   46524:	10bef344 	addi	r2,r2,-1075
   46528:	00c00d44 	movi	r3,53
   4652c:	b0800015 	stw	r2,0(r22)
   46530:	1987c83a 	sub	r3,r3,r6
   46534:	b8c00015 	stw	r3,0(r23)
   46538:	9005883a 	mov	r2,r18
   4653c:	dfc00a17 	ldw	ra,40(sp)
   46540:	ddc00917 	ldw	r23,36(sp)
   46544:	dd800817 	ldw	r22,32(sp)
   46548:	dd400717 	ldw	r21,28(sp)
   4654c:	dd000617 	ldw	r20,24(sp)
   46550:	dcc00517 	ldw	r19,20(sp)
   46554:	dc800417 	ldw	r18,16(sp)
   46558:	dc400317 	ldw	r17,12(sp)
   4655c:	dc000217 	ldw	r16,8(sp)
   46560:	dec00b04 	addi	sp,sp,44
   46564:	f800283a 	ret
   46568:	d9000104 	addi	r4,sp,4
   4656c:	0045ea40 	call	45ea4 <__lo0bits>
   46570:	11800804 	addi	r6,r2,32
   46574:	d8800117 	ldw	r2,4(sp)
   46578:	94c00415 	stw	r19,16(r18)
   4657c:	980b883a 	mov	r5,r19
   46580:	90800515 	stw	r2,20(r18)
   46584:	a03fe626 	beq	r20,zero,46520 <__d2b+0xd8>
   46588:	2945883a 	add	r2,r5,r5
   4658c:	1085883a 	add	r2,r2,r2
   46590:	1405883a 	add	r2,r2,r16
   46594:	113fff17 	ldw	r4,-4(r2)
   46598:	30fef384 	addi	r3,r6,-1074
   4659c:	2820917a 	slli	r16,r5,5
   465a0:	b0c00015 	stw	r3,0(r22)
   465a4:	0045e340 	call	45e34 <__hi0bits>
   465a8:	80a1c83a 	sub	r16,r16,r2
   465ac:	bc000015 	stw	r16,0(r23)
   465b0:	003fe106 	br	46538 <__d2b+0xf0>
   465b4:	d8800017 	ldw	r2,0(sp)
   465b8:	90800515 	stw	r2,20(r18)
   465bc:	d8c00117 	ldw	r3,4(sp)
   465c0:	003fd106 	br	46508 <__d2b+0xc0>

000465c4 <__mdiff>:
   465c4:	defffb04 	addi	sp,sp,-20
   465c8:	dc000015 	stw	r16,0(sp)
   465cc:	2821883a 	mov	r16,r5
   465d0:	dc800215 	stw	r18,8(sp)
   465d4:	300b883a 	mov	r5,r6
   465d8:	2025883a 	mov	r18,r4
   465dc:	8009883a 	mov	r4,r16
   465e0:	dc400115 	stw	r17,4(sp)
   465e4:	dfc00415 	stw	ra,16(sp)
   465e8:	dcc00315 	stw	r19,12(sp)
   465ec:	3023883a 	mov	r17,r6
   465f0:	0045f680 	call	45f68 <__mcmp>
   465f4:	10004226 	beq	r2,zero,46700 <__mdiff+0x13c>
   465f8:	10005016 	blt	r2,zero,4673c <__mdiff+0x178>
   465fc:	0027883a 	mov	r19,zero
   46600:	81400117 	ldw	r5,4(r16)
   46604:	9009883a 	mov	r4,r18
   46608:	004638c0 	call	4638c <_Balloc>
   4660c:	1019883a 	mov	r12,r2
   46610:	82800417 	ldw	r10,16(r16)
   46614:	88800417 	ldw	r2,16(r17)
   46618:	81800504 	addi	r6,r16,20
   4661c:	5287883a 	add	r3,r10,r10
   46620:	1085883a 	add	r2,r2,r2
   46624:	18c7883a 	add	r3,r3,r3
   46628:	1085883a 	add	r2,r2,r2
   4662c:	8a000504 	addi	r8,r17,20
   46630:	64c00315 	stw	r19,12(r12)
   46634:	30db883a 	add	r13,r6,r3
   46638:	4097883a 	add	r11,r8,r2
   4663c:	61c00504 	addi	r7,r12,20
   46640:	0013883a 	mov	r9,zero
   46644:	31000017 	ldw	r4,0(r6)
   46648:	41400017 	ldw	r5,0(r8)
   4664c:	42000104 	addi	r8,r8,4
   46650:	20bfffcc 	andi	r2,r4,65535
   46654:	28ffffcc 	andi	r3,r5,65535
   46658:	10c5c83a 	sub	r2,r2,r3
   4665c:	1245883a 	add	r2,r2,r9
   46660:	2008d43a 	srli	r4,r4,16
   46664:	280ad43a 	srli	r5,r5,16
   46668:	1007d43a 	srai	r3,r2,16
   4666c:	3880000d 	sth	r2,0(r7)
   46670:	2149c83a 	sub	r4,r4,r5
   46674:	20c9883a 	add	r4,r4,r3
   46678:	3900008d 	sth	r4,2(r7)
   4667c:	31800104 	addi	r6,r6,4
   46680:	39c00104 	addi	r7,r7,4
   46684:	2013d43a 	srai	r9,r4,16
   46688:	42ffee36 	bltu	r8,r11,46644 <__mdiff+0x80>
   4668c:	33400c2e 	bgeu	r6,r13,466c0 <__mdiff+0xfc>
   46690:	30800017 	ldw	r2,0(r6)
   46694:	31800104 	addi	r6,r6,4
   46698:	10ffffcc 	andi	r3,r2,65535
   4669c:	1a47883a 	add	r3,r3,r9
   466a0:	1004d43a 	srli	r2,r2,16
   466a4:	1809d43a 	srai	r4,r3,16
   466a8:	38c0000d 	sth	r3,0(r7)
   466ac:	1105883a 	add	r2,r2,r4
   466b0:	3880008d 	sth	r2,2(r7)
   466b4:	1013d43a 	srai	r9,r2,16
   466b8:	39c00104 	addi	r7,r7,4
   466bc:	337ff436 	bltu	r6,r13,46690 <__mdiff+0xcc>
   466c0:	38bfff17 	ldw	r2,-4(r7)
   466c4:	38ffff04 	addi	r3,r7,-4
   466c8:	1000041e 	bne	r2,zero,466dc <__mdiff+0x118>
   466cc:	18ffff04 	addi	r3,r3,-4
   466d0:	18800017 	ldw	r2,0(r3)
   466d4:	52bfffc4 	addi	r10,r10,-1
   466d8:	103ffc26 	beq	r2,zero,466cc <__mdiff+0x108>
   466dc:	6005883a 	mov	r2,r12
   466e0:	62800415 	stw	r10,16(r12)
   466e4:	dfc00417 	ldw	ra,16(sp)
   466e8:	dcc00317 	ldw	r19,12(sp)
   466ec:	dc800217 	ldw	r18,8(sp)
   466f0:	dc400117 	ldw	r17,4(sp)
   466f4:	dc000017 	ldw	r16,0(sp)
   466f8:	dec00504 	addi	sp,sp,20
   466fc:	f800283a 	ret
   46700:	9009883a 	mov	r4,r18
   46704:	000b883a 	mov	r5,zero
   46708:	004638c0 	call	4638c <_Balloc>
   4670c:	1019883a 	mov	r12,r2
   46710:	00800044 	movi	r2,1
   46714:	60800415 	stw	r2,16(r12)
   46718:	6005883a 	mov	r2,r12
   4671c:	60000515 	stw	zero,20(r12)
   46720:	dfc00417 	ldw	ra,16(sp)
   46724:	dcc00317 	ldw	r19,12(sp)
   46728:	dc800217 	ldw	r18,8(sp)
   4672c:	dc400117 	ldw	r17,4(sp)
   46730:	dc000017 	ldw	r16,0(sp)
   46734:	dec00504 	addi	sp,sp,20
   46738:	f800283a 	ret
   4673c:	880d883a 	mov	r6,r17
   46740:	04c00044 	movi	r19,1
   46744:	8023883a 	mov	r17,r16
   46748:	3021883a 	mov	r16,r6
   4674c:	003fac06 	br	46600 <__mdiff+0x3c>

00046750 <__lshift>:
   46750:	defff904 	addi	sp,sp,-28
   46754:	28800417 	ldw	r2,16(r5)
   46758:	dc000015 	stw	r16,0(sp)
   4675c:	3021d17a 	srai	r16,r6,5
   46760:	28c00217 	ldw	r3,8(r5)
   46764:	10800044 	addi	r2,r2,1
   46768:	dc400115 	stw	r17,4(sp)
   4676c:	80a3883a 	add	r17,r16,r2
   46770:	dd400515 	stw	r21,20(sp)
   46774:	dd000415 	stw	r20,16(sp)
   46778:	dc800215 	stw	r18,8(sp)
   4677c:	dfc00615 	stw	ra,24(sp)
   46780:	2825883a 	mov	r18,r5
   46784:	dcc00315 	stw	r19,12(sp)
   46788:	3029883a 	mov	r20,r6
   4678c:	202b883a 	mov	r21,r4
   46790:	29400117 	ldw	r5,4(r5)
   46794:	1c40030e 	bge	r3,r17,467a4 <__lshift+0x54>
   46798:	18c7883a 	add	r3,r3,r3
   4679c:	29400044 	addi	r5,r5,1
   467a0:	1c7ffd16 	blt	r3,r17,46798 <__lshift+0x48>
   467a4:	a809883a 	mov	r4,r21
   467a8:	004638c0 	call	4638c <_Balloc>
   467ac:	1027883a 	mov	r19,r2
   467b0:	11400504 	addi	r5,r2,20
   467b4:	0400090e 	bge	zero,r16,467dc <__lshift+0x8c>
   467b8:	2805883a 	mov	r2,r5
   467bc:	0007883a 	mov	r3,zero
   467c0:	18c00044 	addi	r3,r3,1
   467c4:	10000015 	stw	zero,0(r2)
   467c8:	10800104 	addi	r2,r2,4
   467cc:	80fffc1e 	bne	r16,r3,467c0 <__lshift+0x70>
   467d0:	8405883a 	add	r2,r16,r16
   467d4:	1085883a 	add	r2,r2,r2
   467d8:	288b883a 	add	r5,r5,r2
   467dc:	90800417 	ldw	r2,16(r18)
   467e0:	91000504 	addi	r4,r18,20
   467e4:	a18007cc 	andi	r6,r20,31
   467e8:	1085883a 	add	r2,r2,r2
   467ec:	1085883a 	add	r2,r2,r2
   467f0:	208f883a 	add	r7,r4,r2
   467f4:	30001e26 	beq	r6,zero,46870 <__lshift+0x120>
   467f8:	00800804 	movi	r2,32
   467fc:	1191c83a 	sub	r8,r2,r6
   46800:	0007883a 	mov	r3,zero
   46804:	20800017 	ldw	r2,0(r4)
   46808:	1184983a 	sll	r2,r2,r6
   4680c:	1884b03a 	or	r2,r3,r2
   46810:	28800015 	stw	r2,0(r5)
   46814:	20c00017 	ldw	r3,0(r4)
   46818:	21000104 	addi	r4,r4,4
   4681c:	29400104 	addi	r5,r5,4
   46820:	1a06d83a 	srl	r3,r3,r8
   46824:	21fff736 	bltu	r4,r7,46804 <__lshift+0xb4>
   46828:	28c00015 	stw	r3,0(r5)
   4682c:	18000126 	beq	r3,zero,46834 <__lshift+0xe4>
   46830:	8c400044 	addi	r17,r17,1
   46834:	88bfffc4 	addi	r2,r17,-1
   46838:	98800415 	stw	r2,16(r19)
   4683c:	a809883a 	mov	r4,r21
   46840:	900b883a 	mov	r5,r18
   46844:	0045e0c0 	call	45e0c <_Bfree>
   46848:	9805883a 	mov	r2,r19
   4684c:	dfc00617 	ldw	ra,24(sp)
   46850:	dd400517 	ldw	r21,20(sp)
   46854:	dd000417 	ldw	r20,16(sp)
   46858:	dcc00317 	ldw	r19,12(sp)
   4685c:	dc800217 	ldw	r18,8(sp)
   46860:	dc400117 	ldw	r17,4(sp)
   46864:	dc000017 	ldw	r16,0(sp)
   46868:	dec00704 	addi	sp,sp,28
   4686c:	f800283a 	ret
   46870:	20800017 	ldw	r2,0(r4)
   46874:	21000104 	addi	r4,r4,4
   46878:	28800015 	stw	r2,0(r5)
   4687c:	29400104 	addi	r5,r5,4
   46880:	21ffec2e 	bgeu	r4,r7,46834 <__lshift+0xe4>
   46884:	20800017 	ldw	r2,0(r4)
   46888:	21000104 	addi	r4,r4,4
   4688c:	28800015 	stw	r2,0(r5)
   46890:	29400104 	addi	r5,r5,4
   46894:	21fff636 	bltu	r4,r7,46870 <__lshift+0x120>
   46898:	003fe606 	br	46834 <__lshift+0xe4>

0004689c <__multiply>:
   4689c:	defff904 	addi	sp,sp,-28
   468a0:	dcc00315 	stw	r19,12(sp)
   468a4:	dc800215 	stw	r18,8(sp)
   468a8:	2cc00417 	ldw	r19,16(r5)
   468ac:	34800417 	ldw	r18,16(r6)
   468b0:	dd000415 	stw	r20,16(sp)
   468b4:	dc400115 	stw	r17,4(sp)
   468b8:	dfc00615 	stw	ra,24(sp)
   468bc:	dd400515 	stw	r21,20(sp)
   468c0:	dc000015 	stw	r16,0(sp)
   468c4:	2823883a 	mov	r17,r5
   468c8:	3029883a 	mov	r20,r6
   468cc:	9c80040e 	bge	r19,r18,468e0 <__multiply+0x44>
   468d0:	9027883a 	mov	r19,r18
   468d4:	2c800417 	ldw	r18,16(r5)
   468d8:	2829883a 	mov	r20,r5
   468dc:	3023883a 	mov	r17,r6
   468e0:	88800217 	ldw	r2,8(r17)
   468e4:	9ca1883a 	add	r16,r19,r18
   468e8:	89400117 	ldw	r5,4(r17)
   468ec:	1400010e 	bge	r2,r16,468f4 <__multiply+0x58>
   468f0:	29400044 	addi	r5,r5,1
   468f4:	004638c0 	call	4638c <_Balloc>
   468f8:	102b883a 	mov	r21,r2
   468fc:	8405883a 	add	r2,r16,r16
   46900:	1085883a 	add	r2,r2,r2
   46904:	a9000504 	addi	r4,r21,20
   46908:	209d883a 	add	r14,r4,r2
   4690c:	2380042e 	bgeu	r4,r14,46920 <__multiply+0x84>
   46910:	2005883a 	mov	r2,r4
   46914:	10000015 	stw	zero,0(r2)
   46918:	10800104 	addi	r2,r2,4
   4691c:	13bffd36 	bltu	r2,r14,46914 <__multiply+0x78>
   46920:	9485883a 	add	r2,r18,r18
   46924:	9cc7883a 	add	r3,r19,r19
   46928:	a1800504 	addi	r6,r20,20
   4692c:	1085883a 	add	r2,r2,r2
   46930:	8b400504 	addi	r13,r17,20
   46934:	18c7883a 	add	r3,r3,r3
   46938:	309f883a 	add	r15,r6,r2
   4693c:	68d7883a 	add	r11,r13,r3
   46940:	33c03b2e 	bgeu	r6,r15,46a30 <__multiply+0x194>
   46944:	2019883a 	mov	r12,r4
   46948:	30800017 	ldw	r2,0(r6)
   4694c:	127fffcc 	andi	r9,r2,65535
   46950:	48001826 	beq	r9,zero,469b4 <__multiply+0x118>
   46954:	6811883a 	mov	r8,r13
   46958:	600f883a 	mov	r7,r12
   4695c:	0015883a 	mov	r10,zero
   46960:	40c00017 	ldw	r3,0(r8)
   46964:	39400017 	ldw	r5,0(r7)
   46968:	42000104 	addi	r8,r8,4
   4696c:	193fffcc 	andi	r4,r3,65535
   46970:	4909383a 	mul	r4,r9,r4
   46974:	1806d43a 	srli	r3,r3,16
   46978:	28bfffcc 	andi	r2,r5,65535
   4697c:	5085883a 	add	r2,r10,r2
   46980:	2089883a 	add	r4,r4,r2
   46984:	48c7383a 	mul	r3,r9,r3
   46988:	280ad43a 	srli	r5,r5,16
   4698c:	2004d43a 	srli	r2,r4,16
   46990:	3900000d 	sth	r4,0(r7)
   46994:	1947883a 	add	r3,r3,r5
   46998:	10c5883a 	add	r2,r2,r3
   4699c:	3880008d 	sth	r2,2(r7)
   469a0:	1014d43a 	srli	r10,r2,16
   469a4:	39c00104 	addi	r7,r7,4
   469a8:	42ffed36 	bltu	r8,r11,46960 <__multiply+0xc4>
   469ac:	3a800015 	stw	r10,0(r7)
   469b0:	30800017 	ldw	r2,0(r6)
   469b4:	1012d43a 	srli	r9,r2,16
   469b8:	48001926 	beq	r9,zero,46a20 <__multiply+0x184>
   469bc:	60800017 	ldw	r2,0(r12)
   469c0:	6811883a 	mov	r8,r13
   469c4:	600f883a 	mov	r7,r12
   469c8:	0015883a 	mov	r10,zero
   469cc:	100b883a 	mov	r5,r2
   469d0:	41000017 	ldw	r4,0(r8)
   469d4:	2806d43a 	srli	r3,r5,16
   469d8:	3880000d 	sth	r2,0(r7)
   469dc:	20bfffcc 	andi	r2,r4,65535
   469e0:	4885383a 	mul	r2,r9,r2
   469e4:	50c7883a 	add	r3,r10,r3
   469e8:	2008d43a 	srli	r4,r4,16
   469ec:	10c5883a 	add	r2,r2,r3
   469f0:	3880008d 	sth	r2,2(r7)
   469f4:	39c00104 	addi	r7,r7,4
   469f8:	39400017 	ldw	r5,0(r7)
   469fc:	4909383a 	mul	r4,r9,r4
   46a00:	1004d43a 	srli	r2,r2,16
   46a04:	28ffffcc 	andi	r3,r5,65535
   46a08:	20c9883a 	add	r4,r4,r3
   46a0c:	1105883a 	add	r2,r2,r4
   46a10:	42000104 	addi	r8,r8,4
   46a14:	1014d43a 	srli	r10,r2,16
   46a18:	42ffed36 	bltu	r8,r11,469d0 <__multiply+0x134>
   46a1c:	38800015 	stw	r2,0(r7)
   46a20:	31800104 	addi	r6,r6,4
   46a24:	33c0022e 	bgeu	r6,r15,46a30 <__multiply+0x194>
   46a28:	63000104 	addi	r12,r12,4
   46a2c:	003fc606 	br	46948 <__multiply+0xac>
   46a30:	0400090e 	bge	zero,r16,46a58 <__multiply+0x1bc>
   46a34:	70bfff17 	ldw	r2,-4(r14)
   46a38:	70ffff04 	addi	r3,r14,-4
   46a3c:	10000326 	beq	r2,zero,46a4c <__multiply+0x1b0>
   46a40:	00000506 	br	46a58 <__multiply+0x1bc>
   46a44:	18800017 	ldw	r2,0(r3)
   46a48:	1000031e 	bne	r2,zero,46a58 <__multiply+0x1bc>
   46a4c:	843fffc4 	addi	r16,r16,-1
   46a50:	18ffff04 	addi	r3,r3,-4
   46a54:	803ffb1e 	bne	r16,zero,46a44 <__multiply+0x1a8>
   46a58:	a805883a 	mov	r2,r21
   46a5c:	ac000415 	stw	r16,16(r21)
   46a60:	dfc00617 	ldw	ra,24(sp)
   46a64:	dd400517 	ldw	r21,20(sp)
   46a68:	dd000417 	ldw	r20,16(sp)
   46a6c:	dcc00317 	ldw	r19,12(sp)
   46a70:	dc800217 	ldw	r18,8(sp)
   46a74:	dc400117 	ldw	r17,4(sp)
   46a78:	dc000017 	ldw	r16,0(sp)
   46a7c:	dec00704 	addi	sp,sp,28
   46a80:	f800283a 	ret

00046a84 <__i2b>:
   46a84:	defffd04 	addi	sp,sp,-12
   46a88:	dc000015 	stw	r16,0(sp)
   46a8c:	04000044 	movi	r16,1
   46a90:	dc800115 	stw	r18,4(sp)
   46a94:	2825883a 	mov	r18,r5
   46a98:	800b883a 	mov	r5,r16
   46a9c:	dfc00215 	stw	ra,8(sp)
   46aa0:	004638c0 	call	4638c <_Balloc>
   46aa4:	14000415 	stw	r16,16(r2)
   46aa8:	14800515 	stw	r18,20(r2)
   46aac:	dfc00217 	ldw	ra,8(sp)
   46ab0:	dc800117 	ldw	r18,4(sp)
   46ab4:	dc000017 	ldw	r16,0(sp)
   46ab8:	dec00304 	addi	sp,sp,12
   46abc:	f800283a 	ret

00046ac0 <__multadd>:
   46ac0:	defffa04 	addi	sp,sp,-24
   46ac4:	dc800215 	stw	r18,8(sp)
   46ac8:	2c800417 	ldw	r18,16(r5)
   46acc:	dd000415 	stw	r20,16(sp)
   46ad0:	dcc00315 	stw	r19,12(sp)
   46ad4:	dc000015 	stw	r16,0(sp)
   46ad8:	dfc00515 	stw	ra,20(sp)
   46adc:	3821883a 	mov	r16,r7
   46ae0:	dc400115 	stw	r17,4(sp)
   46ae4:	2827883a 	mov	r19,r5
   46ae8:	2029883a 	mov	r20,r4
   46aec:	2a000504 	addi	r8,r5,20
   46af0:	000f883a 	mov	r7,zero
   46af4:	40800017 	ldw	r2,0(r8)
   46af8:	39c00044 	addi	r7,r7,1
   46afc:	10ffffcc 	andi	r3,r2,65535
   46b00:	1987383a 	mul	r3,r3,r6
   46b04:	1004d43a 	srli	r2,r2,16
   46b08:	1c07883a 	add	r3,r3,r16
   46b0c:	180ad43a 	srli	r5,r3,16
   46b10:	1185383a 	mul	r2,r2,r6
   46b14:	18ffffcc 	andi	r3,r3,65535
   46b18:	1145883a 	add	r2,r2,r5
   46b1c:	1008943a 	slli	r4,r2,16
   46b20:	1020d43a 	srli	r16,r2,16
   46b24:	20c9883a 	add	r4,r4,r3
   46b28:	41000015 	stw	r4,0(r8)
   46b2c:	42000104 	addi	r8,r8,4
   46b30:	3cbff016 	blt	r7,r18,46af4 <__multadd+0x34>
   46b34:	80000826 	beq	r16,zero,46b58 <__multadd+0x98>
   46b38:	98800217 	ldw	r2,8(r19)
   46b3c:	90800f0e 	bge	r18,r2,46b7c <__multadd+0xbc>
   46b40:	9485883a 	add	r2,r18,r18
   46b44:	1085883a 	add	r2,r2,r2
   46b48:	14c5883a 	add	r2,r2,r19
   46b4c:	90c00044 	addi	r3,r18,1
   46b50:	14000515 	stw	r16,20(r2)
   46b54:	98c00415 	stw	r3,16(r19)
   46b58:	9805883a 	mov	r2,r19
   46b5c:	dfc00517 	ldw	ra,20(sp)
   46b60:	dd000417 	ldw	r20,16(sp)
   46b64:	dcc00317 	ldw	r19,12(sp)
   46b68:	dc800217 	ldw	r18,8(sp)
   46b6c:	dc400117 	ldw	r17,4(sp)
   46b70:	dc000017 	ldw	r16,0(sp)
   46b74:	dec00604 	addi	sp,sp,24
   46b78:	f800283a 	ret
   46b7c:	99400117 	ldw	r5,4(r19)
   46b80:	a009883a 	mov	r4,r20
   46b84:	29400044 	addi	r5,r5,1
   46b88:	004638c0 	call	4638c <_Balloc>
   46b8c:	99800417 	ldw	r6,16(r19)
   46b90:	99400304 	addi	r5,r19,12
   46b94:	11000304 	addi	r4,r2,12
   46b98:	318d883a 	add	r6,r6,r6
   46b9c:	318d883a 	add	r6,r6,r6
   46ba0:	31800204 	addi	r6,r6,8
   46ba4:	1023883a 	mov	r17,r2
   46ba8:	0045bf40 	call	45bf4 <memcpy>
   46bac:	980b883a 	mov	r5,r19
   46bb0:	a009883a 	mov	r4,r20
   46bb4:	0045e0c0 	call	45e0c <_Bfree>
   46bb8:	8827883a 	mov	r19,r17
   46bbc:	003fe006 	br	46b40 <__multadd+0x80>

00046bc0 <__pow5mult>:
   46bc0:	defffa04 	addi	sp,sp,-24
   46bc4:	308000cc 	andi	r2,r6,3
   46bc8:	dd000415 	stw	r20,16(sp)
   46bcc:	dcc00315 	stw	r19,12(sp)
   46bd0:	dc000015 	stw	r16,0(sp)
   46bd4:	dfc00515 	stw	ra,20(sp)
   46bd8:	dc800215 	stw	r18,8(sp)
   46bdc:	dc400115 	stw	r17,4(sp)
   46be0:	3021883a 	mov	r16,r6
   46be4:	2027883a 	mov	r19,r4
   46be8:	2829883a 	mov	r20,r5
   46bec:	10002b1e 	bne	r2,zero,46c9c <__pow5mult+0xdc>
   46bf0:	8025d0ba 	srai	r18,r16,2
   46bf4:	90001b26 	beq	r18,zero,46c64 <__pow5mult+0xa4>
   46bf8:	9c001217 	ldw	r16,72(r19)
   46bfc:	8000081e 	bne	r16,zero,46c20 <__pow5mult+0x60>
   46c00:	00003006 	br	46cc4 <__pow5mult+0x104>
   46c04:	800b883a 	mov	r5,r16
   46c08:	800d883a 	mov	r6,r16
   46c0c:	9809883a 	mov	r4,r19
   46c10:	90001426 	beq	r18,zero,46c64 <__pow5mult+0xa4>
   46c14:	80800017 	ldw	r2,0(r16)
   46c18:	10001b26 	beq	r2,zero,46c88 <__pow5mult+0xc8>
   46c1c:	1021883a 	mov	r16,r2
   46c20:	9080004c 	andi	r2,r18,1
   46c24:	1005003a 	cmpeq	r2,r2,zero
   46c28:	9025d07a 	srai	r18,r18,1
   46c2c:	800d883a 	mov	r6,r16
   46c30:	9809883a 	mov	r4,r19
   46c34:	a00b883a 	mov	r5,r20
   46c38:	103ff21e 	bne	r2,zero,46c04 <__pow5mult+0x44>
   46c3c:	004689c0 	call	4689c <__multiply>
   46c40:	a00b883a 	mov	r5,r20
   46c44:	9809883a 	mov	r4,r19
   46c48:	1023883a 	mov	r17,r2
   46c4c:	0045e0c0 	call	45e0c <_Bfree>
   46c50:	8829883a 	mov	r20,r17
   46c54:	800b883a 	mov	r5,r16
   46c58:	800d883a 	mov	r6,r16
   46c5c:	9809883a 	mov	r4,r19
   46c60:	903fec1e 	bne	r18,zero,46c14 <__pow5mult+0x54>
   46c64:	a005883a 	mov	r2,r20
   46c68:	dfc00517 	ldw	ra,20(sp)
   46c6c:	dd000417 	ldw	r20,16(sp)
   46c70:	dcc00317 	ldw	r19,12(sp)
   46c74:	dc800217 	ldw	r18,8(sp)
   46c78:	dc400117 	ldw	r17,4(sp)
   46c7c:	dc000017 	ldw	r16,0(sp)
   46c80:	dec00604 	addi	sp,sp,24
   46c84:	f800283a 	ret
   46c88:	004689c0 	call	4689c <__multiply>
   46c8c:	80800015 	stw	r2,0(r16)
   46c90:	1021883a 	mov	r16,r2
   46c94:	10000015 	stw	zero,0(r2)
   46c98:	003fe106 	br	46c20 <__pow5mult+0x60>
   46c9c:	1085883a 	add	r2,r2,r2
   46ca0:	00d00034 	movhi	r3,16384
   46ca4:	18c08c04 	addi	r3,r3,560
   46ca8:	1085883a 	add	r2,r2,r2
   46cac:	10c5883a 	add	r2,r2,r3
   46cb0:	11bfff17 	ldw	r6,-4(r2)
   46cb4:	000f883a 	mov	r7,zero
   46cb8:	0046ac00 	call	46ac0 <__multadd>
   46cbc:	1029883a 	mov	r20,r2
   46cc0:	003fcb06 	br	46bf0 <__pow5mult+0x30>
   46cc4:	9809883a 	mov	r4,r19
   46cc8:	01409c44 	movi	r5,625
   46ccc:	0046a840 	call	46a84 <__i2b>
   46cd0:	98801215 	stw	r2,72(r19)
   46cd4:	1021883a 	mov	r16,r2
   46cd8:	10000015 	stw	zero,0(r2)
   46cdc:	003fd006 	br	46c20 <__pow5mult+0x60>

00046ce0 <__s2b>:
   46ce0:	defff904 	addi	sp,sp,-28
   46ce4:	dcc00315 	stw	r19,12(sp)
   46ce8:	dc800215 	stw	r18,8(sp)
   46cec:	2827883a 	mov	r19,r5
   46cf0:	2025883a 	mov	r18,r4
   46cf4:	01400244 	movi	r5,9
   46cf8:	39000204 	addi	r4,r7,8
   46cfc:	dd000415 	stw	r20,16(sp)
   46d00:	dc400115 	stw	r17,4(sp)
   46d04:	dfc00615 	stw	ra,24(sp)
   46d08:	dd400515 	stw	r21,20(sp)
   46d0c:	dc000015 	stw	r16,0(sp)
   46d10:	3829883a 	mov	r20,r7
   46d14:	3023883a 	mov	r17,r6
   46d18:	00498940 	call	49894 <__divsi3>
   46d1c:	00c00044 	movi	r3,1
   46d20:	1880350e 	bge	r3,r2,46df8 <__s2b+0x118>
   46d24:	000b883a 	mov	r5,zero
   46d28:	18c7883a 	add	r3,r3,r3
   46d2c:	29400044 	addi	r5,r5,1
   46d30:	18bffd16 	blt	r3,r2,46d28 <__s2b+0x48>
   46d34:	9009883a 	mov	r4,r18
   46d38:	004638c0 	call	4638c <_Balloc>
   46d3c:	1011883a 	mov	r8,r2
   46d40:	d8800717 	ldw	r2,28(sp)
   46d44:	00c00044 	movi	r3,1
   46d48:	01800244 	movi	r6,9
   46d4c:	40800515 	stw	r2,20(r8)
   46d50:	40c00415 	stw	r3,16(r8)
   46d54:	3440260e 	bge	r6,r17,46df0 <__s2b+0x110>
   46d58:	3021883a 	mov	r16,r6
   46d5c:	99ab883a 	add	r21,r19,r6
   46d60:	9c05883a 	add	r2,r19,r16
   46d64:	11c00007 	ldb	r7,0(r2)
   46d68:	400b883a 	mov	r5,r8
   46d6c:	9009883a 	mov	r4,r18
   46d70:	39fff404 	addi	r7,r7,-48
   46d74:	01800284 	movi	r6,10
   46d78:	0046ac00 	call	46ac0 <__multadd>
   46d7c:	84000044 	addi	r16,r16,1
   46d80:	1011883a 	mov	r8,r2
   46d84:	8c3ff61e 	bne	r17,r16,46d60 <__s2b+0x80>
   46d88:	ac45883a 	add	r2,r21,r17
   46d8c:	117ffe04 	addi	r5,r2,-8
   46d90:	880d883a 	mov	r6,r17
   46d94:	35000c0e 	bge	r6,r20,46dc8 <__s2b+0xe8>
   46d98:	a185c83a 	sub	r2,r20,r6
   46d9c:	2821883a 	mov	r16,r5
   46da0:	28a3883a 	add	r17,r5,r2
   46da4:	81c00007 	ldb	r7,0(r16)
   46da8:	400b883a 	mov	r5,r8
   46dac:	9009883a 	mov	r4,r18
   46db0:	39fff404 	addi	r7,r7,-48
   46db4:	01800284 	movi	r6,10
   46db8:	0046ac00 	call	46ac0 <__multadd>
   46dbc:	84000044 	addi	r16,r16,1
   46dc0:	1011883a 	mov	r8,r2
   46dc4:	847ff71e 	bne	r16,r17,46da4 <__s2b+0xc4>
   46dc8:	4005883a 	mov	r2,r8
   46dcc:	dfc00617 	ldw	ra,24(sp)
   46dd0:	dd400517 	ldw	r21,20(sp)
   46dd4:	dd000417 	ldw	r20,16(sp)
   46dd8:	dcc00317 	ldw	r19,12(sp)
   46ddc:	dc800217 	ldw	r18,8(sp)
   46de0:	dc400117 	ldw	r17,4(sp)
   46de4:	dc000017 	ldw	r16,0(sp)
   46de8:	dec00704 	addi	sp,sp,28
   46dec:	f800283a 	ret
   46df0:	99400284 	addi	r5,r19,10
   46df4:	003fe706 	br	46d94 <__s2b+0xb4>
   46df8:	000b883a 	mov	r5,zero
   46dfc:	003fcd06 	br	46d34 <__s2b+0x54>

00046e00 <_realloc_r>:
   46e00:	defff404 	addi	sp,sp,-48
   46e04:	dd800815 	stw	r22,32(sp)
   46e08:	dc800415 	stw	r18,16(sp)
   46e0c:	dc400315 	stw	r17,12(sp)
   46e10:	dfc00b15 	stw	ra,44(sp)
   46e14:	df000a15 	stw	fp,40(sp)
   46e18:	ddc00915 	stw	r23,36(sp)
   46e1c:	dd400715 	stw	r21,28(sp)
   46e20:	dd000615 	stw	r20,24(sp)
   46e24:	dcc00515 	stw	r19,20(sp)
   46e28:	dc000215 	stw	r16,8(sp)
   46e2c:	2825883a 	mov	r18,r5
   46e30:	3023883a 	mov	r17,r6
   46e34:	202d883a 	mov	r22,r4
   46e38:	2800c926 	beq	r5,zero,47160 <_realloc_r+0x360>
   46e3c:	004a57c0 	call	4a57c <__malloc_lock>
   46e40:	943ffe04 	addi	r16,r18,-8
   46e44:	88c002c4 	addi	r3,r17,11
   46e48:	00800584 	movi	r2,22
   46e4c:	82000117 	ldw	r8,4(r16)
   46e50:	10c01b2e 	bgeu	r2,r3,46ec0 <_realloc_r+0xc0>
   46e54:	00bffe04 	movi	r2,-8
   46e58:	188e703a 	and	r7,r3,r2
   46e5c:	3839883a 	mov	fp,r7
   46e60:	38001a16 	blt	r7,zero,46ecc <_realloc_r+0xcc>
   46e64:	e4401936 	bltu	fp,r17,46ecc <_realloc_r+0xcc>
   46e68:	013fff04 	movi	r4,-4
   46e6c:	4126703a 	and	r19,r8,r4
   46e70:	99c02616 	blt	r19,r7,46f0c <_realloc_r+0x10c>
   46e74:	802b883a 	mov	r21,r16
   46e78:	9829883a 	mov	r20,r19
   46e7c:	84000204 	addi	r16,r16,8
   46e80:	a80f883a 	mov	r7,r21
   46e84:	a70dc83a 	sub	r6,r20,fp
   46e88:	008003c4 	movi	r2,15
   46e8c:	1180c136 	bltu	r2,r6,47194 <_realloc_r+0x394>
   46e90:	38800117 	ldw	r2,4(r7)
   46e94:	a549883a 	add	r4,r20,r21
   46e98:	1080004c 	andi	r2,r2,1
   46e9c:	a084b03a 	or	r2,r20,r2
   46ea0:	38800115 	stw	r2,4(r7)
   46ea4:	20c00117 	ldw	r3,4(r4)
   46ea8:	18c00054 	ori	r3,r3,1
   46eac:	20c00115 	stw	r3,4(r4)
   46eb0:	b009883a 	mov	r4,r22
   46eb4:	004a59c0 	call	4a59c <__malloc_unlock>
   46eb8:	8023883a 	mov	r17,r16
   46ebc:	00000606 	br	46ed8 <_realloc_r+0xd8>
   46ec0:	01c00404 	movi	r7,16
   46ec4:	3839883a 	mov	fp,r7
   46ec8:	e47fe72e 	bgeu	fp,r17,46e68 <_realloc_r+0x68>
   46ecc:	00800304 	movi	r2,12
   46ed0:	0023883a 	mov	r17,zero
   46ed4:	b0800015 	stw	r2,0(r22)
   46ed8:	8805883a 	mov	r2,r17
   46edc:	dfc00b17 	ldw	ra,44(sp)
   46ee0:	df000a17 	ldw	fp,40(sp)
   46ee4:	ddc00917 	ldw	r23,36(sp)
   46ee8:	dd800817 	ldw	r22,32(sp)
   46eec:	dd400717 	ldw	r21,28(sp)
   46ef0:	dd000617 	ldw	r20,24(sp)
   46ef4:	dcc00517 	ldw	r19,20(sp)
   46ef8:	dc800417 	ldw	r18,16(sp)
   46efc:	dc400317 	ldw	r17,12(sp)
   46f00:	dc000217 	ldw	r16,8(sp)
   46f04:	dec00c04 	addi	sp,sp,48
   46f08:	f800283a 	ret
   46f0c:	00900034 	movhi	r2,16384
   46f10:	1081e204 	addi	r2,r2,1928
   46f14:	12400217 	ldw	r9,8(r2)
   46f18:	84cd883a 	add	r6,r16,r19
   46f1c:	802b883a 	mov	r21,r16
   46f20:	3240b926 	beq	r6,r9,47208 <_realloc_r+0x408>
   46f24:	31400117 	ldw	r5,4(r6)
   46f28:	00bfff84 	movi	r2,-2
   46f2c:	2884703a 	and	r2,r5,r2
   46f30:	1185883a 	add	r2,r2,r6
   46f34:	10c00117 	ldw	r3,4(r2)
   46f38:	18c0004c 	andi	r3,r3,1
   46f3c:	1807003a 	cmpeq	r3,r3,zero
   46f40:	1800a326 	beq	r3,zero,471d0 <_realloc_r+0x3d0>
   46f44:	2908703a 	and	r4,r5,r4
   46f48:	9929883a 	add	r20,r19,r4
   46f4c:	a1c0a30e 	bge	r20,r7,471dc <_realloc_r+0x3dc>
   46f50:	4080004c 	andi	r2,r8,1
   46f54:	1000551e 	bne	r2,zero,470ac <_realloc_r+0x2ac>
   46f58:	80800017 	ldw	r2,0(r16)
   46f5c:	80afc83a 	sub	r23,r16,r2
   46f60:	b8c00117 	ldw	r3,4(r23)
   46f64:	00bfff04 	movi	r2,-4
   46f68:	1884703a 	and	r2,r3,r2
   46f6c:	30002e26 	beq	r6,zero,47028 <_realloc_r+0x228>
   46f70:	3240b926 	beq	r6,r9,47258 <_realloc_r+0x458>
   46f74:	98a9883a 	add	r20,r19,r2
   46f78:	2509883a 	add	r4,r4,r20
   46f7c:	d9000015 	stw	r4,0(sp)
   46f80:	21c02a16 	blt	r4,r7,4702c <_realloc_r+0x22c>
   46f84:	30800317 	ldw	r2,12(r6)
   46f88:	30c00217 	ldw	r3,8(r6)
   46f8c:	01400904 	movi	r5,36
   46f90:	99bfff04 	addi	r6,r19,-4
   46f94:	18800315 	stw	r2,12(r3)
   46f98:	10c00215 	stw	r3,8(r2)
   46f9c:	b9000317 	ldw	r4,12(r23)
   46fa0:	b8800217 	ldw	r2,8(r23)
   46fa4:	b82b883a 	mov	r21,r23
   46fa8:	bc000204 	addi	r16,r23,8
   46fac:	20800215 	stw	r2,8(r4)
   46fb0:	11000315 	stw	r4,12(r2)
   46fb4:	2980e436 	bltu	r5,r6,47348 <_realloc_r+0x548>
   46fb8:	008004c4 	movi	r2,19
   46fbc:	9009883a 	mov	r4,r18
   46fc0:	8011883a 	mov	r8,r16
   46fc4:	11800f2e 	bgeu	r2,r6,47004 <_realloc_r+0x204>
   46fc8:	90800017 	ldw	r2,0(r18)
   46fcc:	ba000404 	addi	r8,r23,16
   46fd0:	91000204 	addi	r4,r18,8
   46fd4:	b8800215 	stw	r2,8(r23)
   46fd8:	90c00117 	ldw	r3,4(r18)
   46fdc:	008006c4 	movi	r2,27
   46fe0:	b8c00315 	stw	r3,12(r23)
   46fe4:	1180072e 	bgeu	r2,r6,47004 <_realloc_r+0x204>
   46fe8:	90c00217 	ldw	r3,8(r18)
   46fec:	ba000604 	addi	r8,r23,24
   46ff0:	91000404 	addi	r4,r18,16
   46ff4:	b8c00415 	stw	r3,16(r23)
   46ff8:	90800317 	ldw	r2,12(r18)
   46ffc:	b8800515 	stw	r2,20(r23)
   47000:	3140e726 	beq	r6,r5,473a0 <_realloc_r+0x5a0>
   47004:	20800017 	ldw	r2,0(r4)
   47008:	dd000017 	ldw	r20,0(sp)
   4700c:	b80f883a 	mov	r7,r23
   47010:	40800015 	stw	r2,0(r8)
   47014:	20c00117 	ldw	r3,4(r4)
   47018:	40c00115 	stw	r3,4(r8)
   4701c:	20800217 	ldw	r2,8(r4)
   47020:	40800215 	stw	r2,8(r8)
   47024:	003f9706 	br	46e84 <_realloc_r+0x84>
   47028:	98a9883a 	add	r20,r19,r2
   4702c:	a1c01f16 	blt	r20,r7,470ac <_realloc_r+0x2ac>
   47030:	b8c00317 	ldw	r3,12(r23)
   47034:	b8800217 	ldw	r2,8(r23)
   47038:	99bfff04 	addi	r6,r19,-4
   4703c:	01400904 	movi	r5,36
   47040:	b82b883a 	mov	r21,r23
   47044:	18800215 	stw	r2,8(r3)
   47048:	10c00315 	stw	r3,12(r2)
   4704c:	bc000204 	addi	r16,r23,8
   47050:	2980c336 	bltu	r5,r6,47360 <_realloc_r+0x560>
   47054:	008004c4 	movi	r2,19
   47058:	9009883a 	mov	r4,r18
   4705c:	8011883a 	mov	r8,r16
   47060:	11800f2e 	bgeu	r2,r6,470a0 <_realloc_r+0x2a0>
   47064:	90800017 	ldw	r2,0(r18)
   47068:	ba000404 	addi	r8,r23,16
   4706c:	91000204 	addi	r4,r18,8
   47070:	b8800215 	stw	r2,8(r23)
   47074:	90c00117 	ldw	r3,4(r18)
   47078:	008006c4 	movi	r2,27
   4707c:	b8c00315 	stw	r3,12(r23)
   47080:	1180072e 	bgeu	r2,r6,470a0 <_realloc_r+0x2a0>
   47084:	90c00217 	ldw	r3,8(r18)
   47088:	ba000604 	addi	r8,r23,24
   4708c:	91000404 	addi	r4,r18,16
   47090:	b8c00415 	stw	r3,16(r23)
   47094:	90800317 	ldw	r2,12(r18)
   47098:	b8800515 	stw	r2,20(r23)
   4709c:	3140c726 	beq	r6,r5,473bc <_realloc_r+0x5bc>
   470a0:	20800017 	ldw	r2,0(r4)
   470a4:	b80f883a 	mov	r7,r23
   470a8:	003fd906 	br	47010 <_realloc_r+0x210>
   470ac:	880b883a 	mov	r5,r17
   470b0:	b009883a 	mov	r4,r22
   470b4:	00453d00 	call	453d0 <_malloc_r>
   470b8:	1023883a 	mov	r17,r2
   470bc:	10002526 	beq	r2,zero,47154 <_realloc_r+0x354>
   470c0:	80800117 	ldw	r2,4(r16)
   470c4:	00ffff84 	movi	r3,-2
   470c8:	893ffe04 	addi	r4,r17,-8
   470cc:	10c4703a 	and	r2,r2,r3
   470d0:	8085883a 	add	r2,r16,r2
   470d4:	20809526 	beq	r4,r2,4732c <_realloc_r+0x52c>
   470d8:	99bfff04 	addi	r6,r19,-4
   470dc:	01c00904 	movi	r7,36
   470e0:	39804536 	bltu	r7,r6,471f8 <_realloc_r+0x3f8>
   470e4:	008004c4 	movi	r2,19
   470e8:	9009883a 	mov	r4,r18
   470ec:	880b883a 	mov	r5,r17
   470f0:	11800f2e 	bgeu	r2,r6,47130 <_realloc_r+0x330>
   470f4:	90800017 	ldw	r2,0(r18)
   470f8:	89400204 	addi	r5,r17,8
   470fc:	91000204 	addi	r4,r18,8
   47100:	88800015 	stw	r2,0(r17)
   47104:	90c00117 	ldw	r3,4(r18)
   47108:	008006c4 	movi	r2,27
   4710c:	88c00115 	stw	r3,4(r17)
   47110:	1180072e 	bgeu	r2,r6,47130 <_realloc_r+0x330>
   47114:	90c00217 	ldw	r3,8(r18)
   47118:	89400404 	addi	r5,r17,16
   4711c:	91000404 	addi	r4,r18,16
   47120:	88c00215 	stw	r3,8(r17)
   47124:	90800317 	ldw	r2,12(r18)
   47128:	88800315 	stw	r2,12(r17)
   4712c:	31c09126 	beq	r6,r7,47374 <_realloc_r+0x574>
   47130:	20800017 	ldw	r2,0(r4)
   47134:	28800015 	stw	r2,0(r5)
   47138:	20c00117 	ldw	r3,4(r4)
   4713c:	28c00115 	stw	r3,4(r5)
   47140:	20800217 	ldw	r2,8(r4)
   47144:	28800215 	stw	r2,8(r5)
   47148:	900b883a 	mov	r5,r18
   4714c:	b009883a 	mov	r4,r22
   47150:	00448480 	call	44848 <_free_r>
   47154:	b009883a 	mov	r4,r22
   47158:	004a59c0 	call	4a59c <__malloc_unlock>
   4715c:	003f5e06 	br	46ed8 <_realloc_r+0xd8>
   47160:	300b883a 	mov	r5,r6
   47164:	dfc00b17 	ldw	ra,44(sp)
   47168:	df000a17 	ldw	fp,40(sp)
   4716c:	ddc00917 	ldw	r23,36(sp)
   47170:	dd800817 	ldw	r22,32(sp)
   47174:	dd400717 	ldw	r21,28(sp)
   47178:	dd000617 	ldw	r20,24(sp)
   4717c:	dcc00517 	ldw	r19,20(sp)
   47180:	dc800417 	ldw	r18,16(sp)
   47184:	dc400317 	ldw	r17,12(sp)
   47188:	dc000217 	ldw	r16,8(sp)
   4718c:	dec00c04 	addi	sp,sp,48
   47190:	00453d01 	jmpi	453d0 <_malloc_r>
   47194:	38800117 	ldw	r2,4(r7)
   47198:	e54b883a 	add	r5,fp,r21
   4719c:	31000054 	ori	r4,r6,1
   471a0:	1080004c 	andi	r2,r2,1
   471a4:	1704b03a 	or	r2,r2,fp
   471a8:	38800115 	stw	r2,4(r7)
   471ac:	29000115 	stw	r4,4(r5)
   471b0:	2987883a 	add	r3,r5,r6
   471b4:	18800117 	ldw	r2,4(r3)
   471b8:	29400204 	addi	r5,r5,8
   471bc:	b009883a 	mov	r4,r22
   471c0:	10800054 	ori	r2,r2,1
   471c4:	18800115 	stw	r2,4(r3)
   471c8:	00448480 	call	44848 <_free_r>
   471cc:	003f3806 	br	46eb0 <_realloc_r+0xb0>
   471d0:	000d883a 	mov	r6,zero
   471d4:	0009883a 	mov	r4,zero
   471d8:	003f5d06 	br	46f50 <_realloc_r+0x150>
   471dc:	30c00217 	ldw	r3,8(r6)
   471e0:	30800317 	ldw	r2,12(r6)
   471e4:	800f883a 	mov	r7,r16
   471e8:	84000204 	addi	r16,r16,8
   471ec:	10c00215 	stw	r3,8(r2)
   471f0:	18800315 	stw	r2,12(r3)
   471f4:	003f2306 	br	46e84 <_realloc_r+0x84>
   471f8:	8809883a 	mov	r4,r17
   471fc:	900b883a 	mov	r5,r18
   47200:	0045c940 	call	45c94 <memmove>
   47204:	003fd006 	br	47148 <_realloc_r+0x348>
   47208:	30800117 	ldw	r2,4(r6)
   4720c:	e0c00404 	addi	r3,fp,16
   47210:	1108703a 	and	r4,r2,r4
   47214:	9905883a 	add	r2,r19,r4
   47218:	10ff4d16 	blt	r2,r3,46f50 <_realloc_r+0x150>
   4721c:	1705c83a 	sub	r2,r2,fp
   47220:	870b883a 	add	r5,r16,fp
   47224:	10800054 	ori	r2,r2,1
   47228:	28800115 	stw	r2,4(r5)
   4722c:	80c00117 	ldw	r3,4(r16)
   47230:	00900034 	movhi	r2,16384
   47234:	1081e204 	addi	r2,r2,1928
   47238:	b009883a 	mov	r4,r22
   4723c:	18c0004c 	andi	r3,r3,1
   47240:	e0c6b03a 	or	r3,fp,r3
   47244:	11400215 	stw	r5,8(r2)
   47248:	80c00115 	stw	r3,4(r16)
   4724c:	004a59c0 	call	4a59c <__malloc_unlock>
   47250:	84400204 	addi	r17,r16,8
   47254:	003f2006 	br	46ed8 <_realloc_r+0xd8>
   47258:	98a9883a 	add	r20,r19,r2
   4725c:	2509883a 	add	r4,r4,r20
   47260:	e0800404 	addi	r2,fp,16
   47264:	d9000115 	stw	r4,4(sp)
   47268:	20bf7016 	blt	r4,r2,4702c <_realloc_r+0x22c>
   4726c:	b8c00317 	ldw	r3,12(r23)
   47270:	b8800217 	ldw	r2,8(r23)
   47274:	99bfff04 	addi	r6,r19,-4
   47278:	01400904 	movi	r5,36
   4727c:	18800215 	stw	r2,8(r3)
   47280:	10c00315 	stw	r3,12(r2)
   47284:	bc400204 	addi	r17,r23,8
   47288:	29804136 	bltu	r5,r6,47390 <_realloc_r+0x590>
   4728c:	008004c4 	movi	r2,19
   47290:	9009883a 	mov	r4,r18
   47294:	880f883a 	mov	r7,r17
   47298:	11800f2e 	bgeu	r2,r6,472d8 <_realloc_r+0x4d8>
   4729c:	90800017 	ldw	r2,0(r18)
   472a0:	b9c00404 	addi	r7,r23,16
   472a4:	91000204 	addi	r4,r18,8
   472a8:	b8800215 	stw	r2,8(r23)
   472ac:	90c00117 	ldw	r3,4(r18)
   472b0:	008006c4 	movi	r2,27
   472b4:	b8c00315 	stw	r3,12(r23)
   472b8:	1180072e 	bgeu	r2,r6,472d8 <_realloc_r+0x4d8>
   472bc:	90c00217 	ldw	r3,8(r18)
   472c0:	b9c00604 	addi	r7,r23,24
   472c4:	91000404 	addi	r4,r18,16
   472c8:	b8c00415 	stw	r3,16(r23)
   472cc:	90800317 	ldw	r2,12(r18)
   472d0:	b8800515 	stw	r2,20(r23)
   472d4:	31404026 	beq	r6,r5,473d8 <_realloc_r+0x5d8>
   472d8:	20800017 	ldw	r2,0(r4)
   472dc:	38800015 	stw	r2,0(r7)
   472e0:	20c00117 	ldw	r3,4(r4)
   472e4:	38c00115 	stw	r3,4(r7)
   472e8:	20800217 	ldw	r2,8(r4)
   472ec:	38800215 	stw	r2,8(r7)
   472f0:	d8c00117 	ldw	r3,4(sp)
   472f4:	bf0b883a 	add	r5,r23,fp
   472f8:	b009883a 	mov	r4,r22
   472fc:	1f05c83a 	sub	r2,r3,fp
   47300:	10800054 	ori	r2,r2,1
   47304:	28800115 	stw	r2,4(r5)
   47308:	b8c00117 	ldw	r3,4(r23)
   4730c:	00900034 	movhi	r2,16384
   47310:	1081e204 	addi	r2,r2,1928
   47314:	11400215 	stw	r5,8(r2)
   47318:	18c0004c 	andi	r3,r3,1
   4731c:	e0c6b03a 	or	r3,fp,r3
   47320:	b8c00115 	stw	r3,4(r23)
   47324:	004a59c0 	call	4a59c <__malloc_unlock>
   47328:	003eeb06 	br	46ed8 <_realloc_r+0xd8>
   4732c:	20800117 	ldw	r2,4(r4)
   47330:	00ffff04 	movi	r3,-4
   47334:	800f883a 	mov	r7,r16
   47338:	10c4703a 	and	r2,r2,r3
   4733c:	98a9883a 	add	r20,r19,r2
   47340:	84000204 	addi	r16,r16,8
   47344:	003ecf06 	br	46e84 <_realloc_r+0x84>
   47348:	900b883a 	mov	r5,r18
   4734c:	8009883a 	mov	r4,r16
   47350:	0045c940 	call	45c94 <memmove>
   47354:	dd000017 	ldw	r20,0(sp)
   47358:	b80f883a 	mov	r7,r23
   4735c:	003ec906 	br	46e84 <_realloc_r+0x84>
   47360:	900b883a 	mov	r5,r18
   47364:	8009883a 	mov	r4,r16
   47368:	0045c940 	call	45c94 <memmove>
   4736c:	b80f883a 	mov	r7,r23
   47370:	003ec406 	br	46e84 <_realloc_r+0x84>
   47374:	90c00417 	ldw	r3,16(r18)
   47378:	89400604 	addi	r5,r17,24
   4737c:	91000604 	addi	r4,r18,24
   47380:	88c00415 	stw	r3,16(r17)
   47384:	90800517 	ldw	r2,20(r18)
   47388:	88800515 	stw	r2,20(r17)
   4738c:	003f6806 	br	47130 <_realloc_r+0x330>
   47390:	900b883a 	mov	r5,r18
   47394:	8809883a 	mov	r4,r17
   47398:	0045c940 	call	45c94 <memmove>
   4739c:	003fd406 	br	472f0 <_realloc_r+0x4f0>
   473a0:	90c00417 	ldw	r3,16(r18)
   473a4:	91000604 	addi	r4,r18,24
   473a8:	ba000804 	addi	r8,r23,32
   473ac:	b8c00615 	stw	r3,24(r23)
   473b0:	90800517 	ldw	r2,20(r18)
   473b4:	b8800715 	stw	r2,28(r23)
   473b8:	003f1206 	br	47004 <_realloc_r+0x204>
   473bc:	90c00417 	ldw	r3,16(r18)
   473c0:	91000604 	addi	r4,r18,24
   473c4:	ba000804 	addi	r8,r23,32
   473c8:	b8c00615 	stw	r3,24(r23)
   473cc:	90800517 	ldw	r2,20(r18)
   473d0:	b8800715 	stw	r2,28(r23)
   473d4:	003f3206 	br	470a0 <_realloc_r+0x2a0>
   473d8:	90c00417 	ldw	r3,16(r18)
   473dc:	91000604 	addi	r4,r18,24
   473e0:	b9c00804 	addi	r7,r23,32
   473e4:	b8c00615 	stw	r3,24(r23)
   473e8:	90800517 	ldw	r2,20(r18)
   473ec:	b8800715 	stw	r2,28(r23)
   473f0:	003fb906 	br	472d8 <_realloc_r+0x4d8>

000473f4 <__isinfd>:
   473f4:	200d883a 	mov	r6,r4
   473f8:	0109c83a 	sub	r4,zero,r4
   473fc:	2188b03a 	or	r4,r4,r6
   47400:	2008d7fa 	srli	r4,r4,31
   47404:	00a00034 	movhi	r2,32768
   47408:	10bfffc4 	addi	r2,r2,-1
   4740c:	1144703a 	and	r2,r2,r5
   47410:	2088b03a 	or	r4,r4,r2
   47414:	009ffc34 	movhi	r2,32752
   47418:	1105c83a 	sub	r2,r2,r4
   4741c:	0087c83a 	sub	r3,zero,r2
   47420:	10c4b03a 	or	r2,r2,r3
   47424:	1004d7fa 	srli	r2,r2,31
   47428:	00c00044 	movi	r3,1
   4742c:	1885c83a 	sub	r2,r3,r2
   47430:	f800283a 	ret

00047434 <__isnand>:
   47434:	200d883a 	mov	r6,r4
   47438:	0109c83a 	sub	r4,zero,r4
   4743c:	2188b03a 	or	r4,r4,r6
   47440:	2008d7fa 	srli	r4,r4,31
   47444:	00a00034 	movhi	r2,32768
   47448:	10bfffc4 	addi	r2,r2,-1
   4744c:	1144703a 	and	r2,r2,r5
   47450:	2088b03a 	or	r4,r4,r2
   47454:	009ffc34 	movhi	r2,32752
   47458:	1105c83a 	sub	r2,r2,r4
   4745c:	1004d7fa 	srli	r2,r2,31
   47460:	f800283a 	ret

00047464 <_sbrk_r>:
   47464:	defffd04 	addi	sp,sp,-12
   47468:	dc000015 	stw	r16,0(sp)
   4746c:	04100034 	movhi	r16,16384
   47470:	84077c04 	addi	r16,r16,7664
   47474:	dc400115 	stw	r17,4(sp)
   47478:	80000015 	stw	zero,0(r16)
   4747c:	2023883a 	mov	r17,r4
   47480:	2809883a 	mov	r4,r5
   47484:	dfc00215 	stw	ra,8(sp)
   47488:	004a79c0 	call	4a79c <sbrk>
   4748c:	1007883a 	mov	r3,r2
   47490:	00bfffc4 	movi	r2,-1
   47494:	18800626 	beq	r3,r2,474b0 <_sbrk_r+0x4c>
   47498:	1805883a 	mov	r2,r3
   4749c:	dfc00217 	ldw	ra,8(sp)
   474a0:	dc400117 	ldw	r17,4(sp)
   474a4:	dc000017 	ldw	r16,0(sp)
   474a8:	dec00304 	addi	sp,sp,12
   474ac:	f800283a 	ret
   474b0:	80800017 	ldw	r2,0(r16)
   474b4:	103ff826 	beq	r2,zero,47498 <_sbrk_r+0x34>
   474b8:	88800015 	stw	r2,0(r17)
   474bc:	1805883a 	mov	r2,r3
   474c0:	dfc00217 	ldw	ra,8(sp)
   474c4:	dc400117 	ldw	r17,4(sp)
   474c8:	dc000017 	ldw	r16,0(sp)
   474cc:	dec00304 	addi	sp,sp,12
   474d0:	f800283a 	ret

000474d4 <__sclose>:
   474d4:	2940038f 	ldh	r5,14(r5)
   474d8:	00478081 	jmpi	47808 <_close_r>

000474dc <__sseek>:
   474dc:	defffe04 	addi	sp,sp,-8
   474e0:	dc000015 	stw	r16,0(sp)
   474e4:	2821883a 	mov	r16,r5
   474e8:	2940038f 	ldh	r5,14(r5)
   474ec:	dfc00115 	stw	ra,4(sp)
   474f0:	0047a800 	call	47a80 <_lseek_r>
   474f4:	1007883a 	mov	r3,r2
   474f8:	00bfffc4 	movi	r2,-1
   474fc:	18800926 	beq	r3,r2,47524 <__sseek+0x48>
   47500:	8080030b 	ldhu	r2,12(r16)
   47504:	80c01415 	stw	r3,80(r16)
   47508:	10840014 	ori	r2,r2,4096
   4750c:	8080030d 	sth	r2,12(r16)
   47510:	1805883a 	mov	r2,r3
   47514:	dfc00117 	ldw	ra,4(sp)
   47518:	dc000017 	ldw	r16,0(sp)
   4751c:	dec00204 	addi	sp,sp,8
   47520:	f800283a 	ret
   47524:	8080030b 	ldhu	r2,12(r16)
   47528:	10bbffcc 	andi	r2,r2,61439
   4752c:	8080030d 	sth	r2,12(r16)
   47530:	1805883a 	mov	r2,r3
   47534:	dfc00117 	ldw	ra,4(sp)
   47538:	dc000017 	ldw	r16,0(sp)
   4753c:	dec00204 	addi	sp,sp,8
   47540:	f800283a 	ret

00047544 <__swrite>:
   47544:	2880030b 	ldhu	r2,12(r5)
   47548:	defffb04 	addi	sp,sp,-20
   4754c:	dcc00315 	stw	r19,12(sp)
   47550:	1080400c 	andi	r2,r2,256
   47554:	dc800215 	stw	r18,8(sp)
   47558:	dc400115 	stw	r17,4(sp)
   4755c:	dc000015 	stw	r16,0(sp)
   47560:	3027883a 	mov	r19,r6
   47564:	3825883a 	mov	r18,r7
   47568:	dfc00415 	stw	ra,16(sp)
   4756c:	2821883a 	mov	r16,r5
   47570:	000d883a 	mov	r6,zero
   47574:	01c00084 	movi	r7,2
   47578:	2023883a 	mov	r17,r4
   4757c:	10000226 	beq	r2,zero,47588 <__swrite+0x44>
   47580:	2940038f 	ldh	r5,14(r5)
   47584:	0047a800 	call	47a80 <_lseek_r>
   47588:	8080030b 	ldhu	r2,12(r16)
   4758c:	8140038f 	ldh	r5,14(r16)
   47590:	8809883a 	mov	r4,r17
   47594:	10bbffcc 	andi	r2,r2,61439
   47598:	980d883a 	mov	r6,r19
   4759c:	900f883a 	mov	r7,r18
   475a0:	8080030d 	sth	r2,12(r16)
   475a4:	dfc00417 	ldw	ra,16(sp)
   475a8:	dcc00317 	ldw	r19,12(sp)
   475ac:	dc800217 	ldw	r18,8(sp)
   475b0:	dc400117 	ldw	r17,4(sp)
   475b4:	dc000017 	ldw	r16,0(sp)
   475b8:	dec00504 	addi	sp,sp,20
   475bc:	00476dc1 	jmpi	476dc <_write_r>

000475c0 <__sread>:
   475c0:	defffe04 	addi	sp,sp,-8
   475c4:	dc000015 	stw	r16,0(sp)
   475c8:	2821883a 	mov	r16,r5
   475cc:	2940038f 	ldh	r5,14(r5)
   475d0:	dfc00115 	stw	ra,4(sp)
   475d4:	0047af80 	call	47af8 <_read_r>
   475d8:	1007883a 	mov	r3,r2
   475dc:	10000816 	blt	r2,zero,47600 <__sread+0x40>
   475e0:	80801417 	ldw	r2,80(r16)
   475e4:	10c5883a 	add	r2,r2,r3
   475e8:	80801415 	stw	r2,80(r16)
   475ec:	1805883a 	mov	r2,r3
   475f0:	dfc00117 	ldw	ra,4(sp)
   475f4:	dc000017 	ldw	r16,0(sp)
   475f8:	dec00204 	addi	sp,sp,8
   475fc:	f800283a 	ret
   47600:	8080030b 	ldhu	r2,12(r16)
   47604:	10bbffcc 	andi	r2,r2,61439
   47608:	8080030d 	sth	r2,12(r16)
   4760c:	1805883a 	mov	r2,r3
   47610:	dfc00117 	ldw	ra,4(sp)
   47614:	dc000017 	ldw	r16,0(sp)
   47618:	dec00204 	addi	sp,sp,8
   4761c:	f800283a 	ret

00047620 <strcmp>:
   47620:	2144b03a 	or	r2,r4,r5
   47624:	108000cc 	andi	r2,r2,3
   47628:	10001d1e 	bne	r2,zero,476a0 <strcmp+0x80>
   4762c:	200f883a 	mov	r7,r4
   47630:	28800017 	ldw	r2,0(r5)
   47634:	21000017 	ldw	r4,0(r4)
   47638:	280d883a 	mov	r6,r5
   4763c:	2080161e 	bne	r4,r2,47698 <strcmp+0x78>
   47640:	023fbff4 	movhi	r8,65279
   47644:	423fbfc4 	addi	r8,r8,-257
   47648:	2207883a 	add	r3,r4,r8
   4764c:	01602074 	movhi	r5,32897
   47650:	29602004 	addi	r5,r5,-32640
   47654:	1946703a 	and	r3,r3,r5
   47658:	0104303a 	nor	r2,zero,r4
   4765c:	10c4703a 	and	r2,r2,r3
   47660:	10001c1e 	bne	r2,zero,476d4 <strcmp+0xb4>
   47664:	4013883a 	mov	r9,r8
   47668:	2811883a 	mov	r8,r5
   4766c:	00000106 	br	47674 <strcmp+0x54>
   47670:	1800181e 	bne	r3,zero,476d4 <strcmp+0xb4>
   47674:	39c00104 	addi	r7,r7,4
   47678:	39000017 	ldw	r4,0(r7)
   4767c:	31800104 	addi	r6,r6,4
   47680:	31400017 	ldw	r5,0(r6)
   47684:	2245883a 	add	r2,r4,r9
   47688:	1204703a 	and	r2,r2,r8
   4768c:	0106303a 	nor	r3,zero,r4
   47690:	1886703a 	and	r3,r3,r2
   47694:	217ff626 	beq	r4,r5,47670 <strcmp+0x50>
   47698:	3809883a 	mov	r4,r7
   4769c:	300b883a 	mov	r5,r6
   476a0:	20c00007 	ldb	r3,0(r4)
   476a4:	1800051e 	bne	r3,zero,476bc <strcmp+0x9c>
   476a8:	00000606 	br	476c4 <strcmp+0xa4>
   476ac:	21000044 	addi	r4,r4,1
   476b0:	20c00007 	ldb	r3,0(r4)
   476b4:	29400044 	addi	r5,r5,1
   476b8:	18000226 	beq	r3,zero,476c4 <strcmp+0xa4>
   476bc:	28800007 	ldb	r2,0(r5)
   476c0:	18bffa26 	beq	r3,r2,476ac <strcmp+0x8c>
   476c4:	20c00003 	ldbu	r3,0(r4)
   476c8:	28800003 	ldbu	r2,0(r5)
   476cc:	1885c83a 	sub	r2,r3,r2
   476d0:	f800283a 	ret
   476d4:	0005883a 	mov	r2,zero
   476d8:	f800283a 	ret

000476dc <_write_r>:
   476dc:	defffd04 	addi	sp,sp,-12
   476e0:	dc000015 	stw	r16,0(sp)
   476e4:	04100034 	movhi	r16,16384
   476e8:	84077c04 	addi	r16,r16,7664
   476ec:	dc400115 	stw	r17,4(sp)
   476f0:	80000015 	stw	zero,0(r16)
   476f4:	2023883a 	mov	r17,r4
   476f8:	2809883a 	mov	r4,r5
   476fc:	300b883a 	mov	r5,r6
   47700:	380d883a 	mov	r6,r7
   47704:	dfc00215 	stw	ra,8(sp)
   47708:	004a8580 	call	4a858 <write>
   4770c:	1007883a 	mov	r3,r2
   47710:	00bfffc4 	movi	r2,-1
   47714:	18800626 	beq	r3,r2,47730 <_write_r+0x54>
   47718:	1805883a 	mov	r2,r3
   4771c:	dfc00217 	ldw	ra,8(sp)
   47720:	dc400117 	ldw	r17,4(sp)
   47724:	dc000017 	ldw	r16,0(sp)
   47728:	dec00304 	addi	sp,sp,12
   4772c:	f800283a 	ret
   47730:	80800017 	ldw	r2,0(r16)
   47734:	103ff826 	beq	r2,zero,47718 <_write_r+0x3c>
   47738:	88800015 	stw	r2,0(r17)
   4773c:	1805883a 	mov	r2,r3
   47740:	dfc00217 	ldw	ra,8(sp)
   47744:	dc400117 	ldw	r17,4(sp)
   47748:	dc000017 	ldw	r16,0(sp)
   4774c:	dec00304 	addi	sp,sp,12
   47750:	f800283a 	ret

00047754 <_calloc_r>:
   47754:	298b383a 	mul	r5,r5,r6
   47758:	defffe04 	addi	sp,sp,-8
   4775c:	dc000015 	stw	r16,0(sp)
   47760:	dfc00115 	stw	ra,4(sp)
   47764:	00453d00 	call	453d0 <_malloc_r>
   47768:	1021883a 	mov	r16,r2
   4776c:	01c00904 	movi	r7,36
   47770:	10000d26 	beq	r2,zero,477a8 <_calloc_r+0x54>
   47774:	10ffff17 	ldw	r3,-4(r2)
   47778:	1009883a 	mov	r4,r2
   4777c:	00bfff04 	movi	r2,-4
   47780:	1886703a 	and	r3,r3,r2
   47784:	1887883a 	add	r3,r3,r2
   47788:	180d883a 	mov	r6,r3
   4778c:	000b883a 	mov	r5,zero
   47790:	38c01736 	bltu	r7,r3,477f0 <_calloc_r+0x9c>
   47794:	008004c4 	movi	r2,19
   47798:	10c00836 	bltu	r2,r3,477bc <_calloc_r+0x68>
   4779c:	20000215 	stw	zero,8(r4)
   477a0:	20000015 	stw	zero,0(r4)
   477a4:	20000115 	stw	zero,4(r4)
   477a8:	8005883a 	mov	r2,r16
   477ac:	dfc00117 	ldw	ra,4(sp)
   477b0:	dc000017 	ldw	r16,0(sp)
   477b4:	dec00204 	addi	sp,sp,8
   477b8:	f800283a 	ret
   477bc:	008006c4 	movi	r2,27
   477c0:	80000015 	stw	zero,0(r16)
   477c4:	80000115 	stw	zero,4(r16)
   477c8:	81000204 	addi	r4,r16,8
   477cc:	10fff32e 	bgeu	r2,r3,4779c <_calloc_r+0x48>
   477d0:	80000215 	stw	zero,8(r16)
   477d4:	80000315 	stw	zero,12(r16)
   477d8:	81000404 	addi	r4,r16,16
   477dc:	19ffef1e 	bne	r3,r7,4779c <_calloc_r+0x48>
   477e0:	81000604 	addi	r4,r16,24
   477e4:	80000415 	stw	zero,16(r16)
   477e8:	80000515 	stw	zero,20(r16)
   477ec:	003feb06 	br	4779c <_calloc_r+0x48>
   477f0:	0045d740 	call	45d74 <memset>
   477f4:	8005883a 	mov	r2,r16
   477f8:	dfc00117 	ldw	ra,4(sp)
   477fc:	dc000017 	ldw	r16,0(sp)
   47800:	dec00204 	addi	sp,sp,8
   47804:	f800283a 	ret

00047808 <_close_r>:
   47808:	defffd04 	addi	sp,sp,-12
   4780c:	dc000015 	stw	r16,0(sp)
   47810:	04100034 	movhi	r16,16384
   47814:	84077c04 	addi	r16,r16,7664
   47818:	dc400115 	stw	r17,4(sp)
   4781c:	80000015 	stw	zero,0(r16)
   47820:	2023883a 	mov	r17,r4
   47824:	2809883a 	mov	r4,r5
   47828:	dfc00215 	stw	ra,8(sp)
   4782c:	0049ef80 	call	49ef8 <close>
   47830:	1007883a 	mov	r3,r2
   47834:	00bfffc4 	movi	r2,-1
   47838:	18800626 	beq	r3,r2,47854 <_close_r+0x4c>
   4783c:	1805883a 	mov	r2,r3
   47840:	dfc00217 	ldw	ra,8(sp)
   47844:	dc400117 	ldw	r17,4(sp)
   47848:	dc000017 	ldw	r16,0(sp)
   4784c:	dec00304 	addi	sp,sp,12
   47850:	f800283a 	ret
   47854:	80800017 	ldw	r2,0(r16)
   47858:	103ff826 	beq	r2,zero,4783c <_close_r+0x34>
   4785c:	88800015 	stw	r2,0(r17)
   47860:	1805883a 	mov	r2,r3
   47864:	dfc00217 	ldw	ra,8(sp)
   47868:	dc400117 	ldw	r17,4(sp)
   4786c:	dc000017 	ldw	r16,0(sp)
   47870:	dec00304 	addi	sp,sp,12
   47874:	f800283a 	ret

00047878 <_fclose_r>:
   47878:	defffc04 	addi	sp,sp,-16
   4787c:	dc400115 	stw	r17,4(sp)
   47880:	dc000015 	stw	r16,0(sp)
   47884:	dfc00315 	stw	ra,12(sp)
   47888:	dc800215 	stw	r18,8(sp)
   4788c:	2821883a 	mov	r16,r5
   47890:	2023883a 	mov	r17,r4
   47894:	28002926 	beq	r5,zero,4793c <_fclose_r+0xc4>
   47898:	00444b40 	call	444b4 <__sfp_lock_acquire>
   4789c:	88000226 	beq	r17,zero,478a8 <_fclose_r+0x30>
   478a0:	88800e17 	ldw	r2,56(r17)
   478a4:	10002d26 	beq	r2,zero,4795c <_fclose_r+0xe4>
   478a8:	8080030f 	ldh	r2,12(r16)
   478ac:	10002226 	beq	r2,zero,47938 <_fclose_r+0xc0>
   478b0:	8809883a 	mov	r4,r17
   478b4:	800b883a 	mov	r5,r16
   478b8:	004422c0 	call	4422c <_fflush_r>
   478bc:	1025883a 	mov	r18,r2
   478c0:	80800b17 	ldw	r2,44(r16)
   478c4:	10000426 	beq	r2,zero,478d8 <_fclose_r+0x60>
   478c8:	81400717 	ldw	r5,28(r16)
   478cc:	8809883a 	mov	r4,r17
   478d0:	103ee83a 	callr	r2
   478d4:	10002a16 	blt	r2,zero,47980 <_fclose_r+0x108>
   478d8:	8080030b 	ldhu	r2,12(r16)
   478dc:	1080200c 	andi	r2,r2,128
   478e0:	1000231e 	bne	r2,zero,47970 <_fclose_r+0xf8>
   478e4:	81400c17 	ldw	r5,48(r16)
   478e8:	28000526 	beq	r5,zero,47900 <_fclose_r+0x88>
   478ec:	80801004 	addi	r2,r16,64
   478f0:	28800226 	beq	r5,r2,478fc <_fclose_r+0x84>
   478f4:	8809883a 	mov	r4,r17
   478f8:	00448480 	call	44848 <_free_r>
   478fc:	80000c15 	stw	zero,48(r16)
   47900:	81401117 	ldw	r5,68(r16)
   47904:	28000326 	beq	r5,zero,47914 <_fclose_r+0x9c>
   47908:	8809883a 	mov	r4,r17
   4790c:	00448480 	call	44848 <_free_r>
   47910:	80001115 	stw	zero,68(r16)
   47914:	8000030d 	sth	zero,12(r16)
   47918:	00444b80 	call	444b8 <__sfp_lock_release>
   4791c:	9005883a 	mov	r2,r18
   47920:	dfc00317 	ldw	ra,12(sp)
   47924:	dc800217 	ldw	r18,8(sp)
   47928:	dc400117 	ldw	r17,4(sp)
   4792c:	dc000017 	ldw	r16,0(sp)
   47930:	dec00404 	addi	sp,sp,16
   47934:	f800283a 	ret
   47938:	00444b80 	call	444b8 <__sfp_lock_release>
   4793c:	0025883a 	mov	r18,zero
   47940:	9005883a 	mov	r2,r18
   47944:	dfc00317 	ldw	ra,12(sp)
   47948:	dc800217 	ldw	r18,8(sp)
   4794c:	dc400117 	ldw	r17,4(sp)
   47950:	dc000017 	ldw	r16,0(sp)
   47954:	dec00404 	addi	sp,sp,16
   47958:	f800283a 	ret
   4795c:	8809883a 	mov	r4,r17
   47960:	00444c40 	call	444c4 <__sinit>
   47964:	8080030f 	ldh	r2,12(r16)
   47968:	103fd11e 	bne	r2,zero,478b0 <_fclose_r+0x38>
   4796c:	003ff206 	br	47938 <_fclose_r+0xc0>
   47970:	81400417 	ldw	r5,16(r16)
   47974:	8809883a 	mov	r4,r17
   47978:	00448480 	call	44848 <_free_r>
   4797c:	003fd906 	br	478e4 <_fclose_r+0x6c>
   47980:	04bfffc4 	movi	r18,-1
   47984:	003fd406 	br	478d8 <_fclose_r+0x60>

00047988 <fclose>:
   47988:	00900034 	movhi	r2,16384
   4798c:	10876604 	addi	r2,r2,7576
   47990:	200b883a 	mov	r5,r4
   47994:	11000017 	ldw	r4,0(r2)
   47998:	00478781 	jmpi	47878 <_fclose_r>

0004799c <_fstat_r>:
   4799c:	defffd04 	addi	sp,sp,-12
   479a0:	dc000015 	stw	r16,0(sp)
   479a4:	04100034 	movhi	r16,16384
   479a8:	84077c04 	addi	r16,r16,7664
   479ac:	dc400115 	stw	r17,4(sp)
   479b0:	80000015 	stw	zero,0(r16)
   479b4:	2023883a 	mov	r17,r4
   479b8:	2809883a 	mov	r4,r5
   479bc:	300b883a 	mov	r5,r6
   479c0:	dfc00215 	stw	ra,8(sp)
   479c4:	004a0800 	call	4a080 <fstat>
   479c8:	1007883a 	mov	r3,r2
   479cc:	00bfffc4 	movi	r2,-1
   479d0:	18800626 	beq	r3,r2,479ec <_fstat_r+0x50>
   479d4:	1805883a 	mov	r2,r3
   479d8:	dfc00217 	ldw	ra,8(sp)
   479dc:	dc400117 	ldw	r17,4(sp)
   479e0:	dc000017 	ldw	r16,0(sp)
   479e4:	dec00304 	addi	sp,sp,12
   479e8:	f800283a 	ret
   479ec:	80800017 	ldw	r2,0(r16)
   479f0:	103ff826 	beq	r2,zero,479d4 <_fstat_r+0x38>
   479f4:	88800015 	stw	r2,0(r17)
   479f8:	1805883a 	mov	r2,r3
   479fc:	dfc00217 	ldw	ra,8(sp)
   47a00:	dc400117 	ldw	r17,4(sp)
   47a04:	dc000017 	ldw	r16,0(sp)
   47a08:	dec00304 	addi	sp,sp,12
   47a0c:	f800283a 	ret

00047a10 <_isatty_r>:
   47a10:	defffd04 	addi	sp,sp,-12
   47a14:	dc000015 	stw	r16,0(sp)
   47a18:	04100034 	movhi	r16,16384
   47a1c:	84077c04 	addi	r16,r16,7664
   47a20:	dc400115 	stw	r17,4(sp)
   47a24:	80000015 	stw	zero,0(r16)
   47a28:	2023883a 	mov	r17,r4
   47a2c:	2809883a 	mov	r4,r5
   47a30:	dfc00215 	stw	ra,8(sp)
   47a34:	004a1b40 	call	4a1b4 <isatty>
   47a38:	1007883a 	mov	r3,r2
   47a3c:	00bfffc4 	movi	r2,-1
   47a40:	18800626 	beq	r3,r2,47a5c <_isatty_r+0x4c>
   47a44:	1805883a 	mov	r2,r3
   47a48:	dfc00217 	ldw	ra,8(sp)
   47a4c:	dc400117 	ldw	r17,4(sp)
   47a50:	dc000017 	ldw	r16,0(sp)
   47a54:	dec00304 	addi	sp,sp,12
   47a58:	f800283a 	ret
   47a5c:	80800017 	ldw	r2,0(r16)
   47a60:	103ff826 	beq	r2,zero,47a44 <_isatty_r+0x34>
   47a64:	88800015 	stw	r2,0(r17)
   47a68:	1805883a 	mov	r2,r3
   47a6c:	dfc00217 	ldw	ra,8(sp)
   47a70:	dc400117 	ldw	r17,4(sp)
   47a74:	dc000017 	ldw	r16,0(sp)
   47a78:	dec00304 	addi	sp,sp,12
   47a7c:	f800283a 	ret

00047a80 <_lseek_r>:
   47a80:	defffd04 	addi	sp,sp,-12
   47a84:	dc000015 	stw	r16,0(sp)
   47a88:	04100034 	movhi	r16,16384
   47a8c:	84077c04 	addi	r16,r16,7664
   47a90:	dc400115 	stw	r17,4(sp)
   47a94:	80000015 	stw	zero,0(r16)
   47a98:	2023883a 	mov	r17,r4
   47a9c:	2809883a 	mov	r4,r5
   47aa0:	300b883a 	mov	r5,r6
   47aa4:	380d883a 	mov	r6,r7
   47aa8:	dfc00215 	stw	ra,8(sp)
   47aac:	004a3c00 	call	4a3c0 <lseek>
   47ab0:	1007883a 	mov	r3,r2
   47ab4:	00bfffc4 	movi	r2,-1
   47ab8:	18800626 	beq	r3,r2,47ad4 <_lseek_r+0x54>
   47abc:	1805883a 	mov	r2,r3
   47ac0:	dfc00217 	ldw	ra,8(sp)
   47ac4:	dc400117 	ldw	r17,4(sp)
   47ac8:	dc000017 	ldw	r16,0(sp)
   47acc:	dec00304 	addi	sp,sp,12
   47ad0:	f800283a 	ret
   47ad4:	80800017 	ldw	r2,0(r16)
   47ad8:	103ff826 	beq	r2,zero,47abc <_lseek_r+0x3c>
   47adc:	88800015 	stw	r2,0(r17)
   47ae0:	1805883a 	mov	r2,r3
   47ae4:	dfc00217 	ldw	ra,8(sp)
   47ae8:	dc400117 	ldw	r17,4(sp)
   47aec:	dc000017 	ldw	r16,0(sp)
   47af0:	dec00304 	addi	sp,sp,12
   47af4:	f800283a 	ret

00047af8 <_read_r>:
   47af8:	defffd04 	addi	sp,sp,-12
   47afc:	dc000015 	stw	r16,0(sp)
   47b00:	04100034 	movhi	r16,16384
   47b04:	84077c04 	addi	r16,r16,7664
   47b08:	dc400115 	stw	r17,4(sp)
   47b0c:	80000015 	stw	zero,0(r16)
   47b10:	2023883a 	mov	r17,r4
   47b14:	2809883a 	mov	r4,r5
   47b18:	300b883a 	mov	r5,r6
   47b1c:	380d883a 	mov	r6,r7
   47b20:	dfc00215 	stw	ra,8(sp)
   47b24:	004a5bc0 	call	4a5bc <read>
   47b28:	1007883a 	mov	r3,r2
   47b2c:	00bfffc4 	movi	r2,-1
   47b30:	18800626 	beq	r3,r2,47b4c <_read_r+0x54>
   47b34:	1805883a 	mov	r2,r3
   47b38:	dfc00217 	ldw	ra,8(sp)
   47b3c:	dc400117 	ldw	r17,4(sp)
   47b40:	dc000017 	ldw	r16,0(sp)
   47b44:	dec00304 	addi	sp,sp,12
   47b48:	f800283a 	ret
   47b4c:	80800017 	ldw	r2,0(r16)
   47b50:	103ff826 	beq	r2,zero,47b34 <_read_r+0x3c>
   47b54:	88800015 	stw	r2,0(r17)
   47b58:	1805883a 	mov	r2,r3
   47b5c:	dfc00217 	ldw	ra,8(sp)
   47b60:	dc400117 	ldw	r17,4(sp)
   47b64:	dc000017 	ldw	r16,0(sp)
   47b68:	dec00304 	addi	sp,sp,12
   47b6c:	f800283a 	ret

00047b70 <__udivdi3>:
   47b70:	defff004 	addi	sp,sp,-64
   47b74:	2005883a 	mov	r2,r4
   47b78:	3011883a 	mov	r8,r6
   47b7c:	df000e15 	stw	fp,56(sp)
   47b80:	dd000a15 	stw	r20,40(sp)
   47b84:	dc000615 	stw	r16,24(sp)
   47b88:	dfc00f15 	stw	ra,60(sp)
   47b8c:	ddc00d15 	stw	r23,52(sp)
   47b90:	dd800c15 	stw	r22,48(sp)
   47b94:	dd400b15 	stw	r21,44(sp)
   47b98:	dcc00915 	stw	r19,36(sp)
   47b9c:	dc800815 	stw	r18,32(sp)
   47ba0:	dc400715 	stw	r17,28(sp)
   47ba4:	4021883a 	mov	r16,r8
   47ba8:	1039883a 	mov	fp,r2
   47bac:	2829883a 	mov	r20,r5
   47bb0:	38003b1e 	bne	r7,zero,47ca0 <__udivdi3+0x130>
   47bb4:	2a005c36 	bltu	r5,r8,47d28 <__udivdi3+0x1b8>
   47bb8:	4000a626 	beq	r8,zero,47e54 <__udivdi3+0x2e4>
   47bbc:	00bfffd4 	movui	r2,65535
   47bc0:	14009e36 	bltu	r2,r16,47e3c <__udivdi3+0x2cc>
   47bc4:	00803fc4 	movi	r2,255
   47bc8:	14013d36 	bltu	r2,r16,480c0 <__udivdi3+0x550>
   47bcc:	000b883a 	mov	r5,zero
   47bd0:	0005883a 	mov	r2,zero
   47bd4:	8084d83a 	srl	r2,r16,r2
   47bd8:	01100034 	movhi	r4,16384
   47bdc:	21009404 	addi	r4,r4,592
   47be0:	01800804 	movi	r6,32
   47be4:	1105883a 	add	r2,r2,r4
   47be8:	10c00003 	ldbu	r3,0(r2)
   47bec:	28c7883a 	add	r3,r5,r3
   47bf0:	30edc83a 	sub	r22,r6,r3
   47bf4:	b000ee1e 	bne	r22,zero,47fb0 <__udivdi3+0x440>
   47bf8:	802ad43a 	srli	r21,r16,16
   47bfc:	00800044 	movi	r2,1
   47c00:	a423c83a 	sub	r17,r20,r16
   47c04:	85ffffcc 	andi	r23,r16,65535
   47c08:	d8800315 	stw	r2,12(sp)
   47c0c:	8809883a 	mov	r4,r17
   47c10:	a80b883a 	mov	r5,r21
   47c14:	00499540 	call	49954 <__udivsi3>
   47c18:	8809883a 	mov	r4,r17
   47c1c:	a80b883a 	mov	r5,r21
   47c20:	102d883a 	mov	r22,r2
   47c24:	004995c0 	call	4995c <__umodsi3>
   47c28:	1004943a 	slli	r2,r2,16
   47c2c:	e006d43a 	srli	r3,fp,16
   47c30:	bda3383a 	mul	r17,r23,r22
   47c34:	10c4b03a 	or	r2,r2,r3
   47c38:	1440042e 	bgeu	r2,r17,47c4c <__udivdi3+0xdc>
   47c3c:	1405883a 	add	r2,r2,r16
   47c40:	b5bfffc4 	addi	r22,r22,-1
   47c44:	14000136 	bltu	r2,r16,47c4c <__udivdi3+0xdc>
   47c48:	14413d36 	bltu	r2,r17,48140 <__udivdi3+0x5d0>
   47c4c:	1463c83a 	sub	r17,r2,r17
   47c50:	8809883a 	mov	r4,r17
   47c54:	a80b883a 	mov	r5,r21
   47c58:	00499540 	call	49954 <__udivsi3>
   47c5c:	8809883a 	mov	r4,r17
   47c60:	a80b883a 	mov	r5,r21
   47c64:	1029883a 	mov	r20,r2
   47c68:	004995c0 	call	4995c <__umodsi3>
   47c6c:	1004943a 	slli	r2,r2,16
   47c70:	bd09383a 	mul	r4,r23,r20
   47c74:	e0ffffcc 	andi	r3,fp,65535
   47c78:	10c4b03a 	or	r2,r2,r3
   47c7c:	1100042e 	bgeu	r2,r4,47c90 <__udivdi3+0x120>
   47c80:	8085883a 	add	r2,r16,r2
   47c84:	a53fffc4 	addi	r20,r20,-1
   47c88:	14000136 	bltu	r2,r16,47c90 <__udivdi3+0x120>
   47c8c:	11012036 	bltu	r2,r4,48110 <__udivdi3+0x5a0>
   47c90:	b004943a 	slli	r2,r22,16
   47c94:	d9000317 	ldw	r4,12(sp)
   47c98:	a084b03a 	or	r2,r20,r2
   47c9c:	00001506 	br	47cf4 <__udivdi3+0x184>
   47ca0:	380d883a 	mov	r6,r7
   47ca4:	29c06236 	bltu	r5,r7,47e30 <__udivdi3+0x2c0>
   47ca8:	00bfffd4 	movui	r2,65535
   47cac:	11c05a36 	bltu	r2,r7,47e18 <__udivdi3+0x2a8>
   47cb0:	00803fc4 	movi	r2,255
   47cb4:	11c0fc36 	bltu	r2,r7,480a8 <__udivdi3+0x538>
   47cb8:	000b883a 	mov	r5,zero
   47cbc:	0005883a 	mov	r2,zero
   47cc0:	3084d83a 	srl	r2,r6,r2
   47cc4:	01100034 	movhi	r4,16384
   47cc8:	21009404 	addi	r4,r4,592
   47ccc:	01c00804 	movi	r7,32
   47cd0:	1105883a 	add	r2,r2,r4
   47cd4:	10c00003 	ldbu	r3,0(r2)
   47cd8:	28c7883a 	add	r3,r5,r3
   47cdc:	38efc83a 	sub	r23,r7,r3
   47ce0:	b800691e 	bne	r23,zero,47e88 <__udivdi3+0x318>
   47ce4:	35000136 	bltu	r6,r20,47cec <__udivdi3+0x17c>
   47ce8:	e4005136 	bltu	fp,r16,47e30 <__udivdi3+0x2c0>
   47cec:	00800044 	movi	r2,1
   47cf0:	0009883a 	mov	r4,zero
   47cf4:	2007883a 	mov	r3,r4
   47cf8:	dfc00f17 	ldw	ra,60(sp)
   47cfc:	df000e17 	ldw	fp,56(sp)
   47d00:	ddc00d17 	ldw	r23,52(sp)
   47d04:	dd800c17 	ldw	r22,48(sp)
   47d08:	dd400b17 	ldw	r21,44(sp)
   47d0c:	dd000a17 	ldw	r20,40(sp)
   47d10:	dcc00917 	ldw	r19,36(sp)
   47d14:	dc800817 	ldw	r18,32(sp)
   47d18:	dc400717 	ldw	r17,28(sp)
   47d1c:	dc000617 	ldw	r16,24(sp)
   47d20:	dec01004 	addi	sp,sp,64
   47d24:	f800283a 	ret
   47d28:	00bfffd4 	movui	r2,65535
   47d2c:	12005036 	bltu	r2,r8,47e70 <__udivdi3+0x300>
   47d30:	00803fc4 	movi	r2,255
   47d34:	1200e836 	bltu	r2,r8,480d8 <__udivdi3+0x568>
   47d38:	000b883a 	mov	r5,zero
   47d3c:	0005883a 	mov	r2,zero
   47d40:	8084d83a 	srl	r2,r16,r2
   47d44:	01100034 	movhi	r4,16384
   47d48:	21009404 	addi	r4,r4,592
   47d4c:	01800804 	movi	r6,32
   47d50:	1105883a 	add	r2,r2,r4
   47d54:	10c00003 	ldbu	r3,0(r2)
   47d58:	28c7883a 	add	r3,r5,r3
   47d5c:	30cbc83a 	sub	r5,r6,r3
   47d60:	28000626 	beq	r5,zero,47d7c <__udivdi3+0x20c>
   47d64:	3145c83a 	sub	r2,r6,r5
   47d68:	e084d83a 	srl	r2,fp,r2
   47d6c:	a146983a 	sll	r3,r20,r5
   47d70:	e178983a 	sll	fp,fp,r5
   47d74:	8160983a 	sll	r16,r16,r5
   47d78:	18a8b03a 	or	r20,r3,r2
   47d7c:	802ad43a 	srli	r21,r16,16
   47d80:	a009883a 	mov	r4,r20
   47d84:	85ffffcc 	andi	r23,r16,65535
   47d88:	a80b883a 	mov	r5,r21
   47d8c:	00499540 	call	49954 <__udivsi3>
   47d90:	a009883a 	mov	r4,r20
   47d94:	a80b883a 	mov	r5,r21
   47d98:	102d883a 	mov	r22,r2
   47d9c:	004995c0 	call	4995c <__umodsi3>
   47da0:	1004943a 	slli	r2,r2,16
   47da4:	e006d43a 	srli	r3,fp,16
   47da8:	bda3383a 	mul	r17,r23,r22
   47dac:	10c4b03a 	or	r2,r2,r3
   47db0:	1440042e 	bgeu	r2,r17,47dc4 <__udivdi3+0x254>
   47db4:	1405883a 	add	r2,r2,r16
   47db8:	b5bfffc4 	addi	r22,r22,-1
   47dbc:	14000136 	bltu	r2,r16,47dc4 <__udivdi3+0x254>
   47dc0:	1440d536 	bltu	r2,r17,48118 <__udivdi3+0x5a8>
   47dc4:	1463c83a 	sub	r17,r2,r17
   47dc8:	8809883a 	mov	r4,r17
   47dcc:	a80b883a 	mov	r5,r21
   47dd0:	00499540 	call	49954 <__udivsi3>
   47dd4:	8809883a 	mov	r4,r17
   47dd8:	a80b883a 	mov	r5,r21
   47ddc:	1029883a 	mov	r20,r2
   47de0:	004995c0 	call	4995c <__umodsi3>
   47de4:	1004943a 	slli	r2,r2,16
   47de8:	bd09383a 	mul	r4,r23,r20
   47dec:	e0ffffcc 	andi	r3,fp,65535
   47df0:	10c4b03a 	or	r2,r2,r3
   47df4:	1100042e 	bgeu	r2,r4,47e08 <__udivdi3+0x298>
   47df8:	8085883a 	add	r2,r16,r2
   47dfc:	a53fffc4 	addi	r20,r20,-1
   47e00:	14000136 	bltu	r2,r16,47e08 <__udivdi3+0x298>
   47e04:	1100c736 	bltu	r2,r4,48124 <__udivdi3+0x5b4>
   47e08:	b004943a 	slli	r2,r22,16
   47e0c:	0009883a 	mov	r4,zero
   47e10:	a084b03a 	or	r2,r20,r2
   47e14:	003fb706 	br	47cf4 <__udivdi3+0x184>
   47e18:	00804034 	movhi	r2,256
   47e1c:	10bfffc4 	addi	r2,r2,-1
   47e20:	11c0a436 	bltu	r2,r7,480b4 <__udivdi3+0x544>
   47e24:	01400404 	movi	r5,16
   47e28:	2805883a 	mov	r2,r5
   47e2c:	003fa406 	br	47cc0 <__udivdi3+0x150>
   47e30:	0005883a 	mov	r2,zero
   47e34:	0009883a 	mov	r4,zero
   47e38:	003fae06 	br	47cf4 <__udivdi3+0x184>
   47e3c:	00804034 	movhi	r2,256
   47e40:	10bfffc4 	addi	r2,r2,-1
   47e44:	1400a136 	bltu	r2,r16,480cc <__udivdi3+0x55c>
   47e48:	01400404 	movi	r5,16
   47e4c:	2805883a 	mov	r2,r5
   47e50:	003f6006 	br	47bd4 <__udivdi3+0x64>
   47e54:	01000044 	movi	r4,1
   47e58:	000b883a 	mov	r5,zero
   47e5c:	00499540 	call	49954 <__udivsi3>
   47e60:	1021883a 	mov	r16,r2
   47e64:	00bfffd4 	movui	r2,65535
   47e68:	143ff436 	bltu	r2,r16,47e3c <__udivdi3+0x2cc>
   47e6c:	003f5506 	br	47bc4 <__udivdi3+0x54>
   47e70:	00804034 	movhi	r2,256
   47e74:	10bfffc4 	addi	r2,r2,-1
   47e78:	12009a36 	bltu	r2,r8,480e4 <__udivdi3+0x574>
   47e7c:	01400404 	movi	r5,16
   47e80:	2805883a 	mov	r2,r5
   47e84:	003fae06 	br	47d40 <__udivdi3+0x1d0>
   47e88:	3dc5c83a 	sub	r2,r7,r23
   47e8c:	35c8983a 	sll	r4,r6,r23
   47e90:	8086d83a 	srl	r3,r16,r2
   47e94:	a0a2d83a 	srl	r17,r20,r2
   47e98:	e084d83a 	srl	r2,fp,r2
   47e9c:	20eab03a 	or	r21,r4,r3
   47ea0:	a82cd43a 	srli	r22,r21,16
   47ea4:	a5c6983a 	sll	r3,r20,r23
   47ea8:	8809883a 	mov	r4,r17
   47eac:	b00b883a 	mov	r5,r22
   47eb0:	1886b03a 	or	r3,r3,r2
   47eb4:	d8c00215 	stw	r3,8(sp)
   47eb8:	00499540 	call	49954 <__udivsi3>
   47ebc:	8809883a 	mov	r4,r17
   47ec0:	b00b883a 	mov	r5,r22
   47ec4:	1029883a 	mov	r20,r2
   47ec8:	004995c0 	call	4995c <__umodsi3>
   47ecc:	a8ffffcc 	andi	r3,r21,65535
   47ed0:	d8c00515 	stw	r3,20(sp)
   47ed4:	d9000217 	ldw	r4,8(sp)
   47ed8:	d9400517 	ldw	r5,20(sp)
   47edc:	1004943a 	slli	r2,r2,16
   47ee0:	2006d43a 	srli	r3,r4,16
   47ee4:	85e0983a 	sll	r16,r16,r23
   47ee8:	2d23383a 	mul	r17,r5,r20
   47eec:	10c4b03a 	or	r2,r2,r3
   47ef0:	dc000015 	stw	r16,0(sp)
   47ef4:	1440032e 	bgeu	r2,r17,47f04 <__udivdi3+0x394>
   47ef8:	1545883a 	add	r2,r2,r21
   47efc:	a53fffc4 	addi	r20,r20,-1
   47f00:	15407f2e 	bgeu	r2,r21,48100 <__udivdi3+0x590>
   47f04:	1463c83a 	sub	r17,r2,r17
   47f08:	8809883a 	mov	r4,r17
   47f0c:	b00b883a 	mov	r5,r22
   47f10:	00499540 	call	49954 <__udivsi3>
   47f14:	8809883a 	mov	r4,r17
   47f18:	b00b883a 	mov	r5,r22
   47f1c:	1021883a 	mov	r16,r2
   47f20:	004995c0 	call	4995c <__umodsi3>
   47f24:	d8c00517 	ldw	r3,20(sp)
   47f28:	d9000217 	ldw	r4,8(sp)
   47f2c:	1004943a 	slli	r2,r2,16
   47f30:	1c0f383a 	mul	r7,r3,r16
   47f34:	20ffffcc 	andi	r3,r4,65535
   47f38:	10e2b03a 	or	r17,r2,r3
   47f3c:	89c0032e 	bgeu	r17,r7,47f4c <__udivdi3+0x3dc>
   47f40:	8d63883a 	add	r17,r17,r21
   47f44:	843fffc4 	addi	r16,r16,-1
   47f48:	8d40692e 	bgeu	r17,r21,480f0 <__udivdi3+0x580>
   47f4c:	a008943a 	slli	r4,r20,16
   47f50:	d9400017 	ldw	r5,0(sp)
   47f54:	89e3c83a 	sub	r17,r17,r7
   47f58:	8110b03a 	or	r8,r16,r4
   47f5c:	280cd43a 	srli	r6,r5,16
   47f60:	28ffffcc 	andi	r3,r5,65535
   47f64:	40bfffcc 	andi	r2,r8,65535
   47f68:	400ad43a 	srli	r5,r8,16
   47f6c:	10d3383a 	mul	r9,r2,r3
   47f70:	1185383a 	mul	r2,r2,r6
   47f74:	28c7383a 	mul	r3,r5,r3
   47f78:	4808d43a 	srli	r4,r9,16
   47f7c:	298b383a 	mul	r5,r5,r6
   47f80:	10c5883a 	add	r2,r2,r3
   47f84:	2089883a 	add	r4,r4,r2
   47f88:	20c0022e 	bgeu	r4,r3,47f94 <__udivdi3+0x424>
   47f8c:	00800074 	movhi	r2,1
   47f90:	288b883a 	add	r5,r5,r2
   47f94:	2004d43a 	srli	r2,r4,16
   47f98:	288b883a 	add	r5,r5,r2
   47f9c:	89403f36 	bltu	r17,r5,4809c <__udivdi3+0x52c>
   47fa0:	89403926 	beq	r17,r5,48088 <__udivdi3+0x518>
   47fa4:	4005883a 	mov	r2,r8
   47fa8:	0009883a 	mov	r4,zero
   47fac:	003f5106 	br	47cf4 <__udivdi3+0x184>
   47fb0:	85a0983a 	sll	r16,r16,r22
   47fb4:	3585c83a 	sub	r2,r6,r22
   47fb8:	a0a2d83a 	srl	r17,r20,r2
   47fbc:	802ad43a 	srli	r21,r16,16
   47fc0:	e084d83a 	srl	r2,fp,r2
   47fc4:	a586983a 	sll	r3,r20,r22
   47fc8:	8809883a 	mov	r4,r17
   47fcc:	a80b883a 	mov	r5,r21
   47fd0:	1886b03a 	or	r3,r3,r2
   47fd4:	d8c00115 	stw	r3,4(sp)
   47fd8:	00499540 	call	49954 <__udivsi3>
   47fdc:	8809883a 	mov	r4,r17
   47fe0:	a80b883a 	mov	r5,r21
   47fe4:	d8800415 	stw	r2,16(sp)
   47fe8:	004995c0 	call	4995c <__umodsi3>
   47fec:	d9000117 	ldw	r4,4(sp)
   47ff0:	d9400417 	ldw	r5,16(sp)
   47ff4:	1004943a 	slli	r2,r2,16
   47ff8:	85ffffcc 	andi	r23,r16,65535
   47ffc:	2006d43a 	srli	r3,r4,16
   48000:	b963383a 	mul	r17,r23,r5
   48004:	10c4b03a 	or	r2,r2,r3
   48008:	1440042e 	bgeu	r2,r17,4801c <__udivdi3+0x4ac>
   4800c:	297fffc4 	addi	r5,r5,-1
   48010:	1405883a 	add	r2,r2,r16
   48014:	d9400415 	stw	r5,16(sp)
   48018:	1400442e 	bgeu	r2,r16,4812c <__udivdi3+0x5bc>
   4801c:	1463c83a 	sub	r17,r2,r17
   48020:	8809883a 	mov	r4,r17
   48024:	a80b883a 	mov	r5,r21
   48028:	00499540 	call	49954 <__udivsi3>
   4802c:	8809883a 	mov	r4,r17
   48030:	a80b883a 	mov	r5,r21
   48034:	1029883a 	mov	r20,r2
   48038:	004995c0 	call	4995c <__umodsi3>
   4803c:	d9400117 	ldw	r5,4(sp)
   48040:	1004943a 	slli	r2,r2,16
   48044:	bd09383a 	mul	r4,r23,r20
   48048:	28ffffcc 	andi	r3,r5,65535
   4804c:	10c6b03a 	or	r3,r2,r3
   48050:	1900062e 	bgeu	r3,r4,4806c <__udivdi3+0x4fc>
   48054:	1c07883a 	add	r3,r3,r16
   48058:	a53fffc4 	addi	r20,r20,-1
   4805c:	1c000336 	bltu	r3,r16,4806c <__udivdi3+0x4fc>
   48060:	1900022e 	bgeu	r3,r4,4806c <__udivdi3+0x4fc>
   48064:	a53fffc4 	addi	r20,r20,-1
   48068:	1c07883a 	add	r3,r3,r16
   4806c:	d9400417 	ldw	r5,16(sp)
   48070:	e5b8983a 	sll	fp,fp,r22
   48074:	1923c83a 	sub	r17,r3,r4
   48078:	2804943a 	slli	r2,r5,16
   4807c:	a0a8b03a 	or	r20,r20,r2
   48080:	dd000315 	stw	r20,12(sp)
   48084:	003ee106 	br	47c0c <__udivdi3+0x9c>
   48088:	2004943a 	slli	r2,r4,16
   4808c:	e5c8983a 	sll	r4,fp,r23
   48090:	48ffffcc 	andi	r3,r9,65535
   48094:	10c5883a 	add	r2,r2,r3
   48098:	20bfc22e 	bgeu	r4,r2,47fa4 <__udivdi3+0x434>
   4809c:	40bfffc4 	addi	r2,r8,-1
   480a0:	0009883a 	mov	r4,zero
   480a4:	003f1306 	br	47cf4 <__udivdi3+0x184>
   480a8:	01400204 	movi	r5,8
   480ac:	2805883a 	mov	r2,r5
   480b0:	003f0306 	br	47cc0 <__udivdi3+0x150>
   480b4:	01400604 	movi	r5,24
   480b8:	2805883a 	mov	r2,r5
   480bc:	003f0006 	br	47cc0 <__udivdi3+0x150>
   480c0:	01400204 	movi	r5,8
   480c4:	2805883a 	mov	r2,r5
   480c8:	003ec206 	br	47bd4 <__udivdi3+0x64>
   480cc:	01400604 	movi	r5,24
   480d0:	2805883a 	mov	r2,r5
   480d4:	003ebf06 	br	47bd4 <__udivdi3+0x64>
   480d8:	01400204 	movi	r5,8
   480dc:	2805883a 	mov	r2,r5
   480e0:	003f1706 	br	47d40 <__udivdi3+0x1d0>
   480e4:	01400604 	movi	r5,24
   480e8:	2805883a 	mov	r2,r5
   480ec:	003f1406 	br	47d40 <__udivdi3+0x1d0>
   480f0:	89ff962e 	bgeu	r17,r7,47f4c <__udivdi3+0x3dc>
   480f4:	8d63883a 	add	r17,r17,r21
   480f8:	843fffc4 	addi	r16,r16,-1
   480fc:	003f9306 	br	47f4c <__udivdi3+0x3dc>
   48100:	147f802e 	bgeu	r2,r17,47f04 <__udivdi3+0x394>
   48104:	a53fffc4 	addi	r20,r20,-1
   48108:	1545883a 	add	r2,r2,r21
   4810c:	003f7d06 	br	47f04 <__udivdi3+0x394>
   48110:	a53fffc4 	addi	r20,r20,-1
   48114:	003ede06 	br	47c90 <__udivdi3+0x120>
   48118:	b5bfffc4 	addi	r22,r22,-1
   4811c:	1405883a 	add	r2,r2,r16
   48120:	003f2806 	br	47dc4 <__udivdi3+0x254>
   48124:	a53fffc4 	addi	r20,r20,-1
   48128:	003f3706 	br	47e08 <__udivdi3+0x298>
   4812c:	147fbb2e 	bgeu	r2,r17,4801c <__udivdi3+0x4ac>
   48130:	297fffc4 	addi	r5,r5,-1
   48134:	1405883a 	add	r2,r2,r16
   48138:	d9400415 	stw	r5,16(sp)
   4813c:	003fb706 	br	4801c <__udivdi3+0x4ac>
   48140:	b5bfffc4 	addi	r22,r22,-1
   48144:	1405883a 	add	r2,r2,r16
   48148:	003ec006 	br	47c4c <__udivdi3+0xdc>

0004814c <__umoddi3>:
   4814c:	defff104 	addi	sp,sp,-60
   48150:	dd800b15 	stw	r22,44(sp)
   48154:	dd000915 	stw	r20,36(sp)
   48158:	dc000515 	stw	r16,20(sp)
   4815c:	dfc00e15 	stw	ra,56(sp)
   48160:	df000d15 	stw	fp,52(sp)
   48164:	ddc00c15 	stw	r23,48(sp)
   48168:	dd400a15 	stw	r21,40(sp)
   4816c:	dcc00815 	stw	r19,32(sp)
   48170:	dc800715 	stw	r18,28(sp)
   48174:	dc400615 	stw	r17,24(sp)
   48178:	3021883a 	mov	r16,r6
   4817c:	202d883a 	mov	r22,r4
   48180:	2829883a 	mov	r20,r5
   48184:	38002b1e 	bne	r7,zero,48234 <__umoddi3+0xe8>
   48188:	29805036 	bltu	r5,r6,482cc <__umoddi3+0x180>
   4818c:	30008a26 	beq	r6,zero,483b8 <__umoddi3+0x26c>
   48190:	00bfffd4 	movui	r2,65535
   48194:	14008236 	bltu	r2,r16,483a0 <__umoddi3+0x254>
   48198:	00803fc4 	movi	r2,255
   4819c:	14013636 	bltu	r2,r16,48678 <__umoddi3+0x52c>
   481a0:	000b883a 	mov	r5,zero
   481a4:	0005883a 	mov	r2,zero
   481a8:	8084d83a 	srl	r2,r16,r2
   481ac:	01100034 	movhi	r4,16384
   481b0:	21009404 	addi	r4,r4,592
   481b4:	01800804 	movi	r6,32
   481b8:	1105883a 	add	r2,r2,r4
   481bc:	10c00003 	ldbu	r3,0(r2)
   481c0:	28c7883a 	add	r3,r5,r3
   481c4:	30efc83a 	sub	r23,r6,r3
   481c8:	b800941e 	bne	r23,zero,4841c <__umoddi3+0x2d0>
   481cc:	802ad43a 	srli	r21,r16,16
   481d0:	a423c83a 	sub	r17,r20,r16
   481d4:	0039883a 	mov	fp,zero
   481d8:	853fffcc 	andi	r20,r16,65535
   481dc:	8809883a 	mov	r4,r17
   481e0:	a80b883a 	mov	r5,r21
   481e4:	00499540 	call	49954 <__udivsi3>
   481e8:	8809883a 	mov	r4,r17
   481ec:	a80b883a 	mov	r5,r21
   481f0:	a0a3383a 	mul	r17,r20,r2
   481f4:	004995c0 	call	4995c <__umodsi3>
   481f8:	1004943a 	slli	r2,r2,16
   481fc:	b006d43a 	srli	r3,r22,16
   48200:	10c4b03a 	or	r2,r2,r3
   48204:	1440032e 	bgeu	r2,r17,48214 <__umoddi3+0xc8>
   48208:	1405883a 	add	r2,r2,r16
   4820c:	14000136 	bltu	r2,r16,48214 <__umoddi3+0xc8>
   48210:	14413536 	bltu	r2,r17,486e8 <__umoddi3+0x59c>
   48214:	1463c83a 	sub	r17,r2,r17
   48218:	8809883a 	mov	r4,r17
   4821c:	a80b883a 	mov	r5,r21
   48220:	00499540 	call	49954 <__udivsi3>
   48224:	8809883a 	mov	r4,r17
   48228:	a0a3383a 	mul	r17,r20,r2
   4822c:	a80b883a 	mov	r5,r21
   48230:	00004d06 	br	48368 <__umoddi3+0x21c>
   48234:	380d883a 	mov	r6,r7
   48238:	29c0102e 	bgeu	r5,r7,4827c <__umoddi3+0x130>
   4823c:	2011883a 	mov	r8,r4
   48240:	2813883a 	mov	r9,r5
   48244:	4005883a 	mov	r2,r8
   48248:	4807883a 	mov	r3,r9
   4824c:	dfc00e17 	ldw	ra,56(sp)
   48250:	df000d17 	ldw	fp,52(sp)
   48254:	ddc00c17 	ldw	r23,48(sp)
   48258:	dd800b17 	ldw	r22,44(sp)
   4825c:	dd400a17 	ldw	r21,40(sp)
   48260:	dd000917 	ldw	r20,36(sp)
   48264:	dcc00817 	ldw	r19,32(sp)
   48268:	dc800717 	ldw	r18,28(sp)
   4826c:	dc400617 	ldw	r17,24(sp)
   48270:	dc000517 	ldw	r16,20(sp)
   48274:	dec00f04 	addi	sp,sp,60
   48278:	f800283a 	ret
   4827c:	00bfffd4 	movui	r2,65535
   48280:	11c05a36 	bltu	r2,r7,483ec <__umoddi3+0x2a0>
   48284:	00803fc4 	movi	r2,255
   48288:	11c0fe36 	bltu	r2,r7,48684 <__umoddi3+0x538>
   4828c:	000b883a 	mov	r5,zero
   48290:	0005883a 	mov	r2,zero
   48294:	3084d83a 	srl	r2,r6,r2
   48298:	01100034 	movhi	r4,16384
   4829c:	21009404 	addi	r4,r4,592
   482a0:	01c00804 	movi	r7,32
   482a4:	1105883a 	add	r2,r2,r4
   482a8:	10c00003 	ldbu	r3,0(r2)
   482ac:	28c7883a 	add	r3,r5,r3
   482b0:	38ebc83a 	sub	r21,r7,r3
   482b4:	a800851e 	bne	r21,zero,484cc <__umoddi3+0x380>
   482b8:	35005236 	bltu	r6,r20,48404 <__umoddi3+0x2b8>
   482bc:	b400512e 	bgeu	r22,r16,48404 <__umoddi3+0x2b8>
   482c0:	b011883a 	mov	r8,r22
   482c4:	a013883a 	mov	r9,r20
   482c8:	003fde06 	br	48244 <__umoddi3+0xf8>
   482cc:	00bfffd4 	movui	r2,65535
   482d0:	11804036 	bltu	r2,r6,483d4 <__umoddi3+0x288>
   482d4:	00803fc4 	movi	r2,255
   482d8:	1180ed36 	bltu	r2,r6,48690 <__umoddi3+0x544>
   482dc:	000b883a 	mov	r5,zero
   482e0:	0005883a 	mov	r2,zero
   482e4:	8084d83a 	srl	r2,r16,r2
   482e8:	01100034 	movhi	r4,16384
   482ec:	21009404 	addi	r4,r4,592
   482f0:	01800804 	movi	r6,32
   482f4:	1105883a 	add	r2,r2,r4
   482f8:	10c00003 	ldbu	r3,0(r2)
   482fc:	28c7883a 	add	r3,r5,r3
   48300:	30c7c83a 	sub	r3,r6,r3
   48304:	1800bf1e 	bne	r3,zero,48604 <__umoddi3+0x4b8>
   48308:	0039883a 	mov	fp,zero
   4830c:	802ad43a 	srli	r21,r16,16
   48310:	a009883a 	mov	r4,r20
   48314:	85ffffcc 	andi	r23,r16,65535
   48318:	a80b883a 	mov	r5,r21
   4831c:	00499540 	call	49954 <__udivsi3>
   48320:	a009883a 	mov	r4,r20
   48324:	a80b883a 	mov	r5,r21
   48328:	b8a3383a 	mul	r17,r23,r2
   4832c:	004995c0 	call	4995c <__umodsi3>
   48330:	1004943a 	slli	r2,r2,16
   48334:	b006d43a 	srli	r3,r22,16
   48338:	10c4b03a 	or	r2,r2,r3
   4833c:	1440032e 	bgeu	r2,r17,4834c <__umoddi3+0x200>
   48340:	1405883a 	add	r2,r2,r16
   48344:	14000136 	bltu	r2,r16,4834c <__umoddi3+0x200>
   48348:	1440e536 	bltu	r2,r17,486e0 <__umoddi3+0x594>
   4834c:	1463c83a 	sub	r17,r2,r17
   48350:	8809883a 	mov	r4,r17
   48354:	a80b883a 	mov	r5,r21
   48358:	00499540 	call	49954 <__udivsi3>
   4835c:	8809883a 	mov	r4,r17
   48360:	b8a3383a 	mul	r17,r23,r2
   48364:	a80b883a 	mov	r5,r21
   48368:	004995c0 	call	4995c <__umodsi3>
   4836c:	1004943a 	slli	r2,r2,16
   48370:	b0ffffcc 	andi	r3,r22,65535
   48374:	10c4b03a 	or	r2,r2,r3
   48378:	1440042e 	bgeu	r2,r17,4838c <__umoddi3+0x240>
   4837c:	1405883a 	add	r2,r2,r16
   48380:	14000236 	bltu	r2,r16,4838c <__umoddi3+0x240>
   48384:	1440012e 	bgeu	r2,r17,4838c <__umoddi3+0x240>
   48388:	1405883a 	add	r2,r2,r16
   4838c:	1445c83a 	sub	r2,r2,r17
   48390:	1724d83a 	srl	r18,r2,fp
   48394:	0013883a 	mov	r9,zero
   48398:	9011883a 	mov	r8,r18
   4839c:	003fa906 	br	48244 <__umoddi3+0xf8>
   483a0:	00804034 	movhi	r2,256
   483a4:	10bfffc4 	addi	r2,r2,-1
   483a8:	1400b036 	bltu	r2,r16,4866c <__umoddi3+0x520>
   483ac:	01400404 	movi	r5,16
   483b0:	2805883a 	mov	r2,r5
   483b4:	003f7c06 	br	481a8 <__umoddi3+0x5c>
   483b8:	01000044 	movi	r4,1
   483bc:	000b883a 	mov	r5,zero
   483c0:	00499540 	call	49954 <__udivsi3>
   483c4:	1021883a 	mov	r16,r2
   483c8:	00bfffd4 	movui	r2,65535
   483cc:	143ff436 	bltu	r2,r16,483a0 <__umoddi3+0x254>
   483d0:	003f7106 	br	48198 <__umoddi3+0x4c>
   483d4:	00804034 	movhi	r2,256
   483d8:	10bfffc4 	addi	r2,r2,-1
   483dc:	1180af36 	bltu	r2,r6,4869c <__umoddi3+0x550>
   483e0:	01400404 	movi	r5,16
   483e4:	2805883a 	mov	r2,r5
   483e8:	003fbe06 	br	482e4 <__umoddi3+0x198>
   483ec:	00804034 	movhi	r2,256
   483f0:	10bfffc4 	addi	r2,r2,-1
   483f4:	11c0ac36 	bltu	r2,r7,486a8 <__umoddi3+0x55c>
   483f8:	01400404 	movi	r5,16
   483fc:	2805883a 	mov	r2,r5
   48400:	003fa406 	br	48294 <__umoddi3+0x148>
   48404:	b409c83a 	sub	r4,r22,r16
   48408:	b105803a 	cmpltu	r2,r22,r4
   4840c:	a187c83a 	sub	r3,r20,r6
   48410:	18a9c83a 	sub	r20,r3,r2
   48414:	202d883a 	mov	r22,r4
   48418:	003fa906 	br	482c0 <__umoddi3+0x174>
   4841c:	85e0983a 	sll	r16,r16,r23
   48420:	35c5c83a 	sub	r2,r6,r23
   48424:	a0a2d83a 	srl	r17,r20,r2
   48428:	802ad43a 	srli	r21,r16,16
   4842c:	b084d83a 	srl	r2,r22,r2
   48430:	a5c6983a 	sll	r3,r20,r23
   48434:	8809883a 	mov	r4,r17
   48438:	a80b883a 	mov	r5,r21
   4843c:	1886b03a 	or	r3,r3,r2
   48440:	d8c00115 	stw	r3,4(sp)
   48444:	853fffcc 	andi	r20,r16,65535
   48448:	00499540 	call	49954 <__udivsi3>
   4844c:	8809883a 	mov	r4,r17
   48450:	a80b883a 	mov	r5,r21
   48454:	a0a3383a 	mul	r17,r20,r2
   48458:	004995c0 	call	4995c <__umodsi3>
   4845c:	d9000117 	ldw	r4,4(sp)
   48460:	1004943a 	slli	r2,r2,16
   48464:	b839883a 	mov	fp,r23
   48468:	2006d43a 	srli	r3,r4,16
   4846c:	10c4b03a 	or	r2,r2,r3
   48470:	1440022e 	bgeu	r2,r17,4847c <__umoddi3+0x330>
   48474:	1405883a 	add	r2,r2,r16
   48478:	1400962e 	bgeu	r2,r16,486d4 <__umoddi3+0x588>
   4847c:	1463c83a 	sub	r17,r2,r17
   48480:	8809883a 	mov	r4,r17
   48484:	a80b883a 	mov	r5,r21
   48488:	00499540 	call	49954 <__udivsi3>
   4848c:	8809883a 	mov	r4,r17
   48490:	a80b883a 	mov	r5,r21
   48494:	a0a3383a 	mul	r17,r20,r2
   48498:	004995c0 	call	4995c <__umodsi3>
   4849c:	d9400117 	ldw	r5,4(sp)
   484a0:	1004943a 	slli	r2,r2,16
   484a4:	28ffffcc 	andi	r3,r5,65535
   484a8:	10c4b03a 	or	r2,r2,r3
   484ac:	1440042e 	bgeu	r2,r17,484c0 <__umoddi3+0x374>
   484b0:	1405883a 	add	r2,r2,r16
   484b4:	14000236 	bltu	r2,r16,484c0 <__umoddi3+0x374>
   484b8:	1440012e 	bgeu	r2,r17,484c0 <__umoddi3+0x374>
   484bc:	1405883a 	add	r2,r2,r16
   484c0:	b5ec983a 	sll	r22,r22,r23
   484c4:	1463c83a 	sub	r17,r2,r17
   484c8:	003f4406 	br	481dc <__umoddi3+0x90>
   484cc:	3d4fc83a 	sub	r7,r7,r21
   484d0:	3546983a 	sll	r3,r6,r21
   484d4:	81c4d83a 	srl	r2,r16,r7
   484d8:	a1e2d83a 	srl	r17,r20,r7
   484dc:	a54c983a 	sll	r6,r20,r21
   484e0:	18aeb03a 	or	r23,r3,r2
   484e4:	b828d43a 	srli	r20,r23,16
   484e8:	b1c4d83a 	srl	r2,r22,r7
   484ec:	8809883a 	mov	r4,r17
   484f0:	a00b883a 	mov	r5,r20
   484f4:	308cb03a 	or	r6,r6,r2
   484f8:	d9c00315 	stw	r7,12(sp)
   484fc:	d9800215 	stw	r6,8(sp)
   48500:	00499540 	call	49954 <__udivsi3>
   48504:	8809883a 	mov	r4,r17
   48508:	a00b883a 	mov	r5,r20
   4850c:	1039883a 	mov	fp,r2
   48510:	004995c0 	call	4995c <__umodsi3>
   48514:	b8ffffcc 	andi	r3,r23,65535
   48518:	d8c00415 	stw	r3,16(sp)
   4851c:	d9000217 	ldw	r4,8(sp)
   48520:	d9400417 	ldw	r5,16(sp)
   48524:	1004943a 	slli	r2,r2,16
   48528:	2006d43a 	srli	r3,r4,16
   4852c:	8560983a 	sll	r16,r16,r21
   48530:	2f23383a 	mul	r17,r5,fp
   48534:	10c4b03a 	or	r2,r2,r3
   48538:	dc000015 	stw	r16,0(sp)
   4853c:	b56c983a 	sll	r22,r22,r21
   48540:	1440032e 	bgeu	r2,r17,48550 <__umoddi3+0x404>
   48544:	15c5883a 	add	r2,r2,r23
   48548:	e73fffc4 	addi	fp,fp,-1
   4854c:	15c05d2e 	bgeu	r2,r23,486c4 <__umoddi3+0x578>
   48550:	1463c83a 	sub	r17,r2,r17
   48554:	8809883a 	mov	r4,r17
   48558:	a00b883a 	mov	r5,r20
   4855c:	00499540 	call	49954 <__udivsi3>
   48560:	8809883a 	mov	r4,r17
   48564:	a00b883a 	mov	r5,r20
   48568:	1021883a 	mov	r16,r2
   4856c:	004995c0 	call	4995c <__umodsi3>
   48570:	d8c00417 	ldw	r3,16(sp)
   48574:	d9000217 	ldw	r4,8(sp)
   48578:	1004943a 	slli	r2,r2,16
   4857c:	1c23383a 	mul	r17,r3,r16
   48580:	20ffffcc 	andi	r3,r4,65535
   48584:	10ceb03a 	or	r7,r2,r3
   48588:	3c40032e 	bgeu	r7,r17,48598 <__umoddi3+0x44c>
   4858c:	3dcf883a 	add	r7,r7,r23
   48590:	843fffc4 	addi	r16,r16,-1
   48594:	3dc0472e 	bgeu	r7,r23,486b4 <__umoddi3+0x568>
   48598:	e004943a 	slli	r2,fp,16
   4859c:	d9400017 	ldw	r5,0(sp)
   485a0:	3c4fc83a 	sub	r7,r7,r17
   485a4:	8084b03a 	or	r2,r16,r2
   485a8:	28ffffcc 	andi	r3,r5,65535
   485ac:	280cd43a 	srli	r6,r5,16
   485b0:	100ad43a 	srli	r5,r2,16
   485b4:	10bfffcc 	andi	r2,r2,65535
   485b8:	10d1383a 	mul	r8,r2,r3
   485bc:	28c7383a 	mul	r3,r5,r3
   485c0:	1185383a 	mul	r2,r2,r6
   485c4:	4008d43a 	srli	r4,r8,16
   485c8:	298b383a 	mul	r5,r5,r6
   485cc:	10c5883a 	add	r2,r2,r3
   485d0:	2089883a 	add	r4,r4,r2
   485d4:	20c0022e 	bgeu	r4,r3,485e0 <__umoddi3+0x494>
   485d8:	00800074 	movhi	r2,1
   485dc:	288b883a 	add	r5,r5,r2
   485e0:	2004d43a 	srli	r2,r4,16
   485e4:	2008943a 	slli	r4,r4,16
   485e8:	40ffffcc 	andi	r3,r8,65535
   485ec:	288b883a 	add	r5,r5,r2
   485f0:	20c9883a 	add	r4,r4,r3
   485f4:	39400b36 	bltu	r7,r5,48624 <__umoddi3+0x4d8>
   485f8:	39403d26 	beq	r7,r5,486f0 <__umoddi3+0x5a4>
   485fc:	394bc83a 	sub	r5,r7,r5
   48600:	00000f06 	br	48640 <__umoddi3+0x4f4>
   48604:	30c5c83a 	sub	r2,r6,r3
   48608:	1839883a 	mov	fp,r3
   4860c:	b084d83a 	srl	r2,r22,r2
   48610:	a0c6983a 	sll	r3,r20,r3
   48614:	8720983a 	sll	r16,r16,fp
   48618:	b72c983a 	sll	r22,r22,fp
   4861c:	18a8b03a 	or	r20,r3,r2
   48620:	003f3a06 	br	4830c <__umoddi3+0x1c0>
   48624:	d8c00017 	ldw	r3,0(sp)
   48628:	20c5c83a 	sub	r2,r4,r3
   4862c:	2089803a 	cmpltu	r4,r4,r2
   48630:	2dc7c83a 	sub	r3,r5,r23
   48634:	1907c83a 	sub	r3,r3,r4
   48638:	38cbc83a 	sub	r5,r7,r3
   4863c:	1009883a 	mov	r4,r2
   48640:	b105c83a 	sub	r2,r22,r4
   48644:	b087803a 	cmpltu	r3,r22,r2
   48648:	28c7c83a 	sub	r3,r5,r3
   4864c:	d9400317 	ldw	r5,12(sp)
   48650:	1544d83a 	srl	r2,r2,r21
   48654:	1948983a 	sll	r4,r3,r5
   48658:	1d46d83a 	srl	r3,r3,r21
   4865c:	20a4b03a 	or	r18,r4,r2
   48660:	9011883a 	mov	r8,r18
   48664:	1813883a 	mov	r9,r3
   48668:	003ef606 	br	48244 <__umoddi3+0xf8>
   4866c:	01400604 	movi	r5,24
   48670:	2805883a 	mov	r2,r5
   48674:	003ecc06 	br	481a8 <__umoddi3+0x5c>
   48678:	01400204 	movi	r5,8
   4867c:	2805883a 	mov	r2,r5
   48680:	003ec906 	br	481a8 <__umoddi3+0x5c>
   48684:	01400204 	movi	r5,8
   48688:	2805883a 	mov	r2,r5
   4868c:	003f0106 	br	48294 <__umoddi3+0x148>
   48690:	01400204 	movi	r5,8
   48694:	2805883a 	mov	r2,r5
   48698:	003f1206 	br	482e4 <__umoddi3+0x198>
   4869c:	01400604 	movi	r5,24
   486a0:	2805883a 	mov	r2,r5
   486a4:	003f0f06 	br	482e4 <__umoddi3+0x198>
   486a8:	01400604 	movi	r5,24
   486ac:	2805883a 	mov	r2,r5
   486b0:	003ef806 	br	48294 <__umoddi3+0x148>
   486b4:	3c7fb82e 	bgeu	r7,r17,48598 <__umoddi3+0x44c>
   486b8:	843fffc4 	addi	r16,r16,-1
   486bc:	3dcf883a 	add	r7,r7,r23
   486c0:	003fb506 	br	48598 <__umoddi3+0x44c>
   486c4:	147fa22e 	bgeu	r2,r17,48550 <__umoddi3+0x404>
   486c8:	e73fffc4 	addi	fp,fp,-1
   486cc:	15c5883a 	add	r2,r2,r23
   486d0:	003f9f06 	br	48550 <__umoddi3+0x404>
   486d4:	147f692e 	bgeu	r2,r17,4847c <__umoddi3+0x330>
   486d8:	1405883a 	add	r2,r2,r16
   486dc:	003f6706 	br	4847c <__umoddi3+0x330>
   486e0:	1405883a 	add	r2,r2,r16
   486e4:	003f1906 	br	4834c <__umoddi3+0x200>
   486e8:	1405883a 	add	r2,r2,r16
   486ec:	003ec906 	br	48214 <__umoddi3+0xc8>
   486f0:	b13fcc36 	bltu	r22,r4,48624 <__umoddi3+0x4d8>
   486f4:	000b883a 	mov	r5,zero
   486f8:	003fd106 	br	48640 <__umoddi3+0x4f4>

000486fc <_fpadd_parts>:
   486fc:	defff804 	addi	sp,sp,-32
   48700:	dcc00315 	stw	r19,12(sp)
   48704:	2027883a 	mov	r19,r4
   48708:	21000017 	ldw	r4,0(r4)
   4870c:	00c00044 	movi	r3,1
   48710:	dd400515 	stw	r21,20(sp)
   48714:	dd000415 	stw	r20,16(sp)
   48718:	ddc00715 	stw	r23,28(sp)
   4871c:	dd800615 	stw	r22,24(sp)
   48720:	dc800215 	stw	r18,8(sp)
   48724:	dc400115 	stw	r17,4(sp)
   48728:	dc000015 	stw	r16,0(sp)
   4872c:	282b883a 	mov	r21,r5
   48730:	3029883a 	mov	r20,r6
   48734:	1900632e 	bgeu	r3,r4,488c4 <_fpadd_parts+0x1c8>
   48738:	28800017 	ldw	r2,0(r5)
   4873c:	1880812e 	bgeu	r3,r2,48944 <_fpadd_parts+0x248>
   48740:	00c00104 	movi	r3,4
   48744:	20c0dc26 	beq	r4,r3,48ab8 <_fpadd_parts+0x3bc>
   48748:	10c07e26 	beq	r2,r3,48944 <_fpadd_parts+0x248>
   4874c:	00c00084 	movi	r3,2
   48750:	10c06726 	beq	r2,r3,488f0 <_fpadd_parts+0x1f4>
   48754:	20c07b26 	beq	r4,r3,48944 <_fpadd_parts+0x248>
   48758:	9dc00217 	ldw	r23,8(r19)
   4875c:	28c00217 	ldw	r3,8(r5)
   48760:	9c400317 	ldw	r17,12(r19)
   48764:	2bc00317 	ldw	r15,12(r5)
   48768:	b8cdc83a 	sub	r6,r23,r3
   4876c:	9c800417 	ldw	r18,16(r19)
   48770:	2c000417 	ldw	r16,16(r5)
   48774:	3009883a 	mov	r4,r6
   48778:	30009716 	blt	r6,zero,489d8 <_fpadd_parts+0x2dc>
   4877c:	00800fc4 	movi	r2,63
   48780:	11806b16 	blt	r2,r6,48930 <_fpadd_parts+0x234>
   48784:	0100a40e 	bge	zero,r4,48a18 <_fpadd_parts+0x31c>
   48788:	35bff804 	addi	r22,r6,-32
   4878c:	b000bc16 	blt	r22,zero,48a80 <_fpadd_parts+0x384>
   48790:	8596d83a 	srl	r11,r16,r22
   48794:	0019883a 	mov	r12,zero
   48798:	0013883a 	mov	r9,zero
   4879c:	01000044 	movi	r4,1
   487a0:	0015883a 	mov	r10,zero
   487a4:	b000be16 	blt	r22,zero,48aa0 <_fpadd_parts+0x3a4>
   487a8:	2590983a 	sll	r8,r4,r22
   487ac:	000f883a 	mov	r7,zero
   487b0:	00bfffc4 	movi	r2,-1
   487b4:	3889883a 	add	r4,r7,r2
   487b8:	408b883a 	add	r5,r8,r2
   487bc:	21cd803a 	cmpltu	r6,r4,r7
   487c0:	314b883a 	add	r5,r6,r5
   487c4:	7904703a 	and	r2,r15,r4
   487c8:	8146703a 	and	r3,r16,r5
   487cc:	10c4b03a 	or	r2,r2,r3
   487d0:	10000226 	beq	r2,zero,487dc <_fpadd_parts+0xe0>
   487d4:	02400044 	movi	r9,1
   487d8:	0015883a 	mov	r10,zero
   487dc:	5a5eb03a 	or	r15,r11,r9
   487e0:	62a0b03a 	or	r16,r12,r10
   487e4:	99400117 	ldw	r5,4(r19)
   487e8:	a8800117 	ldw	r2,4(r21)
   487ec:	28806e26 	beq	r5,r2,489a8 <_fpadd_parts+0x2ac>
   487f0:	28006626 	beq	r5,zero,4898c <_fpadd_parts+0x290>
   487f4:	7c45c83a 	sub	r2,r15,r17
   487f8:	7889803a 	cmpltu	r4,r15,r2
   487fc:	8487c83a 	sub	r3,r16,r18
   48800:	1909c83a 	sub	r4,r3,r4
   48804:	100d883a 	mov	r6,r2
   48808:	200f883a 	mov	r7,r4
   4880c:	38007716 	blt	r7,zero,489ec <_fpadd_parts+0x2f0>
   48810:	a5c00215 	stw	r23,8(r20)
   48814:	a1c00415 	stw	r7,16(r20)
   48818:	a0000115 	stw	zero,4(r20)
   4881c:	a1800315 	stw	r6,12(r20)
   48820:	a2000317 	ldw	r8,12(r20)
   48824:	a2400417 	ldw	r9,16(r20)
   48828:	00bfffc4 	movi	r2,-1
   4882c:	408b883a 	add	r5,r8,r2
   48830:	2a09803a 	cmpltu	r4,r5,r8
   48834:	488d883a 	add	r6,r9,r2
   48838:	01c40034 	movhi	r7,4096
   4883c:	39ffffc4 	addi	r7,r7,-1
   48840:	218d883a 	add	r6,r4,r6
   48844:	39801736 	bltu	r7,r6,488a4 <_fpadd_parts+0x1a8>
   48848:	31c06526 	beq	r6,r7,489e0 <_fpadd_parts+0x2e4>
   4884c:	a3000217 	ldw	r12,8(r20)
   48850:	4209883a 	add	r4,r8,r8
   48854:	00bfffc4 	movi	r2,-1
   48858:	220f803a 	cmpltu	r7,r4,r8
   4885c:	4a4b883a 	add	r5,r9,r9
   48860:	394f883a 	add	r7,r7,r5
   48864:	2095883a 	add	r10,r4,r2
   48868:	3897883a 	add	r11,r7,r2
   4886c:	510d803a 	cmpltu	r6,r10,r4
   48870:	6099883a 	add	r12,r12,r2
   48874:	32d7883a 	add	r11,r6,r11
   48878:	00840034 	movhi	r2,4096
   4887c:	10bfffc4 	addi	r2,r2,-1
   48880:	2011883a 	mov	r8,r4
   48884:	3813883a 	mov	r9,r7
   48888:	a1000315 	stw	r4,12(r20)
   4888c:	a1c00415 	stw	r7,16(r20)
   48890:	a3000215 	stw	r12,8(r20)
   48894:	12c00336 	bltu	r2,r11,488a4 <_fpadd_parts+0x1a8>
   48898:	58bfed1e 	bne	r11,r2,48850 <_fpadd_parts+0x154>
   4889c:	00bfff84 	movi	r2,-2
   488a0:	12bfeb2e 	bgeu	r2,r10,48850 <_fpadd_parts+0x154>
   488a4:	a2800417 	ldw	r10,16(r20)
   488a8:	008000c4 	movi	r2,3
   488ac:	00c80034 	movhi	r3,8192
   488b0:	18ffffc4 	addi	r3,r3,-1
   488b4:	a2400317 	ldw	r9,12(r20)
   488b8:	a0800015 	stw	r2,0(r20)
   488bc:	1a802336 	bltu	r3,r10,4894c <_fpadd_parts+0x250>
   488c0:	a027883a 	mov	r19,r20
   488c4:	9805883a 	mov	r2,r19
   488c8:	ddc00717 	ldw	r23,28(sp)
   488cc:	dd800617 	ldw	r22,24(sp)
   488d0:	dd400517 	ldw	r21,20(sp)
   488d4:	dd000417 	ldw	r20,16(sp)
   488d8:	dcc00317 	ldw	r19,12(sp)
   488dc:	dc800217 	ldw	r18,8(sp)
   488e0:	dc400117 	ldw	r17,4(sp)
   488e4:	dc000017 	ldw	r16,0(sp)
   488e8:	dec00804 	addi	sp,sp,32
   488ec:	f800283a 	ret
   488f0:	20fff41e 	bne	r4,r3,488c4 <_fpadd_parts+0x1c8>
   488f4:	31000015 	stw	r4,0(r6)
   488f8:	98800117 	ldw	r2,4(r19)
   488fc:	30800115 	stw	r2,4(r6)
   48900:	98c00217 	ldw	r3,8(r19)
   48904:	30c00215 	stw	r3,8(r6)
   48908:	98800317 	ldw	r2,12(r19)
   4890c:	30800315 	stw	r2,12(r6)
   48910:	98c00417 	ldw	r3,16(r19)
   48914:	30c00415 	stw	r3,16(r6)
   48918:	98800117 	ldw	r2,4(r19)
   4891c:	28c00117 	ldw	r3,4(r5)
   48920:	3027883a 	mov	r19,r6
   48924:	10c4703a 	and	r2,r2,r3
   48928:	30800115 	stw	r2,4(r6)
   4892c:	003fe506 	br	488c4 <_fpadd_parts+0x1c8>
   48930:	1dc02616 	blt	r3,r23,489cc <_fpadd_parts+0x2d0>
   48934:	0023883a 	mov	r17,zero
   48938:	182f883a 	mov	r23,r3
   4893c:	0025883a 	mov	r18,zero
   48940:	003fa806 	br	487e4 <_fpadd_parts+0xe8>
   48944:	a827883a 	mov	r19,r21
   48948:	003fde06 	br	488c4 <_fpadd_parts+0x1c8>
   4894c:	01800044 	movi	r6,1
   48950:	500497fa 	slli	r2,r10,31
   48954:	4808d07a 	srli	r4,r9,1
   48958:	518ad83a 	srl	r5,r10,r6
   4895c:	a2000217 	ldw	r8,8(r20)
   48960:	1108b03a 	or	r4,r2,r4
   48964:	0007883a 	mov	r3,zero
   48968:	4984703a 	and	r2,r9,r6
   4896c:	208cb03a 	or	r6,r4,r2
   48970:	28ceb03a 	or	r7,r5,r3
   48974:	42000044 	addi	r8,r8,1
   48978:	a027883a 	mov	r19,r20
   4897c:	a1c00415 	stw	r7,16(r20)
   48980:	a2000215 	stw	r8,8(r20)
   48984:	a1800315 	stw	r6,12(r20)
   48988:	003fce06 	br	488c4 <_fpadd_parts+0x1c8>
   4898c:	8bc5c83a 	sub	r2,r17,r15
   48990:	8889803a 	cmpltu	r4,r17,r2
   48994:	9407c83a 	sub	r3,r18,r16
   48998:	1909c83a 	sub	r4,r3,r4
   4899c:	100d883a 	mov	r6,r2
   489a0:	200f883a 	mov	r7,r4
   489a4:	003f9906 	br	4880c <_fpadd_parts+0x110>
   489a8:	7c45883a 	add	r2,r15,r17
   489ac:	13c9803a 	cmpltu	r4,r2,r15
   489b0:	8487883a 	add	r3,r16,r18
   489b4:	20c9883a 	add	r4,r4,r3
   489b8:	a1400115 	stw	r5,4(r20)
   489bc:	a5c00215 	stw	r23,8(r20)
   489c0:	a0800315 	stw	r2,12(r20)
   489c4:	a1000415 	stw	r4,16(r20)
   489c8:	003fb606 	br	488a4 <_fpadd_parts+0x1a8>
   489cc:	001f883a 	mov	r15,zero
   489d0:	0021883a 	mov	r16,zero
   489d4:	003f8306 	br	487e4 <_fpadd_parts+0xe8>
   489d8:	018dc83a 	sub	r6,zero,r6
   489dc:	003f6706 	br	4877c <_fpadd_parts+0x80>
   489e0:	00bfff84 	movi	r2,-2
   489e4:	117faf36 	bltu	r2,r5,488a4 <_fpadd_parts+0x1a8>
   489e8:	003f9806 	br	4884c <_fpadd_parts+0x150>
   489ec:	0005883a 	mov	r2,zero
   489f0:	1189c83a 	sub	r4,r2,r6
   489f4:	1105803a 	cmpltu	r2,r2,r4
   489f8:	01cbc83a 	sub	r5,zero,r7
   489fc:	2885c83a 	sub	r2,r5,r2
   48a00:	01800044 	movi	r6,1
   48a04:	a1800115 	stw	r6,4(r20)
   48a08:	a5c00215 	stw	r23,8(r20)
   48a0c:	a1000315 	stw	r4,12(r20)
   48a10:	a0800415 	stw	r2,16(r20)
   48a14:	003f8206 	br	48820 <_fpadd_parts+0x124>
   48a18:	203f7226 	beq	r4,zero,487e4 <_fpadd_parts+0xe8>
   48a1c:	35bff804 	addi	r22,r6,-32
   48a20:	b9af883a 	add	r23,r23,r6
   48a24:	b0003116 	blt	r22,zero,48aec <_fpadd_parts+0x3f0>
   48a28:	959ad83a 	srl	r13,r18,r22
   48a2c:	001d883a 	mov	r14,zero
   48a30:	000f883a 	mov	r7,zero
   48a34:	01000044 	movi	r4,1
   48a38:	0011883a 	mov	r8,zero
   48a3c:	b0002516 	blt	r22,zero,48ad4 <_fpadd_parts+0x3d8>
   48a40:	2594983a 	sll	r10,r4,r22
   48a44:	0013883a 	mov	r9,zero
   48a48:	00bfffc4 	movi	r2,-1
   48a4c:	4889883a 	add	r4,r9,r2
   48a50:	508b883a 	add	r5,r10,r2
   48a54:	224d803a 	cmpltu	r6,r4,r9
   48a58:	314b883a 	add	r5,r6,r5
   48a5c:	8904703a 	and	r2,r17,r4
   48a60:	9146703a 	and	r3,r18,r5
   48a64:	10c4b03a 	or	r2,r2,r3
   48a68:	10000226 	beq	r2,zero,48a74 <_fpadd_parts+0x378>
   48a6c:	01c00044 	movi	r7,1
   48a70:	0011883a 	mov	r8,zero
   48a74:	69e2b03a 	or	r17,r13,r7
   48a78:	7224b03a 	or	r18,r14,r8
   48a7c:	003f5906 	br	487e4 <_fpadd_parts+0xe8>
   48a80:	8407883a 	add	r3,r16,r16
   48a84:	008007c4 	movi	r2,31
   48a88:	1185c83a 	sub	r2,r2,r6
   48a8c:	1886983a 	sll	r3,r3,r2
   48a90:	7996d83a 	srl	r11,r15,r6
   48a94:	8198d83a 	srl	r12,r16,r6
   48a98:	1ad6b03a 	or	r11,r3,r11
   48a9c:	003f3e06 	br	48798 <_fpadd_parts+0x9c>
   48aa0:	2006d07a 	srli	r3,r4,1
   48aa4:	008007c4 	movi	r2,31
   48aa8:	1185c83a 	sub	r2,r2,r6
   48aac:	1890d83a 	srl	r8,r3,r2
   48ab0:	218e983a 	sll	r7,r4,r6
   48ab4:	003f3e06 	br	487b0 <_fpadd_parts+0xb4>
   48ab8:	113f821e 	bne	r2,r4,488c4 <_fpadd_parts+0x1c8>
   48abc:	28c00117 	ldw	r3,4(r5)
   48ac0:	98800117 	ldw	r2,4(r19)
   48ac4:	10ff7f26 	beq	r2,r3,488c4 <_fpadd_parts+0x1c8>
   48ac8:	04d00034 	movhi	r19,16384
   48acc:	9cc08f04 	addi	r19,r19,572
   48ad0:	003f7c06 	br	488c4 <_fpadd_parts+0x1c8>
   48ad4:	2006d07a 	srli	r3,r4,1
   48ad8:	008007c4 	movi	r2,31
   48adc:	1185c83a 	sub	r2,r2,r6
   48ae0:	1894d83a 	srl	r10,r3,r2
   48ae4:	2192983a 	sll	r9,r4,r6
   48ae8:	003fd706 	br	48a48 <_fpadd_parts+0x34c>
   48aec:	9487883a 	add	r3,r18,r18
   48af0:	008007c4 	movi	r2,31
   48af4:	1185c83a 	sub	r2,r2,r6
   48af8:	1886983a 	sll	r3,r3,r2
   48afc:	899ad83a 	srl	r13,r17,r6
   48b00:	919cd83a 	srl	r14,r18,r6
   48b04:	1b5ab03a 	or	r13,r3,r13
   48b08:	003fc906 	br	48a30 <_fpadd_parts+0x334>

00048b0c <__subdf3>:
   48b0c:	deffea04 	addi	sp,sp,-88
   48b10:	dcc01415 	stw	r19,80(sp)
   48b14:	dcc00404 	addi	r19,sp,16
   48b18:	2011883a 	mov	r8,r4
   48b1c:	2813883a 	mov	r9,r5
   48b20:	dc401315 	stw	r17,76(sp)
   48b24:	d809883a 	mov	r4,sp
   48b28:	980b883a 	mov	r5,r19
   48b2c:	dc400904 	addi	r17,sp,36
   48b30:	dfc01515 	stw	ra,84(sp)
   48b34:	da400115 	stw	r9,4(sp)
   48b38:	d9c00315 	stw	r7,12(sp)
   48b3c:	da000015 	stw	r8,0(sp)
   48b40:	d9800215 	stw	r6,8(sp)
   48b44:	0049cf80 	call	49cf8 <__unpack_d>
   48b48:	d9000204 	addi	r4,sp,8
   48b4c:	880b883a 	mov	r5,r17
   48b50:	0049cf80 	call	49cf8 <__unpack_d>
   48b54:	d8800a17 	ldw	r2,40(sp)
   48b58:	880b883a 	mov	r5,r17
   48b5c:	9809883a 	mov	r4,r19
   48b60:	d9800e04 	addi	r6,sp,56
   48b64:	1080005c 	xori	r2,r2,1
   48b68:	d8800a15 	stw	r2,40(sp)
   48b6c:	00486fc0 	call	486fc <_fpadd_parts>
   48b70:	1009883a 	mov	r4,r2
   48b74:	00499e40 	call	499e4 <__pack_d>
   48b78:	dfc01517 	ldw	ra,84(sp)
   48b7c:	dcc01417 	ldw	r19,80(sp)
   48b80:	dc401317 	ldw	r17,76(sp)
   48b84:	dec01604 	addi	sp,sp,88
   48b88:	f800283a 	ret

00048b8c <__adddf3>:
   48b8c:	deffea04 	addi	sp,sp,-88
   48b90:	dcc01415 	stw	r19,80(sp)
   48b94:	dcc00404 	addi	r19,sp,16
   48b98:	2011883a 	mov	r8,r4
   48b9c:	2813883a 	mov	r9,r5
   48ba0:	dc401315 	stw	r17,76(sp)
   48ba4:	d809883a 	mov	r4,sp
   48ba8:	980b883a 	mov	r5,r19
   48bac:	dc400904 	addi	r17,sp,36
   48bb0:	dfc01515 	stw	ra,84(sp)
   48bb4:	da400115 	stw	r9,4(sp)
   48bb8:	d9c00315 	stw	r7,12(sp)
   48bbc:	da000015 	stw	r8,0(sp)
   48bc0:	d9800215 	stw	r6,8(sp)
   48bc4:	0049cf80 	call	49cf8 <__unpack_d>
   48bc8:	d9000204 	addi	r4,sp,8
   48bcc:	880b883a 	mov	r5,r17
   48bd0:	0049cf80 	call	49cf8 <__unpack_d>
   48bd4:	d9800e04 	addi	r6,sp,56
   48bd8:	9809883a 	mov	r4,r19
   48bdc:	880b883a 	mov	r5,r17
   48be0:	00486fc0 	call	486fc <_fpadd_parts>
   48be4:	1009883a 	mov	r4,r2
   48be8:	00499e40 	call	499e4 <__pack_d>
   48bec:	dfc01517 	ldw	ra,84(sp)
   48bf0:	dcc01417 	ldw	r19,80(sp)
   48bf4:	dc401317 	ldw	r17,76(sp)
   48bf8:	dec01604 	addi	sp,sp,88
   48bfc:	f800283a 	ret

00048c00 <__muldf3>:
   48c00:	deffdd04 	addi	sp,sp,-140
   48c04:	df002115 	stw	fp,132(sp)
   48c08:	df000404 	addi	fp,sp,16
   48c0c:	2011883a 	mov	r8,r4
   48c10:	2813883a 	mov	r9,r5
   48c14:	d809883a 	mov	r4,sp
   48c18:	e00b883a 	mov	r5,fp
   48c1c:	dfc02215 	stw	ra,136(sp)
   48c20:	da400115 	stw	r9,4(sp)
   48c24:	d9c00315 	stw	r7,12(sp)
   48c28:	da000015 	stw	r8,0(sp)
   48c2c:	d9800215 	stw	r6,8(sp)
   48c30:	ddc02015 	stw	r23,128(sp)
   48c34:	dd801f15 	stw	r22,124(sp)
   48c38:	dd401e15 	stw	r21,120(sp)
   48c3c:	dd001d15 	stw	r20,116(sp)
   48c40:	dcc01c15 	stw	r19,112(sp)
   48c44:	dc801b15 	stw	r18,108(sp)
   48c48:	dc401a15 	stw	r17,104(sp)
   48c4c:	dc001915 	stw	r16,100(sp)
   48c50:	0049cf80 	call	49cf8 <__unpack_d>
   48c54:	d9000204 	addi	r4,sp,8
   48c58:	d9400904 	addi	r5,sp,36
   48c5c:	0049cf80 	call	49cf8 <__unpack_d>
   48c60:	d9000417 	ldw	r4,16(sp)
   48c64:	00800044 	movi	r2,1
   48c68:	1100102e 	bgeu	r2,r4,48cac <__muldf3+0xac>
   48c6c:	d8c00917 	ldw	r3,36(sp)
   48c70:	10c0062e 	bgeu	r2,r3,48c8c <__muldf3+0x8c>
   48c74:	00800104 	movi	r2,4
   48c78:	20800a26 	beq	r4,r2,48ca4 <__muldf3+0xa4>
   48c7c:	1880c826 	beq	r3,r2,48fa0 <__muldf3+0x3a0>
   48c80:	00800084 	movi	r2,2
   48c84:	20800926 	beq	r4,r2,48cac <__muldf3+0xac>
   48c88:	18801a1e 	bne	r3,r2,48cf4 <__muldf3+0xf4>
   48c8c:	d8c00a17 	ldw	r3,40(sp)
   48c90:	d8800517 	ldw	r2,20(sp)
   48c94:	d9000904 	addi	r4,sp,36
   48c98:	10c4c03a 	cmpne	r2,r2,r3
   48c9c:	d8800a15 	stw	r2,40(sp)
   48ca0:	00000706 	br	48cc0 <__muldf3+0xc0>
   48ca4:	00800084 	movi	r2,2
   48ca8:	1880bf26 	beq	r3,r2,48fa8 <__muldf3+0x3a8>
   48cac:	d8800517 	ldw	r2,20(sp)
   48cb0:	d8c00a17 	ldw	r3,40(sp)
   48cb4:	e009883a 	mov	r4,fp
   48cb8:	10c4c03a 	cmpne	r2,r2,r3
   48cbc:	d8800515 	stw	r2,20(sp)
   48cc0:	00499e40 	call	499e4 <__pack_d>
   48cc4:	dfc02217 	ldw	ra,136(sp)
   48cc8:	df002117 	ldw	fp,132(sp)
   48ccc:	ddc02017 	ldw	r23,128(sp)
   48cd0:	dd801f17 	ldw	r22,124(sp)
   48cd4:	dd401e17 	ldw	r21,120(sp)
   48cd8:	dd001d17 	ldw	r20,116(sp)
   48cdc:	dcc01c17 	ldw	r19,112(sp)
   48ce0:	dc801b17 	ldw	r18,108(sp)
   48ce4:	dc401a17 	ldw	r17,104(sp)
   48ce8:	dc001917 	ldw	r16,100(sp)
   48cec:	dec02304 	addi	sp,sp,140
   48cf0:	f800283a 	ret
   48cf4:	db000c17 	ldw	r12,48(sp)
   48cf8:	db800717 	ldw	r14,28(sp)
   48cfc:	dbc00817 	ldw	r15,32(sp)
   48d00:	db400d17 	ldw	r13,52(sp)
   48d04:	6009883a 	mov	r4,r12
   48d08:	000d883a 	mov	r6,zero
   48d0c:	0011883a 	mov	r8,zero
   48d10:	000b883a 	mov	r5,zero
   48d14:	0007883a 	mov	r3,zero
   48d18:	0019883a 	mov	r12,zero
   48d1c:	4393383a 	mul	r9,r8,r14
   48d20:	d9801415 	stw	r6,80(sp)
   48d24:	6111383a 	mul	r8,r12,r4
   48d28:	d9801615 	stw	r6,88(sp)
   48d2c:	1b4f383a 	mul	r7,r3,r13
   48d30:	2bcd383a 	mul	r6,r5,r15
   48d34:	7361383a 	mul	r16,r14,r13
   48d38:	23e5383a 	mul	r18,r4,r15
   48d3c:	7362383a 	mulxuu	r17,r14,r13
   48d40:	23e6383a 	mulxuu	r19,r4,r15
   48d44:	3a4f883a 	add	r7,r7,r9
   48d48:	320d883a 	add	r6,r6,r8
   48d4c:	3c63883a 	add	r17,r7,r17
   48d50:	34e7883a 	add	r19,r6,r19
   48d54:	8495883a 	add	r10,r16,r18
   48d58:	23aa383a 	mulxuu	r21,r4,r14
   48d5c:	540f803a 	cmpltu	r7,r10,r16
   48d60:	8cd7883a 	add	r11,r17,r19
   48d64:	3acf883a 	add	r7,r7,r11
   48d68:	4a0d883a 	add	r6,r9,r8
   48d6c:	db401315 	stw	r13,76(sp)
   48d70:	dbc01515 	stw	r15,84(sp)
   48d74:	23a9383a 	mul	r20,r4,r14
   48d78:	da801715 	stw	r10,92(sp)
   48d7c:	d9c01815 	stw	r7,96(sp)
   48d80:	356b883a 	add	r21,r6,r21
   48d84:	3c40682e 	bgeu	r7,r17,48f28 <__muldf3+0x328>
   48d88:	000f883a 	mov	r7,zero
   48d8c:	02000044 	movi	r8,1
   48d90:	d9401717 	ldw	r5,92(sp)
   48d94:	0009883a 	mov	r4,zero
   48d98:	a105883a 	add	r2,r20,r4
   48d9c:	150d803a 	cmpltu	r6,r2,r20
   48da0:	a947883a 	add	r3,r21,r5
   48da4:	30cd883a 	add	r6,r6,r3
   48da8:	101f883a 	mov	r15,r2
   48dac:	3021883a 	mov	r16,r6
   48db0:	35406236 	bltu	r6,r21,48f3c <__muldf3+0x33c>
   48db4:	a9806026 	beq	r21,r6,48f38 <__muldf3+0x338>
   48db8:	d9801317 	ldw	r6,76(sp)
   48dbc:	db001517 	ldw	r12,84(sp)
   48dc0:	d8c01417 	ldw	r3,80(sp)
   48dc4:	d9401617 	ldw	r5,88(sp)
   48dc8:	6009883a 	mov	r4,r12
   48dcc:	1b05383a 	mul	r2,r3,r12
   48dd0:	2987383a 	mul	r3,r5,r6
   48dd4:	332d383a 	mul	r22,r6,r12
   48dd8:	312e383a 	mulxuu	r23,r6,r4
   48ddc:	d9801817 	ldw	r6,96(sp)
   48de0:	10c5883a 	add	r2,r2,r3
   48de4:	15ef883a 	add	r23,r2,r23
   48de8:	000b883a 	mov	r5,zero
   48dec:	b185883a 	add	r2,r22,r6
   48df0:	158d803a 	cmpltu	r6,r2,r22
   48df4:	b947883a 	add	r3,r23,r5
   48df8:	30c7883a 	add	r3,r6,r3
   48dfc:	40cb883a 	add	r5,r8,r3
   48e00:	d8c00617 	ldw	r3,24(sp)
   48e04:	3889883a 	add	r4,r7,r2
   48e08:	d8800b17 	ldw	r2,44(sp)
   48e0c:	18c00104 	addi	r3,r3,4
   48e10:	21cd803a 	cmpltu	r6,r4,r7
   48e14:	10c7883a 	add	r3,r2,r3
   48e18:	2013883a 	mov	r9,r4
   48e1c:	d8800a17 	ldw	r2,40(sp)
   48e20:	d9000517 	ldw	r4,20(sp)
   48e24:	314d883a 	add	r6,r6,r5
   48e28:	3015883a 	mov	r10,r6
   48e2c:	2088c03a 	cmpne	r4,r4,r2
   48e30:	00880034 	movhi	r2,8192
   48e34:	10bfffc4 	addi	r2,r2,-1
   48e38:	d9000f15 	stw	r4,60(sp)
   48e3c:	d8c01015 	stw	r3,64(sp)
   48e40:	1180162e 	bgeu	r2,r6,48e9c <__muldf3+0x29c>
   48e44:	1811883a 	mov	r8,r3
   48e48:	1023883a 	mov	r17,r2
   48e4c:	800497fa 	slli	r2,r16,31
   48e50:	7816d07a 	srli	r11,r15,1
   48e54:	500697fa 	slli	r3,r10,31
   48e58:	480cd07a 	srli	r6,r9,1
   48e5c:	500ed07a 	srli	r7,r10,1
   48e60:	12d6b03a 	or	r11,r2,r11
   48e64:	00800044 	movi	r2,1
   48e68:	198cb03a 	or	r6,r3,r6
   48e6c:	4888703a 	and	r4,r9,r2
   48e70:	8018d07a 	srli	r12,r16,1
   48e74:	001b883a 	mov	r13,zero
   48e78:	03a00034 	movhi	r14,32768
   48e7c:	3013883a 	mov	r9,r6
   48e80:	3815883a 	mov	r10,r7
   48e84:	4091883a 	add	r8,r8,r2
   48e88:	20000226 	beq	r4,zero,48e94 <__muldf3+0x294>
   48e8c:	5b5eb03a 	or	r15,r11,r13
   48e90:	63a0b03a 	or	r16,r12,r14
   48e94:	8abfed36 	bltu	r17,r10,48e4c <__muldf3+0x24c>
   48e98:	da001015 	stw	r8,64(sp)
   48e9c:	00840034 	movhi	r2,4096
   48ea0:	10bfffc4 	addi	r2,r2,-1
   48ea4:	12801436 	bltu	r2,r10,48ef8 <__muldf3+0x2f8>
   48ea8:	da001017 	ldw	r8,64(sp)
   48eac:	1023883a 	mov	r17,r2
   48eb0:	4a45883a 	add	r2,r9,r9
   48eb4:	124d803a 	cmpltu	r6,r2,r9
   48eb8:	5287883a 	add	r3,r10,r10
   48ebc:	7bd7883a 	add	r11,r15,r15
   48ec0:	5bcf803a 	cmpltu	r7,r11,r15
   48ec4:	8419883a 	add	r12,r16,r16
   48ec8:	01000044 	movi	r4,1
   48ecc:	30cd883a 	add	r6,r6,r3
   48ed0:	3b0f883a 	add	r7,r7,r12
   48ed4:	423fffc4 	addi	r8,r8,-1
   48ed8:	1013883a 	mov	r9,r2
   48edc:	3015883a 	mov	r10,r6
   48ee0:	111ab03a 	or	r13,r2,r4
   48ee4:	80002a16 	blt	r16,zero,48f90 <__muldf3+0x390>
   48ee8:	581f883a 	mov	r15,r11
   48eec:	3821883a 	mov	r16,r7
   48ef0:	8abfef2e 	bgeu	r17,r10,48eb0 <__muldf3+0x2b0>
   48ef4:	da001015 	stw	r8,64(sp)
   48ef8:	00803fc4 	movi	r2,255
   48efc:	488e703a 	and	r7,r9,r2
   48f00:	00802004 	movi	r2,128
   48f04:	0007883a 	mov	r3,zero
   48f08:	0011883a 	mov	r8,zero
   48f0c:	38801226 	beq	r7,r2,48f58 <__muldf3+0x358>
   48f10:	008000c4 	movi	r2,3
   48f14:	d9000e04 	addi	r4,sp,56
   48f18:	da801215 	stw	r10,72(sp)
   48f1c:	d8800e15 	stw	r2,56(sp)
   48f20:	da401115 	stw	r9,68(sp)
   48f24:	003f6606 	br	48cc0 <__muldf3+0xc0>
   48f28:	89c01b26 	beq	r17,r7,48f98 <__muldf3+0x398>
   48f2c:	000f883a 	mov	r7,zero
   48f30:	0011883a 	mov	r8,zero
   48f34:	003f9606 	br	48d90 <__muldf3+0x190>
   48f38:	153f9f2e 	bgeu	r2,r20,48db8 <__muldf3+0x1b8>
   48f3c:	00800044 	movi	r2,1
   48f40:	3889883a 	add	r4,r7,r2
   48f44:	21cd803a 	cmpltu	r6,r4,r7
   48f48:	320d883a 	add	r6,r6,r8
   48f4c:	200f883a 	mov	r7,r4
   48f50:	3011883a 	mov	r8,r6
   48f54:	003f9806 	br	48db8 <__muldf3+0x1b8>
   48f58:	403fed1e 	bne	r8,zero,48f10 <__muldf3+0x310>
   48f5c:	01004004 	movi	r4,256
   48f60:	4904703a 	and	r2,r9,r4
   48f64:	10c4b03a 	or	r2,r2,r3
   48f68:	103fe91e 	bne	r2,zero,48f10 <__muldf3+0x310>
   48f6c:	7c04b03a 	or	r2,r15,r16
   48f70:	103fe726 	beq	r2,zero,48f10 <__muldf3+0x310>
   48f74:	49c5883a 	add	r2,r9,r7
   48f78:	1251803a 	cmpltu	r8,r2,r9
   48f7c:	4291883a 	add	r8,r8,r10
   48f80:	013fc004 	movi	r4,-256
   48f84:	1112703a 	and	r9,r2,r4
   48f88:	4015883a 	mov	r10,r8
   48f8c:	003fe006 	br	48f10 <__muldf3+0x310>
   48f90:	6813883a 	mov	r9,r13
   48f94:	003fd406 	br	48ee8 <__muldf3+0x2e8>
   48f98:	543f7b36 	bltu	r10,r16,48d88 <__muldf3+0x188>
   48f9c:	003fe306 	br	48f2c <__muldf3+0x32c>
   48fa0:	00800084 	movi	r2,2
   48fa4:	20bf391e 	bne	r4,r2,48c8c <__muldf3+0x8c>
   48fa8:	01100034 	movhi	r4,16384
   48fac:	21008f04 	addi	r4,r4,572
   48fb0:	003f4306 	br	48cc0 <__muldf3+0xc0>

00048fb4 <__divdf3>:
   48fb4:	deffed04 	addi	sp,sp,-76
   48fb8:	dcc01115 	stw	r19,68(sp)
   48fbc:	dcc00404 	addi	r19,sp,16
   48fc0:	2011883a 	mov	r8,r4
   48fc4:	2813883a 	mov	r9,r5
   48fc8:	dc000e15 	stw	r16,56(sp)
   48fcc:	d809883a 	mov	r4,sp
   48fd0:	980b883a 	mov	r5,r19
   48fd4:	dc000904 	addi	r16,sp,36
   48fd8:	dfc01215 	stw	ra,72(sp)
   48fdc:	da400115 	stw	r9,4(sp)
   48fe0:	d9c00315 	stw	r7,12(sp)
   48fe4:	da000015 	stw	r8,0(sp)
   48fe8:	d9800215 	stw	r6,8(sp)
   48fec:	dc801015 	stw	r18,64(sp)
   48ff0:	dc400f15 	stw	r17,60(sp)
   48ff4:	0049cf80 	call	49cf8 <__unpack_d>
   48ff8:	d9000204 	addi	r4,sp,8
   48ffc:	800b883a 	mov	r5,r16
   49000:	0049cf80 	call	49cf8 <__unpack_d>
   49004:	d9000417 	ldw	r4,16(sp)
   49008:	00800044 	movi	r2,1
   4900c:	11000b2e 	bgeu	r2,r4,4903c <__divdf3+0x88>
   49010:	d9400917 	ldw	r5,36(sp)
   49014:	1140762e 	bgeu	r2,r5,491f0 <__divdf3+0x23c>
   49018:	d8800517 	ldw	r2,20(sp)
   4901c:	d8c00a17 	ldw	r3,40(sp)
   49020:	01800104 	movi	r6,4
   49024:	10c4f03a 	xor	r2,r2,r3
   49028:	d8800515 	stw	r2,20(sp)
   4902c:	21800226 	beq	r4,r6,49038 <__divdf3+0x84>
   49030:	00800084 	movi	r2,2
   49034:	2080141e 	bne	r4,r2,49088 <__divdf3+0xd4>
   49038:	29000926 	beq	r5,r4,49060 <__divdf3+0xac>
   4903c:	9809883a 	mov	r4,r19
   49040:	00499e40 	call	499e4 <__pack_d>
   49044:	dfc01217 	ldw	ra,72(sp)
   49048:	dcc01117 	ldw	r19,68(sp)
   4904c:	dc801017 	ldw	r18,64(sp)
   49050:	dc400f17 	ldw	r17,60(sp)
   49054:	dc000e17 	ldw	r16,56(sp)
   49058:	dec01304 	addi	sp,sp,76
   4905c:	f800283a 	ret
   49060:	01100034 	movhi	r4,16384
   49064:	21008f04 	addi	r4,r4,572
   49068:	00499e40 	call	499e4 <__pack_d>
   4906c:	dfc01217 	ldw	ra,72(sp)
   49070:	dcc01117 	ldw	r19,68(sp)
   49074:	dc801017 	ldw	r18,64(sp)
   49078:	dc400f17 	ldw	r17,60(sp)
   4907c:	dc000e17 	ldw	r16,56(sp)
   49080:	dec01304 	addi	sp,sp,76
   49084:	f800283a 	ret
   49088:	29805b26 	beq	r5,r6,491f8 <__divdf3+0x244>
   4908c:	28802d26 	beq	r5,r2,49144 <__divdf3+0x190>
   49090:	d8c00617 	ldw	r3,24(sp)
   49094:	d8800b17 	ldw	r2,44(sp)
   49098:	d9c00817 	ldw	r7,32(sp)
   4909c:	dc400d17 	ldw	r17,52(sp)
   490a0:	188bc83a 	sub	r5,r3,r2
   490a4:	d9800717 	ldw	r6,28(sp)
   490a8:	dc000c17 	ldw	r16,48(sp)
   490ac:	d9400615 	stw	r5,24(sp)
   490b0:	3c403836 	bltu	r7,r17,49194 <__divdf3+0x1e0>
   490b4:	89c03626 	beq	r17,r7,49190 <__divdf3+0x1dc>
   490b8:	0015883a 	mov	r10,zero
   490bc:	001d883a 	mov	r14,zero
   490c0:	02c40034 	movhi	r11,4096
   490c4:	001f883a 	mov	r15,zero
   490c8:	003f883a 	mov	ra,zero
   490cc:	04800f44 	movi	r18,61
   490d0:	00000f06 	br	49110 <__divdf3+0x15c>
   490d4:	601d883a 	mov	r14,r12
   490d8:	681f883a 	mov	r15,r13
   490dc:	400d883a 	mov	r6,r8
   490e0:	100f883a 	mov	r7,r2
   490e4:	3191883a 	add	r8,r6,r6
   490e8:	5808d07a 	srli	r4,r11,1
   490ec:	4185803a 	cmpltu	r2,r8,r6
   490f0:	39d3883a 	add	r9,r7,r7
   490f4:	28c6b03a 	or	r3,r5,r3
   490f8:	1245883a 	add	r2,r2,r9
   490fc:	1815883a 	mov	r10,r3
   49100:	2017883a 	mov	r11,r4
   49104:	400d883a 	mov	r6,r8
   49108:	100f883a 	mov	r7,r2
   4910c:	fc801726 	beq	ra,r18,4916c <__divdf3+0x1b8>
   49110:	580a97fa 	slli	r5,r11,31
   49114:	5006d07a 	srli	r3,r10,1
   49118:	ffc00044 	addi	ra,ra,1
   4911c:	3c7ff136 	bltu	r7,r17,490e4 <__divdf3+0x130>
   49120:	3411c83a 	sub	r8,r6,r16
   49124:	3205803a 	cmpltu	r2,r6,r8
   49128:	3c53c83a 	sub	r9,r7,r17
   4912c:	7298b03a 	or	r12,r14,r10
   49130:	7adab03a 	or	r13,r15,r11
   49134:	4885c83a 	sub	r2,r9,r2
   49138:	89ffe61e 	bne	r17,r7,490d4 <__divdf3+0x120>
   4913c:	343fe936 	bltu	r6,r16,490e4 <__divdf3+0x130>
   49140:	003fe406 	br	490d4 <__divdf3+0x120>
   49144:	9809883a 	mov	r4,r19
   49148:	d9800415 	stw	r6,16(sp)
   4914c:	00499e40 	call	499e4 <__pack_d>
   49150:	dfc01217 	ldw	ra,72(sp)
   49154:	dcc01117 	ldw	r19,68(sp)
   49158:	dc801017 	ldw	r18,64(sp)
   4915c:	dc400f17 	ldw	r17,60(sp)
   49160:	dc000e17 	ldw	r16,56(sp)
   49164:	dec01304 	addi	sp,sp,76
   49168:	f800283a 	ret
   4916c:	00803fc4 	movi	r2,255
   49170:	7090703a 	and	r8,r14,r2
   49174:	00802004 	movi	r2,128
   49178:	0007883a 	mov	r3,zero
   4917c:	0013883a 	mov	r9,zero
   49180:	40800d26 	beq	r8,r2,491b8 <__divdf3+0x204>
   49184:	dbc00815 	stw	r15,32(sp)
   49188:	db800715 	stw	r14,28(sp)
   4918c:	003fab06 	br	4903c <__divdf3+0x88>
   49190:	343fc92e 	bgeu	r6,r16,490b8 <__divdf3+0x104>
   49194:	3185883a 	add	r2,r6,r6
   49198:	1189803a 	cmpltu	r4,r2,r6
   4919c:	39c7883a 	add	r3,r7,r7
   491a0:	20c9883a 	add	r4,r4,r3
   491a4:	297fffc4 	addi	r5,r5,-1
   491a8:	100d883a 	mov	r6,r2
   491ac:	200f883a 	mov	r7,r4
   491b0:	d9400615 	stw	r5,24(sp)
   491b4:	003fc006 	br	490b8 <__divdf3+0x104>
   491b8:	483ff21e 	bne	r9,zero,49184 <__divdf3+0x1d0>
   491bc:	01004004 	movi	r4,256
   491c0:	7104703a 	and	r2,r14,r4
   491c4:	10c4b03a 	or	r2,r2,r3
   491c8:	103fee1e 	bne	r2,zero,49184 <__divdf3+0x1d0>
   491cc:	31c4b03a 	or	r2,r6,r7
   491d0:	103fec26 	beq	r2,zero,49184 <__divdf3+0x1d0>
   491d4:	7205883a 	add	r2,r14,r8
   491d8:	1391803a 	cmpltu	r8,r2,r14
   491dc:	43d1883a 	add	r8,r8,r15
   491e0:	013fc004 	movi	r4,-256
   491e4:	111c703a 	and	r14,r2,r4
   491e8:	401f883a 	mov	r15,r8
   491ec:	003fe506 	br	49184 <__divdf3+0x1d0>
   491f0:	8009883a 	mov	r4,r16
   491f4:	003f9206 	br	49040 <__divdf3+0x8c>
   491f8:	9809883a 	mov	r4,r19
   491fc:	d8000715 	stw	zero,28(sp)
   49200:	d8000815 	stw	zero,32(sp)
   49204:	d8000615 	stw	zero,24(sp)
   49208:	003f8d06 	br	49040 <__divdf3+0x8c>

0004920c <__eqdf2>:
   4920c:	deffef04 	addi	sp,sp,-68
   49210:	dc400f15 	stw	r17,60(sp)
   49214:	dc400404 	addi	r17,sp,16
   49218:	2005883a 	mov	r2,r4
   4921c:	2807883a 	mov	r3,r5
   49220:	dc000e15 	stw	r16,56(sp)
   49224:	d809883a 	mov	r4,sp
   49228:	880b883a 	mov	r5,r17
   4922c:	dc000904 	addi	r16,sp,36
   49230:	d8c00115 	stw	r3,4(sp)
   49234:	d8800015 	stw	r2,0(sp)
   49238:	d9800215 	stw	r6,8(sp)
   4923c:	dfc01015 	stw	ra,64(sp)
   49240:	d9c00315 	stw	r7,12(sp)
   49244:	0049cf80 	call	49cf8 <__unpack_d>
   49248:	d9000204 	addi	r4,sp,8
   4924c:	800b883a 	mov	r5,r16
   49250:	0049cf80 	call	49cf8 <__unpack_d>
   49254:	d8800417 	ldw	r2,16(sp)
   49258:	00c00044 	movi	r3,1
   4925c:	180d883a 	mov	r6,r3
   49260:	1880062e 	bgeu	r3,r2,4927c <__eqdf2+0x70>
   49264:	d8800917 	ldw	r2,36(sp)
   49268:	8809883a 	mov	r4,r17
   4926c:	800b883a 	mov	r5,r16
   49270:	1880022e 	bgeu	r3,r2,4927c <__eqdf2+0x70>
   49274:	0049e300 	call	49e30 <__fpcmp_parts_d>
   49278:	100d883a 	mov	r6,r2
   4927c:	3005883a 	mov	r2,r6
   49280:	dfc01017 	ldw	ra,64(sp)
   49284:	dc400f17 	ldw	r17,60(sp)
   49288:	dc000e17 	ldw	r16,56(sp)
   4928c:	dec01104 	addi	sp,sp,68
   49290:	f800283a 	ret

00049294 <__nedf2>:
   49294:	deffef04 	addi	sp,sp,-68
   49298:	dc400f15 	stw	r17,60(sp)
   4929c:	dc400404 	addi	r17,sp,16
   492a0:	2005883a 	mov	r2,r4
   492a4:	2807883a 	mov	r3,r5
   492a8:	dc000e15 	stw	r16,56(sp)
   492ac:	d809883a 	mov	r4,sp
   492b0:	880b883a 	mov	r5,r17
   492b4:	dc000904 	addi	r16,sp,36
   492b8:	d8c00115 	stw	r3,4(sp)
   492bc:	d8800015 	stw	r2,0(sp)
   492c0:	d9800215 	stw	r6,8(sp)
   492c4:	dfc01015 	stw	ra,64(sp)
   492c8:	d9c00315 	stw	r7,12(sp)
   492cc:	0049cf80 	call	49cf8 <__unpack_d>
   492d0:	d9000204 	addi	r4,sp,8
   492d4:	800b883a 	mov	r5,r16
   492d8:	0049cf80 	call	49cf8 <__unpack_d>
   492dc:	d8800417 	ldw	r2,16(sp)
   492e0:	00c00044 	movi	r3,1
   492e4:	180d883a 	mov	r6,r3
   492e8:	1880062e 	bgeu	r3,r2,49304 <__nedf2+0x70>
   492ec:	d8800917 	ldw	r2,36(sp)
   492f0:	8809883a 	mov	r4,r17
   492f4:	800b883a 	mov	r5,r16
   492f8:	1880022e 	bgeu	r3,r2,49304 <__nedf2+0x70>
   492fc:	0049e300 	call	49e30 <__fpcmp_parts_d>
   49300:	100d883a 	mov	r6,r2
   49304:	3005883a 	mov	r2,r6
   49308:	dfc01017 	ldw	ra,64(sp)
   4930c:	dc400f17 	ldw	r17,60(sp)
   49310:	dc000e17 	ldw	r16,56(sp)
   49314:	dec01104 	addi	sp,sp,68
   49318:	f800283a 	ret

0004931c <__gtdf2>:
   4931c:	deffef04 	addi	sp,sp,-68
   49320:	dc400f15 	stw	r17,60(sp)
   49324:	dc400404 	addi	r17,sp,16
   49328:	2005883a 	mov	r2,r4
   4932c:	2807883a 	mov	r3,r5
   49330:	dc000e15 	stw	r16,56(sp)
   49334:	d809883a 	mov	r4,sp
   49338:	880b883a 	mov	r5,r17
   4933c:	dc000904 	addi	r16,sp,36
   49340:	d8c00115 	stw	r3,4(sp)
   49344:	d8800015 	stw	r2,0(sp)
   49348:	d9800215 	stw	r6,8(sp)
   4934c:	dfc01015 	stw	ra,64(sp)
   49350:	d9c00315 	stw	r7,12(sp)
   49354:	0049cf80 	call	49cf8 <__unpack_d>
   49358:	d9000204 	addi	r4,sp,8
   4935c:	800b883a 	mov	r5,r16
   49360:	0049cf80 	call	49cf8 <__unpack_d>
   49364:	d8800417 	ldw	r2,16(sp)
   49368:	00c00044 	movi	r3,1
   4936c:	01bfffc4 	movi	r6,-1
   49370:	1880062e 	bgeu	r3,r2,4938c <__gtdf2+0x70>
   49374:	d8800917 	ldw	r2,36(sp)
   49378:	8809883a 	mov	r4,r17
   4937c:	800b883a 	mov	r5,r16
   49380:	1880022e 	bgeu	r3,r2,4938c <__gtdf2+0x70>
   49384:	0049e300 	call	49e30 <__fpcmp_parts_d>
   49388:	100d883a 	mov	r6,r2
   4938c:	3005883a 	mov	r2,r6
   49390:	dfc01017 	ldw	ra,64(sp)
   49394:	dc400f17 	ldw	r17,60(sp)
   49398:	dc000e17 	ldw	r16,56(sp)
   4939c:	dec01104 	addi	sp,sp,68
   493a0:	f800283a 	ret

000493a4 <__gedf2>:
   493a4:	deffef04 	addi	sp,sp,-68
   493a8:	dc400f15 	stw	r17,60(sp)
   493ac:	dc400404 	addi	r17,sp,16
   493b0:	2005883a 	mov	r2,r4
   493b4:	2807883a 	mov	r3,r5
   493b8:	dc000e15 	stw	r16,56(sp)
   493bc:	d809883a 	mov	r4,sp
   493c0:	880b883a 	mov	r5,r17
   493c4:	dc000904 	addi	r16,sp,36
   493c8:	d8c00115 	stw	r3,4(sp)
   493cc:	d8800015 	stw	r2,0(sp)
   493d0:	d9800215 	stw	r6,8(sp)
   493d4:	dfc01015 	stw	ra,64(sp)
   493d8:	d9c00315 	stw	r7,12(sp)
   493dc:	0049cf80 	call	49cf8 <__unpack_d>
   493e0:	d9000204 	addi	r4,sp,8
   493e4:	800b883a 	mov	r5,r16
   493e8:	0049cf80 	call	49cf8 <__unpack_d>
   493ec:	d8800417 	ldw	r2,16(sp)
   493f0:	00c00044 	movi	r3,1
   493f4:	01bfffc4 	movi	r6,-1
   493f8:	1880062e 	bgeu	r3,r2,49414 <__gedf2+0x70>
   493fc:	d8800917 	ldw	r2,36(sp)
   49400:	8809883a 	mov	r4,r17
   49404:	800b883a 	mov	r5,r16
   49408:	1880022e 	bgeu	r3,r2,49414 <__gedf2+0x70>
   4940c:	0049e300 	call	49e30 <__fpcmp_parts_d>
   49410:	100d883a 	mov	r6,r2
   49414:	3005883a 	mov	r2,r6
   49418:	dfc01017 	ldw	ra,64(sp)
   4941c:	dc400f17 	ldw	r17,60(sp)
   49420:	dc000e17 	ldw	r16,56(sp)
   49424:	dec01104 	addi	sp,sp,68
   49428:	f800283a 	ret

0004942c <__ltdf2>:
   4942c:	deffef04 	addi	sp,sp,-68
   49430:	dc400f15 	stw	r17,60(sp)
   49434:	dc400404 	addi	r17,sp,16
   49438:	2005883a 	mov	r2,r4
   4943c:	2807883a 	mov	r3,r5
   49440:	dc000e15 	stw	r16,56(sp)
   49444:	d809883a 	mov	r4,sp
   49448:	880b883a 	mov	r5,r17
   4944c:	dc000904 	addi	r16,sp,36
   49450:	d8c00115 	stw	r3,4(sp)
   49454:	d8800015 	stw	r2,0(sp)
   49458:	d9800215 	stw	r6,8(sp)
   4945c:	dfc01015 	stw	ra,64(sp)
   49460:	d9c00315 	stw	r7,12(sp)
   49464:	0049cf80 	call	49cf8 <__unpack_d>
   49468:	d9000204 	addi	r4,sp,8
   4946c:	800b883a 	mov	r5,r16
   49470:	0049cf80 	call	49cf8 <__unpack_d>
   49474:	d8800417 	ldw	r2,16(sp)
   49478:	00c00044 	movi	r3,1
   4947c:	180d883a 	mov	r6,r3
   49480:	1880062e 	bgeu	r3,r2,4949c <__ltdf2+0x70>
   49484:	d8800917 	ldw	r2,36(sp)
   49488:	8809883a 	mov	r4,r17
   4948c:	800b883a 	mov	r5,r16
   49490:	1880022e 	bgeu	r3,r2,4949c <__ltdf2+0x70>
   49494:	0049e300 	call	49e30 <__fpcmp_parts_d>
   49498:	100d883a 	mov	r6,r2
   4949c:	3005883a 	mov	r2,r6
   494a0:	dfc01017 	ldw	ra,64(sp)
   494a4:	dc400f17 	ldw	r17,60(sp)
   494a8:	dc000e17 	ldw	r16,56(sp)
   494ac:	dec01104 	addi	sp,sp,68
   494b0:	f800283a 	ret

000494b4 <__floatsidf>:
   494b4:	2006d7fa 	srli	r3,r4,31
   494b8:	defff604 	addi	sp,sp,-40
   494bc:	008000c4 	movi	r2,3
   494c0:	dfc00915 	stw	ra,36(sp)
   494c4:	dcc00815 	stw	r19,32(sp)
   494c8:	dc800715 	stw	r18,28(sp)
   494cc:	dc400615 	stw	r17,24(sp)
   494d0:	dc000515 	stw	r16,20(sp)
   494d4:	d8800015 	stw	r2,0(sp)
   494d8:	d8c00115 	stw	r3,4(sp)
   494dc:	20000f1e 	bne	r4,zero,4951c <__floatsidf+0x68>
   494e0:	00800084 	movi	r2,2
   494e4:	d8800015 	stw	r2,0(sp)
   494e8:	d809883a 	mov	r4,sp
   494ec:	00499e40 	call	499e4 <__pack_d>
   494f0:	1009883a 	mov	r4,r2
   494f4:	180b883a 	mov	r5,r3
   494f8:	2005883a 	mov	r2,r4
   494fc:	2807883a 	mov	r3,r5
   49500:	dfc00917 	ldw	ra,36(sp)
   49504:	dcc00817 	ldw	r19,32(sp)
   49508:	dc800717 	ldw	r18,28(sp)
   4950c:	dc400617 	ldw	r17,24(sp)
   49510:	dc000517 	ldw	r16,20(sp)
   49514:	dec00a04 	addi	sp,sp,40
   49518:	f800283a 	ret
   4951c:	00800f04 	movi	r2,60
   49520:	1807003a 	cmpeq	r3,r3,zero
   49524:	d8800215 	stw	r2,8(sp)
   49528:	18001126 	beq	r3,zero,49570 <__floatsidf+0xbc>
   4952c:	0027883a 	mov	r19,zero
   49530:	2025883a 	mov	r18,r4
   49534:	d9000315 	stw	r4,12(sp)
   49538:	dcc00415 	stw	r19,16(sp)
   4953c:	00499640 	call	49964 <__clzsi2>
   49540:	11000744 	addi	r4,r2,29
   49544:	013fe80e 	bge	zero,r4,494e8 <__floatsidf+0x34>
   49548:	10bfff44 	addi	r2,r2,-3
   4954c:	10000c16 	blt	r2,zero,49580 <__floatsidf+0xcc>
   49550:	90a2983a 	sll	r17,r18,r2
   49554:	0021883a 	mov	r16,zero
   49558:	d8800217 	ldw	r2,8(sp)
   4955c:	dc400415 	stw	r17,16(sp)
   49560:	dc000315 	stw	r16,12(sp)
   49564:	1105c83a 	sub	r2,r2,r4
   49568:	d8800215 	stw	r2,8(sp)
   4956c:	003fde06 	br	494e8 <__floatsidf+0x34>
   49570:	00a00034 	movhi	r2,32768
   49574:	20800a26 	beq	r4,r2,495a0 <__floatsidf+0xec>
   49578:	0109c83a 	sub	r4,zero,r4
   4957c:	003feb06 	br	4952c <__floatsidf+0x78>
   49580:	9006d07a 	srli	r3,r18,1
   49584:	008007c4 	movi	r2,31
   49588:	1105c83a 	sub	r2,r2,r4
   4958c:	1886d83a 	srl	r3,r3,r2
   49590:	9922983a 	sll	r17,r19,r4
   49594:	9120983a 	sll	r16,r18,r4
   49598:	1c62b03a 	or	r17,r3,r17
   4959c:	003fee06 	br	49558 <__floatsidf+0xa4>
   495a0:	0009883a 	mov	r4,zero
   495a4:	01707834 	movhi	r5,49632
   495a8:	003fd306 	br	494f8 <__floatsidf+0x44>

000495ac <__fixdfsi>:
   495ac:	defff804 	addi	sp,sp,-32
   495b0:	2005883a 	mov	r2,r4
   495b4:	2807883a 	mov	r3,r5
   495b8:	d809883a 	mov	r4,sp
   495bc:	d9400204 	addi	r5,sp,8
   495c0:	d8c00115 	stw	r3,4(sp)
   495c4:	d8800015 	stw	r2,0(sp)
   495c8:	dfc00715 	stw	ra,28(sp)
   495cc:	0049cf80 	call	49cf8 <__unpack_d>
   495d0:	d8c00217 	ldw	r3,8(sp)
   495d4:	00800084 	movi	r2,2
   495d8:	1880051e 	bne	r3,r2,495f0 <__fixdfsi+0x44>
   495dc:	0007883a 	mov	r3,zero
   495e0:	1805883a 	mov	r2,r3
   495e4:	dfc00717 	ldw	ra,28(sp)
   495e8:	dec00804 	addi	sp,sp,32
   495ec:	f800283a 	ret
   495f0:	00800044 	movi	r2,1
   495f4:	10fff92e 	bgeu	r2,r3,495dc <__fixdfsi+0x30>
   495f8:	00800104 	movi	r2,4
   495fc:	18800426 	beq	r3,r2,49610 <__fixdfsi+0x64>
   49600:	d8c00417 	ldw	r3,16(sp)
   49604:	183ff516 	blt	r3,zero,495dc <__fixdfsi+0x30>
   49608:	00800784 	movi	r2,30
   4960c:	10c0080e 	bge	r2,r3,49630 <__fixdfsi+0x84>
   49610:	d8800317 	ldw	r2,12(sp)
   49614:	1000121e 	bne	r2,zero,49660 <__fixdfsi+0xb4>
   49618:	00e00034 	movhi	r3,32768
   4961c:	18ffffc4 	addi	r3,r3,-1
   49620:	1805883a 	mov	r2,r3
   49624:	dfc00717 	ldw	ra,28(sp)
   49628:	dec00804 	addi	sp,sp,32
   4962c:	f800283a 	ret
   49630:	00800f04 	movi	r2,60
   49634:	10d1c83a 	sub	r8,r2,r3
   49638:	40bff804 	addi	r2,r8,-32
   4963c:	d9800517 	ldw	r6,20(sp)
   49640:	d9c00617 	ldw	r7,24(sp)
   49644:	10000816 	blt	r2,zero,49668 <__fixdfsi+0xbc>
   49648:	3888d83a 	srl	r4,r7,r2
   4964c:	d8800317 	ldw	r2,12(sp)
   49650:	2007883a 	mov	r3,r4
   49654:	103fe226 	beq	r2,zero,495e0 <__fixdfsi+0x34>
   49658:	0107c83a 	sub	r3,zero,r4
   4965c:	003fe006 	br	495e0 <__fixdfsi+0x34>
   49660:	00e00034 	movhi	r3,32768
   49664:	003fde06 	br	495e0 <__fixdfsi+0x34>
   49668:	39c7883a 	add	r3,r7,r7
   4966c:	008007c4 	movi	r2,31
   49670:	1205c83a 	sub	r2,r2,r8
   49674:	1886983a 	sll	r3,r3,r2
   49678:	3208d83a 	srl	r4,r6,r8
   4967c:	1908b03a 	or	r4,r3,r4
   49680:	003ff206 	br	4964c <__fixdfsi+0xa0>

00049684 <__floatunsidf>:
   49684:	defff204 	addi	sp,sp,-56
   49688:	dfc00d15 	stw	ra,52(sp)
   4968c:	ddc00c15 	stw	r23,48(sp)
   49690:	dd800b15 	stw	r22,44(sp)
   49694:	dd400a15 	stw	r21,40(sp)
   49698:	dd000915 	stw	r20,36(sp)
   4969c:	dcc00815 	stw	r19,32(sp)
   496a0:	dc800715 	stw	r18,28(sp)
   496a4:	dc400615 	stw	r17,24(sp)
   496a8:	dc000515 	stw	r16,20(sp)
   496ac:	d8000115 	stw	zero,4(sp)
   496b0:	20000f1e 	bne	r4,zero,496f0 <__floatunsidf+0x6c>
   496b4:	00800084 	movi	r2,2
   496b8:	d8800015 	stw	r2,0(sp)
   496bc:	d809883a 	mov	r4,sp
   496c0:	00499e40 	call	499e4 <__pack_d>
   496c4:	dfc00d17 	ldw	ra,52(sp)
   496c8:	ddc00c17 	ldw	r23,48(sp)
   496cc:	dd800b17 	ldw	r22,44(sp)
   496d0:	dd400a17 	ldw	r21,40(sp)
   496d4:	dd000917 	ldw	r20,36(sp)
   496d8:	dcc00817 	ldw	r19,32(sp)
   496dc:	dc800717 	ldw	r18,28(sp)
   496e0:	dc400617 	ldw	r17,24(sp)
   496e4:	dc000517 	ldw	r16,20(sp)
   496e8:	dec00e04 	addi	sp,sp,56
   496ec:	f800283a 	ret
   496f0:	008000c4 	movi	r2,3
   496f4:	00c00f04 	movi	r3,60
   496f8:	002f883a 	mov	r23,zero
   496fc:	202d883a 	mov	r22,r4
   49700:	d8800015 	stw	r2,0(sp)
   49704:	d8c00215 	stw	r3,8(sp)
   49708:	d9000315 	stw	r4,12(sp)
   4970c:	ddc00415 	stw	r23,16(sp)
   49710:	00499640 	call	49964 <__clzsi2>
   49714:	12400744 	addi	r9,r2,29
   49718:	48000b16 	blt	r9,zero,49748 <__floatunsidf+0xc4>
   4971c:	483fe726 	beq	r9,zero,496bc <__floatunsidf+0x38>
   49720:	10bfff44 	addi	r2,r2,-3
   49724:	10002e16 	blt	r2,zero,497e0 <__floatunsidf+0x15c>
   49728:	b0a2983a 	sll	r17,r22,r2
   4972c:	0021883a 	mov	r16,zero
   49730:	d8800217 	ldw	r2,8(sp)
   49734:	dc400415 	stw	r17,16(sp)
   49738:	dc000315 	stw	r16,12(sp)
   4973c:	1245c83a 	sub	r2,r2,r9
   49740:	d8800215 	stw	r2,8(sp)
   49744:	003fdd06 	br	496bc <__floatunsidf+0x38>
   49748:	0255c83a 	sub	r10,zero,r9
   4974c:	51bff804 	addi	r6,r10,-32
   49750:	30001b16 	blt	r6,zero,497c0 <__floatunsidf+0x13c>
   49754:	b9a8d83a 	srl	r20,r23,r6
   49758:	002b883a 	mov	r21,zero
   4975c:	000f883a 	mov	r7,zero
   49760:	01000044 	movi	r4,1
   49764:	0011883a 	mov	r8,zero
   49768:	30002516 	blt	r6,zero,49800 <__floatunsidf+0x17c>
   4976c:	21a6983a 	sll	r19,r4,r6
   49770:	0025883a 	mov	r18,zero
   49774:	00bfffc4 	movi	r2,-1
   49778:	9089883a 	add	r4,r18,r2
   4977c:	988b883a 	add	r5,r19,r2
   49780:	248d803a 	cmpltu	r6,r4,r18
   49784:	314b883a 	add	r5,r6,r5
   49788:	b104703a 	and	r2,r22,r4
   4978c:	b946703a 	and	r3,r23,r5
   49790:	10c4b03a 	or	r2,r2,r3
   49794:	10000226 	beq	r2,zero,497a0 <__floatunsidf+0x11c>
   49798:	01c00044 	movi	r7,1
   4979c:	0011883a 	mov	r8,zero
   497a0:	d9000217 	ldw	r4,8(sp)
   497a4:	a1c4b03a 	or	r2,r20,r7
   497a8:	aa06b03a 	or	r3,r21,r8
   497ac:	2249c83a 	sub	r4,r4,r9
   497b0:	d8c00415 	stw	r3,16(sp)
   497b4:	d9000215 	stw	r4,8(sp)
   497b8:	d8800315 	stw	r2,12(sp)
   497bc:	003fbf06 	br	496bc <__floatunsidf+0x38>
   497c0:	bdc7883a 	add	r3,r23,r23
   497c4:	008007c4 	movi	r2,31
   497c8:	1285c83a 	sub	r2,r2,r10
   497cc:	1886983a 	sll	r3,r3,r2
   497d0:	b2a8d83a 	srl	r20,r22,r10
   497d4:	baaad83a 	srl	r21,r23,r10
   497d8:	1d28b03a 	or	r20,r3,r20
   497dc:	003fdf06 	br	4975c <__floatunsidf+0xd8>
   497e0:	b006d07a 	srli	r3,r22,1
   497e4:	008007c4 	movi	r2,31
   497e8:	1245c83a 	sub	r2,r2,r9
   497ec:	1886d83a 	srl	r3,r3,r2
   497f0:	ba62983a 	sll	r17,r23,r9
   497f4:	b260983a 	sll	r16,r22,r9
   497f8:	1c62b03a 	or	r17,r3,r17
   497fc:	003fcc06 	br	49730 <__floatunsidf+0xac>
   49800:	2006d07a 	srli	r3,r4,1
   49804:	008007c4 	movi	r2,31
   49808:	1285c83a 	sub	r2,r2,r10
   4980c:	18a6d83a 	srl	r19,r3,r2
   49810:	22a4983a 	sll	r18,r4,r10
   49814:	003fd706 	br	49774 <__floatunsidf+0xf0>

00049818 <udivmodsi4>:
   49818:	29001b2e 	bgeu	r5,r4,49888 <udivmodsi4+0x70>
   4981c:	28001a16 	blt	r5,zero,49888 <udivmodsi4+0x70>
   49820:	00800044 	movi	r2,1
   49824:	0007883a 	mov	r3,zero
   49828:	01c007c4 	movi	r7,31
   4982c:	00000306 	br	4983c <udivmodsi4+0x24>
   49830:	19c01326 	beq	r3,r7,49880 <udivmodsi4+0x68>
   49834:	18c00044 	addi	r3,r3,1
   49838:	28000416 	blt	r5,zero,4984c <udivmodsi4+0x34>
   4983c:	294b883a 	add	r5,r5,r5
   49840:	1085883a 	add	r2,r2,r2
   49844:	293ffa36 	bltu	r5,r4,49830 <udivmodsi4+0x18>
   49848:	10000d26 	beq	r2,zero,49880 <udivmodsi4+0x68>
   4984c:	0007883a 	mov	r3,zero
   49850:	21400236 	bltu	r4,r5,4985c <udivmodsi4+0x44>
   49854:	2149c83a 	sub	r4,r4,r5
   49858:	1886b03a 	or	r3,r3,r2
   4985c:	1004d07a 	srli	r2,r2,1
   49860:	280ad07a 	srli	r5,r5,1
   49864:	103ffa1e 	bne	r2,zero,49850 <udivmodsi4+0x38>
   49868:	30000226 	beq	r6,zero,49874 <udivmodsi4+0x5c>
   4986c:	2005883a 	mov	r2,r4
   49870:	f800283a 	ret
   49874:	1809883a 	mov	r4,r3
   49878:	2005883a 	mov	r2,r4
   4987c:	f800283a 	ret
   49880:	0007883a 	mov	r3,zero
   49884:	003ff806 	br	49868 <udivmodsi4+0x50>
   49888:	00800044 	movi	r2,1
   4988c:	0007883a 	mov	r3,zero
   49890:	003fef06 	br	49850 <udivmodsi4+0x38>

00049894 <__divsi3>:
   49894:	defffe04 	addi	sp,sp,-8
   49898:	dc000015 	stw	r16,0(sp)
   4989c:	dfc00115 	stw	ra,4(sp)
   498a0:	0021883a 	mov	r16,zero
   498a4:	20000c16 	blt	r4,zero,498d8 <__divsi3+0x44>
   498a8:	000d883a 	mov	r6,zero
   498ac:	28000e16 	blt	r5,zero,498e8 <__divsi3+0x54>
   498b0:	00498180 	call	49818 <udivmodsi4>
   498b4:	1007883a 	mov	r3,r2
   498b8:	8005003a 	cmpeq	r2,r16,zero
   498bc:	1000011e 	bne	r2,zero,498c4 <__divsi3+0x30>
   498c0:	00c7c83a 	sub	r3,zero,r3
   498c4:	1805883a 	mov	r2,r3
   498c8:	dfc00117 	ldw	ra,4(sp)
   498cc:	dc000017 	ldw	r16,0(sp)
   498d0:	dec00204 	addi	sp,sp,8
   498d4:	f800283a 	ret
   498d8:	0109c83a 	sub	r4,zero,r4
   498dc:	04000044 	movi	r16,1
   498e0:	000d883a 	mov	r6,zero
   498e4:	283ff20e 	bge	r5,zero,498b0 <__divsi3+0x1c>
   498e8:	014bc83a 	sub	r5,zero,r5
   498ec:	8021003a 	cmpeq	r16,r16,zero
   498f0:	003fef06 	br	498b0 <__divsi3+0x1c>

000498f4 <__modsi3>:
   498f4:	deffff04 	addi	sp,sp,-4
   498f8:	dfc00015 	stw	ra,0(sp)
   498fc:	01800044 	movi	r6,1
   49900:	2807883a 	mov	r3,r5
   49904:	20000416 	blt	r4,zero,49918 <__modsi3+0x24>
   49908:	28000c16 	blt	r5,zero,4993c <__modsi3+0x48>
   4990c:	dfc00017 	ldw	ra,0(sp)
   49910:	dec00104 	addi	sp,sp,4
   49914:	00498181 	jmpi	49818 <udivmodsi4>
   49918:	0109c83a 	sub	r4,zero,r4
   4991c:	28000b16 	blt	r5,zero,4994c <__modsi3+0x58>
   49920:	180b883a 	mov	r5,r3
   49924:	01800044 	movi	r6,1
   49928:	00498180 	call	49818 <udivmodsi4>
   4992c:	0085c83a 	sub	r2,zero,r2
   49930:	dfc00017 	ldw	ra,0(sp)
   49934:	dec00104 	addi	sp,sp,4
   49938:	f800283a 	ret
   4993c:	014bc83a 	sub	r5,zero,r5
   49940:	dfc00017 	ldw	ra,0(sp)
   49944:	dec00104 	addi	sp,sp,4
   49948:	00498181 	jmpi	49818 <udivmodsi4>
   4994c:	0147c83a 	sub	r3,zero,r5
   49950:	003ff306 	br	49920 <__modsi3+0x2c>

00049954 <__udivsi3>:
   49954:	000d883a 	mov	r6,zero
   49958:	00498181 	jmpi	49818 <udivmodsi4>

0004995c <__umodsi3>:
   4995c:	01800044 	movi	r6,1
   49960:	00498181 	jmpi	49818 <udivmodsi4>

00049964 <__clzsi2>:
   49964:	00bfffd4 	movui	r2,65535
   49968:	11000e36 	bltu	r2,r4,499a4 <__clzsi2+0x40>
   4996c:	00803fc4 	movi	r2,255
   49970:	01400204 	movi	r5,8
   49974:	0007883a 	mov	r3,zero
   49978:	11001036 	bltu	r2,r4,499bc <__clzsi2+0x58>
   4997c:	000b883a 	mov	r5,zero
   49980:	20c6d83a 	srl	r3,r4,r3
   49984:	00900034 	movhi	r2,16384
   49988:	10809404 	addi	r2,r2,592
   4998c:	1887883a 	add	r3,r3,r2
   49990:	18800003 	ldbu	r2,0(r3)
   49994:	00c00804 	movi	r3,32
   49998:	2885883a 	add	r2,r5,r2
   4999c:	1885c83a 	sub	r2,r3,r2
   499a0:	f800283a 	ret
   499a4:	01400404 	movi	r5,16
   499a8:	00804034 	movhi	r2,256
   499ac:	10bfffc4 	addi	r2,r2,-1
   499b0:	2807883a 	mov	r3,r5
   499b4:	113ff22e 	bgeu	r2,r4,49980 <__clzsi2+0x1c>
   499b8:	01400604 	movi	r5,24
   499bc:	2807883a 	mov	r3,r5
   499c0:	20c6d83a 	srl	r3,r4,r3
   499c4:	00900034 	movhi	r2,16384
   499c8:	10809404 	addi	r2,r2,592
   499cc:	1887883a 	add	r3,r3,r2
   499d0:	18800003 	ldbu	r2,0(r3)
   499d4:	00c00804 	movi	r3,32
   499d8:	2885883a 	add	r2,r5,r2
   499dc:	1885c83a 	sub	r2,r3,r2
   499e0:	f800283a 	ret

000499e4 <__pack_d>:
   499e4:	20c00017 	ldw	r3,0(r4)
   499e8:	defffd04 	addi	sp,sp,-12
   499ec:	dc000015 	stw	r16,0(sp)
   499f0:	dc800215 	stw	r18,8(sp)
   499f4:	dc400115 	stw	r17,4(sp)
   499f8:	00800044 	movi	r2,1
   499fc:	22000317 	ldw	r8,12(r4)
   49a00:	001f883a 	mov	r15,zero
   49a04:	22400417 	ldw	r9,16(r4)
   49a08:	24000117 	ldw	r16,4(r4)
   49a0c:	10c0552e 	bgeu	r2,r3,49b64 <__pack_d+0x180>
   49a10:	00800104 	movi	r2,4
   49a14:	18804f26 	beq	r3,r2,49b54 <__pack_d+0x170>
   49a18:	00800084 	movi	r2,2
   49a1c:	18800226 	beq	r3,r2,49a28 <__pack_d+0x44>
   49a20:	4244b03a 	or	r2,r8,r9
   49a24:	10001a1e 	bne	r2,zero,49a90 <__pack_d+0xac>
   49a28:	000d883a 	mov	r6,zero
   49a2c:	000f883a 	mov	r7,zero
   49a30:	0011883a 	mov	r8,zero
   49a34:	00800434 	movhi	r2,16
   49a38:	10bfffc4 	addi	r2,r2,-1
   49a3c:	301d883a 	mov	r14,r6
   49a40:	3884703a 	and	r2,r7,r2
   49a44:	400a953a 	slli	r5,r8,20
   49a48:	79bffc2c 	andhi	r6,r15,65520
   49a4c:	308cb03a 	or	r6,r6,r2
   49a50:	00e00434 	movhi	r3,32784
   49a54:	18ffffc4 	addi	r3,r3,-1
   49a58:	800497fa 	slli	r2,r16,31
   49a5c:	30c6703a 	and	r3,r6,r3
   49a60:	1946b03a 	or	r3,r3,r5
   49a64:	01600034 	movhi	r5,32768
   49a68:	297fffc4 	addi	r5,r5,-1
   49a6c:	194a703a 	and	r5,r3,r5
   49a70:	288ab03a 	or	r5,r5,r2
   49a74:	2807883a 	mov	r3,r5
   49a78:	7005883a 	mov	r2,r14
   49a7c:	dc800217 	ldw	r18,8(sp)
   49a80:	dc400117 	ldw	r17,4(sp)
   49a84:	dc000017 	ldw	r16,0(sp)
   49a88:	dec00304 	addi	sp,sp,12
   49a8c:	f800283a 	ret
   49a90:	21000217 	ldw	r4,8(r4)
   49a94:	00bf0084 	movi	r2,-1022
   49a98:	20803f16 	blt	r4,r2,49b98 <__pack_d+0x1b4>
   49a9c:	0080ffc4 	movi	r2,1023
   49aa0:	11002c16 	blt	r2,r4,49b54 <__pack_d+0x170>
   49aa4:	00803fc4 	movi	r2,255
   49aa8:	408c703a 	and	r6,r8,r2
   49aac:	00802004 	movi	r2,128
   49ab0:	0007883a 	mov	r3,zero
   49ab4:	000f883a 	mov	r7,zero
   49ab8:	2280ffc4 	addi	r10,r4,1023
   49abc:	30801e26 	beq	r6,r2,49b38 <__pack_d+0x154>
   49ac0:	00801fc4 	movi	r2,127
   49ac4:	4089883a 	add	r4,r8,r2
   49ac8:	220d803a 	cmpltu	r6,r4,r8
   49acc:	324d883a 	add	r6,r6,r9
   49ad0:	2011883a 	mov	r8,r4
   49ad4:	3013883a 	mov	r9,r6
   49ad8:	00880034 	movhi	r2,8192
   49adc:	10bfffc4 	addi	r2,r2,-1
   49ae0:	12400d36 	bltu	r2,r9,49b18 <__pack_d+0x134>
   49ae4:	4804963a 	slli	r2,r9,24
   49ae8:	400cd23a 	srli	r6,r8,8
   49aec:	480ed23a 	srli	r7,r9,8
   49af0:	013fffc4 	movi	r4,-1
   49af4:	118cb03a 	or	r6,r2,r6
   49af8:	01400434 	movhi	r5,16
   49afc:	297fffc4 	addi	r5,r5,-1
   49b00:	3104703a 	and	r2,r6,r4
   49b04:	3946703a 	and	r3,r7,r5
   49b08:	5201ffcc 	andi	r8,r10,2047
   49b0c:	100d883a 	mov	r6,r2
   49b10:	180f883a 	mov	r7,r3
   49b14:	003fc706 	br	49a34 <__pack_d+0x50>
   49b18:	480897fa 	slli	r4,r9,31
   49b1c:	4004d07a 	srli	r2,r8,1
   49b20:	4806d07a 	srli	r3,r9,1
   49b24:	52800044 	addi	r10,r10,1
   49b28:	2084b03a 	or	r2,r4,r2
   49b2c:	1011883a 	mov	r8,r2
   49b30:	1813883a 	mov	r9,r3
   49b34:	003feb06 	br	49ae4 <__pack_d+0x100>
   49b38:	383fe11e 	bne	r7,zero,49ac0 <__pack_d+0xdc>
   49b3c:	01004004 	movi	r4,256
   49b40:	4104703a 	and	r2,r8,r4
   49b44:	10c4b03a 	or	r2,r2,r3
   49b48:	103fe326 	beq	r2,zero,49ad8 <__pack_d+0xf4>
   49b4c:	3005883a 	mov	r2,r6
   49b50:	003fdc06 	br	49ac4 <__pack_d+0xe0>
   49b54:	000d883a 	mov	r6,zero
   49b58:	000f883a 	mov	r7,zero
   49b5c:	0201ffc4 	movi	r8,2047
   49b60:	003fb406 	br	49a34 <__pack_d+0x50>
   49b64:	0005883a 	mov	r2,zero
   49b68:	00c00234 	movhi	r3,8
   49b6c:	408cb03a 	or	r6,r8,r2
   49b70:	48ceb03a 	or	r7,r9,r3
   49b74:	013fffc4 	movi	r4,-1
   49b78:	01400434 	movhi	r5,16
   49b7c:	297fffc4 	addi	r5,r5,-1
   49b80:	3104703a 	and	r2,r6,r4
   49b84:	3946703a 	and	r3,r7,r5
   49b88:	100d883a 	mov	r6,r2
   49b8c:	180f883a 	mov	r7,r3
   49b90:	0201ffc4 	movi	r8,2047
   49b94:	003fa706 	br	49a34 <__pack_d+0x50>
   49b98:	1109c83a 	sub	r4,r2,r4
   49b9c:	00800e04 	movi	r2,56
   49ba0:	11004316 	blt	r2,r4,49cb0 <__pack_d+0x2cc>
   49ba4:	21fff804 	addi	r7,r4,-32
   49ba8:	38004516 	blt	r7,zero,49cc0 <__pack_d+0x2dc>
   49bac:	49d8d83a 	srl	r12,r9,r7
   49bb0:	001b883a 	mov	r13,zero
   49bb4:	0023883a 	mov	r17,zero
   49bb8:	01400044 	movi	r5,1
   49bbc:	0025883a 	mov	r18,zero
   49bc0:	38004716 	blt	r7,zero,49ce0 <__pack_d+0x2fc>
   49bc4:	29d6983a 	sll	r11,r5,r7
   49bc8:	0015883a 	mov	r10,zero
   49bcc:	00bfffc4 	movi	r2,-1
   49bd0:	5089883a 	add	r4,r10,r2
   49bd4:	588b883a 	add	r5,r11,r2
   49bd8:	228d803a 	cmpltu	r6,r4,r10
   49bdc:	314b883a 	add	r5,r6,r5
   49be0:	4104703a 	and	r2,r8,r4
   49be4:	4946703a 	and	r3,r9,r5
   49be8:	10c4b03a 	or	r2,r2,r3
   49bec:	10000226 	beq	r2,zero,49bf8 <__pack_d+0x214>
   49bf0:	04400044 	movi	r17,1
   49bf4:	0025883a 	mov	r18,zero
   49bf8:	00803fc4 	movi	r2,255
   49bfc:	644eb03a 	or	r7,r12,r17
   49c00:	3892703a 	and	r9,r7,r2
   49c04:	00802004 	movi	r2,128
   49c08:	6c90b03a 	or	r8,r13,r18
   49c0c:	0015883a 	mov	r10,zero
   49c10:	48801626 	beq	r9,r2,49c6c <__pack_d+0x288>
   49c14:	01001fc4 	movi	r4,127
   49c18:	3905883a 	add	r2,r7,r4
   49c1c:	11cd803a 	cmpltu	r6,r2,r7
   49c20:	320d883a 	add	r6,r6,r8
   49c24:	100f883a 	mov	r7,r2
   49c28:	00840034 	movhi	r2,4096
   49c2c:	10bfffc4 	addi	r2,r2,-1
   49c30:	3011883a 	mov	r8,r6
   49c34:	0007883a 	mov	r3,zero
   49c38:	11801b36 	bltu	r2,r6,49ca8 <__pack_d+0x2c4>
   49c3c:	4004963a 	slli	r2,r8,24
   49c40:	3808d23a 	srli	r4,r7,8
   49c44:	400ad23a 	srli	r5,r8,8
   49c48:	1813883a 	mov	r9,r3
   49c4c:	1108b03a 	or	r4,r2,r4
   49c50:	00bfffc4 	movi	r2,-1
   49c54:	00c00434 	movhi	r3,16
   49c58:	18ffffc4 	addi	r3,r3,-1
   49c5c:	208c703a 	and	r6,r4,r2
   49c60:	28ce703a 	and	r7,r5,r3
   49c64:	4a01ffcc 	andi	r8,r9,2047
   49c68:	003f7206 	br	49a34 <__pack_d+0x50>
   49c6c:	503fe91e 	bne	r10,zero,49c14 <__pack_d+0x230>
   49c70:	01004004 	movi	r4,256
   49c74:	3904703a 	and	r2,r7,r4
   49c78:	0007883a 	mov	r3,zero
   49c7c:	10c4b03a 	or	r2,r2,r3
   49c80:	10000626 	beq	r2,zero,49c9c <__pack_d+0x2b8>
   49c84:	3a45883a 	add	r2,r7,r9
   49c88:	11cd803a 	cmpltu	r6,r2,r7
   49c8c:	320d883a 	add	r6,r6,r8
   49c90:	100f883a 	mov	r7,r2
   49c94:	3011883a 	mov	r8,r6
   49c98:	0007883a 	mov	r3,zero
   49c9c:	00840034 	movhi	r2,4096
   49ca0:	10bfffc4 	addi	r2,r2,-1
   49ca4:	123fe52e 	bgeu	r2,r8,49c3c <__pack_d+0x258>
   49ca8:	00c00044 	movi	r3,1
   49cac:	003fe306 	br	49c3c <__pack_d+0x258>
   49cb0:	0009883a 	mov	r4,zero
   49cb4:	0013883a 	mov	r9,zero
   49cb8:	000b883a 	mov	r5,zero
   49cbc:	003fe406 	br	49c50 <__pack_d+0x26c>
   49cc0:	4a47883a 	add	r3,r9,r9
   49cc4:	008007c4 	movi	r2,31
   49cc8:	1105c83a 	sub	r2,r2,r4
   49ccc:	1886983a 	sll	r3,r3,r2
   49cd0:	4118d83a 	srl	r12,r8,r4
   49cd4:	491ad83a 	srl	r13,r9,r4
   49cd8:	1b18b03a 	or	r12,r3,r12
   49cdc:	003fb506 	br	49bb4 <__pack_d+0x1d0>
   49ce0:	2806d07a 	srli	r3,r5,1
   49ce4:	008007c4 	movi	r2,31
   49ce8:	1105c83a 	sub	r2,r2,r4
   49cec:	1896d83a 	srl	r11,r3,r2
   49cf0:	2914983a 	sll	r10,r5,r4
   49cf4:	003fb506 	br	49bcc <__pack_d+0x1e8>

00049cf8 <__unpack_d>:
   49cf8:	20c00117 	ldw	r3,4(r4)
   49cfc:	22400017 	ldw	r9,0(r4)
   49d00:	00800434 	movhi	r2,16
   49d04:	10bfffc4 	addi	r2,r2,-1
   49d08:	1808d53a 	srli	r4,r3,20
   49d0c:	180cd7fa 	srli	r6,r3,31
   49d10:	1894703a 	and	r10,r3,r2
   49d14:	2201ffcc 	andi	r8,r4,2047
   49d18:	281b883a 	mov	r13,r5
   49d1c:	4817883a 	mov	r11,r9
   49d20:	29800115 	stw	r6,4(r5)
   49d24:	5019883a 	mov	r12,r10
   49d28:	40001e1e 	bne	r8,zero,49da4 <__unpack_d+0xac>
   49d2c:	4a84b03a 	or	r2,r9,r10
   49d30:	10001926 	beq	r2,zero,49d98 <__unpack_d+0xa0>
   49d34:	4804d63a 	srli	r2,r9,24
   49d38:	500c923a 	slli	r6,r10,8
   49d3c:	013f0084 	movi	r4,-1022
   49d40:	00c40034 	movhi	r3,4096
   49d44:	18ffffc4 	addi	r3,r3,-1
   49d48:	118cb03a 	or	r6,r2,r6
   49d4c:	008000c4 	movi	r2,3
   49d50:	480a923a 	slli	r5,r9,8
   49d54:	68800015 	stw	r2,0(r13)
   49d58:	69000215 	stw	r4,8(r13)
   49d5c:	19800b36 	bltu	r3,r6,49d8c <__unpack_d+0x94>
   49d60:	200f883a 	mov	r7,r4
   49d64:	1811883a 	mov	r8,r3
   49d68:	2945883a 	add	r2,r5,r5
   49d6c:	1149803a 	cmpltu	r4,r2,r5
   49d70:	3187883a 	add	r3,r6,r6
   49d74:	20c9883a 	add	r4,r4,r3
   49d78:	100b883a 	mov	r5,r2
   49d7c:	200d883a 	mov	r6,r4
   49d80:	39ffffc4 	addi	r7,r7,-1
   49d84:	413ff82e 	bgeu	r8,r4,49d68 <__unpack_d+0x70>
   49d88:	69c00215 	stw	r7,8(r13)
   49d8c:	69800415 	stw	r6,16(r13)
   49d90:	69400315 	stw	r5,12(r13)
   49d94:	f800283a 	ret
   49d98:	00800084 	movi	r2,2
   49d9c:	28800015 	stw	r2,0(r5)
   49da0:	f800283a 	ret
   49da4:	0081ffc4 	movi	r2,2047
   49da8:	40800f26 	beq	r8,r2,49de8 <__unpack_d+0xf0>
   49dac:	480cd63a 	srli	r6,r9,24
   49db0:	5006923a 	slli	r3,r10,8
   49db4:	4804923a 	slli	r2,r9,8
   49db8:	0009883a 	mov	r4,zero
   49dbc:	30c6b03a 	or	r3,r6,r3
   49dc0:	01440034 	movhi	r5,4096
   49dc4:	110cb03a 	or	r6,r2,r4
   49dc8:	423f0044 	addi	r8,r8,-1023
   49dcc:	194eb03a 	or	r7,r3,r5
   49dd0:	008000c4 	movi	r2,3
   49dd4:	69c00415 	stw	r7,16(r13)
   49dd8:	6a000215 	stw	r8,8(r13)
   49ddc:	68800015 	stw	r2,0(r13)
   49de0:	69800315 	stw	r6,12(r13)
   49de4:	f800283a 	ret
   49de8:	4a84b03a 	or	r2,r9,r10
   49dec:	1000031e 	bne	r2,zero,49dfc <__unpack_d+0x104>
   49df0:	00800104 	movi	r2,4
   49df4:	28800015 	stw	r2,0(r5)
   49df8:	f800283a 	ret
   49dfc:	0009883a 	mov	r4,zero
   49e00:	01400234 	movhi	r5,8
   49e04:	4904703a 	and	r2,r9,r4
   49e08:	5146703a 	and	r3,r10,r5
   49e0c:	10c4b03a 	or	r2,r2,r3
   49e10:	10000526 	beq	r2,zero,49e28 <__unpack_d+0x130>
   49e14:	00800044 	movi	r2,1
   49e18:	68800015 	stw	r2,0(r13)
   49e1c:	6b000415 	stw	r12,16(r13)
   49e20:	6ac00315 	stw	r11,12(r13)
   49e24:	f800283a 	ret
   49e28:	68000015 	stw	zero,0(r13)
   49e2c:	003ffb06 	br	49e1c <__unpack_d+0x124>

00049e30 <__fpcmp_parts_d>:
   49e30:	21800017 	ldw	r6,0(r4)
   49e34:	00c00044 	movi	r3,1
   49e38:	19800a2e 	bgeu	r3,r6,49e64 <__fpcmp_parts_d+0x34>
   49e3c:	28800017 	ldw	r2,0(r5)
   49e40:	1880082e 	bgeu	r3,r2,49e64 <__fpcmp_parts_d+0x34>
   49e44:	00c00104 	movi	r3,4
   49e48:	30c02626 	beq	r6,r3,49ee4 <__fpcmp_parts_d+0xb4>
   49e4c:	10c02226 	beq	r2,r3,49ed8 <__fpcmp_parts_d+0xa8>
   49e50:	00c00084 	movi	r3,2
   49e54:	30c00526 	beq	r6,r3,49e6c <__fpcmp_parts_d+0x3c>
   49e58:	10c0071e 	bne	r2,r3,49e78 <__fpcmp_parts_d+0x48>
   49e5c:	20800117 	ldw	r2,4(r4)
   49e60:	1000091e 	bne	r2,zero,49e88 <__fpcmp_parts_d+0x58>
   49e64:	00800044 	movi	r2,1
   49e68:	f800283a 	ret
   49e6c:	10c01a1e 	bne	r2,r3,49ed8 <__fpcmp_parts_d+0xa8>
   49e70:	0005883a 	mov	r2,zero
   49e74:	f800283a 	ret
   49e78:	22000117 	ldw	r8,4(r4)
   49e7c:	28800117 	ldw	r2,4(r5)
   49e80:	40800326 	beq	r8,r2,49e90 <__fpcmp_parts_d+0x60>
   49e84:	403ff726 	beq	r8,zero,49e64 <__fpcmp_parts_d+0x34>
   49e88:	00bfffc4 	movi	r2,-1
   49e8c:	f800283a 	ret
   49e90:	20c00217 	ldw	r3,8(r4)
   49e94:	28800217 	ldw	r2,8(r5)
   49e98:	10fffa16 	blt	r2,r3,49e84 <__fpcmp_parts_d+0x54>
   49e9c:	18800916 	blt	r3,r2,49ec4 <__fpcmp_parts_d+0x94>
   49ea0:	21c00417 	ldw	r7,16(r4)
   49ea4:	28c00417 	ldw	r3,16(r5)
   49ea8:	21800317 	ldw	r6,12(r4)
   49eac:	28800317 	ldw	r2,12(r5)
   49eb0:	19fff436 	bltu	r3,r7,49e84 <__fpcmp_parts_d+0x54>
   49eb4:	38c00526 	beq	r7,r3,49ecc <__fpcmp_parts_d+0x9c>
   49eb8:	38c00236 	bltu	r7,r3,49ec4 <__fpcmp_parts_d+0x94>
   49ebc:	19ffec1e 	bne	r3,r7,49e70 <__fpcmp_parts_d+0x40>
   49ec0:	30bfeb2e 	bgeu	r6,r2,49e70 <__fpcmp_parts_d+0x40>
   49ec4:	403fe71e 	bne	r8,zero,49e64 <__fpcmp_parts_d+0x34>
   49ec8:	003fef06 	br	49e88 <__fpcmp_parts_d+0x58>
   49ecc:	11bffa2e 	bgeu	r2,r6,49eb8 <__fpcmp_parts_d+0x88>
   49ed0:	403fe426 	beq	r8,zero,49e64 <__fpcmp_parts_d+0x34>
   49ed4:	003fec06 	br	49e88 <__fpcmp_parts_d+0x58>
   49ed8:	28800117 	ldw	r2,4(r5)
   49edc:	103fe11e 	bne	r2,zero,49e64 <__fpcmp_parts_d+0x34>
   49ee0:	003fe906 	br	49e88 <__fpcmp_parts_d+0x58>
   49ee4:	11bfdd1e 	bne	r2,r6,49e5c <__fpcmp_parts_d+0x2c>
   49ee8:	28c00117 	ldw	r3,4(r5)
   49eec:	20800117 	ldw	r2,4(r4)
   49ef0:	1885c83a 	sub	r2,r3,r2
   49ef4:	f800283a 	ret

00049ef8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   49ef8:	defff804 	addi	sp,sp,-32
   49efc:	dfc00715 	stw	ra,28(sp)
   49f00:	df000615 	stw	fp,24(sp)
   49f04:	df000604 	addi	fp,sp,24
   49f08:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   49f0c:	e0bffc17 	ldw	r2,-16(fp)
   49f10:	1004803a 	cmplt	r2,r2,zero
   49f14:	1000081e 	bne	r2,zero,49f38 <close+0x40>
   49f18:	e0bffc17 	ldw	r2,-16(fp)
   49f1c:	10800324 	muli	r2,r2,12
   49f20:	1007883a 	mov	r3,r2
   49f24:	00900034 	movhi	r2,16384
   49f28:	1082ee04 	addi	r2,r2,3000
   49f2c:	1887883a 	add	r3,r3,r2
   49f30:	e0ffff15 	stw	r3,-4(fp)
   49f34:	00000106 	br	49f3c <close+0x44>
   49f38:	e03fff15 	stw	zero,-4(fp)
   49f3c:	e0bfff17 	ldw	r2,-4(fp)
   49f40:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
   49f44:	e0bffb17 	ldw	r2,-20(fp)
   49f48:	1005003a 	cmpeq	r2,r2,zero
   49f4c:	10001d1e 	bne	r2,zero,49fc4 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   49f50:	e0bffb17 	ldw	r2,-20(fp)
   49f54:	10800017 	ldw	r2,0(r2)
   49f58:	10800417 	ldw	r2,16(r2)
   49f5c:	1005003a 	cmpeq	r2,r2,zero
   49f60:	1000071e 	bne	r2,zero,49f80 <close+0x88>
   49f64:	e0bffb17 	ldw	r2,-20(fp)
   49f68:	10800017 	ldw	r2,0(r2)
   49f6c:	10800417 	ldw	r2,16(r2)
   49f70:	e13ffb17 	ldw	r4,-20(fp)
   49f74:	103ee83a 	callr	r2
   49f78:	e0bffe15 	stw	r2,-8(fp)
   49f7c:	00000106 	br	49f84 <close+0x8c>
   49f80:	e03ffe15 	stw	zero,-8(fp)
   49f84:	e0bffe17 	ldw	r2,-8(fp)
   49f88:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   49f8c:	e13ffc17 	ldw	r4,-16(fp)
   49f90:	004a73c0 	call	4a73c <alt_release_fd>
    if (rval < 0)
   49f94:	e0bffa17 	ldw	r2,-24(fp)
   49f98:	1004403a 	cmpge	r2,r2,zero
   49f9c:	1000071e 	bne	r2,zero,49fbc <close+0xc4>
    {
      ALT_ERRNO = -rval;
   49fa0:	0049ff40 	call	49ff4 <alt_get_errno>
   49fa4:	e0fffa17 	ldw	r3,-24(fp)
   49fa8:	00c7c83a 	sub	r3,zero,r3
   49fac:	10c00015 	stw	r3,0(r2)
      return -1;
   49fb0:	00bfffc4 	movi	r2,-1
   49fb4:	e0bffd15 	stw	r2,-12(fp)
   49fb8:	00000806 	br	49fdc <close+0xe4>
    }
    return 0;
   49fbc:	e03ffd15 	stw	zero,-12(fp)
   49fc0:	00000606 	br	49fdc <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   49fc4:	0049ff40 	call	49ff4 <alt_get_errno>
   49fc8:	1007883a 	mov	r3,r2
   49fcc:	00801444 	movi	r2,81
   49fd0:	18800015 	stw	r2,0(r3)
    return -1;
   49fd4:	00bfffc4 	movi	r2,-1
   49fd8:	e0bffd15 	stw	r2,-12(fp)
   49fdc:	e0bffd17 	ldw	r2,-12(fp)
  }
}
   49fe0:	e037883a 	mov	sp,fp
   49fe4:	dfc00117 	ldw	ra,4(sp)
   49fe8:	df000017 	ldw	fp,0(sp)
   49fec:	dec00204 	addi	sp,sp,8
   49ff0:	f800283a 	ret

00049ff4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   49ff4:	defffd04 	addi	sp,sp,-12
   49ff8:	dfc00215 	stw	ra,8(sp)
   49ffc:	df000115 	stw	fp,4(sp)
   4a000:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   4a004:	00900034 	movhi	r2,16384
   4a008:	10877104 	addi	r2,r2,7620
   4a00c:	10800017 	ldw	r2,0(r2)
   4a010:	1005003a 	cmpeq	r2,r2,zero
   4a014:	1000061e 	bne	r2,zero,4a030 <alt_get_errno+0x3c>
   4a018:	00900034 	movhi	r2,16384
   4a01c:	10877104 	addi	r2,r2,7620
   4a020:	10800017 	ldw	r2,0(r2)
   4a024:	103ee83a 	callr	r2
   4a028:	e0bfff15 	stw	r2,-4(fp)
   4a02c:	00000306 	br	4a03c <alt_get_errno+0x48>
   4a030:	00900034 	movhi	r2,16384
   4a034:	10877c04 	addi	r2,r2,7664
   4a038:	e0bfff15 	stw	r2,-4(fp)
   4a03c:	e0bfff17 	ldw	r2,-4(fp)
}
   4a040:	e037883a 	mov	sp,fp
   4a044:	dfc00117 	ldw	ra,4(sp)
   4a048:	df000017 	ldw	fp,0(sp)
   4a04c:	dec00204 	addi	sp,sp,8
   4a050:	f800283a 	ret

0004a054 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   4a054:	defffc04 	addi	sp,sp,-16
   4a058:	df000315 	stw	fp,12(sp)
   4a05c:	df000304 	addi	fp,sp,12
   4a060:	e13ffd15 	stw	r4,-12(fp)
   4a064:	e17ffe15 	stw	r5,-8(fp)
   4a068:	e1bfff15 	stw	r6,-4(fp)
  return len;
   4a06c:	e0bfff17 	ldw	r2,-4(fp)
}
   4a070:	e037883a 	mov	sp,fp
   4a074:	df000017 	ldw	fp,0(sp)
   4a078:	dec00104 	addi	sp,sp,4
   4a07c:	f800283a 	ret

0004a080 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   4a080:	defff904 	addi	sp,sp,-28
   4a084:	dfc00615 	stw	ra,24(sp)
   4a088:	df000515 	stw	fp,20(sp)
   4a08c:	df000504 	addi	fp,sp,20
   4a090:	e13ffc15 	stw	r4,-16(fp)
   4a094:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4a098:	e0bffc17 	ldw	r2,-16(fp)
   4a09c:	1004803a 	cmplt	r2,r2,zero
   4a0a0:	1000081e 	bne	r2,zero,4a0c4 <fstat+0x44>
   4a0a4:	e0bffc17 	ldw	r2,-16(fp)
   4a0a8:	10800324 	muli	r2,r2,12
   4a0ac:	1007883a 	mov	r3,r2
   4a0b0:	00900034 	movhi	r2,16384
   4a0b4:	1082ee04 	addi	r2,r2,3000
   4a0b8:	1887883a 	add	r3,r3,r2
   4a0bc:	e0ffff15 	stw	r3,-4(fp)
   4a0c0:	00000106 	br	4a0c8 <fstat+0x48>
   4a0c4:	e03fff15 	stw	zero,-4(fp)
   4a0c8:	e0bfff17 	ldw	r2,-4(fp)
   4a0cc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   4a0d0:	e0bffb17 	ldw	r2,-20(fp)
   4a0d4:	1005003a 	cmpeq	r2,r2,zero
   4a0d8:	1000121e 	bne	r2,zero,4a124 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   4a0dc:	e0bffb17 	ldw	r2,-20(fp)
   4a0e0:	10800017 	ldw	r2,0(r2)
   4a0e4:	10800817 	ldw	r2,32(r2)
   4a0e8:	1005003a 	cmpeq	r2,r2,zero
   4a0ec:	1000081e 	bne	r2,zero,4a110 <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
   4a0f0:	e0bffb17 	ldw	r2,-20(fp)
   4a0f4:	10800017 	ldw	r2,0(r2)
   4a0f8:	10800817 	ldw	r2,32(r2)
   4a0fc:	e13ffb17 	ldw	r4,-20(fp)
   4a100:	e17ffd17 	ldw	r5,-12(fp)
   4a104:	103ee83a 	callr	r2
   4a108:	e0bffe15 	stw	r2,-8(fp)
   4a10c:	00000b06 	br	4a13c <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   4a110:	e0fffd17 	ldw	r3,-12(fp)
   4a114:	00880004 	movi	r2,8192
   4a118:	18800115 	stw	r2,4(r3)
      return 0;
   4a11c:	e03ffe15 	stw	zero,-8(fp)
   4a120:	00000606 	br	4a13c <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   4a124:	004a1540 	call	4a154 <alt_get_errno>
   4a128:	1007883a 	mov	r3,r2
   4a12c:	00801444 	movi	r2,81
   4a130:	18800015 	stw	r2,0(r3)
    return -1;
   4a134:	00bfffc4 	movi	r2,-1
   4a138:	e0bffe15 	stw	r2,-8(fp)
   4a13c:	e0bffe17 	ldw	r2,-8(fp)
  }
}
   4a140:	e037883a 	mov	sp,fp
   4a144:	dfc00117 	ldw	ra,4(sp)
   4a148:	df000017 	ldw	fp,0(sp)
   4a14c:	dec00204 	addi	sp,sp,8
   4a150:	f800283a 	ret

0004a154 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4a154:	defffd04 	addi	sp,sp,-12
   4a158:	dfc00215 	stw	ra,8(sp)
   4a15c:	df000115 	stw	fp,4(sp)
   4a160:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   4a164:	00900034 	movhi	r2,16384
   4a168:	10877104 	addi	r2,r2,7620
   4a16c:	10800017 	ldw	r2,0(r2)
   4a170:	1005003a 	cmpeq	r2,r2,zero
   4a174:	1000061e 	bne	r2,zero,4a190 <alt_get_errno+0x3c>
   4a178:	00900034 	movhi	r2,16384
   4a17c:	10877104 	addi	r2,r2,7620
   4a180:	10800017 	ldw	r2,0(r2)
   4a184:	103ee83a 	callr	r2
   4a188:	e0bfff15 	stw	r2,-4(fp)
   4a18c:	00000306 	br	4a19c <alt_get_errno+0x48>
   4a190:	00900034 	movhi	r2,16384
   4a194:	10877c04 	addi	r2,r2,7664
   4a198:	e0bfff15 	stw	r2,-4(fp)
   4a19c:	e0bfff17 	ldw	r2,-4(fp)
}
   4a1a0:	e037883a 	mov	sp,fp
   4a1a4:	dfc00117 	ldw	ra,4(sp)
   4a1a8:	df000017 	ldw	fp,0(sp)
   4a1ac:	dec00204 	addi	sp,sp,8
   4a1b0:	f800283a 	ret

0004a1b4 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   4a1b4:	deffeb04 	addi	sp,sp,-84
   4a1b8:	dfc01415 	stw	ra,80(sp)
   4a1bc:	df001315 	stw	fp,76(sp)
   4a1c0:	df001304 	addi	fp,sp,76
   4a1c4:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4a1c8:	e0bffd17 	ldw	r2,-12(fp)
   4a1cc:	1004803a 	cmplt	r2,r2,zero
   4a1d0:	1000081e 	bne	r2,zero,4a1f4 <isatty+0x40>
   4a1d4:	e0bffd17 	ldw	r2,-12(fp)
   4a1d8:	10800324 	muli	r2,r2,12
   4a1dc:	1007883a 	mov	r3,r2
   4a1e0:	00900034 	movhi	r2,16384
   4a1e4:	1082ee04 	addi	r2,r2,3000
   4a1e8:	1887883a 	add	r3,r3,r2
   4a1ec:	e0ffff15 	stw	r3,-4(fp)
   4a1f0:	00000106 	br	4a1f8 <isatty+0x44>
   4a1f4:	e03fff15 	stw	zero,-4(fp)
   4a1f8:	e0bfff17 	ldw	r2,-4(fp)
   4a1fc:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
   4a200:	e0bfed17 	ldw	r2,-76(fp)
   4a204:	1005003a 	cmpeq	r2,r2,zero
   4a208:	10000f1e 	bne	r2,zero,4a248 <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   4a20c:	e0bfed17 	ldw	r2,-76(fp)
   4a210:	10800017 	ldw	r2,0(r2)
   4a214:	10800817 	ldw	r2,32(r2)
   4a218:	1004c03a 	cmpne	r2,r2,zero
   4a21c:	1000031e 	bne	r2,zero,4a22c <isatty+0x78>
    {
      return 1;
   4a220:	00800044 	movi	r2,1
   4a224:	e0bffe15 	stw	r2,-8(fp)
   4a228:	00000c06 	br	4a25c <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   4a22c:	e17fee04 	addi	r5,fp,-72
   4a230:	e13ffd17 	ldw	r4,-12(fp)
   4a234:	004a0800 	call	4a080 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   4a238:	e0bfef17 	ldw	r2,-68(fp)
   4a23c:	10880020 	cmpeqi	r2,r2,8192
   4a240:	e0bffe15 	stw	r2,-8(fp)
   4a244:	00000506 	br	4a25c <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   4a248:	004a2740 	call	4a274 <alt_get_errno>
   4a24c:	1007883a 	mov	r3,r2
   4a250:	00801444 	movi	r2,81
   4a254:	18800015 	stw	r2,0(r3)
    return 0;
   4a258:	e03ffe15 	stw	zero,-8(fp)
   4a25c:	e0bffe17 	ldw	r2,-8(fp)
  }
}
   4a260:	e037883a 	mov	sp,fp
   4a264:	dfc00117 	ldw	ra,4(sp)
   4a268:	df000017 	ldw	fp,0(sp)
   4a26c:	dec00204 	addi	sp,sp,8
   4a270:	f800283a 	ret

0004a274 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4a274:	defffd04 	addi	sp,sp,-12
   4a278:	dfc00215 	stw	ra,8(sp)
   4a27c:	df000115 	stw	fp,4(sp)
   4a280:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   4a284:	00900034 	movhi	r2,16384
   4a288:	10877104 	addi	r2,r2,7620
   4a28c:	10800017 	ldw	r2,0(r2)
   4a290:	1005003a 	cmpeq	r2,r2,zero
   4a294:	1000061e 	bne	r2,zero,4a2b0 <alt_get_errno+0x3c>
   4a298:	00900034 	movhi	r2,16384
   4a29c:	10877104 	addi	r2,r2,7620
   4a2a0:	10800017 	ldw	r2,0(r2)
   4a2a4:	103ee83a 	callr	r2
   4a2a8:	e0bfff15 	stw	r2,-4(fp)
   4a2ac:	00000306 	br	4a2bc <alt_get_errno+0x48>
   4a2b0:	00900034 	movhi	r2,16384
   4a2b4:	10877c04 	addi	r2,r2,7664
   4a2b8:	e0bfff15 	stw	r2,-4(fp)
   4a2bc:	e0bfff17 	ldw	r2,-4(fp)
}
   4a2c0:	e037883a 	mov	sp,fp
   4a2c4:	dfc00117 	ldw	ra,4(sp)
   4a2c8:	df000017 	ldw	fp,0(sp)
   4a2cc:	dec00204 	addi	sp,sp,8
   4a2d0:	f800283a 	ret

0004a2d4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   4a2d4:	defffe04 	addi	sp,sp,-8
   4a2d8:	dfc00115 	stw	ra,4(sp)
   4a2dc:	df000015 	stw	fp,0(sp)
   4a2e0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   4a2e4:	01000174 	movhi	r4,5
   4a2e8:	2133cf04 	addi	r4,r4,-12484
   4a2ec:	01500034 	movhi	r5,16384
   4a2f0:	2940df04 	addi	r5,r5,892
   4a2f4:	01900034 	movhi	r6,16384
   4a2f8:	31877604 	addi	r6,r6,7640
   4a2fc:	004a3540 	call	4a354 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   4a300:	01000134 	movhi	r4,4
   4a304:	21000804 	addi	r4,r4,32
   4a308:	01400134 	movhi	r5,4
   4a30c:	29400804 	addi	r5,r5,32
   4a310:	01800134 	movhi	r6,4
   4a314:	31806d04 	addi	r6,r6,436
   4a318:	004a3540 	call	4a354 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   4a31c:	01000174 	movhi	r4,5
   4a320:	2132f004 	addi	r4,r4,-13376
   4a324:	01500034 	movhi	r5,16384
   4a328:	29400004 	addi	r5,r5,0
   4a32c:	01900034 	movhi	r6,16384
   4a330:	3180df04 	addi	r6,r6,892
   4a334:	004a3540 	call	4a354 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   4a338:	004b9d80 	call	4b9d8 <alt_dcache_flush_all>
  alt_icache_flush_all();
   4a33c:	004bbf80 	call	4bbf8 <alt_icache_flush_all>
}
   4a340:	e037883a 	mov	sp,fp
   4a344:	dfc00117 	ldw	ra,4(sp)
   4a348:	df000017 	ldw	fp,0(sp)
   4a34c:	dec00204 	addi	sp,sp,8
   4a350:	f800283a 	ret

0004a354 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   4a354:	defffc04 	addi	sp,sp,-16
   4a358:	df000315 	stw	fp,12(sp)
   4a35c:	df000304 	addi	fp,sp,12
   4a360:	e13ffd15 	stw	r4,-12(fp)
   4a364:	e17ffe15 	stw	r5,-8(fp)
   4a368:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   4a36c:	e0fffe17 	ldw	r3,-8(fp)
   4a370:	e0bffd17 	ldw	r2,-12(fp)
   4a374:	18800e26 	beq	r3,r2,4a3b0 <alt_load_section+0x5c>
  {
    while( to != end )
   4a378:	00000a06 	br	4a3a4 <alt_load_section+0x50>
    {
      *to++ = *from++;
   4a37c:	e0bffd17 	ldw	r2,-12(fp)
   4a380:	10c00017 	ldw	r3,0(r2)
   4a384:	e0bffe17 	ldw	r2,-8(fp)
   4a388:	10c00015 	stw	r3,0(r2)
   4a38c:	e0bffe17 	ldw	r2,-8(fp)
   4a390:	10800104 	addi	r2,r2,4
   4a394:	e0bffe15 	stw	r2,-8(fp)
   4a398:	e0bffd17 	ldw	r2,-12(fp)
   4a39c:	10800104 	addi	r2,r2,4
   4a3a0:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   4a3a4:	e0fffe17 	ldw	r3,-8(fp)
   4a3a8:	e0bfff17 	ldw	r2,-4(fp)
   4a3ac:	18bff31e 	bne	r3,r2,4a37c <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   4a3b0:	e037883a 	mov	sp,fp
   4a3b4:	df000017 	ldw	fp,0(sp)
   4a3b8:	dec00104 	addi	sp,sp,4
   4a3bc:	f800283a 	ret

0004a3c0 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   4a3c0:	defff804 	addi	sp,sp,-32
   4a3c4:	dfc00715 	stw	ra,28(sp)
   4a3c8:	df000615 	stw	fp,24(sp)
   4a3cc:	df000604 	addi	fp,sp,24
   4a3d0:	e13ffc15 	stw	r4,-16(fp)
   4a3d4:	e17ffd15 	stw	r5,-12(fp)
   4a3d8:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   4a3dc:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4a3e0:	e0bffc17 	ldw	r2,-16(fp)
   4a3e4:	1004803a 	cmplt	r2,r2,zero
   4a3e8:	1000081e 	bne	r2,zero,4a40c <lseek+0x4c>
   4a3ec:	e0bffc17 	ldw	r2,-16(fp)
   4a3f0:	10800324 	muli	r2,r2,12
   4a3f4:	1007883a 	mov	r3,r2
   4a3f8:	00900034 	movhi	r2,16384
   4a3fc:	1082ee04 	addi	r2,r2,3000
   4a400:	1887883a 	add	r3,r3,r2
   4a404:	e0ffff15 	stw	r3,-4(fp)
   4a408:	00000106 	br	4a410 <lseek+0x50>
   4a40c:	e03fff15 	stw	zero,-4(fp)
   4a410:	e0bfff17 	ldw	r2,-4(fp)
   4a414:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
   4a418:	e0bffb17 	ldw	r2,-20(fp)
   4a41c:	1005003a 	cmpeq	r2,r2,zero
   4a420:	1000111e 	bne	r2,zero,4a468 <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   4a424:	e0bffb17 	ldw	r2,-20(fp)
   4a428:	10800017 	ldw	r2,0(r2)
   4a42c:	10800717 	ldw	r2,28(r2)
   4a430:	1005003a 	cmpeq	r2,r2,zero
   4a434:	1000091e 	bne	r2,zero,4a45c <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   4a438:	e0bffb17 	ldw	r2,-20(fp)
   4a43c:	10800017 	ldw	r2,0(r2)
   4a440:	10800717 	ldw	r2,28(r2)
   4a444:	e13ffb17 	ldw	r4,-20(fp)
   4a448:	e17ffd17 	ldw	r5,-12(fp)
   4a44c:	e1bffe17 	ldw	r6,-8(fp)
   4a450:	103ee83a 	callr	r2
   4a454:	e0bffa15 	stw	r2,-24(fp)
   4a458:	00000506 	br	4a470 <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   4a45c:	00bfde84 	movi	r2,-134
   4a460:	e0bffa15 	stw	r2,-24(fp)
   4a464:	00000206 	br	4a470 <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
   4a468:	00bfebc4 	movi	r2,-81
   4a46c:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
   4a470:	e0bffa17 	ldw	r2,-24(fp)
   4a474:	1004403a 	cmpge	r2,r2,zero
   4a478:	1000071e 	bne	r2,zero,4a498 <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
   4a47c:	004a4b00 	call	4a4b0 <alt_get_errno>
   4a480:	1007883a 	mov	r3,r2
   4a484:	e0bffa17 	ldw	r2,-24(fp)
   4a488:	0085c83a 	sub	r2,zero,r2
   4a48c:	18800015 	stw	r2,0(r3)
    rc = -1;
   4a490:	00bfffc4 	movi	r2,-1
   4a494:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
   4a498:	e0bffa17 	ldw	r2,-24(fp)
}
   4a49c:	e037883a 	mov	sp,fp
   4a4a0:	dfc00117 	ldw	ra,4(sp)
   4a4a4:	df000017 	ldw	fp,0(sp)
   4a4a8:	dec00204 	addi	sp,sp,8
   4a4ac:	f800283a 	ret

0004a4b0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4a4b0:	defffd04 	addi	sp,sp,-12
   4a4b4:	dfc00215 	stw	ra,8(sp)
   4a4b8:	df000115 	stw	fp,4(sp)
   4a4bc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   4a4c0:	00900034 	movhi	r2,16384
   4a4c4:	10877104 	addi	r2,r2,7620
   4a4c8:	10800017 	ldw	r2,0(r2)
   4a4cc:	1005003a 	cmpeq	r2,r2,zero
   4a4d0:	1000061e 	bne	r2,zero,4a4ec <alt_get_errno+0x3c>
   4a4d4:	00900034 	movhi	r2,16384
   4a4d8:	10877104 	addi	r2,r2,7620
   4a4dc:	10800017 	ldw	r2,0(r2)
   4a4e0:	103ee83a 	callr	r2
   4a4e4:	e0bfff15 	stw	r2,-4(fp)
   4a4e8:	00000306 	br	4a4f8 <alt_get_errno+0x48>
   4a4ec:	00900034 	movhi	r2,16384
   4a4f0:	10877c04 	addi	r2,r2,7664
   4a4f4:	e0bfff15 	stw	r2,-4(fp)
   4a4f8:	e0bfff17 	ldw	r2,-4(fp)
}
   4a4fc:	e037883a 	mov	sp,fp
   4a500:	dfc00117 	ldw	ra,4(sp)
   4a504:	df000017 	ldw	fp,0(sp)
   4a508:	dec00204 	addi	sp,sp,8
   4a50c:	f800283a 	ret

0004a510 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   4a510:	defffd04 	addi	sp,sp,-12
   4a514:	dfc00215 	stw	ra,8(sp)
   4a518:	df000115 	stw	fp,4(sp)
   4a51c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   4a520:	0009883a 	mov	r4,zero
   4a524:	004a9d80 	call	4a9d8 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   4a528:	004aa0c0 	call	4aa0c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   4a52c:	01100034 	movhi	r4,16384
   4a530:	2100d704 	addi	r4,r4,860
   4a534:	01500034 	movhi	r5,16384
   4a538:	2940d704 	addi	r5,r5,860
   4a53c:	01900034 	movhi	r6,16384
   4a540:	3180d704 	addi	r6,r6,860
   4a544:	004bfb80 	call	4bfb8 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   4a548:	004bb300 	call	4bb30 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   4a54c:	01000174 	movhi	r4,5
   4a550:	212ee504 	addi	r4,r4,-17516
   4a554:	004c7b40 	call	4c7b4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   4a558:	d1201717 	ldw	r4,-32676(gp)
   4a55c:	d1601817 	ldw	r5,-32672(gp)
   4a560:	d1a01917 	ldw	r6,-32668(gp)
   4a564:	00407fc0 	call	407fc <main>
   4a568:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   4a56c:	01000044 	movi	r4,1
   4a570:	0049ef80 	call	49ef8 <close>
  exit (result);
   4a574:	e13fff17 	ldw	r4,-4(fp)
   4a578:	004c7c80 	call	4c7c8 <exit>

0004a57c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   4a57c:	defffe04 	addi	sp,sp,-8
   4a580:	df000115 	stw	fp,4(sp)
   4a584:	df000104 	addi	fp,sp,4
   4a588:	e13fff15 	stw	r4,-4(fp)
}
   4a58c:	e037883a 	mov	sp,fp
   4a590:	df000017 	ldw	fp,0(sp)
   4a594:	dec00104 	addi	sp,sp,4
   4a598:	f800283a 	ret

0004a59c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   4a59c:	defffe04 	addi	sp,sp,-8
   4a5a0:	df000115 	stw	fp,4(sp)
   4a5a4:	df000104 	addi	fp,sp,4
   4a5a8:	e13fff15 	stw	r4,-4(fp)
}
   4a5ac:	e037883a 	mov	sp,fp
   4a5b0:	df000017 	ldw	fp,0(sp)
   4a5b4:	dec00104 	addi	sp,sp,4
   4a5b8:	f800283a 	ret

0004a5bc <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   4a5bc:	defff704 	addi	sp,sp,-36
   4a5c0:	dfc00815 	stw	ra,32(sp)
   4a5c4:	df000715 	stw	fp,28(sp)
   4a5c8:	df000704 	addi	fp,sp,28
   4a5cc:	e13ffb15 	stw	r4,-20(fp)
   4a5d0:	e17ffc15 	stw	r5,-16(fp)
   4a5d4:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4a5d8:	e0bffb17 	ldw	r2,-20(fp)
   4a5dc:	1004803a 	cmplt	r2,r2,zero
   4a5e0:	1000081e 	bne	r2,zero,4a604 <read+0x48>
   4a5e4:	e0bffb17 	ldw	r2,-20(fp)
   4a5e8:	10800324 	muli	r2,r2,12
   4a5ec:	1007883a 	mov	r3,r2
   4a5f0:	00900034 	movhi	r2,16384
   4a5f4:	1082ee04 	addi	r2,r2,3000
   4a5f8:	1887883a 	add	r3,r3,r2
   4a5fc:	e0ffff15 	stw	r3,-4(fp)
   4a600:	00000106 	br	4a608 <read+0x4c>
   4a604:	e03fff15 	stw	zero,-4(fp)
   4a608:	e0bfff17 	ldw	r2,-4(fp)
   4a60c:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   4a610:	e0bffa17 	ldw	r2,-24(fp)
   4a614:	1005003a 	cmpeq	r2,r2,zero
   4a618:	1000241e 	bne	r2,zero,4a6ac <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   4a61c:	e0bffa17 	ldw	r2,-24(fp)
   4a620:	10800217 	ldw	r2,8(r2)
   4a624:	108000cc 	andi	r2,r2,3
   4a628:	10800060 	cmpeqi	r2,r2,1
   4a62c:	10001a1e 	bne	r2,zero,4a698 <read+0xdc>
   4a630:	e0bffa17 	ldw	r2,-24(fp)
   4a634:	10800017 	ldw	r2,0(r2)
   4a638:	10800517 	ldw	r2,20(r2)
   4a63c:	1005003a 	cmpeq	r2,r2,zero
   4a640:	1000151e 	bne	r2,zero,4a698 <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   4a644:	e0bffa17 	ldw	r2,-24(fp)
   4a648:	10800017 	ldw	r2,0(r2)
   4a64c:	10800517 	ldw	r2,20(r2)
   4a650:	e17ffc17 	ldw	r5,-16(fp)
   4a654:	e1bffd17 	ldw	r6,-12(fp)
   4a658:	e13ffa17 	ldw	r4,-24(fp)
   4a65c:	103ee83a 	callr	r2
   4a660:	e0bff915 	stw	r2,-28(fp)
   4a664:	e0bff917 	ldw	r2,-28(fp)
   4a668:	1004403a 	cmpge	r2,r2,zero
   4a66c:	1000071e 	bne	r2,zero,4a68c <read+0xd0>
        {
          ALT_ERRNO = -rval;
   4a670:	004a6dc0 	call	4a6dc <alt_get_errno>
   4a674:	e0fff917 	ldw	r3,-28(fp)
   4a678:	00c7c83a 	sub	r3,zero,r3
   4a67c:	10c00015 	stw	r3,0(r2)
          return -1;
   4a680:	00bfffc4 	movi	r2,-1
   4a684:	e0bffe15 	stw	r2,-8(fp)
   4a688:	00000e06 	br	4a6c4 <read+0x108>
        }
        return rval;
   4a68c:	e0bff917 	ldw	r2,-28(fp)
   4a690:	e0bffe15 	stw	r2,-8(fp)
   4a694:	00000b06 	br	4a6c4 <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
   4a698:	004a6dc0 	call	4a6dc <alt_get_errno>
   4a69c:	1007883a 	mov	r3,r2
   4a6a0:	00800344 	movi	r2,13
   4a6a4:	18800015 	stw	r2,0(r3)
   4a6a8:	00000406 	br	4a6bc <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   4a6ac:	004a6dc0 	call	4a6dc <alt_get_errno>
   4a6b0:	1007883a 	mov	r3,r2
   4a6b4:	00801444 	movi	r2,81
   4a6b8:	18800015 	stw	r2,0(r3)
  }
  return -1;
   4a6bc:	00bfffc4 	movi	r2,-1
   4a6c0:	e0bffe15 	stw	r2,-8(fp)
   4a6c4:	e0bffe17 	ldw	r2,-8(fp)
}
   4a6c8:	e037883a 	mov	sp,fp
   4a6cc:	dfc00117 	ldw	ra,4(sp)
   4a6d0:	df000017 	ldw	fp,0(sp)
   4a6d4:	dec00204 	addi	sp,sp,8
   4a6d8:	f800283a 	ret

0004a6dc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4a6dc:	defffd04 	addi	sp,sp,-12
   4a6e0:	dfc00215 	stw	ra,8(sp)
   4a6e4:	df000115 	stw	fp,4(sp)
   4a6e8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   4a6ec:	00900034 	movhi	r2,16384
   4a6f0:	10877104 	addi	r2,r2,7620
   4a6f4:	10800017 	ldw	r2,0(r2)
   4a6f8:	1005003a 	cmpeq	r2,r2,zero
   4a6fc:	1000061e 	bne	r2,zero,4a718 <alt_get_errno+0x3c>
   4a700:	00900034 	movhi	r2,16384
   4a704:	10877104 	addi	r2,r2,7620
   4a708:	10800017 	ldw	r2,0(r2)
   4a70c:	103ee83a 	callr	r2
   4a710:	e0bfff15 	stw	r2,-4(fp)
   4a714:	00000306 	br	4a724 <alt_get_errno+0x48>
   4a718:	00900034 	movhi	r2,16384
   4a71c:	10877c04 	addi	r2,r2,7664
   4a720:	e0bfff15 	stw	r2,-4(fp)
   4a724:	e0bfff17 	ldw	r2,-4(fp)
}
   4a728:	e037883a 	mov	sp,fp
   4a72c:	dfc00117 	ldw	ra,4(sp)
   4a730:	df000017 	ldw	fp,0(sp)
   4a734:	dec00204 	addi	sp,sp,8
   4a738:	f800283a 	ret

0004a73c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   4a73c:	defffe04 	addi	sp,sp,-8
   4a740:	df000115 	stw	fp,4(sp)
   4a744:	df000104 	addi	fp,sp,4
   4a748:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   4a74c:	e0bfff17 	ldw	r2,-4(fp)
   4a750:	108000d0 	cmplti	r2,r2,3
   4a754:	10000d1e 	bne	r2,zero,4a78c <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   4a758:	e0bfff17 	ldw	r2,-4(fp)
   4a75c:	00d00034 	movhi	r3,16384
   4a760:	18c2ee04 	addi	r3,r3,3000
   4a764:	10800324 	muli	r2,r2,12
   4a768:	10c5883a 	add	r2,r2,r3
   4a76c:	10800204 	addi	r2,r2,8
   4a770:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   4a774:	e0bfff17 	ldw	r2,-4(fp)
   4a778:	00d00034 	movhi	r3,16384
   4a77c:	18c2ee04 	addi	r3,r3,3000
   4a780:	10800324 	muli	r2,r2,12
   4a784:	10c5883a 	add	r2,r2,r3
   4a788:	10000015 	stw	zero,0(r2)
  }
}
   4a78c:	e037883a 	mov	sp,fp
   4a790:	df000017 	ldw	fp,0(sp)
   4a794:	dec00104 	addi	sp,sp,4
   4a798:	f800283a 	ret

0004a79c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   4a79c:	defff804 	addi	sp,sp,-32
   4a7a0:	df000715 	stw	fp,28(sp)
   4a7a4:	df000704 	addi	fp,sp,28
   4a7a8:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4a7ac:	0005303a 	rdctl	r2,status
   4a7b0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4a7b4:	e0fffb17 	ldw	r3,-20(fp)
   4a7b8:	00bfff84 	movi	r2,-2
   4a7bc:	1884703a 	and	r2,r3,r2
   4a7c0:	1001703a 	wrctl	status,r2
  
  return context;
   4a7c4:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   4a7c8:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   4a7cc:	d0a00c17 	ldw	r2,-32720(gp)
   4a7d0:	10c000c4 	addi	r3,r2,3
   4a7d4:	00bfff04 	movi	r2,-4
   4a7d8:	1884703a 	and	r2,r3,r2
   4a7dc:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   4a7e0:	d0e00c17 	ldw	r3,-32720(gp)
   4a7e4:	e0bffe17 	ldw	r2,-8(fp)
   4a7e8:	1887883a 	add	r3,r3,r2
   4a7ec:	00a00034 	movhi	r2,32768
   4a7f0:	10800004 	addi	r2,r2,0
   4a7f4:	10c0072e 	bgeu	r2,r3,4a814 <sbrk+0x78>
   4a7f8:	e0bffd17 	ldw	r2,-12(fp)
   4a7fc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4a800:	e0bffa17 	ldw	r2,-24(fp)
   4a804:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   4a808:	00bfffc4 	movi	r2,-1
   4a80c:	e0bfff15 	stw	r2,-4(fp)
   4a810:	00000c06 	br	4a844 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
   4a814:	d0a00c17 	ldw	r2,-32720(gp)
   4a818:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
   4a81c:	d0e00c17 	ldw	r3,-32720(gp)
   4a820:	e0bffe17 	ldw	r2,-8(fp)
   4a824:	1885883a 	add	r2,r3,r2
   4a828:	d0a00c15 	stw	r2,-32720(gp)
   4a82c:	e0bffd17 	ldw	r2,-12(fp)
   4a830:	e0bff915 	stw	r2,-28(fp)
   4a834:	e0bff917 	ldw	r2,-28(fp)
   4a838:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   4a83c:	e0bffc17 	ldw	r2,-16(fp)
   4a840:	e0bfff15 	stw	r2,-4(fp)
   4a844:	e0bfff17 	ldw	r2,-4(fp)
} 
   4a848:	e037883a 	mov	sp,fp
   4a84c:	df000017 	ldw	fp,0(sp)
   4a850:	dec00104 	addi	sp,sp,4
   4a854:	f800283a 	ret

0004a858 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   4a858:	defff704 	addi	sp,sp,-36
   4a85c:	dfc00815 	stw	ra,32(sp)
   4a860:	df000715 	stw	fp,28(sp)
   4a864:	df000704 	addi	fp,sp,28
   4a868:	e13ffb15 	stw	r4,-20(fp)
   4a86c:	e17ffc15 	stw	r5,-16(fp)
   4a870:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4a874:	e0bffb17 	ldw	r2,-20(fp)
   4a878:	1004803a 	cmplt	r2,r2,zero
   4a87c:	1000081e 	bne	r2,zero,4a8a0 <write+0x48>
   4a880:	e0bffb17 	ldw	r2,-20(fp)
   4a884:	10800324 	muli	r2,r2,12
   4a888:	1007883a 	mov	r3,r2
   4a88c:	00900034 	movhi	r2,16384
   4a890:	1082ee04 	addi	r2,r2,3000
   4a894:	1887883a 	add	r3,r3,r2
   4a898:	e0ffff15 	stw	r3,-4(fp)
   4a89c:	00000106 	br	4a8a4 <write+0x4c>
   4a8a0:	e03fff15 	stw	zero,-4(fp)
   4a8a4:	e0bfff17 	ldw	r2,-4(fp)
   4a8a8:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   4a8ac:	e0bffa17 	ldw	r2,-24(fp)
   4a8b0:	1005003a 	cmpeq	r2,r2,zero
   4a8b4:	1000241e 	bne	r2,zero,4a948 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   4a8b8:	e0bffa17 	ldw	r2,-24(fp)
   4a8bc:	10800217 	ldw	r2,8(r2)
   4a8c0:	108000cc 	andi	r2,r2,3
   4a8c4:	1005003a 	cmpeq	r2,r2,zero
   4a8c8:	10001a1e 	bne	r2,zero,4a934 <write+0xdc>
   4a8cc:	e0bffa17 	ldw	r2,-24(fp)
   4a8d0:	10800017 	ldw	r2,0(r2)
   4a8d4:	10800617 	ldw	r2,24(r2)
   4a8d8:	1005003a 	cmpeq	r2,r2,zero
   4a8dc:	1000151e 	bne	r2,zero,4a934 <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   4a8e0:	e0bffa17 	ldw	r2,-24(fp)
   4a8e4:	10800017 	ldw	r2,0(r2)
   4a8e8:	10800617 	ldw	r2,24(r2)
   4a8ec:	e17ffc17 	ldw	r5,-16(fp)
   4a8f0:	e1bffd17 	ldw	r6,-12(fp)
   4a8f4:	e13ffa17 	ldw	r4,-24(fp)
   4a8f8:	103ee83a 	callr	r2
   4a8fc:	e0bff915 	stw	r2,-28(fp)
   4a900:	e0bff917 	ldw	r2,-28(fp)
   4a904:	1004403a 	cmpge	r2,r2,zero
   4a908:	1000071e 	bne	r2,zero,4a928 <write+0xd0>
      {
        ALT_ERRNO = -rval;
   4a90c:	004a9780 	call	4a978 <alt_get_errno>
   4a910:	e0fff917 	ldw	r3,-28(fp)
   4a914:	00c7c83a 	sub	r3,zero,r3
   4a918:	10c00015 	stw	r3,0(r2)
        return -1;
   4a91c:	00bfffc4 	movi	r2,-1
   4a920:	e0bffe15 	stw	r2,-8(fp)
   4a924:	00000e06 	br	4a960 <write+0x108>
      }
      return rval;
   4a928:	e0bff917 	ldw	r2,-28(fp)
   4a92c:	e0bffe15 	stw	r2,-8(fp)
   4a930:	00000b06 	br	4a960 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
   4a934:	004a9780 	call	4a978 <alt_get_errno>
   4a938:	1007883a 	mov	r3,r2
   4a93c:	00800344 	movi	r2,13
   4a940:	18800015 	stw	r2,0(r3)
   4a944:	00000406 	br	4a958 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   4a948:	004a9780 	call	4a978 <alt_get_errno>
   4a94c:	1007883a 	mov	r3,r2
   4a950:	00801444 	movi	r2,81
   4a954:	18800015 	stw	r2,0(r3)
  }
  return -1;
   4a958:	00bfffc4 	movi	r2,-1
   4a95c:	e0bffe15 	stw	r2,-8(fp)
   4a960:	e0bffe17 	ldw	r2,-8(fp)
}
   4a964:	e037883a 	mov	sp,fp
   4a968:	dfc00117 	ldw	ra,4(sp)
   4a96c:	df000017 	ldw	fp,0(sp)
   4a970:	dec00204 	addi	sp,sp,8
   4a974:	f800283a 	ret

0004a978 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4a978:	defffd04 	addi	sp,sp,-12
   4a97c:	dfc00215 	stw	ra,8(sp)
   4a980:	df000115 	stw	fp,4(sp)
   4a984:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   4a988:	00900034 	movhi	r2,16384
   4a98c:	10877104 	addi	r2,r2,7620
   4a990:	10800017 	ldw	r2,0(r2)
   4a994:	1005003a 	cmpeq	r2,r2,zero
   4a998:	1000061e 	bne	r2,zero,4a9b4 <alt_get_errno+0x3c>
   4a99c:	00900034 	movhi	r2,16384
   4a9a0:	10877104 	addi	r2,r2,7620
   4a9a4:	10800017 	ldw	r2,0(r2)
   4a9a8:	103ee83a 	callr	r2
   4a9ac:	e0bfff15 	stw	r2,-4(fp)
   4a9b0:	00000306 	br	4a9c0 <alt_get_errno+0x48>
   4a9b4:	00900034 	movhi	r2,16384
   4a9b8:	10877c04 	addi	r2,r2,7664
   4a9bc:	e0bfff15 	stw	r2,-4(fp)
   4a9c0:	e0bfff17 	ldw	r2,-4(fp)
}
   4a9c4:	e037883a 	mov	sp,fp
   4a9c8:	dfc00117 	ldw	ra,4(sp)
   4a9cc:	df000017 	ldw	fp,0(sp)
   4a9d0:	dec00204 	addi	sp,sp,8
   4a9d4:	f800283a 	ret

0004a9d8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   4a9d8:	defffd04 	addi	sp,sp,-12
   4a9dc:	dfc00215 	stw	ra,8(sp)
   4a9e0:	df000115 	stw	fp,4(sp)
   4a9e4:	df000104 	addi	fp,sp,4
   4a9e8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS, nios2_qsys);
   4a9ec:	004c4980 	call	4c498 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   4a9f0:	00800044 	movi	r2,1
   4a9f4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   4a9f8:	e037883a 	mov	sp,fp
   4a9fc:	dfc00117 	ldw	ra,4(sp)
   4aa00:	df000017 	ldw	fp,0(sp)
   4aa04:	dec00204 	addi	sp,sp,8
   4aa08:	f800283a 	ret

0004aa0c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   4aa0c:	defffe04 	addi	sp,sp,-8
   4aa10:	dfc00115 	stw	ra,4(sp)
   4aa14:	df000015 	stw	fp,0(sp)
   4aa18:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
   4aa1c:	01004034 	movhi	r4,256
   4aa20:	21001004 	addi	r4,r4,64
   4aa24:	000b883a 	mov	r5,zero
   4aa28:	01800044 	movi	r6,1
   4aa2c:	01c0fa04 	movi	r7,1000
   4aa30:	004b7f40 	call	4b7f4 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   4aa34:	01100034 	movhi	r4,16384
   4aa38:	21035804 	addi	r4,r4,3424
   4aa3c:	000b883a 	mov	r5,zero
   4aa40:	000d883a 	mov	r6,zero
   4aa44:	004abe80 	call	4abe8 <altera_avalon_jtag_uart_init>
   4aa48:	01100034 	movhi	r4,16384
   4aa4c:	21034e04 	addi	r4,r4,3384
   4aa50:	004aa680 	call	4aa68 <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SPI_1, spi_1);
    ALTERA_AVALON_SPI_INIT ( SPI_2, spi_2);
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
}
   4aa54:	e037883a 	mov	sp,fp
   4aa58:	dfc00117 	ldw	ra,4(sp)
   4aa5c:	df000017 	ldw	fp,0(sp)
   4aa60:	dec00204 	addi	sp,sp,8
   4aa64:	f800283a 	ret

0004aa68 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   4aa68:	defffd04 	addi	sp,sp,-12
   4aa6c:	dfc00215 	stw	ra,8(sp)
   4aa70:	df000115 	stw	fp,4(sp)
   4aa74:	df000104 	addi	fp,sp,4
   4aa78:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   4aa7c:	e13fff17 	ldw	r4,-4(fp)
   4aa80:	01500034 	movhi	r5,16384
   4aa84:	29476e04 	addi	r5,r5,7608
   4aa88:	004ba1c0 	call	4ba1c <alt_dev_llist_insert>
}
   4aa8c:	e037883a 	mov	sp,fp
   4aa90:	dfc00117 	ldw	ra,4(sp)
   4aa94:	df000017 	ldw	fp,0(sp)
   4aa98:	dec00204 	addi	sp,sp,8
   4aa9c:	f800283a 	ret

0004aaa0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   4aaa0:	defffa04 	addi	sp,sp,-24
   4aaa4:	dfc00515 	stw	ra,20(sp)
   4aaa8:	df000415 	stw	fp,16(sp)
   4aaac:	df000404 	addi	fp,sp,16
   4aab0:	e13ffd15 	stw	r4,-12(fp)
   4aab4:	e17ffe15 	stw	r5,-8(fp)
   4aab8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   4aabc:	e0bffd17 	ldw	r2,-12(fp)
   4aac0:	10800017 	ldw	r2,0(r2)
   4aac4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   4aac8:	e0bffc17 	ldw	r2,-16(fp)
   4aacc:	11000a04 	addi	r4,r2,40
   4aad0:	e0bffd17 	ldw	r2,-12(fp)
   4aad4:	11c00217 	ldw	r7,8(r2)
   4aad8:	e17ffe17 	ldw	r5,-8(fp)
   4aadc:	e1bfff17 	ldw	r6,-4(fp)
   4aae0:	004b0e80 	call	4b0e8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   4aae4:	e037883a 	mov	sp,fp
   4aae8:	dfc00117 	ldw	ra,4(sp)
   4aaec:	df000017 	ldw	fp,0(sp)
   4aaf0:	dec00204 	addi	sp,sp,8
   4aaf4:	f800283a 	ret

0004aaf8 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   4aaf8:	defffa04 	addi	sp,sp,-24
   4aafc:	dfc00515 	stw	ra,20(sp)
   4ab00:	df000415 	stw	fp,16(sp)
   4ab04:	df000404 	addi	fp,sp,16
   4ab08:	e13ffd15 	stw	r4,-12(fp)
   4ab0c:	e17ffe15 	stw	r5,-8(fp)
   4ab10:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   4ab14:	e0bffd17 	ldw	r2,-12(fp)
   4ab18:	10800017 	ldw	r2,0(r2)
   4ab1c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   4ab20:	e0bffc17 	ldw	r2,-16(fp)
   4ab24:	11000a04 	addi	r4,r2,40
   4ab28:	e0bffd17 	ldw	r2,-12(fp)
   4ab2c:	11c00217 	ldw	r7,8(r2)
   4ab30:	e17ffe17 	ldw	r5,-8(fp)
   4ab34:	e1bfff17 	ldw	r6,-4(fp)
   4ab38:	004b30c0 	call	4b30c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   4ab3c:	e037883a 	mov	sp,fp
   4ab40:	dfc00117 	ldw	ra,4(sp)
   4ab44:	df000017 	ldw	fp,0(sp)
   4ab48:	dec00204 	addi	sp,sp,8
   4ab4c:	f800283a 	ret

0004ab50 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   4ab50:	defffc04 	addi	sp,sp,-16
   4ab54:	dfc00315 	stw	ra,12(sp)
   4ab58:	df000215 	stw	fp,8(sp)
   4ab5c:	df000204 	addi	fp,sp,8
   4ab60:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   4ab64:	e0bfff17 	ldw	r2,-4(fp)
   4ab68:	10800017 	ldw	r2,0(r2)
   4ab6c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   4ab70:	e0bffe17 	ldw	r2,-8(fp)
   4ab74:	11000a04 	addi	r4,r2,40
   4ab78:	e0bfff17 	ldw	r2,-4(fp)
   4ab7c:	11400217 	ldw	r5,8(r2)
   4ab80:	004af800 	call	4af80 <altera_avalon_jtag_uart_close>
}
   4ab84:	e037883a 	mov	sp,fp
   4ab88:	dfc00117 	ldw	ra,4(sp)
   4ab8c:	df000017 	ldw	fp,0(sp)
   4ab90:	dec00204 	addi	sp,sp,8
   4ab94:	f800283a 	ret

0004ab98 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   4ab98:	defffa04 	addi	sp,sp,-24
   4ab9c:	dfc00515 	stw	ra,20(sp)
   4aba0:	df000415 	stw	fp,16(sp)
   4aba4:	df000404 	addi	fp,sp,16
   4aba8:	e13ffd15 	stw	r4,-12(fp)
   4abac:	e17ffe15 	stw	r5,-8(fp)
   4abb0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   4abb4:	e0bffd17 	ldw	r2,-12(fp)
   4abb8:	10800017 	ldw	r2,0(r2)
   4abbc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   4abc0:	e0bffc17 	ldw	r2,-16(fp)
   4abc4:	11000a04 	addi	r4,r2,40
   4abc8:	e17ffe17 	ldw	r5,-8(fp)
   4abcc:	e1bfff17 	ldw	r6,-4(fp)
   4abd0:	004aff40 	call	4aff4 <altera_avalon_jtag_uart_ioctl>
}
   4abd4:	e037883a 	mov	sp,fp
   4abd8:	dfc00117 	ldw	ra,4(sp)
   4abdc:	df000017 	ldw	fp,0(sp)
   4abe0:	dec00204 	addi	sp,sp,8
   4abe4:	f800283a 	ret

0004abe8 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   4abe8:	defffa04 	addi	sp,sp,-24
   4abec:	dfc00515 	stw	ra,20(sp)
   4abf0:	df000415 	stw	fp,16(sp)
   4abf4:	df000404 	addi	fp,sp,16
   4abf8:	e13ffd15 	stw	r4,-12(fp)
   4abfc:	e17ffe15 	stw	r5,-8(fp)
   4ac00:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   4ac04:	e0fffd17 	ldw	r3,-12(fp)
   4ac08:	00800044 	movi	r2,1
   4ac0c:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   4ac10:	e0bffd17 	ldw	r2,-12(fp)
   4ac14:	10800017 	ldw	r2,0(r2)
   4ac18:	11000104 	addi	r4,r2,4
   4ac1c:	e0bffd17 	ldw	r2,-12(fp)
   4ac20:	10800817 	ldw	r2,32(r2)
   4ac24:	1007883a 	mov	r3,r2
   4ac28:	2005883a 	mov	r2,r4
   4ac2c:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   4ac30:	e13ffe17 	ldw	r4,-8(fp)
   4ac34:	e17fff17 	ldw	r5,-4(fp)
   4ac38:	d8000015 	stw	zero,0(sp)
   4ac3c:	01800174 	movhi	r6,5
   4ac40:	31ab2a04 	addi	r6,r6,-21336
   4ac44:	e1fffd17 	ldw	r7,-12(fp)
   4ac48:	004bc280 	call	4bc28 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   4ac4c:	e0bffd17 	ldw	r2,-12(fp)
   4ac50:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   4ac54:	e0bffd17 	ldw	r2,-12(fp)
   4ac58:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   4ac5c:	00900034 	movhi	r2,16384
   4ac60:	10878104 	addi	r2,r2,7684
   4ac64:	10800017 	ldw	r2,0(r2)
   4ac68:	100b883a 	mov	r5,r2
   4ac6c:	01800174 	movhi	r6,5
   4ac70:	31abb404 	addi	r6,r6,-20784
   4ac74:	e1fffd17 	ldw	r7,-12(fp)
   4ac78:	004b8840 	call	4b884 <alt_alarm_start>
   4ac7c:	1004403a 	cmpge	r2,r2,zero
   4ac80:	1000041e 	bne	r2,zero,4ac94 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   4ac84:	e0fffd17 	ldw	r3,-12(fp)
   4ac88:	00a00034 	movhi	r2,32768
   4ac8c:	10bfffc4 	addi	r2,r2,-1
   4ac90:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   4ac94:	e037883a 	mov	sp,fp
   4ac98:	dfc00117 	ldw	ra,4(sp)
   4ac9c:	df000017 	ldw	fp,0(sp)
   4aca0:	dec00204 	addi	sp,sp,8
   4aca4:	f800283a 	ret

0004aca8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   4aca8:	defff804 	addi	sp,sp,-32
   4acac:	df000715 	stw	fp,28(sp)
   4acb0:	df000704 	addi	fp,sp,28
   4acb4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   4acb8:	e0bfff17 	ldw	r2,-4(fp)
   4acbc:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
   4acc0:	e0bffe17 	ldw	r2,-8(fp)
   4acc4:	10800017 	ldw	r2,0(r2)
   4acc8:	e0bffd15 	stw	r2,-12(fp)
   4accc:	00000006 	br	4acd0 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   4acd0:	e0bffd17 	ldw	r2,-12(fp)
   4acd4:	10800104 	addi	r2,r2,4
   4acd8:	10800037 	ldwio	r2,0(r2)
   4acdc:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   4ace0:	e0bffc17 	ldw	r2,-16(fp)
   4ace4:	1080c00c 	andi	r2,r2,768
   4ace8:	1005003a 	cmpeq	r2,r2,zero
   4acec:	1000741e 	bne	r2,zero,4aec0 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   4acf0:	e0bffc17 	ldw	r2,-16(fp)
   4acf4:	1080400c 	andi	r2,r2,256
   4acf8:	1005003a 	cmpeq	r2,r2,zero
   4acfc:	1000351e 	bne	r2,zero,4add4 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   4ad00:	00800074 	movhi	r2,1
   4ad04:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4ad08:	e0bffe17 	ldw	r2,-8(fp)
   4ad0c:	10800a17 	ldw	r2,40(r2)
   4ad10:	10800044 	addi	r2,r2,1
   4ad14:	1081ffcc 	andi	r2,r2,2047
   4ad18:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
   4ad1c:	e0bffe17 	ldw	r2,-8(fp)
   4ad20:	10c00b17 	ldw	r3,44(r2)
   4ad24:	e0bffa17 	ldw	r2,-24(fp)
   4ad28:	18801626 	beq	r3,r2,4ad84 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   4ad2c:	e0bffd17 	ldw	r2,-12(fp)
   4ad30:	10800037 	ldwio	r2,0(r2)
   4ad34:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   4ad38:	e0bffb17 	ldw	r2,-20(fp)
   4ad3c:	10a0000c 	andi	r2,r2,32768
   4ad40:	1005003a 	cmpeq	r2,r2,zero
   4ad44:	10000f1e 	bne	r2,zero,4ad84 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   4ad48:	e0bffe17 	ldw	r2,-8(fp)
   4ad4c:	10c00a17 	ldw	r3,40(r2)
   4ad50:	e0bffb17 	ldw	r2,-20(fp)
   4ad54:	1009883a 	mov	r4,r2
   4ad58:	e0bffe17 	ldw	r2,-8(fp)
   4ad5c:	1885883a 	add	r2,r3,r2
   4ad60:	10800e04 	addi	r2,r2,56
   4ad64:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4ad68:	e0bffe17 	ldw	r2,-8(fp)
   4ad6c:	10800a17 	ldw	r2,40(r2)
   4ad70:	10800044 	addi	r2,r2,1
   4ad74:	10c1ffcc 	andi	r3,r2,2047
   4ad78:	e0bffe17 	ldw	r2,-8(fp)
   4ad7c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   4ad80:	003fe106 	br	4ad08 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   4ad84:	e0bffb17 	ldw	r2,-20(fp)
   4ad88:	10bfffec 	andhi	r2,r2,65535
   4ad8c:	1005003a 	cmpeq	r2,r2,zero
   4ad90:	1000101e 	bne	r2,zero,4add4 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   4ad94:	e0bffe17 	ldw	r2,-8(fp)
   4ad98:	10c00817 	ldw	r3,32(r2)
   4ad9c:	00bfff84 	movi	r2,-2
   4ada0:	1886703a 	and	r3,r3,r2
   4ada4:	e0bffe17 	ldw	r2,-8(fp)
   4ada8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   4adac:	e0bffd17 	ldw	r2,-12(fp)
   4adb0:	11000104 	addi	r4,r2,4
   4adb4:	e0bffe17 	ldw	r2,-8(fp)
   4adb8:	10800817 	ldw	r2,32(r2)
   4adbc:	1007883a 	mov	r3,r2
   4adc0:	2005883a 	mov	r2,r4
   4adc4:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   4adc8:	e0bffd17 	ldw	r2,-12(fp)
   4adcc:	10800104 	addi	r2,r2,4
   4add0:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   4add4:	e0bffc17 	ldw	r2,-16(fp)
   4add8:	1080800c 	andi	r2,r2,512
   4addc:	1005003a 	cmpeq	r2,r2,zero
   4ade0:	103fbb1e 	bne	r2,zero,4acd0 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   4ade4:	e0bffc17 	ldw	r2,-16(fp)
   4ade8:	10bfffec 	andhi	r2,r2,65535
   4adec:	1004d43a 	srli	r2,r2,16
   4adf0:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   4adf4:	00001506 	br	4ae4c <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   4adf8:	e13ffd17 	ldw	r4,-12(fp)
   4adfc:	e0bffe17 	ldw	r2,-8(fp)
   4ae00:	10c00d17 	ldw	r3,52(r2)
   4ae04:	e0bffe17 	ldw	r2,-8(fp)
   4ae08:	1885883a 	add	r2,r3,r2
   4ae0c:	10820e04 	addi	r2,r2,2104
   4ae10:	10800003 	ldbu	r2,0(r2)
   4ae14:	10c03fcc 	andi	r3,r2,255
   4ae18:	18c0201c 	xori	r3,r3,128
   4ae1c:	18ffe004 	addi	r3,r3,-128
   4ae20:	2005883a 	mov	r2,r4
   4ae24:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4ae28:	e0bffe17 	ldw	r2,-8(fp)
   4ae2c:	10800d17 	ldw	r2,52(r2)
   4ae30:	10800044 	addi	r2,r2,1
   4ae34:	10c1ffcc 	andi	r3,r2,2047
   4ae38:	e0bffe17 	ldw	r2,-8(fp)
   4ae3c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   4ae40:	e0bff917 	ldw	r2,-28(fp)
   4ae44:	10bfffc4 	addi	r2,r2,-1
   4ae48:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   4ae4c:	e0bff917 	ldw	r2,-28(fp)
   4ae50:	1005003a 	cmpeq	r2,r2,zero
   4ae54:	1000051e 	bne	r2,zero,4ae6c <altera_avalon_jtag_uart_irq+0x1c4>
   4ae58:	e0bffe17 	ldw	r2,-8(fp)
   4ae5c:	10c00d17 	ldw	r3,52(r2)
   4ae60:	e0bffe17 	ldw	r2,-8(fp)
   4ae64:	10800c17 	ldw	r2,48(r2)
   4ae68:	18bfe31e 	bne	r3,r2,4adf8 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   4ae6c:	e0bff917 	ldw	r2,-28(fp)
   4ae70:	1005003a 	cmpeq	r2,r2,zero
   4ae74:	103f961e 	bne	r2,zero,4acd0 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   4ae78:	e0bffe17 	ldw	r2,-8(fp)
   4ae7c:	10c00817 	ldw	r3,32(r2)
   4ae80:	00bfff44 	movi	r2,-3
   4ae84:	1886703a 	and	r3,r3,r2
   4ae88:	e0bffe17 	ldw	r2,-8(fp)
   4ae8c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   4ae90:	e0bffe17 	ldw	r2,-8(fp)
   4ae94:	10800017 	ldw	r2,0(r2)
   4ae98:	11000104 	addi	r4,r2,4
   4ae9c:	e0bffe17 	ldw	r2,-8(fp)
   4aea0:	10800817 	ldw	r2,32(r2)
   4aea4:	1007883a 	mov	r3,r2
   4aea8:	2005883a 	mov	r2,r4
   4aeac:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   4aeb0:	e0bffd17 	ldw	r2,-12(fp)
   4aeb4:	10800104 	addi	r2,r2,4
   4aeb8:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   4aebc:	003f8406 	br	4acd0 <altera_avalon_jtag_uart_irq+0x28>
}
   4aec0:	e037883a 	mov	sp,fp
   4aec4:	df000017 	ldw	fp,0(sp)
   4aec8:	dec00104 	addi	sp,sp,4
   4aecc:	f800283a 	ret

0004aed0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   4aed0:	defffc04 	addi	sp,sp,-16
   4aed4:	df000315 	stw	fp,12(sp)
   4aed8:	df000304 	addi	fp,sp,12
   4aedc:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   4aee0:	e0bfff17 	ldw	r2,-4(fp)
   4aee4:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   4aee8:	e0bffe17 	ldw	r2,-8(fp)
   4aeec:	10800017 	ldw	r2,0(r2)
   4aef0:	10800104 	addi	r2,r2,4
   4aef4:	10800037 	ldwio	r2,0(r2)
   4aef8:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   4aefc:	e0bffd17 	ldw	r2,-12(fp)
   4af00:	1081000c 	andi	r2,r2,1024
   4af04:	1005003a 	cmpeq	r2,r2,zero
   4af08:	10000c1e 	bne	r2,zero,4af3c <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   4af0c:	e0bffe17 	ldw	r2,-8(fp)
   4af10:	10800017 	ldw	r2,0(r2)
   4af14:	11000104 	addi	r4,r2,4
   4af18:	e0bffe17 	ldw	r2,-8(fp)
   4af1c:	10800817 	ldw	r2,32(r2)
   4af20:	10810014 	ori	r2,r2,1024
   4af24:	1007883a 	mov	r3,r2
   4af28:	2005883a 	mov	r2,r4
   4af2c:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
   4af30:	e0bffe17 	ldw	r2,-8(fp)
   4af34:	10000915 	stw	zero,36(r2)
   4af38:	00000a06 	br	4af64 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   4af3c:	e0bffe17 	ldw	r2,-8(fp)
   4af40:	10c00917 	ldw	r3,36(r2)
   4af44:	00a00034 	movhi	r2,32768
   4af48:	10bfff04 	addi	r2,r2,-4
   4af4c:	10c00536 	bltu	r2,r3,4af64 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
   4af50:	e0bffe17 	ldw	r2,-8(fp)
   4af54:	10800917 	ldw	r2,36(r2)
   4af58:	10c00044 	addi	r3,r2,1
   4af5c:	e0bffe17 	ldw	r2,-8(fp)
   4af60:	10c00915 	stw	r3,36(r2)
   4af64:	00900034 	movhi	r2,16384
   4af68:	10878104 	addi	r2,r2,7684
   4af6c:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   4af70:	e037883a 	mov	sp,fp
   4af74:	df000017 	ldw	fp,0(sp)
   4af78:	dec00104 	addi	sp,sp,4
   4af7c:	f800283a 	ret

0004af80 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   4af80:	defffc04 	addi	sp,sp,-16
   4af84:	df000315 	stw	fp,12(sp)
   4af88:	df000304 	addi	fp,sp,12
   4af8c:	e13ffd15 	stw	r4,-12(fp)
   4af90:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   4af94:	00000706 	br	4afb4 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
   4af98:	e0bffe17 	ldw	r2,-8(fp)
   4af9c:	1090000c 	andi	r2,r2,16384
   4afa0:	1005003a 	cmpeq	r2,r2,zero
   4afa4:	1000031e 	bne	r2,zero,4afb4 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
   4afa8:	00bffd44 	movi	r2,-11
   4afac:	e0bfff15 	stw	r2,-4(fp)
   4afb0:	00000b06 	br	4afe0 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   4afb4:	e0bffd17 	ldw	r2,-12(fp)
   4afb8:	10c00d17 	ldw	r3,52(r2)
   4afbc:	e0bffd17 	ldw	r2,-12(fp)
   4afc0:	10800c17 	ldw	r2,48(r2)
   4afc4:	18800526 	beq	r3,r2,4afdc <altera_avalon_jtag_uart_close+0x5c>
   4afc8:	e0bffd17 	ldw	r2,-12(fp)
   4afcc:	10c00917 	ldw	r3,36(r2)
   4afd0:	e0bffd17 	ldw	r2,-12(fp)
   4afd4:	10800117 	ldw	r2,4(r2)
   4afd8:	18bfef36 	bltu	r3,r2,4af98 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   4afdc:	e03fff15 	stw	zero,-4(fp)
   4afe0:	e0bfff17 	ldw	r2,-4(fp)
}
   4afe4:	e037883a 	mov	sp,fp
   4afe8:	df000017 	ldw	fp,0(sp)
   4afec:	dec00104 	addi	sp,sp,4
   4aff0:	f800283a 	ret

0004aff4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   4aff4:	defff804 	addi	sp,sp,-32
   4aff8:	df000715 	stw	fp,28(sp)
   4affc:	df000704 	addi	fp,sp,28
   4b000:	e13ffb15 	stw	r4,-20(fp)
   4b004:	e17ffc15 	stw	r5,-16(fp)
   4b008:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
   4b00c:	00bff9c4 	movi	r2,-25
   4b010:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
   4b014:	e0bffc17 	ldw	r2,-16(fp)
   4b018:	e0bfff15 	stw	r2,-4(fp)
   4b01c:	e0ffff17 	ldw	r3,-4(fp)
   4b020:	189a8060 	cmpeqi	r2,r3,27137
   4b024:	1000041e 	bne	r2,zero,4b038 <altera_avalon_jtag_uart_ioctl+0x44>
   4b028:	e0ffff17 	ldw	r3,-4(fp)
   4b02c:	189a80a0 	cmpeqi	r2,r3,27138
   4b030:	10001b1e 	bne	r2,zero,4b0a0 <altera_avalon_jtag_uart_ioctl+0xac>
   4b034:	00002706 	br	4b0d4 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   4b038:	e0bffb17 	ldw	r2,-20(fp)
   4b03c:	10c00117 	ldw	r3,4(r2)
   4b040:	00a00034 	movhi	r2,32768
   4b044:	10bfffc4 	addi	r2,r2,-1
   4b048:	18802226 	beq	r3,r2,4b0d4 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
   4b04c:	e0bffd17 	ldw	r2,-12(fp)
   4b050:	10800017 	ldw	r2,0(r2)
   4b054:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   4b058:	e0bff917 	ldw	r2,-28(fp)
   4b05c:	10800090 	cmplti	r2,r2,2
   4b060:	1000071e 	bne	r2,zero,4b080 <altera_avalon_jtag_uart_ioctl+0x8c>
   4b064:	e0fff917 	ldw	r3,-28(fp)
   4b068:	00a00034 	movhi	r2,32768
   4b06c:	10bfffc4 	addi	r2,r2,-1
   4b070:	18800326 	beq	r3,r2,4b080 <altera_avalon_jtag_uart_ioctl+0x8c>
   4b074:	e0bff917 	ldw	r2,-28(fp)
   4b078:	e0bffe15 	stw	r2,-8(fp)
   4b07c:	00000306 	br	4b08c <altera_avalon_jtag_uart_ioctl+0x98>
   4b080:	00e00034 	movhi	r3,32768
   4b084:	18ffff84 	addi	r3,r3,-2
   4b088:	e0fffe15 	stw	r3,-8(fp)
   4b08c:	e0bffb17 	ldw	r2,-20(fp)
   4b090:	e0fffe17 	ldw	r3,-8(fp)
   4b094:	10c00115 	stw	r3,4(r2)
      rc = 0;
   4b098:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
   4b09c:	00000d06 	br	4b0d4 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   4b0a0:	e0bffb17 	ldw	r2,-20(fp)
   4b0a4:	10c00117 	ldw	r3,4(r2)
   4b0a8:	00a00034 	movhi	r2,32768
   4b0ac:	10bfffc4 	addi	r2,r2,-1
   4b0b0:	18800826 	beq	r3,r2,4b0d4 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   4b0b4:	e13ffd17 	ldw	r4,-12(fp)
   4b0b8:	e0bffb17 	ldw	r2,-20(fp)
   4b0bc:	10c00917 	ldw	r3,36(r2)
   4b0c0:	e0bffb17 	ldw	r2,-20(fp)
   4b0c4:	10800117 	ldw	r2,4(r2)
   4b0c8:	1885803a 	cmpltu	r2,r3,r2
   4b0cc:	20800015 	stw	r2,0(r4)
      rc = 0;
   4b0d0:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
   4b0d4:	e0bffa17 	ldw	r2,-24(fp)
}
   4b0d8:	e037883a 	mov	sp,fp
   4b0dc:	df000017 	ldw	fp,0(sp)
   4b0e0:	dec00104 	addi	sp,sp,4
   4b0e4:	f800283a 	ret

0004b0e8 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   4b0e8:	defff204 	addi	sp,sp,-56
   4b0ec:	dfc00d15 	stw	ra,52(sp)
   4b0f0:	df000c15 	stw	fp,48(sp)
   4b0f4:	df000c04 	addi	fp,sp,48
   4b0f8:	e13ffb15 	stw	r4,-20(fp)
   4b0fc:	e17ffc15 	stw	r5,-16(fp)
   4b100:	e1bffd15 	stw	r6,-12(fp)
   4b104:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
   4b108:	e0bffc17 	ldw	r2,-16(fp)
   4b10c:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   4b110:	00004806 	br	4b234 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   4b114:	e0bffb17 	ldw	r2,-20(fp)
   4b118:	10800a17 	ldw	r2,40(r2)
   4b11c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   4b120:	e0bffb17 	ldw	r2,-20(fp)
   4b124:	10800b17 	ldw	r2,44(r2)
   4b128:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
   4b12c:	e0fff717 	ldw	r3,-36(fp)
   4b130:	e0bff617 	ldw	r2,-40(fp)
   4b134:	18800536 	bltu	r3,r2,4b14c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   4b138:	e0bff717 	ldw	r2,-36(fp)
   4b13c:	e0fff617 	ldw	r3,-40(fp)
   4b140:	10c5c83a 	sub	r2,r2,r3
   4b144:	e0bff815 	stw	r2,-32(fp)
   4b148:	00000406 	br	4b15c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   4b14c:	00820004 	movi	r2,2048
   4b150:	e0fff617 	ldw	r3,-40(fp)
   4b154:	10c5c83a 	sub	r2,r2,r3
   4b158:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
   4b15c:	e0bff817 	ldw	r2,-32(fp)
   4b160:	1005003a 	cmpeq	r2,r2,zero
   4b164:	10001f1e 	bne	r2,zero,4b1e4 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
   4b168:	e0fffd17 	ldw	r3,-12(fp)
   4b16c:	e0bff817 	ldw	r2,-32(fp)
   4b170:	1880022e 	bgeu	r3,r2,4b17c <altera_avalon_jtag_uart_read+0x94>
        n = space;
   4b174:	e0bffd17 	ldw	r2,-12(fp)
   4b178:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   4b17c:	e0bffb17 	ldw	r2,-20(fp)
   4b180:	10c00e04 	addi	r3,r2,56
   4b184:	e0bff617 	ldw	r2,-40(fp)
   4b188:	1887883a 	add	r3,r3,r2
   4b18c:	e0bffa17 	ldw	r2,-24(fp)
   4b190:	1009883a 	mov	r4,r2
   4b194:	180b883a 	mov	r5,r3
   4b198:	e1bff817 	ldw	r6,-32(fp)
   4b19c:	0045bf40 	call	45bf4 <memcpy>
      ptr   += n;
   4b1a0:	e0fff817 	ldw	r3,-32(fp)
   4b1a4:	e0bffa17 	ldw	r2,-24(fp)
   4b1a8:	10c5883a 	add	r2,r2,r3
   4b1ac:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
   4b1b0:	e0fffd17 	ldw	r3,-12(fp)
   4b1b4:	e0bff817 	ldw	r2,-32(fp)
   4b1b8:	1885c83a 	sub	r2,r3,r2
   4b1bc:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4b1c0:	e0fff617 	ldw	r3,-40(fp)
   4b1c4:	e0bff817 	ldw	r2,-32(fp)
   4b1c8:	1885883a 	add	r2,r3,r2
   4b1cc:	10c1ffcc 	andi	r3,r2,2047
   4b1d0:	e0bffb17 	ldw	r2,-20(fp)
   4b1d4:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   4b1d8:	e0bffd17 	ldw	r2,-12(fp)
   4b1dc:	10800048 	cmpgei	r2,r2,1
   4b1e0:	103fcc1e 	bne	r2,zero,4b114 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
   4b1e4:	e0fffa17 	ldw	r3,-24(fp)
   4b1e8:	e0bffc17 	ldw	r2,-16(fp)
   4b1ec:	1880141e 	bne	r3,r2,4b240 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   4b1f0:	e0bffe17 	ldw	r2,-8(fp)
   4b1f4:	1090000c 	andi	r2,r2,16384
   4b1f8:	1004c03a 	cmpne	r2,r2,zero
   4b1fc:	1000101e 	bne	r2,zero,4b240 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   4b200:	e0bffb17 	ldw	r2,-20(fp)
   4b204:	10c00a17 	ldw	r3,40(r2)
   4b208:	e0bff717 	ldw	r2,-36(fp)
   4b20c:	1880051e 	bne	r3,r2,4b224 <altera_avalon_jtag_uart_read+0x13c>
   4b210:	e0bffb17 	ldw	r2,-20(fp)
   4b214:	10c00917 	ldw	r3,36(r2)
   4b218:	e0bffb17 	ldw	r2,-20(fp)
   4b21c:	10800117 	ldw	r2,4(r2)
   4b220:	18bff736 	bltu	r3,r2,4b200 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   4b224:	e0bffb17 	ldw	r2,-20(fp)
   4b228:	10c00a17 	ldw	r3,40(r2)
   4b22c:	e0bff717 	ldw	r2,-36(fp)
   4b230:	18800326 	beq	r3,r2,4b240 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   4b234:	e0bffd17 	ldw	r2,-12(fp)
   4b238:	10800048 	cmpgei	r2,r2,1
   4b23c:	103fb51e 	bne	r2,zero,4b114 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   4b240:	e0fffa17 	ldw	r3,-24(fp)
   4b244:	e0bffc17 	ldw	r2,-16(fp)
   4b248:	18801926 	beq	r3,r2,4b2b0 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4b24c:	0005303a 	rdctl	r2,status
   4b250:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4b254:	e0fff517 	ldw	r3,-44(fp)
   4b258:	00bfff84 	movi	r2,-2
   4b25c:	1884703a 	and	r2,r3,r2
   4b260:	1001703a 	wrctl	status,r2
  
  return context;
   4b264:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   4b268:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   4b26c:	e0bffb17 	ldw	r2,-20(fp)
   4b270:	10800817 	ldw	r2,32(r2)
   4b274:	10c00054 	ori	r3,r2,1
   4b278:	e0bffb17 	ldw	r2,-20(fp)
   4b27c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   4b280:	e0bffb17 	ldw	r2,-20(fp)
   4b284:	10800017 	ldw	r2,0(r2)
   4b288:	11000104 	addi	r4,r2,4
   4b28c:	e0bffb17 	ldw	r2,-20(fp)
   4b290:	10800817 	ldw	r2,32(r2)
   4b294:	1007883a 	mov	r3,r2
   4b298:	2005883a 	mov	r2,r4
   4b29c:	10c00035 	stwio	r3,0(r2)
   4b2a0:	e0bff917 	ldw	r2,-28(fp)
   4b2a4:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4b2a8:	e0bff417 	ldw	r2,-48(fp)
   4b2ac:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   4b2b0:	e0fffa17 	ldw	r3,-24(fp)
   4b2b4:	e0bffc17 	ldw	r2,-16(fp)
   4b2b8:	18800526 	beq	r3,r2,4b2d0 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
   4b2bc:	e0fffa17 	ldw	r3,-24(fp)
   4b2c0:	e0bffc17 	ldw	r2,-16(fp)
   4b2c4:	1887c83a 	sub	r3,r3,r2
   4b2c8:	e0ffff15 	stw	r3,-4(fp)
   4b2cc:	00000906 	br	4b2f4 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
   4b2d0:	e0bffe17 	ldw	r2,-8(fp)
   4b2d4:	1090000c 	andi	r2,r2,16384
   4b2d8:	1005003a 	cmpeq	r2,r2,zero
   4b2dc:	1000031e 	bne	r2,zero,4b2ec <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   4b2e0:	00bffd44 	movi	r2,-11
   4b2e4:	e0bfff15 	stw	r2,-4(fp)
   4b2e8:	00000206 	br	4b2f4 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
   4b2ec:	00bffec4 	movi	r2,-5
   4b2f0:	e0bfff15 	stw	r2,-4(fp)
   4b2f4:	e0bfff17 	ldw	r2,-4(fp)
}
   4b2f8:	e037883a 	mov	sp,fp
   4b2fc:	dfc00117 	ldw	ra,4(sp)
   4b300:	df000017 	ldw	fp,0(sp)
   4b304:	dec00204 	addi	sp,sp,8
   4b308:	f800283a 	ret

0004b30c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   4b30c:	defff204 	addi	sp,sp,-56
   4b310:	dfc00d15 	stw	ra,52(sp)
   4b314:	df000c15 	stw	fp,48(sp)
   4b318:	df000c04 	addi	fp,sp,48
   4b31c:	e13ffb15 	stw	r4,-20(fp)
   4b320:	e17ffc15 	stw	r5,-16(fp)
   4b324:	e1bffd15 	stw	r6,-12(fp)
   4b328:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   4b32c:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   4b330:	e0bffc17 	ldw	r2,-16(fp)
   4b334:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   4b338:	00003a06 	br	4b424 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   4b33c:	e0bffb17 	ldw	r2,-20(fp)
   4b340:	10800c17 	ldw	r2,48(r2)
   4b344:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
   4b348:	e0bffb17 	ldw	r2,-20(fp)
   4b34c:	10800d17 	ldw	r2,52(r2)
   4b350:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
   4b354:	e0fffa17 	ldw	r3,-24(fp)
   4b358:	e0bff917 	ldw	r2,-28(fp)
   4b35c:	1880062e 	bgeu	r3,r2,4b378 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   4b360:	e0fff917 	ldw	r3,-28(fp)
   4b364:	e0bffa17 	ldw	r2,-24(fp)
   4b368:	1885c83a 	sub	r2,r3,r2
   4b36c:	10bfffc4 	addi	r2,r2,-1
   4b370:	e0bff815 	stw	r2,-32(fp)
   4b374:	00000c06 	br	4b3a8 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
   4b378:	e0bff917 	ldw	r2,-28(fp)
   4b37c:	1005003a 	cmpeq	r2,r2,zero
   4b380:	1000051e 	bne	r2,zero,4b398 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   4b384:	00820004 	movi	r2,2048
   4b388:	e0fffa17 	ldw	r3,-24(fp)
   4b38c:	10c5c83a 	sub	r2,r2,r3
   4b390:	e0bff815 	stw	r2,-32(fp)
   4b394:	00000406 	br	4b3a8 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   4b398:	0081ffc4 	movi	r2,2047
   4b39c:	e0fffa17 	ldw	r3,-24(fp)
   4b3a0:	10c5c83a 	sub	r2,r2,r3
   4b3a4:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
   4b3a8:	e0bff817 	ldw	r2,-32(fp)
   4b3ac:	1005003a 	cmpeq	r2,r2,zero
   4b3b0:	10001f1e 	bne	r2,zero,4b430 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
   4b3b4:	e0fffd17 	ldw	r3,-12(fp)
   4b3b8:	e0bff817 	ldw	r2,-32(fp)
   4b3bc:	1880022e 	bgeu	r3,r2,4b3c8 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
   4b3c0:	e0bffd17 	ldw	r2,-12(fp)
   4b3c4:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   4b3c8:	e0bffb17 	ldw	r2,-20(fp)
   4b3cc:	10c20e04 	addi	r3,r2,2104
   4b3d0:	e0bffa17 	ldw	r2,-24(fp)
   4b3d4:	1885883a 	add	r2,r3,r2
   4b3d8:	e0fffc17 	ldw	r3,-16(fp)
   4b3dc:	1009883a 	mov	r4,r2
   4b3e0:	180b883a 	mov	r5,r3
   4b3e4:	e1bff817 	ldw	r6,-32(fp)
   4b3e8:	0045bf40 	call	45bf4 <memcpy>
      ptr   += n;
   4b3ec:	e0fff817 	ldw	r3,-32(fp)
   4b3f0:	e0bffc17 	ldw	r2,-16(fp)
   4b3f4:	10c5883a 	add	r2,r2,r3
   4b3f8:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
   4b3fc:	e0fffd17 	ldw	r3,-12(fp)
   4b400:	e0bff817 	ldw	r2,-32(fp)
   4b404:	1885c83a 	sub	r2,r3,r2
   4b408:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4b40c:	e0fffa17 	ldw	r3,-24(fp)
   4b410:	e0bff817 	ldw	r2,-32(fp)
   4b414:	1885883a 	add	r2,r3,r2
   4b418:	10c1ffcc 	andi	r3,r2,2047
   4b41c:	e0bffb17 	ldw	r2,-20(fp)
   4b420:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   4b424:	e0bffd17 	ldw	r2,-12(fp)
   4b428:	10800048 	cmpgei	r2,r2,1
   4b42c:	103fc31e 	bne	r2,zero,4b33c <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4b430:	0005303a 	rdctl	r2,status
   4b434:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4b438:	e0fff517 	ldw	r3,-44(fp)
   4b43c:	00bfff84 	movi	r2,-2
   4b440:	1884703a 	and	r2,r3,r2
   4b444:	1001703a 	wrctl	status,r2
  
  return context;
   4b448:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   4b44c:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   4b450:	e0bffb17 	ldw	r2,-20(fp)
   4b454:	10800817 	ldw	r2,32(r2)
   4b458:	10c00094 	ori	r3,r2,2
   4b45c:	e0bffb17 	ldw	r2,-20(fp)
   4b460:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   4b464:	e0bffb17 	ldw	r2,-20(fp)
   4b468:	10800017 	ldw	r2,0(r2)
   4b46c:	11000104 	addi	r4,r2,4
   4b470:	e0bffb17 	ldw	r2,-20(fp)
   4b474:	10800817 	ldw	r2,32(r2)
   4b478:	1007883a 	mov	r3,r2
   4b47c:	2005883a 	mov	r2,r4
   4b480:	10c00035 	stwio	r3,0(r2)
   4b484:	e0bff717 	ldw	r2,-36(fp)
   4b488:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4b48c:	e0bff417 	ldw	r2,-48(fp)
   4b490:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   4b494:	e0bffd17 	ldw	r2,-12(fp)
   4b498:	10800050 	cmplti	r2,r2,1
   4b49c:	1000111e 	bne	r2,zero,4b4e4 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
   4b4a0:	e0bffe17 	ldw	r2,-8(fp)
   4b4a4:	1090000c 	andi	r2,r2,16384
   4b4a8:	1004c03a 	cmpne	r2,r2,zero
   4b4ac:	1000101e 	bne	r2,zero,4b4f0 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   4b4b0:	e0bffb17 	ldw	r2,-20(fp)
   4b4b4:	10c00d17 	ldw	r3,52(r2)
   4b4b8:	e0bff917 	ldw	r2,-28(fp)
   4b4bc:	1880051e 	bne	r3,r2,4b4d4 <altera_avalon_jtag_uart_write+0x1c8>
   4b4c0:	e0bffb17 	ldw	r2,-20(fp)
   4b4c4:	10c00917 	ldw	r3,36(r2)
   4b4c8:	e0bffb17 	ldw	r2,-20(fp)
   4b4cc:	10800117 	ldw	r2,4(r2)
   4b4d0:	18bff736 	bltu	r3,r2,4b4b0 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
   4b4d4:	e0bffb17 	ldw	r2,-20(fp)
   4b4d8:	10c00d17 	ldw	r3,52(r2)
   4b4dc:	e0bff917 	ldw	r2,-28(fp)
   4b4e0:	18800326 	beq	r3,r2,4b4f0 <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
   4b4e4:	e0bffd17 	ldw	r2,-12(fp)
   4b4e8:	10800048 	cmpgei	r2,r2,1
   4b4ec:	103fcd1e 	bne	r2,zero,4b424 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   4b4f0:	e0fffc17 	ldw	r3,-16(fp)
   4b4f4:	e0bff617 	ldw	r2,-40(fp)
   4b4f8:	18800526 	beq	r3,r2,4b510 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
   4b4fc:	e0fffc17 	ldw	r3,-16(fp)
   4b500:	e0bff617 	ldw	r2,-40(fp)
   4b504:	1887c83a 	sub	r3,r3,r2
   4b508:	e0ffff15 	stw	r3,-4(fp)
   4b50c:	00000906 	br	4b534 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
   4b510:	e0bffe17 	ldw	r2,-8(fp)
   4b514:	1090000c 	andi	r2,r2,16384
   4b518:	1005003a 	cmpeq	r2,r2,zero
   4b51c:	1000031e 	bne	r2,zero,4b52c <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
   4b520:	00bffd44 	movi	r2,-11
   4b524:	e0bfff15 	stw	r2,-4(fp)
   4b528:	00000206 	br	4b534 <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
   4b52c:	00bffec4 	movi	r2,-5
   4b530:	e0bfff15 	stw	r2,-4(fp)
   4b534:	e0bfff17 	ldw	r2,-4(fp)
}
   4b538:	e037883a 	mov	sp,fp
   4b53c:	dfc00117 	ldw	ra,4(sp)
   4b540:	df000017 	ldw	fp,0(sp)
   4b544:	dec00204 	addi	sp,sp,8
   4b548:	f800283a 	ret

0004b54c <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
   4b54c:	defff404 	addi	sp,sp,-48
   4b550:	df000b15 	stw	fp,44(sp)
   4b554:	df000b04 	addi	fp,sp,44
   4b558:	e13ffc15 	stw	r4,-16(fp)
   4b55c:	e17ffd15 	stw	r5,-12(fp)
   4b560:	e1bffe15 	stw	r6,-8(fp)
   4b564:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
   4b568:	e0fffe17 	ldw	r3,-8(fp)
   4b56c:	e0bfff17 	ldw	r2,-4(fp)
   4b570:	10c5883a 	add	r2,r2,r3
   4b574:	e0bffb15 	stw	r2,-20(fp)
  alt_u8 * read_end = read_data + read_length;
   4b578:	e0c00117 	ldw	r3,4(fp)
   4b57c:	e0800217 	ldw	r2,8(fp)
   4b580:	10c5883a 	add	r2,r2,r3
   4b584:	e0bffa15 	stw	r2,-24(fp)

  alt_u32 write_zeros = read_length;
   4b588:	e0800117 	ldw	r2,4(fp)
   4b58c:	e0bff915 	stw	r2,-28(fp)
  alt_u32 read_ignore = write_length;
   4b590:	e0bffe17 	ldw	r2,-8(fp)
   4b594:	e0bff815 	stw	r2,-32(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
   4b598:	00800044 	movi	r2,1
   4b59c:	e0bff615 	stw	r2,-40(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
   4b5a0:	e0bffc17 	ldw	r2,-16(fp)
   4b5a4:	11000504 	addi	r4,r2,20
   4b5a8:	e0fffd17 	ldw	r3,-12(fp)
   4b5ac:	00800044 	movi	r2,1
   4b5b0:	10c6983a 	sll	r3,r2,r3
   4b5b4:	2005883a 	mov	r2,r4
   4b5b8:	10c00035 	stwio	r3,0(r2)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
   4b5bc:	e0800317 	ldw	r2,12(fp)
   4b5c0:	1080008c 	andi	r2,r2,2
   4b5c4:	1004c03a 	cmpne	r2,r2,zero
   4b5c8:	1000051e 	bne	r2,zero,4b5e0 <alt_avalon_spi_command+0x94>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
   4b5cc:	e0bffc17 	ldw	r2,-16(fp)
   4b5d0:	10800304 	addi	r2,r2,12
   4b5d4:	1007883a 	mov	r3,r2
   4b5d8:	00810004 	movi	r2,1024
   4b5dc:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
   4b5e0:	e0bffc17 	ldw	r2,-16(fp)
   4b5e4:	10800037 	ldwio	r2,0(r2)
   4b5e8:	00000006 	br	4b5ec <alt_avalon_spi_command+0xa0>
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
   4b5ec:	e0bffc17 	ldw	r2,-16(fp)
   4b5f0:	10800204 	addi	r2,r2,8
   4b5f4:	10800037 	ldwio	r2,0(r2)
   4b5f8:	e0bff715 	stw	r2,-36(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
   4b5fc:	e0bff717 	ldw	r2,-36(fp)
   4b600:	1080100c 	andi	r2,r2,64
   4b604:	1005003a 	cmpeq	r2,r2,zero
   4b608:	1000031e 	bne	r2,zero,4b618 <alt_avalon_spi_command+0xcc>
   4b60c:	e0bff617 	ldw	r2,-40(fp)
   4b610:	1004c03a 	cmpne	r2,r2,zero
   4b614:	1000041e 	bne	r2,zero,4b628 <alt_avalon_spi_command+0xdc>
   4b618:	e0bff717 	ldw	r2,-36(fp)
   4b61c:	1080200c 	andi	r2,r2,128
   4b620:	1005003a 	cmpeq	r2,r2,zero
   4b624:	103ff11e 	bne	r2,zero,4b5ec <alt_avalon_spi_command+0xa0>

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
   4b628:	e0bff717 	ldw	r2,-36(fp)
   4b62c:	1080100c 	andi	r2,r2,64
   4b630:	1005003a 	cmpeq	r2,r2,zero
   4b634:	1000201e 	bne	r2,zero,4b6b8 <alt_avalon_spi_command+0x16c>
   4b638:	e0bff617 	ldw	r2,-40(fp)
   4b63c:	10800050 	cmplti	r2,r2,1
   4b640:	10001d1e 	bne	r2,zero,4b6b8 <alt_avalon_spi_command+0x16c>
    {
      credits--;
   4b644:	e0bff617 	ldw	r2,-40(fp)
   4b648:	10bfffc4 	addi	r2,r2,-1
   4b64c:	e0bff615 	stw	r2,-40(fp)

      if (write_data < write_end)
   4b650:	e0ffff17 	ldw	r3,-4(fp)
   4b654:	e0bffb17 	ldw	r2,-20(fp)
   4b658:	18800b2e 	bgeu	r3,r2,4b688 <alt_avalon_spi_command+0x13c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
   4b65c:	e0bffc17 	ldw	r2,-16(fp)
   4b660:	11000104 	addi	r4,r2,4
   4b664:	e0bfff17 	ldw	r2,-4(fp)
   4b668:	10800003 	ldbu	r2,0(r2)
   4b66c:	10c03fcc 	andi	r3,r2,255
   4b670:	e0bfff17 	ldw	r2,-4(fp)
   4b674:	10800044 	addi	r2,r2,1
   4b678:	e0bfff15 	stw	r2,-4(fp)
   4b67c:	2005883a 	mov	r2,r4
   4b680:	10c00035 	stwio	r3,0(r2)
   4b684:	00000c06 	br	4b6b8 <alt_avalon_spi_command+0x16c>
      else if (write_zeros > 0)
   4b688:	e0bff917 	ldw	r2,-28(fp)
   4b68c:	1005003a 	cmpeq	r2,r2,zero
   4b690:	1000071e 	bne	r2,zero,4b6b0 <alt_avalon_spi_command+0x164>
      {
        write_zeros--;
   4b694:	e0bff917 	ldw	r2,-28(fp)
   4b698:	10bfffc4 	addi	r2,r2,-1
   4b69c:	e0bff915 	stw	r2,-28(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
   4b6a0:	e0bffc17 	ldw	r2,-16(fp)
   4b6a4:	10800104 	addi	r2,r2,4
   4b6a8:	10000035 	stwio	zero,0(r2)
   4b6ac:	00000206 	br	4b6b8 <alt_avalon_spi_command+0x16c>
      }
      else
        credits = -1024;
   4b6b0:	00bf0004 	movi	r2,-1024
   4b6b4:	e0bff615 	stw	r2,-40(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
   4b6b8:	e0bff717 	ldw	r2,-36(fp)
   4b6bc:	1080200c 	andi	r2,r2,128
   4b6c0:	1005003a 	cmpeq	r2,r2,zero
   4b6c4:	103fc91e 	bne	r2,zero,4b5ec <alt_avalon_spi_command+0xa0>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
   4b6c8:	e0bffc17 	ldw	r2,-16(fp)
   4b6cc:	10800037 	ldwio	r2,0(r2)
   4b6d0:	e0bff515 	stw	r2,-44(fp)

      if (read_ignore > 0)
   4b6d4:	e0bff817 	ldw	r2,-32(fp)
   4b6d8:	1005003a 	cmpeq	r2,r2,zero
   4b6dc:	1000041e 	bne	r2,zero,4b6f0 <alt_avalon_spi_command+0x1a4>
        read_ignore--;
   4b6e0:	e0bff817 	ldw	r2,-32(fp)
   4b6e4:	10bfffc4 	addi	r2,r2,-1
   4b6e8:	e0bff815 	stw	r2,-32(fp)
   4b6ec:	00000706 	br	4b70c <alt_avalon_spi_command+0x1c0>
      else
        *read_data++ = (alt_u8)rxdata;
   4b6f0:	e0bff517 	ldw	r2,-44(fp)
   4b6f4:	1007883a 	mov	r3,r2
   4b6f8:	e0800217 	ldw	r2,8(fp)
   4b6fc:	10c00005 	stb	r3,0(r2)
   4b700:	e0800217 	ldw	r2,8(fp)
   4b704:	10800044 	addi	r2,r2,1
   4b708:	e0800215 	stw	r2,8(fp)
      credits++;
   4b70c:	e0bff617 	ldw	r2,-40(fp)
   4b710:	10800044 	addi	r2,r2,1
   4b714:	e0bff615 	stw	r2,-40(fp)

      if (read_ignore == 0 && read_data == read_end)
   4b718:	e0bff817 	ldw	r2,-32(fp)
   4b71c:	1004c03a 	cmpne	r2,r2,zero
   4b720:	103fb21e 	bne	r2,zero,4b5ec <alt_avalon_spi_command+0xa0>
   4b724:	e0c00217 	ldw	r3,8(fp)
   4b728:	e0bffa17 	ldw	r2,-24(fp)
   4b72c:	18800126 	beq	r3,r2,4b734 <alt_avalon_spi_command+0x1e8>
        break;
    }
    
  }
   4b730:	003fae06 	br	4b5ec <alt_avalon_spi_command+0xa0>

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
   4b734:	e0bffc17 	ldw	r2,-16(fp)
   4b738:	10800204 	addi	r2,r2,8
   4b73c:	10800037 	ldwio	r2,0(r2)
   4b740:	e0bff715 	stw	r2,-36(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
   4b744:	e0bff717 	ldw	r2,-36(fp)
   4b748:	1080080c 	andi	r2,r2,32
   4b74c:	1005003a 	cmpeq	r2,r2,zero
   4b750:	103ff81e 	bne	r2,zero,4b734 <alt_avalon_spi_command+0x1e8>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
   4b754:	e0800317 	ldw	r2,12(fp)
   4b758:	1080004c 	andi	r2,r2,1
   4b75c:	1004c03a 	cmpne	r2,r2,zero
   4b760:	1000031e 	bne	r2,zero,4b770 <alt_avalon_spi_command+0x224>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
   4b764:	e0bffc17 	ldw	r2,-16(fp)
   4b768:	10800304 	addi	r2,r2,12
   4b76c:	10000035 	stwio	zero,0(r2)

  return read_length;
   4b770:	e0800117 	ldw	r2,4(fp)
}
   4b774:	e037883a 	mov	sp,fp
   4b778:	df000017 	ldw	fp,0(sp)
   4b77c:	dec00104 	addi	sp,sp,4
   4b780:	f800283a 	ret

0004b784 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   4b784:	defffa04 	addi	sp,sp,-24
   4b788:	dfc00515 	stw	ra,20(sp)
   4b78c:	df000415 	stw	fp,16(sp)
   4b790:	df000404 	addi	fp,sp,16
   4b794:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   4b798:	e0bfff17 	ldw	r2,-4(fp)
   4b79c:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   4b7a0:	e0bfff17 	ldw	r2,-4(fp)
   4b7a4:	10800104 	addi	r2,r2,4
   4b7a8:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4b7ac:	0005303a 	rdctl	r2,status
   4b7b0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4b7b4:	e0fffd17 	ldw	r3,-12(fp)
   4b7b8:	00bfff84 	movi	r2,-2
   4b7bc:	1884703a 	and	r2,r3,r2
   4b7c0:	1001703a 	wrctl	status,r2
  
  return context;
   4b7c4:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   4b7c8:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
   4b7cc:	004c38c0 	call	4c38c <alt_tick>
   4b7d0:	e0bffe17 	ldw	r2,-8(fp)
   4b7d4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4b7d8:	e0bffc17 	ldw	r2,-16(fp)
   4b7dc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   4b7e0:	e037883a 	mov	sp,fp
   4b7e4:	dfc00117 	ldw	ra,4(sp)
   4b7e8:	df000017 	ldw	fp,0(sp)
   4b7ec:	dec00204 	addi	sp,sp,8
   4b7f0:	f800283a 	ret

0004b7f4 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   4b7f4:	defff804 	addi	sp,sp,-32
   4b7f8:	dfc00715 	stw	ra,28(sp)
   4b7fc:	df000615 	stw	fp,24(sp)
   4b800:	df000604 	addi	fp,sp,24
   4b804:	e13ffc15 	stw	r4,-16(fp)
   4b808:	e17ffd15 	stw	r5,-12(fp)
   4b80c:	e1bffe15 	stw	r6,-8(fp)
   4b810:	e1ffff15 	stw	r7,-4(fp)
   4b814:	e0bfff17 	ldw	r2,-4(fp)
   4b818:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   4b81c:	00900034 	movhi	r2,16384
   4b820:	10878104 	addi	r2,r2,7684
   4b824:	10800017 	ldw	r2,0(r2)
   4b828:	1004c03a 	cmpne	r2,r2,zero
   4b82c:	1000041e 	bne	r2,zero,4b840 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
   4b830:	00d00034 	movhi	r3,16384
   4b834:	18c78104 	addi	r3,r3,7684
   4b838:	e0bffb17 	ldw	r2,-20(fp)
   4b83c:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   4b840:	e0bffc17 	ldw	r2,-16(fp)
   4b844:	10800104 	addi	r2,r2,4
   4b848:	1007883a 	mov	r3,r2
   4b84c:	008001c4 	movi	r2,7
   4b850:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   4b854:	d8000015 	stw	zero,0(sp)
   4b858:	e13ffd17 	ldw	r4,-12(fp)
   4b85c:	e17ffe17 	ldw	r5,-8(fp)
   4b860:	01800174 	movhi	r6,5
   4b864:	31ade104 	addi	r6,r6,-18556
   4b868:	e1fffc17 	ldw	r7,-16(fp)
   4b86c:	004bc280 	call	4bc28 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   4b870:	e037883a 	mov	sp,fp
   4b874:	dfc00117 	ldw	ra,4(sp)
   4b878:	df000017 	ldw	fp,0(sp)
   4b87c:	dec00204 	addi	sp,sp,8
   4b880:	f800283a 	ret

0004b884 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   4b884:	defff404 	addi	sp,sp,-48
   4b888:	df000b15 	stw	fp,44(sp)
   4b88c:	df000b04 	addi	fp,sp,44
   4b890:	e13ffb15 	stw	r4,-20(fp)
   4b894:	e17ffc15 	stw	r5,-16(fp)
   4b898:	e1bffd15 	stw	r6,-12(fp)
   4b89c:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   4b8a0:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   4b8a4:	00900034 	movhi	r2,16384
   4b8a8:	10878104 	addi	r2,r2,7684
   4b8ac:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   4b8b0:	1005003a 	cmpeq	r2,r2,zero
   4b8b4:	1000411e 	bne	r2,zero,4b9bc <alt_alarm_start+0x138>
  {
    if (alarm)
   4b8b8:	e0bffb17 	ldw	r2,-20(fp)
   4b8bc:	1005003a 	cmpeq	r2,r2,zero
   4b8c0:	10003b1e 	bne	r2,zero,4b9b0 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
   4b8c4:	e0fffb17 	ldw	r3,-20(fp)
   4b8c8:	e0bffd17 	ldw	r2,-12(fp)
   4b8cc:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
   4b8d0:	e0fffb17 	ldw	r3,-20(fp)
   4b8d4:	e0bffe17 	ldw	r2,-8(fp)
   4b8d8:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4b8dc:	0005303a 	rdctl	r2,status
   4b8e0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4b8e4:	e0fff817 	ldw	r3,-32(fp)
   4b8e8:	00bfff84 	movi	r2,-2
   4b8ec:	1884703a 	and	r2,r3,r2
   4b8f0:	1001703a 	wrctl	status,r2
  
  return context;
   4b8f4:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   4b8f8:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   4b8fc:	00900034 	movhi	r2,16384
   4b900:	10878204 	addi	r2,r2,7688
   4b904:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   4b908:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   4b90c:	e0fffc17 	ldw	r3,-16(fp)
   4b910:	e0bff917 	ldw	r2,-28(fp)
   4b914:	1885883a 	add	r2,r3,r2
   4b918:	10c00044 	addi	r3,r2,1
   4b91c:	e0bffb17 	ldw	r2,-20(fp)
   4b920:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   4b924:	e0bffb17 	ldw	r2,-20(fp)
   4b928:	10c00217 	ldw	r3,8(r2)
   4b92c:	e0bff917 	ldw	r2,-28(fp)
   4b930:	1880042e 	bgeu	r3,r2,4b944 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
   4b934:	e0fffb17 	ldw	r3,-20(fp)
   4b938:	00800044 	movi	r2,1
   4b93c:	18800405 	stb	r2,16(r3)
   4b940:	00000206 	br	4b94c <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
   4b944:	e0bffb17 	ldw	r2,-20(fp)
   4b948:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   4b94c:	e0fffb17 	ldw	r3,-20(fp)
   4b950:	00900034 	movhi	r2,16384
   4b954:	10877404 	addi	r2,r2,7632
   4b958:	e0bff615 	stw	r2,-40(fp)
   4b95c:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   4b960:	e0fff717 	ldw	r3,-36(fp)
   4b964:	e0bff617 	ldw	r2,-40(fp)
   4b968:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   4b96c:	e0bff617 	ldw	r2,-40(fp)
   4b970:	10c00017 	ldw	r3,0(r2)
   4b974:	e0bff717 	ldw	r2,-36(fp)
   4b978:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   4b97c:	e0bff617 	ldw	r2,-40(fp)
   4b980:	10c00017 	ldw	r3,0(r2)
   4b984:	e0bff717 	ldw	r2,-36(fp)
   4b988:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   4b98c:	e0fff617 	ldw	r3,-40(fp)
   4b990:	e0bff717 	ldw	r2,-36(fp)
   4b994:	18800015 	stw	r2,0(r3)
   4b998:	e0bffa17 	ldw	r2,-24(fp)
   4b99c:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4b9a0:	e0bff517 	ldw	r2,-44(fp)
   4b9a4:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   4b9a8:	e03fff15 	stw	zero,-4(fp)
   4b9ac:	00000506 	br	4b9c4 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
   4b9b0:	00bffa84 	movi	r2,-22
   4b9b4:	e0bfff15 	stw	r2,-4(fp)
   4b9b8:	00000206 	br	4b9c4 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
   4b9bc:	00bfde84 	movi	r2,-134
   4b9c0:	e0bfff15 	stw	r2,-4(fp)
   4b9c4:	e0bfff17 	ldw	r2,-4(fp)
  }
}
   4b9c8:	e037883a 	mov	sp,fp
   4b9cc:	df000017 	ldw	fp,0(sp)
   4b9d0:	dec00104 	addi	sp,sp,4
   4b9d4:	f800283a 	ret

0004b9d8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   4b9d8:	defffe04 	addi	sp,sp,-8
   4b9dc:	df000115 	stw	fp,4(sp)
   4b9e0:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   4b9e4:	e03fff15 	stw	zero,-4(fp)
   4b9e8:	00000506 	br	4ba00 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   4b9ec:	e0bfff17 	ldw	r2,-4(fp)
   4b9f0:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   4b9f4:	e0bfff17 	ldw	r2,-4(fp)
   4b9f8:	10800804 	addi	r2,r2,32
   4b9fc:	e0bfff15 	stw	r2,-4(fp)
   4ba00:	e0bfff17 	ldw	r2,-4(fp)
   4ba04:	10820030 	cmpltui	r2,r2,2048
   4ba08:	103ff81e 	bne	r2,zero,4b9ec <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   4ba0c:	e037883a 	mov	sp,fp
   4ba10:	df000017 	ldw	fp,0(sp)
   4ba14:	dec00104 	addi	sp,sp,4
   4ba18:	f800283a 	ret

0004ba1c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   4ba1c:	defff904 	addi	sp,sp,-28
   4ba20:	dfc00615 	stw	ra,24(sp)
   4ba24:	df000515 	stw	fp,20(sp)
   4ba28:	df000504 	addi	fp,sp,20
   4ba2c:	e13ffd15 	stw	r4,-12(fp)
   4ba30:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   4ba34:	e0bffd17 	ldw	r2,-12(fp)
   4ba38:	1005003a 	cmpeq	r2,r2,zero
   4ba3c:	1000041e 	bne	r2,zero,4ba50 <alt_dev_llist_insert+0x34>
   4ba40:	e0bffd17 	ldw	r2,-12(fp)
   4ba44:	10800217 	ldw	r2,8(r2)
   4ba48:	1004c03a 	cmpne	r2,r2,zero
   4ba4c:	1000071e 	bne	r2,zero,4ba6c <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
   4ba50:	004bad00 	call	4bad0 <alt_get_errno>
   4ba54:	1007883a 	mov	r3,r2
   4ba58:	00800584 	movi	r2,22
   4ba5c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   4ba60:	00bffa84 	movi	r2,-22
   4ba64:	e0bfff15 	stw	r2,-4(fp)
   4ba68:	00001306 	br	4bab8 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   4ba6c:	e0fffd17 	ldw	r3,-12(fp)
   4ba70:	e0bffe17 	ldw	r2,-8(fp)
   4ba74:	e0bffb15 	stw	r2,-20(fp)
   4ba78:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   4ba7c:	e0fffc17 	ldw	r3,-16(fp)
   4ba80:	e0bffb17 	ldw	r2,-20(fp)
   4ba84:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   4ba88:	e0bffb17 	ldw	r2,-20(fp)
   4ba8c:	10c00017 	ldw	r3,0(r2)
   4ba90:	e0bffc17 	ldw	r2,-16(fp)
   4ba94:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   4ba98:	e0bffb17 	ldw	r2,-20(fp)
   4ba9c:	10c00017 	ldw	r3,0(r2)
   4baa0:	e0bffc17 	ldw	r2,-16(fp)
   4baa4:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   4baa8:	e0fffb17 	ldw	r3,-20(fp)
   4baac:	e0bffc17 	ldw	r2,-16(fp)
   4bab0:	18800015 	stw	r2,0(r3)

  return 0;  
   4bab4:	e03fff15 	stw	zero,-4(fp)
   4bab8:	e0bfff17 	ldw	r2,-4(fp)
}
   4babc:	e037883a 	mov	sp,fp
   4bac0:	dfc00117 	ldw	ra,4(sp)
   4bac4:	df000017 	ldw	fp,0(sp)
   4bac8:	dec00204 	addi	sp,sp,8
   4bacc:	f800283a 	ret

0004bad0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4bad0:	defffd04 	addi	sp,sp,-12
   4bad4:	dfc00215 	stw	ra,8(sp)
   4bad8:	df000115 	stw	fp,4(sp)
   4badc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   4bae0:	00900034 	movhi	r2,16384
   4bae4:	10877104 	addi	r2,r2,7620
   4bae8:	10800017 	ldw	r2,0(r2)
   4baec:	1005003a 	cmpeq	r2,r2,zero
   4baf0:	1000061e 	bne	r2,zero,4bb0c <alt_get_errno+0x3c>
   4baf4:	00900034 	movhi	r2,16384
   4baf8:	10877104 	addi	r2,r2,7620
   4bafc:	10800017 	ldw	r2,0(r2)
   4bb00:	103ee83a 	callr	r2
   4bb04:	e0bfff15 	stw	r2,-4(fp)
   4bb08:	00000306 	br	4bb18 <alt_get_errno+0x48>
   4bb0c:	00900034 	movhi	r2,16384
   4bb10:	10877c04 	addi	r2,r2,7664
   4bb14:	e0bfff15 	stw	r2,-4(fp)
   4bb18:	e0bfff17 	ldw	r2,-4(fp)
}
   4bb1c:	e037883a 	mov	sp,fp
   4bb20:	dfc00117 	ldw	ra,4(sp)
   4bb24:	df000017 	ldw	fp,0(sp)
   4bb28:	dec00204 	addi	sp,sp,8
   4bb2c:	f800283a 	ret

0004bb30 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   4bb30:	defffd04 	addi	sp,sp,-12
   4bb34:	dfc00215 	stw	ra,8(sp)
   4bb38:	df000115 	stw	fp,4(sp)
   4bb3c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   4bb40:	00bfff04 	movi	r2,-4
   4bb44:	00c00174 	movhi	r3,5
   4bb48:	18f2f004 	addi	r3,r3,-13376
   4bb4c:	1885883a 	add	r2,r3,r2
   4bb50:	e0bfff15 	stw	r2,-4(fp)
   4bb54:	00000606 	br	4bb70 <_do_ctors+0x40>
        (*ctor) (); 
   4bb58:	e0bfff17 	ldw	r2,-4(fp)
   4bb5c:	10800017 	ldw	r2,0(r2)
   4bb60:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   4bb64:	e0bfff17 	ldw	r2,-4(fp)
   4bb68:	10bfff04 	addi	r2,r2,-4
   4bb6c:	e0bfff15 	stw	r2,-4(fp)
   4bb70:	e0ffff17 	ldw	r3,-4(fp)
   4bb74:	00800174 	movhi	r2,5
   4bb78:	10b2ef04 	addi	r2,r2,-13380
   4bb7c:	18bff62e 	bgeu	r3,r2,4bb58 <_do_ctors+0x28>
        (*ctor) (); 
}
   4bb80:	e037883a 	mov	sp,fp
   4bb84:	dfc00117 	ldw	ra,4(sp)
   4bb88:	df000017 	ldw	fp,0(sp)
   4bb8c:	dec00204 	addi	sp,sp,8
   4bb90:	f800283a 	ret

0004bb94 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   4bb94:	defffd04 	addi	sp,sp,-12
   4bb98:	dfc00215 	stw	ra,8(sp)
   4bb9c:	df000115 	stw	fp,4(sp)
   4bba0:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   4bba4:	00bfff04 	movi	r2,-4
   4bba8:	00c00174 	movhi	r3,5
   4bbac:	18f2f004 	addi	r3,r3,-13376
   4bbb0:	1885883a 	add	r2,r3,r2
   4bbb4:	e0bfff15 	stw	r2,-4(fp)
   4bbb8:	00000606 	br	4bbd4 <_do_dtors+0x40>
        (*dtor) (); 
   4bbbc:	e0bfff17 	ldw	r2,-4(fp)
   4bbc0:	10800017 	ldw	r2,0(r2)
   4bbc4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   4bbc8:	e0bfff17 	ldw	r2,-4(fp)
   4bbcc:	10bfff04 	addi	r2,r2,-4
   4bbd0:	e0bfff15 	stw	r2,-4(fp)
   4bbd4:	e0ffff17 	ldw	r3,-4(fp)
   4bbd8:	00800174 	movhi	r2,5
   4bbdc:	10b2f004 	addi	r2,r2,-13376
   4bbe0:	18bff62e 	bgeu	r3,r2,4bbbc <_do_dtors+0x28>
        (*dtor) (); 
}
   4bbe4:	e037883a 	mov	sp,fp
   4bbe8:	dfc00117 	ldw	ra,4(sp)
   4bbec:	df000017 	ldw	fp,0(sp)
   4bbf0:	dec00204 	addi	sp,sp,8
   4bbf4:	f800283a 	ret

0004bbf8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   4bbf8:	defffe04 	addi	sp,sp,-8
   4bbfc:	dfc00115 	stw	ra,4(sp)
   4bc00:	df000015 	stw	fp,0(sp)
   4bc04:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   4bc08:	0009883a 	mov	r4,zero
   4bc0c:	01440004 	movi	r5,4096
   4bc10:	004c7240 	call	4c724 <alt_icache_flush>
#endif
}
   4bc14:	e037883a 	mov	sp,fp
   4bc18:	dfc00117 	ldw	ra,4(sp)
   4bc1c:	df000017 	ldw	fp,0(sp)
   4bc20:	dec00204 	addi	sp,sp,8
   4bc24:	f800283a 	ret

0004bc28 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   4bc28:	defff904 	addi	sp,sp,-28
   4bc2c:	dfc00615 	stw	ra,24(sp)
   4bc30:	df000515 	stw	fp,20(sp)
   4bc34:	df000504 	addi	fp,sp,20
   4bc38:	e13ffc15 	stw	r4,-16(fp)
   4bc3c:	e17ffd15 	stw	r5,-12(fp)
   4bc40:	e1bffe15 	stw	r6,-8(fp)
   4bc44:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   4bc48:	e0800217 	ldw	r2,8(fp)
   4bc4c:	d8800015 	stw	r2,0(sp)
   4bc50:	e13ffc17 	ldw	r4,-16(fp)
   4bc54:	e17ffd17 	ldw	r5,-12(fp)
   4bc58:	e1bffe17 	ldw	r6,-8(fp)
   4bc5c:	e1ffff17 	ldw	r7,-4(fp)
   4bc60:	004bdfc0 	call	4bdfc <alt_iic_isr_register>
}  
   4bc64:	e037883a 	mov	sp,fp
   4bc68:	dfc00117 	ldw	ra,4(sp)
   4bc6c:	df000017 	ldw	fp,0(sp)
   4bc70:	dec00204 	addi	sp,sp,8
   4bc74:	f800283a 	ret

0004bc78 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   4bc78:	defff904 	addi	sp,sp,-28
   4bc7c:	df000615 	stw	fp,24(sp)
   4bc80:	df000604 	addi	fp,sp,24
   4bc84:	e13ffe15 	stw	r4,-8(fp)
   4bc88:	e17fff15 	stw	r5,-4(fp)
   4bc8c:	e0bfff17 	ldw	r2,-4(fp)
   4bc90:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4bc94:	0005303a 	rdctl	r2,status
   4bc98:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4bc9c:	e0fffb17 	ldw	r3,-20(fp)
   4bca0:	00bfff84 	movi	r2,-2
   4bca4:	1884703a 	and	r2,r3,r2
   4bca8:	1001703a 	wrctl	status,r2
  
  return context;
   4bcac:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   4bcb0:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
   4bcb4:	e0fffc17 	ldw	r3,-16(fp)
   4bcb8:	00800044 	movi	r2,1
   4bcbc:	10c4983a 	sll	r2,r2,r3
   4bcc0:	1007883a 	mov	r3,r2
   4bcc4:	00900034 	movhi	r2,16384
   4bcc8:	10878004 	addi	r2,r2,7680
   4bccc:	10800017 	ldw	r2,0(r2)
   4bcd0:	1886b03a 	or	r3,r3,r2
   4bcd4:	00900034 	movhi	r2,16384
   4bcd8:	10878004 	addi	r2,r2,7680
   4bcdc:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   4bce0:	00900034 	movhi	r2,16384
   4bce4:	10878004 	addi	r2,r2,7680
   4bce8:	10800017 	ldw	r2,0(r2)
   4bcec:	100170fa 	wrctl	ienable,r2
   4bcf0:	e0bffd17 	ldw	r2,-12(fp)
   4bcf4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4bcf8:	e0bffa17 	ldw	r2,-24(fp)
   4bcfc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   4bd00:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   4bd04:	e037883a 	mov	sp,fp
   4bd08:	df000017 	ldw	fp,0(sp)
   4bd0c:	dec00104 	addi	sp,sp,4
   4bd10:	f800283a 	ret

0004bd14 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   4bd14:	defff904 	addi	sp,sp,-28
   4bd18:	df000615 	stw	fp,24(sp)
   4bd1c:	df000604 	addi	fp,sp,24
   4bd20:	e13ffe15 	stw	r4,-8(fp)
   4bd24:	e17fff15 	stw	r5,-4(fp)
   4bd28:	e0bfff17 	ldw	r2,-4(fp)
   4bd2c:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4bd30:	0005303a 	rdctl	r2,status
   4bd34:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4bd38:	e0fffb17 	ldw	r3,-20(fp)
   4bd3c:	00bfff84 	movi	r2,-2
   4bd40:	1884703a 	and	r2,r3,r2
   4bd44:	1001703a 	wrctl	status,r2
  
  return context;
   4bd48:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   4bd4c:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
   4bd50:	e0fffc17 	ldw	r3,-16(fp)
   4bd54:	00800044 	movi	r2,1
   4bd58:	10c4983a 	sll	r2,r2,r3
   4bd5c:	0084303a 	nor	r2,zero,r2
   4bd60:	1007883a 	mov	r3,r2
   4bd64:	00900034 	movhi	r2,16384
   4bd68:	10878004 	addi	r2,r2,7680
   4bd6c:	10800017 	ldw	r2,0(r2)
   4bd70:	1886703a 	and	r3,r3,r2
   4bd74:	00900034 	movhi	r2,16384
   4bd78:	10878004 	addi	r2,r2,7680
   4bd7c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   4bd80:	00900034 	movhi	r2,16384
   4bd84:	10878004 	addi	r2,r2,7680
   4bd88:	10800017 	ldw	r2,0(r2)
   4bd8c:	100170fa 	wrctl	ienable,r2
   4bd90:	e0bffd17 	ldw	r2,-12(fp)
   4bd94:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4bd98:	e0bffa17 	ldw	r2,-24(fp)
   4bd9c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   4bda0:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   4bda4:	e037883a 	mov	sp,fp
   4bda8:	df000017 	ldw	fp,0(sp)
   4bdac:	dec00104 	addi	sp,sp,4
   4bdb0:	f800283a 	ret

0004bdb4 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   4bdb4:	defffc04 	addi	sp,sp,-16
   4bdb8:	df000315 	stw	fp,12(sp)
   4bdbc:	df000304 	addi	fp,sp,12
   4bdc0:	e13ffe15 	stw	r4,-8(fp)
   4bdc4:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   4bdc8:	000530fa 	rdctl	r2,ienable
   4bdcc:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   4bdd0:	e0ffff17 	ldw	r3,-4(fp)
   4bdd4:	00800044 	movi	r2,1
   4bdd8:	10c4983a 	sll	r2,r2,r3
   4bddc:	1007883a 	mov	r3,r2
   4bde0:	e0bffd17 	ldw	r2,-12(fp)
   4bde4:	1884703a 	and	r2,r3,r2
   4bde8:	1004c03a 	cmpne	r2,r2,zero
}
   4bdec:	e037883a 	mov	sp,fp
   4bdf0:	df000017 	ldw	fp,0(sp)
   4bdf4:	dec00104 	addi	sp,sp,4
   4bdf8:	f800283a 	ret

0004bdfc <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   4bdfc:	defff404 	addi	sp,sp,-48
   4be00:	dfc00b15 	stw	ra,44(sp)
   4be04:	df000a15 	stw	fp,40(sp)
   4be08:	df000a04 	addi	fp,sp,40
   4be0c:	e13ffb15 	stw	r4,-20(fp)
   4be10:	e17ffc15 	stw	r5,-16(fp)
   4be14:	e1bffd15 	stw	r6,-12(fp)
   4be18:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
   4be1c:	00bffa84 	movi	r2,-22
   4be20:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   4be24:	e0bffc17 	ldw	r2,-16(fp)
   4be28:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   4be2c:	e0bff917 	ldw	r2,-28(fp)
   4be30:	10800808 	cmpgei	r2,r2,32
   4be34:	1000291e 	bne	r2,zero,4bedc <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4be38:	0005303a 	rdctl	r2,status
   4be3c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4be40:	e0fff717 	ldw	r3,-36(fp)
   4be44:	00bfff84 	movi	r2,-2
   4be48:	1884703a 	and	r2,r3,r2
   4be4c:	1001703a 	wrctl	status,r2
  
  return context;
   4be50:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   4be54:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
   4be58:	e0bff917 	ldw	r2,-28(fp)
   4be5c:	00d00034 	movhi	r3,16384
   4be60:	18c78d04 	addi	r3,r3,7732
   4be64:	100490fa 	slli	r2,r2,3
   4be68:	10c7883a 	add	r3,r2,r3
   4be6c:	e0bffd17 	ldw	r2,-12(fp)
   4be70:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
   4be74:	e0bff917 	ldw	r2,-28(fp)
   4be78:	00d00034 	movhi	r3,16384
   4be7c:	18c78d04 	addi	r3,r3,7732
   4be80:	100490fa 	slli	r2,r2,3
   4be84:	10c5883a 	add	r2,r2,r3
   4be88:	10c00104 	addi	r3,r2,4
   4be8c:	e0bffe17 	ldw	r2,-8(fp)
   4be90:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   4be94:	e0bffd17 	ldw	r2,-12(fp)
   4be98:	1005003a 	cmpeq	r2,r2,zero
   4be9c:	1000051e 	bne	r2,zero,4beb4 <alt_iic_isr_register+0xb8>
   4bea0:	e17ff917 	ldw	r5,-28(fp)
   4bea4:	e13ffb17 	ldw	r4,-20(fp)
   4bea8:	004bc780 	call	4bc78 <alt_ic_irq_enable>
   4beac:	e0bfff15 	stw	r2,-4(fp)
   4beb0:	00000406 	br	4bec4 <alt_iic_isr_register+0xc8>
   4beb4:	e17ff917 	ldw	r5,-28(fp)
   4beb8:	e13ffb17 	ldw	r4,-20(fp)
   4bebc:	004bd140 	call	4bd14 <alt_ic_irq_disable>
   4bec0:	e0bfff15 	stw	r2,-4(fp)
   4bec4:	e0bfff17 	ldw	r2,-4(fp)
   4bec8:	e0bffa15 	stw	r2,-24(fp)
   4becc:	e0bff817 	ldw	r2,-32(fp)
   4bed0:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4bed4:	e0bff617 	ldw	r2,-40(fp)
   4bed8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   4bedc:	e0bffa17 	ldw	r2,-24(fp)
}
   4bee0:	e037883a 	mov	sp,fp
   4bee4:	dfc00117 	ldw	ra,4(sp)
   4bee8:	df000017 	ldw	fp,0(sp)
   4beec:	dec00204 	addi	sp,sp,8
   4bef0:	f800283a 	ret

0004bef4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   4bef4:	defff904 	addi	sp,sp,-28
   4bef8:	dfc00615 	stw	ra,24(sp)
   4befc:	df000515 	stw	fp,20(sp)
   4bf00:	df000504 	addi	fp,sp,20
   4bf04:	e13ffc15 	stw	r4,-16(fp)
   4bf08:	e17ffd15 	stw	r5,-12(fp)
   4bf0c:	e1bffe15 	stw	r6,-8(fp)
   4bf10:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   4bf14:	e13ffd17 	ldw	r4,-12(fp)
   4bf18:	e17ffe17 	ldw	r5,-8(fp)
   4bf1c:	e1bfff17 	ldw	r6,-4(fp)
   4bf20:	004c10c0 	call	4c10c <open>
   4bf24:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   4bf28:	e0bffb17 	ldw	r2,-20(fp)
   4bf2c:	1004803a 	cmplt	r2,r2,zero
   4bf30:	10001c1e 	bne	r2,zero,4bfa4 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
   4bf34:	e0bffb17 	ldw	r2,-20(fp)
   4bf38:	00d00034 	movhi	r3,16384
   4bf3c:	18c2ee04 	addi	r3,r3,3000
   4bf40:	10800324 	muli	r2,r2,12
   4bf44:	10c5883a 	add	r2,r2,r3
   4bf48:	10c00017 	ldw	r3,0(r2)
   4bf4c:	e0bffc17 	ldw	r2,-16(fp)
   4bf50:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   4bf54:	e0bffb17 	ldw	r2,-20(fp)
   4bf58:	00d00034 	movhi	r3,16384
   4bf5c:	18c2ee04 	addi	r3,r3,3000
   4bf60:	10800324 	muli	r2,r2,12
   4bf64:	10c5883a 	add	r2,r2,r3
   4bf68:	10800104 	addi	r2,r2,4
   4bf6c:	10c00017 	ldw	r3,0(r2)
   4bf70:	e0bffc17 	ldw	r2,-16(fp)
   4bf74:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   4bf78:	e0bffb17 	ldw	r2,-20(fp)
   4bf7c:	00d00034 	movhi	r3,16384
   4bf80:	18c2ee04 	addi	r3,r3,3000
   4bf84:	10800324 	muli	r2,r2,12
   4bf88:	10c5883a 	add	r2,r2,r3
   4bf8c:	10800204 	addi	r2,r2,8
   4bf90:	10c00017 	ldw	r3,0(r2)
   4bf94:	e0bffc17 	ldw	r2,-16(fp)
   4bf98:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   4bf9c:	e13ffb17 	ldw	r4,-20(fp)
   4bfa0:	004a73c0 	call	4a73c <alt_release_fd>
  }
} 
   4bfa4:	e037883a 	mov	sp,fp
   4bfa8:	dfc00117 	ldw	ra,4(sp)
   4bfac:	df000017 	ldw	fp,0(sp)
   4bfb0:	dec00204 	addi	sp,sp,8
   4bfb4:	f800283a 	ret

0004bfb8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   4bfb8:	defffb04 	addi	sp,sp,-20
   4bfbc:	dfc00415 	stw	ra,16(sp)
   4bfc0:	df000315 	stw	fp,12(sp)
   4bfc4:	df000304 	addi	fp,sp,12
   4bfc8:	e13ffd15 	stw	r4,-12(fp)
   4bfcc:	e17ffe15 	stw	r5,-8(fp)
   4bfd0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   4bfd4:	01100034 	movhi	r4,16384
   4bfd8:	2102f104 	addi	r4,r4,3012
   4bfdc:	e17ffd17 	ldw	r5,-12(fp)
   4bfe0:	01800044 	movi	r6,1
   4bfe4:	01c07fc4 	movi	r7,511
   4bfe8:	004bef40 	call	4bef4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   4bfec:	01100034 	movhi	r4,16384
   4bff0:	2102ee04 	addi	r4,r4,3000
   4bff4:	e17ffe17 	ldw	r5,-8(fp)
   4bff8:	000d883a 	mov	r6,zero
   4bffc:	01c07fc4 	movi	r7,511
   4c000:	004bef40 	call	4bef4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   4c004:	01100034 	movhi	r4,16384
   4c008:	2102f404 	addi	r4,r4,3024
   4c00c:	e17fff17 	ldw	r5,-4(fp)
   4c010:	01800044 	movi	r6,1
   4c014:	01c07fc4 	movi	r7,511
   4c018:	004bef40 	call	4bef4 <alt_open_fd>
}  
   4c01c:	e037883a 	mov	sp,fp
   4c020:	dfc00117 	ldw	ra,4(sp)
   4c024:	df000017 	ldw	fp,0(sp)
   4c028:	dec00204 	addi	sp,sp,8
   4c02c:	f800283a 	ret

0004c030 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   4c030:	defffc04 	addi	sp,sp,-16
   4c034:	df000315 	stw	fp,12(sp)
   4c038:	df000304 	addi	fp,sp,12
   4c03c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   4c040:	e0bffe17 	ldw	r2,-8(fp)
   4c044:	10800217 	ldw	r2,8(r2)
   4c048:	10d00034 	orhi	r3,r2,16384
   4c04c:	e0bffe17 	ldw	r2,-8(fp)
   4c050:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   4c054:	e03ffd15 	stw	zero,-12(fp)
   4c058:	00002006 	br	4c0dc <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   4c05c:	e0bffd17 	ldw	r2,-12(fp)
   4c060:	00d00034 	movhi	r3,16384
   4c064:	18c2ee04 	addi	r3,r3,3000
   4c068:	10800324 	muli	r2,r2,12
   4c06c:	10c5883a 	add	r2,r2,r3
   4c070:	10c00017 	ldw	r3,0(r2)
   4c074:	e0bffe17 	ldw	r2,-8(fp)
   4c078:	10800017 	ldw	r2,0(r2)
   4c07c:	1880141e 	bne	r3,r2,4c0d0 <alt_file_locked+0xa0>
   4c080:	e0bffd17 	ldw	r2,-12(fp)
   4c084:	00d00034 	movhi	r3,16384
   4c088:	18c2ee04 	addi	r3,r3,3000
   4c08c:	10800324 	muli	r2,r2,12
   4c090:	10c5883a 	add	r2,r2,r3
   4c094:	10800204 	addi	r2,r2,8
   4c098:	10800017 	ldw	r2,0(r2)
   4c09c:	1004403a 	cmpge	r2,r2,zero
   4c0a0:	10000b1e 	bne	r2,zero,4c0d0 <alt_file_locked+0xa0>
   4c0a4:	e0bffd17 	ldw	r2,-12(fp)
   4c0a8:	10800324 	muli	r2,r2,12
   4c0ac:	1007883a 	mov	r3,r2
   4c0b0:	00900034 	movhi	r2,16384
   4c0b4:	1082ee04 	addi	r2,r2,3000
   4c0b8:	1887883a 	add	r3,r3,r2
   4c0bc:	e0bffe17 	ldw	r2,-8(fp)
   4c0c0:	18800326 	beq	r3,r2,4c0d0 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   4c0c4:	00bffcc4 	movi	r2,-13
   4c0c8:	e0bfff15 	stw	r2,-4(fp)
   4c0cc:	00000a06 	br	4c0f8 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   4c0d0:	e0bffd17 	ldw	r2,-12(fp)
   4c0d4:	10800044 	addi	r2,r2,1
   4c0d8:	e0bffd15 	stw	r2,-12(fp)
   4c0dc:	00900034 	movhi	r2,16384
   4c0e0:	10877004 	addi	r2,r2,7616
   4c0e4:	10800017 	ldw	r2,0(r2)
   4c0e8:	1007883a 	mov	r3,r2
   4c0ec:	e0bffd17 	ldw	r2,-12(fp)
   4c0f0:	18bfda2e 	bgeu	r3,r2,4c05c <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   4c0f4:	e03fff15 	stw	zero,-4(fp)
   4c0f8:	e0bfff17 	ldw	r2,-4(fp)
}
   4c0fc:	e037883a 	mov	sp,fp
   4c100:	df000017 	ldw	fp,0(sp)
   4c104:	dec00104 	addi	sp,sp,4
   4c108:	f800283a 	ret

0004c10c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   4c10c:	defff404 	addi	sp,sp,-48
   4c110:	dfc00b15 	stw	ra,44(sp)
   4c114:	df000a15 	stw	fp,40(sp)
   4c118:	df000a04 	addi	fp,sp,40
   4c11c:	e13ffb15 	stw	r4,-20(fp)
   4c120:	e17ffc15 	stw	r5,-16(fp)
   4c124:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   4c128:	00bfffc4 	movi	r2,-1
   4c12c:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
   4c130:	00bffb44 	movi	r2,-19
   4c134:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
   4c138:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   4c13c:	e13ffb17 	ldw	r4,-20(fp)
   4c140:	01500034 	movhi	r5,16384
   4c144:	29476e04 	addi	r5,r5,7608
   4c148:	004c4b80 	call	4c4b8 <alt_find_dev>
   4c14c:	e0bffa15 	stw	r2,-24(fp)
   4c150:	e0bffa17 	ldw	r2,-24(fp)
   4c154:	1004c03a 	cmpne	r2,r2,zero
   4c158:	1000051e 	bne	r2,zero,4c170 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   4c15c:	e13ffb17 	ldw	r4,-20(fp)
   4c160:	004c54c0 	call	4c54c <alt_find_file>
   4c164:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
   4c168:	00800044 	movi	r2,1
   4c16c:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   4c170:	e0bffa17 	ldw	r2,-24(fp)
   4c174:	1005003a 	cmpeq	r2,r2,zero
   4c178:	1000301e 	bne	r2,zero,4c23c <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
   4c17c:	e13ffa17 	ldw	r4,-24(fp)
   4c180:	004c66c0 	call	4c66c <alt_get_fd>
   4c184:	e0bff815 	stw	r2,-32(fp)
   4c188:	e0bff817 	ldw	r2,-32(fp)
   4c18c:	1004403a 	cmpge	r2,r2,zero
   4c190:	1000031e 	bne	r2,zero,4c1a0 <open+0x94>
    {
      status = index;
   4c194:	e0bff817 	ldw	r2,-32(fp)
   4c198:	e0bff715 	stw	r2,-36(fp)
   4c19c:	00002906 	br	4c244 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
   4c1a0:	e0bff817 	ldw	r2,-32(fp)
   4c1a4:	10800324 	muli	r2,r2,12
   4c1a8:	1007883a 	mov	r3,r2
   4c1ac:	00900034 	movhi	r2,16384
   4c1b0:	1082ee04 	addi	r2,r2,3000
   4c1b4:	1885883a 	add	r2,r3,r2
   4c1b8:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   4c1bc:	e0fffc17 	ldw	r3,-16(fp)
   4c1c0:	00900034 	movhi	r2,16384
   4c1c4:	10bfffc4 	addi	r2,r2,-1
   4c1c8:	1886703a 	and	r3,r3,r2
   4c1cc:	e0bff917 	ldw	r2,-28(fp)
   4c1d0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   4c1d4:	e0bff617 	ldw	r2,-40(fp)
   4c1d8:	1004c03a 	cmpne	r2,r2,zero
   4c1dc:	1000061e 	bne	r2,zero,4c1f8 <open+0xec>
   4c1e0:	e13ff917 	ldw	r4,-28(fp)
   4c1e4:	004c0300 	call	4c030 <alt_file_locked>
   4c1e8:	e0bff715 	stw	r2,-36(fp)
   4c1ec:	e0bff717 	ldw	r2,-36(fp)
   4c1f0:	1004803a 	cmplt	r2,r2,zero
   4c1f4:	1000131e 	bne	r2,zero,4c244 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   4c1f8:	e0bffa17 	ldw	r2,-24(fp)
   4c1fc:	10800317 	ldw	r2,12(r2)
   4c200:	1005003a 	cmpeq	r2,r2,zero
   4c204:	1000091e 	bne	r2,zero,4c22c <open+0x120>
   4c208:	e0bffa17 	ldw	r2,-24(fp)
   4c20c:	10800317 	ldw	r2,12(r2)
   4c210:	e13ff917 	ldw	r4,-28(fp)
   4c214:	e17ffb17 	ldw	r5,-20(fp)
   4c218:	e1bffc17 	ldw	r6,-16(fp)
   4c21c:	e1fffd17 	ldw	r7,-12(fp)
   4c220:	103ee83a 	callr	r2
   4c224:	e0bfff15 	stw	r2,-4(fp)
   4c228:	00000106 	br	4c230 <open+0x124>
   4c22c:	e03fff15 	stw	zero,-4(fp)
   4c230:	e0bfff17 	ldw	r2,-4(fp)
   4c234:	e0bff715 	stw	r2,-36(fp)
   4c238:	00000206 	br	4c244 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
   4c23c:	00bffb44 	movi	r2,-19
   4c240:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   4c244:	e0bff717 	ldw	r2,-36(fp)
   4c248:	1004403a 	cmpge	r2,r2,zero
   4c24c:	1000091e 	bne	r2,zero,4c274 <open+0x168>
  {
    alt_release_fd (index);  
   4c250:	e13ff817 	ldw	r4,-32(fp)
   4c254:	004a73c0 	call	4a73c <alt_release_fd>
    ALT_ERRNO = -status;
   4c258:	004c2940 	call	4c294 <alt_get_errno>
   4c25c:	e0fff717 	ldw	r3,-36(fp)
   4c260:	00c7c83a 	sub	r3,zero,r3
   4c264:	10c00015 	stw	r3,0(r2)
    return -1;
   4c268:	00bfffc4 	movi	r2,-1
   4c26c:	e0bffe15 	stw	r2,-8(fp)
   4c270:	00000206 	br	4c27c <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
   4c274:	e0bff817 	ldw	r2,-32(fp)
   4c278:	e0bffe15 	stw	r2,-8(fp)
   4c27c:	e0bffe17 	ldw	r2,-8(fp)
}
   4c280:	e037883a 	mov	sp,fp
   4c284:	dfc00117 	ldw	ra,4(sp)
   4c288:	df000017 	ldw	fp,0(sp)
   4c28c:	dec00204 	addi	sp,sp,8
   4c290:	f800283a 	ret

0004c294 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4c294:	defffd04 	addi	sp,sp,-12
   4c298:	dfc00215 	stw	ra,8(sp)
   4c29c:	df000115 	stw	fp,4(sp)
   4c2a0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   4c2a4:	00900034 	movhi	r2,16384
   4c2a8:	10877104 	addi	r2,r2,7620
   4c2ac:	10800017 	ldw	r2,0(r2)
   4c2b0:	1005003a 	cmpeq	r2,r2,zero
   4c2b4:	1000061e 	bne	r2,zero,4c2d0 <alt_get_errno+0x3c>
   4c2b8:	00900034 	movhi	r2,16384
   4c2bc:	10877104 	addi	r2,r2,7620
   4c2c0:	10800017 	ldw	r2,0(r2)
   4c2c4:	103ee83a 	callr	r2
   4c2c8:	e0bfff15 	stw	r2,-4(fp)
   4c2cc:	00000306 	br	4c2dc <alt_get_errno+0x48>
   4c2d0:	00900034 	movhi	r2,16384
   4c2d4:	10877c04 	addi	r2,r2,7664
   4c2d8:	e0bfff15 	stw	r2,-4(fp)
   4c2dc:	e0bfff17 	ldw	r2,-4(fp)
}
   4c2e0:	e037883a 	mov	sp,fp
   4c2e4:	dfc00117 	ldw	ra,4(sp)
   4c2e8:	df000017 	ldw	fp,0(sp)
   4c2ec:	dec00204 	addi	sp,sp,8
   4c2f0:	f800283a 	ret

0004c2f4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   4c2f4:	defffa04 	addi	sp,sp,-24
   4c2f8:	df000515 	stw	fp,20(sp)
   4c2fc:	df000504 	addi	fp,sp,20
   4c300:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4c304:	0005303a 	rdctl	r2,status
   4c308:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4c30c:	e0fffd17 	ldw	r3,-12(fp)
   4c310:	00bfff84 	movi	r2,-2
   4c314:	1884703a 	and	r2,r3,r2
   4c318:	1001703a 	wrctl	status,r2
  
  return context;
   4c31c:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   4c320:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
   4c324:	e0bfff17 	ldw	r2,-4(fp)
   4c328:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   4c32c:	e0bffc17 	ldw	r2,-16(fp)
   4c330:	10c00017 	ldw	r3,0(r2)
   4c334:	e0bffc17 	ldw	r2,-16(fp)
   4c338:	10800117 	ldw	r2,4(r2)
   4c33c:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
   4c340:	e0bffc17 	ldw	r2,-16(fp)
   4c344:	10c00117 	ldw	r3,4(r2)
   4c348:	e0bffc17 	ldw	r2,-16(fp)
   4c34c:	10800017 	ldw	r2,0(r2)
   4c350:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   4c354:	e0fffc17 	ldw	r3,-16(fp)
   4c358:	e0bffc17 	ldw	r2,-16(fp)
   4c35c:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
   4c360:	e0fffc17 	ldw	r3,-16(fp)
   4c364:	e0bffc17 	ldw	r2,-16(fp)
   4c368:	18800015 	stw	r2,0(r3)
   4c36c:	e0bffe17 	ldw	r2,-8(fp)
   4c370:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4c374:	e0bffb17 	ldw	r2,-20(fp)
   4c378:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   4c37c:	e037883a 	mov	sp,fp
   4c380:	df000017 	ldw	fp,0(sp)
   4c384:	dec00104 	addi	sp,sp,4
   4c388:	f800283a 	ret

0004c38c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   4c38c:	defffb04 	addi	sp,sp,-20
   4c390:	dfc00415 	stw	ra,16(sp)
   4c394:	df000315 	stw	fp,12(sp)
   4c398:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   4c39c:	d0a00e17 	ldw	r2,-32712(gp)
   4c3a0:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   4c3a4:	d0a01c17 	ldw	r2,-32656(gp)
   4c3a8:	10800044 	addi	r2,r2,1
   4c3ac:	d0a01c15 	stw	r2,-32656(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   4c3b0:	00003106 	br	4c478 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
   4c3b4:	e0bffe17 	ldw	r2,-8(fp)
   4c3b8:	10800017 	ldw	r2,0(r2)
   4c3bc:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   4c3c0:	e0bffe17 	ldw	r2,-8(fp)
   4c3c4:	10800403 	ldbu	r2,16(r2)
   4c3c8:	10803fcc 	andi	r2,r2,255
   4c3cc:	1005003a 	cmpeq	r2,r2,zero
   4c3d0:	1000051e 	bne	r2,zero,4c3e8 <alt_tick+0x5c>
   4c3d4:	d0a01c17 	ldw	r2,-32656(gp)
   4c3d8:	1004c03a 	cmpne	r2,r2,zero
   4c3dc:	1000021e 	bne	r2,zero,4c3e8 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
   4c3e0:	e0bffe17 	ldw	r2,-8(fp)
   4c3e4:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   4c3e8:	e0bffe17 	ldw	r2,-8(fp)
   4c3ec:	10c00217 	ldw	r3,8(r2)
   4c3f0:	d0a01c17 	ldw	r2,-32656(gp)
   4c3f4:	10c01e36 	bltu	r2,r3,4c470 <alt_tick+0xe4>
   4c3f8:	e0bffe17 	ldw	r2,-8(fp)
   4c3fc:	10800403 	ldbu	r2,16(r2)
   4c400:	10803fcc 	andi	r2,r2,255
   4c404:	1004c03a 	cmpne	r2,r2,zero
   4c408:	1000191e 	bne	r2,zero,4c470 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
   4c40c:	e0bffe17 	ldw	r2,-8(fp)
   4c410:	10c00317 	ldw	r3,12(r2)
   4c414:	e0bffe17 	ldw	r2,-8(fp)
   4c418:	11000517 	ldw	r4,20(r2)
   4c41c:	183ee83a 	callr	r3
   4c420:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   4c424:	e0bffd17 	ldw	r2,-12(fp)
   4c428:	1004c03a 	cmpne	r2,r2,zero
   4c42c:	1000031e 	bne	r2,zero,4c43c <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
   4c430:	e13ffe17 	ldw	r4,-8(fp)
   4c434:	004c2f40 	call	4c2f4 <alt_alarm_stop>
   4c438:	00000d06 	br	4c470 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
   4c43c:	e0bffe17 	ldw	r2,-8(fp)
   4c440:	10c00217 	ldw	r3,8(r2)
   4c444:	e0bffd17 	ldw	r2,-12(fp)
   4c448:	1887883a 	add	r3,r3,r2
   4c44c:	e0bffe17 	ldw	r2,-8(fp)
   4c450:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   4c454:	e0bffe17 	ldw	r2,-8(fp)
   4c458:	10c00217 	ldw	r3,8(r2)
   4c45c:	d0a01c17 	ldw	r2,-32656(gp)
   4c460:	1880032e 	bgeu	r3,r2,4c470 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
   4c464:	e0fffe17 	ldw	r3,-8(fp)
   4c468:	00800044 	movi	r2,1
   4c46c:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
   4c470:	e0bfff17 	ldw	r2,-4(fp)
   4c474:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   4c478:	d0e00e04 	addi	r3,gp,-32712
   4c47c:	e0bffe17 	ldw	r2,-8(fp)
   4c480:	10ffcc1e 	bne	r2,r3,4c3b4 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
   4c484:	e037883a 	mov	sp,fp
   4c488:	dfc00117 	ldw	ra,4(sp)
   4c48c:	df000017 	ldw	fp,0(sp)
   4c490:	dec00204 	addi	sp,sp,8
   4c494:	f800283a 	ret

0004c498 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   4c498:	deffff04 	addi	sp,sp,-4
   4c49c:	df000015 	stw	fp,0(sp)
   4c4a0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   4c4a4:	000170fa 	wrctl	ienable,zero
}
   4c4a8:	e037883a 	mov	sp,fp
   4c4ac:	df000017 	ldw	fp,0(sp)
   4c4b0:	dec00104 	addi	sp,sp,4
   4c4b4:	f800283a 	ret

0004c4b8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   4c4b8:	defff904 	addi	sp,sp,-28
   4c4bc:	dfc00615 	stw	ra,24(sp)
   4c4c0:	df000515 	stw	fp,20(sp)
   4c4c4:	df000504 	addi	fp,sp,20
   4c4c8:	e13ffd15 	stw	r4,-12(fp)
   4c4cc:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
   4c4d0:	e0bffe17 	ldw	r2,-8(fp)
   4c4d4:	10800017 	ldw	r2,0(r2)
   4c4d8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   4c4dc:	e13ffd17 	ldw	r4,-12(fp)
   4c4e0:	00409880 	call	40988 <strlen>
   4c4e4:	10800044 	addi	r2,r2,1
   4c4e8:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   4c4ec:	00000d06 	br	4c524 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   4c4f0:	e0bffc17 	ldw	r2,-16(fp)
   4c4f4:	11000217 	ldw	r4,8(r2)
   4c4f8:	e1bffb17 	ldw	r6,-20(fp)
   4c4fc:	e17ffd17 	ldw	r5,-12(fp)
   4c500:	004c8000 	call	4c800 <memcmp>
   4c504:	1004c03a 	cmpne	r2,r2,zero
   4c508:	1000031e 	bne	r2,zero,4c518 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   4c50c:	e0bffc17 	ldw	r2,-16(fp)
   4c510:	e0bfff15 	stw	r2,-4(fp)
   4c514:	00000706 	br	4c534 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   4c518:	e0bffc17 	ldw	r2,-16(fp)
   4c51c:	10800017 	ldw	r2,0(r2)
   4c520:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   4c524:	e0fffe17 	ldw	r3,-8(fp)
   4c528:	e0bffc17 	ldw	r2,-16(fp)
   4c52c:	10fff01e 	bne	r2,r3,4c4f0 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   4c530:	e03fff15 	stw	zero,-4(fp)
   4c534:	e0bfff17 	ldw	r2,-4(fp)
}
   4c538:	e037883a 	mov	sp,fp
   4c53c:	dfc00117 	ldw	ra,4(sp)
   4c540:	df000017 	ldw	fp,0(sp)
   4c544:	dec00204 	addi	sp,sp,8
   4c548:	f800283a 	ret

0004c54c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   4c54c:	defffa04 	addi	sp,sp,-24
   4c550:	dfc00515 	stw	ra,20(sp)
   4c554:	df000415 	stw	fp,16(sp)
   4c558:	df000404 	addi	fp,sp,16
   4c55c:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   4c560:	00900034 	movhi	r2,16384
   4c564:	10876c04 	addi	r2,r2,7600
   4c568:	10800017 	ldw	r2,0(r2)
   4c56c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   4c570:	00003306 	br	4c640 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
   4c574:	e0bffd17 	ldw	r2,-12(fp)
   4c578:	11000217 	ldw	r4,8(r2)
   4c57c:	00409880 	call	40988 <strlen>
   4c580:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
   4c584:	e0bffd17 	ldw	r2,-12(fp)
   4c588:	10c00217 	ldw	r3,8(r2)
   4c58c:	e0bffc17 	ldw	r2,-16(fp)
   4c590:	1885883a 	add	r2,r3,r2
   4c594:	10bfffc4 	addi	r2,r2,-1
   4c598:	10800003 	ldbu	r2,0(r2)
   4c59c:	10803fcc 	andi	r2,r2,255
   4c5a0:	1080201c 	xori	r2,r2,128
   4c5a4:	10bfe004 	addi	r2,r2,-128
   4c5a8:	10800bd8 	cmpnei	r2,r2,47
   4c5ac:	1000031e 	bne	r2,zero,4c5bc <alt_find_file+0x70>
    {
      len -= 1;
   4c5b0:	e0bffc17 	ldw	r2,-16(fp)
   4c5b4:	10bfffc4 	addi	r2,r2,-1
   4c5b8:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   4c5bc:	e0bffc17 	ldw	r2,-16(fp)
   4c5c0:	1007883a 	mov	r3,r2
   4c5c4:	e0bffe17 	ldw	r2,-8(fp)
   4c5c8:	1885883a 	add	r2,r3,r2
   4c5cc:	10800003 	ldbu	r2,0(r2)
   4c5d0:	10803fcc 	andi	r2,r2,255
   4c5d4:	1080201c 	xori	r2,r2,128
   4c5d8:	10bfe004 	addi	r2,r2,-128
   4c5dc:	10800be0 	cmpeqi	r2,r2,47
   4c5e0:	10000a1e 	bne	r2,zero,4c60c <alt_find_file+0xc0>
   4c5e4:	e0bffc17 	ldw	r2,-16(fp)
   4c5e8:	1007883a 	mov	r3,r2
   4c5ec:	e0bffe17 	ldw	r2,-8(fp)
   4c5f0:	1885883a 	add	r2,r3,r2
   4c5f4:	10800003 	ldbu	r2,0(r2)
   4c5f8:	10803fcc 	andi	r2,r2,255
   4c5fc:	1080201c 	xori	r2,r2,128
   4c600:	10bfe004 	addi	r2,r2,-128
   4c604:	1004c03a 	cmpne	r2,r2,zero
   4c608:	10000a1e 	bne	r2,zero,4c634 <alt_find_file+0xe8>
   4c60c:	e0bffd17 	ldw	r2,-12(fp)
   4c610:	11000217 	ldw	r4,8(r2)
   4c614:	e1bffc17 	ldw	r6,-16(fp)
   4c618:	e17ffe17 	ldw	r5,-8(fp)
   4c61c:	004c8000 	call	4c800 <memcmp>
   4c620:	1004c03a 	cmpne	r2,r2,zero
   4c624:	1000031e 	bne	r2,zero,4c634 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   4c628:	e0bffd17 	ldw	r2,-12(fp)
   4c62c:	e0bfff15 	stw	r2,-4(fp)
   4c630:	00000806 	br	4c654 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
   4c634:	e0bffd17 	ldw	r2,-12(fp)
   4c638:	10800017 	ldw	r2,0(r2)
   4c63c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   4c640:	00d00034 	movhi	r3,16384
   4c644:	18c76c04 	addi	r3,r3,7600
   4c648:	e0bffd17 	ldw	r2,-12(fp)
   4c64c:	10ffc91e 	bne	r2,r3,4c574 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   4c650:	e03fff15 	stw	zero,-4(fp)
   4c654:	e0bfff17 	ldw	r2,-4(fp)
}
   4c658:	e037883a 	mov	sp,fp
   4c65c:	dfc00117 	ldw	ra,4(sp)
   4c660:	df000017 	ldw	fp,0(sp)
   4c664:	dec00204 	addi	sp,sp,8
   4c668:	f800283a 	ret

0004c66c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   4c66c:	defffc04 	addi	sp,sp,-16
   4c670:	df000315 	stw	fp,12(sp)
   4c674:	df000304 	addi	fp,sp,12
   4c678:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   4c67c:	00bffa04 	movi	r2,-24
   4c680:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   4c684:	e03ffe15 	stw	zero,-8(fp)
   4c688:	00001e06 	br	4c704 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
   4c68c:	e0bffe17 	ldw	r2,-8(fp)
   4c690:	00d00034 	movhi	r3,16384
   4c694:	18c2ee04 	addi	r3,r3,3000
   4c698:	10800324 	muli	r2,r2,12
   4c69c:	10c5883a 	add	r2,r2,r3
   4c6a0:	10800017 	ldw	r2,0(r2)
   4c6a4:	1004c03a 	cmpne	r2,r2,zero
   4c6a8:	1000131e 	bne	r2,zero,4c6f8 <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
   4c6ac:	e0bffe17 	ldw	r2,-8(fp)
   4c6b0:	00d00034 	movhi	r3,16384
   4c6b4:	18c2ee04 	addi	r3,r3,3000
   4c6b8:	10800324 	muli	r2,r2,12
   4c6bc:	10c7883a 	add	r3,r2,r3
   4c6c0:	e0bfff17 	ldw	r2,-4(fp)
   4c6c4:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
   4c6c8:	00900034 	movhi	r2,16384
   4c6cc:	10877004 	addi	r2,r2,7616
   4c6d0:	10c00017 	ldw	r3,0(r2)
   4c6d4:	e0bffe17 	ldw	r2,-8(fp)
   4c6d8:	1880040e 	bge	r3,r2,4c6ec <alt_get_fd+0x80>
      {
        alt_max_fd = i;
   4c6dc:	00d00034 	movhi	r3,16384
   4c6e0:	18c77004 	addi	r3,r3,7616
   4c6e4:	e0bffe17 	ldw	r2,-8(fp)
   4c6e8:	18800015 	stw	r2,0(r3)
      }
      rc = i;
   4c6ec:	e0bffe17 	ldw	r2,-8(fp)
   4c6f0:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   4c6f4:	00000606 	br	4c710 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   4c6f8:	e0bffe17 	ldw	r2,-8(fp)
   4c6fc:	10800044 	addi	r2,r2,1
   4c700:	e0bffe15 	stw	r2,-8(fp)
   4c704:	e0bffe17 	ldw	r2,-8(fp)
   4c708:	10800810 	cmplti	r2,r2,32
   4c70c:	103fdf1e 	bne	r2,zero,4c68c <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   4c710:	e0bffd17 	ldw	r2,-12(fp)
}
   4c714:	e037883a 	mov	sp,fp
   4c718:	df000017 	ldw	fp,0(sp)
   4c71c:	dec00104 	addi	sp,sp,4
   4c720:	f800283a 	ret

0004c724 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   4c724:	defffb04 	addi	sp,sp,-20
   4c728:	df000415 	stw	fp,16(sp)
   4c72c:	df000404 	addi	fp,sp,16
   4c730:	e13ffe15 	stw	r4,-8(fp)
   4c734:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   4c738:	e0bfff17 	ldw	r2,-4(fp)
   4c73c:	10840070 	cmpltui	r2,r2,4097
   4c740:	1000021e 	bne	r2,zero,4c74c <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   4c744:	00840004 	movi	r2,4096
   4c748:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   4c74c:	e0fffe17 	ldw	r3,-8(fp)
   4c750:	e0bfff17 	ldw	r2,-4(fp)
   4c754:	1885883a 	add	r2,r3,r2
   4c758:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   4c75c:	e0bffe17 	ldw	r2,-8(fp)
   4c760:	e0bffd15 	stw	r2,-12(fp)
   4c764:	00000506 	br	4c77c <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   4c768:	e0bffd17 	ldw	r2,-12(fp)
   4c76c:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   4c770:	e0bffd17 	ldw	r2,-12(fp)
   4c774:	10800804 	addi	r2,r2,32
   4c778:	e0bffd15 	stw	r2,-12(fp)
   4c77c:	e0fffd17 	ldw	r3,-12(fp)
   4c780:	e0bffc17 	ldw	r2,-16(fp)
   4c784:	18bff836 	bltu	r3,r2,4c768 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   4c788:	e0bffe17 	ldw	r2,-8(fp)
   4c78c:	108007cc 	andi	r2,r2,31
   4c790:	1005003a 	cmpeq	r2,r2,zero
   4c794:	1000021e 	bne	r2,zero,4c7a0 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   4c798:	e0bffd17 	ldw	r2,-12(fp)
   4c79c:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   4c7a0:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   4c7a4:	e037883a 	mov	sp,fp
   4c7a8:	df000017 	ldw	fp,0(sp)
   4c7ac:	dec00104 	addi	sp,sp,4
   4c7b0:	f800283a 	ret

0004c7b4 <atexit>:
   4c7b4:	200b883a 	mov	r5,r4
   4c7b8:	000d883a 	mov	r6,zero
   4c7bc:	0009883a 	mov	r4,zero
   4c7c0:	000f883a 	mov	r7,zero
   4c7c4:	004c8741 	jmpi	4c874 <__register_exitproc>

0004c7c8 <exit>:
   4c7c8:	defffe04 	addi	sp,sp,-8
   4c7cc:	000b883a 	mov	r5,zero
   4c7d0:	dc000015 	stw	r16,0(sp)
   4c7d4:	dfc00115 	stw	ra,4(sp)
   4c7d8:	2021883a 	mov	r16,r4
   4c7dc:	004c9ac0 	call	4c9ac <__call_exitprocs>
   4c7e0:	00900034 	movhi	r2,16384
   4c7e4:	10876704 	addi	r2,r2,7580
   4c7e8:	11000017 	ldw	r4,0(r2)
   4c7ec:	20800f17 	ldw	r2,60(r4)
   4c7f0:	10000126 	beq	r2,zero,4c7f8 <exit+0x30>
   4c7f4:	103ee83a 	callr	r2
   4c7f8:	8009883a 	mov	r4,r16
   4c7fc:	004cb9c0 	call	4cb9c <_exit>

0004c800 <memcmp>:
   4c800:	00c000c4 	movi	r3,3
   4c804:	1980032e 	bgeu	r3,r6,4c814 <memcmp+0x14>
   4c808:	2144b03a 	or	r2,r4,r5
   4c80c:	10c4703a 	and	r2,r2,r3
   4c810:	10000f26 	beq	r2,zero,4c850 <memcmp+0x50>
   4c814:	31ffffc4 	addi	r7,r6,-1
   4c818:	3000061e 	bne	r6,zero,4c834 <memcmp+0x34>
   4c81c:	00000a06 	br	4c848 <memcmp+0x48>
   4c820:	39ffffc4 	addi	r7,r7,-1
   4c824:	00bfffc4 	movi	r2,-1
   4c828:	21000044 	addi	r4,r4,1
   4c82c:	29400044 	addi	r5,r5,1
   4c830:	38800526 	beq	r7,r2,4c848 <memcmp+0x48>
   4c834:	20c00003 	ldbu	r3,0(r4)
   4c838:	28800003 	ldbu	r2,0(r5)
   4c83c:	18bff826 	beq	r3,r2,4c820 <memcmp+0x20>
   4c840:	1885c83a 	sub	r2,r3,r2
   4c844:	f800283a 	ret
   4c848:	0005883a 	mov	r2,zero
   4c84c:	f800283a 	ret
   4c850:	180f883a 	mov	r7,r3
   4c854:	20c00017 	ldw	r3,0(r4)
   4c858:	28800017 	ldw	r2,0(r5)
   4c85c:	18bfed1e 	bne	r3,r2,4c814 <memcmp+0x14>
   4c860:	31bfff04 	addi	r6,r6,-4
   4c864:	21000104 	addi	r4,r4,4
   4c868:	29400104 	addi	r5,r5,4
   4c86c:	39bff936 	bltu	r7,r6,4c854 <memcmp+0x54>
   4c870:	003fe806 	br	4c814 <memcmp+0x14>

0004c874 <__register_exitproc>:
   4c874:	defffa04 	addi	sp,sp,-24
   4c878:	00900034 	movhi	r2,16384
   4c87c:	10876704 	addi	r2,r2,7580
   4c880:	dc000015 	stw	r16,0(sp)
   4c884:	14000017 	ldw	r16,0(r2)
   4c888:	dd000415 	stw	r20,16(sp)
   4c88c:	2829883a 	mov	r20,r5
   4c890:	81405217 	ldw	r5,328(r16)
   4c894:	dcc00315 	stw	r19,12(sp)
   4c898:	dc800215 	stw	r18,8(sp)
   4c89c:	dc400115 	stw	r17,4(sp)
   4c8a0:	dfc00515 	stw	ra,20(sp)
   4c8a4:	2023883a 	mov	r17,r4
   4c8a8:	3027883a 	mov	r19,r6
   4c8ac:	3825883a 	mov	r18,r7
   4c8b0:	28002526 	beq	r5,zero,4c948 <__register_exitproc+0xd4>
   4c8b4:	29000117 	ldw	r4,4(r5)
   4c8b8:	008007c4 	movi	r2,31
   4c8bc:	11002716 	blt	r2,r4,4c95c <__register_exitproc+0xe8>
   4c8c0:	8800101e 	bne	r17,zero,4c904 <__register_exitproc+0x90>
   4c8c4:	2105883a 	add	r2,r4,r4
   4c8c8:	1085883a 	add	r2,r2,r2
   4c8cc:	20c00044 	addi	r3,r4,1
   4c8d0:	1145883a 	add	r2,r2,r5
   4c8d4:	0009883a 	mov	r4,zero
   4c8d8:	15000215 	stw	r20,8(r2)
   4c8dc:	28c00115 	stw	r3,4(r5)
   4c8e0:	2005883a 	mov	r2,r4
   4c8e4:	dfc00517 	ldw	ra,20(sp)
   4c8e8:	dd000417 	ldw	r20,16(sp)
   4c8ec:	dcc00317 	ldw	r19,12(sp)
   4c8f0:	dc800217 	ldw	r18,8(sp)
   4c8f4:	dc400117 	ldw	r17,4(sp)
   4c8f8:	dc000017 	ldw	r16,0(sp)
   4c8fc:	dec00604 	addi	sp,sp,24
   4c900:	f800283a 	ret
   4c904:	29802204 	addi	r6,r5,136
   4c908:	00800044 	movi	r2,1
   4c90c:	110e983a 	sll	r7,r2,r4
   4c910:	30c04017 	ldw	r3,256(r6)
   4c914:	2105883a 	add	r2,r4,r4
   4c918:	1085883a 	add	r2,r2,r2
   4c91c:	1185883a 	add	r2,r2,r6
   4c920:	19c6b03a 	or	r3,r3,r7
   4c924:	14802015 	stw	r18,128(r2)
   4c928:	14c00015 	stw	r19,0(r2)
   4c92c:	00800084 	movi	r2,2
   4c930:	30c04015 	stw	r3,256(r6)
   4c934:	88bfe31e 	bne	r17,r2,4c8c4 <__register_exitproc+0x50>
   4c938:	30804117 	ldw	r2,260(r6)
   4c93c:	11c4b03a 	or	r2,r2,r7
   4c940:	30804115 	stw	r2,260(r6)
   4c944:	003fdf06 	br	4c8c4 <__register_exitproc+0x50>
   4c948:	00900034 	movhi	r2,16384
   4c94c:	1087cd04 	addi	r2,r2,7988
   4c950:	100b883a 	mov	r5,r2
   4c954:	80805215 	stw	r2,328(r16)
   4c958:	003fd606 	br	4c8b4 <__register_exitproc+0x40>
   4c95c:	00800034 	movhi	r2,0
   4c960:	10800004 	addi	r2,r2,0
   4c964:	1000021e 	bne	r2,zero,4c970 <__register_exitproc+0xfc>
   4c968:	013fffc4 	movi	r4,-1
   4c96c:	003fdc06 	br	4c8e0 <__register_exitproc+0x6c>
   4c970:	01006404 	movi	r4,400
   4c974:	103ee83a 	callr	r2
   4c978:	1007883a 	mov	r3,r2
   4c97c:	103ffa26 	beq	r2,zero,4c968 <__register_exitproc+0xf4>
   4c980:	80805217 	ldw	r2,328(r16)
   4c984:	180b883a 	mov	r5,r3
   4c988:	18000115 	stw	zero,4(r3)
   4c98c:	18800015 	stw	r2,0(r3)
   4c990:	80c05215 	stw	r3,328(r16)
   4c994:	18006215 	stw	zero,392(r3)
   4c998:	18006315 	stw	zero,396(r3)
   4c99c:	0009883a 	mov	r4,zero
   4c9a0:	883fc826 	beq	r17,zero,4c8c4 <__register_exitproc+0x50>
   4c9a4:	003fd706 	br	4c904 <__register_exitproc+0x90>

0004c9a8 <register_fini>:
   4c9a8:	f800283a 	ret

0004c9ac <__call_exitprocs>:
   4c9ac:	00900034 	movhi	r2,16384
   4c9b0:	10876704 	addi	r2,r2,7580
   4c9b4:	10800017 	ldw	r2,0(r2)
   4c9b8:	defff304 	addi	sp,sp,-52
   4c9bc:	df000b15 	stw	fp,44(sp)
   4c9c0:	d8800115 	stw	r2,4(sp)
   4c9c4:	00800034 	movhi	r2,0
   4c9c8:	10800004 	addi	r2,r2,0
   4c9cc:	1005003a 	cmpeq	r2,r2,zero
   4c9d0:	d8800215 	stw	r2,8(sp)
   4c9d4:	d8800117 	ldw	r2,4(sp)
   4c9d8:	dd400815 	stw	r21,32(sp)
   4c9dc:	dd000715 	stw	r20,28(sp)
   4c9e0:	10805204 	addi	r2,r2,328
   4c9e4:	dfc00c15 	stw	ra,48(sp)
   4c9e8:	ddc00a15 	stw	r23,40(sp)
   4c9ec:	dd800915 	stw	r22,36(sp)
   4c9f0:	dcc00615 	stw	r19,24(sp)
   4c9f4:	dc800515 	stw	r18,20(sp)
   4c9f8:	dc400415 	stw	r17,16(sp)
   4c9fc:	dc000315 	stw	r16,12(sp)
   4ca00:	282b883a 	mov	r21,r5
   4ca04:	2039883a 	mov	fp,r4
   4ca08:	d8800015 	stw	r2,0(sp)
   4ca0c:	2829003a 	cmpeq	r20,r5,zero
   4ca10:	d8800117 	ldw	r2,4(sp)
   4ca14:	14405217 	ldw	r17,328(r2)
   4ca18:	88001026 	beq	r17,zero,4ca5c <__call_exitprocs+0xb0>
   4ca1c:	ddc00017 	ldw	r23,0(sp)
   4ca20:	88800117 	ldw	r2,4(r17)
   4ca24:	8c802204 	addi	r18,r17,136
   4ca28:	143fffc4 	addi	r16,r2,-1
   4ca2c:	80000916 	blt	r16,zero,4ca54 <__call_exitprocs+0xa8>
   4ca30:	05bfffc4 	movi	r22,-1
   4ca34:	a000151e 	bne	r20,zero,4ca8c <__call_exitprocs+0xe0>
   4ca38:	8409883a 	add	r4,r16,r16
   4ca3c:	2105883a 	add	r2,r4,r4
   4ca40:	1485883a 	add	r2,r2,r18
   4ca44:	10c02017 	ldw	r3,128(r2)
   4ca48:	a8c01126 	beq	r21,r3,4ca90 <__call_exitprocs+0xe4>
   4ca4c:	843fffc4 	addi	r16,r16,-1
   4ca50:	85bff81e 	bne	r16,r22,4ca34 <__call_exitprocs+0x88>
   4ca54:	d8800217 	ldw	r2,8(sp)
   4ca58:	10003126 	beq	r2,zero,4cb20 <__call_exitprocs+0x174>
   4ca5c:	dfc00c17 	ldw	ra,48(sp)
   4ca60:	df000b17 	ldw	fp,44(sp)
   4ca64:	ddc00a17 	ldw	r23,40(sp)
   4ca68:	dd800917 	ldw	r22,36(sp)
   4ca6c:	dd400817 	ldw	r21,32(sp)
   4ca70:	dd000717 	ldw	r20,28(sp)
   4ca74:	dcc00617 	ldw	r19,24(sp)
   4ca78:	dc800517 	ldw	r18,20(sp)
   4ca7c:	dc400417 	ldw	r17,16(sp)
   4ca80:	dc000317 	ldw	r16,12(sp)
   4ca84:	dec00d04 	addi	sp,sp,52
   4ca88:	f800283a 	ret
   4ca8c:	8409883a 	add	r4,r16,r16
   4ca90:	88c00117 	ldw	r3,4(r17)
   4ca94:	2105883a 	add	r2,r4,r4
   4ca98:	1445883a 	add	r2,r2,r17
   4ca9c:	18ffffc4 	addi	r3,r3,-1
   4caa0:	11800217 	ldw	r6,8(r2)
   4caa4:	1c001526 	beq	r3,r16,4cafc <__call_exitprocs+0x150>
   4caa8:	10000215 	stw	zero,8(r2)
   4caac:	303fe726 	beq	r6,zero,4ca4c <__call_exitprocs+0xa0>
   4cab0:	00c00044 	movi	r3,1
   4cab4:	1c06983a 	sll	r3,r3,r16
   4cab8:	90804017 	ldw	r2,256(r18)
   4cabc:	8cc00117 	ldw	r19,4(r17)
   4cac0:	1884703a 	and	r2,r3,r2
   4cac4:	10001426 	beq	r2,zero,4cb18 <__call_exitprocs+0x16c>
   4cac8:	90804117 	ldw	r2,260(r18)
   4cacc:	1884703a 	and	r2,r3,r2
   4cad0:	10000c1e 	bne	r2,zero,4cb04 <__call_exitprocs+0x158>
   4cad4:	2105883a 	add	r2,r4,r4
   4cad8:	1485883a 	add	r2,r2,r18
   4cadc:	11400017 	ldw	r5,0(r2)
   4cae0:	e009883a 	mov	r4,fp
   4cae4:	303ee83a 	callr	r6
   4cae8:	88800117 	ldw	r2,4(r17)
   4caec:	98bfc81e 	bne	r19,r2,4ca10 <__call_exitprocs+0x64>
   4caf0:	b8800017 	ldw	r2,0(r23)
   4caf4:	147fd526 	beq	r2,r17,4ca4c <__call_exitprocs+0xa0>
   4caf8:	003fc506 	br	4ca10 <__call_exitprocs+0x64>
   4cafc:	8c000115 	stw	r16,4(r17)
   4cb00:	003fea06 	br	4caac <__call_exitprocs+0x100>
   4cb04:	2105883a 	add	r2,r4,r4
   4cb08:	1485883a 	add	r2,r2,r18
   4cb0c:	11000017 	ldw	r4,0(r2)
   4cb10:	303ee83a 	callr	r6
   4cb14:	003ff406 	br	4cae8 <__call_exitprocs+0x13c>
   4cb18:	303ee83a 	callr	r6
   4cb1c:	003ff206 	br	4cae8 <__call_exitprocs+0x13c>
   4cb20:	88800117 	ldw	r2,4(r17)
   4cb24:	1000081e 	bne	r2,zero,4cb48 <__call_exitprocs+0x19c>
   4cb28:	89000017 	ldw	r4,0(r17)
   4cb2c:	20000726 	beq	r4,zero,4cb4c <__call_exitprocs+0x1a0>
   4cb30:	b9000015 	stw	r4,0(r23)
   4cb34:	8809883a 	mov	r4,r17
   4cb38:	00000000 	call	0 <__reset-0x40000>
   4cb3c:	bc400017 	ldw	r17,0(r23)
   4cb40:	883fb71e 	bne	r17,zero,4ca20 <__call_exitprocs+0x74>
   4cb44:	003fc506 	br	4ca5c <__call_exitprocs+0xb0>
   4cb48:	89000017 	ldw	r4,0(r17)
   4cb4c:	882f883a 	mov	r23,r17
   4cb50:	2023883a 	mov	r17,r4
   4cb54:	883fb21e 	bne	r17,zero,4ca20 <__call_exitprocs+0x74>
   4cb58:	003fc006 	br	4ca5c <__call_exitprocs+0xb0>

0004cb5c <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
   4cb5c:	defffd04 	addi	sp,sp,-12
   4cb60:	df000215 	stw	fp,8(sp)
   4cb64:	df000204 	addi	fp,sp,8
   4cb68:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
   4cb6c:	e0bfff17 	ldw	r2,-4(fp)
   4cb70:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   4cb74:	e0bffe17 	ldw	r2,-8(fp)
   4cb78:	1005003a 	cmpeq	r2,r2,zero
   4cb7c:	1000021e 	bne	r2,zero,4cb88 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
   4cb80:	002af070 	cmpltui	zero,zero,43969
   4cb84:	00000106 	br	4cb8c <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
   4cb88:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
   4cb8c:	e037883a 	mov	sp,fp
   4cb90:	df000017 	ldw	fp,0(sp)
   4cb94:	dec00104 	addi	sp,sp,4
   4cb98:	f800283a 	ret

0004cb9c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   4cb9c:	defffd04 	addi	sp,sp,-12
   4cba0:	dfc00215 	stw	ra,8(sp)
   4cba4:	df000115 	stw	fp,4(sp)
   4cba8:	df000104 	addi	fp,sp,4
   4cbac:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
   4cbb0:	e13fff17 	ldw	r4,-4(fp)
   4cbb4:	004cb5c0 	call	4cb5c <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   4cbb8:	003fff06 	br	4cbb8 <_exit+0x1c>
   4cbbc:	0004c9a8 	cmpgeui	zero,zero,4902
