
camera_nios_2.elf:     file format elf32-littlenios2
camera_nios_2.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000401b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00040000 paddr 0x00040000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00040020 paddr 0x00040020 align 2**12
         filesz 0x0000cda0 memsz 0x0000cda0 flags r-x
    LOAD off    0x0000e000 vaddr 0x40000000 paddr 0x0004cdc0 align 2**12
         filesz 0x00001df0 memsz 0x000020dc flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00040000  00040000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00040020  00040020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000cc0c  000401b4  000401b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000394  40000000  0004cdc0  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a5c  40000394  0004d154  0000e394  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002ec  40001df0  0004ebb0  0000fdf0  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  0000fdf0  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000cd8  00000000  00000000  0000fe18  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 0000139d  00000000  00000000  00010af0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00023358  00000000  00000000  00011e8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000079f8  00000000  00000000  000351e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00013efa  00000000  00000000  0003cbdd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  0000188c  00000000  00000000  00050ad8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002229  00000000  00000000  00052364  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000bcb9  00000000  00000000  0005458d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  00060248  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000928  00000000  00000000  000602a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00063b77  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000a  00000000  00000000  00063b7a  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00063b84  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00063b85  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00063b86  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00063b8a  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00063b8e  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  00063b92  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  00063b9b  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  00063ba4  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000008  00000000  00000000  00063bad  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000034  00000000  00000000  00063bb5  2**0
                  CONTENTS, READONLY
 29 .jdi          00004d22  00000000  00000000  00063be9  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     000a0d3f  00000000  00000000  0006890b  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00040000 l    d  .entry	00000000 .entry
00040020 l    d  .exceptions	00000000 .exceptions
000401b4 l    d  .text	00000000 .text
40000000 l    d  .rodata	00000000 .rodata
40000394 l    d  .rwdata	00000000 .rwdata
40001df0 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000401fc l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 camera.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00040a80 l     F .text	00000058 __sprint_r
400000ca l     O .rodata	00000010 blanks.3452
400000ba l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00042ae4 l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
000444e0 l     F .text	00000058 std
000445ec l     F .text	00000008 __fp_lock
000445f4 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
40000394 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 locale.c
40001dbc l     O .rwdata	00000004 charset
40000100 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
40000248 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00048780 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0004989c l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
0004a078 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0004a0d8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0004a1d8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0004a2f8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0004a3d8 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0004a534 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0004a760 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
40001de0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0004aa2c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
40000d50 l     O .rwdata	00001060 jtag_uart
0004ab1c l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0004ad5c l     F .text	00000228 altera_avalon_jtag_uart_irq
0004af84 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0004b838 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0004bcd0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0004c0f4 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0004c230 l     F .text	000000dc alt_file_locked
0004c494 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0004cba8 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
0004cd5c l     F .text	00000040 alt_sim_halt
0004629c g     F .text	00000094 _mprec_log10
00046388 g     F .text	00000088 __any_on
00047a94 g     F .text	00000070 _isatty_r
40000220 g     O .rodata	00000028 __mprec_tinytens
0004a594 g     F .text	0000006c alt_main
00040958 g     F .text	000000a0 _puts_r
40001e4c g     O .bss	00000100 alt_irq
00047b04 g     F .text	00000078 _lseek_r
0004d154 g       *ABS*	00000000 __flash_rwdata_start
00049290 g     F .text	00000088 __eqdf2
400020dc g       *ABS*	00000000 __alt_heap_start
000408e0 g     F .text	00000044 printf
00047560 g     F .text	00000068 __sseek
00044548 g     F .text	000000a4 __sinit
00045220 g     F .text	00000084 _setlocale_r
00044648 g     F .text	00000068 __sfmoreglue
0004a620 g     F .text	00000020 __malloc_unlock
00045d18 g     F .text	000000e0 memmove
00044638 g     F .text	00000010 _cleanup
00046410 g     F .text	000000bc _Balloc
000493a0 g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
00040000 g     F .entry	0000001c __reset
00040020 g       *ABS*	00000000 __flash_exceptions_start
00047a20 g     F .text	00000074 _fstat_r
40001e08 g     O .bss	00000004 errno
40001e10 g     O .bss	00000004 alt_argv
40009db0 g       *ABS*	00000000 _gp
0004a8dc g     F .text	00000030 usleep
40000bd0 g     O .rwdata	00000180 alt_fd_list
0004c6b8 g     F .text	00000094 alt_find_dev
00045c78 g     F .text	000000a0 memcpy
0004462c g     F .text	0000000c _cleanup_r
00049538 g     F .text	000000f8 __floatsidf
0004c1b8 g     F .text	00000078 alt_io_redirect
000494b0 g     F .text	00000088 __ltdf2
0004cdc0 g       *ABS*	00000000 __DTOR_END__
000409f8 g     F .text	00000014 puts
000461ec g     F .text	000000b0 __ratio
0004b19c g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00040924 g     F .text	00000034 _printf_r
000499d8 g     F .text	00000008 __udivsi3
0004a238 g     F .text	000000c0 isatty
40000130 g     O .rodata	000000c8 __mprec_tens
000451fc g     F .text	00000008 __locale_charset
0004c924 g     F .text	00000090 alt_icache_flush
40001dfc g     O .bss	00000004 __malloc_top_pad
40001db8 g     O .rwdata	00000004 __mb_cur_max
00045204 g     F .text	0000000c _localeconv_r
00046b08 g     F .text	0000003c __i2b
00044be0 g     F .text	0000049c __sfvwrite_r
000474e8 g     F .text	00000070 _sbrk_r
00047b7c g     F .text	00000078 _read_r
40000794 g     O .rwdata	0000000c __lc_ctype
40001dd8 g     O .rwdata	00000004 alt_max_fd
00049d7c g     F .text	00000138 __unpack_d
000478fc g     F .text	00000110 _fclose_r
000444ac g     F .text	00000034 fflush
40001e00 g     O .bss	00000004 __malloc_max_sbrked_mem
00048c10 g     F .text	00000074 __adddf3
000460cc g     F .text	00000120 __b2d
000481d0 g     F .text	000005b0 __umoddi3
0004a444 g     F .text	000000f0 lseek
40001db4 g     O .rwdata	00000004 _global_impure_ptr
00046e84 g     F .text	000005f4 _realloc_r
400020dc g       *ABS*	00000000 __bss_end
0004bffc g     F .text	000000f8 alt_iic_isr_register
0004c58c g     F .text	0000010c alt_tick
00047bf4 g     F .text	000005dc __udivdi3
400001f8 g     O .rodata	00000028 __mprec_bigtens
00046d64 g     F .text	00000120 __s2b
00049708 g     F .text	00000194 __floatunsidf
00045fec g     F .text	00000060 __mcmp
00044614 g     F .text	00000018 __fp_lock_all
0004bfb4 g     F .text	00000048 alt_ic_irq_enabled
0004c4f4 g     F .text	00000098 alt_alarm_stop
40001e18 g     O .bss	00000004 alt_irq_active
000400ec g     F .exceptions	000000c8 alt_irq_handler
40000ba8 g     O .rwdata	00000028 alt_dev_null
0004bbd8 g     F .text	00000044 alt_dcache_flush_all
00045eb8 g     F .text	00000070 __hi0bits
00049630 g     F .text	000000d8 __fixdfsi
40001df0 g       *ABS*	00000000 __ram_rwdata_end
00040000 g       *ABS*	00000000 __alt_mem_onchip_memory
40001dd0 g     O .rwdata	00000008 alt_dev_list
0004a90c g     F .text	00000120 write
40000394 g       *ABS*	00000000 __ram_rodata_end
0004a104 g     F .text	000000d4 fstat
00046c44 g     F .text	00000120 __pow5mult
40001df0 g     O .bss	00000004 __nlocale_changed
000499e0 g     F .text	00000008 __umodsi3
400020dc g       *ABS*	00000000 end
0004ac9c g     F .text	000000c0 altera_avalon_jtag_uart_init
0004cdbc g       *ABS*	00000000 __CTOR_LIST__
80000000 g       *ABS*	00000000 __alt_stack_pointer
0004b8a8 g     F .text	00000090 alt_avalon_timer_sc_init
000499e8 g     F .text	00000080 __clzsi2
0004b3c0 g     F .text	00000240 altera_avalon_jtag_uart_write
00044538 g     F .text	00000004 __sfp_lock_acquire
00045b94 g     F .text	000000e4 memchr
00040ad8 g     F .text	00001eac ___vfprintf_internal_r
000448cc g     F .text	00000314 _free_r
0004cbac g     F .text	000001b0 __call_exitprocs
40001df4 g     O .bss	00000004 __mlocale_changed
40001dc4 g     O .rwdata	00000004 __malloc_sbrk_base
000401b4 g     F .text	0000004c _start
40001e1c g     O .bss	00000004 _alt_tick_rate
000467d4 g     F .text	0000014c __lshift
0004b600 g     F .text	00000238 alt_avalon_spi_command
40001e20 g     O .bss	00000004 _alt_nticks
0004a640 g     F .text	00000120 read
0004aac0 g     F .text	0000005c alt_sys_init
0004ca74 g     F .text	00000134 __register_exitproc
00046920 g     F .text	000001e8 __multiply
0004b034 g     F .text	00000074 altera_avalon_jtag_uart_close
40000394 g       *ABS*	00000000 __ram_rwdata_start
40000000 g       *ABS*	00000000 __ram_rodata_start
40001e24 g     O .bss	00000028 __malloc_current_mallinfo
000464cc g     F .text	0000017c __d2b
0004ab54 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0004c86c g     F .text	000000b8 alt_get_fd
0004ba8c g     F .text	0000014c alt_busy_sleep
00049eb4 g     F .text	000000c8 __fpcmp_parts_d
0004788c g     F .text	00000070 _close_r
0004ca00 g     F .text	00000074 memcmp
0004ac04 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
400020dc g       *ABS*	00000000 __alt_stack_base
0004ac4c g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
000429a8 g     F .text	0000013c __swsetup_r
00049038 g     F .text	00000258 __divdf3
000446b0 g     F .text	000000f0 __sfp
00046330 g     F .text	00000058 __copybits
400007a0 g     O .rwdata	00000408 __malloc_av_
00044544 g     F .text	00000004 __sinit_lock_release
00048c84 g     F .text	000003b4 __muldf3
00047644 g     F .text	00000060 __sread
0004c74c g     F .text	00000120 alt_find_file
0004bc1c g     F .text	000000b4 alt_dev_llist_insert
0004a600 g     F .text	00000020 __malloc_lock
0004a820 g     F .text	000000bc sbrk
000442b0 g     F .text	000001fc _fflush_r
000477d8 g     F .text	000000b4 _calloc_r
40001df0 g       *ABS*	00000000 __bss_start
00045df8 g     F .text	00000098 memset
000407f8 g     F .text	000000e8 main
40001e14 g     O .bss	00000004 alt_envp
40001e04 g     O .bss	00000004 __malloc_max_total_mem
0004abac g     F .text	00000058 altera_avalon_jtag_uart_write_fd
00047558 g     F .text	00000008 __sclose
80000000 g       *ABS*	00000000 __alt_heap_limit
00047a0c g     F .text	00000014 fclose
40001f4c g     O .bss	00000190 _atexit0
00042cfc g     F .text	000015b4 _dtoa_r
00045454 g     F .text	00000740 _malloc_r
40001ddc g     O .rwdata	00000004 alt_errno
40000000 g       *ABS*	00000000 __alt_mem_mem_if_ddr2_emif
00045144 g     F .text	000000b8 _fwalk
00049918 g     F .text	00000060 __divsi3
40000254 g     O .rodata	00000014 __thenan_df
000447a0 g     F .text	0000012c _malloc_trim_r
0004cdc0 g       *ABS*	00000000 __CTOR_END__
000476a4 g     F .text	000000bc strcmp
0004cdc0 g       *ABS*	00000000 __flash_rodata_start
0004cdc0 g       *ABS*	00000000 __DTOR_LIST__
00049318 g     F .text	00000088 __nedf2
0004aa8c g     F .text	00000034 alt_irq_init
0004a7c0 g     F .text	00000060 alt_release_fd
40000268 g     O .rodata	00000100 __clz_tab
40001df8 g     O .bss	00000004 _PathLocale
0004c9b4 g     F .text	00000014 atexit
00047760 g     F .text	00000078 _write_r
000452a4 g     F .text	0000001c setlocale
40001db0 g     O .rwdata	00000004 _impure_ptr
40001e0c g     O .bss	00000004 alt_argc
0004bd94 g     F .text	00000064 _do_dtors
00040020 g       .exceptions	00000000 alt_irq_entry
0004604c g     F .text	00000080 __ulp
00047478 g     F .text	00000040 __isinfd
000445fc g     F .text	00000018 __fp_unlock_all
40001dc8 g     O .rwdata	00000008 alt_fs_list
00040020 g       *ABS*	00000000 __ram_exceptions_start
00045210 g     F .text	00000010 localeconv
0004be28 g     F .text	00000050 alt_ic_isr_register
40001df0 g       *ABS*	00000000 _edata
400020dc g       *ABS*	00000000 _end
000401b4 g       *ABS*	00000000 __ram_exceptions_end
0004b0a8 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0004bf14 g     F .text	000000a0 alt_ic_irq_disable
000475c8 g     F .text	0000007c __swrite
40001dc0 g     O .rwdata	00000004 __malloc_trim_threshold
0004c698 g     F .text	00000020 altera_nios2_qsys_irq_init
0004c9c8 g     F .text	00000038 exit
0004507c g     F .text	000000c8 _fwalk_reent
00046648 g     F .text	0000018c __mdiff
00049978 g     F .text	00000060 __modsi3
80000000 g       *ABS*	00000000 __alt_data_end
00040020 g     F .exceptions	00000000 alt_exception
0004453c g     F .text	00000004 __sfp_lock_release
0004cd9c g     F .text	00000020 _exit
000474b8 g     F .text	00000030 __isnand
0004b938 g     F .text	00000154 alt_alarm_start
000452c0 g     F .text	00000194 __smakebuf_r
00040a0c g     F .text	00000074 strlen
0004c30c g     F .text	00000188 open
00049428 g     F .text	00000088 __gedf2
0004bdf8 g     F .text	00000030 alt_icache_flush_all
40001de4 g     O .rwdata	00000004 alt_priority_mask
0004be78 g     F .text	0000009c alt_ic_irq_enable
00042984 g     F .text	00000024 __vfprintf_internal
00040200 g     F .text	000005f8 camera_init
00048b90 g     F .text	00000080 __subdf3
00045f28 g     F .text	000000c4 __lo0bits
40001de8 g     O .rwdata	00000008 alt_alarm_list
0004bd30 g     F .text	00000064 _do_ctors
00049f7c g     F .text	000000fc close
0004a358 g     F .text	00000080 alt_load
00049a68 g     F .text	00000314 __pack_d
00000000  w      *UND*	00000000 free
00044540 g     F .text	00000004 __sinit_lock_acquire
00046b44 g     F .text	00000100 __multadd
00045e90 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00040000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   40000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   40004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   40008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   4000c:	00bffd16 	blt	zero,r2,40004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   40010:	00400134 	movhi	at,4
    ori r1, r1, %lo(_start)
   40014:	08406d14 	ori	at,at,436
    jmp r1
   40018:	0800683a 	jmp	at
   4001c:	00000000 	call	0 <__reset-0x40000>

Disassembly of section .exceptions:

00040020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
   40020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
   40024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
   40028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   4002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   40030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   40034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   40038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   4003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   40040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
   40044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
   40048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   4004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   40050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   40054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   40058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   4005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   40060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   40064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   40068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   4006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   40070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   40074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   40078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   4007c:	10000326 	beq	r2,zero,4008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   40080:	20000226 	beq	r4,zero,4008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   40084:	00400ec0 	call	400ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   40088:	00000306 	br	40098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   4008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   40090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   40094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   40098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   4009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   400a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   400a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   400a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   400ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   400b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   400b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   400b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   400bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   400c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
   400c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   400c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   400cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   400d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   400d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   400d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   400dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   400e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
   400e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   400e8:	ef80083a 	eret

000400ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   400ec:	defff904 	addi	sp,sp,-28
   400f0:	dfc00615 	stw	ra,24(sp)
   400f4:	df000515 	stw	fp,20(sp)
   400f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   400fc:	0005313a 	rdctl	r2,ipending
   40100:	e0bffc15 	stw	r2,-16(fp)

  return active;
   40104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   40108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
   4010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   40110:	00800044 	movi	r2,1
   40114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   40118:	e0ffff17 	ldw	r3,-4(fp)
   4011c:	e0bffe17 	ldw	r2,-8(fp)
   40120:	1884703a 	and	r2,r3,r2
   40124:	1005003a 	cmpeq	r2,r2,zero
   40128:	1000161e 	bne	r2,zero,40184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   4012c:	e0bffd17 	ldw	r2,-12(fp)
   40130:	00d00034 	movhi	r3,16384
   40134:	18c79304 	addi	r3,r3,7756
   40138:	100490fa 	slli	r2,r2,3
   4013c:	10c5883a 	add	r2,r2,r3
   40140:	11400017 	ldw	r5,0(r2)
   40144:	e0bffd17 	ldw	r2,-12(fp)
   40148:	00d00034 	movhi	r3,16384
   4014c:	18c79304 	addi	r3,r3,7756
   40150:	100490fa 	slli	r2,r2,3
   40154:	10c5883a 	add	r2,r2,r3
   40158:	10800104 	addi	r2,r2,4
   4015c:	11000017 	ldw	r4,0(r2)
   40160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   40164:	0005313a 	rdctl	r2,ipending
   40168:	e0bffb15 	stw	r2,-20(fp)

  return active;
   4016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
   40170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
   40174:	e0bfff17 	ldw	r2,-4(fp)
   40178:	1004c03a 	cmpne	r2,r2,zero
   4017c:	103fe31e 	bne	r2,zero,4010c <alt_irq_handler+0x20>
   40180:	00000706 	br	401a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   40184:	e0bffe17 	ldw	r2,-8(fp)
   40188:	1085883a 	add	r2,r2,r2
   4018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
   40190:	e0bffd17 	ldw	r2,-12(fp)
   40194:	10800044 	addi	r2,r2,1
   40198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   4019c:	003fde06 	br	40118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   401a0:	e037883a 	mov	sp,fp
   401a4:	dfc00117 	ldw	ra,4(sp)
   401a8:	df000017 	ldw	fp,0(sp)
   401ac:	dec00204 	addi	sp,sp,8
   401b0:	f800283a 	ret

Disassembly of section .text:

000401b4 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
   401b4:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
   401b8:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
   401bc:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   401c0:	00bffd16 	blt	zero,r2,401b8 <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   401c4:	06e00034 	movhi	sp,32768
    ori sp, sp, %lo(__alt_stack_pointer)
   401c8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
   401cc:	06900034 	movhi	gp,16384
    ori gp, gp, %lo(_gp)
   401d0:	d6a76c14 	ori	gp,gp,40368
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   401d4:	00900034 	movhi	r2,16384
    ori r2, r2, %lo(__bss_start)
   401d8:	10877c14 	ori	r2,r2,7664

    movhi r3, %hi(__bss_end)
   401dc:	00d00034 	movhi	r3,16384
    ori r3, r3, %lo(__bss_end)
   401e0:	18c83714 	ori	r3,r3,8412

    beq r2, r3, 1f
   401e4:	10c00326 	beq	r2,r3,401f4 <_start+0x40>

0:
    stw zero, (r2)
   401e8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   401ec:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   401f0:	10fffd36 	bltu	r2,r3,401e8 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   401f4:	004a3580 	call	4a358 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   401f8:	004a5940 	call	4a594 <alt_main>

000401fc <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   401fc:	003fff06 	br	401fc <alt_after_alt_main>

00040200 <camera_init>:
 */

#include "system.h"
#include "altera_avalon_spi.h"

void camera_init(alt_u32 SPI_BASE) {
   40200:	defff904 	addi	sp,sp,-28
   40204:	dfc00615 	stw	ra,24(sp)
   40208:	df000515 	stw	fp,20(sp)
   4020c:	df000504 	addi	fp,sp,20
   40210:	e13fff15 	stw	r4,-4(fp)

	alt_u8 sentwrite[2];
	alt_u8 received = 0;
   40214:	e03ffe85 	stb	zero,-6(fp)

	sentwrite[1] = 44;
   40218:	00800b04 	movi	r2,44
   4021c:	e0bffe45 	stb	r2,-7(fp)
	sentwrite[0] = 103 | 0x80;
   40220:	00bff9c4 	movi	r2,-25
   40224:	e0bffe05 	stb	r2,-8(fp)
	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   40228:	d8000015 	stw	zero,0(sp)
   4022c:	e0bffe84 	addi	r2,fp,-6
   40230:	d8800115 	stw	r2,4(sp)
   40234:	d8000215 	stw	zero,8(sp)
   40238:	e13fff17 	ldw	r4,-4(fp)
   4023c:	000b883a 	mov	r5,zero
   40240:	01800084 	movi	r6,2
   40244:	e1fffe04 	addi	r7,fp,-8
   40248:	004b6000 	call	4b600 <alt_avalon_spi_command>

	sentwrite[1] = 4;
   4024c:	00800104 	movi	r2,4
   40250:	e0bffe45 	stb	r2,-7(fp)
	sentwrite[0] = 84 | 0x80;
   40254:	00bff504 	movi	r2,-44
   40258:	e0bffe05 	stb	r2,-8(fp)
	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   4025c:	d8000015 	stw	zero,0(sp)
   40260:	e0bffe84 	addi	r2,fp,-6
   40264:	d8800115 	stw	r2,4(sp)
   40268:	d8000215 	stw	zero,8(sp)
   4026c:	e13fff17 	ldw	r4,-4(fp)
   40270:	000b883a 	mov	r5,zero
   40274:	01800084 	movi	r6,2
   40278:	e1fffe04 	addi	r7,fp,-8
   4027c:	004b6000 	call	4b600 <alt_avalon_spi_command>

	sentwrite[1] = 1;
   40280:	00800044 	movi	r2,1
   40284:	e0bffe45 	stb	r2,-7(fp)
	sentwrite[0] = 85 | 0x80;
   40288:	00bff544 	movi	r2,-43
   4028c:	e0bffe05 	stb	r2,-8(fp)
	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   40290:	d8000015 	stw	zero,0(sp)
   40294:	e0bffe84 	addi	r2,fp,-6
   40298:	d8800115 	stw	r2,4(sp)
   4029c:	d8000215 	stw	zero,8(sp)
   402a0:	e13fff17 	ldw	r4,-4(fp)
   402a4:	000b883a 	mov	r5,zero
   402a8:	01800084 	movi	r6,2
   402ac:	e1fffe04 	addi	r7,fp,-8
   402b0:	004b6000 	call	4b600 <alt_avalon_spi_command>

	sentwrite[1] = 64;
   402b4:	00801004 	movi	r2,64
   402b8:	e0bffe45 	stb	r2,-7(fp)
	sentwrite[0] = 88 | 0x80;
   402bc:	00bff604 	movi	r2,-40
   402c0:	e0bffe05 	stb	r2,-8(fp)
	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   402c4:	d8000015 	stw	zero,0(sp)
   402c8:	e0bffe84 	addi	r2,fp,-6
   402cc:	d8800115 	stw	r2,4(sp)
   402d0:	d8000215 	stw	zero,8(sp)
   402d4:	e13fff17 	ldw	r4,-4(fp)
   402d8:	000b883a 	mov	r5,zero
   402dc:	01800084 	movi	r6,2
   402e0:	e1fffe04 	addi	r7,fp,-8
   402e4:	004b6000 	call	4b600 <alt_avalon_spi_command>

	sentwrite[1] = 64;
   402e8:	00801004 	movi	r2,64
   402ec:	e0bffe45 	stb	r2,-7(fp)
	sentwrite[0] = 91 | 0x80;
   402f0:	00bff6c4 	movi	r2,-37
   402f4:	e0bffe05 	stb	r2,-8(fp)
	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   402f8:	d8000015 	stw	zero,0(sp)
   402fc:	e0bffe84 	addi	r2,fp,-6
   40300:	d8800115 	stw	r2,4(sp)
   40304:	d8000215 	stw	zero,8(sp)
   40308:	e13fff17 	ldw	r4,-4(fp)
   4030c:	000b883a 	mov	r5,zero
   40310:	01800084 	movi	r6,2
   40314:	e1fffe04 	addi	r7,fp,-8
   40318:	004b6000 	call	4b600 <alt_avalon_spi_command>

	sentwrite[1] = 101;
   4031c:	00801944 	movi	r2,101
   40320:	e0bffe45 	stb	r2,-7(fp)
	sentwrite[0] = 94 | 0x80;
   40324:	00bff784 	movi	r2,-34
   40328:	e0bffe05 	stb	r2,-8(fp)
	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   4032c:	d8000015 	stw	zero,0(sp)
   40330:	e0bffe84 	addi	r2,fp,-6
   40334:	d8800115 	stw	r2,4(sp)
   40338:	d8000215 	stw	zero,8(sp)
   4033c:	e13fff17 	ldw	r4,-4(fp)
   40340:	000b883a 	mov	r5,zero
   40344:	01800084 	movi	r6,2
   40348:	e1fffe04 	addi	r7,fp,-8
   4034c:	004b6000 	call	4b600 <alt_avalon_spi_command>

	sentwrite[1] = 109;
   40350:	00801b44 	movi	r2,109
   40354:	e0bffe45 	stb	r2,-7(fp)
	sentwrite[0] = 98 | 0x80;
   40358:	00bff884 	movi	r2,-30
   4035c:	e0bffe05 	stb	r2,-8(fp)
	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   40360:	d8000015 	stw	zero,0(sp)
   40364:	e0bffe84 	addi	r2,fp,-6
   40368:	d8800115 	stw	r2,4(sp)
   4036c:	d8000215 	stw	zero,8(sp)
   40370:	e13fff17 	ldw	r4,-4(fp)
   40374:	000b883a 	mov	r5,zero
   40378:	01800084 	movi	r6,2
   4037c:	e1fffe04 	addi	r7,fp,-8
   40380:	004b6000 	call	4b600 <alt_avalon_spi_command>

	sentwrite[1] = 109;
   40384:	00801b44 	movi	r2,109
   40388:	e0bffe45 	stb	r2,-7(fp)
	sentwrite[0] = 99 | 0x80;
   4038c:	00bff8c4 	movi	r2,-29
   40390:	e0bffe05 	stb	r2,-8(fp)
	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   40394:	d8000015 	stw	zero,0(sp)
   40398:	e0bffe84 	addi	r2,fp,-6
   4039c:	d8800115 	stw	r2,4(sp)
   403a0:	d8000215 	stw	zero,8(sp)
   403a4:	e13fff17 	ldw	r4,-4(fp)
   403a8:	000b883a 	mov	r5,zero
   403ac:	01800084 	movi	r6,2
   403b0:	e1fffe04 	addi	r7,fp,-8
   403b4:	004b6000 	call	4b600 <alt_avalon_spi_command>

	sentwrite[1] = 106;
   403b8:	00801a84 	movi	r2,106
   403bc:	e0bffe45 	stb	r2,-7(fp)
	sentwrite[0] = 95 | 0x80;
   403c0:	00bff7c4 	movi	r2,-33
   403c4:	e0bffe05 	stb	r2,-8(fp)
	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   403c8:	d8000015 	stw	zero,0(sp)
   403cc:	e0bffe84 	addi	r2,fp,-6
   403d0:	d8800115 	stw	r2,4(sp)
   403d4:	d8000215 	stw	zero,8(sp)
   403d8:	e13fff17 	ldw	r4,-4(fp)
   403dc:	000b883a 	mov	r5,zero
   403e0:	01800084 	movi	r6,2
   403e4:	e1fffe04 	addi	r7,fp,-8
   403e8:	004b6000 	call	4b600 <alt_avalon_spi_command>

	sentwrite[1] = 1;
   403ec:	00800044 	movi	r2,1
   403f0:	e0bffe45 	stb	r2,-7(fp)
	sentwrite[0] = 117 | 0x80;
   403f4:	00bffd44 	movi	r2,-11
   403f8:	e0bffe05 	stb	r2,-8(fp)
	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   403fc:	d8000015 	stw	zero,0(sp)
   40400:	e0bffe84 	addi	r2,fp,-6
   40404:	d8800115 	stw	r2,4(sp)
   40408:	d8000215 	stw	zero,8(sp)
   4040c:	e13fff17 	ldw	r4,-4(fp)
   40410:	000b883a 	mov	r5,zero
   40414:	01800084 	movi	r6,2
   40418:	e1fffe04 	addi	r7,fp,-8
   4041c:	004b6000 	call	4b600 <alt_avalon_spi_command>

	sentwrite[1] = 1;
   40420:	00800044 	movi	r2,1
   40424:	e0bffe45 	stb	r2,-7(fp)
	sentwrite[0] = 115 | 0x80;
   40428:	00bffcc4 	movi	r2,-13
   4042c:	e0bffe05 	stb	r2,-8(fp)
	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   40430:	d8000015 	stw	zero,0(sp)
   40434:	e0bffe84 	addi	r2,fp,-6
   40438:	d8800115 	stw	r2,4(sp)
   4043c:	d8000215 	stw	zero,8(sp)
   40440:	e13fff17 	ldw	r4,-4(fp)
   40444:	000b883a 	mov	r5,zero
   40448:	01800084 	movi	r6,2
   4044c:	e1fffe04 	addi	r7,fp,-8
   40450:	004b6000 	call	4b600 <alt_avalon_spi_command>

	sentwrite[1] = 7;
   40454:	008001c4 	movi	r2,7
   40458:	e0bffe45 	stb	r2,-7(fp)
	sentwrite[0] = 82 | 0x80;
   4045c:	00bff484 	movi	r2,-46
   40460:	e0bffe05 	stb	r2,-8(fp)
	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   40464:	d8000015 	stw	zero,0(sp)
   40468:	e0bffe84 	addi	r2,fp,-6
   4046c:	d8800115 	stw	r2,4(sp)
   40470:	d8000215 	stw	zero,8(sp)
   40474:	e13fff17 	ldw	r4,-4(fp)
   40478:	000b883a 	mov	r5,zero
   4047c:	01800084 	movi	r6,2
   40480:	e1fffe04 	addi	r7,fp,-8
   40484:	004b6000 	call	4b600 <alt_avalon_spi_command>

	//adjusting registers for optimal performance
	sentwrite[1] = 44; //req:44, valid:40-55
   40488:	00800b04 	movi	r2,44
   4048c:	e0bffe45 	stb	r2,-7(fp)
	sentwrite[0] = 103 | 0x80;
   40490:	00bff9c4 	movi	r2,-25
   40494:	e0bffe05 	stb	r2,-8(fp)
	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   40498:	d8000015 	stw	zero,0(sp)
   4049c:	e0bffe84 	addi	r2,fp,-6
   404a0:	d8800115 	stw	r2,4(sp)
   404a4:	d8000215 	stw	zero,8(sp)
   404a8:	e13fff17 	ldw	r4,-4(fp)
   404ac:	000b883a 	mov	r5,zero
   404b0:	01800084 	movi	r6,2
   404b4:	e1fffe04 	addi	r7,fp,-8
   404b8:	004b6000 	call	4b600 <alt_avalon_spi_command>

	sentwrite[1] = 109; //req:109, valid:102-115
   404bc:	00801b44 	movi	r2,109
   404c0:	e0bffe45 	stb	r2,-7(fp)
	sentwrite[0] = 98 | 0x80;
   404c4:	00bff884 	movi	r2,-30
   404c8:	e0bffe05 	stb	r2,-8(fp)
	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   404cc:	d8000015 	stw	zero,0(sp)
   404d0:	e0bffe84 	addi	r2,fp,-6
   404d4:	d8800115 	stw	r2,4(sp)
   404d8:	d8000215 	stw	zero,8(sp)
   404dc:	e13fff17 	ldw	r4,-4(fp)
   404e0:	000b883a 	mov	r5,zero
   404e4:	01800084 	movi	r6,2
   404e8:	e1fffe04 	addi	r7,fp,-8
   404ec:	004b6000 	call	4b600 <alt_avalon_spi_command>

	sentwrite[1] = 109; //req:109, valid:102-115
   404f0:	00801b44 	movi	r2,109
   404f4:	e0bffe45 	stb	r2,-7(fp)
	sentwrite[0] = 99 | 0x80;
   404f8:	00bff8c4 	movi	r2,-29
   404fc:	e0bffe05 	stb	r2,-8(fp)
	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   40500:	d8000015 	stw	zero,0(sp)
   40504:	e0bffe84 	addi	r2,fp,-6
   40508:	d8800115 	stw	r2,4(sp)
   4050c:	d8000215 	stw	zero,8(sp)
   40510:	e13fff17 	ldw	r4,-4(fp)
   40514:	000b883a 	mov	r5,zero
   40518:	01800084 	movi	r6,2
   4051c:	e1fffe04 	addi	r7,fp,-8
   40520:	004b6000 	call	4b600 <alt_avalon_spi_command>

	//channel mode 0=16 channels; 1=8 channels; 2=4 channels; 3=2 channels
	sentwrite[1] = 2;
   40524:	00800084 	movi	r2,2
   40528:	e0bffe45 	stb	r2,-7(fp)
	sentwrite[0] = 72 | 0x80;
   4052c:	00bff204 	movi	r2,-56
   40530:	e0bffe05 	stb	r2,-8(fp)
	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   40534:	d8000015 	stw	zero,0(sp)
   40538:	e0bffe84 	addi	r2,fp,-6
   4053c:	d8800115 	stw	r2,4(sp)
   40540:	d8000215 	stw	zero,8(sp)
   40544:	e13fff17 	ldw	r4,-4(fp)
   40548:	000b883a 	mov	r5,zero
   4054c:	01800084 	movi	r6,2
   40550:	e1fffe04 	addi	r7,fp,-8
   40554:	004b6000 	call	4b600 <alt_avalon_spi_command>

	//	request amount of frames
	sentwrite[1] = 1;
   40558:	00800044 	movi	r2,1
   4055c:	e0bffe45 	stb	r2,-7(fp)
	sentwrite[0] = 70 | 0x80;
   40560:	00bff184 	movi	r2,-58
   40564:	e0bffe05 	stb	r2,-8(fp)

	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   40568:	d8000015 	stw	zero,0(sp)
   4056c:	e0bffe84 	addi	r2,fp,-6
   40570:	d8800115 	stw	r2,4(sp)
   40574:	d8000215 	stw	zero,8(sp)
   40578:	e13fff17 	ldw	r4,-4(fp)
   4057c:	000b883a 	mov	r5,zero
   40580:	01800084 	movi	r6,2
   40584:	e1fffe04 	addi	r7,fp,-8
   40588:	004b6000 	call	4b600 <alt_avalon_spi_command>

	//	training pattern 1
	sentwrite[1] = 0x01; //0b01010101
   4058c:	00800044 	movi	r2,1
   40590:	e0bffe45 	stb	r2,-7(fp)
	sentwrite[0] = 78 | 0x80;
   40594:	00bff384 	movi	r2,-50
   40598:	e0bffe05 	stb	r2,-8(fp)

	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   4059c:	d8000015 	stw	zero,0(sp)
   405a0:	e0bffe84 	addi	r2,fp,-6
   405a4:	d8800115 	stw	r2,4(sp)
   405a8:	d8000215 	stw	zero,8(sp)
   405ac:	e13fff17 	ldw	r4,-4(fp)
   405b0:	000b883a 	mov	r5,zero
   405b4:	01800084 	movi	r6,2
   405b8:	e1fffe04 	addi	r7,fp,-8
   405bc:	004b6000 	call	4b600 <alt_avalon_spi_command>

	//	training pattern 2
	sentwrite[1] = 0x00;
   405c0:	e03ffe45 	stb	zero,-7(fp)
	sentwrite[0] = 79 | 0x80;
   405c4:	00bff3c4 	movi	r2,-49
   405c8:	e0bffe05 	stb	r2,-8(fp)

	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   405cc:	d8000015 	stw	zero,0(sp)
   405d0:	e0bffe84 	addi	r2,fp,-6
   405d4:	d8800115 	stw	r2,4(sp)
   405d8:	d8000215 	stw	zero,8(sp)
   405dc:	e13fff17 	ldw	r4,-4(fp)
   405e0:	000b883a 	mov	r5,zero
   405e4:	01800084 	movi	r6,2
   405e8:	e1fffe04 	addi	r7,fp,-8
   405ec:	004b6000 	call	4b600 <alt_avalon_spi_command>

	//number of lines 1 255
	sentwrite[1] = 0x30; //0x40
   405f0:	00800c04 	movi	r2,48
   405f4:	e0bffe45 	stb	r2,-7(fp)
	sentwrite[0] = 1 | 0x80;
   405f8:	00bfe044 	movi	r2,-127
   405fc:	e0bffe05 	stb	r2,-8(fp)
	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   40600:	d8000015 	stw	zero,0(sp)
   40604:	e0bffe84 	addi	r2,fp,-6
   40608:	d8800115 	stw	r2,4(sp)
   4060c:	d8000215 	stw	zero,8(sp)
   40610:	e13fff17 	ldw	r4,-4(fp)
   40614:	000b883a 	mov	r5,zero
   40618:	01800084 	movi	r6,2
   4061c:	e1fffe04 	addi	r7,fp,-8
   40620:	004b6000 	call	4b600 <alt_avalon_spi_command>

	//number of lines 2 1
	sentwrite[1] = 0x04; //0x04
   40624:	00800104 	movi	r2,4
   40628:	e0bffe45 	stb	r2,-7(fp)
	sentwrite[0] = 2 | 0x80;
   4062c:	00bfe084 	movi	r2,-126
   40630:	e0bffe05 	stb	r2,-8(fp)
	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   40634:	d8000015 	stw	zero,0(sp)
   40638:	e0bffe84 	addi	r2,fp,-6
   4063c:	d8800115 	stw	r2,4(sp)
   40640:	d8000215 	stw	zero,8(sp)
   40644:	e13fff17 	ldw	r4,-4(fp)
   40648:	000b883a 	mov	r5,zero
   4064c:	01800084 	movi	r6,2
   40650:	e1fffe04 	addi	r7,fp,-8
   40654:	004b6000 	call	4b600 <alt_avalon_spi_command>

	//start row window 1
	sentwrite[1] = 0x00; //0x00
   40658:	e03ffe45 	stb	zero,-7(fp)
	sentwrite[0] = 3 | 0x80;
   4065c:	00bfe0c4 	movi	r2,-125
   40660:	e0bffe05 	stb	r2,-8(fp)
	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   40664:	d8000015 	stw	zero,0(sp)
   40668:	e0bffe84 	addi	r2,fp,-6
   4066c:	d8800115 	stw	r2,4(sp)
   40670:	d8000215 	stw	zero,8(sp)
   40674:	e13fff17 	ldw	r4,-4(fp)
   40678:	000b883a 	mov	r5,zero
   4067c:	01800084 	movi	r6,2
   40680:	e1fffe04 	addi	r7,fp,-8
   40684:	004b6000 	call	4b600 <alt_avalon_spi_command>

	//start row window 2
	sentwrite[1] = 0x00; //0x00
   40688:	e03ffe45 	stb	zero,-7(fp)
	sentwrite[0] = 4 | 0x80;
   4068c:	00bfe104 	movi	r2,-124
   40690:	e0bffe05 	stb	r2,-8(fp)
	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   40694:	d8000015 	stw	zero,0(sp)
   40698:	e0bffe84 	addi	r2,fp,-6
   4069c:	d8800115 	stw	r2,4(sp)
   406a0:	d8000215 	stw	zero,8(sp)
   406a4:	e13fff17 	ldw	r4,-4(fp)
   406a8:	000b883a 	mov	r5,zero
   406ac:	01800084 	movi	r6,2
   406b0:	e1fffe04 	addi	r7,fp,-8
   406b4:	004b6000 	call	4b600 <alt_avalon_spi_command>

	// row skip 1
	sentwrite[1] = 0x00; //0x00
   406b8:	e03ffe45 	stb	zero,-7(fp)
	sentwrite[0] = 35 | 0x80;
   406bc:	00bfe8c4 	movi	r2,-93
   406c0:	e0bffe05 	stb	r2,-8(fp)
	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   406c4:	d8000015 	stw	zero,0(sp)
   406c8:	e0bffe84 	addi	r2,fp,-6
   406cc:	d8800115 	stw	r2,4(sp)
   406d0:	d8000215 	stw	zero,8(sp)
   406d4:	e13fff17 	ldw	r4,-4(fp)
   406d8:	000b883a 	mov	r5,zero
   406dc:	01800084 	movi	r6,2
   406e0:	e1fffe04 	addi	r7,fp,-8
   406e4:	004b6000 	call	4b600 <alt_avalon_spi_command>

	// row skip 2
	sentwrite[1] = 0x00; //0x00
   406e8:	e03ffe45 	stb	zero,-7(fp)
	sentwrite[0] = 37 | 0x80;
   406ec:	00bfe944 	movi	r2,-91
   406f0:	e0bffe05 	stb	r2,-8(fp)
	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   406f4:	d8000015 	stw	zero,0(sp)
   406f8:	e0bffe84 	addi	r2,fp,-6
   406fc:	d8800115 	stw	r2,4(sp)
   40700:	d8000215 	stw	zero,8(sp)
   40704:	e13fff17 	ldw	r4,-4(fp)
   40708:	000b883a 	mov	r5,zero
   4070c:	01800084 	movi	r6,2
   40710:	e1fffe04 	addi	r7,fp,-8
   40714:	004b6000 	call	4b600 <alt_avalon_spi_command>
//	sentwrite[1] = 0x01;
//	sentwrite[0] = 111 | 0x80;
//	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);

	//	image flipping x/y
	sentwrite[1] = 0x01; //0x00
   40718:	00800044 	movi	r2,1
   4071c:	e0bffe45 	stb	r2,-7(fp)
	sentwrite[0] = 40 | 0x80;
   40720:	00bfea04 	movi	r2,-88
   40724:	e0bffe05 	stb	r2,-8(fp)
	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   40728:	d8000015 	stw	zero,0(sp)
   4072c:	e0bffe84 	addi	r2,fp,-6
   40730:	d8800115 	stw	r2,4(sp)
   40734:	d8000215 	stw	zero,8(sp)
   40738:	e13fff17 	ldw	r4,-4(fp)
   4073c:	000b883a 	mov	r5,zero
   40740:	01800084 	movi	r6,2
   40744:	e1fffe04 	addi	r7,fp,-8
   40748:	004b6000 	call	4b600 <alt_avalon_spi_command>

	//	exposure time 1
	sentwrite[1] = 0x40; //0x40
   4074c:	00801004 	movi	r2,64
   40750:	e0bffe45 	stb	r2,-7(fp)
	sentwrite[0] = 42 | 0x80;
   40754:	00bfea84 	movi	r2,-86
   40758:	e0bffe05 	stb	r2,-8(fp)
	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   4075c:	d8000015 	stw	zero,0(sp)
   40760:	e0bffe84 	addi	r2,fp,-6
   40764:	d8800115 	stw	r2,4(sp)
   40768:	d8000215 	stw	zero,8(sp)
   4076c:	e13fff17 	ldw	r4,-4(fp)
   40770:	000b883a 	mov	r5,zero
   40774:	01800084 	movi	r6,2
   40778:	e1fffe04 	addi	r7,fp,-8
   4077c:	004b6000 	call	4b600 <alt_avalon_spi_command>

	//	exposure time 2
	sentwrite[1] = 0x0F; //0x04
   40780:	008003c4 	movi	r2,15
   40784:	e0bffe45 	stb	r2,-7(fp)
	sentwrite[0] = 43 | 0x80;
   40788:	00bfeac4 	movi	r2,-85
   4078c:	e0bffe05 	stb	r2,-8(fp)
	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   40790:	d8000015 	stw	zero,0(sp)
   40794:	e0bffe84 	addi	r2,fp,-6
   40798:	d8800115 	stw	r2,4(sp)
   4079c:	d8000215 	stw	zero,8(sp)
   407a0:	e13fff17 	ldw	r4,-4(fp)
   407a4:	000b883a 	mov	r5,zero
   407a8:	01800084 	movi	r6,2
   407ac:	e1fffe04 	addi	r7,fp,-8
   407b0:	004b6000 	call	4b600 <alt_avalon_spi_command>

	//	exposure time 3
	sentwrite[1] = 0x00; //0x00
   407b4:	e03ffe45 	stb	zero,-7(fp)
	sentwrite[0] = 44 | 0x80;
   407b8:	00bfeb04 	movi	r2,-84
   407bc:	e0bffe05 	stb	r2,-8(fp)
	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   407c0:	d8000015 	stw	zero,0(sp)
   407c4:	e0bffe84 	addi	r2,fp,-6
   407c8:	d8800115 	stw	r2,4(sp)
   407cc:	d8000215 	stw	zero,8(sp)
   407d0:	e13fff17 	ldw	r4,-4(fp)
   407d4:	000b883a 	mov	r5,zero
   407d8:	01800084 	movi	r6,2
   407dc:	e1fffe04 	addi	r7,fp,-8
   407e0:	004b6000 	call	4b600 <alt_avalon_spi_command>

}
   407e4:	e037883a 	mov	sp,fp
   407e8:	dfc00117 	ldw	ra,4(sp)
   407ec:	df000017 	ldw	fp,0(sp)
   407f0:	dec00204 	addi	sp,sp,8
   407f4:	f800283a 	ret

000407f8 <main>:
#include "terasic_includes.h"
#include "altera_avalon_spi.h"
#include "camera.h"
#include "unistd.h"

int main() {
   407f8:	defff804 	addi	sp,sp,-32
   407fc:	dfc00715 	stw	ra,28(sp)
   40800:	df000615 	stw	fp,24(sp)
   40804:	df000604 	addi	fp,sp,24

	alt_u8 received1 = 0;
   40808:	e03ffe85 	stb	zero,-6(fp)
	alt_u8 received2 = 0;
   4080c:	e03ffe45 	stb	zero,-7(fp)
	alt_u8 sent = 78;
   40810:	00801384 	movi	r2,78
   40814:	e0bffec5 	stb	r2,-5(fp)
	alt_u8 sentwrite[2];
	alt_u8 sentread;

	int counter = 0;
   40818:	e03ffd15 	stw	zero,-12(fp)


	printf("Hello from semester thesis Nios II!\n");
   4081c:	01100034 	movhi	r4,16384
   40820:	21000004 	addi	r4,r4,0
   40824:	00409f80 	call	409f8 <puts>
	printf("DDR2_1  Size: %d MBytes\n", MEM_IF_DDR2_EMIF_SPAN/1024/1024);
   40828:	01100034 	movhi	r4,16384
   4082c:	21000904 	addi	r4,r4,36
   40830:	01410004 	movi	r5,1024
   40834:	00408e00 	call	408e0 <printf>

	IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE, 0x00);
   40838:	00804034 	movhi	r2,256
   4083c:	10801804 	addi	r2,r2,96
   40840:	10000035 	stwio	zero,0(r2)
	usleep(1);
   40844:	01000044 	movi	r4,1
   40848:	004a8dc0 	call	4a8dc <usleep>
	camera_init(SPI_1_BASE);
   4084c:	01004034 	movhi	r4,256
   40850:	00402000 	call	40200 <camera_init>
	//camera_init(SPI_2_BASE);
	usleep(1);
   40854:	01000044 	movi	r4,1
   40858:	004a8dc0 	call	4a8dc <usleep>
   4085c:	00000006 	br	40860 <main+0x68>

	while(1) {
		IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE, 0x80|0x40); //sets pio[7] which is connected to cmv frameRequest
   40860:	00c04034 	movhi	r3,256
   40864:	18c01804 	addi	r3,r3,96
   40868:	00803004 	movi	r2,192
   4086c:	18800035 	stwio	r2,0(r3)

		if (counter == 16000000) {
   40870:	e0fffd17 	ldw	r3,-12(fp)
   40874:	00803d34 	movhi	r2,244
   40878:	10890004 	addi	r2,r2,9216
   4087c:	1880141e 	bne	r3,r2,408d0 <main+0xd8>
			counter = 0;
   40880:	e03ffd15 	stw	zero,-12(fp)
			/*
			 *  sends 8 bits (at address &sent) to spi interface of cmv4000 and stores read bits (at address &received1)
		     *  Bit[7] = 0 -> read operation
		     *  Bit[6..0] -> address
			 */
			sentread = 78 & 0x8f;
   40884:	00800384 	movi	r2,14
   40888:	e0bffe05 	stb	r2,-8(fp)
			alt_avalon_spi_command(SPI_1_BASE,0,1,&sent,1,&received1,0);
   4088c:	e1fffec4 	addi	r7,fp,-5
   40890:	00800044 	movi	r2,1
   40894:	d8800015 	stw	r2,0(sp)
   40898:	e0bffe84 	addi	r2,fp,-6
   4089c:	d8800115 	stw	r2,4(sp)
   408a0:	d8000215 	stw	zero,8(sp)
   408a4:	01004034 	movhi	r4,256
   408a8:	000b883a 	mov	r5,zero
   408ac:	01800044 	movi	r6,1
   408b0:	004b6000 	call	4b600 <alt_avalon_spi_command>
			printf("value1: %d value2: %d\n",received1,received2);
   408b4:	e0bffe83 	ldbu	r2,-6(fp)
   408b8:	11403fcc 	andi	r5,r2,255
   408bc:	e1bffe43 	ldbu	r6,-7(fp)
   408c0:	01100034 	movhi	r4,16384
   408c4:	21001004 	addi	r4,r4,64
   408c8:	00408e00 	call	408e0 <printf>
   408cc:	003fe406 	br	40860 <main+0x68>

		} else {
			counter += 1;
   408d0:	e0bffd17 	ldw	r2,-12(fp)
   408d4:	10800044 	addi	r2,r2,1
   408d8:	e0bffd15 	stw	r2,-12(fp)
		}


	}
   408dc:	003fe006 	br	40860 <main+0x68>

000408e0 <printf>:
   408e0:	defffb04 	addi	sp,sp,-20
   408e4:	dfc00115 	stw	ra,4(sp)
   408e8:	d9400215 	stw	r5,8(sp)
   408ec:	d9800315 	stw	r6,12(sp)
   408f0:	d9c00415 	stw	r7,16(sp)
   408f4:	00900034 	movhi	r2,16384
   408f8:	10876c04 	addi	r2,r2,7600
   408fc:	10c00017 	ldw	r3,0(r2)
   40900:	200b883a 	mov	r5,r4
   40904:	d8800204 	addi	r2,sp,8
   40908:	19000217 	ldw	r4,8(r3)
   4090c:	100d883a 	mov	r6,r2
   40910:	d8800015 	stw	r2,0(sp)
   40914:	00429840 	call	42984 <__vfprintf_internal>
   40918:	dfc00117 	ldw	ra,4(sp)
   4091c:	dec00504 	addi	sp,sp,20
   40920:	f800283a 	ret

00040924 <_printf_r>:
   40924:	defffc04 	addi	sp,sp,-16
   40928:	dfc00115 	stw	ra,4(sp)
   4092c:	d9800215 	stw	r6,8(sp)
   40930:	d9c00315 	stw	r7,12(sp)
   40934:	280d883a 	mov	r6,r5
   40938:	21400217 	ldw	r5,8(r4)
   4093c:	d8c00204 	addi	r3,sp,8
   40940:	180f883a 	mov	r7,r3
   40944:	d8c00015 	stw	r3,0(sp)
   40948:	0040ad80 	call	40ad8 <___vfprintf_internal_r>
   4094c:	dfc00117 	ldw	ra,4(sp)
   40950:	dec00404 	addi	sp,sp,16
   40954:	f800283a 	ret

00040958 <_puts_r>:
   40958:	defff604 	addi	sp,sp,-40
   4095c:	dc400715 	stw	r17,28(sp)
   40960:	2023883a 	mov	r17,r4
   40964:	2809883a 	mov	r4,r5
   40968:	dfc00915 	stw	ra,36(sp)
   4096c:	dcc00815 	stw	r19,32(sp)
   40970:	2827883a 	mov	r19,r5
   40974:	0040a0c0 	call	40a0c <strlen>
   40978:	89400217 	ldw	r5,8(r17)
   4097c:	00d00034 	movhi	r3,16384
   40980:	18c01604 	addi	r3,r3,88
   40984:	01c00044 	movi	r7,1
   40988:	12000044 	addi	r8,r2,1
   4098c:	d8c00515 	stw	r3,20(sp)
   40990:	d9c00615 	stw	r7,24(sp)
   40994:	d8c00304 	addi	r3,sp,12
   40998:	01c00084 	movi	r7,2
   4099c:	8809883a 	mov	r4,r17
   409a0:	d80d883a 	mov	r6,sp
   409a4:	d8c00015 	stw	r3,0(sp)
   409a8:	dcc00315 	stw	r19,12(sp)
   409ac:	da000215 	stw	r8,8(sp)
   409b0:	d9c00115 	stw	r7,4(sp)
   409b4:	d8800415 	stw	r2,16(sp)
   409b8:	0044be00 	call	44be0 <__sfvwrite_r>
   409bc:	00ffffc4 	movi	r3,-1
   409c0:	10000626 	beq	r2,zero,409dc <_puts_r+0x84>
   409c4:	1805883a 	mov	r2,r3
   409c8:	dfc00917 	ldw	ra,36(sp)
   409cc:	dcc00817 	ldw	r19,32(sp)
   409d0:	dc400717 	ldw	r17,28(sp)
   409d4:	dec00a04 	addi	sp,sp,40
   409d8:	f800283a 	ret
   409dc:	00c00284 	movi	r3,10
   409e0:	1805883a 	mov	r2,r3
   409e4:	dfc00917 	ldw	ra,36(sp)
   409e8:	dcc00817 	ldw	r19,32(sp)
   409ec:	dc400717 	ldw	r17,28(sp)
   409f0:	dec00a04 	addi	sp,sp,40
   409f4:	f800283a 	ret

000409f8 <puts>:
   409f8:	00900034 	movhi	r2,16384
   409fc:	10876c04 	addi	r2,r2,7600
   40a00:	200b883a 	mov	r5,r4
   40a04:	11000017 	ldw	r4,0(r2)
   40a08:	00409581 	jmpi	40958 <_puts_r>

00040a0c <strlen>:
   40a0c:	208000cc 	andi	r2,r4,3
   40a10:	2011883a 	mov	r8,r4
   40a14:	1000161e 	bne	r2,zero,40a70 <strlen+0x64>
   40a18:	20c00017 	ldw	r3,0(r4)
   40a1c:	017fbff4 	movhi	r5,65279
   40a20:	297fbfc4 	addi	r5,r5,-257
   40a24:	01e02074 	movhi	r7,32897
   40a28:	39e02004 	addi	r7,r7,-32640
   40a2c:	1945883a 	add	r2,r3,r5
   40a30:	11c4703a 	and	r2,r2,r7
   40a34:	00c6303a 	nor	r3,zero,r3
   40a38:	1886703a 	and	r3,r3,r2
   40a3c:	18000c1e 	bne	r3,zero,40a70 <strlen+0x64>
   40a40:	280d883a 	mov	r6,r5
   40a44:	380b883a 	mov	r5,r7
   40a48:	21000104 	addi	r4,r4,4
   40a4c:	20800017 	ldw	r2,0(r4)
   40a50:	1187883a 	add	r3,r2,r6
   40a54:	1946703a 	and	r3,r3,r5
   40a58:	0084303a 	nor	r2,zero,r2
   40a5c:	10c4703a 	and	r2,r2,r3
   40a60:	103ff926 	beq	r2,zero,40a48 <strlen+0x3c>
   40a64:	20800007 	ldb	r2,0(r4)
   40a68:	10000326 	beq	r2,zero,40a78 <strlen+0x6c>
   40a6c:	21000044 	addi	r4,r4,1
   40a70:	20800007 	ldb	r2,0(r4)
   40a74:	103ffd1e 	bne	r2,zero,40a6c <strlen+0x60>
   40a78:	2205c83a 	sub	r2,r4,r8
   40a7c:	f800283a 	ret

00040a80 <__sprint_r>:
   40a80:	30800217 	ldw	r2,8(r6)
   40a84:	defffe04 	addi	sp,sp,-8
   40a88:	dc000015 	stw	r16,0(sp)
   40a8c:	dfc00115 	stw	ra,4(sp)
   40a90:	3021883a 	mov	r16,r6
   40a94:	0007883a 	mov	r3,zero
   40a98:	1000061e 	bne	r2,zero,40ab4 <__sprint_r+0x34>
   40a9c:	1805883a 	mov	r2,r3
   40aa0:	30000115 	stw	zero,4(r6)
   40aa4:	dfc00117 	ldw	ra,4(sp)
   40aa8:	dc000017 	ldw	r16,0(sp)
   40aac:	dec00204 	addi	sp,sp,8
   40ab0:	f800283a 	ret
   40ab4:	0044be00 	call	44be0 <__sfvwrite_r>
   40ab8:	1007883a 	mov	r3,r2
   40abc:	1805883a 	mov	r2,r3
   40ac0:	80000115 	stw	zero,4(r16)
   40ac4:	80000215 	stw	zero,8(r16)
   40ac8:	dfc00117 	ldw	ra,4(sp)
   40acc:	dc000017 	ldw	r16,0(sp)
   40ad0:	dec00204 	addi	sp,sp,8
   40ad4:	f800283a 	ret

00040ad8 <___vfprintf_internal_r>:
   40ad8:	defea404 	addi	sp,sp,-1392
   40adc:	dd815815 	stw	r22,1376(sp)
   40ae0:	dc015215 	stw	r16,1352(sp)
   40ae4:	d9c15115 	stw	r7,1348(sp)
   40ae8:	dfc15b15 	stw	ra,1388(sp)
   40aec:	df015a15 	stw	fp,1384(sp)
   40af0:	ddc15915 	stw	r23,1380(sp)
   40af4:	dd415715 	stw	r21,1372(sp)
   40af8:	dd015615 	stw	r20,1368(sp)
   40afc:	dcc15515 	stw	r19,1364(sp)
   40b00:	dc815415 	stw	r18,1360(sp)
   40b04:	dc415315 	stw	r17,1356(sp)
   40b08:	282d883a 	mov	r22,r5
   40b0c:	3021883a 	mov	r16,r6
   40b10:	d9014f15 	stw	r4,1340(sp)
   40b14:	00452040 	call	45204 <_localeconv_r>
   40b18:	10800017 	ldw	r2,0(r2)
   40b1c:	d9c15117 	ldw	r7,1348(sp)
   40b20:	d8814915 	stw	r2,1316(sp)
   40b24:	d8814f17 	ldw	r2,1340(sp)
   40b28:	10000226 	beq	r2,zero,40b34 <___vfprintf_internal_r+0x5c>
   40b2c:	10800e17 	ldw	r2,56(r2)
   40b30:	10020d26 	beq	r2,zero,41368 <___vfprintf_internal_r+0x890>
   40b34:	b080030b 	ldhu	r2,12(r22)
   40b38:	1080020c 	andi	r2,r2,8
   40b3c:	10020e26 	beq	r2,zero,41378 <___vfprintf_internal_r+0x8a0>
   40b40:	b0800417 	ldw	r2,16(r22)
   40b44:	10020c26 	beq	r2,zero,41378 <___vfprintf_internal_r+0x8a0>
   40b48:	b200030b 	ldhu	r8,12(r22)
   40b4c:	00800284 	movi	r2,10
   40b50:	40c0068c 	andi	r3,r8,26
   40b54:	18802f1e 	bne	r3,r2,40c14 <___vfprintf_internal_r+0x13c>
   40b58:	b080038f 	ldh	r2,14(r22)
   40b5c:	10002d16 	blt	r2,zero,40c14 <___vfprintf_internal_r+0x13c>
   40b60:	b240038b 	ldhu	r9,14(r22)
   40b64:	b2800717 	ldw	r10,28(r22)
   40b68:	b2c00917 	ldw	r11,36(r22)
   40b6c:	d9014f17 	ldw	r4,1340(sp)
   40b70:	dc402904 	addi	r17,sp,164
   40b74:	d8804004 	addi	r2,sp,256
   40b78:	00c10004 	movi	r3,1024
   40b7c:	423fff4c 	andi	r8,r8,65533
   40b80:	800d883a 	mov	r6,r16
   40b84:	880b883a 	mov	r5,r17
   40b88:	da002c0d 	sth	r8,176(sp)
   40b8c:	da402c8d 	sth	r9,178(sp)
   40b90:	da803015 	stw	r10,192(sp)
   40b94:	dac03215 	stw	r11,200(sp)
   40b98:	d8802d15 	stw	r2,180(sp)
   40b9c:	d8c02e15 	stw	r3,184(sp)
   40ba0:	d8802915 	stw	r2,164(sp)
   40ba4:	d8c02b15 	stw	r3,172(sp)
   40ba8:	d8002f15 	stw	zero,188(sp)
   40bac:	0040ad80 	call	40ad8 <___vfprintf_internal_r>
   40bb0:	d8814b15 	stw	r2,1324(sp)
   40bb4:	10000416 	blt	r2,zero,40bc8 <___vfprintf_internal_r+0xf0>
   40bb8:	d9014f17 	ldw	r4,1340(sp)
   40bbc:	880b883a 	mov	r5,r17
   40bc0:	00442b00 	call	442b0 <_fflush_r>
   40bc4:	1002321e 	bne	r2,zero,41490 <___vfprintf_internal_r+0x9b8>
   40bc8:	d8802c0b 	ldhu	r2,176(sp)
   40bcc:	1080100c 	andi	r2,r2,64
   40bd0:	10000326 	beq	r2,zero,40be0 <___vfprintf_internal_r+0x108>
   40bd4:	b080030b 	ldhu	r2,12(r22)
   40bd8:	10801014 	ori	r2,r2,64
   40bdc:	b080030d 	sth	r2,12(r22)
   40be0:	d8814b17 	ldw	r2,1324(sp)
   40be4:	dfc15b17 	ldw	ra,1388(sp)
   40be8:	df015a17 	ldw	fp,1384(sp)
   40bec:	ddc15917 	ldw	r23,1380(sp)
   40bf0:	dd815817 	ldw	r22,1376(sp)
   40bf4:	dd415717 	ldw	r21,1372(sp)
   40bf8:	dd015617 	ldw	r20,1368(sp)
   40bfc:	dcc15517 	ldw	r19,1364(sp)
   40c00:	dc815417 	ldw	r18,1360(sp)
   40c04:	dc415317 	ldw	r17,1356(sp)
   40c08:	dc015217 	ldw	r16,1352(sp)
   40c0c:	dec15c04 	addi	sp,sp,1392
   40c10:	f800283a 	ret
   40c14:	0005883a 	mov	r2,zero
   40c18:	0007883a 	mov	r3,zero
   40c1c:	dd401904 	addi	r21,sp,100
   40c20:	d8814215 	stw	r2,1288(sp)
   40c24:	802f883a 	mov	r23,r16
   40c28:	d8c14315 	stw	r3,1292(sp)
   40c2c:	d8014b15 	stw	zero,1324(sp)
   40c30:	d8014815 	stw	zero,1312(sp)
   40c34:	d8014415 	stw	zero,1296(sp)
   40c38:	d8014715 	stw	zero,1308(sp)
   40c3c:	dd400c15 	stw	r21,48(sp)
   40c40:	d8000e15 	stw	zero,56(sp)
   40c44:	d8000d15 	stw	zero,52(sp)
   40c48:	b8800007 	ldb	r2,0(r23)
   40c4c:	10001926 	beq	r2,zero,40cb4 <___vfprintf_internal_r+0x1dc>
   40c50:	00c00944 	movi	r3,37
   40c54:	10c01726 	beq	r2,r3,40cb4 <___vfprintf_internal_r+0x1dc>
   40c58:	b821883a 	mov	r16,r23
   40c5c:	00000106 	br	40c64 <___vfprintf_internal_r+0x18c>
   40c60:	10c00326 	beq	r2,r3,40c70 <___vfprintf_internal_r+0x198>
   40c64:	84000044 	addi	r16,r16,1
   40c68:	80800007 	ldb	r2,0(r16)
   40c6c:	103ffc1e 	bne	r2,zero,40c60 <___vfprintf_internal_r+0x188>
   40c70:	85e7c83a 	sub	r19,r16,r23
   40c74:	98000e26 	beq	r19,zero,40cb0 <___vfprintf_internal_r+0x1d8>
   40c78:	dc800e17 	ldw	r18,56(sp)
   40c7c:	dc400d17 	ldw	r17,52(sp)
   40c80:	008001c4 	movi	r2,7
   40c84:	94e5883a 	add	r18,r18,r19
   40c88:	8c400044 	addi	r17,r17,1
   40c8c:	adc00015 	stw	r23,0(r21)
   40c90:	dc800e15 	stw	r18,56(sp)
   40c94:	acc00115 	stw	r19,4(r21)
   40c98:	dc400d15 	stw	r17,52(sp)
   40c9c:	14428b16 	blt	r2,r17,416cc <___vfprintf_internal_r+0xbf4>
   40ca0:	ad400204 	addi	r21,r21,8
   40ca4:	d9014b17 	ldw	r4,1324(sp)
   40ca8:	24c9883a 	add	r4,r4,r19
   40cac:	d9014b15 	stw	r4,1324(sp)
   40cb0:	802f883a 	mov	r23,r16
   40cb4:	b8800007 	ldb	r2,0(r23)
   40cb8:	10013c26 	beq	r2,zero,411ac <___vfprintf_internal_r+0x6d4>
   40cbc:	bdc00044 	addi	r23,r23,1
   40cc0:	d8000405 	stb	zero,16(sp)
   40cc4:	b8c00007 	ldb	r3,0(r23)
   40cc8:	04ffffc4 	movi	r19,-1
   40ccc:	d8014c15 	stw	zero,1328(sp)
   40cd0:	d8014a15 	stw	zero,1320(sp)
   40cd4:	d8c14d15 	stw	r3,1332(sp)
   40cd8:	bdc00044 	addi	r23,r23,1
   40cdc:	d9414d17 	ldw	r5,1332(sp)
   40ce0:	00801604 	movi	r2,88
   40ce4:	28fff804 	addi	r3,r5,-32
   40ce8:	10c06036 	bltu	r2,r3,40e6c <___vfprintf_internal_r+0x394>
   40cec:	18c5883a 	add	r2,r3,r3
   40cf0:	1085883a 	add	r2,r2,r2
   40cf4:	00c00134 	movhi	r3,4
   40cf8:	18c34204 	addi	r3,r3,3336
   40cfc:	10c5883a 	add	r2,r2,r3
   40d00:	11000017 	ldw	r4,0(r2)
   40d04:	2000683a 	jmp	r4
   40d08:	00041c7c 	xorhi	zero,zero,4209
   40d0c:	00040e6c 	andhi	zero,zero,4153
   40d10:	00040e6c 	andhi	zero,zero,4153
   40d14:	00041c68 	cmpgeui	zero,zero,4209
   40d18:	00040e6c 	andhi	zero,zero,4153
   40d1c:	00040e6c 	andhi	zero,zero,4153
   40d20:	00040e6c 	andhi	zero,zero,4153
   40d24:	00040e6c 	andhi	zero,zero,4153
   40d28:	00040e6c 	andhi	zero,zero,4153
   40d2c:	00040e6c 	andhi	zero,zero,4153
   40d30:	00041a48 	cmpgei	zero,zero,4201
   40d34:	00041c58 	cmpnei	zero,zero,4209
   40d38:	00040e6c 	andhi	zero,zero,4153
   40d3c:	00041a60 	cmpeqi	zero,zero,4201
   40d40:	00041cf4 	movhi	zero,4211
   40d44:	00040e6c 	andhi	zero,zero,4153
   40d48:	00041ce0 	cmpeqi	zero,zero,4211
   40d4c:	00041ca8 	cmpgeui	zero,zero,4210
   40d50:	00041ca8 	cmpgeui	zero,zero,4210
   40d54:	00041ca8 	cmpgeui	zero,zero,4210
   40d58:	00041ca8 	cmpgeui	zero,zero,4210
   40d5c:	00041ca8 	cmpgeui	zero,zero,4210
   40d60:	00041ca8 	cmpgeui	zero,zero,4210
   40d64:	00041ca8 	cmpgeui	zero,zero,4210
   40d68:	00041ca8 	cmpgeui	zero,zero,4210
   40d6c:	00041ca8 	cmpgeui	zero,zero,4210
   40d70:	00040e6c 	andhi	zero,zero,4153
   40d74:	00040e6c 	andhi	zero,zero,4153
   40d78:	00040e6c 	andhi	zero,zero,4153
   40d7c:	00040e6c 	andhi	zero,zero,4153
   40d80:	00040e6c 	andhi	zero,zero,4153
   40d84:	00040e6c 	andhi	zero,zero,4153
   40d88:	00040e6c 	andhi	zero,zero,4153
   40d8c:	00040e6c 	andhi	zero,zero,4153
   40d90:	00040e6c 	andhi	zero,zero,4153
   40d94:	00040e6c 	andhi	zero,zero,4153
   40d98:	000414c4 	movi	zero,4179
   40d9c:	00041b30 	cmpltui	zero,zero,4204
   40da0:	00040e6c 	andhi	zero,zero,4153
   40da4:	00041b30 	cmpltui	zero,zero,4204
   40da8:	00040e6c 	andhi	zero,zero,4153
   40dac:	00040e6c 	andhi	zero,zero,4153
   40db0:	00040e6c 	andhi	zero,zero,4153
   40db4:	00040e6c 	andhi	zero,zero,4153
   40db8:	00041c94 	movui	zero,4210
   40dbc:	00040e6c 	andhi	zero,zero,4153
   40dc0:	00040e6c 	andhi	zero,zero,4153
   40dc4:	00041578 	rdprs	zero,zero,4181
   40dc8:	00040e6c 	andhi	zero,zero,4153
   40dcc:	00040e6c 	andhi	zero,zero,4153
   40dd0:	00040e6c 	andhi	zero,zero,4153
   40dd4:	00040e6c 	andhi	zero,zero,4153
   40dd8:	00040e6c 	andhi	zero,zero,4153
   40ddc:	000415c4 	movi	zero,4183
   40de0:	00040e6c 	andhi	zero,zero,4153
   40de4:	00040e6c 	andhi	zero,zero,4153
   40de8:	00041be4 	muli	zero,zero,4207
   40dec:	00040e6c 	andhi	zero,zero,4153
   40df0:	00040e6c 	andhi	zero,zero,4153
   40df4:	00040e6c 	andhi	zero,zero,4153
   40df8:	00040e6c 	andhi	zero,zero,4153
   40dfc:	00040e6c 	andhi	zero,zero,4153
   40e00:	00040e6c 	andhi	zero,zero,4153
   40e04:	00040e6c 	andhi	zero,zero,4153
   40e08:	00040e6c 	andhi	zero,zero,4153
   40e0c:	00040e6c 	andhi	zero,zero,4153
   40e10:	00040e6c 	andhi	zero,zero,4153
   40e14:	00041bb8 	rdprs	zero,zero,4206
   40e18:	000414d0 	cmplti	zero,zero,4179
   40e1c:	00041b30 	cmpltui	zero,zero,4204
   40e20:	00041b30 	cmpltui	zero,zero,4204
   40e24:	00041b30 	cmpltui	zero,zero,4204
   40e28:	00041b1c 	xori	zero,zero,4204
   40e2c:	000414d0 	cmplti	zero,zero,4179
   40e30:	00040e6c 	andhi	zero,zero,4153
   40e34:	00040e6c 	andhi	zero,zero,4153
   40e38:	00041aa4 	muli	zero,zero,4202
   40e3c:	00040e6c 	andhi	zero,zero,4153
   40e40:	00041a74 	movhi	zero,4201
   40e44:	00041584 	movi	zero,4182
   40e48:	00041ad4 	movui	zero,4203
   40e4c:	00041ac0 	call	41ac <__reset-0x3be54>
   40e50:	00040e6c 	andhi	zero,zero,4153
   40e54:	00041d50 	cmplti	zero,zero,4213
   40e58:	00040e6c 	andhi	zero,zero,4153
   40e5c:	000415d0 	cmplti	zero,zero,4183
   40e60:	00040e6c 	andhi	zero,zero,4153
   40e64:	00040e6c 	andhi	zero,zero,4153
   40e68:	00041c48 	cmpgei	zero,zero,4209
   40e6c:	d9014d17 	ldw	r4,1332(sp)
   40e70:	2000ce26 	beq	r4,zero,411ac <___vfprintf_internal_r+0x6d4>
   40e74:	01400044 	movi	r5,1
   40e78:	d9800f04 	addi	r6,sp,60
   40e7c:	d9c14015 	stw	r7,1280(sp)
   40e80:	d9414515 	stw	r5,1300(sp)
   40e84:	d9814115 	stw	r6,1284(sp)
   40e88:	280f883a 	mov	r7,r5
   40e8c:	d9000f05 	stb	r4,60(sp)
   40e90:	d8000405 	stb	zero,16(sp)
   40e94:	d8014615 	stw	zero,1304(sp)
   40e98:	d8c14c17 	ldw	r3,1328(sp)
   40e9c:	1880008c 	andi	r2,r3,2
   40ea0:	1005003a 	cmpeq	r2,r2,zero
   40ea4:	d8815015 	stw	r2,1344(sp)
   40ea8:	1000031e 	bne	r2,zero,40eb8 <___vfprintf_internal_r+0x3e0>
   40eac:	d9014517 	ldw	r4,1300(sp)
   40eb0:	21000084 	addi	r4,r4,2
   40eb4:	d9014515 	stw	r4,1300(sp)
   40eb8:	d9414c17 	ldw	r5,1328(sp)
   40ebc:	2940210c 	andi	r5,r5,132
   40ec0:	d9414e15 	stw	r5,1336(sp)
   40ec4:	28002d1e 	bne	r5,zero,40f7c <___vfprintf_internal_r+0x4a4>
   40ec8:	d9814a17 	ldw	r6,1320(sp)
   40ecc:	d8814517 	ldw	r2,1300(sp)
   40ed0:	30a1c83a 	sub	r16,r6,r2
   40ed4:	0400290e 	bge	zero,r16,40f7c <___vfprintf_internal_r+0x4a4>
   40ed8:	00800404 	movi	r2,16
   40edc:	1404580e 	bge	r2,r16,42040 <___vfprintf_internal_r+0x1568>
   40ee0:	dc800e17 	ldw	r18,56(sp)
   40ee4:	dc400d17 	ldw	r17,52(sp)
   40ee8:	1027883a 	mov	r19,r2
   40eec:	07100034 	movhi	fp,16384
   40ef0:	e7003284 	addi	fp,fp,202
   40ef4:	050001c4 	movi	r20,7
   40ef8:	00000306 	br	40f08 <___vfprintf_internal_r+0x430>
   40efc:	843ffc04 	addi	r16,r16,-16
   40f00:	ad400204 	addi	r21,r21,8
   40f04:	9c00130e 	bge	r19,r16,40f54 <___vfprintf_internal_r+0x47c>
   40f08:	94800404 	addi	r18,r18,16
   40f0c:	8c400044 	addi	r17,r17,1
   40f10:	af000015 	stw	fp,0(r21)
   40f14:	acc00115 	stw	r19,4(r21)
   40f18:	dc800e15 	stw	r18,56(sp)
   40f1c:	dc400d15 	stw	r17,52(sp)
   40f20:	a47ff60e 	bge	r20,r17,40efc <___vfprintf_internal_r+0x424>
   40f24:	d9014f17 	ldw	r4,1340(sp)
   40f28:	b00b883a 	mov	r5,r22
   40f2c:	d9800c04 	addi	r6,sp,48
   40f30:	d9c15115 	stw	r7,1348(sp)
   40f34:	0040a800 	call	40a80 <__sprint_r>
   40f38:	d9c15117 	ldw	r7,1348(sp)
   40f3c:	10009e1e 	bne	r2,zero,411b8 <___vfprintf_internal_r+0x6e0>
   40f40:	843ffc04 	addi	r16,r16,-16
   40f44:	dc800e17 	ldw	r18,56(sp)
   40f48:	dc400d17 	ldw	r17,52(sp)
   40f4c:	dd401904 	addi	r21,sp,100
   40f50:	9c3fed16 	blt	r19,r16,40f08 <___vfprintf_internal_r+0x430>
   40f54:	9425883a 	add	r18,r18,r16
   40f58:	8c400044 	addi	r17,r17,1
   40f5c:	008001c4 	movi	r2,7
   40f60:	af000015 	stw	fp,0(r21)
   40f64:	ac000115 	stw	r16,4(r21)
   40f68:	dc800e15 	stw	r18,56(sp)
   40f6c:	dc400d15 	stw	r17,52(sp)
   40f70:	1441f516 	blt	r2,r17,41748 <___vfprintf_internal_r+0xc70>
   40f74:	ad400204 	addi	r21,r21,8
   40f78:	00000206 	br	40f84 <___vfprintf_internal_r+0x4ac>
   40f7c:	dc800e17 	ldw	r18,56(sp)
   40f80:	dc400d17 	ldw	r17,52(sp)
   40f84:	d8800407 	ldb	r2,16(sp)
   40f88:	10000b26 	beq	r2,zero,40fb8 <___vfprintf_internal_r+0x4e0>
   40f8c:	00800044 	movi	r2,1
   40f90:	94800044 	addi	r18,r18,1
   40f94:	8c400044 	addi	r17,r17,1
   40f98:	a8800115 	stw	r2,4(r21)
   40f9c:	d8c00404 	addi	r3,sp,16
   40fa0:	008001c4 	movi	r2,7
   40fa4:	a8c00015 	stw	r3,0(r21)
   40fa8:	dc800e15 	stw	r18,56(sp)
   40fac:	dc400d15 	stw	r17,52(sp)
   40fb0:	1441da16 	blt	r2,r17,4171c <___vfprintf_internal_r+0xc44>
   40fb4:	ad400204 	addi	r21,r21,8
   40fb8:	d9015017 	ldw	r4,1344(sp)
   40fbc:	20000b1e 	bne	r4,zero,40fec <___vfprintf_internal_r+0x514>
   40fc0:	d8800444 	addi	r2,sp,17
   40fc4:	94800084 	addi	r18,r18,2
   40fc8:	8c400044 	addi	r17,r17,1
   40fcc:	a8800015 	stw	r2,0(r21)
   40fd0:	00c00084 	movi	r3,2
   40fd4:	008001c4 	movi	r2,7
   40fd8:	a8c00115 	stw	r3,4(r21)
   40fdc:	dc800e15 	stw	r18,56(sp)
   40fe0:	dc400d15 	stw	r17,52(sp)
   40fe4:	1441c216 	blt	r2,r17,416f0 <___vfprintf_internal_r+0xc18>
   40fe8:	ad400204 	addi	r21,r21,8
   40fec:	d9414e17 	ldw	r5,1336(sp)
   40ff0:	00802004 	movi	r2,128
   40ff4:	2880b126 	beq	r5,r2,412bc <___vfprintf_internal_r+0x7e4>
   40ff8:	d8c14617 	ldw	r3,1304(sp)
   40ffc:	19e1c83a 	sub	r16,r3,r7
   41000:	0400260e 	bge	zero,r16,4109c <___vfprintf_internal_r+0x5c4>
   41004:	00800404 	movi	r2,16
   41008:	1403c90e 	bge	r2,r16,41f30 <___vfprintf_internal_r+0x1458>
   4100c:	1027883a 	mov	r19,r2
   41010:	07100034 	movhi	fp,16384
   41014:	e7002e84 	addi	fp,fp,186
   41018:	050001c4 	movi	r20,7
   4101c:	00000306 	br	4102c <___vfprintf_internal_r+0x554>
   41020:	843ffc04 	addi	r16,r16,-16
   41024:	ad400204 	addi	r21,r21,8
   41028:	9c00130e 	bge	r19,r16,41078 <___vfprintf_internal_r+0x5a0>
   4102c:	94800404 	addi	r18,r18,16
   41030:	8c400044 	addi	r17,r17,1
   41034:	af000015 	stw	fp,0(r21)
   41038:	acc00115 	stw	r19,4(r21)
   4103c:	dc800e15 	stw	r18,56(sp)
   41040:	dc400d15 	stw	r17,52(sp)
   41044:	a47ff60e 	bge	r20,r17,41020 <___vfprintf_internal_r+0x548>
   41048:	d9014f17 	ldw	r4,1340(sp)
   4104c:	b00b883a 	mov	r5,r22
   41050:	d9800c04 	addi	r6,sp,48
   41054:	d9c15115 	stw	r7,1348(sp)
   41058:	0040a800 	call	40a80 <__sprint_r>
   4105c:	d9c15117 	ldw	r7,1348(sp)
   41060:	1000551e 	bne	r2,zero,411b8 <___vfprintf_internal_r+0x6e0>
   41064:	843ffc04 	addi	r16,r16,-16
   41068:	dc800e17 	ldw	r18,56(sp)
   4106c:	dc400d17 	ldw	r17,52(sp)
   41070:	dd401904 	addi	r21,sp,100
   41074:	9c3fed16 	blt	r19,r16,4102c <___vfprintf_internal_r+0x554>
   41078:	9425883a 	add	r18,r18,r16
   4107c:	8c400044 	addi	r17,r17,1
   41080:	008001c4 	movi	r2,7
   41084:	af000015 	stw	fp,0(r21)
   41088:	ac000115 	stw	r16,4(r21)
   4108c:	dc800e15 	stw	r18,56(sp)
   41090:	dc400d15 	stw	r17,52(sp)
   41094:	14418216 	blt	r2,r17,416a0 <___vfprintf_internal_r+0xbc8>
   41098:	ad400204 	addi	r21,r21,8
   4109c:	d9014c17 	ldw	r4,1328(sp)
   410a0:	2080400c 	andi	r2,r4,256
   410a4:	10004a1e 	bne	r2,zero,411d0 <___vfprintf_internal_r+0x6f8>
   410a8:	d9414117 	ldw	r5,1284(sp)
   410ac:	91e5883a 	add	r18,r18,r7
   410b0:	8c400044 	addi	r17,r17,1
   410b4:	008001c4 	movi	r2,7
   410b8:	a9400015 	stw	r5,0(r21)
   410bc:	a9c00115 	stw	r7,4(r21)
   410c0:	dc800e15 	stw	r18,56(sp)
   410c4:	dc400d15 	stw	r17,52(sp)
   410c8:	14416716 	blt	r2,r17,41668 <___vfprintf_internal_r+0xb90>
   410cc:	a8c00204 	addi	r3,r21,8
   410d0:	d9814c17 	ldw	r6,1328(sp)
   410d4:	3080010c 	andi	r2,r6,4
   410d8:	10002826 	beq	r2,zero,4117c <___vfprintf_internal_r+0x6a4>
   410dc:	d8814a17 	ldw	r2,1320(sp)
   410e0:	d9014517 	ldw	r4,1300(sp)
   410e4:	1121c83a 	sub	r16,r2,r4
   410e8:	0400240e 	bge	zero,r16,4117c <___vfprintf_internal_r+0x6a4>
   410ec:	00800404 	movi	r2,16
   410f0:	14044f0e 	bge	r2,r16,42230 <___vfprintf_internal_r+0x1758>
   410f4:	dc400d17 	ldw	r17,52(sp)
   410f8:	1027883a 	mov	r19,r2
   410fc:	07100034 	movhi	fp,16384
   41100:	e7003284 	addi	fp,fp,202
   41104:	050001c4 	movi	r20,7
   41108:	00000306 	br	41118 <___vfprintf_internal_r+0x640>
   4110c:	843ffc04 	addi	r16,r16,-16
   41110:	18c00204 	addi	r3,r3,8
   41114:	9c00110e 	bge	r19,r16,4115c <___vfprintf_internal_r+0x684>
   41118:	94800404 	addi	r18,r18,16
   4111c:	8c400044 	addi	r17,r17,1
   41120:	1f000015 	stw	fp,0(r3)
   41124:	1cc00115 	stw	r19,4(r3)
   41128:	dc800e15 	stw	r18,56(sp)
   4112c:	dc400d15 	stw	r17,52(sp)
   41130:	a47ff60e 	bge	r20,r17,4110c <___vfprintf_internal_r+0x634>
   41134:	d9014f17 	ldw	r4,1340(sp)
   41138:	b00b883a 	mov	r5,r22
   4113c:	d9800c04 	addi	r6,sp,48
   41140:	0040a800 	call	40a80 <__sprint_r>
   41144:	10001c1e 	bne	r2,zero,411b8 <___vfprintf_internal_r+0x6e0>
   41148:	843ffc04 	addi	r16,r16,-16
   4114c:	dc800e17 	ldw	r18,56(sp)
   41150:	dc400d17 	ldw	r17,52(sp)
   41154:	d8c01904 	addi	r3,sp,100
   41158:	9c3fef16 	blt	r19,r16,41118 <___vfprintf_internal_r+0x640>
   4115c:	9425883a 	add	r18,r18,r16
   41160:	8c400044 	addi	r17,r17,1
   41164:	008001c4 	movi	r2,7
   41168:	1f000015 	stw	fp,0(r3)
   4116c:	1c000115 	stw	r16,4(r3)
   41170:	dc800e15 	stw	r18,56(sp)
   41174:	dc400d15 	stw	r17,52(sp)
   41178:	1440cb16 	blt	r2,r17,414a8 <___vfprintf_internal_r+0x9d0>
   4117c:	d8814a17 	ldw	r2,1320(sp)
   41180:	d9414517 	ldw	r5,1300(sp)
   41184:	1140010e 	bge	r2,r5,4118c <___vfprintf_internal_r+0x6b4>
   41188:	2805883a 	mov	r2,r5
   4118c:	d9814b17 	ldw	r6,1324(sp)
   41190:	308d883a 	add	r6,r6,r2
   41194:	d9814b15 	stw	r6,1324(sp)
   41198:	90013b1e 	bne	r18,zero,41688 <___vfprintf_internal_r+0xbb0>
   4119c:	d9c14017 	ldw	r7,1280(sp)
   411a0:	dd401904 	addi	r21,sp,100
   411a4:	d8000d15 	stw	zero,52(sp)
   411a8:	003ea706 	br	40c48 <___vfprintf_internal_r+0x170>
   411ac:	d8800e17 	ldw	r2,56(sp)
   411b0:	10053f1e 	bne	r2,zero,426b0 <___vfprintf_internal_r+0x1bd8>
   411b4:	d8000d15 	stw	zero,52(sp)
   411b8:	b080030b 	ldhu	r2,12(r22)
   411bc:	1080100c 	andi	r2,r2,64
   411c0:	103e8726 	beq	r2,zero,40be0 <___vfprintf_internal_r+0x108>
   411c4:	00bfffc4 	movi	r2,-1
   411c8:	d8814b15 	stw	r2,1324(sp)
   411cc:	003e8406 	br	40be0 <___vfprintf_internal_r+0x108>
   411d0:	d9814d17 	ldw	r6,1332(sp)
   411d4:	00801944 	movi	r2,101
   411d8:	11806e16 	blt	r2,r6,41394 <___vfprintf_internal_r+0x8bc>
   411dc:	d9414717 	ldw	r5,1308(sp)
   411e0:	00c00044 	movi	r3,1
   411e4:	1943430e 	bge	r3,r5,41ef4 <___vfprintf_internal_r+0x141c>
   411e8:	d8814117 	ldw	r2,1284(sp)
   411ec:	94800044 	addi	r18,r18,1
   411f0:	8c400044 	addi	r17,r17,1
   411f4:	a8800015 	stw	r2,0(r21)
   411f8:	008001c4 	movi	r2,7
   411fc:	a8c00115 	stw	r3,4(r21)
   41200:	dc800e15 	stw	r18,56(sp)
   41204:	dc400d15 	stw	r17,52(sp)
   41208:	1441ca16 	blt	r2,r17,41934 <___vfprintf_internal_r+0xe5c>
   4120c:	a8c00204 	addi	r3,r21,8
   41210:	d9014917 	ldw	r4,1316(sp)
   41214:	00800044 	movi	r2,1
   41218:	94800044 	addi	r18,r18,1
   4121c:	8c400044 	addi	r17,r17,1
   41220:	18800115 	stw	r2,4(r3)
   41224:	008001c4 	movi	r2,7
   41228:	19000015 	stw	r4,0(r3)
   4122c:	dc800e15 	stw	r18,56(sp)
   41230:	dc400d15 	stw	r17,52(sp)
   41234:	1441b616 	blt	r2,r17,41910 <___vfprintf_internal_r+0xe38>
   41238:	1cc00204 	addi	r19,r3,8
   4123c:	d9014217 	ldw	r4,1288(sp)
   41240:	d9414317 	ldw	r5,1292(sp)
   41244:	000d883a 	mov	r6,zero
   41248:	000f883a 	mov	r7,zero
   4124c:	00493180 	call	49318 <__nedf2>
   41250:	10017426 	beq	r2,zero,41824 <___vfprintf_internal_r+0xd4c>
   41254:	d9414717 	ldw	r5,1308(sp)
   41258:	d9814117 	ldw	r6,1284(sp)
   4125c:	8c400044 	addi	r17,r17,1
   41260:	2c85883a 	add	r2,r5,r18
   41264:	14bfffc4 	addi	r18,r2,-1
   41268:	28bfffc4 	addi	r2,r5,-1
   4126c:	30c00044 	addi	r3,r6,1
   41270:	98800115 	stw	r2,4(r19)
   41274:	008001c4 	movi	r2,7
   41278:	98c00015 	stw	r3,0(r19)
   4127c:	dc800e15 	stw	r18,56(sp)
   41280:	dc400d15 	stw	r17,52(sp)
   41284:	14418e16 	blt	r2,r17,418c0 <___vfprintf_internal_r+0xde8>
   41288:	9cc00204 	addi	r19,r19,8
   4128c:	d9414817 	ldw	r5,1312(sp)
   41290:	d8800804 	addi	r2,sp,32
   41294:	8c400044 	addi	r17,r17,1
   41298:	9165883a 	add	r18,r18,r5
   4129c:	98800015 	stw	r2,0(r19)
   412a0:	008001c4 	movi	r2,7
   412a4:	99400115 	stw	r5,4(r19)
   412a8:	dc800e15 	stw	r18,56(sp)
   412ac:	dc400d15 	stw	r17,52(sp)
   412b0:	1440ed16 	blt	r2,r17,41668 <___vfprintf_internal_r+0xb90>
   412b4:	98c00204 	addi	r3,r19,8
   412b8:	003f8506 	br	410d0 <___vfprintf_internal_r+0x5f8>
   412bc:	d9814a17 	ldw	r6,1320(sp)
   412c0:	d8814517 	ldw	r2,1300(sp)
   412c4:	30a1c83a 	sub	r16,r6,r2
   412c8:	043f4b0e 	bge	zero,r16,40ff8 <___vfprintf_internal_r+0x520>
   412cc:	00800404 	movi	r2,16
   412d0:	1404340e 	bge	r2,r16,423a4 <___vfprintf_internal_r+0x18cc>
   412d4:	1027883a 	mov	r19,r2
   412d8:	07100034 	movhi	fp,16384
   412dc:	e7002e84 	addi	fp,fp,186
   412e0:	050001c4 	movi	r20,7
   412e4:	00000306 	br	412f4 <___vfprintf_internal_r+0x81c>
   412e8:	843ffc04 	addi	r16,r16,-16
   412ec:	ad400204 	addi	r21,r21,8
   412f0:	9c00130e 	bge	r19,r16,41340 <___vfprintf_internal_r+0x868>
   412f4:	94800404 	addi	r18,r18,16
   412f8:	8c400044 	addi	r17,r17,1
   412fc:	af000015 	stw	fp,0(r21)
   41300:	acc00115 	stw	r19,4(r21)
   41304:	dc800e15 	stw	r18,56(sp)
   41308:	dc400d15 	stw	r17,52(sp)
   4130c:	a47ff60e 	bge	r20,r17,412e8 <___vfprintf_internal_r+0x810>
   41310:	d9014f17 	ldw	r4,1340(sp)
   41314:	b00b883a 	mov	r5,r22
   41318:	d9800c04 	addi	r6,sp,48
   4131c:	d9c15115 	stw	r7,1348(sp)
   41320:	0040a800 	call	40a80 <__sprint_r>
   41324:	d9c15117 	ldw	r7,1348(sp)
   41328:	103fa31e 	bne	r2,zero,411b8 <___vfprintf_internal_r+0x6e0>
   4132c:	843ffc04 	addi	r16,r16,-16
   41330:	dc800e17 	ldw	r18,56(sp)
   41334:	dc400d17 	ldw	r17,52(sp)
   41338:	dd401904 	addi	r21,sp,100
   4133c:	9c3fed16 	blt	r19,r16,412f4 <___vfprintf_internal_r+0x81c>
   41340:	9425883a 	add	r18,r18,r16
   41344:	8c400044 	addi	r17,r17,1
   41348:	008001c4 	movi	r2,7
   4134c:	af000015 	stw	fp,0(r21)
   41350:	ac000115 	stw	r16,4(r21)
   41354:	dc800e15 	stw	r18,56(sp)
   41358:	dc400d15 	stw	r17,52(sp)
   4135c:	14416116 	blt	r2,r17,418e4 <___vfprintf_internal_r+0xe0c>
   41360:	ad400204 	addi	r21,r21,8
   41364:	003f2406 	br	40ff8 <___vfprintf_internal_r+0x520>
   41368:	d9014f17 	ldw	r4,1340(sp)
   4136c:	00445480 	call	44548 <__sinit>
   41370:	d9c15117 	ldw	r7,1348(sp)
   41374:	003def06 	br	40b34 <___vfprintf_internal_r+0x5c>
   41378:	d9014f17 	ldw	r4,1340(sp)
   4137c:	b00b883a 	mov	r5,r22
   41380:	d9c15115 	stw	r7,1348(sp)
   41384:	00429a80 	call	429a8 <__swsetup_r>
   41388:	d9c15117 	ldw	r7,1348(sp)
   4138c:	103dee26 	beq	r2,zero,40b48 <___vfprintf_internal_r+0x70>
   41390:	003f8c06 	br	411c4 <___vfprintf_internal_r+0x6ec>
   41394:	d9014217 	ldw	r4,1288(sp)
   41398:	d9414317 	ldw	r5,1292(sp)
   4139c:	000d883a 	mov	r6,zero
   413a0:	000f883a 	mov	r7,zero
   413a4:	00492900 	call	49290 <__eqdf2>
   413a8:	1000f21e 	bne	r2,zero,41774 <___vfprintf_internal_r+0xc9c>
   413ac:	00900034 	movhi	r2,16384
   413b0:	10802e04 	addi	r2,r2,184
   413b4:	94800044 	addi	r18,r18,1
   413b8:	8c400044 	addi	r17,r17,1
   413bc:	a8800015 	stw	r2,0(r21)
   413c0:	00c00044 	movi	r3,1
   413c4:	008001c4 	movi	r2,7
   413c8:	a8c00115 	stw	r3,4(r21)
   413cc:	dc800e15 	stw	r18,56(sp)
   413d0:	dc400d15 	stw	r17,52(sp)
   413d4:	1442fa16 	blt	r2,r17,41fc0 <___vfprintf_internal_r+0x14e8>
   413d8:	a8c00204 	addi	r3,r21,8
   413dc:	d8800517 	ldw	r2,20(sp)
   413e0:	d9014717 	ldw	r4,1308(sp)
   413e4:	11015c0e 	bge	r2,r4,41958 <___vfprintf_internal_r+0xe80>
   413e8:	dc400d17 	ldw	r17,52(sp)
   413ec:	d9814917 	ldw	r6,1316(sp)
   413f0:	00800044 	movi	r2,1
   413f4:	94800044 	addi	r18,r18,1
   413f8:	8c400044 	addi	r17,r17,1
   413fc:	18800115 	stw	r2,4(r3)
   41400:	008001c4 	movi	r2,7
   41404:	19800015 	stw	r6,0(r3)
   41408:	dc800e15 	stw	r18,56(sp)
   4140c:	dc400d15 	stw	r17,52(sp)
   41410:	14431016 	blt	r2,r17,42054 <___vfprintf_internal_r+0x157c>
   41414:	18c00204 	addi	r3,r3,8
   41418:	d8814717 	ldw	r2,1308(sp)
   4141c:	143fffc4 	addi	r16,r2,-1
   41420:	043f2b0e 	bge	zero,r16,410d0 <___vfprintf_internal_r+0x5f8>
   41424:	00800404 	movi	r2,16
   41428:	1402a20e 	bge	r2,r16,41eb4 <___vfprintf_internal_r+0x13dc>
   4142c:	dc400d17 	ldw	r17,52(sp)
   41430:	1027883a 	mov	r19,r2
   41434:	07100034 	movhi	fp,16384
   41438:	e7002e84 	addi	fp,fp,186
   4143c:	050001c4 	movi	r20,7
   41440:	00000306 	br	41450 <___vfprintf_internal_r+0x978>
   41444:	18c00204 	addi	r3,r3,8
   41448:	843ffc04 	addi	r16,r16,-16
   4144c:	9c029c0e 	bge	r19,r16,41ec0 <___vfprintf_internal_r+0x13e8>
   41450:	94800404 	addi	r18,r18,16
   41454:	8c400044 	addi	r17,r17,1
   41458:	1f000015 	stw	fp,0(r3)
   4145c:	1cc00115 	stw	r19,4(r3)
   41460:	dc800e15 	stw	r18,56(sp)
   41464:	dc400d15 	stw	r17,52(sp)
   41468:	a47ff60e 	bge	r20,r17,41444 <___vfprintf_internal_r+0x96c>
   4146c:	d9014f17 	ldw	r4,1340(sp)
   41470:	b00b883a 	mov	r5,r22
   41474:	d9800c04 	addi	r6,sp,48
   41478:	0040a800 	call	40a80 <__sprint_r>
   4147c:	103f4e1e 	bne	r2,zero,411b8 <___vfprintf_internal_r+0x6e0>
   41480:	dc800e17 	ldw	r18,56(sp)
   41484:	dc400d17 	ldw	r17,52(sp)
   41488:	d8c01904 	addi	r3,sp,100
   4148c:	003fee06 	br	41448 <___vfprintf_internal_r+0x970>
   41490:	d8802c0b 	ldhu	r2,176(sp)
   41494:	00ffffc4 	movi	r3,-1
   41498:	d8c14b15 	stw	r3,1324(sp)
   4149c:	1080100c 	andi	r2,r2,64
   414a0:	103dcc1e 	bne	r2,zero,40bd4 <___vfprintf_internal_r+0xfc>
   414a4:	003dce06 	br	40be0 <___vfprintf_internal_r+0x108>
   414a8:	d9014f17 	ldw	r4,1340(sp)
   414ac:	b00b883a 	mov	r5,r22
   414b0:	d9800c04 	addi	r6,sp,48
   414b4:	0040a800 	call	40a80 <__sprint_r>
   414b8:	103f3f1e 	bne	r2,zero,411b8 <___vfprintf_internal_r+0x6e0>
   414bc:	dc800e17 	ldw	r18,56(sp)
   414c0:	003f2e06 	br	4117c <___vfprintf_internal_r+0x6a4>
   414c4:	d9414c17 	ldw	r5,1328(sp)
   414c8:	29400414 	ori	r5,r5,16
   414cc:	d9414c15 	stw	r5,1328(sp)
   414d0:	d9814c17 	ldw	r6,1328(sp)
   414d4:	3080080c 	andi	r2,r6,32
   414d8:	10014f1e 	bne	r2,zero,41a18 <___vfprintf_internal_r+0xf40>
   414dc:	d8c14c17 	ldw	r3,1328(sp)
   414e0:	1880040c 	andi	r2,r3,16
   414e4:	1002ea1e 	bne	r2,zero,42090 <___vfprintf_internal_r+0x15b8>
   414e8:	d9014c17 	ldw	r4,1328(sp)
   414ec:	2080100c 	andi	r2,r4,64
   414f0:	1002e726 	beq	r2,zero,42090 <___vfprintf_internal_r+0x15b8>
   414f4:	3880000f 	ldh	r2,0(r7)
   414f8:	39c00104 	addi	r7,r7,4
   414fc:	d9c14015 	stw	r7,1280(sp)
   41500:	1023d7fa 	srai	r17,r2,31
   41504:	1021883a 	mov	r16,r2
   41508:	88037216 	blt	r17,zero,422d4 <___vfprintf_internal_r+0x17fc>
   4150c:	01000044 	movi	r4,1
   41510:	98000416 	blt	r19,zero,41524 <___vfprintf_internal_r+0xa4c>
   41514:	d8c14c17 	ldw	r3,1328(sp)
   41518:	00bfdfc4 	movi	r2,-129
   4151c:	1886703a 	and	r3,r3,r2
   41520:	d8c14c15 	stw	r3,1328(sp)
   41524:	8444b03a 	or	r2,r16,r17
   41528:	1002261e 	bne	r2,zero,41dc4 <___vfprintf_internal_r+0x12ec>
   4152c:	9802251e 	bne	r19,zero,41dc4 <___vfprintf_internal_r+0x12ec>
   41530:	20803fcc 	andi	r2,r4,255
   41534:	10029b26 	beq	r2,zero,41fa4 <___vfprintf_internal_r+0x14cc>
   41538:	d8c01904 	addi	r3,sp,100
   4153c:	dd000f04 	addi	r20,sp,60
   41540:	d8c14115 	stw	r3,1284(sp)
   41544:	d8c14117 	ldw	r3,1284(sp)
   41548:	dcc14515 	stw	r19,1300(sp)
   4154c:	a0c5c83a 	sub	r2,r20,r3
   41550:	11c00a04 	addi	r7,r2,40
   41554:	99c0010e 	bge	r19,r7,4155c <___vfprintf_internal_r+0xa84>
   41558:	d9c14515 	stw	r7,1300(sp)
   4155c:	dcc14615 	stw	r19,1304(sp)
   41560:	d8800407 	ldb	r2,16(sp)
   41564:	103e4c26 	beq	r2,zero,40e98 <___vfprintf_internal_r+0x3c0>
   41568:	d8814517 	ldw	r2,1300(sp)
   4156c:	10800044 	addi	r2,r2,1
   41570:	d8814515 	stw	r2,1300(sp)
   41574:	003e4806 	br	40e98 <___vfprintf_internal_r+0x3c0>
   41578:	d9814c17 	ldw	r6,1328(sp)
   4157c:	31800414 	ori	r6,r6,16
   41580:	d9814c15 	stw	r6,1328(sp)
   41584:	d8c14c17 	ldw	r3,1328(sp)
   41588:	1880080c 	andi	r2,r3,32
   4158c:	1001271e 	bne	r2,zero,41a2c <___vfprintf_internal_r+0xf54>
   41590:	d9414c17 	ldw	r5,1328(sp)
   41594:	2880040c 	andi	r2,r5,16
   41598:	1002b61e 	bne	r2,zero,42074 <___vfprintf_internal_r+0x159c>
   4159c:	d9814c17 	ldw	r6,1328(sp)
   415a0:	3080100c 	andi	r2,r6,64
   415a4:	1002b326 	beq	r2,zero,42074 <___vfprintf_internal_r+0x159c>
   415a8:	3c00000b 	ldhu	r16,0(r7)
   415ac:	0009883a 	mov	r4,zero
   415b0:	39c00104 	addi	r7,r7,4
   415b4:	0023883a 	mov	r17,zero
   415b8:	d9c14015 	stw	r7,1280(sp)
   415bc:	d8000405 	stb	zero,16(sp)
   415c0:	003fd306 	br	41510 <___vfprintf_internal_r+0xa38>
   415c4:	d9014c17 	ldw	r4,1328(sp)
   415c8:	21000414 	ori	r4,r4,16
   415cc:	d9014c15 	stw	r4,1328(sp)
   415d0:	d9414c17 	ldw	r5,1328(sp)
   415d4:	2880080c 	andi	r2,r5,32
   415d8:	1001081e 	bne	r2,zero,419fc <___vfprintf_internal_r+0xf24>
   415dc:	d8c14c17 	ldw	r3,1328(sp)
   415e0:	1880040c 	andi	r2,r3,16
   415e4:	1002b01e 	bne	r2,zero,420a8 <___vfprintf_internal_r+0x15d0>
   415e8:	d9014c17 	ldw	r4,1328(sp)
   415ec:	2080100c 	andi	r2,r4,64
   415f0:	1002ad26 	beq	r2,zero,420a8 <___vfprintf_internal_r+0x15d0>
   415f4:	3c00000b 	ldhu	r16,0(r7)
   415f8:	01000044 	movi	r4,1
   415fc:	39c00104 	addi	r7,r7,4
   41600:	0023883a 	mov	r17,zero
   41604:	d9c14015 	stw	r7,1280(sp)
   41608:	d8000405 	stb	zero,16(sp)
   4160c:	003fc006 	br	41510 <___vfprintf_internal_r+0xa38>
   41610:	d9014f17 	ldw	r4,1340(sp)
   41614:	b00b883a 	mov	r5,r22
   41618:	d9800c04 	addi	r6,sp,48
   4161c:	0040a800 	call	40a80 <__sprint_r>
   41620:	103ee51e 	bne	r2,zero,411b8 <___vfprintf_internal_r+0x6e0>
   41624:	dc800e17 	ldw	r18,56(sp)
   41628:	d8c01904 	addi	r3,sp,100
   4162c:	d9814c17 	ldw	r6,1328(sp)
   41630:	3080004c 	andi	r2,r6,1
   41634:	1005003a 	cmpeq	r2,r2,zero
   41638:	103ea51e 	bne	r2,zero,410d0 <___vfprintf_internal_r+0x5f8>
   4163c:	00800044 	movi	r2,1
   41640:	dc400d17 	ldw	r17,52(sp)
   41644:	18800115 	stw	r2,4(r3)
   41648:	d8814917 	ldw	r2,1316(sp)
   4164c:	94800044 	addi	r18,r18,1
   41650:	8c400044 	addi	r17,r17,1
   41654:	18800015 	stw	r2,0(r3)
   41658:	008001c4 	movi	r2,7
   4165c:	dc800e15 	stw	r18,56(sp)
   41660:	dc400d15 	stw	r17,52(sp)
   41664:	14421e0e 	bge	r2,r17,41ee0 <___vfprintf_internal_r+0x1408>
   41668:	d9014f17 	ldw	r4,1340(sp)
   4166c:	b00b883a 	mov	r5,r22
   41670:	d9800c04 	addi	r6,sp,48
   41674:	0040a800 	call	40a80 <__sprint_r>
   41678:	103ecf1e 	bne	r2,zero,411b8 <___vfprintf_internal_r+0x6e0>
   4167c:	dc800e17 	ldw	r18,56(sp)
   41680:	d8c01904 	addi	r3,sp,100
   41684:	003e9206 	br	410d0 <___vfprintf_internal_r+0x5f8>
   41688:	d9014f17 	ldw	r4,1340(sp)
   4168c:	b00b883a 	mov	r5,r22
   41690:	d9800c04 	addi	r6,sp,48
   41694:	0040a800 	call	40a80 <__sprint_r>
   41698:	103ec026 	beq	r2,zero,4119c <___vfprintf_internal_r+0x6c4>
   4169c:	003ec606 	br	411b8 <___vfprintf_internal_r+0x6e0>
   416a0:	d9014f17 	ldw	r4,1340(sp)
   416a4:	b00b883a 	mov	r5,r22
   416a8:	d9800c04 	addi	r6,sp,48
   416ac:	d9c15115 	stw	r7,1348(sp)
   416b0:	0040a800 	call	40a80 <__sprint_r>
   416b4:	d9c15117 	ldw	r7,1348(sp)
   416b8:	103ebf1e 	bne	r2,zero,411b8 <___vfprintf_internal_r+0x6e0>
   416bc:	dc800e17 	ldw	r18,56(sp)
   416c0:	dc400d17 	ldw	r17,52(sp)
   416c4:	dd401904 	addi	r21,sp,100
   416c8:	003e7406 	br	4109c <___vfprintf_internal_r+0x5c4>
   416cc:	d9014f17 	ldw	r4,1340(sp)
   416d0:	b00b883a 	mov	r5,r22
   416d4:	d9800c04 	addi	r6,sp,48
   416d8:	d9c15115 	stw	r7,1348(sp)
   416dc:	0040a800 	call	40a80 <__sprint_r>
   416e0:	d9c15117 	ldw	r7,1348(sp)
   416e4:	103eb41e 	bne	r2,zero,411b8 <___vfprintf_internal_r+0x6e0>
   416e8:	dd401904 	addi	r21,sp,100
   416ec:	003d6d06 	br	40ca4 <___vfprintf_internal_r+0x1cc>
   416f0:	d9014f17 	ldw	r4,1340(sp)
   416f4:	b00b883a 	mov	r5,r22
   416f8:	d9800c04 	addi	r6,sp,48
   416fc:	d9c15115 	stw	r7,1348(sp)
   41700:	0040a800 	call	40a80 <__sprint_r>
   41704:	d9c15117 	ldw	r7,1348(sp)
   41708:	103eab1e 	bne	r2,zero,411b8 <___vfprintf_internal_r+0x6e0>
   4170c:	dc800e17 	ldw	r18,56(sp)
   41710:	dc400d17 	ldw	r17,52(sp)
   41714:	dd401904 	addi	r21,sp,100
   41718:	003e3406 	br	40fec <___vfprintf_internal_r+0x514>
   4171c:	d9014f17 	ldw	r4,1340(sp)
   41720:	b00b883a 	mov	r5,r22
   41724:	d9800c04 	addi	r6,sp,48
   41728:	d9c15115 	stw	r7,1348(sp)
   4172c:	0040a800 	call	40a80 <__sprint_r>
   41730:	d9c15117 	ldw	r7,1348(sp)
   41734:	103ea01e 	bne	r2,zero,411b8 <___vfprintf_internal_r+0x6e0>
   41738:	dc800e17 	ldw	r18,56(sp)
   4173c:	dc400d17 	ldw	r17,52(sp)
   41740:	dd401904 	addi	r21,sp,100
   41744:	003e1c06 	br	40fb8 <___vfprintf_internal_r+0x4e0>
   41748:	d9014f17 	ldw	r4,1340(sp)
   4174c:	b00b883a 	mov	r5,r22
   41750:	d9800c04 	addi	r6,sp,48
   41754:	d9c15115 	stw	r7,1348(sp)
   41758:	0040a800 	call	40a80 <__sprint_r>
   4175c:	d9c15117 	ldw	r7,1348(sp)
   41760:	103e951e 	bne	r2,zero,411b8 <___vfprintf_internal_r+0x6e0>
   41764:	dc800e17 	ldw	r18,56(sp)
   41768:	dc400d17 	ldw	r17,52(sp)
   4176c:	dd401904 	addi	r21,sp,100
   41770:	003e0406 	br	40f84 <___vfprintf_internal_r+0x4ac>
   41774:	d9000517 	ldw	r4,20(sp)
   41778:	0102520e 	bge	zero,r4,420c4 <___vfprintf_internal_r+0x15ec>
   4177c:	d9814717 	ldw	r6,1308(sp)
   41780:	21807a16 	blt	r4,r6,4196c <___vfprintf_internal_r+0xe94>
   41784:	d8814117 	ldw	r2,1284(sp)
   41788:	91a5883a 	add	r18,r18,r6
   4178c:	8c400044 	addi	r17,r17,1
   41790:	a8800015 	stw	r2,0(r21)
   41794:	008001c4 	movi	r2,7
   41798:	a9800115 	stw	r6,4(r21)
   4179c:	dc800e15 	stw	r18,56(sp)
   417a0:	dc400d15 	stw	r17,52(sp)
   417a4:	1442f616 	blt	r2,r17,42380 <___vfprintf_internal_r+0x18a8>
   417a8:	a8c00204 	addi	r3,r21,8
   417ac:	d9414717 	ldw	r5,1308(sp)
   417b0:	2161c83a 	sub	r16,r4,r5
   417b4:	043f9d0e 	bge	zero,r16,4162c <___vfprintf_internal_r+0xb54>
   417b8:	00800404 	movi	r2,16
   417bc:	1402130e 	bge	r2,r16,4200c <___vfprintf_internal_r+0x1534>
   417c0:	dc400d17 	ldw	r17,52(sp)
   417c4:	1027883a 	mov	r19,r2
   417c8:	07100034 	movhi	fp,16384
   417cc:	e7002e84 	addi	fp,fp,186
   417d0:	050001c4 	movi	r20,7
   417d4:	00000306 	br	417e4 <___vfprintf_internal_r+0xd0c>
   417d8:	18c00204 	addi	r3,r3,8
   417dc:	843ffc04 	addi	r16,r16,-16
   417e0:	9c020d0e 	bge	r19,r16,42018 <___vfprintf_internal_r+0x1540>
   417e4:	94800404 	addi	r18,r18,16
   417e8:	8c400044 	addi	r17,r17,1
   417ec:	1f000015 	stw	fp,0(r3)
   417f0:	1cc00115 	stw	r19,4(r3)
   417f4:	dc800e15 	stw	r18,56(sp)
   417f8:	dc400d15 	stw	r17,52(sp)
   417fc:	a47ff60e 	bge	r20,r17,417d8 <___vfprintf_internal_r+0xd00>
   41800:	d9014f17 	ldw	r4,1340(sp)
   41804:	b00b883a 	mov	r5,r22
   41808:	d9800c04 	addi	r6,sp,48
   4180c:	0040a800 	call	40a80 <__sprint_r>
   41810:	103e691e 	bne	r2,zero,411b8 <___vfprintf_internal_r+0x6e0>
   41814:	dc800e17 	ldw	r18,56(sp)
   41818:	dc400d17 	ldw	r17,52(sp)
   4181c:	d8c01904 	addi	r3,sp,100
   41820:	003fee06 	br	417dc <___vfprintf_internal_r+0xd04>
   41824:	d8814717 	ldw	r2,1308(sp)
   41828:	143fffc4 	addi	r16,r2,-1
   4182c:	043e970e 	bge	zero,r16,4128c <___vfprintf_internal_r+0x7b4>
   41830:	00800404 	movi	r2,16
   41834:	1400180e 	bge	r2,r16,41898 <___vfprintf_internal_r+0xdc0>
   41838:	1029883a 	mov	r20,r2
   4183c:	07100034 	movhi	fp,16384
   41840:	e7002e84 	addi	fp,fp,186
   41844:	054001c4 	movi	r21,7
   41848:	00000306 	br	41858 <___vfprintf_internal_r+0xd80>
   4184c:	9cc00204 	addi	r19,r19,8
   41850:	843ffc04 	addi	r16,r16,-16
   41854:	a400120e 	bge	r20,r16,418a0 <___vfprintf_internal_r+0xdc8>
   41858:	94800404 	addi	r18,r18,16
   4185c:	8c400044 	addi	r17,r17,1
   41860:	9f000015 	stw	fp,0(r19)
   41864:	9d000115 	stw	r20,4(r19)
   41868:	dc800e15 	stw	r18,56(sp)
   4186c:	dc400d15 	stw	r17,52(sp)
   41870:	ac7ff60e 	bge	r21,r17,4184c <___vfprintf_internal_r+0xd74>
   41874:	d9014f17 	ldw	r4,1340(sp)
   41878:	b00b883a 	mov	r5,r22
   4187c:	d9800c04 	addi	r6,sp,48
   41880:	0040a800 	call	40a80 <__sprint_r>
   41884:	103e4c1e 	bne	r2,zero,411b8 <___vfprintf_internal_r+0x6e0>
   41888:	dc800e17 	ldw	r18,56(sp)
   4188c:	dc400d17 	ldw	r17,52(sp)
   41890:	dcc01904 	addi	r19,sp,100
   41894:	003fee06 	br	41850 <___vfprintf_internal_r+0xd78>
   41898:	07100034 	movhi	fp,16384
   4189c:	e7002e84 	addi	fp,fp,186
   418a0:	9425883a 	add	r18,r18,r16
   418a4:	8c400044 	addi	r17,r17,1
   418a8:	008001c4 	movi	r2,7
   418ac:	9f000015 	stw	fp,0(r19)
   418b0:	9c000115 	stw	r16,4(r19)
   418b4:	dc800e15 	stw	r18,56(sp)
   418b8:	dc400d15 	stw	r17,52(sp)
   418bc:	147e720e 	bge	r2,r17,41288 <___vfprintf_internal_r+0x7b0>
   418c0:	d9014f17 	ldw	r4,1340(sp)
   418c4:	b00b883a 	mov	r5,r22
   418c8:	d9800c04 	addi	r6,sp,48
   418cc:	0040a800 	call	40a80 <__sprint_r>
   418d0:	103e391e 	bne	r2,zero,411b8 <___vfprintf_internal_r+0x6e0>
   418d4:	dc800e17 	ldw	r18,56(sp)
   418d8:	dc400d17 	ldw	r17,52(sp)
   418dc:	dcc01904 	addi	r19,sp,100
   418e0:	003e6a06 	br	4128c <___vfprintf_internal_r+0x7b4>
   418e4:	d9014f17 	ldw	r4,1340(sp)
   418e8:	b00b883a 	mov	r5,r22
   418ec:	d9800c04 	addi	r6,sp,48
   418f0:	d9c15115 	stw	r7,1348(sp)
   418f4:	0040a800 	call	40a80 <__sprint_r>
   418f8:	d9c15117 	ldw	r7,1348(sp)
   418fc:	103e2e1e 	bne	r2,zero,411b8 <___vfprintf_internal_r+0x6e0>
   41900:	dc800e17 	ldw	r18,56(sp)
   41904:	dc400d17 	ldw	r17,52(sp)
   41908:	dd401904 	addi	r21,sp,100
   4190c:	003dba06 	br	40ff8 <___vfprintf_internal_r+0x520>
   41910:	d9014f17 	ldw	r4,1340(sp)
   41914:	b00b883a 	mov	r5,r22
   41918:	d9800c04 	addi	r6,sp,48
   4191c:	0040a800 	call	40a80 <__sprint_r>
   41920:	103e251e 	bne	r2,zero,411b8 <___vfprintf_internal_r+0x6e0>
   41924:	dc800e17 	ldw	r18,56(sp)
   41928:	dc400d17 	ldw	r17,52(sp)
   4192c:	dcc01904 	addi	r19,sp,100
   41930:	003e4206 	br	4123c <___vfprintf_internal_r+0x764>
   41934:	d9014f17 	ldw	r4,1340(sp)
   41938:	b00b883a 	mov	r5,r22
   4193c:	d9800c04 	addi	r6,sp,48
   41940:	0040a800 	call	40a80 <__sprint_r>
   41944:	103e1c1e 	bne	r2,zero,411b8 <___vfprintf_internal_r+0x6e0>
   41948:	dc800e17 	ldw	r18,56(sp)
   4194c:	dc400d17 	ldw	r17,52(sp)
   41950:	d8c01904 	addi	r3,sp,100
   41954:	003e2e06 	br	41210 <___vfprintf_internal_r+0x738>
   41958:	d9414c17 	ldw	r5,1328(sp)
   4195c:	2880004c 	andi	r2,r5,1
   41960:	1005003a 	cmpeq	r2,r2,zero
   41964:	103dda1e 	bne	r2,zero,410d0 <___vfprintf_internal_r+0x5f8>
   41968:	003e9f06 	br	413e8 <___vfprintf_internal_r+0x910>
   4196c:	d8c14117 	ldw	r3,1284(sp)
   41970:	9125883a 	add	r18,r18,r4
   41974:	8c400044 	addi	r17,r17,1
   41978:	008001c4 	movi	r2,7
   4197c:	a8c00015 	stw	r3,0(r21)
   41980:	a9000115 	stw	r4,4(r21)
   41984:	dc800e15 	stw	r18,56(sp)
   41988:	dc400d15 	stw	r17,52(sp)
   4198c:	14426616 	blt	r2,r17,42328 <___vfprintf_internal_r+0x1850>
   41990:	a8c00204 	addi	r3,r21,8
   41994:	d9414917 	ldw	r5,1316(sp)
   41998:	00800044 	movi	r2,1
   4199c:	94800044 	addi	r18,r18,1
   419a0:	8c400044 	addi	r17,r17,1
   419a4:	18800115 	stw	r2,4(r3)
   419a8:	008001c4 	movi	r2,7
   419ac:	19400015 	stw	r5,0(r3)
   419b0:	dc800e15 	stw	r18,56(sp)
   419b4:	dc400d15 	stw	r17,52(sp)
   419b8:	2021883a 	mov	r16,r4
   419bc:	14425016 	blt	r2,r17,42300 <___vfprintf_internal_r+0x1828>
   419c0:	19400204 	addi	r5,r3,8
   419c4:	d9814717 	ldw	r6,1308(sp)
   419c8:	8c400044 	addi	r17,r17,1
   419cc:	dc400d15 	stw	r17,52(sp)
   419d0:	3107c83a 	sub	r3,r6,r4
   419d4:	d9014117 	ldw	r4,1284(sp)
   419d8:	90e5883a 	add	r18,r18,r3
   419dc:	28c00115 	stw	r3,4(r5)
   419e0:	8105883a 	add	r2,r16,r4
   419e4:	28800015 	stw	r2,0(r5)
   419e8:	008001c4 	movi	r2,7
   419ec:	dc800e15 	stw	r18,56(sp)
   419f0:	147f1d16 	blt	r2,r17,41668 <___vfprintf_internal_r+0xb90>
   419f4:	28c00204 	addi	r3,r5,8
   419f8:	003db506 	br	410d0 <___vfprintf_internal_r+0x5f8>
   419fc:	3c000017 	ldw	r16,0(r7)
   41a00:	3c400117 	ldw	r17,4(r7)
   41a04:	39800204 	addi	r6,r7,8
   41a08:	01000044 	movi	r4,1
   41a0c:	d9814015 	stw	r6,1280(sp)
   41a10:	d8000405 	stb	zero,16(sp)
   41a14:	003ebe06 	br	41510 <___vfprintf_internal_r+0xa38>
   41a18:	3c000017 	ldw	r16,0(r7)
   41a1c:	3c400117 	ldw	r17,4(r7)
   41a20:	38800204 	addi	r2,r7,8
   41a24:	d8814015 	stw	r2,1280(sp)
   41a28:	003eb706 	br	41508 <___vfprintf_internal_r+0xa30>
   41a2c:	3c000017 	ldw	r16,0(r7)
   41a30:	3c400117 	ldw	r17,4(r7)
   41a34:	39000204 	addi	r4,r7,8
   41a38:	d9014015 	stw	r4,1280(sp)
   41a3c:	0009883a 	mov	r4,zero
   41a40:	d8000405 	stb	zero,16(sp)
   41a44:	003eb206 	br	41510 <___vfprintf_internal_r+0xa38>
   41a48:	38c00017 	ldw	r3,0(r7)
   41a4c:	39c00104 	addi	r7,r7,4
   41a50:	d8c14a15 	stw	r3,1320(sp)
   41a54:	1800d10e 	bge	r3,zero,41d9c <___vfprintf_internal_r+0x12c4>
   41a58:	00c7c83a 	sub	r3,zero,r3
   41a5c:	d8c14a15 	stw	r3,1320(sp)
   41a60:	d9014c17 	ldw	r4,1328(sp)
   41a64:	b8c00007 	ldb	r3,0(r23)
   41a68:	21000114 	ori	r4,r4,4
   41a6c:	d9014c15 	stw	r4,1328(sp)
   41a70:	003c9806 	br	40cd4 <___vfprintf_internal_r+0x1fc>
   41a74:	d9814c17 	ldw	r6,1328(sp)
   41a78:	3080080c 	andi	r2,r6,32
   41a7c:	1001f026 	beq	r2,zero,42240 <___vfprintf_internal_r+0x1768>
   41a80:	d9014b17 	ldw	r4,1324(sp)
   41a84:	38800017 	ldw	r2,0(r7)
   41a88:	39c00104 	addi	r7,r7,4
   41a8c:	d9c14015 	stw	r7,1280(sp)
   41a90:	2007d7fa 	srai	r3,r4,31
   41a94:	d9c14017 	ldw	r7,1280(sp)
   41a98:	11000015 	stw	r4,0(r2)
   41a9c:	10c00115 	stw	r3,4(r2)
   41aa0:	003c6906 	br	40c48 <___vfprintf_internal_r+0x170>
   41aa4:	b8c00007 	ldb	r3,0(r23)
   41aa8:	00801b04 	movi	r2,108
   41aac:	18824f26 	beq	r3,r2,423ec <___vfprintf_internal_r+0x1914>
   41ab0:	d9414c17 	ldw	r5,1328(sp)
   41ab4:	29400414 	ori	r5,r5,16
   41ab8:	d9414c15 	stw	r5,1328(sp)
   41abc:	003c8506 	br	40cd4 <___vfprintf_internal_r+0x1fc>
   41ac0:	d9814c17 	ldw	r6,1328(sp)
   41ac4:	b8c00007 	ldb	r3,0(r23)
   41ac8:	31800814 	ori	r6,r6,32
   41acc:	d9814c15 	stw	r6,1328(sp)
   41ad0:	003c8006 	br	40cd4 <___vfprintf_internal_r+0x1fc>
   41ad4:	d8814c17 	ldw	r2,1328(sp)
   41ad8:	3c000017 	ldw	r16,0(r7)
   41adc:	00c01e04 	movi	r3,120
   41ae0:	10800094 	ori	r2,r2,2
   41ae4:	d8814c15 	stw	r2,1328(sp)
   41ae8:	39c00104 	addi	r7,r7,4
   41aec:	01500034 	movhi	r5,16384
   41af0:	29401704 	addi	r5,r5,92
   41af4:	00800c04 	movi	r2,48
   41af8:	0023883a 	mov	r17,zero
   41afc:	01000084 	movi	r4,2
   41b00:	d9c14015 	stw	r7,1280(sp)
   41b04:	d8c14d15 	stw	r3,1332(sp)
   41b08:	d9414415 	stw	r5,1296(sp)
   41b0c:	d8800445 	stb	r2,17(sp)
   41b10:	d8c00485 	stb	r3,18(sp)
   41b14:	d8000405 	stb	zero,16(sp)
   41b18:	003e7d06 	br	41510 <___vfprintf_internal_r+0xa38>
   41b1c:	d8814c17 	ldw	r2,1328(sp)
   41b20:	b8c00007 	ldb	r3,0(r23)
   41b24:	10801014 	ori	r2,r2,64
   41b28:	d8814c15 	stw	r2,1328(sp)
   41b2c:	003c6906 	br	40cd4 <___vfprintf_internal_r+0x1fc>
   41b30:	d9414c17 	ldw	r5,1328(sp)
   41b34:	2880020c 	andi	r2,r5,8
   41b38:	1001df26 	beq	r2,zero,422b8 <___vfprintf_internal_r+0x17e0>
   41b3c:	39800017 	ldw	r6,0(r7)
   41b40:	38800204 	addi	r2,r7,8
   41b44:	d8814015 	stw	r2,1280(sp)
   41b48:	d9814215 	stw	r6,1288(sp)
   41b4c:	39c00117 	ldw	r7,4(r7)
   41b50:	d9c14315 	stw	r7,1292(sp)
   41b54:	d9014217 	ldw	r4,1288(sp)
   41b58:	d9414317 	ldw	r5,1292(sp)
   41b5c:	00474780 	call	47478 <__isinfd>
   41b60:	10021726 	beq	r2,zero,423c0 <___vfprintf_internal_r+0x18e8>
   41b64:	d9014217 	ldw	r4,1288(sp)
   41b68:	d9414317 	ldw	r5,1292(sp)
   41b6c:	000d883a 	mov	r6,zero
   41b70:	000f883a 	mov	r7,zero
   41b74:	00494b00 	call	494b0 <__ltdf2>
   41b78:	1002ca16 	blt	r2,zero,426a4 <___vfprintf_internal_r+0x1bcc>
   41b7c:	d9414d17 	ldw	r5,1332(sp)
   41b80:	008011c4 	movi	r2,71
   41b84:	11420a16 	blt	r2,r5,423b0 <___vfprintf_internal_r+0x18d8>
   41b88:	01900034 	movhi	r6,16384
   41b8c:	31801c04 	addi	r6,r6,112
   41b90:	d9814115 	stw	r6,1284(sp)
   41b94:	d9014c17 	ldw	r4,1328(sp)
   41b98:	00c000c4 	movi	r3,3
   41b9c:	00bfdfc4 	movi	r2,-129
   41ba0:	2088703a 	and	r4,r4,r2
   41ba4:	180f883a 	mov	r7,r3
   41ba8:	d8c14515 	stw	r3,1300(sp)
   41bac:	d9014c15 	stw	r4,1328(sp)
   41bb0:	d8014615 	stw	zero,1304(sp)
   41bb4:	003e6a06 	br	41560 <___vfprintf_internal_r+0xa88>
   41bb8:	38800017 	ldw	r2,0(r7)
   41bbc:	00c00044 	movi	r3,1
   41bc0:	39c00104 	addi	r7,r7,4
   41bc4:	d9c14015 	stw	r7,1280(sp)
   41bc8:	d9000f04 	addi	r4,sp,60
   41bcc:	180f883a 	mov	r7,r3
   41bd0:	d8c14515 	stw	r3,1300(sp)
   41bd4:	d9014115 	stw	r4,1284(sp)
   41bd8:	d8800f05 	stb	r2,60(sp)
   41bdc:	d8000405 	stb	zero,16(sp)
   41be0:	003cac06 	br	40e94 <___vfprintf_internal_r+0x3bc>
   41be4:	01500034 	movhi	r5,16384
   41be8:	29402204 	addi	r5,r5,136
   41bec:	d9414415 	stw	r5,1296(sp)
   41bf0:	d9814c17 	ldw	r6,1328(sp)
   41bf4:	3080080c 	andi	r2,r6,32
   41bf8:	1000f926 	beq	r2,zero,41fe0 <___vfprintf_internal_r+0x1508>
   41bfc:	3c000017 	ldw	r16,0(r7)
   41c00:	3c400117 	ldw	r17,4(r7)
   41c04:	38800204 	addi	r2,r7,8
   41c08:	d8814015 	stw	r2,1280(sp)
   41c0c:	d9414c17 	ldw	r5,1328(sp)
   41c10:	2880004c 	andi	r2,r5,1
   41c14:	1005003a 	cmpeq	r2,r2,zero
   41c18:	1000b31e 	bne	r2,zero,41ee8 <___vfprintf_internal_r+0x1410>
   41c1c:	8444b03a 	or	r2,r16,r17
   41c20:	1000b126 	beq	r2,zero,41ee8 <___vfprintf_internal_r+0x1410>
   41c24:	d9814d17 	ldw	r6,1332(sp)
   41c28:	29400094 	ori	r5,r5,2
   41c2c:	00800c04 	movi	r2,48
   41c30:	01000084 	movi	r4,2
   41c34:	d9414c15 	stw	r5,1328(sp)
   41c38:	d8800445 	stb	r2,17(sp)
   41c3c:	d9800485 	stb	r6,18(sp)
   41c40:	d8000405 	stb	zero,16(sp)
   41c44:	003e3206 	br	41510 <___vfprintf_internal_r+0xa38>
   41c48:	01900034 	movhi	r6,16384
   41c4c:	31801704 	addi	r6,r6,92
   41c50:	d9814415 	stw	r6,1296(sp)
   41c54:	003fe606 	br	41bf0 <___vfprintf_internal_r+0x1118>
   41c58:	00800ac4 	movi	r2,43
   41c5c:	d8800405 	stb	r2,16(sp)
   41c60:	b8c00007 	ldb	r3,0(r23)
   41c64:	003c1b06 	br	40cd4 <___vfprintf_internal_r+0x1fc>
   41c68:	d8814c17 	ldw	r2,1328(sp)
   41c6c:	b8c00007 	ldb	r3,0(r23)
   41c70:	10800054 	ori	r2,r2,1
   41c74:	d8814c15 	stw	r2,1328(sp)
   41c78:	003c1606 	br	40cd4 <___vfprintf_internal_r+0x1fc>
   41c7c:	d8800407 	ldb	r2,16(sp)
   41c80:	1000461e 	bne	r2,zero,41d9c <___vfprintf_internal_r+0x12c4>
   41c84:	00800804 	movi	r2,32
   41c88:	d8800405 	stb	r2,16(sp)
   41c8c:	b8c00007 	ldb	r3,0(r23)
   41c90:	003c1006 	br	40cd4 <___vfprintf_internal_r+0x1fc>
   41c94:	d9814c17 	ldw	r6,1328(sp)
   41c98:	b8c00007 	ldb	r3,0(r23)
   41c9c:	31800214 	ori	r6,r6,8
   41ca0:	d9814c15 	stw	r6,1328(sp)
   41ca4:	003c0b06 	br	40cd4 <___vfprintf_internal_r+0x1fc>
   41ca8:	0007883a 	mov	r3,zero
   41cac:	01000244 	movi	r4,9
   41cb0:	188002a4 	muli	r2,r3,10
   41cb4:	b8c00007 	ldb	r3,0(r23)
   41cb8:	d9814d17 	ldw	r6,1332(sp)
   41cbc:	bdc00044 	addi	r23,r23,1
   41cc0:	d8c14d15 	stw	r3,1332(sp)
   41cc4:	d9414d17 	ldw	r5,1332(sp)
   41cc8:	3085883a 	add	r2,r6,r2
   41ccc:	10fff404 	addi	r3,r2,-48
   41cd0:	28bff404 	addi	r2,r5,-48
   41cd4:	20bff62e 	bgeu	r4,r2,41cb0 <___vfprintf_internal_r+0x11d8>
   41cd8:	d8c14a15 	stw	r3,1320(sp)
   41cdc:	003bff06 	br	40cdc <___vfprintf_internal_r+0x204>
   41ce0:	d9414c17 	ldw	r5,1328(sp)
   41ce4:	b8c00007 	ldb	r3,0(r23)
   41ce8:	29402014 	ori	r5,r5,128
   41cec:	d9414c15 	stw	r5,1328(sp)
   41cf0:	003bf806 	br	40cd4 <___vfprintf_internal_r+0x1fc>
   41cf4:	b8c00007 	ldb	r3,0(r23)
   41cf8:	00800a84 	movi	r2,42
   41cfc:	bdc00044 	addi	r23,r23,1
   41d00:	18831526 	beq	r3,r2,42958 <___vfprintf_internal_r+0x1e80>
   41d04:	d8c14d15 	stw	r3,1332(sp)
   41d08:	18bff404 	addi	r2,r3,-48
   41d0c:	00c00244 	movi	r3,9
   41d10:	18827836 	bltu	r3,r2,426f4 <___vfprintf_internal_r+0x1c1c>
   41d14:	000d883a 	mov	r6,zero
   41d18:	308002a4 	muli	r2,r6,10
   41d1c:	b9800007 	ldb	r6,0(r23)
   41d20:	d9414d17 	ldw	r5,1332(sp)
   41d24:	bdc00044 	addi	r23,r23,1
   41d28:	d9814d15 	stw	r6,1332(sp)
   41d2c:	d9014d17 	ldw	r4,1332(sp)
   41d30:	1145883a 	add	r2,r2,r5
   41d34:	11bff404 	addi	r6,r2,-48
   41d38:	20bff404 	addi	r2,r4,-48
   41d3c:	18bff62e 	bgeu	r3,r2,41d18 <___vfprintf_internal_r+0x1240>
   41d40:	3027883a 	mov	r19,r6
   41d44:	303be50e 	bge	r6,zero,40cdc <___vfprintf_internal_r+0x204>
   41d48:	04ffffc4 	movi	r19,-1
   41d4c:	003be306 	br	40cdc <___vfprintf_internal_r+0x204>
   41d50:	d8000405 	stb	zero,16(sp)
   41d54:	39800017 	ldw	r6,0(r7)
   41d58:	39c00104 	addi	r7,r7,4
   41d5c:	d9c14015 	stw	r7,1280(sp)
   41d60:	d9814115 	stw	r6,1284(sp)
   41d64:	3001c926 	beq	r6,zero,4248c <___vfprintf_internal_r+0x19b4>
   41d68:	98000e16 	blt	r19,zero,41da4 <___vfprintf_internal_r+0x12cc>
   41d6c:	d9014117 	ldw	r4,1284(sp)
   41d70:	000b883a 	mov	r5,zero
   41d74:	980d883a 	mov	r6,r19
   41d78:	0045b940 	call	45b94 <memchr>
   41d7c:	10025926 	beq	r2,zero,426e4 <___vfprintf_internal_r+0x1c0c>
   41d80:	d8c14117 	ldw	r3,1284(sp)
   41d84:	10cfc83a 	sub	r7,r2,r3
   41d88:	99c19e16 	blt	r19,r7,42404 <___vfprintf_internal_r+0x192c>
   41d8c:	d9c14515 	stw	r7,1300(sp)
   41d90:	38000916 	blt	r7,zero,41db8 <___vfprintf_internal_r+0x12e0>
   41d94:	d8014615 	stw	zero,1304(sp)
   41d98:	003df106 	br	41560 <___vfprintf_internal_r+0xa88>
   41d9c:	b8c00007 	ldb	r3,0(r23)
   41da0:	003bcc06 	br	40cd4 <___vfprintf_internal_r+0x1fc>
   41da4:	d9014117 	ldw	r4,1284(sp)
   41da8:	0040a0c0 	call	40a0c <strlen>
   41dac:	d8814515 	stw	r2,1300(sp)
   41db0:	100f883a 	mov	r7,r2
   41db4:	103ff70e 	bge	r2,zero,41d94 <___vfprintf_internal_r+0x12bc>
   41db8:	d8014515 	stw	zero,1300(sp)
   41dbc:	d8014615 	stw	zero,1304(sp)
   41dc0:	003de706 	br	41560 <___vfprintf_internal_r+0xa88>
   41dc4:	20c03fcc 	andi	r3,r4,255
   41dc8:	00800044 	movi	r2,1
   41dcc:	18802d26 	beq	r3,r2,41e84 <___vfprintf_internal_r+0x13ac>
   41dd0:	18800e36 	bltu	r3,r2,41e0c <___vfprintf_internal_r+0x1334>
   41dd4:	00800084 	movi	r2,2
   41dd8:	1880fa26 	beq	r3,r2,421c4 <___vfprintf_internal_r+0x16ec>
   41ddc:	01100034 	movhi	r4,16384
   41de0:	21002704 	addi	r4,r4,156
   41de4:	0040a0c0 	call	40a0c <strlen>
   41de8:	100f883a 	mov	r7,r2
   41dec:	dcc14515 	stw	r19,1300(sp)
   41df0:	9880010e 	bge	r19,r2,41df8 <___vfprintf_internal_r+0x1320>
   41df4:	d8814515 	stw	r2,1300(sp)
   41df8:	00900034 	movhi	r2,16384
   41dfc:	10802704 	addi	r2,r2,156
   41e00:	dcc14615 	stw	r19,1304(sp)
   41e04:	d8814115 	stw	r2,1284(sp)
   41e08:	003dd506 	br	41560 <___vfprintf_internal_r+0xa88>
   41e0c:	d9401904 	addi	r5,sp,100
   41e10:	dd000f04 	addi	r20,sp,60
   41e14:	d9414115 	stw	r5,1284(sp)
   41e18:	880a977a 	slli	r5,r17,29
   41e1c:	d9814117 	ldw	r6,1284(sp)
   41e20:	8004d0fa 	srli	r2,r16,3
   41e24:	8806d0fa 	srli	r3,r17,3
   41e28:	810001cc 	andi	r4,r16,7
   41e2c:	2884b03a 	or	r2,r5,r2
   41e30:	31bfffc4 	addi	r6,r6,-1
   41e34:	21000c04 	addi	r4,r4,48
   41e38:	d9814115 	stw	r6,1284(sp)
   41e3c:	10cab03a 	or	r5,r2,r3
   41e40:	31000005 	stb	r4,0(r6)
   41e44:	1021883a 	mov	r16,r2
   41e48:	1823883a 	mov	r17,r3
   41e4c:	283ff21e 	bne	r5,zero,41e18 <___vfprintf_internal_r+0x1340>
   41e50:	d8c14c17 	ldw	r3,1328(sp)
   41e54:	1880004c 	andi	r2,r3,1
   41e58:	1005003a 	cmpeq	r2,r2,zero
   41e5c:	103db91e 	bne	r2,zero,41544 <___vfprintf_internal_r+0xa6c>
   41e60:	20803fcc 	andi	r2,r4,255
   41e64:	1080201c 	xori	r2,r2,128
   41e68:	10bfe004 	addi	r2,r2,-128
   41e6c:	00c00c04 	movi	r3,48
   41e70:	10fdb426 	beq	r2,r3,41544 <___vfprintf_internal_r+0xa6c>
   41e74:	31bfffc4 	addi	r6,r6,-1
   41e78:	d9814115 	stw	r6,1284(sp)
   41e7c:	30c00005 	stb	r3,0(r6)
   41e80:	003db006 	br	41544 <___vfprintf_internal_r+0xa6c>
   41e84:	88800068 	cmpgeui	r2,r17,1
   41e88:	10002c1e 	bne	r2,zero,41f3c <___vfprintf_internal_r+0x1464>
   41e8c:	8800021e 	bne	r17,zero,41e98 <___vfprintf_internal_r+0x13c0>
   41e90:	00800244 	movi	r2,9
   41e94:	14002936 	bltu	r2,r16,41f3c <___vfprintf_internal_r+0x1464>
   41e98:	d90018c4 	addi	r4,sp,99
   41e9c:	dd000f04 	addi	r20,sp,60
   41ea0:	d9014115 	stw	r4,1284(sp)
   41ea4:	d9014117 	ldw	r4,1284(sp)
   41ea8:	80800c04 	addi	r2,r16,48
   41eac:	20800005 	stb	r2,0(r4)
   41eb0:	003da406 	br	41544 <___vfprintf_internal_r+0xa6c>
   41eb4:	dc400d17 	ldw	r17,52(sp)
   41eb8:	07100034 	movhi	fp,16384
   41ebc:	e7002e84 	addi	fp,fp,186
   41ec0:	9425883a 	add	r18,r18,r16
   41ec4:	8c400044 	addi	r17,r17,1
   41ec8:	008001c4 	movi	r2,7
   41ecc:	1f000015 	stw	fp,0(r3)
   41ed0:	1c000115 	stw	r16,4(r3)
   41ed4:	dc800e15 	stw	r18,56(sp)
   41ed8:	dc400d15 	stw	r17,52(sp)
   41edc:	147de216 	blt	r2,r17,41668 <___vfprintf_internal_r+0xb90>
   41ee0:	18c00204 	addi	r3,r3,8
   41ee4:	003c7a06 	br	410d0 <___vfprintf_internal_r+0x5f8>
   41ee8:	01000084 	movi	r4,2
   41eec:	d8000405 	stb	zero,16(sp)
   41ef0:	003d8706 	br	41510 <___vfprintf_internal_r+0xa38>
   41ef4:	d9814c17 	ldw	r6,1328(sp)
   41ef8:	30c4703a 	and	r2,r6,r3
   41efc:	1005003a 	cmpeq	r2,r2,zero
   41f00:	103cb926 	beq	r2,zero,411e8 <___vfprintf_internal_r+0x710>
   41f04:	d9014117 	ldw	r4,1284(sp)
   41f08:	94800044 	addi	r18,r18,1
   41f0c:	8c400044 	addi	r17,r17,1
   41f10:	008001c4 	movi	r2,7
   41f14:	a9000015 	stw	r4,0(r21)
   41f18:	a8c00115 	stw	r3,4(r21)
   41f1c:	dc800e15 	stw	r18,56(sp)
   41f20:	dc400d15 	stw	r17,52(sp)
   41f24:	147e6616 	blt	r2,r17,418c0 <___vfprintf_internal_r+0xde8>
   41f28:	acc00204 	addi	r19,r21,8
   41f2c:	003cd706 	br	4128c <___vfprintf_internal_r+0x7b4>
   41f30:	07100034 	movhi	fp,16384
   41f34:	e7002e84 	addi	fp,fp,186
   41f38:	003c4f06 	br	41078 <___vfprintf_internal_r+0x5a0>
   41f3c:	dd000f04 	addi	r20,sp,60
   41f40:	dc801904 	addi	r18,sp,100
   41f44:	8009883a 	mov	r4,r16
   41f48:	880b883a 	mov	r5,r17
   41f4c:	01800284 	movi	r6,10
   41f50:	000f883a 	mov	r7,zero
   41f54:	00481d00 	call	481d0 <__umoddi3>
   41f58:	12000c04 	addi	r8,r2,48
   41f5c:	94bfffc4 	addi	r18,r18,-1
   41f60:	8009883a 	mov	r4,r16
   41f64:	880b883a 	mov	r5,r17
   41f68:	01800284 	movi	r6,10
   41f6c:	000f883a 	mov	r7,zero
   41f70:	92000005 	stb	r8,0(r18)
   41f74:	0047bf40 	call	47bf4 <__udivdi3>
   41f78:	1009883a 	mov	r4,r2
   41f7c:	1021883a 	mov	r16,r2
   41f80:	18800068 	cmpgeui	r2,r3,1
   41f84:	1823883a 	mov	r17,r3
   41f88:	103fee1e 	bne	r2,zero,41f44 <___vfprintf_internal_r+0x146c>
   41f8c:	1800021e 	bne	r3,zero,41f98 <___vfprintf_internal_r+0x14c0>
   41f90:	00800244 	movi	r2,9
   41f94:	113feb36 	bltu	r2,r4,41f44 <___vfprintf_internal_r+0x146c>
   41f98:	94bfffc4 	addi	r18,r18,-1
   41f9c:	dc814115 	stw	r18,1284(sp)
   41fa0:	003fc006 	br	41ea4 <___vfprintf_internal_r+0x13cc>
   41fa4:	d9014c17 	ldw	r4,1328(sp)
   41fa8:	2080004c 	andi	r2,r4,1
   41fac:	10009a1e 	bne	r2,zero,42218 <___vfprintf_internal_r+0x1740>
   41fb0:	d9401904 	addi	r5,sp,100
   41fb4:	dd000f04 	addi	r20,sp,60
   41fb8:	d9414115 	stw	r5,1284(sp)
   41fbc:	003d6106 	br	41544 <___vfprintf_internal_r+0xa6c>
   41fc0:	d9014f17 	ldw	r4,1340(sp)
   41fc4:	b00b883a 	mov	r5,r22
   41fc8:	d9800c04 	addi	r6,sp,48
   41fcc:	0040a800 	call	40a80 <__sprint_r>
   41fd0:	103c791e 	bne	r2,zero,411b8 <___vfprintf_internal_r+0x6e0>
   41fd4:	dc800e17 	ldw	r18,56(sp)
   41fd8:	d8c01904 	addi	r3,sp,100
   41fdc:	003cff06 	br	413dc <___vfprintf_internal_r+0x904>
   41fe0:	d8c14c17 	ldw	r3,1328(sp)
   41fe4:	1880040c 	andi	r2,r3,16
   41fe8:	1000711e 	bne	r2,zero,421b0 <___vfprintf_internal_r+0x16d8>
   41fec:	d9014c17 	ldw	r4,1328(sp)
   41ff0:	2080100c 	andi	r2,r4,64
   41ff4:	10006e26 	beq	r2,zero,421b0 <___vfprintf_internal_r+0x16d8>
   41ff8:	3c00000b 	ldhu	r16,0(r7)
   41ffc:	0023883a 	mov	r17,zero
   42000:	39c00104 	addi	r7,r7,4
   42004:	d9c14015 	stw	r7,1280(sp)
   42008:	003f0006 	br	41c0c <___vfprintf_internal_r+0x1134>
   4200c:	dc400d17 	ldw	r17,52(sp)
   42010:	07100034 	movhi	fp,16384
   42014:	e7002e84 	addi	fp,fp,186
   42018:	9425883a 	add	r18,r18,r16
   4201c:	8c400044 	addi	r17,r17,1
   42020:	008001c4 	movi	r2,7
   42024:	1f000015 	stw	fp,0(r3)
   42028:	1c000115 	stw	r16,4(r3)
   4202c:	dc800e15 	stw	r18,56(sp)
   42030:	dc400d15 	stw	r17,52(sp)
   42034:	147d7616 	blt	r2,r17,41610 <___vfprintf_internal_r+0xb38>
   42038:	18c00204 	addi	r3,r3,8
   4203c:	003d7b06 	br	4162c <___vfprintf_internal_r+0xb54>
   42040:	dc800e17 	ldw	r18,56(sp)
   42044:	dc400d17 	ldw	r17,52(sp)
   42048:	07100034 	movhi	fp,16384
   4204c:	e7003284 	addi	fp,fp,202
   42050:	003bc006 	br	40f54 <___vfprintf_internal_r+0x47c>
   42054:	d9014f17 	ldw	r4,1340(sp)
   42058:	b00b883a 	mov	r5,r22
   4205c:	d9800c04 	addi	r6,sp,48
   42060:	0040a800 	call	40a80 <__sprint_r>
   42064:	103c541e 	bne	r2,zero,411b8 <___vfprintf_internal_r+0x6e0>
   42068:	dc800e17 	ldw	r18,56(sp)
   4206c:	d8c01904 	addi	r3,sp,100
   42070:	003ce906 	br	41418 <___vfprintf_internal_r+0x940>
   42074:	3c000017 	ldw	r16,0(r7)
   42078:	0009883a 	mov	r4,zero
   4207c:	39c00104 	addi	r7,r7,4
   42080:	0023883a 	mov	r17,zero
   42084:	d9c14015 	stw	r7,1280(sp)
   42088:	d8000405 	stb	zero,16(sp)
   4208c:	003d2006 	br	41510 <___vfprintf_internal_r+0xa38>
   42090:	38800017 	ldw	r2,0(r7)
   42094:	39c00104 	addi	r7,r7,4
   42098:	d9c14015 	stw	r7,1280(sp)
   4209c:	1023d7fa 	srai	r17,r2,31
   420a0:	1021883a 	mov	r16,r2
   420a4:	003d1806 	br	41508 <___vfprintf_internal_r+0xa30>
   420a8:	3c000017 	ldw	r16,0(r7)
   420ac:	01000044 	movi	r4,1
   420b0:	39c00104 	addi	r7,r7,4
   420b4:	0023883a 	mov	r17,zero
   420b8:	d9c14015 	stw	r7,1280(sp)
   420bc:	d8000405 	stb	zero,16(sp)
   420c0:	003d1306 	br	41510 <___vfprintf_internal_r+0xa38>
   420c4:	00900034 	movhi	r2,16384
   420c8:	10802e04 	addi	r2,r2,184
   420cc:	94800044 	addi	r18,r18,1
   420d0:	8c400044 	addi	r17,r17,1
   420d4:	a8800015 	stw	r2,0(r21)
   420d8:	00c00044 	movi	r3,1
   420dc:	008001c4 	movi	r2,7
   420e0:	a8c00115 	stw	r3,4(r21)
   420e4:	dc800e15 	stw	r18,56(sp)
   420e8:	dc400d15 	stw	r17,52(sp)
   420ec:	1440ca16 	blt	r2,r17,42418 <___vfprintf_internal_r+0x1940>
   420f0:	a8c00204 	addi	r3,r21,8
   420f4:	2000061e 	bne	r4,zero,42110 <___vfprintf_internal_r+0x1638>
   420f8:	d9414717 	ldw	r5,1308(sp)
   420fc:	2800041e 	bne	r5,zero,42110 <___vfprintf_internal_r+0x1638>
   42100:	d9814c17 	ldw	r6,1328(sp)
   42104:	3080004c 	andi	r2,r6,1
   42108:	1005003a 	cmpeq	r2,r2,zero
   4210c:	103bf01e 	bne	r2,zero,410d0 <___vfprintf_internal_r+0x5f8>
   42110:	00800044 	movi	r2,1
   42114:	dc400d17 	ldw	r17,52(sp)
   42118:	18800115 	stw	r2,4(r3)
   4211c:	d8814917 	ldw	r2,1316(sp)
   42120:	94800044 	addi	r18,r18,1
   42124:	8c400044 	addi	r17,r17,1
   42128:	18800015 	stw	r2,0(r3)
   4212c:	008001c4 	movi	r2,7
   42130:	dc800e15 	stw	r18,56(sp)
   42134:	dc400d15 	stw	r17,52(sp)
   42138:	1440ca16 	blt	r2,r17,42464 <___vfprintf_internal_r+0x198c>
   4213c:	18c00204 	addi	r3,r3,8
   42140:	0121c83a 	sub	r16,zero,r4
   42144:	0400500e 	bge	zero,r16,42288 <___vfprintf_internal_r+0x17b0>
   42148:	00800404 	movi	r2,16
   4214c:	1400800e 	bge	r2,r16,42350 <___vfprintf_internal_r+0x1878>
   42150:	1027883a 	mov	r19,r2
   42154:	07100034 	movhi	fp,16384
   42158:	e7002e84 	addi	fp,fp,186
   4215c:	050001c4 	movi	r20,7
   42160:	00000306 	br	42170 <___vfprintf_internal_r+0x1698>
   42164:	18c00204 	addi	r3,r3,8
   42168:	843ffc04 	addi	r16,r16,-16
   4216c:	9c007a0e 	bge	r19,r16,42358 <___vfprintf_internal_r+0x1880>
   42170:	94800404 	addi	r18,r18,16
   42174:	8c400044 	addi	r17,r17,1
   42178:	1f000015 	stw	fp,0(r3)
   4217c:	1cc00115 	stw	r19,4(r3)
   42180:	dc800e15 	stw	r18,56(sp)
   42184:	dc400d15 	stw	r17,52(sp)
   42188:	a47ff60e 	bge	r20,r17,42164 <___vfprintf_internal_r+0x168c>
   4218c:	d9014f17 	ldw	r4,1340(sp)
   42190:	b00b883a 	mov	r5,r22
   42194:	d9800c04 	addi	r6,sp,48
   42198:	0040a800 	call	40a80 <__sprint_r>
   4219c:	103c061e 	bne	r2,zero,411b8 <___vfprintf_internal_r+0x6e0>
   421a0:	dc800e17 	ldw	r18,56(sp)
   421a4:	dc400d17 	ldw	r17,52(sp)
   421a8:	d8c01904 	addi	r3,sp,100
   421ac:	003fee06 	br	42168 <___vfprintf_internal_r+0x1690>
   421b0:	3c000017 	ldw	r16,0(r7)
   421b4:	0023883a 	mov	r17,zero
   421b8:	39c00104 	addi	r7,r7,4
   421bc:	d9c14015 	stw	r7,1280(sp)
   421c0:	003e9206 	br	41c0c <___vfprintf_internal_r+0x1134>
   421c4:	d9401904 	addi	r5,sp,100
   421c8:	dd000f04 	addi	r20,sp,60
   421cc:	d9414115 	stw	r5,1284(sp)
   421d0:	d9814417 	ldw	r6,1296(sp)
   421d4:	880a973a 	slli	r5,r17,28
   421d8:	8004d13a 	srli	r2,r16,4
   421dc:	810003cc 	andi	r4,r16,15
   421e0:	3109883a 	add	r4,r6,r4
   421e4:	2884b03a 	or	r2,r5,r2
   421e8:	21400003 	ldbu	r5,0(r4)
   421ec:	d9014117 	ldw	r4,1284(sp)
   421f0:	8806d13a 	srli	r3,r17,4
   421f4:	1021883a 	mov	r16,r2
   421f8:	213fffc4 	addi	r4,r4,-1
   421fc:	d9014115 	stw	r4,1284(sp)
   42200:	d9814117 	ldw	r6,1284(sp)
   42204:	10c8b03a 	or	r4,r2,r3
   42208:	1823883a 	mov	r17,r3
   4220c:	31400005 	stb	r5,0(r6)
   42210:	203fef1e 	bne	r4,zero,421d0 <___vfprintf_internal_r+0x16f8>
   42214:	003ccb06 	br	41544 <___vfprintf_internal_r+0xa6c>
   42218:	00800c04 	movi	r2,48
   4221c:	d98018c4 	addi	r6,sp,99
   42220:	dd000f04 	addi	r20,sp,60
   42224:	d88018c5 	stb	r2,99(sp)
   42228:	d9814115 	stw	r6,1284(sp)
   4222c:	003cc506 	br	41544 <___vfprintf_internal_r+0xa6c>
   42230:	dc400d17 	ldw	r17,52(sp)
   42234:	07100034 	movhi	fp,16384
   42238:	e7003284 	addi	fp,fp,202
   4223c:	003bc706 	br	4115c <___vfprintf_internal_r+0x684>
   42240:	d9414c17 	ldw	r5,1328(sp)
   42244:	2880040c 	andi	r2,r5,16
   42248:	10007c26 	beq	r2,zero,4243c <___vfprintf_internal_r+0x1964>
   4224c:	38800017 	ldw	r2,0(r7)
   42250:	39c00104 	addi	r7,r7,4
   42254:	d9c14015 	stw	r7,1280(sp)
   42258:	d9814b17 	ldw	r6,1324(sp)
   4225c:	d9c14017 	ldw	r7,1280(sp)
   42260:	11800015 	stw	r6,0(r2)
   42264:	003a7806 	br	40c48 <___vfprintf_internal_r+0x170>
   42268:	d9014f17 	ldw	r4,1340(sp)
   4226c:	b00b883a 	mov	r5,r22
   42270:	d9800c04 	addi	r6,sp,48
   42274:	0040a800 	call	40a80 <__sprint_r>
   42278:	103bcf1e 	bne	r2,zero,411b8 <___vfprintf_internal_r+0x6e0>
   4227c:	dc800e17 	ldw	r18,56(sp)
   42280:	dc400d17 	ldw	r17,52(sp)
   42284:	d8c01904 	addi	r3,sp,100
   42288:	d9014717 	ldw	r4,1308(sp)
   4228c:	d9414117 	ldw	r5,1284(sp)
   42290:	8c400044 	addi	r17,r17,1
   42294:	9125883a 	add	r18,r18,r4
   42298:	008001c4 	movi	r2,7
   4229c:	19400015 	stw	r5,0(r3)
   422a0:	19000115 	stw	r4,4(r3)
   422a4:	dc800e15 	stw	r18,56(sp)
   422a8:	dc400d15 	stw	r17,52(sp)
   422ac:	147cee16 	blt	r2,r17,41668 <___vfprintf_internal_r+0xb90>
   422b0:	18c00204 	addi	r3,r3,8
   422b4:	003b8606 	br	410d0 <___vfprintf_internal_r+0x5f8>
   422b8:	38c00017 	ldw	r3,0(r7)
   422bc:	39000204 	addi	r4,r7,8
   422c0:	d9014015 	stw	r4,1280(sp)
   422c4:	d8c14215 	stw	r3,1288(sp)
   422c8:	39c00117 	ldw	r7,4(r7)
   422cc:	d9c14315 	stw	r7,1292(sp)
   422d0:	003e2006 	br	41b54 <___vfprintf_internal_r+0x107c>
   422d4:	0005883a 	mov	r2,zero
   422d8:	1409c83a 	sub	r4,r2,r16
   422dc:	1105803a 	cmpltu	r2,r2,r4
   422e0:	044bc83a 	sub	r5,zero,r17
   422e4:	2885c83a 	sub	r2,r5,r2
   422e8:	2021883a 	mov	r16,r4
   422ec:	1023883a 	mov	r17,r2
   422f0:	01000044 	movi	r4,1
   422f4:	00800b44 	movi	r2,45
   422f8:	d8800405 	stb	r2,16(sp)
   422fc:	003c8406 	br	41510 <___vfprintf_internal_r+0xa38>
   42300:	d9014f17 	ldw	r4,1340(sp)
   42304:	b00b883a 	mov	r5,r22
   42308:	d9800c04 	addi	r6,sp,48
   4230c:	0040a800 	call	40a80 <__sprint_r>
   42310:	103ba91e 	bne	r2,zero,411b8 <___vfprintf_internal_r+0x6e0>
   42314:	dc800e17 	ldw	r18,56(sp)
   42318:	dc400d17 	ldw	r17,52(sp)
   4231c:	d9000517 	ldw	r4,20(sp)
   42320:	d9401904 	addi	r5,sp,100
   42324:	003da706 	br	419c4 <___vfprintf_internal_r+0xeec>
   42328:	d9014f17 	ldw	r4,1340(sp)
   4232c:	b00b883a 	mov	r5,r22
   42330:	d9800c04 	addi	r6,sp,48
   42334:	0040a800 	call	40a80 <__sprint_r>
   42338:	103b9f1e 	bne	r2,zero,411b8 <___vfprintf_internal_r+0x6e0>
   4233c:	dc800e17 	ldw	r18,56(sp)
   42340:	dc400d17 	ldw	r17,52(sp)
   42344:	d9000517 	ldw	r4,20(sp)
   42348:	d8c01904 	addi	r3,sp,100
   4234c:	003d9106 	br	41994 <___vfprintf_internal_r+0xebc>
   42350:	07100034 	movhi	fp,16384
   42354:	e7002e84 	addi	fp,fp,186
   42358:	9425883a 	add	r18,r18,r16
   4235c:	8c400044 	addi	r17,r17,1
   42360:	008001c4 	movi	r2,7
   42364:	1f000015 	stw	fp,0(r3)
   42368:	1c000115 	stw	r16,4(r3)
   4236c:	dc800e15 	stw	r18,56(sp)
   42370:	dc400d15 	stw	r17,52(sp)
   42374:	147fbc16 	blt	r2,r17,42268 <___vfprintf_internal_r+0x1790>
   42378:	18c00204 	addi	r3,r3,8
   4237c:	003fc206 	br	42288 <___vfprintf_internal_r+0x17b0>
   42380:	d9014f17 	ldw	r4,1340(sp)
   42384:	b00b883a 	mov	r5,r22
   42388:	d9800c04 	addi	r6,sp,48
   4238c:	0040a800 	call	40a80 <__sprint_r>
   42390:	103b891e 	bne	r2,zero,411b8 <___vfprintf_internal_r+0x6e0>
   42394:	dc800e17 	ldw	r18,56(sp)
   42398:	d9000517 	ldw	r4,20(sp)
   4239c:	d8c01904 	addi	r3,sp,100
   423a0:	003d0206 	br	417ac <___vfprintf_internal_r+0xcd4>
   423a4:	07100034 	movhi	fp,16384
   423a8:	e7002e84 	addi	fp,fp,186
   423ac:	003be406 	br	41340 <___vfprintf_internal_r+0x868>
   423b0:	00900034 	movhi	r2,16384
   423b4:	10801d04 	addi	r2,r2,116
   423b8:	d8814115 	stw	r2,1284(sp)
   423bc:	003df506 	br	41b94 <___vfprintf_internal_r+0x10bc>
   423c0:	d9014217 	ldw	r4,1288(sp)
   423c4:	d9414317 	ldw	r5,1292(sp)
   423c8:	00474b80 	call	474b8 <__isnand>
   423cc:	10003926 	beq	r2,zero,424b4 <___vfprintf_internal_r+0x19dc>
   423d0:	d9414d17 	ldw	r5,1332(sp)
   423d4:	008011c4 	movi	r2,71
   423d8:	1140ce16 	blt	r2,r5,42714 <___vfprintf_internal_r+0x1c3c>
   423dc:	01900034 	movhi	r6,16384
   423e0:	31801e04 	addi	r6,r6,120
   423e4:	d9814115 	stw	r6,1284(sp)
   423e8:	003dea06 	br	41b94 <___vfprintf_internal_r+0x10bc>
   423ec:	d9014c17 	ldw	r4,1328(sp)
   423f0:	bdc00044 	addi	r23,r23,1
   423f4:	b8c00007 	ldb	r3,0(r23)
   423f8:	21000814 	ori	r4,r4,32
   423fc:	d9014c15 	stw	r4,1328(sp)
   42400:	003a3406 	br	40cd4 <___vfprintf_internal_r+0x1fc>
   42404:	dcc14515 	stw	r19,1300(sp)
   42408:	98011016 	blt	r19,zero,4284c <___vfprintf_internal_r+0x1d74>
   4240c:	980f883a 	mov	r7,r19
   42410:	d8014615 	stw	zero,1304(sp)
   42414:	003c5206 	br	41560 <___vfprintf_internal_r+0xa88>
   42418:	d9014f17 	ldw	r4,1340(sp)
   4241c:	b00b883a 	mov	r5,r22
   42420:	d9800c04 	addi	r6,sp,48
   42424:	0040a800 	call	40a80 <__sprint_r>
   42428:	103b631e 	bne	r2,zero,411b8 <___vfprintf_internal_r+0x6e0>
   4242c:	dc800e17 	ldw	r18,56(sp)
   42430:	d9000517 	ldw	r4,20(sp)
   42434:	d8c01904 	addi	r3,sp,100
   42438:	003f2e06 	br	420f4 <___vfprintf_internal_r+0x161c>
   4243c:	d8c14c17 	ldw	r3,1328(sp)
   42440:	1880100c 	andi	r2,r3,64
   42444:	1000a026 	beq	r2,zero,426c8 <___vfprintf_internal_r+0x1bf0>
   42448:	38800017 	ldw	r2,0(r7)
   4244c:	39c00104 	addi	r7,r7,4
   42450:	d9c14015 	stw	r7,1280(sp)
   42454:	d9014b17 	ldw	r4,1324(sp)
   42458:	d9c14017 	ldw	r7,1280(sp)
   4245c:	1100000d 	sth	r4,0(r2)
   42460:	0039f906 	br	40c48 <___vfprintf_internal_r+0x170>
   42464:	d9014f17 	ldw	r4,1340(sp)
   42468:	b00b883a 	mov	r5,r22
   4246c:	d9800c04 	addi	r6,sp,48
   42470:	0040a800 	call	40a80 <__sprint_r>
   42474:	103b501e 	bne	r2,zero,411b8 <___vfprintf_internal_r+0x6e0>
   42478:	dc800e17 	ldw	r18,56(sp)
   4247c:	dc400d17 	ldw	r17,52(sp)
   42480:	d9000517 	ldw	r4,20(sp)
   42484:	d8c01904 	addi	r3,sp,100
   42488:	003f2d06 	br	42140 <___vfprintf_internal_r+0x1668>
   4248c:	00800184 	movi	r2,6
   42490:	14c09a36 	bltu	r2,r19,426fc <___vfprintf_internal_r+0x1c24>
   42494:	dcc14515 	stw	r19,1300(sp)
   42498:	9800010e 	bge	r19,zero,424a0 <___vfprintf_internal_r+0x19c8>
   4249c:	d8014515 	stw	zero,1300(sp)
   424a0:	00900034 	movhi	r2,16384
   424a4:	10802004 	addi	r2,r2,128
   424a8:	980f883a 	mov	r7,r19
   424ac:	d8814115 	stw	r2,1284(sp)
   424b0:	003a7806 	br	40e94 <___vfprintf_internal_r+0x3bc>
   424b4:	00bfffc4 	movi	r2,-1
   424b8:	9880e226 	beq	r19,r2,42844 <___vfprintf_internal_r+0x1d6c>
   424bc:	d9414d17 	ldw	r5,1332(sp)
   424c0:	008019c4 	movi	r2,103
   424c4:	2880dc26 	beq	r5,r2,42838 <___vfprintf_internal_r+0x1d60>
   424c8:	008011c4 	movi	r2,71
   424cc:	2880da26 	beq	r5,r2,42838 <___vfprintf_internal_r+0x1d60>
   424d0:	d9414c17 	ldw	r5,1328(sp)
   424d4:	d9014317 	ldw	r4,1292(sp)
   424d8:	d9814217 	ldw	r6,1288(sp)
   424dc:	29404014 	ori	r5,r5,256
   424e0:	d9414c15 	stw	r5,1328(sp)
   424e4:	2000cc16 	blt	r4,zero,42818 <___vfprintf_internal_r+0x1d40>
   424e8:	3021883a 	mov	r16,r6
   424ec:	2023883a 	mov	r17,r4
   424f0:	0039883a 	mov	fp,zero
   424f4:	d9414d17 	ldw	r5,1332(sp)
   424f8:	00801984 	movi	r2,102
   424fc:	2880b726 	beq	r5,r2,427dc <___vfprintf_internal_r+0x1d04>
   42500:	00801184 	movi	r2,70
   42504:	2880b526 	beq	r5,r2,427dc <___vfprintf_internal_r+0x1d04>
   42508:	00801944 	movi	r2,101
   4250c:	2880c826 	beq	r5,r2,42830 <___vfprintf_internal_r+0x1d58>
   42510:	00801144 	movi	r2,69
   42514:	2880c626 	beq	r5,r2,42830 <___vfprintf_internal_r+0x1d58>
   42518:	9829883a 	mov	r20,r19
   4251c:	d9014f17 	ldw	r4,1340(sp)
   42520:	d8800504 	addi	r2,sp,20
   42524:	880d883a 	mov	r6,r17
   42528:	d8800115 	stw	r2,4(sp)
   4252c:	d8c00604 	addi	r3,sp,24
   42530:	d8800704 	addi	r2,sp,28
   42534:	800b883a 	mov	r5,r16
   42538:	01c00084 	movi	r7,2
   4253c:	d8c00215 	stw	r3,8(sp)
   42540:	d8800315 	stw	r2,12(sp)
   42544:	dd000015 	stw	r20,0(sp)
   42548:	0042cfc0 	call	42cfc <_dtoa_r>
   4254c:	d9814d17 	ldw	r6,1332(sp)
   42550:	d8814115 	stw	r2,1284(sp)
   42554:	008019c4 	movi	r2,103
   42558:	30809526 	beq	r6,r2,427b0 <___vfprintf_internal_r+0x1cd8>
   4255c:	d8c14d17 	ldw	r3,1332(sp)
   42560:	008011c4 	movi	r2,71
   42564:	18809226 	beq	r3,r2,427b0 <___vfprintf_internal_r+0x1cd8>
   42568:	d9414117 	ldw	r5,1284(sp)
   4256c:	d9814d17 	ldw	r6,1332(sp)
   42570:	00801984 	movi	r2,102
   42574:	2d25883a 	add	r18,r5,r20
   42578:	30808626 	beq	r6,r2,42794 <___vfprintf_internal_r+0x1cbc>
   4257c:	00801184 	movi	r2,70
   42580:	30808426 	beq	r6,r2,42794 <___vfprintf_internal_r+0x1cbc>
   42584:	000d883a 	mov	r6,zero
   42588:	000f883a 	mov	r7,zero
   4258c:	880b883a 	mov	r5,r17
   42590:	8009883a 	mov	r4,r16
   42594:	00492900 	call	49290 <__eqdf2>
   42598:	1000751e 	bne	r2,zero,42770 <___vfprintf_internal_r+0x1c98>
   4259c:	9005883a 	mov	r2,r18
   425a0:	dc800715 	stw	r18,28(sp)
   425a4:	d9014117 	ldw	r4,1284(sp)
   425a8:	d9414d17 	ldw	r5,1332(sp)
   425ac:	00c019c4 	movi	r3,103
   425b0:	1125c83a 	sub	r18,r2,r4
   425b4:	28c06826 	beq	r5,r3,42758 <___vfprintf_internal_r+0x1c80>
   425b8:	008011c4 	movi	r2,71
   425bc:	28806626 	beq	r5,r2,42758 <___vfprintf_internal_r+0x1c80>
   425c0:	d9000517 	ldw	r4,20(sp)
   425c4:	d8c14d17 	ldw	r3,1332(sp)
   425c8:	00801944 	movi	r2,101
   425cc:	10c05516 	blt	r2,r3,42724 <___vfprintf_internal_r+0x1c4c>
   425d0:	213fffc4 	addi	r4,r4,-1
   425d4:	d9000515 	stw	r4,20(sp)
   425d8:	d8c00805 	stb	r3,32(sp)
   425dc:	2021883a 	mov	r16,r4
   425e0:	2000c116 	blt	r4,zero,428e8 <___vfprintf_internal_r+0x1e10>
   425e4:	00800ac4 	movi	r2,43
   425e8:	d8800845 	stb	r2,33(sp)
   425ec:	00800244 	movi	r2,9
   425f0:	1400af0e 	bge	r2,r16,428b0 <___vfprintf_internal_r+0x1dd8>
   425f4:	1027883a 	mov	r19,r2
   425f8:	dc400b84 	addi	r17,sp,46
   425fc:	8009883a 	mov	r4,r16
   42600:	01400284 	movi	r5,10
   42604:	00499780 	call	49978 <__modsi3>
   42608:	10800c04 	addi	r2,r2,48
   4260c:	8c7fffc4 	addi	r17,r17,-1
   42610:	8009883a 	mov	r4,r16
   42614:	01400284 	movi	r5,10
   42618:	88800005 	stb	r2,0(r17)
   4261c:	00499180 	call	49918 <__divsi3>
   42620:	1021883a 	mov	r16,r2
   42624:	98bff516 	blt	r19,r2,425fc <___vfprintf_internal_r+0x1b24>
   42628:	10c00c04 	addi	r3,r2,48
   4262c:	d88009c4 	addi	r2,sp,39
   42630:	108001c4 	addi	r2,r2,7
   42634:	897fffc4 	addi	r5,r17,-1
   42638:	88ffffc5 	stb	r3,-1(r17)
   4263c:	2880a72e 	bgeu	r5,r2,428dc <___vfprintf_internal_r+0x1e04>
   42640:	1009883a 	mov	r4,r2
   42644:	d9800804 	addi	r6,sp,32
   42648:	d8c00884 	addi	r3,sp,34
   4264c:	28800003 	ldbu	r2,0(r5)
   42650:	29400044 	addi	r5,r5,1
   42654:	18800005 	stb	r2,0(r3)
   42658:	18c00044 	addi	r3,r3,1
   4265c:	293ffb36 	bltu	r5,r4,4264c <___vfprintf_internal_r+0x1b74>
   42660:	1987c83a 	sub	r3,r3,r6
   42664:	00800044 	movi	r2,1
   42668:	d8c14815 	stw	r3,1312(sp)
   4266c:	90cf883a 	add	r7,r18,r3
   42670:	1480960e 	bge	r2,r18,428cc <___vfprintf_internal_r+0x1df4>
   42674:	39c00044 	addi	r7,r7,1
   42678:	d9c14515 	stw	r7,1300(sp)
   4267c:	38003416 	blt	r7,zero,42750 <___vfprintf_internal_r+0x1c78>
   42680:	e0803fcc 	andi	r2,fp,255
   42684:	1080201c 	xori	r2,r2,128
   42688:	10bfe004 	addi	r2,r2,-128
   4268c:	10004e26 	beq	r2,zero,427c8 <___vfprintf_internal_r+0x1cf0>
   42690:	00800b44 	movi	r2,45
   42694:	dc814715 	stw	r18,1308(sp)
   42698:	d8014615 	stw	zero,1304(sp)
   4269c:	d8800405 	stb	r2,16(sp)
   426a0:	003bb106 	br	41568 <___vfprintf_internal_r+0xa90>
   426a4:	00800b44 	movi	r2,45
   426a8:	d8800405 	stb	r2,16(sp)
   426ac:	003d3306 	br	41b7c <___vfprintf_internal_r+0x10a4>
   426b0:	d9014f17 	ldw	r4,1340(sp)
   426b4:	b00b883a 	mov	r5,r22
   426b8:	d9800c04 	addi	r6,sp,48
   426bc:	0040a800 	call	40a80 <__sprint_r>
   426c0:	103abd1e 	bne	r2,zero,411b8 <___vfprintf_internal_r+0x6e0>
   426c4:	003abb06 	br	411b4 <___vfprintf_internal_r+0x6dc>
   426c8:	38800017 	ldw	r2,0(r7)
   426cc:	39c00104 	addi	r7,r7,4
   426d0:	d9c14015 	stw	r7,1280(sp)
   426d4:	d9414b17 	ldw	r5,1324(sp)
   426d8:	d9c14017 	ldw	r7,1280(sp)
   426dc:	11400015 	stw	r5,0(r2)
   426e0:	00395906 	br	40c48 <___vfprintf_internal_r+0x170>
   426e4:	980f883a 	mov	r7,r19
   426e8:	dcc14515 	stw	r19,1300(sp)
   426ec:	d8014615 	stw	zero,1304(sp)
   426f0:	003b9b06 	br	41560 <___vfprintf_internal_r+0xa88>
   426f4:	0027883a 	mov	r19,zero
   426f8:	00397806 	br	40cdc <___vfprintf_internal_r+0x204>
   426fc:	00d00034 	movhi	r3,16384
   42700:	18c02004 	addi	r3,r3,128
   42704:	100f883a 	mov	r7,r2
   42708:	d8814515 	stw	r2,1300(sp)
   4270c:	d8c14115 	stw	r3,1284(sp)
   42710:	0039e006 	br	40e94 <___vfprintf_internal_r+0x3bc>
   42714:	00900034 	movhi	r2,16384
   42718:	10801f04 	addi	r2,r2,124
   4271c:	d8814115 	stw	r2,1284(sp)
   42720:	003d1c06 	br	41b94 <___vfprintf_internal_r+0x10bc>
   42724:	d9414d17 	ldw	r5,1332(sp)
   42728:	00801984 	movi	r2,102
   4272c:	28804926 	beq	r5,r2,42854 <___vfprintf_internal_r+0x1d7c>
   42730:	200f883a 	mov	r7,r4
   42734:	24805716 	blt	r4,r18,42894 <___vfprintf_internal_r+0x1dbc>
   42738:	d9414c17 	ldw	r5,1328(sp)
   4273c:	2880004c 	andi	r2,r5,1
   42740:	10000126 	beq	r2,zero,42748 <___vfprintf_internal_r+0x1c70>
   42744:	21c00044 	addi	r7,r4,1
   42748:	d9c14515 	stw	r7,1300(sp)
   4274c:	383fcc0e 	bge	r7,zero,42680 <___vfprintf_internal_r+0x1ba8>
   42750:	d8014515 	stw	zero,1300(sp)
   42754:	003fca06 	br	42680 <___vfprintf_internal_r+0x1ba8>
   42758:	d9000517 	ldw	r4,20(sp)
   4275c:	00bfff04 	movi	r2,-4
   42760:	1100480e 	bge	r2,r4,42884 <___vfprintf_internal_r+0x1dac>
   42764:	99004716 	blt	r19,r4,42884 <___vfprintf_internal_r+0x1dac>
   42768:	d8c14d15 	stw	r3,1332(sp)
   4276c:	003ff006 	br	42730 <___vfprintf_internal_r+0x1c58>
   42770:	d8800717 	ldw	r2,28(sp)
   42774:	14bf8b2e 	bgeu	r2,r18,425a4 <___vfprintf_internal_r+0x1acc>
   42778:	9007883a 	mov	r3,r18
   4277c:	01000c04 	movi	r4,48
   42780:	11000005 	stb	r4,0(r2)
   42784:	10800044 	addi	r2,r2,1
   42788:	d8800715 	stw	r2,28(sp)
   4278c:	18bffc1e 	bne	r3,r2,42780 <___vfprintf_internal_r+0x1ca8>
   42790:	003f8406 	br	425a4 <___vfprintf_internal_r+0x1acc>
   42794:	d8814117 	ldw	r2,1284(sp)
   42798:	10c00007 	ldb	r3,0(r2)
   4279c:	00800c04 	movi	r2,48
   427a0:	18805b26 	beq	r3,r2,42910 <___vfprintf_internal_r+0x1e38>
   427a4:	d9000517 	ldw	r4,20(sp)
   427a8:	9125883a 	add	r18,r18,r4
   427ac:	003f7506 	br	42584 <___vfprintf_internal_r+0x1aac>
   427b0:	d9014c17 	ldw	r4,1328(sp)
   427b4:	2080004c 	andi	r2,r4,1
   427b8:	1005003a 	cmpeq	r2,r2,zero
   427bc:	103f6a26 	beq	r2,zero,42568 <___vfprintf_internal_r+0x1a90>
   427c0:	d8800717 	ldw	r2,28(sp)
   427c4:	003f7706 	br	425a4 <___vfprintf_internal_r+0x1acc>
   427c8:	d9c14515 	stw	r7,1300(sp)
   427cc:	38004d16 	blt	r7,zero,42904 <___vfprintf_internal_r+0x1e2c>
   427d0:	dc814715 	stw	r18,1308(sp)
   427d4:	d8014615 	stw	zero,1304(sp)
   427d8:	003b6106 	br	41560 <___vfprintf_internal_r+0xa88>
   427dc:	d9014f17 	ldw	r4,1340(sp)
   427e0:	d8800504 	addi	r2,sp,20
   427e4:	d8800115 	stw	r2,4(sp)
   427e8:	d8c00604 	addi	r3,sp,24
   427ec:	d8800704 	addi	r2,sp,28
   427f0:	800b883a 	mov	r5,r16
   427f4:	880d883a 	mov	r6,r17
   427f8:	01c000c4 	movi	r7,3
   427fc:	d8c00215 	stw	r3,8(sp)
   42800:	d8800315 	stw	r2,12(sp)
   42804:	dcc00015 	stw	r19,0(sp)
   42808:	9829883a 	mov	r20,r19
   4280c:	0042cfc0 	call	42cfc <_dtoa_r>
   42810:	d8814115 	stw	r2,1284(sp)
   42814:	003f5106 	br	4255c <___vfprintf_internal_r+0x1a84>
   42818:	d8c14217 	ldw	r3,1288(sp)
   4281c:	d9014317 	ldw	r4,1292(sp)
   42820:	07000b44 	movi	fp,45
   42824:	1821883a 	mov	r16,r3
   42828:	2460003c 	xorhi	r17,r4,32768
   4282c:	003f3106 	br	424f4 <___vfprintf_internal_r+0x1a1c>
   42830:	9d000044 	addi	r20,r19,1
   42834:	003f3906 	br	4251c <___vfprintf_internal_r+0x1a44>
   42838:	983f251e 	bne	r19,zero,424d0 <___vfprintf_internal_r+0x19f8>
   4283c:	04c00044 	movi	r19,1
   42840:	003f2306 	br	424d0 <___vfprintf_internal_r+0x19f8>
   42844:	04c00184 	movi	r19,6
   42848:	003f2106 	br	424d0 <___vfprintf_internal_r+0x19f8>
   4284c:	d8014515 	stw	zero,1300(sp)
   42850:	003eee06 	br	4240c <___vfprintf_internal_r+0x1934>
   42854:	200f883a 	mov	r7,r4
   42858:	0100370e 	bge	zero,r4,42938 <___vfprintf_internal_r+0x1e60>
   4285c:	9800031e 	bne	r19,zero,4286c <___vfprintf_internal_r+0x1d94>
   42860:	d9814c17 	ldw	r6,1328(sp)
   42864:	3080004c 	andi	r2,r6,1
   42868:	103fb726 	beq	r2,zero,42748 <___vfprintf_internal_r+0x1c70>
   4286c:	20800044 	addi	r2,r4,1
   42870:	98a7883a 	add	r19,r19,r2
   42874:	dcc14515 	stw	r19,1300(sp)
   42878:	980f883a 	mov	r7,r19
   4287c:	983f800e 	bge	r19,zero,42680 <___vfprintf_internal_r+0x1ba8>
   42880:	003fb306 	br	42750 <___vfprintf_internal_r+0x1c78>
   42884:	d9814d17 	ldw	r6,1332(sp)
   42888:	31bfff84 	addi	r6,r6,-2
   4288c:	d9814d15 	stw	r6,1332(sp)
   42890:	003f4c06 	br	425c4 <___vfprintf_internal_r+0x1aec>
   42894:	0100180e 	bge	zero,r4,428f8 <___vfprintf_internal_r+0x1e20>
   42898:	00800044 	movi	r2,1
   4289c:	1485883a 	add	r2,r2,r18
   428a0:	d8814515 	stw	r2,1300(sp)
   428a4:	100f883a 	mov	r7,r2
   428a8:	103f750e 	bge	r2,zero,42680 <___vfprintf_internal_r+0x1ba8>
   428ac:	003fa806 	br	42750 <___vfprintf_internal_r+0x1c78>
   428b0:	80c00c04 	addi	r3,r16,48
   428b4:	00800c04 	movi	r2,48
   428b8:	d8c008c5 	stb	r3,35(sp)
   428bc:	d9800804 	addi	r6,sp,32
   428c0:	d8c00904 	addi	r3,sp,36
   428c4:	d8800885 	stb	r2,34(sp)
   428c8:	003f6506 	br	42660 <___vfprintf_internal_r+0x1b88>
   428cc:	d9014c17 	ldw	r4,1328(sp)
   428d0:	2084703a 	and	r2,r4,r2
   428d4:	103f9c26 	beq	r2,zero,42748 <___vfprintf_internal_r+0x1c70>
   428d8:	003f6606 	br	42674 <___vfprintf_internal_r+0x1b9c>
   428dc:	d9800804 	addi	r6,sp,32
   428e0:	d8c00884 	addi	r3,sp,34
   428e4:	003f5e06 	br	42660 <___vfprintf_internal_r+0x1b88>
   428e8:	00800b44 	movi	r2,45
   428ec:	0121c83a 	sub	r16,zero,r4
   428f0:	d8800845 	stb	r2,33(sp)
   428f4:	003f3d06 	br	425ec <___vfprintf_internal_r+0x1b14>
   428f8:	00800084 	movi	r2,2
   428fc:	1105c83a 	sub	r2,r2,r4
   42900:	003fe606 	br	4289c <___vfprintf_internal_r+0x1dc4>
   42904:	d8014515 	stw	zero,1300(sp)
   42908:	dc814715 	stw	r18,1308(sp)
   4290c:	003fb106 	br	427d4 <___vfprintf_internal_r+0x1cfc>
   42910:	000d883a 	mov	r6,zero
   42914:	000f883a 	mov	r7,zero
   42918:	8009883a 	mov	r4,r16
   4291c:	880b883a 	mov	r5,r17
   42920:	00493180 	call	49318 <__nedf2>
   42924:	103f9f26 	beq	r2,zero,427a4 <___vfprintf_internal_r+0x1ccc>
   42928:	00800044 	movi	r2,1
   4292c:	1509c83a 	sub	r4,r2,r20
   42930:	d9000515 	stw	r4,20(sp)
   42934:	003f9b06 	br	427a4 <___vfprintf_internal_r+0x1ccc>
   42938:	98000d1e 	bne	r19,zero,42970 <___vfprintf_internal_r+0x1e98>
   4293c:	d8c14c17 	ldw	r3,1328(sp)
   42940:	1880004c 	andi	r2,r3,1
   42944:	10000a1e 	bne	r2,zero,42970 <___vfprintf_internal_r+0x1e98>
   42948:	01000044 	movi	r4,1
   4294c:	200f883a 	mov	r7,r4
   42950:	d9014515 	stw	r4,1300(sp)
   42954:	003f4a06 	br	42680 <___vfprintf_internal_r+0x1ba8>
   42958:	3cc00017 	ldw	r19,0(r7)
   4295c:	39c00104 	addi	r7,r7,4
   42960:	983d0e0e 	bge	r19,zero,41d9c <___vfprintf_internal_r+0x12c4>
   42964:	b8c00007 	ldb	r3,0(r23)
   42968:	04ffffc4 	movi	r19,-1
   4296c:	0038d906 	br	40cd4 <___vfprintf_internal_r+0x1fc>
   42970:	9cc00084 	addi	r19,r19,2
   42974:	dcc14515 	stw	r19,1300(sp)
   42978:	980f883a 	mov	r7,r19
   4297c:	983f400e 	bge	r19,zero,42680 <___vfprintf_internal_r+0x1ba8>
   42980:	003f7306 	br	42750 <___vfprintf_internal_r+0x1c78>

00042984 <__vfprintf_internal>:
   42984:	00900034 	movhi	r2,16384
   42988:	10876c04 	addi	r2,r2,7600
   4298c:	2013883a 	mov	r9,r4
   42990:	11000017 	ldw	r4,0(r2)
   42994:	2805883a 	mov	r2,r5
   42998:	300f883a 	mov	r7,r6
   4299c:	480b883a 	mov	r5,r9
   429a0:	100d883a 	mov	r6,r2
   429a4:	0040ad81 	jmpi	40ad8 <___vfprintf_internal_r>

000429a8 <__swsetup_r>:
   429a8:	00900034 	movhi	r2,16384
   429ac:	10876c04 	addi	r2,r2,7600
   429b0:	10c00017 	ldw	r3,0(r2)
   429b4:	defffd04 	addi	sp,sp,-12
   429b8:	dc400115 	stw	r17,4(sp)
   429bc:	dc000015 	stw	r16,0(sp)
   429c0:	dfc00215 	stw	ra,8(sp)
   429c4:	2023883a 	mov	r17,r4
   429c8:	2821883a 	mov	r16,r5
   429cc:	18000226 	beq	r3,zero,429d8 <__swsetup_r+0x30>
   429d0:	18800e17 	ldw	r2,56(r3)
   429d4:	10001f26 	beq	r2,zero,42a54 <__swsetup_r+0xac>
   429d8:	8100030b 	ldhu	r4,12(r16)
   429dc:	2080020c 	andi	r2,r4,8
   429e0:	10002826 	beq	r2,zero,42a84 <__swsetup_r+0xdc>
   429e4:	81400417 	ldw	r5,16(r16)
   429e8:	28001d26 	beq	r5,zero,42a60 <__swsetup_r+0xb8>
   429ec:	2080004c 	andi	r2,r4,1
   429f0:	1005003a 	cmpeq	r2,r2,zero
   429f4:	10000b26 	beq	r2,zero,42a24 <__swsetup_r+0x7c>
   429f8:	2080008c 	andi	r2,r4,2
   429fc:	10001226 	beq	r2,zero,42a48 <__swsetup_r+0xa0>
   42a00:	0005883a 	mov	r2,zero
   42a04:	80800215 	stw	r2,8(r16)
   42a08:	28000b26 	beq	r5,zero,42a38 <__swsetup_r+0x90>
   42a0c:	0005883a 	mov	r2,zero
   42a10:	dfc00217 	ldw	ra,8(sp)
   42a14:	dc400117 	ldw	r17,4(sp)
   42a18:	dc000017 	ldw	r16,0(sp)
   42a1c:	dec00304 	addi	sp,sp,12
   42a20:	f800283a 	ret
   42a24:	80800517 	ldw	r2,20(r16)
   42a28:	80000215 	stw	zero,8(r16)
   42a2c:	0085c83a 	sub	r2,zero,r2
   42a30:	80800615 	stw	r2,24(r16)
   42a34:	283ff51e 	bne	r5,zero,42a0c <__swsetup_r+0x64>
   42a38:	2080200c 	andi	r2,r4,128
   42a3c:	103ff326 	beq	r2,zero,42a0c <__swsetup_r+0x64>
   42a40:	00bfffc4 	movi	r2,-1
   42a44:	003ff206 	br	42a10 <__swsetup_r+0x68>
   42a48:	80800517 	ldw	r2,20(r16)
   42a4c:	80800215 	stw	r2,8(r16)
   42a50:	003fed06 	br	42a08 <__swsetup_r+0x60>
   42a54:	1809883a 	mov	r4,r3
   42a58:	00445480 	call	44548 <__sinit>
   42a5c:	003fde06 	br	429d8 <__swsetup_r+0x30>
   42a60:	20c0a00c 	andi	r3,r4,640
   42a64:	00808004 	movi	r2,512
   42a68:	18bfe026 	beq	r3,r2,429ec <__swsetup_r+0x44>
   42a6c:	8809883a 	mov	r4,r17
   42a70:	800b883a 	mov	r5,r16
   42a74:	00452c00 	call	452c0 <__smakebuf_r>
   42a78:	8100030b 	ldhu	r4,12(r16)
   42a7c:	81400417 	ldw	r5,16(r16)
   42a80:	003fda06 	br	429ec <__swsetup_r+0x44>
   42a84:	2080040c 	andi	r2,r4,16
   42a88:	103fed26 	beq	r2,zero,42a40 <__swsetup_r+0x98>
   42a8c:	2080010c 	andi	r2,r4,4
   42a90:	10001226 	beq	r2,zero,42adc <__swsetup_r+0x134>
   42a94:	81400c17 	ldw	r5,48(r16)
   42a98:	28000526 	beq	r5,zero,42ab0 <__swsetup_r+0x108>
   42a9c:	80801004 	addi	r2,r16,64
   42aa0:	28800226 	beq	r5,r2,42aac <__swsetup_r+0x104>
   42aa4:	8809883a 	mov	r4,r17
   42aa8:	00448cc0 	call	448cc <_free_r>
   42aac:	80000c15 	stw	zero,48(r16)
   42ab0:	8080030b 	ldhu	r2,12(r16)
   42ab4:	81400417 	ldw	r5,16(r16)
   42ab8:	80000115 	stw	zero,4(r16)
   42abc:	10bff6cc 	andi	r2,r2,65499
   42ac0:	8080030d 	sth	r2,12(r16)
   42ac4:	81400015 	stw	r5,0(r16)
   42ac8:	8080030b 	ldhu	r2,12(r16)
   42acc:	10800214 	ori	r2,r2,8
   42ad0:	113fffcc 	andi	r4,r2,65535
   42ad4:	8080030d 	sth	r2,12(r16)
   42ad8:	003fc306 	br	429e8 <__swsetup_r+0x40>
   42adc:	81400417 	ldw	r5,16(r16)
   42ae0:	003ff906 	br	42ac8 <__swsetup_r+0x120>

00042ae4 <quorem>:
   42ae4:	28c00417 	ldw	r3,16(r5)
   42ae8:	20800417 	ldw	r2,16(r4)
   42aec:	defff604 	addi	sp,sp,-40
   42af0:	ddc00715 	stw	r23,28(sp)
   42af4:	dd400515 	stw	r21,20(sp)
   42af8:	dfc00915 	stw	ra,36(sp)
   42afc:	df000815 	stw	fp,32(sp)
   42b00:	dd800615 	stw	r22,24(sp)
   42b04:	dd000415 	stw	r20,16(sp)
   42b08:	dcc00315 	stw	r19,12(sp)
   42b0c:	dc800215 	stw	r18,8(sp)
   42b10:	dc400115 	stw	r17,4(sp)
   42b14:	dc000015 	stw	r16,0(sp)
   42b18:	202f883a 	mov	r23,r4
   42b1c:	282b883a 	mov	r21,r5
   42b20:	10c07416 	blt	r2,r3,42cf4 <quorem+0x210>
   42b24:	1c7fffc4 	addi	r17,r3,-1
   42b28:	8c45883a 	add	r2,r17,r17
   42b2c:	1085883a 	add	r2,r2,r2
   42b30:	2c000504 	addi	r16,r5,20
   42b34:	24c00504 	addi	r19,r4,20
   42b38:	14ed883a 	add	r22,r2,r19
   42b3c:	80a5883a 	add	r18,r16,r2
   42b40:	b7000017 	ldw	fp,0(r22)
   42b44:	91400017 	ldw	r5,0(r18)
   42b48:	e009883a 	mov	r4,fp
   42b4c:	29400044 	addi	r5,r5,1
   42b50:	00499d80 	call	499d8 <__udivsi3>
   42b54:	1029883a 	mov	r20,r2
   42b58:	10003c1e 	bne	r2,zero,42c4c <quorem+0x168>
   42b5c:	a80b883a 	mov	r5,r21
   42b60:	b809883a 	mov	r4,r23
   42b64:	0045fec0 	call	45fec <__mcmp>
   42b68:	10002b16 	blt	r2,zero,42c18 <quorem+0x134>
   42b6c:	a5000044 	addi	r20,r20,1
   42b70:	980f883a 	mov	r7,r19
   42b74:	0011883a 	mov	r8,zero
   42b78:	0009883a 	mov	r4,zero
   42b7c:	81400017 	ldw	r5,0(r16)
   42b80:	38c00017 	ldw	r3,0(r7)
   42b84:	84000104 	addi	r16,r16,4
   42b88:	28bfffcc 	andi	r2,r5,65535
   42b8c:	2085883a 	add	r2,r4,r2
   42b90:	11bfffcc 	andi	r6,r2,65535
   42b94:	193fffcc 	andi	r4,r3,65535
   42b98:	1004d43a 	srli	r2,r2,16
   42b9c:	280ad43a 	srli	r5,r5,16
   42ba0:	2189c83a 	sub	r4,r4,r6
   42ba4:	2209883a 	add	r4,r4,r8
   42ba8:	1806d43a 	srli	r3,r3,16
   42bac:	288b883a 	add	r5,r5,r2
   42bb0:	200dd43a 	srai	r6,r4,16
   42bb4:	28bfffcc 	andi	r2,r5,65535
   42bb8:	1887c83a 	sub	r3,r3,r2
   42bbc:	1987883a 	add	r3,r3,r6
   42bc0:	3900000d 	sth	r4,0(r7)
   42bc4:	38c0008d 	sth	r3,2(r7)
   42bc8:	2808d43a 	srli	r4,r5,16
   42bcc:	39c00104 	addi	r7,r7,4
   42bd0:	1811d43a 	srai	r8,r3,16
   42bd4:	943fe92e 	bgeu	r18,r16,42b7c <quorem+0x98>
   42bd8:	8c45883a 	add	r2,r17,r17
   42bdc:	1085883a 	add	r2,r2,r2
   42be0:	9885883a 	add	r2,r19,r2
   42be4:	10c00017 	ldw	r3,0(r2)
   42be8:	18000b1e 	bne	r3,zero,42c18 <quorem+0x134>
   42bec:	113fff04 	addi	r4,r2,-4
   42bf0:	9900082e 	bgeu	r19,r4,42c14 <quorem+0x130>
   42bf4:	10bfff17 	ldw	r2,-4(r2)
   42bf8:	10000326 	beq	r2,zero,42c08 <quorem+0x124>
   42bfc:	00000506 	br	42c14 <quorem+0x130>
   42c00:	20800017 	ldw	r2,0(r4)
   42c04:	1000031e 	bne	r2,zero,42c14 <quorem+0x130>
   42c08:	213fff04 	addi	r4,r4,-4
   42c0c:	8c7fffc4 	addi	r17,r17,-1
   42c10:	993ffb36 	bltu	r19,r4,42c00 <quorem+0x11c>
   42c14:	bc400415 	stw	r17,16(r23)
   42c18:	a005883a 	mov	r2,r20
   42c1c:	dfc00917 	ldw	ra,36(sp)
   42c20:	df000817 	ldw	fp,32(sp)
   42c24:	ddc00717 	ldw	r23,28(sp)
   42c28:	dd800617 	ldw	r22,24(sp)
   42c2c:	dd400517 	ldw	r21,20(sp)
   42c30:	dd000417 	ldw	r20,16(sp)
   42c34:	dcc00317 	ldw	r19,12(sp)
   42c38:	dc800217 	ldw	r18,8(sp)
   42c3c:	dc400117 	ldw	r17,4(sp)
   42c40:	dc000017 	ldw	r16,0(sp)
   42c44:	dec00a04 	addi	sp,sp,40
   42c48:	f800283a 	ret
   42c4c:	980f883a 	mov	r7,r19
   42c50:	8011883a 	mov	r8,r16
   42c54:	0013883a 	mov	r9,zero
   42c58:	000d883a 	mov	r6,zero
   42c5c:	40c00017 	ldw	r3,0(r8)
   42c60:	39000017 	ldw	r4,0(r7)
   42c64:	42000104 	addi	r8,r8,4
   42c68:	18bfffcc 	andi	r2,r3,65535
   42c6c:	a085383a 	mul	r2,r20,r2
   42c70:	1806d43a 	srli	r3,r3,16
   42c74:	217fffcc 	andi	r5,r4,65535
   42c78:	3085883a 	add	r2,r6,r2
   42c7c:	11bfffcc 	andi	r6,r2,65535
   42c80:	a0c7383a 	mul	r3,r20,r3
   42c84:	1004d43a 	srli	r2,r2,16
   42c88:	298bc83a 	sub	r5,r5,r6
   42c8c:	2a4b883a 	add	r5,r5,r9
   42c90:	2008d43a 	srli	r4,r4,16
   42c94:	1887883a 	add	r3,r3,r2
   42c98:	280dd43a 	srai	r6,r5,16
   42c9c:	18bfffcc 	andi	r2,r3,65535
   42ca0:	2089c83a 	sub	r4,r4,r2
   42ca4:	2189883a 	add	r4,r4,r6
   42ca8:	3900008d 	sth	r4,2(r7)
   42cac:	3940000d 	sth	r5,0(r7)
   42cb0:	180cd43a 	srli	r6,r3,16
   42cb4:	39c00104 	addi	r7,r7,4
   42cb8:	2013d43a 	srai	r9,r4,16
   42cbc:	923fe72e 	bgeu	r18,r8,42c5c <quorem+0x178>
   42cc0:	e03fa61e 	bne	fp,zero,42b5c <quorem+0x78>
   42cc4:	b0ffff04 	addi	r3,r22,-4
   42cc8:	98c0082e 	bgeu	r19,r3,42cec <quorem+0x208>
   42ccc:	b0bfff17 	ldw	r2,-4(r22)
   42cd0:	10000326 	beq	r2,zero,42ce0 <quorem+0x1fc>
   42cd4:	00000506 	br	42cec <quorem+0x208>
   42cd8:	18800017 	ldw	r2,0(r3)
   42cdc:	1000031e 	bne	r2,zero,42cec <quorem+0x208>
   42ce0:	18ffff04 	addi	r3,r3,-4
   42ce4:	8c7fffc4 	addi	r17,r17,-1
   42ce8:	98fffb36 	bltu	r19,r3,42cd8 <quorem+0x1f4>
   42cec:	bc400415 	stw	r17,16(r23)
   42cf0:	003f9a06 	br	42b5c <quorem+0x78>
   42cf4:	0005883a 	mov	r2,zero
   42cf8:	003fc806 	br	42c1c <quorem+0x138>

00042cfc <_dtoa_r>:
   42cfc:	22001017 	ldw	r8,64(r4)
   42d00:	deffda04 	addi	sp,sp,-152
   42d04:	dd402115 	stw	r21,132(sp)
   42d08:	dd002015 	stw	r20,128(sp)
   42d0c:	dc801e15 	stw	r18,120(sp)
   42d10:	dc401d15 	stw	r17,116(sp)
   42d14:	dfc02515 	stw	ra,148(sp)
   42d18:	df002415 	stw	fp,144(sp)
   42d1c:	ddc02315 	stw	r23,140(sp)
   42d20:	dd802215 	stw	r22,136(sp)
   42d24:	dcc01f15 	stw	r19,124(sp)
   42d28:	dc001c15 	stw	r16,112(sp)
   42d2c:	d9001615 	stw	r4,88(sp)
   42d30:	3023883a 	mov	r17,r6
   42d34:	2829883a 	mov	r20,r5
   42d38:	d9c01715 	stw	r7,92(sp)
   42d3c:	dc802817 	ldw	r18,160(sp)
   42d40:	302b883a 	mov	r21,r6
   42d44:	40000a26 	beq	r8,zero,42d70 <_dtoa_r+0x74>
   42d48:	20801117 	ldw	r2,68(r4)
   42d4c:	400b883a 	mov	r5,r8
   42d50:	40800115 	stw	r2,4(r8)
   42d54:	20c01117 	ldw	r3,68(r4)
   42d58:	00800044 	movi	r2,1
   42d5c:	10c4983a 	sll	r2,r2,r3
   42d60:	40800215 	stw	r2,8(r8)
   42d64:	0045e900 	call	45e90 <_Bfree>
   42d68:	d8c01617 	ldw	r3,88(sp)
   42d6c:	18001015 	stw	zero,64(r3)
   42d70:	8800a316 	blt	r17,zero,43000 <_dtoa_r+0x304>
   42d74:	90000015 	stw	zero,0(r18)
   42d78:	a8dffc2c 	andhi	r3,r21,32752
   42d7c:	009ffc34 	movhi	r2,32752
   42d80:	18809126 	beq	r3,r2,42fc8 <_dtoa_r+0x2cc>
   42d84:	000d883a 	mov	r6,zero
   42d88:	000f883a 	mov	r7,zero
   42d8c:	a009883a 	mov	r4,r20
   42d90:	a80b883a 	mov	r5,r21
   42d94:	dd001215 	stw	r20,72(sp)
   42d98:	dd401315 	stw	r21,76(sp)
   42d9c:	00493180 	call	49318 <__nedf2>
   42da0:	1000171e 	bne	r2,zero,42e00 <_dtoa_r+0x104>
   42da4:	d9802717 	ldw	r6,156(sp)
   42da8:	00800044 	movi	r2,1
   42dac:	30800015 	stw	r2,0(r6)
   42db0:	d8802917 	ldw	r2,164(sp)
   42db4:	10029b26 	beq	r2,zero,43824 <_dtoa_r+0xb28>
   42db8:	d9002917 	ldw	r4,164(sp)
   42dbc:	00900034 	movhi	r2,16384
   42dc0:	10802e44 	addi	r2,r2,185
   42dc4:	10ffffc4 	addi	r3,r2,-1
   42dc8:	20800015 	stw	r2,0(r4)
   42dcc:	1805883a 	mov	r2,r3
   42dd0:	dfc02517 	ldw	ra,148(sp)
   42dd4:	df002417 	ldw	fp,144(sp)
   42dd8:	ddc02317 	ldw	r23,140(sp)
   42ddc:	dd802217 	ldw	r22,136(sp)
   42de0:	dd402117 	ldw	r21,132(sp)
   42de4:	dd002017 	ldw	r20,128(sp)
   42de8:	dcc01f17 	ldw	r19,124(sp)
   42dec:	dc801e17 	ldw	r18,120(sp)
   42df0:	dc401d17 	ldw	r17,116(sp)
   42df4:	dc001c17 	ldw	r16,112(sp)
   42df8:	dec02604 	addi	sp,sp,152
   42dfc:	f800283a 	ret
   42e00:	d9001617 	ldw	r4,88(sp)
   42e04:	d9401217 	ldw	r5,72(sp)
   42e08:	d8800104 	addi	r2,sp,4
   42e0c:	a80d883a 	mov	r6,r21
   42e10:	d9c00204 	addi	r7,sp,8
   42e14:	d8800015 	stw	r2,0(sp)
   42e18:	00464cc0 	call	464cc <__d2b>
   42e1c:	d8800715 	stw	r2,28(sp)
   42e20:	a804d53a 	srli	r2,r21,20
   42e24:	1101ffcc 	andi	r4,r2,2047
   42e28:	20008626 	beq	r4,zero,43044 <_dtoa_r+0x348>
   42e2c:	d8c01217 	ldw	r3,72(sp)
   42e30:	00800434 	movhi	r2,16
   42e34:	10bfffc4 	addi	r2,r2,-1
   42e38:	ddc00117 	ldw	r23,4(sp)
   42e3c:	a884703a 	and	r2,r21,r2
   42e40:	1811883a 	mov	r8,r3
   42e44:	124ffc34 	orhi	r9,r2,16368
   42e48:	25bf0044 	addi	r22,r4,-1023
   42e4c:	d8000815 	stw	zero,32(sp)
   42e50:	0005883a 	mov	r2,zero
   42e54:	00cffe34 	movhi	r3,16376
   42e58:	480b883a 	mov	r5,r9
   42e5c:	4009883a 	mov	r4,r8
   42e60:	180f883a 	mov	r7,r3
   42e64:	100d883a 	mov	r6,r2
   42e68:	0048b900 	call	48b90 <__subdf3>
   42e6c:	0218dbf4 	movhi	r8,25455
   42e70:	4210d844 	addi	r8,r8,17249
   42e74:	024ff4f4 	movhi	r9,16339
   42e78:	4a61e9c4 	addi	r9,r9,-30809
   42e7c:	480f883a 	mov	r7,r9
   42e80:	400d883a 	mov	r6,r8
   42e84:	180b883a 	mov	r5,r3
   42e88:	1009883a 	mov	r4,r2
   42e8c:	0048c840 	call	48c84 <__muldf3>
   42e90:	0222d874 	movhi	r8,35681
   42e94:	42322cc4 	addi	r8,r8,-14157
   42e98:	024ff1f4 	movhi	r9,16327
   42e9c:	4a628a04 	addi	r9,r9,-30168
   42ea0:	480f883a 	mov	r7,r9
   42ea4:	400d883a 	mov	r6,r8
   42ea8:	180b883a 	mov	r5,r3
   42eac:	1009883a 	mov	r4,r2
   42eb0:	0048c100 	call	48c10 <__adddf3>
   42eb4:	b009883a 	mov	r4,r22
   42eb8:	1021883a 	mov	r16,r2
   42ebc:	1823883a 	mov	r17,r3
   42ec0:	00495380 	call	49538 <__floatsidf>
   42ec4:	021427f4 	movhi	r8,20639
   42ec8:	421e7ec4 	addi	r8,r8,31227
   42ecc:	024ff4f4 	movhi	r9,16339
   42ed0:	4a5104c4 	addi	r9,r9,17427
   42ed4:	480f883a 	mov	r7,r9
   42ed8:	400d883a 	mov	r6,r8
   42edc:	180b883a 	mov	r5,r3
   42ee0:	1009883a 	mov	r4,r2
   42ee4:	0048c840 	call	48c84 <__muldf3>
   42ee8:	180f883a 	mov	r7,r3
   42eec:	880b883a 	mov	r5,r17
   42ef0:	100d883a 	mov	r6,r2
   42ef4:	8009883a 	mov	r4,r16
   42ef8:	0048c100 	call	48c10 <__adddf3>
   42efc:	1009883a 	mov	r4,r2
   42f00:	180b883a 	mov	r5,r3
   42f04:	1021883a 	mov	r16,r2
   42f08:	1823883a 	mov	r17,r3
   42f0c:	00496300 	call	49630 <__fixdfsi>
   42f10:	000d883a 	mov	r6,zero
   42f14:	000f883a 	mov	r7,zero
   42f18:	8009883a 	mov	r4,r16
   42f1c:	880b883a 	mov	r5,r17
   42f20:	d8800d15 	stw	r2,52(sp)
   42f24:	00494b00 	call	494b0 <__ltdf2>
   42f28:	10031716 	blt	r2,zero,43b88 <_dtoa_r+0xe8c>
   42f2c:	d8c00d17 	ldw	r3,52(sp)
   42f30:	00800584 	movi	r2,22
   42f34:	10c1482e 	bgeu	r2,r3,43458 <_dtoa_r+0x75c>
   42f38:	01000044 	movi	r4,1
   42f3c:	d9000c15 	stw	r4,48(sp)
   42f40:	bd85c83a 	sub	r2,r23,r22
   42f44:	11bfffc4 	addi	r6,r2,-1
   42f48:	30030b16 	blt	r6,zero,43b78 <_dtoa_r+0xe7c>
   42f4c:	d9800a15 	stw	r6,40(sp)
   42f50:	d8001115 	stw	zero,68(sp)
   42f54:	d8c00d17 	ldw	r3,52(sp)
   42f58:	1802ff16 	blt	r3,zero,43b58 <_dtoa_r+0xe5c>
   42f5c:	d9000a17 	ldw	r4,40(sp)
   42f60:	d8c00915 	stw	r3,36(sp)
   42f64:	d8001015 	stw	zero,64(sp)
   42f68:	20c9883a 	add	r4,r4,r3
   42f6c:	d9000a15 	stw	r4,40(sp)
   42f70:	d9001717 	ldw	r4,92(sp)
   42f74:	00800244 	movi	r2,9
   42f78:	11004636 	bltu	r2,r4,43094 <_dtoa_r+0x398>
   42f7c:	00800144 	movi	r2,5
   42f80:	11020416 	blt	r2,r4,43794 <_dtoa_r+0xa98>
   42f84:	04400044 	movi	r17,1
   42f88:	d8c01717 	ldw	r3,92(sp)
   42f8c:	00800144 	movi	r2,5
   42f90:	10c1ed36 	bltu	r2,r3,43748 <_dtoa_r+0xa4c>
   42f94:	18c5883a 	add	r2,r3,r3
   42f98:	1085883a 	add	r2,r2,r2
   42f9c:	00c00134 	movhi	r3,4
   42fa0:	18cbec04 	addi	r3,r3,12208
   42fa4:	10c5883a 	add	r2,r2,r3
   42fa8:	11000017 	ldw	r4,0(r2)
   42fac:	2000683a 	jmp	r4
   42fb0:	0004309c 	xori	zero,zero,4290
   42fb4:	0004309c 	xori	zero,zero,4290
   42fb8:	00043a9c 	xori	zero,zero,4330
   42fbc:	00043a74 	movhi	zero,4329
   42fc0:	00043ab8 	rdprs	zero,zero,4330
   42fc4:	00043ac4 	movi	zero,4331
   42fc8:	d9002717 	ldw	r4,156(sp)
   42fcc:	0089c3c4 	movi	r2,9999
   42fd0:	20800015 	stw	r2,0(r4)
   42fd4:	a0001026 	beq	r20,zero,43018 <_dtoa_r+0x31c>
   42fd8:	00d00034 	movhi	r3,16384
   42fdc:	18c03a04 	addi	r3,r3,232
   42fe0:	d9802917 	ldw	r6,164(sp)
   42fe4:	303f7926 	beq	r6,zero,42dcc <_dtoa_r+0xd0>
   42fe8:	188000c7 	ldb	r2,3(r3)
   42fec:	190000c4 	addi	r4,r3,3
   42ff0:	1000101e 	bne	r2,zero,43034 <_dtoa_r+0x338>
   42ff4:	d8802917 	ldw	r2,164(sp)
   42ff8:	11000015 	stw	r4,0(r2)
   42ffc:	003f7306 	br	42dcc <_dtoa_r+0xd0>
   43000:	00a00034 	movhi	r2,32768
   43004:	10bfffc4 	addi	r2,r2,-1
   43008:	00c00044 	movi	r3,1
   4300c:	88aa703a 	and	r21,r17,r2
   43010:	90c00015 	stw	r3,0(r18)
   43014:	003f5806 	br	42d78 <_dtoa_r+0x7c>
   43018:	00800434 	movhi	r2,16
   4301c:	10bfffc4 	addi	r2,r2,-1
   43020:	a884703a 	and	r2,r21,r2
   43024:	103fec1e 	bne	r2,zero,42fd8 <_dtoa_r+0x2dc>
   43028:	00d00034 	movhi	r3,16384
   4302c:	18c03704 	addi	r3,r3,220
   43030:	003feb06 	br	42fe0 <_dtoa_r+0x2e4>
   43034:	d8802917 	ldw	r2,164(sp)
   43038:	19000204 	addi	r4,r3,8
   4303c:	11000015 	stw	r4,0(r2)
   43040:	003f6206 	br	42dcc <_dtoa_r+0xd0>
   43044:	ddc00117 	ldw	r23,4(sp)
   43048:	d8800217 	ldw	r2,8(sp)
   4304c:	01000804 	movi	r4,32
   43050:	b8c10c84 	addi	r3,r23,1074
   43054:	18a3883a 	add	r17,r3,r2
   43058:	2441b80e 	bge	r4,r17,4373c <_dtoa_r+0xa40>
   4305c:	00c01004 	movi	r3,64
   43060:	1c47c83a 	sub	r3,r3,r17
   43064:	88bff804 	addi	r2,r17,-32
   43068:	a8c6983a 	sll	r3,r21,r3
   4306c:	a084d83a 	srl	r2,r20,r2
   43070:	1888b03a 	or	r4,r3,r2
   43074:	00497080 	call	49708 <__floatunsidf>
   43078:	1011883a 	mov	r8,r2
   4307c:	00bf8434 	movhi	r2,65040
   43080:	01000044 	movi	r4,1
   43084:	10d3883a 	add	r9,r2,r3
   43088:	8dbef344 	addi	r22,r17,-1075
   4308c:	d9000815 	stw	r4,32(sp)
   43090:	003f6f06 	br	42e50 <_dtoa_r+0x154>
   43094:	d8001715 	stw	zero,92(sp)
   43098:	04400044 	movi	r17,1
   4309c:	00bfffc4 	movi	r2,-1
   430a0:	00c00044 	movi	r3,1
   430a4:	d8800e15 	stw	r2,56(sp)
   430a8:	d8002615 	stw	zero,152(sp)
   430ac:	d8800f15 	stw	r2,60(sp)
   430b0:	d8c00b15 	stw	r3,44(sp)
   430b4:	1021883a 	mov	r16,r2
   430b8:	d8801617 	ldw	r2,88(sp)
   430bc:	10001115 	stw	zero,68(r2)
   430c0:	d8801617 	ldw	r2,88(sp)
   430c4:	11401117 	ldw	r5,68(r2)
   430c8:	1009883a 	mov	r4,r2
   430cc:	00464100 	call	46410 <_Balloc>
   430d0:	d8c01617 	ldw	r3,88(sp)
   430d4:	d8800515 	stw	r2,20(sp)
   430d8:	18801015 	stw	r2,64(r3)
   430dc:	00800384 	movi	r2,14
   430e0:	14006836 	bltu	r2,r16,43284 <_dtoa_r+0x588>
   430e4:	8805003a 	cmpeq	r2,r17,zero
   430e8:	1000661e 	bne	r2,zero,43284 <_dtoa_r+0x588>
   430ec:	d9000d17 	ldw	r4,52(sp)
   430f0:	0102300e 	bge	zero,r4,439b4 <_dtoa_r+0xcb8>
   430f4:	208003cc 	andi	r2,r4,15
   430f8:	100490fa 	slli	r2,r2,3
   430fc:	2025d13a 	srai	r18,r4,4
   43100:	00d00034 	movhi	r3,16384
   43104:	18c04c04 	addi	r3,r3,304
   43108:	10c5883a 	add	r2,r2,r3
   4310c:	90c0040c 	andi	r3,r18,16
   43110:	14000017 	ldw	r16,0(r2)
   43114:	14400117 	ldw	r17,4(r2)
   43118:	18036a1e 	bne	r3,zero,43ec4 <_dtoa_r+0x11c8>
   4311c:	05800084 	movi	r22,2
   43120:	90001026 	beq	r18,zero,43164 <_dtoa_r+0x468>
   43124:	04d00034 	movhi	r19,16384
   43128:	9cc07e04 	addi	r19,r19,504
   4312c:	9080004c 	andi	r2,r18,1
   43130:	1005003a 	cmpeq	r2,r2,zero
   43134:	1000081e 	bne	r2,zero,43158 <_dtoa_r+0x45c>
   43138:	99800017 	ldw	r6,0(r19)
   4313c:	99c00117 	ldw	r7,4(r19)
   43140:	880b883a 	mov	r5,r17
   43144:	8009883a 	mov	r4,r16
   43148:	0048c840 	call	48c84 <__muldf3>
   4314c:	1021883a 	mov	r16,r2
   43150:	b5800044 	addi	r22,r22,1
   43154:	1823883a 	mov	r17,r3
   43158:	9025d07a 	srai	r18,r18,1
   4315c:	9cc00204 	addi	r19,r19,8
   43160:	903ff21e 	bne	r18,zero,4312c <_dtoa_r+0x430>
   43164:	a80b883a 	mov	r5,r21
   43168:	a009883a 	mov	r4,r20
   4316c:	880f883a 	mov	r7,r17
   43170:	800d883a 	mov	r6,r16
   43174:	00490380 	call	49038 <__divdf3>
   43178:	1029883a 	mov	r20,r2
   4317c:	182b883a 	mov	r21,r3
   43180:	d8c00c17 	ldw	r3,48(sp)
   43184:	1805003a 	cmpeq	r2,r3,zero
   43188:	1000081e 	bne	r2,zero,431ac <_dtoa_r+0x4b0>
   4318c:	0005883a 	mov	r2,zero
   43190:	00cffc34 	movhi	r3,16368
   43194:	180f883a 	mov	r7,r3
   43198:	a009883a 	mov	r4,r20
   4319c:	a80b883a 	mov	r5,r21
   431a0:	100d883a 	mov	r6,r2
   431a4:	00494b00 	call	494b0 <__ltdf2>
   431a8:	1003fe16 	blt	r2,zero,441a4 <_dtoa_r+0x14a8>
   431ac:	b009883a 	mov	r4,r22
   431b0:	00495380 	call	49538 <__floatsidf>
   431b4:	180b883a 	mov	r5,r3
   431b8:	1009883a 	mov	r4,r2
   431bc:	a00d883a 	mov	r6,r20
   431c0:	a80f883a 	mov	r7,r21
   431c4:	0048c840 	call	48c84 <__muldf3>
   431c8:	0011883a 	mov	r8,zero
   431cc:	02500734 	movhi	r9,16412
   431d0:	1009883a 	mov	r4,r2
   431d4:	180b883a 	mov	r5,r3
   431d8:	480f883a 	mov	r7,r9
   431dc:	400d883a 	mov	r6,r8
   431e0:	0048c100 	call	48c10 <__adddf3>
   431e4:	d9000f17 	ldw	r4,60(sp)
   431e8:	102d883a 	mov	r22,r2
   431ec:	00bf3034 	movhi	r2,64704
   431f0:	18b9883a 	add	fp,r3,r2
   431f4:	e02f883a 	mov	r23,fp
   431f8:	20028f1e 	bne	r4,zero,43c38 <_dtoa_r+0xf3c>
   431fc:	0005883a 	mov	r2,zero
   43200:	00d00534 	movhi	r3,16404
   43204:	a009883a 	mov	r4,r20
   43208:	a80b883a 	mov	r5,r21
   4320c:	180f883a 	mov	r7,r3
   43210:	100d883a 	mov	r6,r2
   43214:	0048b900 	call	48b90 <__subdf3>
   43218:	1009883a 	mov	r4,r2
   4321c:	e00f883a 	mov	r7,fp
   43220:	180b883a 	mov	r5,r3
   43224:	b00d883a 	mov	r6,r22
   43228:	1025883a 	mov	r18,r2
   4322c:	1827883a 	mov	r19,r3
   43230:	00493a00 	call	493a0 <__gtdf2>
   43234:	00834f16 	blt	zero,r2,43f74 <_dtoa_r+0x1278>
   43238:	e0e0003c 	xorhi	r3,fp,32768
   4323c:	9009883a 	mov	r4,r18
   43240:	980b883a 	mov	r5,r19
   43244:	180f883a 	mov	r7,r3
   43248:	b00d883a 	mov	r6,r22
   4324c:	00494b00 	call	494b0 <__ltdf2>
   43250:	1000080e 	bge	r2,zero,43274 <_dtoa_r+0x578>
   43254:	0027883a 	mov	r19,zero
   43258:	0025883a 	mov	r18,zero
   4325c:	d8802617 	ldw	r2,152(sp)
   43260:	df000517 	ldw	fp,20(sp)
   43264:	d8000615 	stw	zero,24(sp)
   43268:	0084303a 	nor	r2,zero,r2
   4326c:	d8800d15 	stw	r2,52(sp)
   43270:	00019b06 	br	438e0 <_dtoa_r+0xbe4>
   43274:	d9801217 	ldw	r6,72(sp)
   43278:	d8801317 	ldw	r2,76(sp)
   4327c:	3029883a 	mov	r20,r6
   43280:	102b883a 	mov	r21,r2
   43284:	d8c00217 	ldw	r3,8(sp)
   43288:	18008516 	blt	r3,zero,434a0 <_dtoa_r+0x7a4>
   4328c:	d9000d17 	ldw	r4,52(sp)
   43290:	00800384 	movi	r2,14
   43294:	11008216 	blt	r2,r4,434a0 <_dtoa_r+0x7a4>
   43298:	200490fa 	slli	r2,r4,3
   4329c:	d9802617 	ldw	r6,152(sp)
   432a0:	00d00034 	movhi	r3,16384
   432a4:	18c04c04 	addi	r3,r3,304
   432a8:	10c5883a 	add	r2,r2,r3
   432ac:	14800017 	ldw	r18,0(r2)
   432b0:	14c00117 	ldw	r19,4(r2)
   432b4:	30031e16 	blt	r6,zero,43f30 <_dtoa_r+0x1234>
   432b8:	d9000517 	ldw	r4,20(sp)
   432bc:	d8c00f17 	ldw	r3,60(sp)
   432c0:	a823883a 	mov	r17,r21
   432c4:	a021883a 	mov	r16,r20
   432c8:	192b883a 	add	r21,r3,r4
   432cc:	2039883a 	mov	fp,r4
   432d0:	00000f06 	br	43310 <_dtoa_r+0x614>
   432d4:	0005883a 	mov	r2,zero
   432d8:	00d00934 	movhi	r3,16420
   432dc:	5009883a 	mov	r4,r10
   432e0:	580b883a 	mov	r5,r11
   432e4:	180f883a 	mov	r7,r3
   432e8:	100d883a 	mov	r6,r2
   432ec:	0048c840 	call	48c84 <__muldf3>
   432f0:	180b883a 	mov	r5,r3
   432f4:	000d883a 	mov	r6,zero
   432f8:	000f883a 	mov	r7,zero
   432fc:	1009883a 	mov	r4,r2
   43300:	1021883a 	mov	r16,r2
   43304:	1823883a 	mov	r17,r3
   43308:	00493180 	call	49318 <__nedf2>
   4330c:	10004526 	beq	r2,zero,43424 <_dtoa_r+0x728>
   43310:	900d883a 	mov	r6,r18
   43314:	980f883a 	mov	r7,r19
   43318:	8009883a 	mov	r4,r16
   4331c:	880b883a 	mov	r5,r17
   43320:	00490380 	call	49038 <__divdf3>
   43324:	180b883a 	mov	r5,r3
   43328:	1009883a 	mov	r4,r2
   4332c:	00496300 	call	49630 <__fixdfsi>
   43330:	1009883a 	mov	r4,r2
   43334:	1029883a 	mov	r20,r2
   43338:	00495380 	call	49538 <__floatsidf>
   4333c:	180f883a 	mov	r7,r3
   43340:	9009883a 	mov	r4,r18
   43344:	980b883a 	mov	r5,r19
   43348:	100d883a 	mov	r6,r2
   4334c:	0048c840 	call	48c84 <__muldf3>
   43350:	180f883a 	mov	r7,r3
   43354:	880b883a 	mov	r5,r17
   43358:	8009883a 	mov	r4,r16
   4335c:	100d883a 	mov	r6,r2
   43360:	0048b900 	call	48b90 <__subdf3>
   43364:	1015883a 	mov	r10,r2
   43368:	a0800c04 	addi	r2,r20,48
   4336c:	e0800005 	stb	r2,0(fp)
   43370:	e7000044 	addi	fp,fp,1
   43374:	1817883a 	mov	r11,r3
   43378:	e57fd61e 	bne	fp,r21,432d4 <_dtoa_r+0x5d8>
   4337c:	500d883a 	mov	r6,r10
   43380:	180f883a 	mov	r7,r3
   43384:	5009883a 	mov	r4,r10
   43388:	180b883a 	mov	r5,r3
   4338c:	0048c100 	call	48c10 <__adddf3>
   43390:	100d883a 	mov	r6,r2
   43394:	9009883a 	mov	r4,r18
   43398:	980b883a 	mov	r5,r19
   4339c:	180f883a 	mov	r7,r3
   433a0:	1021883a 	mov	r16,r2
   433a4:	1823883a 	mov	r17,r3
   433a8:	00494b00 	call	494b0 <__ltdf2>
   433ac:	10000816 	blt	r2,zero,433d0 <_dtoa_r+0x6d4>
   433b0:	980b883a 	mov	r5,r19
   433b4:	800d883a 	mov	r6,r16
   433b8:	880f883a 	mov	r7,r17
   433bc:	9009883a 	mov	r4,r18
   433c0:	00492900 	call	49290 <__eqdf2>
   433c4:	1000171e 	bne	r2,zero,43424 <_dtoa_r+0x728>
   433c8:	a080004c 	andi	r2,r20,1
   433cc:	10001526 	beq	r2,zero,43424 <_dtoa_r+0x728>
   433d0:	d8800d17 	ldw	r2,52(sp)
   433d4:	d8800415 	stw	r2,16(sp)
   433d8:	e009883a 	mov	r4,fp
   433dc:	213fffc4 	addi	r4,r4,-1
   433e0:	20c00007 	ldb	r3,0(r4)
   433e4:	00800e44 	movi	r2,57
   433e8:	1880081e 	bne	r3,r2,4340c <_dtoa_r+0x710>
   433ec:	d8800517 	ldw	r2,20(sp)
   433f0:	113ffa1e 	bne	r2,r4,433dc <_dtoa_r+0x6e0>
   433f4:	d8c00417 	ldw	r3,16(sp)
   433f8:	d9800517 	ldw	r6,20(sp)
   433fc:	00800c04 	movi	r2,48
   43400:	18c00044 	addi	r3,r3,1
   43404:	d8c00415 	stw	r3,16(sp)
   43408:	30800005 	stb	r2,0(r6)
   4340c:	20800003 	ldbu	r2,0(r4)
   43410:	d8c00417 	ldw	r3,16(sp)
   43414:	27000044 	addi	fp,r4,1
   43418:	10800044 	addi	r2,r2,1
   4341c:	d8c00d15 	stw	r3,52(sp)
   43420:	20800005 	stb	r2,0(r4)
   43424:	d9001617 	ldw	r4,88(sp)
   43428:	d9400717 	ldw	r5,28(sp)
   4342c:	0045e900 	call	45e90 <_Bfree>
   43430:	e0000005 	stb	zero,0(fp)
   43434:	d9800d17 	ldw	r6,52(sp)
   43438:	d8c02717 	ldw	r3,156(sp)
   4343c:	d9002917 	ldw	r4,164(sp)
   43440:	30800044 	addi	r2,r6,1
   43444:	18800015 	stw	r2,0(r3)
   43448:	20029c26 	beq	r4,zero,43ebc <_dtoa_r+0x11c0>
   4344c:	d8c00517 	ldw	r3,20(sp)
   43450:	27000015 	stw	fp,0(r4)
   43454:	003e5d06 	br	42dcc <_dtoa_r+0xd0>
   43458:	d9800d17 	ldw	r6,52(sp)
   4345c:	00d00034 	movhi	r3,16384
   43460:	18c04c04 	addi	r3,r3,304
   43464:	d9001217 	ldw	r4,72(sp)
   43468:	300490fa 	slli	r2,r6,3
   4346c:	d9401317 	ldw	r5,76(sp)
   43470:	10c5883a 	add	r2,r2,r3
   43474:	12000017 	ldw	r8,0(r2)
   43478:	12400117 	ldw	r9,4(r2)
   4347c:	400d883a 	mov	r6,r8
   43480:	480f883a 	mov	r7,r9
   43484:	00494b00 	call	494b0 <__ltdf2>
   43488:	1000030e 	bge	r2,zero,43498 <_dtoa_r+0x79c>
   4348c:	d8800d17 	ldw	r2,52(sp)
   43490:	10bfffc4 	addi	r2,r2,-1
   43494:	d8800d15 	stw	r2,52(sp)
   43498:	d8000c15 	stw	zero,48(sp)
   4349c:	003ea806 	br	42f40 <_dtoa_r+0x244>
   434a0:	d9000b17 	ldw	r4,44(sp)
   434a4:	202cc03a 	cmpne	r22,r4,zero
   434a8:	b000c71e 	bne	r22,zero,437c8 <_dtoa_r+0xacc>
   434ac:	dc001117 	ldw	r16,68(sp)
   434b0:	dc801017 	ldw	r18,64(sp)
   434b4:	0027883a 	mov	r19,zero
   434b8:	04000b0e 	bge	zero,r16,434e8 <_dtoa_r+0x7ec>
   434bc:	d8c00a17 	ldw	r3,40(sp)
   434c0:	00c0090e 	bge	zero,r3,434e8 <_dtoa_r+0x7ec>
   434c4:	8005883a 	mov	r2,r16
   434c8:	1c011316 	blt	r3,r16,43918 <_dtoa_r+0xc1c>
   434cc:	d9000a17 	ldw	r4,40(sp)
   434d0:	d9801117 	ldw	r6,68(sp)
   434d4:	80a1c83a 	sub	r16,r16,r2
   434d8:	2089c83a 	sub	r4,r4,r2
   434dc:	308dc83a 	sub	r6,r6,r2
   434e0:	d9000a15 	stw	r4,40(sp)
   434e4:	d9801115 	stw	r6,68(sp)
   434e8:	d8801017 	ldw	r2,64(sp)
   434ec:	0080150e 	bge	zero,r2,43544 <_dtoa_r+0x848>
   434f0:	d8c00b17 	ldw	r3,44(sp)
   434f4:	1805003a 	cmpeq	r2,r3,zero
   434f8:	1001c91e 	bne	r2,zero,43c20 <_dtoa_r+0xf24>
   434fc:	04800e0e 	bge	zero,r18,43538 <_dtoa_r+0x83c>
   43500:	d9001617 	ldw	r4,88(sp)
   43504:	980b883a 	mov	r5,r19
   43508:	900d883a 	mov	r6,r18
   4350c:	0046c440 	call	46c44 <__pow5mult>
   43510:	d9001617 	ldw	r4,88(sp)
   43514:	d9800717 	ldw	r6,28(sp)
   43518:	100b883a 	mov	r5,r2
   4351c:	1027883a 	mov	r19,r2
   43520:	00469200 	call	46920 <__multiply>
   43524:	d9001617 	ldw	r4,88(sp)
   43528:	d9400717 	ldw	r5,28(sp)
   4352c:	1023883a 	mov	r17,r2
   43530:	0045e900 	call	45e90 <_Bfree>
   43534:	dc400715 	stw	r17,28(sp)
   43538:	d9001017 	ldw	r4,64(sp)
   4353c:	248dc83a 	sub	r6,r4,r18
   43540:	30010e1e 	bne	r6,zero,4397c <_dtoa_r+0xc80>
   43544:	d9001617 	ldw	r4,88(sp)
   43548:	04400044 	movi	r17,1
   4354c:	880b883a 	mov	r5,r17
   43550:	0046b080 	call	46b08 <__i2b>
   43554:	d9800917 	ldw	r6,36(sp)
   43558:	1025883a 	mov	r18,r2
   4355c:	0180040e 	bge	zero,r6,43570 <_dtoa_r+0x874>
   43560:	d9001617 	ldw	r4,88(sp)
   43564:	100b883a 	mov	r5,r2
   43568:	0046c440 	call	46c44 <__pow5mult>
   4356c:	1025883a 	mov	r18,r2
   43570:	d8801717 	ldw	r2,92(sp)
   43574:	8880f30e 	bge	r17,r2,43944 <_dtoa_r+0xc48>
   43578:	0023883a 	mov	r17,zero
   4357c:	d9800917 	ldw	r6,36(sp)
   43580:	30019e1e 	bne	r6,zero,43bfc <_dtoa_r+0xf00>
   43584:	00c00044 	movi	r3,1
   43588:	d9000a17 	ldw	r4,40(sp)
   4358c:	20c5883a 	add	r2,r4,r3
   43590:	10c007cc 	andi	r3,r2,31
   43594:	1800841e 	bne	r3,zero,437a8 <_dtoa_r+0xaac>
   43598:	00800704 	movi	r2,28
   4359c:	d9000a17 	ldw	r4,40(sp)
   435a0:	d9801117 	ldw	r6,68(sp)
   435a4:	80a1883a 	add	r16,r16,r2
   435a8:	2089883a 	add	r4,r4,r2
   435ac:	308d883a 	add	r6,r6,r2
   435b0:	d9000a15 	stw	r4,40(sp)
   435b4:	d9801115 	stw	r6,68(sp)
   435b8:	d8801117 	ldw	r2,68(sp)
   435bc:	0080050e 	bge	zero,r2,435d4 <_dtoa_r+0x8d8>
   435c0:	d9400717 	ldw	r5,28(sp)
   435c4:	d9001617 	ldw	r4,88(sp)
   435c8:	100d883a 	mov	r6,r2
   435cc:	00467d40 	call	467d4 <__lshift>
   435d0:	d8800715 	stw	r2,28(sp)
   435d4:	d8c00a17 	ldw	r3,40(sp)
   435d8:	00c0050e 	bge	zero,r3,435f0 <_dtoa_r+0x8f4>
   435dc:	d9001617 	ldw	r4,88(sp)
   435e0:	900b883a 	mov	r5,r18
   435e4:	180d883a 	mov	r6,r3
   435e8:	00467d40 	call	467d4 <__lshift>
   435ec:	1025883a 	mov	r18,r2
   435f0:	d9000c17 	ldw	r4,48(sp)
   435f4:	2005003a 	cmpeq	r2,r4,zero
   435f8:	10016f26 	beq	r2,zero,43bb8 <_dtoa_r+0xebc>
   435fc:	d9000f17 	ldw	r4,60(sp)
   43600:	0102170e 	bge	zero,r4,43e60 <_dtoa_r+0x1164>
   43604:	d9800b17 	ldw	r6,44(sp)
   43608:	3005003a 	cmpeq	r2,r6,zero
   4360c:	1000881e 	bne	r2,zero,43830 <_dtoa_r+0xb34>
   43610:	0400050e 	bge	zero,r16,43628 <_dtoa_r+0x92c>
   43614:	d9001617 	ldw	r4,88(sp)
   43618:	980b883a 	mov	r5,r19
   4361c:	800d883a 	mov	r6,r16
   43620:	00467d40 	call	467d4 <__lshift>
   43624:	1027883a 	mov	r19,r2
   43628:	8804c03a 	cmpne	r2,r17,zero
   4362c:	1002541e 	bne	r2,zero,43f80 <_dtoa_r+0x1284>
   43630:	980b883a 	mov	r5,r19
   43634:	dd800517 	ldw	r22,20(sp)
   43638:	dcc00615 	stw	r19,24(sp)
   4363c:	a700004c 	andi	fp,r20,1
   43640:	2827883a 	mov	r19,r5
   43644:	d9000717 	ldw	r4,28(sp)
   43648:	900b883a 	mov	r5,r18
   4364c:	0042ae40 	call	42ae4 <quorem>
   43650:	d9000717 	ldw	r4,28(sp)
   43654:	d9400617 	ldw	r5,24(sp)
   43658:	1023883a 	mov	r17,r2
   4365c:	8dc00c04 	addi	r23,r17,48
   43660:	0045fec0 	call	45fec <__mcmp>
   43664:	d9001617 	ldw	r4,88(sp)
   43668:	900b883a 	mov	r5,r18
   4366c:	980d883a 	mov	r6,r19
   43670:	1029883a 	mov	r20,r2
   43674:	00466480 	call	46648 <__mdiff>
   43678:	102b883a 	mov	r21,r2
   4367c:	10800317 	ldw	r2,12(r2)
   43680:	1001281e 	bne	r2,zero,43b24 <_dtoa_r+0xe28>
   43684:	d9000717 	ldw	r4,28(sp)
   43688:	a80b883a 	mov	r5,r21
   4368c:	0045fec0 	call	45fec <__mcmp>
   43690:	d9001617 	ldw	r4,88(sp)
   43694:	1021883a 	mov	r16,r2
   43698:	a80b883a 	mov	r5,r21
   4369c:	0045e900 	call	45e90 <_Bfree>
   436a0:	8000041e 	bne	r16,zero,436b4 <_dtoa_r+0x9b8>
   436a4:	d8801717 	ldw	r2,92(sp)
   436a8:	1000021e 	bne	r2,zero,436b4 <_dtoa_r+0x9b8>
   436ac:	e004c03a 	cmpne	r2,fp,zero
   436b0:	10011726 	beq	r2,zero,43b10 <_dtoa_r+0xe14>
   436b4:	a0010616 	blt	r20,zero,43ad0 <_dtoa_r+0xdd4>
   436b8:	a000041e 	bne	r20,zero,436cc <_dtoa_r+0x9d0>
   436bc:	d8c01717 	ldw	r3,92(sp)
   436c0:	1800021e 	bne	r3,zero,436cc <_dtoa_r+0x9d0>
   436c4:	e004c03a 	cmpne	r2,fp,zero
   436c8:	10010126 	beq	r2,zero,43ad0 <_dtoa_r+0xdd4>
   436cc:	04023d16 	blt	zero,r16,43fc4 <_dtoa_r+0x12c8>
   436d0:	b5c00005 	stb	r23,0(r22)
   436d4:	d9800517 	ldw	r6,20(sp)
   436d8:	d9000f17 	ldw	r4,60(sp)
   436dc:	b5800044 	addi	r22,r22,1
   436e0:	3105883a 	add	r2,r6,r4
   436e4:	b0806526 	beq	r22,r2,4387c <_dtoa_r+0xb80>
   436e8:	d9400717 	ldw	r5,28(sp)
   436ec:	d9001617 	ldw	r4,88(sp)
   436f0:	01800284 	movi	r6,10
   436f4:	000f883a 	mov	r7,zero
   436f8:	0046b440 	call	46b44 <__multadd>
   436fc:	d8800715 	stw	r2,28(sp)
   43700:	d8800617 	ldw	r2,24(sp)
   43704:	14c10c26 	beq	r2,r19,43b38 <_dtoa_r+0xe3c>
   43708:	d9400617 	ldw	r5,24(sp)
   4370c:	d9001617 	ldw	r4,88(sp)
   43710:	01800284 	movi	r6,10
   43714:	000f883a 	mov	r7,zero
   43718:	0046b440 	call	46b44 <__multadd>
   4371c:	d9001617 	ldw	r4,88(sp)
   43720:	980b883a 	mov	r5,r19
   43724:	01800284 	movi	r6,10
   43728:	000f883a 	mov	r7,zero
   4372c:	d8800615 	stw	r2,24(sp)
   43730:	0046b440 	call	46b44 <__multadd>
   43734:	1027883a 	mov	r19,r2
   43738:	003fc206 	br	43644 <_dtoa_r+0x948>
   4373c:	2445c83a 	sub	r2,r4,r17
   43740:	a088983a 	sll	r4,r20,r2
   43744:	003e4b06 	br	43074 <_dtoa_r+0x378>
   43748:	01bfffc4 	movi	r6,-1
   4374c:	00800044 	movi	r2,1
   43750:	d9800e15 	stw	r6,56(sp)
   43754:	d9800f15 	stw	r6,60(sp)
   43758:	d8800b15 	stw	r2,44(sp)
   4375c:	d8c01617 	ldw	r3,88(sp)
   43760:	008005c4 	movi	r2,23
   43764:	18001115 	stw	zero,68(r3)
   43768:	1580082e 	bgeu	r2,r22,4378c <_dtoa_r+0xa90>
   4376c:	00c00104 	movi	r3,4
   43770:	0009883a 	mov	r4,zero
   43774:	18c7883a 	add	r3,r3,r3
   43778:	18800504 	addi	r2,r3,20
   4377c:	21000044 	addi	r4,r4,1
   43780:	b0bffc2e 	bgeu	r22,r2,43774 <_dtoa_r+0xa78>
   43784:	d9801617 	ldw	r6,88(sp)
   43788:	31001115 	stw	r4,68(r6)
   4378c:	dc000f17 	ldw	r16,60(sp)
   43790:	003e4b06 	br	430c0 <_dtoa_r+0x3c4>
   43794:	d9801717 	ldw	r6,92(sp)
   43798:	0023883a 	mov	r17,zero
   4379c:	31bfff04 	addi	r6,r6,-4
   437a0:	d9801715 	stw	r6,92(sp)
   437a4:	003df806 	br	42f88 <_dtoa_r+0x28c>
   437a8:	00800804 	movi	r2,32
   437ac:	10c9c83a 	sub	r4,r2,r3
   437b0:	00c00104 	movi	r3,4
   437b4:	19005a16 	blt	r3,r4,43920 <_dtoa_r+0xc24>
   437b8:	008000c4 	movi	r2,3
   437bc:	113f7e16 	blt	r2,r4,435b8 <_dtoa_r+0x8bc>
   437c0:	20800704 	addi	r2,r4,28
   437c4:	003f7506 	br	4359c <_dtoa_r+0x8a0>
   437c8:	d9801717 	ldw	r6,92(sp)
   437cc:	00800044 	movi	r2,1
   437d0:	1180a10e 	bge	r2,r6,43a58 <_dtoa_r+0xd5c>
   437d4:	d9800f17 	ldw	r6,60(sp)
   437d8:	d8c01017 	ldw	r3,64(sp)
   437dc:	30bfffc4 	addi	r2,r6,-1
   437e0:	1881c616 	blt	r3,r2,43efc <_dtoa_r+0x1200>
   437e4:	18a5c83a 	sub	r18,r3,r2
   437e8:	d8800f17 	ldw	r2,60(sp)
   437ec:	10026216 	blt	r2,zero,44178 <_dtoa_r+0x147c>
   437f0:	dc001117 	ldw	r16,68(sp)
   437f4:	1007883a 	mov	r3,r2
   437f8:	d9800a17 	ldw	r6,40(sp)
   437fc:	d8801117 	ldw	r2,68(sp)
   43800:	d9001617 	ldw	r4,88(sp)
   43804:	30cd883a 	add	r6,r6,r3
   43808:	10c5883a 	add	r2,r2,r3
   4380c:	01400044 	movi	r5,1
   43810:	d9800a15 	stw	r6,40(sp)
   43814:	d8801115 	stw	r2,68(sp)
   43818:	0046b080 	call	46b08 <__i2b>
   4381c:	1027883a 	mov	r19,r2
   43820:	003f2506 	br	434b8 <_dtoa_r+0x7bc>
   43824:	00d00034 	movhi	r3,16384
   43828:	18c02e04 	addi	r3,r3,184
   4382c:	003d6706 	br	42dcc <_dtoa_r+0xd0>
   43830:	dd800517 	ldw	r22,20(sp)
   43834:	04000044 	movi	r16,1
   43838:	00000706 	br	43858 <_dtoa_r+0xb5c>
   4383c:	d9400717 	ldw	r5,28(sp)
   43840:	d9001617 	ldw	r4,88(sp)
   43844:	01800284 	movi	r6,10
   43848:	000f883a 	mov	r7,zero
   4384c:	0046b440 	call	46b44 <__multadd>
   43850:	d8800715 	stw	r2,28(sp)
   43854:	84000044 	addi	r16,r16,1
   43858:	d9000717 	ldw	r4,28(sp)
   4385c:	900b883a 	mov	r5,r18
   43860:	0042ae40 	call	42ae4 <quorem>
   43864:	15c00c04 	addi	r23,r2,48
   43868:	b5c00005 	stb	r23,0(r22)
   4386c:	d8c00f17 	ldw	r3,60(sp)
   43870:	b5800044 	addi	r22,r22,1
   43874:	80fff116 	blt	r16,r3,4383c <_dtoa_r+0xb40>
   43878:	d8000615 	stw	zero,24(sp)
   4387c:	d9400717 	ldw	r5,28(sp)
   43880:	d9001617 	ldw	r4,88(sp)
   43884:	01800044 	movi	r6,1
   43888:	00467d40 	call	467d4 <__lshift>
   4388c:	1009883a 	mov	r4,r2
   43890:	900b883a 	mov	r5,r18
   43894:	d8800715 	stw	r2,28(sp)
   43898:	0045fec0 	call	45fec <__mcmp>
   4389c:	00803c0e 	bge	zero,r2,43990 <_dtoa_r+0xc94>
   438a0:	b009883a 	mov	r4,r22
   438a4:	213fffc4 	addi	r4,r4,-1
   438a8:	21400003 	ldbu	r5,0(r4)
   438ac:	00800e44 	movi	r2,57
   438b0:	28c03fcc 	andi	r3,r5,255
   438b4:	18c0201c 	xori	r3,r3,128
   438b8:	18ffe004 	addi	r3,r3,-128
   438bc:	1881981e 	bne	r3,r2,43f20 <_dtoa_r+0x1224>
   438c0:	d9800517 	ldw	r6,20(sp)
   438c4:	21bff71e 	bne	r4,r6,438a4 <_dtoa_r+0xba8>
   438c8:	d8800d17 	ldw	r2,52(sp)
   438cc:	37000044 	addi	fp,r6,1
   438d0:	10800044 	addi	r2,r2,1
   438d4:	d8800d15 	stw	r2,52(sp)
   438d8:	00800c44 	movi	r2,49
   438dc:	30800005 	stb	r2,0(r6)
   438e0:	d9001617 	ldw	r4,88(sp)
   438e4:	900b883a 	mov	r5,r18
   438e8:	0045e900 	call	45e90 <_Bfree>
   438ec:	983ecd26 	beq	r19,zero,43424 <_dtoa_r+0x728>
   438f0:	d8c00617 	ldw	r3,24(sp)
   438f4:	18000426 	beq	r3,zero,43908 <_dtoa_r+0xc0c>
   438f8:	1cc00326 	beq	r3,r19,43908 <_dtoa_r+0xc0c>
   438fc:	d9001617 	ldw	r4,88(sp)
   43900:	180b883a 	mov	r5,r3
   43904:	0045e900 	call	45e90 <_Bfree>
   43908:	d9001617 	ldw	r4,88(sp)
   4390c:	980b883a 	mov	r5,r19
   43910:	0045e900 	call	45e90 <_Bfree>
   43914:	003ec306 	br	43424 <_dtoa_r+0x728>
   43918:	1805883a 	mov	r2,r3
   4391c:	003eeb06 	br	434cc <_dtoa_r+0x7d0>
   43920:	d9800a17 	ldw	r6,40(sp)
   43924:	d8c01117 	ldw	r3,68(sp)
   43928:	20bfff04 	addi	r2,r4,-4
   4392c:	308d883a 	add	r6,r6,r2
   43930:	1887883a 	add	r3,r3,r2
   43934:	80a1883a 	add	r16,r16,r2
   43938:	d9800a15 	stw	r6,40(sp)
   4393c:	d8c01115 	stw	r3,68(sp)
   43940:	003f1d06 	br	435b8 <_dtoa_r+0x8bc>
   43944:	a03f0c1e 	bne	r20,zero,43578 <_dtoa_r+0x87c>
   43948:	00800434 	movhi	r2,16
   4394c:	10bfffc4 	addi	r2,r2,-1
   43950:	a884703a 	and	r2,r21,r2
   43954:	103f081e 	bne	r2,zero,43578 <_dtoa_r+0x87c>
   43958:	a89ffc2c 	andhi	r2,r21,32752
   4395c:	103f0626 	beq	r2,zero,43578 <_dtoa_r+0x87c>
   43960:	d8c01117 	ldw	r3,68(sp)
   43964:	d9000a17 	ldw	r4,40(sp)
   43968:	18c00044 	addi	r3,r3,1
   4396c:	21000044 	addi	r4,r4,1
   43970:	d8c01115 	stw	r3,68(sp)
   43974:	d9000a15 	stw	r4,40(sp)
   43978:	003f0006 	br	4357c <_dtoa_r+0x880>
   4397c:	d9400717 	ldw	r5,28(sp)
   43980:	d9001617 	ldw	r4,88(sp)
   43984:	0046c440 	call	46c44 <__pow5mult>
   43988:	d8800715 	stw	r2,28(sp)
   4398c:	003eed06 	br	43544 <_dtoa_r+0x848>
   43990:	1000021e 	bne	r2,zero,4399c <_dtoa_r+0xca0>
   43994:	b880004c 	andi	r2,r23,1
   43998:	103fc11e 	bne	r2,zero,438a0 <_dtoa_r+0xba4>
   4399c:	b5bfffc4 	addi	r22,r22,-1
   439a0:	b0c00007 	ldb	r3,0(r22)
   439a4:	00800c04 	movi	r2,48
   439a8:	18bffc26 	beq	r3,r2,4399c <_dtoa_r+0xca0>
   439ac:	b7000044 	addi	fp,r22,1
   439b0:	003fcb06 	br	438e0 <_dtoa_r+0xbe4>
   439b4:	d9800d17 	ldw	r6,52(sp)
   439b8:	018fc83a 	sub	r7,zero,r6
   439bc:	3801f726 	beq	r7,zero,4419c <_dtoa_r+0x14a0>
   439c0:	398003cc 	andi	r6,r7,15
   439c4:	300c90fa 	slli	r6,r6,3
   439c8:	01500034 	movhi	r5,16384
   439cc:	29404c04 	addi	r5,r5,304
   439d0:	d9001217 	ldw	r4,72(sp)
   439d4:	314d883a 	add	r6,r6,r5
   439d8:	30c00117 	ldw	r3,4(r6)
   439dc:	30800017 	ldw	r2,0(r6)
   439e0:	d9401317 	ldw	r5,76(sp)
   439e4:	3821d13a 	srai	r16,r7,4
   439e8:	100d883a 	mov	r6,r2
   439ec:	180f883a 	mov	r7,r3
   439f0:	0048c840 	call	48c84 <__muldf3>
   439f4:	1011883a 	mov	r8,r2
   439f8:	1813883a 	mov	r9,r3
   439fc:	1029883a 	mov	r20,r2
   43a00:	182b883a 	mov	r21,r3
   43a04:	8001e526 	beq	r16,zero,4419c <_dtoa_r+0x14a0>
   43a08:	05800084 	movi	r22,2
   43a0c:	04500034 	movhi	r17,16384
   43a10:	8c407e04 	addi	r17,r17,504
   43a14:	8080004c 	andi	r2,r16,1
   43a18:	1005003a 	cmpeq	r2,r2,zero
   43a1c:	1000081e 	bne	r2,zero,43a40 <_dtoa_r+0xd44>
   43a20:	89800017 	ldw	r6,0(r17)
   43a24:	89c00117 	ldw	r7,4(r17)
   43a28:	480b883a 	mov	r5,r9
   43a2c:	4009883a 	mov	r4,r8
   43a30:	0048c840 	call	48c84 <__muldf3>
   43a34:	1011883a 	mov	r8,r2
   43a38:	b5800044 	addi	r22,r22,1
   43a3c:	1813883a 	mov	r9,r3
   43a40:	8021d07a 	srai	r16,r16,1
   43a44:	8c400204 	addi	r17,r17,8
   43a48:	803ff21e 	bne	r16,zero,43a14 <_dtoa_r+0xd18>
   43a4c:	4029883a 	mov	r20,r8
   43a50:	482b883a 	mov	r21,r9
   43a54:	003dca06 	br	43180 <_dtoa_r+0x484>
   43a58:	d9000817 	ldw	r4,32(sp)
   43a5c:	2005003a 	cmpeq	r2,r4,zero
   43a60:	1001f61e 	bne	r2,zero,4423c <_dtoa_r+0x1540>
   43a64:	dc001117 	ldw	r16,68(sp)
   43a68:	dc801017 	ldw	r18,64(sp)
   43a6c:	18c10cc4 	addi	r3,r3,1075
   43a70:	003f6106 	br	437f8 <_dtoa_r+0xafc>
   43a74:	d8000b15 	stw	zero,44(sp)
   43a78:	d9802617 	ldw	r6,152(sp)
   43a7c:	d8c00d17 	ldw	r3,52(sp)
   43a80:	30800044 	addi	r2,r6,1
   43a84:	18ad883a 	add	r22,r3,r2
   43a88:	b13fffc4 	addi	r4,r22,-1
   43a8c:	d9000e15 	stw	r4,56(sp)
   43a90:	0581f60e 	bge	zero,r22,4426c <_dtoa_r+0x1570>
   43a94:	dd800f15 	stw	r22,60(sp)
   43a98:	003f3006 	br	4375c <_dtoa_r+0xa60>
   43a9c:	d8000b15 	stw	zero,44(sp)
   43aa0:	d9002617 	ldw	r4,152(sp)
   43aa4:	0101eb0e 	bge	zero,r4,44254 <_dtoa_r+0x1558>
   43aa8:	202d883a 	mov	r22,r4
   43aac:	d9000e15 	stw	r4,56(sp)
   43ab0:	d9000f15 	stw	r4,60(sp)
   43ab4:	003f2906 	br	4375c <_dtoa_r+0xa60>
   43ab8:	01800044 	movi	r6,1
   43abc:	d9800b15 	stw	r6,44(sp)
   43ac0:	003ff706 	br	43aa0 <_dtoa_r+0xda4>
   43ac4:	01000044 	movi	r4,1
   43ac8:	d9000b15 	stw	r4,44(sp)
   43acc:	003fea06 	br	43a78 <_dtoa_r+0xd7c>
   43ad0:	04000c0e 	bge	zero,r16,43b04 <_dtoa_r+0xe08>
   43ad4:	d9400717 	ldw	r5,28(sp)
   43ad8:	d9001617 	ldw	r4,88(sp)
   43adc:	01800044 	movi	r6,1
   43ae0:	00467d40 	call	467d4 <__lshift>
   43ae4:	1009883a 	mov	r4,r2
   43ae8:	900b883a 	mov	r5,r18
   43aec:	d8800715 	stw	r2,28(sp)
   43af0:	0045fec0 	call	45fec <__mcmp>
   43af4:	0081e00e 	bge	zero,r2,44278 <_dtoa_r+0x157c>
   43af8:	bdc00044 	addi	r23,r23,1
   43afc:	00800e84 	movi	r2,58
   43b00:	b881a226 	beq	r23,r2,4418c <_dtoa_r+0x1490>
   43b04:	b7000044 	addi	fp,r22,1
   43b08:	b5c00005 	stb	r23,0(r22)
   43b0c:	003f7406 	br	438e0 <_dtoa_r+0xbe4>
   43b10:	00800e44 	movi	r2,57
   43b14:	b8819d26 	beq	r23,r2,4418c <_dtoa_r+0x1490>
   43b18:	053ffa0e 	bge	zero,r20,43b04 <_dtoa_r+0xe08>
   43b1c:	8dc00c44 	addi	r23,r17,49
   43b20:	003ff806 	br	43b04 <_dtoa_r+0xe08>
   43b24:	d9001617 	ldw	r4,88(sp)
   43b28:	a80b883a 	mov	r5,r21
   43b2c:	04000044 	movi	r16,1
   43b30:	0045e900 	call	45e90 <_Bfree>
   43b34:	003edf06 	br	436b4 <_dtoa_r+0x9b8>
   43b38:	d9001617 	ldw	r4,88(sp)
   43b3c:	980b883a 	mov	r5,r19
   43b40:	01800284 	movi	r6,10
   43b44:	000f883a 	mov	r7,zero
   43b48:	0046b440 	call	46b44 <__multadd>
   43b4c:	1027883a 	mov	r19,r2
   43b50:	d8800615 	stw	r2,24(sp)
   43b54:	003ebb06 	br	43644 <_dtoa_r+0x948>
   43b58:	d9801117 	ldw	r6,68(sp)
   43b5c:	d8800d17 	ldw	r2,52(sp)
   43b60:	d8000915 	stw	zero,36(sp)
   43b64:	308dc83a 	sub	r6,r6,r2
   43b68:	0087c83a 	sub	r3,zero,r2
   43b6c:	d9801115 	stw	r6,68(sp)
   43b70:	d8c01015 	stw	r3,64(sp)
   43b74:	003cfe06 	br	42f70 <_dtoa_r+0x274>
   43b78:	018dc83a 	sub	r6,zero,r6
   43b7c:	d9801115 	stw	r6,68(sp)
   43b80:	d8000a15 	stw	zero,40(sp)
   43b84:	003cf306 	br	42f54 <_dtoa_r+0x258>
   43b88:	d9000d17 	ldw	r4,52(sp)
   43b8c:	00495380 	call	49538 <__floatsidf>
   43b90:	880b883a 	mov	r5,r17
   43b94:	8009883a 	mov	r4,r16
   43b98:	180f883a 	mov	r7,r3
   43b9c:	100d883a 	mov	r6,r2
   43ba0:	00493180 	call	49318 <__nedf2>
   43ba4:	103ce126 	beq	r2,zero,42f2c <_dtoa_r+0x230>
   43ba8:	d9800d17 	ldw	r6,52(sp)
   43bac:	31bfffc4 	addi	r6,r6,-1
   43bb0:	d9800d15 	stw	r6,52(sp)
   43bb4:	003cdd06 	br	42f2c <_dtoa_r+0x230>
   43bb8:	d9000717 	ldw	r4,28(sp)
   43bbc:	900b883a 	mov	r5,r18
   43bc0:	0045fec0 	call	45fec <__mcmp>
   43bc4:	103e8d0e 	bge	r2,zero,435fc <_dtoa_r+0x900>
   43bc8:	d9400717 	ldw	r5,28(sp)
   43bcc:	d9001617 	ldw	r4,88(sp)
   43bd0:	01800284 	movi	r6,10
   43bd4:	000f883a 	mov	r7,zero
   43bd8:	0046b440 	call	46b44 <__multadd>
   43bdc:	d9800d17 	ldw	r6,52(sp)
   43be0:	d8800715 	stw	r2,28(sp)
   43be4:	31bfffc4 	addi	r6,r6,-1
   43be8:	d9800d15 	stw	r6,52(sp)
   43bec:	b001a71e 	bne	r22,zero,4428c <_dtoa_r+0x1590>
   43bf0:	d8800e17 	ldw	r2,56(sp)
   43bf4:	d8800f15 	stw	r2,60(sp)
   43bf8:	003e8006 	br	435fc <_dtoa_r+0x900>
   43bfc:	90800417 	ldw	r2,16(r18)
   43c00:	1085883a 	add	r2,r2,r2
   43c04:	1085883a 	add	r2,r2,r2
   43c08:	1485883a 	add	r2,r2,r18
   43c0c:	11000417 	ldw	r4,16(r2)
   43c10:	0045eb80 	call	45eb8 <__hi0bits>
   43c14:	00c00804 	movi	r3,32
   43c18:	1887c83a 	sub	r3,r3,r2
   43c1c:	003e5a06 	br	43588 <_dtoa_r+0x88c>
   43c20:	d9400717 	ldw	r5,28(sp)
   43c24:	d9801017 	ldw	r6,64(sp)
   43c28:	d9001617 	ldw	r4,88(sp)
   43c2c:	0046c440 	call	46c44 <__pow5mult>
   43c30:	d8800715 	stw	r2,28(sp)
   43c34:	003e4306 	br	43544 <_dtoa_r+0x848>
   43c38:	d9800f17 	ldw	r6,60(sp)
   43c3c:	d8800d17 	ldw	r2,52(sp)
   43c40:	d9800315 	stw	r6,12(sp)
   43c44:	d8800415 	stw	r2,16(sp)
   43c48:	d8c00b17 	ldw	r3,44(sp)
   43c4c:	1805003a 	cmpeq	r2,r3,zero
   43c50:	1000e21e 	bne	r2,zero,43fdc <_dtoa_r+0x12e0>
   43c54:	d9000317 	ldw	r4,12(sp)
   43c58:	0005883a 	mov	r2,zero
   43c5c:	00cff834 	movhi	r3,16352
   43c60:	200c90fa 	slli	r6,r4,3
   43c64:	01100034 	movhi	r4,16384
   43c68:	21004c04 	addi	r4,r4,304
   43c6c:	180b883a 	mov	r5,r3
   43c70:	310d883a 	add	r6,r6,r4
   43c74:	327fff17 	ldw	r9,-4(r6)
   43c78:	323ffe17 	ldw	r8,-8(r6)
   43c7c:	1009883a 	mov	r4,r2
   43c80:	480f883a 	mov	r7,r9
   43c84:	400d883a 	mov	r6,r8
   43c88:	00490380 	call	49038 <__divdf3>
   43c8c:	180b883a 	mov	r5,r3
   43c90:	b00d883a 	mov	r6,r22
   43c94:	b80f883a 	mov	r7,r23
   43c98:	1009883a 	mov	r4,r2
   43c9c:	0048b900 	call	48b90 <__subdf3>
   43ca0:	a80b883a 	mov	r5,r21
   43ca4:	a009883a 	mov	r4,r20
   43ca8:	d8c01915 	stw	r3,100(sp)
   43cac:	d8801815 	stw	r2,96(sp)
   43cb0:	00496300 	call	49630 <__fixdfsi>
   43cb4:	1009883a 	mov	r4,r2
   43cb8:	1027883a 	mov	r19,r2
   43cbc:	00495380 	call	49538 <__floatsidf>
   43cc0:	a80b883a 	mov	r5,r21
   43cc4:	a009883a 	mov	r4,r20
   43cc8:	180f883a 	mov	r7,r3
   43ccc:	100d883a 	mov	r6,r2
   43cd0:	0048b900 	call	48b90 <__subdf3>
   43cd4:	d9801817 	ldw	r6,96(sp)
   43cd8:	1823883a 	mov	r17,r3
   43cdc:	d8801415 	stw	r2,80(sp)
   43ce0:	302d883a 	mov	r22,r6
   43ce4:	d9800517 	ldw	r6,20(sp)
   43ce8:	9cc00c04 	addi	r19,r19,48
   43cec:	dc401515 	stw	r17,84(sp)
   43cf0:	d8c01917 	ldw	r3,100(sp)
   43cf4:	34c00005 	stb	r19,0(r6)
   43cf8:	d8800517 	ldw	r2,20(sp)
   43cfc:	d9401917 	ldw	r5,100(sp)
   43d00:	d9801417 	ldw	r6,80(sp)
   43d04:	b009883a 	mov	r4,r22
   43d08:	880f883a 	mov	r7,r17
   43d0c:	182f883a 	mov	r23,r3
   43d10:	17000044 	addi	fp,r2,1
   43d14:	00493a00 	call	493a0 <__gtdf2>
   43d18:	00804e16 	blt	zero,r2,43e54 <_dtoa_r+0x1158>
   43d1c:	d9801417 	ldw	r6,80(sp)
   43d20:	0005883a 	mov	r2,zero
   43d24:	00cffc34 	movhi	r3,16368
   43d28:	180b883a 	mov	r5,r3
   43d2c:	880f883a 	mov	r7,r17
   43d30:	1009883a 	mov	r4,r2
   43d34:	0048b900 	call	48b90 <__subdf3>
   43d38:	d9401917 	ldw	r5,100(sp)
   43d3c:	180f883a 	mov	r7,r3
   43d40:	b009883a 	mov	r4,r22
   43d44:	100d883a 	mov	r6,r2
   43d48:	00493a00 	call	493a0 <__gtdf2>
   43d4c:	00bda216 	blt	zero,r2,433d8 <_dtoa_r+0x6dc>
   43d50:	d8c00317 	ldw	r3,12(sp)
   43d54:	00800044 	movi	r2,1
   43d58:	10c01216 	blt	r2,r3,43da4 <_dtoa_r+0x10a8>
   43d5c:	003d4506 	br	43274 <_dtoa_r+0x578>
   43d60:	d9801417 	ldw	r6,80(sp)
   43d64:	0005883a 	mov	r2,zero
   43d68:	00cffc34 	movhi	r3,16368
   43d6c:	180b883a 	mov	r5,r3
   43d70:	880f883a 	mov	r7,r17
   43d74:	1009883a 	mov	r4,r2
   43d78:	0048b900 	call	48b90 <__subdf3>
   43d7c:	d9c01b17 	ldw	r7,108(sp)
   43d80:	180b883a 	mov	r5,r3
   43d84:	1009883a 	mov	r4,r2
   43d88:	b00d883a 	mov	r6,r22
   43d8c:	00494b00 	call	494b0 <__ltdf2>
   43d90:	103d9116 	blt	r2,zero,433d8 <_dtoa_r+0x6dc>
   43d94:	d9800517 	ldw	r6,20(sp)
   43d98:	d9000317 	ldw	r4,12(sp)
   43d9c:	3105883a 	add	r2,r6,r4
   43da0:	e0bd3426 	beq	fp,r2,43274 <_dtoa_r+0x578>
   43da4:	04500934 	movhi	r17,16420
   43da8:	0021883a 	mov	r16,zero
   43dac:	b80b883a 	mov	r5,r23
   43db0:	b009883a 	mov	r4,r22
   43db4:	800d883a 	mov	r6,r16
   43db8:	880f883a 	mov	r7,r17
   43dbc:	0048c840 	call	48c84 <__muldf3>
   43dc0:	d9401517 	ldw	r5,84(sp)
   43dc4:	d9001417 	ldw	r4,80(sp)
   43dc8:	880f883a 	mov	r7,r17
   43dcc:	000d883a 	mov	r6,zero
   43dd0:	d8801a15 	stw	r2,104(sp)
   43dd4:	d8c01b15 	stw	r3,108(sp)
   43dd8:	0048c840 	call	48c84 <__muldf3>
   43ddc:	180b883a 	mov	r5,r3
   43de0:	1009883a 	mov	r4,r2
   43de4:	1823883a 	mov	r17,r3
   43de8:	1021883a 	mov	r16,r2
   43dec:	00496300 	call	49630 <__fixdfsi>
   43df0:	1009883a 	mov	r4,r2
   43df4:	102b883a 	mov	r21,r2
   43df8:	00495380 	call	49538 <__floatsidf>
   43dfc:	880b883a 	mov	r5,r17
   43e00:	8009883a 	mov	r4,r16
   43e04:	180f883a 	mov	r7,r3
   43e08:	100d883a 	mov	r6,r2
   43e0c:	0048b900 	call	48b90 <__subdf3>
   43e10:	1021883a 	mov	r16,r2
   43e14:	d9001b17 	ldw	r4,108(sp)
   43e18:	1823883a 	mov	r17,r3
   43e1c:	dc001415 	stw	r16,80(sp)
   43e20:	ad400c04 	addi	r21,r21,48
   43e24:	dc401515 	stw	r17,84(sp)
   43e28:	d8801a17 	ldw	r2,104(sp)
   43e2c:	e5400005 	stb	r21,0(fp)
   43e30:	202f883a 	mov	r23,r4
   43e34:	d9c01b17 	ldw	r7,108(sp)
   43e38:	d9001417 	ldw	r4,80(sp)
   43e3c:	880b883a 	mov	r5,r17
   43e40:	100d883a 	mov	r6,r2
   43e44:	102d883a 	mov	r22,r2
   43e48:	e7000044 	addi	fp,fp,1
   43e4c:	00494b00 	call	494b0 <__ltdf2>
   43e50:	103fc30e 	bge	r2,zero,43d60 <_dtoa_r+0x1064>
   43e54:	d9000417 	ldw	r4,16(sp)
   43e58:	d9000d15 	stw	r4,52(sp)
   43e5c:	003d7106 	br	43424 <_dtoa_r+0x728>
   43e60:	d9801717 	ldw	r6,92(sp)
   43e64:	00800084 	movi	r2,2
   43e68:	11bde60e 	bge	r2,r6,43604 <_dtoa_r+0x908>
   43e6c:	203cfb1e 	bne	r4,zero,4325c <_dtoa_r+0x560>
   43e70:	d9001617 	ldw	r4,88(sp)
   43e74:	900b883a 	mov	r5,r18
   43e78:	01800144 	movi	r6,5
   43e7c:	000f883a 	mov	r7,zero
   43e80:	0046b440 	call	46b44 <__multadd>
   43e84:	d9000717 	ldw	r4,28(sp)
   43e88:	100b883a 	mov	r5,r2
   43e8c:	1025883a 	mov	r18,r2
   43e90:	0045fec0 	call	45fec <__mcmp>
   43e94:	00bcf10e 	bge	zero,r2,4325c <_dtoa_r+0x560>
   43e98:	d8c00d17 	ldw	r3,52(sp)
   43e9c:	d9000517 	ldw	r4,20(sp)
   43ea0:	d8000615 	stw	zero,24(sp)
   43ea4:	18c00044 	addi	r3,r3,1
   43ea8:	d8c00d15 	stw	r3,52(sp)
   43eac:	00800c44 	movi	r2,49
   43eb0:	27000044 	addi	fp,r4,1
   43eb4:	20800005 	stb	r2,0(r4)
   43eb8:	003e8906 	br	438e0 <_dtoa_r+0xbe4>
   43ebc:	d8c00517 	ldw	r3,20(sp)
   43ec0:	003bc206 	br	42dcc <_dtoa_r+0xd0>
   43ec4:	01900034 	movhi	r6,16384
   43ec8:	31807e04 	addi	r6,r6,504
   43ecc:	30c00917 	ldw	r3,36(r6)
   43ed0:	30800817 	ldw	r2,32(r6)
   43ed4:	d9001217 	ldw	r4,72(sp)
   43ed8:	d9401317 	ldw	r5,76(sp)
   43edc:	180f883a 	mov	r7,r3
   43ee0:	100d883a 	mov	r6,r2
   43ee4:	00490380 	call	49038 <__divdf3>
   43ee8:	948003cc 	andi	r18,r18,15
   43eec:	058000c4 	movi	r22,3
   43ef0:	1029883a 	mov	r20,r2
   43ef4:	182b883a 	mov	r21,r3
   43ef8:	003c8906 	br	43120 <_dtoa_r+0x424>
   43efc:	d9001017 	ldw	r4,64(sp)
   43f00:	d9800917 	ldw	r6,36(sp)
   43f04:	0025883a 	mov	r18,zero
   43f08:	1105c83a 	sub	r2,r2,r4
   43f0c:	2089883a 	add	r4,r4,r2
   43f10:	308d883a 	add	r6,r6,r2
   43f14:	d9001015 	stw	r4,64(sp)
   43f18:	d9800915 	stw	r6,36(sp)
   43f1c:	003e3206 	br	437e8 <_dtoa_r+0xaec>
   43f20:	28800044 	addi	r2,r5,1
   43f24:	27000044 	addi	fp,r4,1
   43f28:	20800005 	stb	r2,0(r4)
   43f2c:	003e6c06 	br	438e0 <_dtoa_r+0xbe4>
   43f30:	d8800f17 	ldw	r2,60(sp)
   43f34:	00bce016 	blt	zero,r2,432b8 <_dtoa_r+0x5bc>
   43f38:	d9800f17 	ldw	r6,60(sp)
   43f3c:	303cc51e 	bne	r6,zero,43254 <_dtoa_r+0x558>
   43f40:	0005883a 	mov	r2,zero
   43f44:	00d00534 	movhi	r3,16404
   43f48:	980b883a 	mov	r5,r19
   43f4c:	180f883a 	mov	r7,r3
   43f50:	9009883a 	mov	r4,r18
   43f54:	100d883a 	mov	r6,r2
   43f58:	0048c840 	call	48c84 <__muldf3>
   43f5c:	180b883a 	mov	r5,r3
   43f60:	a80f883a 	mov	r7,r21
   43f64:	1009883a 	mov	r4,r2
   43f68:	a00d883a 	mov	r6,r20
   43f6c:	00494280 	call	49428 <__gedf2>
   43f70:	103cb80e 	bge	r2,zero,43254 <_dtoa_r+0x558>
   43f74:	0027883a 	mov	r19,zero
   43f78:	0025883a 	mov	r18,zero
   43f7c:	003fc606 	br	43e98 <_dtoa_r+0x119c>
   43f80:	99400117 	ldw	r5,4(r19)
   43f84:	d9001617 	ldw	r4,88(sp)
   43f88:	00464100 	call	46410 <_Balloc>
   43f8c:	99800417 	ldw	r6,16(r19)
   43f90:	11000304 	addi	r4,r2,12
   43f94:	99400304 	addi	r5,r19,12
   43f98:	318d883a 	add	r6,r6,r6
   43f9c:	318d883a 	add	r6,r6,r6
   43fa0:	31800204 	addi	r6,r6,8
   43fa4:	1023883a 	mov	r17,r2
   43fa8:	0045c780 	call	45c78 <memcpy>
   43fac:	d9001617 	ldw	r4,88(sp)
   43fb0:	880b883a 	mov	r5,r17
   43fb4:	01800044 	movi	r6,1
   43fb8:	00467d40 	call	467d4 <__lshift>
   43fbc:	100b883a 	mov	r5,r2
   43fc0:	003d9c06 	br	43634 <_dtoa_r+0x938>
   43fc4:	00800e44 	movi	r2,57
   43fc8:	b8807026 	beq	r23,r2,4418c <_dtoa_r+0x1490>
   43fcc:	b8800044 	addi	r2,r23,1
   43fd0:	b7000044 	addi	fp,r22,1
   43fd4:	b0800005 	stb	r2,0(r22)
   43fd8:	003e4106 	br	438e0 <_dtoa_r+0xbe4>
   43fdc:	d8800317 	ldw	r2,12(sp)
   43fe0:	01900034 	movhi	r6,16384
   43fe4:	31804c04 	addi	r6,r6,304
   43fe8:	b009883a 	mov	r4,r22
   43fec:	100e90fa 	slli	r7,r2,3
   43ff0:	b80b883a 	mov	r5,r23
   43ff4:	398f883a 	add	r7,r7,r6
   43ff8:	38bffe17 	ldw	r2,-8(r7)
   43ffc:	d9800517 	ldw	r6,20(sp)
   44000:	38ffff17 	ldw	r3,-4(r7)
   44004:	37000044 	addi	fp,r6,1
   44008:	180f883a 	mov	r7,r3
   4400c:	100d883a 	mov	r6,r2
   44010:	0048c840 	call	48c84 <__muldf3>
   44014:	a80b883a 	mov	r5,r21
   44018:	a009883a 	mov	r4,r20
   4401c:	182f883a 	mov	r23,r3
   44020:	102d883a 	mov	r22,r2
   44024:	00496300 	call	49630 <__fixdfsi>
   44028:	1009883a 	mov	r4,r2
   4402c:	1027883a 	mov	r19,r2
   44030:	00495380 	call	49538 <__floatsidf>
   44034:	a80b883a 	mov	r5,r21
   44038:	a009883a 	mov	r4,r20
   4403c:	180f883a 	mov	r7,r3
   44040:	100d883a 	mov	r6,r2
   44044:	0048b900 	call	48b90 <__subdf3>
   44048:	180b883a 	mov	r5,r3
   4404c:	d8c00517 	ldw	r3,20(sp)
   44050:	9cc00c04 	addi	r19,r19,48
   44054:	1009883a 	mov	r4,r2
   44058:	1cc00005 	stb	r19,0(r3)
   4405c:	2021883a 	mov	r16,r4
   44060:	d9000317 	ldw	r4,12(sp)
   44064:	00800044 	movi	r2,1
   44068:	2823883a 	mov	r17,r5
   4406c:	20802226 	beq	r4,r2,440f8 <_dtoa_r+0x13fc>
   44070:	1029883a 	mov	r20,r2
   44074:	0005883a 	mov	r2,zero
   44078:	00d00934 	movhi	r3,16420
   4407c:	180f883a 	mov	r7,r3
   44080:	100d883a 	mov	r6,r2
   44084:	880b883a 	mov	r5,r17
   44088:	8009883a 	mov	r4,r16
   4408c:	0048c840 	call	48c84 <__muldf3>
   44090:	180b883a 	mov	r5,r3
   44094:	1009883a 	mov	r4,r2
   44098:	1823883a 	mov	r17,r3
   4409c:	1021883a 	mov	r16,r2
   440a0:	00496300 	call	49630 <__fixdfsi>
   440a4:	1009883a 	mov	r4,r2
   440a8:	102b883a 	mov	r21,r2
   440ac:	00495380 	call	49538 <__floatsidf>
   440b0:	880b883a 	mov	r5,r17
   440b4:	8009883a 	mov	r4,r16
   440b8:	180f883a 	mov	r7,r3
   440bc:	100d883a 	mov	r6,r2
   440c0:	0048b900 	call	48b90 <__subdf3>
   440c4:	180b883a 	mov	r5,r3
   440c8:	d8c00517 	ldw	r3,20(sp)
   440cc:	1009883a 	mov	r4,r2
   440d0:	ad400c04 	addi	r21,r21,48
   440d4:	1d05883a 	add	r2,r3,r20
   440d8:	15400005 	stb	r21,0(r2)
   440dc:	2021883a 	mov	r16,r4
   440e0:	d9000317 	ldw	r4,12(sp)
   440e4:	a5000044 	addi	r20,r20,1
   440e8:	2823883a 	mov	r17,r5
   440ec:	a13fe11e 	bne	r20,r4,44074 <_dtoa_r+0x1378>
   440f0:	e505883a 	add	r2,fp,r20
   440f4:	173fffc4 	addi	fp,r2,-1
   440f8:	0025883a 	mov	r18,zero
   440fc:	04cff834 	movhi	r19,16352
   44100:	b009883a 	mov	r4,r22
   44104:	b80b883a 	mov	r5,r23
   44108:	900d883a 	mov	r6,r18
   4410c:	980f883a 	mov	r7,r19
   44110:	0048c100 	call	48c10 <__adddf3>
   44114:	180b883a 	mov	r5,r3
   44118:	1009883a 	mov	r4,r2
   4411c:	800d883a 	mov	r6,r16
   44120:	880f883a 	mov	r7,r17
   44124:	00494b00 	call	494b0 <__ltdf2>
   44128:	103cab16 	blt	r2,zero,433d8 <_dtoa_r+0x6dc>
   4412c:	0009883a 	mov	r4,zero
   44130:	980b883a 	mov	r5,r19
   44134:	b80f883a 	mov	r7,r23
   44138:	b00d883a 	mov	r6,r22
   4413c:	0048b900 	call	48b90 <__subdf3>
   44140:	180b883a 	mov	r5,r3
   44144:	880f883a 	mov	r7,r17
   44148:	1009883a 	mov	r4,r2
   4414c:	800d883a 	mov	r6,r16
   44150:	00493a00 	call	493a0 <__gtdf2>
   44154:	00bc470e 	bge	zero,r2,43274 <_dtoa_r+0x578>
   44158:	00c00c04 	movi	r3,48
   4415c:	e73fffc4 	addi	fp,fp,-1
   44160:	e0800007 	ldb	r2,0(fp)
   44164:	10fffd26 	beq	r2,r3,4415c <_dtoa_r+0x1460>
   44168:	d9800417 	ldw	r6,16(sp)
   4416c:	e7000044 	addi	fp,fp,1
   44170:	d9800d15 	stw	r6,52(sp)
   44174:	003cab06 	br	43424 <_dtoa_r+0x728>
   44178:	d8c00f17 	ldw	r3,60(sp)
   4417c:	d9001117 	ldw	r4,68(sp)
   44180:	20e1c83a 	sub	r16,r4,r3
   44184:	0007883a 	mov	r3,zero
   44188:	003d9b06 	br	437f8 <_dtoa_r+0xafc>
   4418c:	00800e44 	movi	r2,57
   44190:	b0800005 	stb	r2,0(r22)
   44194:	b5800044 	addi	r22,r22,1
   44198:	003dc106 	br	438a0 <_dtoa_r+0xba4>
   4419c:	05800084 	movi	r22,2
   441a0:	003bf706 	br	43180 <_dtoa_r+0x484>
   441a4:	d9000f17 	ldw	r4,60(sp)
   441a8:	013c000e 	bge	zero,r4,431ac <_dtoa_r+0x4b0>
   441ac:	d9800e17 	ldw	r6,56(sp)
   441b0:	01bc300e 	bge	zero,r6,43274 <_dtoa_r+0x578>
   441b4:	0005883a 	mov	r2,zero
   441b8:	00d00934 	movhi	r3,16420
   441bc:	a80b883a 	mov	r5,r21
   441c0:	180f883a 	mov	r7,r3
   441c4:	a009883a 	mov	r4,r20
   441c8:	100d883a 	mov	r6,r2
   441cc:	0048c840 	call	48c84 <__muldf3>
   441d0:	b1000044 	addi	r4,r22,1
   441d4:	1021883a 	mov	r16,r2
   441d8:	1823883a 	mov	r17,r3
   441dc:	00495380 	call	49538 <__floatsidf>
   441e0:	880b883a 	mov	r5,r17
   441e4:	8009883a 	mov	r4,r16
   441e8:	180f883a 	mov	r7,r3
   441ec:	100d883a 	mov	r6,r2
   441f0:	0048c840 	call	48c84 <__muldf3>
   441f4:	0011883a 	mov	r8,zero
   441f8:	02500734 	movhi	r9,16412
   441fc:	180b883a 	mov	r5,r3
   44200:	480f883a 	mov	r7,r9
   44204:	1009883a 	mov	r4,r2
   44208:	400d883a 	mov	r6,r8
   4420c:	0048c100 	call	48c10 <__adddf3>
   44210:	102d883a 	mov	r22,r2
   44214:	00bf3034 	movhi	r2,64704
   44218:	10ef883a 	add	r23,r2,r3
   4421c:	d8800d17 	ldw	r2,52(sp)
   44220:	d8c00e17 	ldw	r3,56(sp)
   44224:	8029883a 	mov	r20,r16
   44228:	10bfffc4 	addi	r2,r2,-1
   4422c:	882b883a 	mov	r21,r17
   44230:	d8800415 	stw	r2,16(sp)
   44234:	d8c00315 	stw	r3,12(sp)
   44238:	003e8306 	br	43c48 <_dtoa_r+0xf4c>
   4423c:	d8800117 	ldw	r2,4(sp)
   44240:	dc001117 	ldw	r16,68(sp)
   44244:	dc801017 	ldw	r18,64(sp)
   44248:	00c00d84 	movi	r3,54
   4424c:	1887c83a 	sub	r3,r3,r2
   44250:	003d6906 	br	437f8 <_dtoa_r+0xafc>
   44254:	01800044 	movi	r6,1
   44258:	3021883a 	mov	r16,r6
   4425c:	d9800f15 	stw	r6,60(sp)
   44260:	d9802615 	stw	r6,152(sp)
   44264:	d9800e15 	stw	r6,56(sp)
   44268:	003b9306 	br	430b8 <_dtoa_r+0x3bc>
   4426c:	b021883a 	mov	r16,r22
   44270:	dd800f15 	stw	r22,60(sp)
   44274:	003b9006 	br	430b8 <_dtoa_r+0x3bc>
   44278:	103e221e 	bne	r2,zero,43b04 <_dtoa_r+0xe08>
   4427c:	b880004c 	andi	r2,r23,1
   44280:	1005003a 	cmpeq	r2,r2,zero
   44284:	103e1f1e 	bne	r2,zero,43b04 <_dtoa_r+0xe08>
   44288:	003e1b06 	br	43af8 <_dtoa_r+0xdfc>
   4428c:	d9001617 	ldw	r4,88(sp)
   44290:	980b883a 	mov	r5,r19
   44294:	01800284 	movi	r6,10
   44298:	000f883a 	mov	r7,zero
   4429c:	0046b440 	call	46b44 <__multadd>
   442a0:	d8c00e17 	ldw	r3,56(sp)
   442a4:	1027883a 	mov	r19,r2
   442a8:	d8c00f15 	stw	r3,60(sp)
   442ac:	003cd306 	br	435fc <_dtoa_r+0x900>

000442b0 <_fflush_r>:
   442b0:	defffb04 	addi	sp,sp,-20
   442b4:	dcc00315 	stw	r19,12(sp)
   442b8:	dc800215 	stw	r18,8(sp)
   442bc:	dfc00415 	stw	ra,16(sp)
   442c0:	dc400115 	stw	r17,4(sp)
   442c4:	dc000015 	stw	r16,0(sp)
   442c8:	2027883a 	mov	r19,r4
   442cc:	2825883a 	mov	r18,r5
   442d0:	20000226 	beq	r4,zero,442dc <_fflush_r+0x2c>
   442d4:	20800e17 	ldw	r2,56(r4)
   442d8:	10005626 	beq	r2,zero,44434 <_fflush_r+0x184>
   442dc:	9100030b 	ldhu	r4,12(r18)
   442e0:	20ffffcc 	andi	r3,r4,65535
   442e4:	18e0001c 	xori	r3,r3,32768
   442e8:	18e00004 	addi	r3,r3,-32768
   442ec:	1880020c 	andi	r2,r3,8
   442f0:	1000261e 	bne	r2,zero,4438c <_fflush_r+0xdc>
   442f4:	90c00117 	ldw	r3,4(r18)
   442f8:	20820014 	ori	r2,r4,2048
   442fc:	9080030d 	sth	r2,12(r18)
   44300:	1009883a 	mov	r4,r2
   44304:	00c0400e 	bge	zero,r3,44408 <_fflush_r+0x158>
   44308:	92000a17 	ldw	r8,40(r18)
   4430c:	40004026 	beq	r8,zero,44410 <_fflush_r+0x160>
   44310:	2084000c 	andi	r2,r4,4096
   44314:	10005326 	beq	r2,zero,44464 <_fflush_r+0x1b4>
   44318:	94001417 	ldw	r16,80(r18)
   4431c:	9080030b 	ldhu	r2,12(r18)
   44320:	1080010c 	andi	r2,r2,4
   44324:	1000481e 	bne	r2,zero,44448 <_fflush_r+0x198>
   44328:	91400717 	ldw	r5,28(r18)
   4432c:	9809883a 	mov	r4,r19
   44330:	800d883a 	mov	r6,r16
   44334:	000f883a 	mov	r7,zero
   44338:	403ee83a 	callr	r8
   4433c:	8080261e 	bne	r16,r2,443d8 <_fflush_r+0x128>
   44340:	9080030b 	ldhu	r2,12(r18)
   44344:	91000417 	ldw	r4,16(r18)
   44348:	90000115 	stw	zero,4(r18)
   4434c:	10bdffcc 	andi	r2,r2,63487
   44350:	10ffffcc 	andi	r3,r2,65535
   44354:	18c4000c 	andi	r3,r3,4096
   44358:	9080030d 	sth	r2,12(r18)
   4435c:	91000015 	stw	r4,0(r18)
   44360:	18002b26 	beq	r3,zero,44410 <_fflush_r+0x160>
   44364:	0007883a 	mov	r3,zero
   44368:	1805883a 	mov	r2,r3
   4436c:	94001415 	stw	r16,80(r18)
   44370:	dfc00417 	ldw	ra,16(sp)
   44374:	dcc00317 	ldw	r19,12(sp)
   44378:	dc800217 	ldw	r18,8(sp)
   4437c:	dc400117 	ldw	r17,4(sp)
   44380:	dc000017 	ldw	r16,0(sp)
   44384:	dec00504 	addi	sp,sp,20
   44388:	f800283a 	ret
   4438c:	94400417 	ldw	r17,16(r18)
   44390:	88001f26 	beq	r17,zero,44410 <_fflush_r+0x160>
   44394:	90800017 	ldw	r2,0(r18)
   44398:	18c000cc 	andi	r3,r3,3
   4439c:	94400015 	stw	r17,0(r18)
   443a0:	1461c83a 	sub	r16,r2,r17
   443a4:	18002526 	beq	r3,zero,4443c <_fflush_r+0x18c>
   443a8:	0005883a 	mov	r2,zero
   443ac:	90800215 	stw	r2,8(r18)
   443b0:	0400170e 	bge	zero,r16,44410 <_fflush_r+0x160>
   443b4:	90c00917 	ldw	r3,36(r18)
   443b8:	91400717 	ldw	r5,28(r18)
   443bc:	880d883a 	mov	r6,r17
   443c0:	800f883a 	mov	r7,r16
   443c4:	9809883a 	mov	r4,r19
   443c8:	183ee83a 	callr	r3
   443cc:	88a3883a 	add	r17,r17,r2
   443d0:	80a1c83a 	sub	r16,r16,r2
   443d4:	00bff616 	blt	zero,r2,443b0 <_fflush_r+0x100>
   443d8:	9080030b 	ldhu	r2,12(r18)
   443dc:	00ffffc4 	movi	r3,-1
   443e0:	10801014 	ori	r2,r2,64
   443e4:	9080030d 	sth	r2,12(r18)
   443e8:	1805883a 	mov	r2,r3
   443ec:	dfc00417 	ldw	ra,16(sp)
   443f0:	dcc00317 	ldw	r19,12(sp)
   443f4:	dc800217 	ldw	r18,8(sp)
   443f8:	dc400117 	ldw	r17,4(sp)
   443fc:	dc000017 	ldw	r16,0(sp)
   44400:	dec00504 	addi	sp,sp,20
   44404:	f800283a 	ret
   44408:	90800f17 	ldw	r2,60(r18)
   4440c:	00bfbe16 	blt	zero,r2,44308 <_fflush_r+0x58>
   44410:	0007883a 	mov	r3,zero
   44414:	1805883a 	mov	r2,r3
   44418:	dfc00417 	ldw	ra,16(sp)
   4441c:	dcc00317 	ldw	r19,12(sp)
   44420:	dc800217 	ldw	r18,8(sp)
   44424:	dc400117 	ldw	r17,4(sp)
   44428:	dc000017 	ldw	r16,0(sp)
   4442c:	dec00504 	addi	sp,sp,20
   44430:	f800283a 	ret
   44434:	00445480 	call	44548 <__sinit>
   44438:	003fa806 	br	442dc <_fflush_r+0x2c>
   4443c:	90800517 	ldw	r2,20(r18)
   44440:	90800215 	stw	r2,8(r18)
   44444:	003fda06 	br	443b0 <_fflush_r+0x100>
   44448:	90800117 	ldw	r2,4(r18)
   4444c:	90c00c17 	ldw	r3,48(r18)
   44450:	80a1c83a 	sub	r16,r16,r2
   44454:	183fb426 	beq	r3,zero,44328 <_fflush_r+0x78>
   44458:	90800f17 	ldw	r2,60(r18)
   4445c:	80a1c83a 	sub	r16,r16,r2
   44460:	003fb106 	br	44328 <_fflush_r+0x78>
   44464:	91400717 	ldw	r5,28(r18)
   44468:	9809883a 	mov	r4,r19
   4446c:	000d883a 	mov	r6,zero
   44470:	01c00044 	movi	r7,1
   44474:	403ee83a 	callr	r8
   44478:	1021883a 	mov	r16,r2
   4447c:	00bfffc4 	movi	r2,-1
   44480:	80800226 	beq	r16,r2,4448c <_fflush_r+0x1dc>
   44484:	92000a17 	ldw	r8,40(r18)
   44488:	003fa406 	br	4431c <_fflush_r+0x6c>
   4448c:	98c00017 	ldw	r3,0(r19)
   44490:	00800744 	movi	r2,29
   44494:	18bfde26 	beq	r3,r2,44410 <_fflush_r+0x160>
   44498:	9080030b 	ldhu	r2,12(r18)
   4449c:	8007883a 	mov	r3,r16
   444a0:	10801014 	ori	r2,r2,64
   444a4:	9080030d 	sth	r2,12(r18)
   444a8:	003fcf06 	br	443e8 <_fflush_r+0x138>

000444ac <fflush>:
   444ac:	01400134 	movhi	r5,4
   444b0:	2950ac04 	addi	r5,r5,17072
   444b4:	2007883a 	mov	r3,r4
   444b8:	20000526 	beq	r4,zero,444d0 <fflush+0x24>
   444bc:	00900034 	movhi	r2,16384
   444c0:	10876c04 	addi	r2,r2,7600
   444c4:	11000017 	ldw	r4,0(r2)
   444c8:	180b883a 	mov	r5,r3
   444cc:	00442b01 	jmpi	442b0 <_fflush_r>
   444d0:	00900034 	movhi	r2,16384
   444d4:	10876d04 	addi	r2,r2,7604
   444d8:	11000017 	ldw	r4,0(r2)
   444dc:	004507c1 	jmpi	4507c <_fwalk_reent>

000444e0 <std>:
   444e0:	00800134 	movhi	r2,4
   444e4:	109d5604 	addi	r2,r2,30040
   444e8:	20800b15 	stw	r2,44(r4)
   444ec:	00800134 	movhi	r2,4
   444f0:	109d9104 	addi	r2,r2,30276
   444f4:	20800815 	stw	r2,32(r4)
   444f8:	00c00134 	movhi	r3,4
   444fc:	18dd7204 	addi	r3,r3,30152
   44500:	00800134 	movhi	r2,4
   44504:	109d5804 	addi	r2,r2,30048
   44508:	2140030d 	sth	r5,12(r4)
   4450c:	2180038d 	sth	r6,14(r4)
   44510:	20c00915 	stw	r3,36(r4)
   44514:	20800a15 	stw	r2,40(r4)
   44518:	20000015 	stw	zero,0(r4)
   4451c:	20000115 	stw	zero,4(r4)
   44520:	20000215 	stw	zero,8(r4)
   44524:	20000415 	stw	zero,16(r4)
   44528:	20000515 	stw	zero,20(r4)
   4452c:	20000615 	stw	zero,24(r4)
   44530:	21000715 	stw	r4,28(r4)
   44534:	f800283a 	ret

00044538 <__sfp_lock_acquire>:
   44538:	f800283a 	ret

0004453c <__sfp_lock_release>:
   4453c:	f800283a 	ret

00044540 <__sinit_lock_acquire>:
   44540:	f800283a 	ret

00044544 <__sinit_lock_release>:
   44544:	f800283a 	ret

00044548 <__sinit>:
   44548:	20800e17 	ldw	r2,56(r4)
   4454c:	defffd04 	addi	sp,sp,-12
   44550:	dc400115 	stw	r17,4(sp)
   44554:	dc000015 	stw	r16,0(sp)
   44558:	dfc00215 	stw	ra,8(sp)
   4455c:	04400044 	movi	r17,1
   44560:	01400104 	movi	r5,4
   44564:	000d883a 	mov	r6,zero
   44568:	2021883a 	mov	r16,r4
   4456c:	2200bb04 	addi	r8,r4,748
   44570:	200f883a 	mov	r7,r4
   44574:	10000526 	beq	r2,zero,4458c <__sinit+0x44>
   44578:	dfc00217 	ldw	ra,8(sp)
   4457c:	dc400117 	ldw	r17,4(sp)
   44580:	dc000017 	ldw	r16,0(sp)
   44584:	dec00304 	addi	sp,sp,12
   44588:	f800283a 	ret
   4458c:	21000117 	ldw	r4,4(r4)
   44590:	00800134 	movhi	r2,4
   44594:	10918b04 	addi	r2,r2,17964
   44598:	00c000c4 	movi	r3,3
   4459c:	80800f15 	stw	r2,60(r16)
   445a0:	80c0b915 	stw	r3,740(r16)
   445a4:	8200ba15 	stw	r8,744(r16)
   445a8:	84400e15 	stw	r17,56(r16)
   445ac:	8000b815 	stw	zero,736(r16)
   445b0:	00444e00 	call	444e0 <std>
   445b4:	81000217 	ldw	r4,8(r16)
   445b8:	880d883a 	mov	r6,r17
   445bc:	800f883a 	mov	r7,r16
   445c0:	01400284 	movi	r5,10
   445c4:	00444e00 	call	444e0 <std>
   445c8:	81000317 	ldw	r4,12(r16)
   445cc:	800f883a 	mov	r7,r16
   445d0:	01400484 	movi	r5,18
   445d4:	01800084 	movi	r6,2
   445d8:	dfc00217 	ldw	ra,8(sp)
   445dc:	dc400117 	ldw	r17,4(sp)
   445e0:	dc000017 	ldw	r16,0(sp)
   445e4:	dec00304 	addi	sp,sp,12
   445e8:	00444e01 	jmpi	444e0 <std>

000445ec <__fp_lock>:
   445ec:	0005883a 	mov	r2,zero
   445f0:	f800283a 	ret

000445f4 <__fp_unlock>:
   445f4:	0005883a 	mov	r2,zero
   445f8:	f800283a 	ret

000445fc <__fp_unlock_all>:
   445fc:	00900034 	movhi	r2,16384
   44600:	10876c04 	addi	r2,r2,7600
   44604:	11000017 	ldw	r4,0(r2)
   44608:	01400134 	movhi	r5,4
   4460c:	29517d04 	addi	r5,r5,17908
   44610:	00451441 	jmpi	45144 <_fwalk>

00044614 <__fp_lock_all>:
   44614:	00900034 	movhi	r2,16384
   44618:	10876c04 	addi	r2,r2,7600
   4461c:	11000017 	ldw	r4,0(r2)
   44620:	01400134 	movhi	r5,4
   44624:	29517b04 	addi	r5,r5,17900
   44628:	00451441 	jmpi	45144 <_fwalk>

0004462c <_cleanup_r>:
   4462c:	01400134 	movhi	r5,4
   44630:	295e8304 	addi	r5,r5,31244
   44634:	00451441 	jmpi	45144 <_fwalk>

00044638 <_cleanup>:
   44638:	00900034 	movhi	r2,16384
   4463c:	10876d04 	addi	r2,r2,7604
   44640:	11000017 	ldw	r4,0(r2)
   44644:	004462c1 	jmpi	4462c <_cleanup_r>

00044648 <__sfmoreglue>:
   44648:	defffc04 	addi	sp,sp,-16
   4464c:	dc400115 	stw	r17,4(sp)
   44650:	2c401724 	muli	r17,r5,92
   44654:	dc800215 	stw	r18,8(sp)
   44658:	2825883a 	mov	r18,r5
   4465c:	89400304 	addi	r5,r17,12
   44660:	dc000015 	stw	r16,0(sp)
   44664:	dfc00315 	stw	ra,12(sp)
   44668:	00454540 	call	45454 <_malloc_r>
   4466c:	0021883a 	mov	r16,zero
   44670:	880d883a 	mov	r6,r17
   44674:	000b883a 	mov	r5,zero
   44678:	10000626 	beq	r2,zero,44694 <__sfmoreglue+0x4c>
   4467c:	11000304 	addi	r4,r2,12
   44680:	14800115 	stw	r18,4(r2)
   44684:	10000015 	stw	zero,0(r2)
   44688:	11000215 	stw	r4,8(r2)
   4468c:	1021883a 	mov	r16,r2
   44690:	0045df80 	call	45df8 <memset>
   44694:	8005883a 	mov	r2,r16
   44698:	dfc00317 	ldw	ra,12(sp)
   4469c:	dc800217 	ldw	r18,8(sp)
   446a0:	dc400117 	ldw	r17,4(sp)
   446a4:	dc000017 	ldw	r16,0(sp)
   446a8:	dec00404 	addi	sp,sp,16
   446ac:	f800283a 	ret

000446b0 <__sfp>:
   446b0:	defffd04 	addi	sp,sp,-12
   446b4:	00900034 	movhi	r2,16384
   446b8:	10876d04 	addi	r2,r2,7604
   446bc:	dc000015 	stw	r16,0(sp)
   446c0:	14000017 	ldw	r16,0(r2)
   446c4:	dc400115 	stw	r17,4(sp)
   446c8:	dfc00215 	stw	ra,8(sp)
   446cc:	80800e17 	ldw	r2,56(r16)
   446d0:	2023883a 	mov	r17,r4
   446d4:	10002626 	beq	r2,zero,44770 <__sfp+0xc0>
   446d8:	8400b804 	addi	r16,r16,736
   446dc:	80800117 	ldw	r2,4(r16)
   446e0:	81000217 	ldw	r4,8(r16)
   446e4:	10ffffc4 	addi	r3,r2,-1
   446e8:	18000916 	blt	r3,zero,44710 <__sfp+0x60>
   446ec:	2080030f 	ldh	r2,12(r4)
   446f0:	10000b26 	beq	r2,zero,44720 <__sfp+0x70>
   446f4:	017fffc4 	movi	r5,-1
   446f8:	00000206 	br	44704 <__sfp+0x54>
   446fc:	2080030f 	ldh	r2,12(r4)
   44700:	10000726 	beq	r2,zero,44720 <__sfp+0x70>
   44704:	18ffffc4 	addi	r3,r3,-1
   44708:	21001704 	addi	r4,r4,92
   4470c:	197ffb1e 	bne	r3,r5,446fc <__sfp+0x4c>
   44710:	80800017 	ldw	r2,0(r16)
   44714:	10001926 	beq	r2,zero,4477c <__sfp+0xcc>
   44718:	1021883a 	mov	r16,r2
   4471c:	003fef06 	br	446dc <__sfp+0x2c>
   44720:	00bfffc4 	movi	r2,-1
   44724:	00c00044 	movi	r3,1
   44728:	2080038d 	sth	r2,14(r4)
   4472c:	20c0030d 	sth	r3,12(r4)
   44730:	20000015 	stw	zero,0(r4)
   44734:	20000215 	stw	zero,8(r4)
   44738:	20000115 	stw	zero,4(r4)
   4473c:	20000415 	stw	zero,16(r4)
   44740:	20000515 	stw	zero,20(r4)
   44744:	20000615 	stw	zero,24(r4)
   44748:	20000c15 	stw	zero,48(r4)
   4474c:	20000d15 	stw	zero,52(r4)
   44750:	20001115 	stw	zero,68(r4)
   44754:	20001215 	stw	zero,72(r4)
   44758:	2005883a 	mov	r2,r4
   4475c:	dfc00217 	ldw	ra,8(sp)
   44760:	dc400117 	ldw	r17,4(sp)
   44764:	dc000017 	ldw	r16,0(sp)
   44768:	dec00304 	addi	sp,sp,12
   4476c:	f800283a 	ret
   44770:	8009883a 	mov	r4,r16
   44774:	00445480 	call	44548 <__sinit>
   44778:	003fd706 	br	446d8 <__sfp+0x28>
   4477c:	8809883a 	mov	r4,r17
   44780:	01400104 	movi	r5,4
   44784:	00446480 	call	44648 <__sfmoreglue>
   44788:	80800015 	stw	r2,0(r16)
   4478c:	103fe21e 	bne	r2,zero,44718 <__sfp+0x68>
   44790:	00800304 	movi	r2,12
   44794:	0009883a 	mov	r4,zero
   44798:	88800015 	stw	r2,0(r17)
   4479c:	003fee06 	br	44758 <__sfp+0xa8>

000447a0 <_malloc_trim_r>:
   447a0:	defffb04 	addi	sp,sp,-20
   447a4:	dcc00315 	stw	r19,12(sp)
   447a8:	04d00034 	movhi	r19,16384
   447ac:	9cc1e804 	addi	r19,r19,1952
   447b0:	dc800215 	stw	r18,8(sp)
   447b4:	dc400115 	stw	r17,4(sp)
   447b8:	dc000015 	stw	r16,0(sp)
   447bc:	2823883a 	mov	r17,r5
   447c0:	2025883a 	mov	r18,r4
   447c4:	dfc00415 	stw	ra,16(sp)
   447c8:	004a6000 	call	4a600 <__malloc_lock>
   447cc:	98800217 	ldw	r2,8(r19)
   447d0:	9009883a 	mov	r4,r18
   447d4:	000b883a 	mov	r5,zero
   447d8:	10c00117 	ldw	r3,4(r2)
   447dc:	00bfff04 	movi	r2,-4
   447e0:	18a0703a 	and	r16,r3,r2
   447e4:	8463c83a 	sub	r17,r16,r17
   447e8:	8c43fbc4 	addi	r17,r17,4079
   447ec:	8822d33a 	srli	r17,r17,12
   447f0:	0083ffc4 	movi	r2,4095
   447f4:	8c7fffc4 	addi	r17,r17,-1
   447f8:	8822933a 	slli	r17,r17,12
   447fc:	1440060e 	bge	r2,r17,44818 <_malloc_trim_r+0x78>
   44800:	00474e80 	call	474e8 <_sbrk_r>
   44804:	98c00217 	ldw	r3,8(r19)
   44808:	9009883a 	mov	r4,r18
   4480c:	044bc83a 	sub	r5,zero,r17
   44810:	80c7883a 	add	r3,r16,r3
   44814:	10c00926 	beq	r2,r3,4483c <_malloc_trim_r+0x9c>
   44818:	004a6200 	call	4a620 <__malloc_unlock>
   4481c:	0005883a 	mov	r2,zero
   44820:	dfc00417 	ldw	ra,16(sp)
   44824:	dcc00317 	ldw	r19,12(sp)
   44828:	dc800217 	ldw	r18,8(sp)
   4482c:	dc400117 	ldw	r17,4(sp)
   44830:	dc000017 	ldw	r16,0(sp)
   44834:	dec00504 	addi	sp,sp,20
   44838:	f800283a 	ret
   4483c:	9009883a 	mov	r4,r18
   44840:	00474e80 	call	474e8 <_sbrk_r>
   44844:	844dc83a 	sub	r6,r16,r17
   44848:	00ffffc4 	movi	r3,-1
   4484c:	9009883a 	mov	r4,r18
   44850:	000b883a 	mov	r5,zero
   44854:	01d00034 	movhi	r7,16384
   44858:	39c78904 	addi	r7,r7,7716
   4485c:	31800054 	ori	r6,r6,1
   44860:	10c00926 	beq	r2,r3,44888 <_malloc_trim_r+0xe8>
   44864:	38800017 	ldw	r2,0(r7)
   44868:	98c00217 	ldw	r3,8(r19)
   4486c:	9009883a 	mov	r4,r18
   44870:	1445c83a 	sub	r2,r2,r17
   44874:	38800015 	stw	r2,0(r7)
   44878:	19800115 	stw	r6,4(r3)
   4487c:	004a6200 	call	4a620 <__malloc_unlock>
   44880:	00800044 	movi	r2,1
   44884:	003fe606 	br	44820 <_malloc_trim_r+0x80>
   44888:	00474e80 	call	474e8 <_sbrk_r>
   4488c:	99800217 	ldw	r6,8(r19)
   44890:	100f883a 	mov	r7,r2
   44894:	9009883a 	mov	r4,r18
   44898:	1187c83a 	sub	r3,r2,r6
   4489c:	008003c4 	movi	r2,15
   448a0:	19400054 	ori	r5,r3,1
   448a4:	10ffdc0e 	bge	r2,r3,44818 <_malloc_trim_r+0x78>
   448a8:	00900034 	movhi	r2,16384
   448ac:	10877104 	addi	r2,r2,7620
   448b0:	10c00017 	ldw	r3,0(r2)
   448b4:	00900034 	movhi	r2,16384
   448b8:	10878904 	addi	r2,r2,7716
   448bc:	31400115 	stw	r5,4(r6)
   448c0:	38c7c83a 	sub	r3,r7,r3
   448c4:	10c00015 	stw	r3,0(r2)
   448c8:	003fd306 	br	44818 <_malloc_trim_r+0x78>

000448cc <_free_r>:
   448cc:	defffd04 	addi	sp,sp,-12
   448d0:	dc400115 	stw	r17,4(sp)
   448d4:	dc000015 	stw	r16,0(sp)
   448d8:	dfc00215 	stw	ra,8(sp)
   448dc:	2821883a 	mov	r16,r5
   448e0:	2023883a 	mov	r17,r4
   448e4:	28005a26 	beq	r5,zero,44a50 <_free_r+0x184>
   448e8:	004a6000 	call	4a600 <__malloc_lock>
   448ec:	823ffe04 	addi	r8,r16,-8
   448f0:	41400117 	ldw	r5,4(r8)
   448f4:	00bfff84 	movi	r2,-2
   448f8:	02900034 	movhi	r10,16384
   448fc:	5281e804 	addi	r10,r10,1952
   44900:	288e703a 	and	r7,r5,r2
   44904:	41cd883a 	add	r6,r8,r7
   44908:	30c00117 	ldw	r3,4(r6)
   4490c:	51000217 	ldw	r4,8(r10)
   44910:	00bfff04 	movi	r2,-4
   44914:	1892703a 	and	r9,r3,r2
   44918:	5017883a 	mov	r11,r10
   4491c:	31006726 	beq	r6,r4,44abc <_free_r+0x1f0>
   44920:	2880004c 	andi	r2,r5,1
   44924:	1005003a 	cmpeq	r2,r2,zero
   44928:	32400115 	stw	r9,4(r6)
   4492c:	10001a1e 	bne	r2,zero,44998 <_free_r+0xcc>
   44930:	000b883a 	mov	r5,zero
   44934:	3247883a 	add	r3,r6,r9
   44938:	18800117 	ldw	r2,4(r3)
   4493c:	1080004c 	andi	r2,r2,1
   44940:	1000231e 	bne	r2,zero,449d0 <_free_r+0x104>
   44944:	280ac03a 	cmpne	r5,r5,zero
   44948:	3a4f883a 	add	r7,r7,r9
   4494c:	2800451e 	bne	r5,zero,44a64 <_free_r+0x198>
   44950:	31000217 	ldw	r4,8(r6)
   44954:	00900034 	movhi	r2,16384
   44958:	1081ea04 	addi	r2,r2,1960
   4495c:	20807b26 	beq	r4,r2,44b4c <_free_r+0x280>
   44960:	30800317 	ldw	r2,12(r6)
   44964:	3a07883a 	add	r3,r7,r8
   44968:	19c00015 	stw	r7,0(r3)
   4496c:	11000215 	stw	r4,8(r2)
   44970:	20800315 	stw	r2,12(r4)
   44974:	38800054 	ori	r2,r7,1
   44978:	40800115 	stw	r2,4(r8)
   4497c:	28001a26 	beq	r5,zero,449e8 <_free_r+0x11c>
   44980:	8809883a 	mov	r4,r17
   44984:	dfc00217 	ldw	ra,8(sp)
   44988:	dc400117 	ldw	r17,4(sp)
   4498c:	dc000017 	ldw	r16,0(sp)
   44990:	dec00304 	addi	sp,sp,12
   44994:	004a6201 	jmpi	4a620 <__malloc_unlock>
   44998:	80bffe17 	ldw	r2,-8(r16)
   4499c:	50c00204 	addi	r3,r10,8
   449a0:	4091c83a 	sub	r8,r8,r2
   449a4:	41000217 	ldw	r4,8(r8)
   449a8:	388f883a 	add	r7,r7,r2
   449ac:	20c06126 	beq	r4,r3,44b34 <_free_r+0x268>
   449b0:	40800317 	ldw	r2,12(r8)
   449b4:	3247883a 	add	r3,r6,r9
   449b8:	000b883a 	mov	r5,zero
   449bc:	11000215 	stw	r4,8(r2)
   449c0:	20800315 	stw	r2,12(r4)
   449c4:	18800117 	ldw	r2,4(r3)
   449c8:	1080004c 	andi	r2,r2,1
   449cc:	103fdd26 	beq	r2,zero,44944 <_free_r+0x78>
   449d0:	38800054 	ori	r2,r7,1
   449d4:	3a07883a 	add	r3,r7,r8
   449d8:	280ac03a 	cmpne	r5,r5,zero
   449dc:	40800115 	stw	r2,4(r8)
   449e0:	19c00015 	stw	r7,0(r3)
   449e4:	283fe61e 	bne	r5,zero,44980 <_free_r+0xb4>
   449e8:	00807fc4 	movi	r2,511
   449ec:	11c01f2e 	bgeu	r2,r7,44a6c <_free_r+0x1a0>
   449f0:	3806d27a 	srli	r3,r7,9
   449f4:	1800481e 	bne	r3,zero,44b18 <_free_r+0x24c>
   449f8:	3804d0fa 	srli	r2,r7,3
   449fc:	100690fa 	slli	r3,r2,3
   44a00:	1acd883a 	add	r6,r3,r11
   44a04:	31400217 	ldw	r5,8(r6)
   44a08:	31405926 	beq	r6,r5,44b70 <_free_r+0x2a4>
   44a0c:	28800117 	ldw	r2,4(r5)
   44a10:	00ffff04 	movi	r3,-4
   44a14:	10c4703a 	and	r2,r2,r3
   44a18:	3880022e 	bgeu	r7,r2,44a24 <_free_r+0x158>
   44a1c:	29400217 	ldw	r5,8(r5)
   44a20:	317ffa1e 	bne	r6,r5,44a0c <_free_r+0x140>
   44a24:	29800317 	ldw	r6,12(r5)
   44a28:	41800315 	stw	r6,12(r8)
   44a2c:	41400215 	stw	r5,8(r8)
   44a30:	8809883a 	mov	r4,r17
   44a34:	2a000315 	stw	r8,12(r5)
   44a38:	32000215 	stw	r8,8(r6)
   44a3c:	dfc00217 	ldw	ra,8(sp)
   44a40:	dc400117 	ldw	r17,4(sp)
   44a44:	dc000017 	ldw	r16,0(sp)
   44a48:	dec00304 	addi	sp,sp,12
   44a4c:	004a6201 	jmpi	4a620 <__malloc_unlock>
   44a50:	dfc00217 	ldw	ra,8(sp)
   44a54:	dc400117 	ldw	r17,4(sp)
   44a58:	dc000017 	ldw	r16,0(sp)
   44a5c:	dec00304 	addi	sp,sp,12
   44a60:	f800283a 	ret
   44a64:	31000217 	ldw	r4,8(r6)
   44a68:	003fbd06 	br	44960 <_free_r+0x94>
   44a6c:	3806d0fa 	srli	r3,r7,3
   44a70:	00800044 	movi	r2,1
   44a74:	51400117 	ldw	r5,4(r10)
   44a78:	180890fa 	slli	r4,r3,3
   44a7c:	1807d0ba 	srai	r3,r3,2
   44a80:	22c9883a 	add	r4,r4,r11
   44a84:	21800217 	ldw	r6,8(r4)
   44a88:	10c4983a 	sll	r2,r2,r3
   44a8c:	41000315 	stw	r4,12(r8)
   44a90:	41800215 	stw	r6,8(r8)
   44a94:	288ab03a 	or	r5,r5,r2
   44a98:	22000215 	stw	r8,8(r4)
   44a9c:	8809883a 	mov	r4,r17
   44aa0:	51400115 	stw	r5,4(r10)
   44aa4:	32000315 	stw	r8,12(r6)
   44aa8:	dfc00217 	ldw	ra,8(sp)
   44aac:	dc400117 	ldw	r17,4(sp)
   44ab0:	dc000017 	ldw	r16,0(sp)
   44ab4:	dec00304 	addi	sp,sp,12
   44ab8:	004a6201 	jmpi	4a620 <__malloc_unlock>
   44abc:	2880004c 	andi	r2,r5,1
   44ac0:	3a4d883a 	add	r6,r7,r9
   44ac4:	1000071e 	bne	r2,zero,44ae4 <_free_r+0x218>
   44ac8:	80bffe17 	ldw	r2,-8(r16)
   44acc:	4091c83a 	sub	r8,r8,r2
   44ad0:	41000317 	ldw	r4,12(r8)
   44ad4:	40c00217 	ldw	r3,8(r8)
   44ad8:	308d883a 	add	r6,r6,r2
   44adc:	20c00215 	stw	r3,8(r4)
   44ae0:	19000315 	stw	r4,12(r3)
   44ae4:	00900034 	movhi	r2,16384
   44ae8:	10877004 	addi	r2,r2,7616
   44aec:	11000017 	ldw	r4,0(r2)
   44af0:	30c00054 	ori	r3,r6,1
   44af4:	52000215 	stw	r8,8(r10)
   44af8:	40c00115 	stw	r3,4(r8)
   44afc:	313fa036 	bltu	r6,r4,44980 <_free_r+0xb4>
   44b00:	00900034 	movhi	r2,16384
   44b04:	10877f04 	addi	r2,r2,7676
   44b08:	11400017 	ldw	r5,0(r2)
   44b0c:	8809883a 	mov	r4,r17
   44b10:	00447a00 	call	447a0 <_malloc_trim_r>
   44b14:	003f9a06 	br	44980 <_free_r+0xb4>
   44b18:	00800104 	movi	r2,4
   44b1c:	10c0072e 	bgeu	r2,r3,44b3c <_free_r+0x270>
   44b20:	00800504 	movi	r2,20
   44b24:	10c01936 	bltu	r2,r3,44b8c <_free_r+0x2c0>
   44b28:	188016c4 	addi	r2,r3,91
   44b2c:	100690fa 	slli	r3,r2,3
   44b30:	003fb306 	br	44a00 <_free_r+0x134>
   44b34:	01400044 	movi	r5,1
   44b38:	003f7e06 	br	44934 <_free_r+0x68>
   44b3c:	3804d1ba 	srli	r2,r7,6
   44b40:	10800e04 	addi	r2,r2,56
   44b44:	100690fa 	slli	r3,r2,3
   44b48:	003fad06 	br	44a00 <_free_r+0x134>
   44b4c:	22000315 	stw	r8,12(r4)
   44b50:	22000215 	stw	r8,8(r4)
   44b54:	3a05883a 	add	r2,r7,r8
   44b58:	38c00054 	ori	r3,r7,1
   44b5c:	11c00015 	stw	r7,0(r2)
   44b60:	41000215 	stw	r4,8(r8)
   44b64:	40c00115 	stw	r3,4(r8)
   44b68:	41000315 	stw	r4,12(r8)
   44b6c:	003f8406 	br	44980 <_free_r+0xb4>
   44b70:	1005d0ba 	srai	r2,r2,2
   44b74:	00c00044 	movi	r3,1
   44b78:	51000117 	ldw	r4,4(r10)
   44b7c:	1886983a 	sll	r3,r3,r2
   44b80:	20c8b03a 	or	r4,r4,r3
   44b84:	51000115 	stw	r4,4(r10)
   44b88:	003fa706 	br	44a28 <_free_r+0x15c>
   44b8c:	00801504 	movi	r2,84
   44b90:	10c00436 	bltu	r2,r3,44ba4 <_free_r+0x2d8>
   44b94:	3804d33a 	srli	r2,r7,12
   44b98:	10801b84 	addi	r2,r2,110
   44b9c:	100690fa 	slli	r3,r2,3
   44ba0:	003f9706 	br	44a00 <_free_r+0x134>
   44ba4:	00805504 	movi	r2,340
   44ba8:	10c00436 	bltu	r2,r3,44bbc <_free_r+0x2f0>
   44bac:	3804d3fa 	srli	r2,r7,15
   44bb0:	10801dc4 	addi	r2,r2,119
   44bb4:	100690fa 	slli	r3,r2,3
   44bb8:	003f9106 	br	44a00 <_free_r+0x134>
   44bbc:	00815504 	movi	r2,1364
   44bc0:	10c0032e 	bgeu	r2,r3,44bd0 <_free_r+0x304>
   44bc4:	00801f84 	movi	r2,126
   44bc8:	00c0fc04 	movi	r3,1008
   44bcc:	003f8c06 	br	44a00 <_free_r+0x134>
   44bd0:	3804d4ba 	srli	r2,r7,18
   44bd4:	10801f04 	addi	r2,r2,124
   44bd8:	100690fa 	slli	r3,r2,3
   44bdc:	003f8806 	br	44a00 <_free_r+0x134>

00044be0 <__sfvwrite_r>:
   44be0:	30800217 	ldw	r2,8(r6)
   44be4:	defff504 	addi	sp,sp,-44
   44be8:	df000915 	stw	fp,36(sp)
   44bec:	dd800715 	stw	r22,28(sp)
   44bf0:	dc800315 	stw	r18,12(sp)
   44bf4:	dfc00a15 	stw	ra,40(sp)
   44bf8:	ddc00815 	stw	r23,32(sp)
   44bfc:	dd400615 	stw	r21,24(sp)
   44c00:	dd000515 	stw	r20,20(sp)
   44c04:	dcc00415 	stw	r19,16(sp)
   44c08:	dc400215 	stw	r17,8(sp)
   44c0c:	dc000115 	stw	r16,4(sp)
   44c10:	302d883a 	mov	r22,r6
   44c14:	2039883a 	mov	fp,r4
   44c18:	2825883a 	mov	r18,r5
   44c1c:	10001c26 	beq	r2,zero,44c90 <__sfvwrite_r+0xb0>
   44c20:	29c0030b 	ldhu	r7,12(r5)
   44c24:	3880020c 	andi	r2,r7,8
   44c28:	10002726 	beq	r2,zero,44cc8 <__sfvwrite_r+0xe8>
   44c2c:	28800417 	ldw	r2,16(r5)
   44c30:	10002526 	beq	r2,zero,44cc8 <__sfvwrite_r+0xe8>
   44c34:	3880008c 	andi	r2,r7,2
   44c38:	b5400017 	ldw	r21,0(r22)
   44c3c:	10002826 	beq	r2,zero,44ce0 <__sfvwrite_r+0x100>
   44c40:	0021883a 	mov	r16,zero
   44c44:	0023883a 	mov	r17,zero
   44c48:	880d883a 	mov	r6,r17
   44c4c:	e009883a 	mov	r4,fp
   44c50:	00810004 	movi	r2,1024
   44c54:	80006e26 	beq	r16,zero,44e10 <__sfvwrite_r+0x230>
   44c58:	800f883a 	mov	r7,r16
   44c5c:	91400717 	ldw	r5,28(r18)
   44c60:	1400012e 	bgeu	r2,r16,44c68 <__sfvwrite_r+0x88>
   44c64:	100f883a 	mov	r7,r2
   44c68:	90c00917 	ldw	r3,36(r18)
   44c6c:	183ee83a 	callr	r3
   44c70:	1007883a 	mov	r3,r2
   44c74:	80a1c83a 	sub	r16,r16,r2
   44c78:	88a3883a 	add	r17,r17,r2
   44c7c:	00806d0e 	bge	zero,r2,44e34 <__sfvwrite_r+0x254>
   44c80:	b0800217 	ldw	r2,8(r22)
   44c84:	10c5c83a 	sub	r2,r2,r3
   44c88:	b0800215 	stw	r2,8(r22)
   44c8c:	103fee1e 	bne	r2,zero,44c48 <__sfvwrite_r+0x68>
   44c90:	0009883a 	mov	r4,zero
   44c94:	2005883a 	mov	r2,r4
   44c98:	dfc00a17 	ldw	ra,40(sp)
   44c9c:	df000917 	ldw	fp,36(sp)
   44ca0:	ddc00817 	ldw	r23,32(sp)
   44ca4:	dd800717 	ldw	r22,28(sp)
   44ca8:	dd400617 	ldw	r21,24(sp)
   44cac:	dd000517 	ldw	r20,20(sp)
   44cb0:	dcc00417 	ldw	r19,16(sp)
   44cb4:	dc800317 	ldw	r18,12(sp)
   44cb8:	dc400217 	ldw	r17,8(sp)
   44cbc:	dc000117 	ldw	r16,4(sp)
   44cc0:	dec00b04 	addi	sp,sp,44
   44cc4:	f800283a 	ret
   44cc8:	00429a80 	call	429a8 <__swsetup_r>
   44ccc:	1000e41e 	bne	r2,zero,45060 <__sfvwrite_r+0x480>
   44cd0:	91c0030b 	ldhu	r7,12(r18)
   44cd4:	b5400017 	ldw	r21,0(r22)
   44cd8:	3880008c 	andi	r2,r7,2
   44cdc:	103fd81e 	bne	r2,zero,44c40 <__sfvwrite_r+0x60>
   44ce0:	3880004c 	andi	r2,r7,1
   44ce4:	1005003a 	cmpeq	r2,r2,zero
   44ce8:	10005726 	beq	r2,zero,44e48 <__sfvwrite_r+0x268>
   44cec:	0029883a 	mov	r20,zero
   44cf0:	002f883a 	mov	r23,zero
   44cf4:	a0004226 	beq	r20,zero,44e00 <__sfvwrite_r+0x220>
   44cf8:	3880800c 	andi	r2,r7,512
   44cfc:	94000217 	ldw	r16,8(r18)
   44d00:	10008b26 	beq	r2,zero,44f30 <__sfvwrite_r+0x350>
   44d04:	800d883a 	mov	r6,r16
   44d08:	a400a536 	bltu	r20,r16,44fa0 <__sfvwrite_r+0x3c0>
   44d0c:	3881200c 	andi	r2,r7,1152
   44d10:	10002726 	beq	r2,zero,44db0 <__sfvwrite_r+0x1d0>
   44d14:	90800517 	ldw	r2,20(r18)
   44d18:	92000417 	ldw	r8,16(r18)
   44d1c:	91400017 	ldw	r5,0(r18)
   44d20:	1087883a 	add	r3,r2,r2
   44d24:	1887883a 	add	r3,r3,r2
   44d28:	1808d7fa 	srli	r4,r3,31
   44d2c:	2a21c83a 	sub	r16,r5,r8
   44d30:	80800044 	addi	r2,r16,1
   44d34:	20c9883a 	add	r4,r4,r3
   44d38:	2027d07a 	srai	r19,r4,1
   44d3c:	a085883a 	add	r2,r20,r2
   44d40:	980d883a 	mov	r6,r19
   44d44:	9880022e 	bgeu	r19,r2,44d50 <__sfvwrite_r+0x170>
   44d48:	1027883a 	mov	r19,r2
   44d4c:	100d883a 	mov	r6,r2
   44d50:	3881000c 	andi	r2,r7,1024
   44d54:	1000b826 	beq	r2,zero,45038 <__sfvwrite_r+0x458>
   44d58:	300b883a 	mov	r5,r6
   44d5c:	e009883a 	mov	r4,fp
   44d60:	00454540 	call	45454 <_malloc_r>
   44d64:	10003126 	beq	r2,zero,44e2c <__sfvwrite_r+0x24c>
   44d68:	91400417 	ldw	r5,16(r18)
   44d6c:	1009883a 	mov	r4,r2
   44d70:	800d883a 	mov	r6,r16
   44d74:	1023883a 	mov	r17,r2
   44d78:	0045c780 	call	45c78 <memcpy>
   44d7c:	90c0030b 	ldhu	r3,12(r18)
   44d80:	00beffc4 	movi	r2,-1025
   44d84:	1886703a 	and	r3,r3,r2
   44d88:	18c02014 	ori	r3,r3,128
   44d8c:	90c0030d 	sth	r3,12(r18)
   44d90:	9c07c83a 	sub	r3,r19,r16
   44d94:	8c05883a 	add	r2,r17,r16
   44d98:	a00d883a 	mov	r6,r20
   44d9c:	a021883a 	mov	r16,r20
   44da0:	90800015 	stw	r2,0(r18)
   44da4:	90c00215 	stw	r3,8(r18)
   44da8:	94400415 	stw	r17,16(r18)
   44dac:	94c00515 	stw	r19,20(r18)
   44db0:	91000017 	ldw	r4,0(r18)
   44db4:	b80b883a 	mov	r5,r23
   44db8:	a023883a 	mov	r17,r20
   44dbc:	0045d180 	call	45d18 <memmove>
   44dc0:	90c00217 	ldw	r3,8(r18)
   44dc4:	90800017 	ldw	r2,0(r18)
   44dc8:	a027883a 	mov	r19,r20
   44dcc:	1c07c83a 	sub	r3,r3,r16
   44dd0:	1405883a 	add	r2,r2,r16
   44dd4:	90c00215 	stw	r3,8(r18)
   44dd8:	a021883a 	mov	r16,r20
   44ddc:	90800015 	stw	r2,0(r18)
   44de0:	b0800217 	ldw	r2,8(r22)
   44de4:	1405c83a 	sub	r2,r2,r16
   44de8:	b0800215 	stw	r2,8(r22)
   44dec:	103fa826 	beq	r2,zero,44c90 <__sfvwrite_r+0xb0>
   44df0:	a469c83a 	sub	r20,r20,r17
   44df4:	91c0030b 	ldhu	r7,12(r18)
   44df8:	bcef883a 	add	r23,r23,r19
   44dfc:	a03fbe1e 	bne	r20,zero,44cf8 <__sfvwrite_r+0x118>
   44e00:	adc00017 	ldw	r23,0(r21)
   44e04:	ad000117 	ldw	r20,4(r21)
   44e08:	ad400204 	addi	r21,r21,8
   44e0c:	003fb906 	br	44cf4 <__sfvwrite_r+0x114>
   44e10:	ac400017 	ldw	r17,0(r21)
   44e14:	ac000117 	ldw	r16,4(r21)
   44e18:	ad400204 	addi	r21,r21,8
   44e1c:	003f8a06 	br	44c48 <__sfvwrite_r+0x68>
   44e20:	91400417 	ldw	r5,16(r18)
   44e24:	e009883a 	mov	r4,fp
   44e28:	00448cc0 	call	448cc <_free_r>
   44e2c:	00800304 	movi	r2,12
   44e30:	e0800015 	stw	r2,0(fp)
   44e34:	9080030b 	ldhu	r2,12(r18)
   44e38:	013fffc4 	movi	r4,-1
   44e3c:	10801014 	ori	r2,r2,64
   44e40:	9080030d 	sth	r2,12(r18)
   44e44:	003f9306 	br	44c94 <__sfvwrite_r+0xb4>
   44e48:	0027883a 	mov	r19,zero
   44e4c:	002f883a 	mov	r23,zero
   44e50:	d8000015 	stw	zero,0(sp)
   44e54:	0029883a 	mov	r20,zero
   44e58:	98001e26 	beq	r19,zero,44ed4 <__sfvwrite_r+0x2f4>
   44e5c:	d8c00017 	ldw	r3,0(sp)
   44e60:	1804c03a 	cmpne	r2,r3,zero
   44e64:	10005e26 	beq	r2,zero,44fe0 <__sfvwrite_r+0x400>
   44e68:	9821883a 	mov	r16,r19
   44e6c:	a4c0012e 	bgeu	r20,r19,44e74 <__sfvwrite_r+0x294>
   44e70:	a021883a 	mov	r16,r20
   44e74:	91000017 	ldw	r4,0(r18)
   44e78:	90800417 	ldw	r2,16(r18)
   44e7c:	91800217 	ldw	r6,8(r18)
   44e80:	91c00517 	ldw	r7,20(r18)
   44e84:	1100022e 	bgeu	r2,r4,44e90 <__sfvwrite_r+0x2b0>
   44e88:	31e3883a 	add	r17,r6,r7
   44e8c:	8c001616 	blt	r17,r16,44ee8 <__sfvwrite_r+0x308>
   44e90:	81c03816 	blt	r16,r7,44f74 <__sfvwrite_r+0x394>
   44e94:	90c00917 	ldw	r3,36(r18)
   44e98:	91400717 	ldw	r5,28(r18)
   44e9c:	e009883a 	mov	r4,fp
   44ea0:	b80d883a 	mov	r6,r23
   44ea4:	183ee83a 	callr	r3
   44ea8:	1023883a 	mov	r17,r2
   44eac:	00bfe10e 	bge	zero,r2,44e34 <__sfvwrite_r+0x254>
   44eb0:	a469c83a 	sub	r20,r20,r17
   44eb4:	a0001826 	beq	r20,zero,44f18 <__sfvwrite_r+0x338>
   44eb8:	b0800217 	ldw	r2,8(r22)
   44ebc:	1445c83a 	sub	r2,r2,r17
   44ec0:	b0800215 	stw	r2,8(r22)
   44ec4:	103f7226 	beq	r2,zero,44c90 <__sfvwrite_r+0xb0>
   44ec8:	9c67c83a 	sub	r19,r19,r17
   44ecc:	bc6f883a 	add	r23,r23,r17
   44ed0:	983fe21e 	bne	r19,zero,44e5c <__sfvwrite_r+0x27c>
   44ed4:	adc00017 	ldw	r23,0(r21)
   44ed8:	acc00117 	ldw	r19,4(r21)
   44edc:	ad400204 	addi	r21,r21,8
   44ee0:	d8000015 	stw	zero,0(sp)
   44ee4:	003fdc06 	br	44e58 <__sfvwrite_r+0x278>
   44ee8:	b80b883a 	mov	r5,r23
   44eec:	880d883a 	mov	r6,r17
   44ef0:	0045d180 	call	45d18 <memmove>
   44ef4:	90c00017 	ldw	r3,0(r18)
   44ef8:	e009883a 	mov	r4,fp
   44efc:	900b883a 	mov	r5,r18
   44f00:	1c47883a 	add	r3,r3,r17
   44f04:	90c00015 	stw	r3,0(r18)
   44f08:	00442b00 	call	442b0 <_fflush_r>
   44f0c:	103fc91e 	bne	r2,zero,44e34 <__sfvwrite_r+0x254>
   44f10:	a469c83a 	sub	r20,r20,r17
   44f14:	a03fe81e 	bne	r20,zero,44eb8 <__sfvwrite_r+0x2d8>
   44f18:	e009883a 	mov	r4,fp
   44f1c:	900b883a 	mov	r5,r18
   44f20:	00442b00 	call	442b0 <_fflush_r>
   44f24:	103fc31e 	bne	r2,zero,44e34 <__sfvwrite_r+0x254>
   44f28:	d8000015 	stw	zero,0(sp)
   44f2c:	003fe206 	br	44eb8 <__sfvwrite_r+0x2d8>
   44f30:	91000017 	ldw	r4,0(r18)
   44f34:	90800417 	ldw	r2,16(r18)
   44f38:	1100022e 	bgeu	r2,r4,44f44 <__sfvwrite_r+0x364>
   44f3c:	8023883a 	mov	r17,r16
   44f40:	85003136 	bltu	r16,r20,45008 <__sfvwrite_r+0x428>
   44f44:	91c00517 	ldw	r7,20(r18)
   44f48:	a1c01836 	bltu	r20,r7,44fac <__sfvwrite_r+0x3cc>
   44f4c:	90c00917 	ldw	r3,36(r18)
   44f50:	91400717 	ldw	r5,28(r18)
   44f54:	e009883a 	mov	r4,fp
   44f58:	b80d883a 	mov	r6,r23
   44f5c:	183ee83a 	callr	r3
   44f60:	1021883a 	mov	r16,r2
   44f64:	00bfb30e 	bge	zero,r2,44e34 <__sfvwrite_r+0x254>
   44f68:	1023883a 	mov	r17,r2
   44f6c:	1027883a 	mov	r19,r2
   44f70:	003f9b06 	br	44de0 <__sfvwrite_r+0x200>
   44f74:	b80b883a 	mov	r5,r23
   44f78:	800d883a 	mov	r6,r16
   44f7c:	0045d180 	call	45d18 <memmove>
   44f80:	90c00217 	ldw	r3,8(r18)
   44f84:	90800017 	ldw	r2,0(r18)
   44f88:	8023883a 	mov	r17,r16
   44f8c:	1c07c83a 	sub	r3,r3,r16
   44f90:	1405883a 	add	r2,r2,r16
   44f94:	90c00215 	stw	r3,8(r18)
   44f98:	90800015 	stw	r2,0(r18)
   44f9c:	003fc406 	br	44eb0 <__sfvwrite_r+0x2d0>
   44fa0:	a00d883a 	mov	r6,r20
   44fa4:	a021883a 	mov	r16,r20
   44fa8:	003f8106 	br	44db0 <__sfvwrite_r+0x1d0>
   44fac:	b80b883a 	mov	r5,r23
   44fb0:	a00d883a 	mov	r6,r20
   44fb4:	0045d180 	call	45d18 <memmove>
   44fb8:	90c00217 	ldw	r3,8(r18)
   44fbc:	90800017 	ldw	r2,0(r18)
   44fc0:	a021883a 	mov	r16,r20
   44fc4:	1d07c83a 	sub	r3,r3,r20
   44fc8:	1505883a 	add	r2,r2,r20
   44fcc:	a023883a 	mov	r17,r20
   44fd0:	a027883a 	mov	r19,r20
   44fd4:	90c00215 	stw	r3,8(r18)
   44fd8:	90800015 	stw	r2,0(r18)
   44fdc:	003f8006 	br	44de0 <__sfvwrite_r+0x200>
   44fe0:	b809883a 	mov	r4,r23
   44fe4:	01400284 	movi	r5,10
   44fe8:	980d883a 	mov	r6,r19
   44fec:	0045b940 	call	45b94 <memchr>
   44ff0:	10001726 	beq	r2,zero,45050 <__sfvwrite_r+0x470>
   44ff4:	15c5c83a 	sub	r2,r2,r23
   44ff8:	15000044 	addi	r20,r2,1
   44ffc:	00800044 	movi	r2,1
   45000:	d8800015 	stw	r2,0(sp)
   45004:	003f9806 	br	44e68 <__sfvwrite_r+0x288>
   45008:	b80b883a 	mov	r5,r23
   4500c:	800d883a 	mov	r6,r16
   45010:	0045d180 	call	45d18 <memmove>
   45014:	90c00017 	ldw	r3,0(r18)
   45018:	e009883a 	mov	r4,fp
   4501c:	900b883a 	mov	r5,r18
   45020:	1c07883a 	add	r3,r3,r16
   45024:	90c00015 	stw	r3,0(r18)
   45028:	8027883a 	mov	r19,r16
   4502c:	00442b00 	call	442b0 <_fflush_r>
   45030:	103f6b26 	beq	r2,zero,44de0 <__sfvwrite_r+0x200>
   45034:	003f7f06 	br	44e34 <__sfvwrite_r+0x254>
   45038:	400b883a 	mov	r5,r8
   4503c:	e009883a 	mov	r4,fp
   45040:	0046e840 	call	46e84 <_realloc_r>
   45044:	103f7626 	beq	r2,zero,44e20 <__sfvwrite_r+0x240>
   45048:	1023883a 	mov	r17,r2
   4504c:	003f5006 	br	44d90 <__sfvwrite_r+0x1b0>
   45050:	00c00044 	movi	r3,1
   45054:	9d000044 	addi	r20,r19,1
   45058:	d8c00015 	stw	r3,0(sp)
   4505c:	003f8206 	br	44e68 <__sfvwrite_r+0x288>
   45060:	9080030b 	ldhu	r2,12(r18)
   45064:	00c00244 	movi	r3,9
   45068:	013fffc4 	movi	r4,-1
   4506c:	10801014 	ori	r2,r2,64
   45070:	9080030d 	sth	r2,12(r18)
   45074:	e0c00015 	stw	r3,0(fp)
   45078:	003f0606 	br	44c94 <__sfvwrite_r+0xb4>

0004507c <_fwalk_reent>:
   4507c:	defff704 	addi	sp,sp,-36
   45080:	dcc00315 	stw	r19,12(sp)
   45084:	24c0b804 	addi	r19,r4,736
   45088:	dd800615 	stw	r22,24(sp)
   4508c:	dd400515 	stw	r21,20(sp)
   45090:	dfc00815 	stw	ra,32(sp)
   45094:	ddc00715 	stw	r23,28(sp)
   45098:	dd000415 	stw	r20,16(sp)
   4509c:	dc800215 	stw	r18,8(sp)
   450a0:	dc400115 	stw	r17,4(sp)
   450a4:	dc000015 	stw	r16,0(sp)
   450a8:	202b883a 	mov	r21,r4
   450ac:	282d883a 	mov	r22,r5
   450b0:	00445380 	call	44538 <__sfp_lock_acquire>
   450b4:	98002126 	beq	r19,zero,4513c <_fwalk_reent+0xc0>
   450b8:	002f883a 	mov	r23,zero
   450bc:	9c800117 	ldw	r18,4(r19)
   450c0:	9c000217 	ldw	r16,8(r19)
   450c4:	90bfffc4 	addi	r2,r18,-1
   450c8:	10000d16 	blt	r2,zero,45100 <_fwalk_reent+0x84>
   450cc:	0023883a 	mov	r17,zero
   450d0:	053fffc4 	movi	r20,-1
   450d4:	8080030f 	ldh	r2,12(r16)
   450d8:	8c400044 	addi	r17,r17,1
   450dc:	10000626 	beq	r2,zero,450f8 <_fwalk_reent+0x7c>
   450e0:	8080038f 	ldh	r2,14(r16)
   450e4:	800b883a 	mov	r5,r16
   450e8:	a809883a 	mov	r4,r21
   450ec:	15000226 	beq	r2,r20,450f8 <_fwalk_reent+0x7c>
   450f0:	b03ee83a 	callr	r22
   450f4:	b8aeb03a 	or	r23,r23,r2
   450f8:	84001704 	addi	r16,r16,92
   450fc:	947ff51e 	bne	r18,r17,450d4 <_fwalk_reent+0x58>
   45100:	9cc00017 	ldw	r19,0(r19)
   45104:	983fed1e 	bne	r19,zero,450bc <_fwalk_reent+0x40>
   45108:	004453c0 	call	4453c <__sfp_lock_release>
   4510c:	b805883a 	mov	r2,r23
   45110:	dfc00817 	ldw	ra,32(sp)
   45114:	ddc00717 	ldw	r23,28(sp)
   45118:	dd800617 	ldw	r22,24(sp)
   4511c:	dd400517 	ldw	r21,20(sp)
   45120:	dd000417 	ldw	r20,16(sp)
   45124:	dcc00317 	ldw	r19,12(sp)
   45128:	dc800217 	ldw	r18,8(sp)
   4512c:	dc400117 	ldw	r17,4(sp)
   45130:	dc000017 	ldw	r16,0(sp)
   45134:	dec00904 	addi	sp,sp,36
   45138:	f800283a 	ret
   4513c:	002f883a 	mov	r23,zero
   45140:	003ff106 	br	45108 <_fwalk_reent+0x8c>

00045144 <_fwalk>:
   45144:	defff804 	addi	sp,sp,-32
   45148:	dcc00315 	stw	r19,12(sp)
   4514c:	24c0b804 	addi	r19,r4,736
   45150:	dd400515 	stw	r21,20(sp)
   45154:	dfc00715 	stw	ra,28(sp)
   45158:	dd800615 	stw	r22,24(sp)
   4515c:	dd000415 	stw	r20,16(sp)
   45160:	dc800215 	stw	r18,8(sp)
   45164:	dc400115 	stw	r17,4(sp)
   45168:	dc000015 	stw	r16,0(sp)
   4516c:	282b883a 	mov	r21,r5
   45170:	00445380 	call	44538 <__sfp_lock_acquire>
   45174:	98001f26 	beq	r19,zero,451f4 <_fwalk+0xb0>
   45178:	002d883a 	mov	r22,zero
   4517c:	9c800117 	ldw	r18,4(r19)
   45180:	9c000217 	ldw	r16,8(r19)
   45184:	90bfffc4 	addi	r2,r18,-1
   45188:	10000c16 	blt	r2,zero,451bc <_fwalk+0x78>
   4518c:	0023883a 	mov	r17,zero
   45190:	053fffc4 	movi	r20,-1
   45194:	8080030f 	ldh	r2,12(r16)
   45198:	8c400044 	addi	r17,r17,1
   4519c:	10000526 	beq	r2,zero,451b4 <_fwalk+0x70>
   451a0:	8080038f 	ldh	r2,14(r16)
   451a4:	8009883a 	mov	r4,r16
   451a8:	15000226 	beq	r2,r20,451b4 <_fwalk+0x70>
   451ac:	a83ee83a 	callr	r21
   451b0:	b0acb03a 	or	r22,r22,r2
   451b4:	84001704 	addi	r16,r16,92
   451b8:	947ff61e 	bne	r18,r17,45194 <_fwalk+0x50>
   451bc:	9cc00017 	ldw	r19,0(r19)
   451c0:	983fee1e 	bne	r19,zero,4517c <_fwalk+0x38>
   451c4:	004453c0 	call	4453c <__sfp_lock_release>
   451c8:	b005883a 	mov	r2,r22
   451cc:	dfc00717 	ldw	ra,28(sp)
   451d0:	dd800617 	ldw	r22,24(sp)
   451d4:	dd400517 	ldw	r21,20(sp)
   451d8:	dd000417 	ldw	r20,16(sp)
   451dc:	dcc00317 	ldw	r19,12(sp)
   451e0:	dc800217 	ldw	r18,8(sp)
   451e4:	dc400117 	ldw	r17,4(sp)
   451e8:	dc000017 	ldw	r16,0(sp)
   451ec:	dec00804 	addi	sp,sp,32
   451f0:	f800283a 	ret
   451f4:	002d883a 	mov	r22,zero
   451f8:	003ff206 	br	451c4 <_fwalk+0x80>

000451fc <__locale_charset>:
   451fc:	d0a00317 	ldw	r2,-32756(gp)
   45200:	f800283a 	ret

00045204 <_localeconv_r>:
   45204:	00900034 	movhi	r2,16384
   45208:	10804004 	addi	r2,r2,256
   4520c:	f800283a 	ret

00045210 <localeconv>:
   45210:	00900034 	movhi	r2,16384
   45214:	10876c04 	addi	r2,r2,7600
   45218:	11000017 	ldw	r4,0(r2)
   4521c:	00452041 	jmpi	45204 <_localeconv_r>

00045220 <_setlocale_r>:
   45220:	defffc04 	addi	sp,sp,-16
   45224:	00d00034 	movhi	r3,16384
   45228:	18c03b04 	addi	r3,r3,236
   4522c:	dc800215 	stw	r18,8(sp)
   45230:	dc400115 	stw	r17,4(sp)
   45234:	dc000015 	stw	r16,0(sp)
   45238:	2023883a 	mov	r17,r4
   4523c:	2825883a 	mov	r18,r5
   45240:	dfc00315 	stw	ra,12(sp)
   45244:	3021883a 	mov	r16,r6
   45248:	3009883a 	mov	r4,r6
   4524c:	180b883a 	mov	r5,r3
   45250:	30000926 	beq	r6,zero,45278 <_setlocale_r+0x58>
   45254:	00476a40 	call	476a4 <strcmp>
   45258:	8009883a 	mov	r4,r16
   4525c:	01500034 	movhi	r5,16384
   45260:	29402604 	addi	r5,r5,152
   45264:	10000b1e 	bne	r2,zero,45294 <_setlocale_r+0x74>
   45268:	8c000d15 	stw	r16,52(r17)
   4526c:	8c800c15 	stw	r18,48(r17)
   45270:	00d00034 	movhi	r3,16384
   45274:	18c03b04 	addi	r3,r3,236
   45278:	1805883a 	mov	r2,r3
   4527c:	dfc00317 	ldw	ra,12(sp)
   45280:	dc800217 	ldw	r18,8(sp)
   45284:	dc400117 	ldw	r17,4(sp)
   45288:	dc000017 	ldw	r16,0(sp)
   4528c:	dec00404 	addi	sp,sp,16
   45290:	f800283a 	ret
   45294:	00476a40 	call	476a4 <strcmp>
   45298:	0007883a 	mov	r3,zero
   4529c:	103ff226 	beq	r2,zero,45268 <_setlocale_r+0x48>
   452a0:	003ff506 	br	45278 <_setlocale_r+0x58>

000452a4 <setlocale>:
   452a4:	01900034 	movhi	r6,16384
   452a8:	31876c04 	addi	r6,r6,7600
   452ac:	2007883a 	mov	r3,r4
   452b0:	31000017 	ldw	r4,0(r6)
   452b4:	280d883a 	mov	r6,r5
   452b8:	180b883a 	mov	r5,r3
   452bc:	00452201 	jmpi	45220 <_setlocale_r>

000452c0 <__smakebuf_r>:
   452c0:	2880030b 	ldhu	r2,12(r5)
   452c4:	deffed04 	addi	sp,sp,-76
   452c8:	dc401015 	stw	r17,64(sp)
   452cc:	1080008c 	andi	r2,r2,2
   452d0:	dc000f15 	stw	r16,60(sp)
   452d4:	dfc01215 	stw	ra,72(sp)
   452d8:	dc801115 	stw	r18,68(sp)
   452dc:	2821883a 	mov	r16,r5
   452e0:	2023883a 	mov	r17,r4
   452e4:	10000b26 	beq	r2,zero,45314 <__smakebuf_r+0x54>
   452e8:	28c010c4 	addi	r3,r5,67
   452ec:	00800044 	movi	r2,1
   452f0:	28800515 	stw	r2,20(r5)
   452f4:	28c00415 	stw	r3,16(r5)
   452f8:	28c00015 	stw	r3,0(r5)
   452fc:	dfc01217 	ldw	ra,72(sp)
   45300:	dc801117 	ldw	r18,68(sp)
   45304:	dc401017 	ldw	r17,64(sp)
   45308:	dc000f17 	ldw	r16,60(sp)
   4530c:	dec01304 	addi	sp,sp,76
   45310:	f800283a 	ret
   45314:	2940038f 	ldh	r5,14(r5)
   45318:	28002116 	blt	r5,zero,453a0 <__smakebuf_r+0xe0>
   4531c:	d80d883a 	mov	r6,sp
   45320:	0047a200 	call	47a20 <_fstat_r>
   45324:	10001e16 	blt	r2,zero,453a0 <__smakebuf_r+0xe0>
   45328:	d8800117 	ldw	r2,4(sp)
   4532c:	00e00014 	movui	r3,32768
   45330:	113c000c 	andi	r4,r2,61440
   45334:	20c03126 	beq	r4,r3,453fc <__smakebuf_r+0x13c>
   45338:	8080030b 	ldhu	r2,12(r16)
   4533c:	00c80004 	movi	r3,8192
   45340:	10820014 	ori	r2,r2,2048
   45344:	8080030d 	sth	r2,12(r16)
   45348:	20c01e26 	beq	r4,r3,453c4 <__smakebuf_r+0x104>
   4534c:	04810004 	movi	r18,1024
   45350:	8809883a 	mov	r4,r17
   45354:	900b883a 	mov	r5,r18
   45358:	00454540 	call	45454 <_malloc_r>
   4535c:	1009883a 	mov	r4,r2
   45360:	10003126 	beq	r2,zero,45428 <__smakebuf_r+0x168>
   45364:	80c0030b 	ldhu	r3,12(r16)
   45368:	00800134 	movhi	r2,4
   4536c:	10918b04 	addi	r2,r2,17964
   45370:	88800f15 	stw	r2,60(r17)
   45374:	18c02014 	ori	r3,r3,128
   45378:	84800515 	stw	r18,20(r16)
   4537c:	80c0030d 	sth	r3,12(r16)
   45380:	81000415 	stw	r4,16(r16)
   45384:	81000015 	stw	r4,0(r16)
   45388:	dfc01217 	ldw	ra,72(sp)
   4538c:	dc801117 	ldw	r18,68(sp)
   45390:	dc401017 	ldw	r17,64(sp)
   45394:	dc000f17 	ldw	r16,60(sp)
   45398:	dec01304 	addi	sp,sp,76
   4539c:	f800283a 	ret
   453a0:	80c0030b 	ldhu	r3,12(r16)
   453a4:	1880200c 	andi	r2,r3,128
   453a8:	10000426 	beq	r2,zero,453bc <__smakebuf_r+0xfc>
   453ac:	04801004 	movi	r18,64
   453b0:	18820014 	ori	r2,r3,2048
   453b4:	8080030d 	sth	r2,12(r16)
   453b8:	003fe506 	br	45350 <__smakebuf_r+0x90>
   453bc:	04810004 	movi	r18,1024
   453c0:	003ffb06 	br	453b0 <__smakebuf_r+0xf0>
   453c4:	8140038f 	ldh	r5,14(r16)
   453c8:	8809883a 	mov	r4,r17
   453cc:	0047a940 	call	47a94 <_isatty_r>
   453d0:	103fde26 	beq	r2,zero,4534c <__smakebuf_r+0x8c>
   453d4:	8080030b 	ldhu	r2,12(r16)
   453d8:	80c010c4 	addi	r3,r16,67
   453dc:	04810004 	movi	r18,1024
   453e0:	10800054 	ori	r2,r2,1
   453e4:	8080030d 	sth	r2,12(r16)
   453e8:	00800044 	movi	r2,1
   453ec:	80c00415 	stw	r3,16(r16)
   453f0:	80800515 	stw	r2,20(r16)
   453f4:	80c00015 	stw	r3,0(r16)
   453f8:	003fd506 	br	45350 <__smakebuf_r+0x90>
   453fc:	80c00a17 	ldw	r3,40(r16)
   45400:	00800134 	movhi	r2,4
   45404:	109d5804 	addi	r2,r2,30048
   45408:	18bfcb1e 	bne	r3,r2,45338 <__smakebuf_r+0x78>
   4540c:	8080030b 	ldhu	r2,12(r16)
   45410:	00c10004 	movi	r3,1024
   45414:	1825883a 	mov	r18,r3
   45418:	10c4b03a 	or	r2,r2,r3
   4541c:	8080030d 	sth	r2,12(r16)
   45420:	80c01315 	stw	r3,76(r16)
   45424:	003fca06 	br	45350 <__smakebuf_r+0x90>
   45428:	8100030b 	ldhu	r4,12(r16)
   4542c:	2080800c 	andi	r2,r4,512
   45430:	103fb21e 	bne	r2,zero,452fc <__smakebuf_r+0x3c>
   45434:	80c010c4 	addi	r3,r16,67
   45438:	21000094 	ori	r4,r4,2
   4543c:	00800044 	movi	r2,1
   45440:	80800515 	stw	r2,20(r16)
   45444:	8100030d 	sth	r4,12(r16)
   45448:	80c00415 	stw	r3,16(r16)
   4544c:	80c00015 	stw	r3,0(r16)
   45450:	003faa06 	br	452fc <__smakebuf_r+0x3c>

00045454 <_malloc_r>:
   45454:	defff604 	addi	sp,sp,-40
   45458:	28c002c4 	addi	r3,r5,11
   4545c:	00800584 	movi	r2,22
   45460:	dc800215 	stw	r18,8(sp)
   45464:	dfc00915 	stw	ra,36(sp)
   45468:	df000815 	stw	fp,32(sp)
   4546c:	ddc00715 	stw	r23,28(sp)
   45470:	dd800615 	stw	r22,24(sp)
   45474:	dd400515 	stw	r21,20(sp)
   45478:	dd000415 	stw	r20,16(sp)
   4547c:	dcc00315 	stw	r19,12(sp)
   45480:	dc400115 	stw	r17,4(sp)
   45484:	dc000015 	stw	r16,0(sp)
   45488:	2025883a 	mov	r18,r4
   4548c:	10c01236 	bltu	r2,r3,454d8 <_malloc_r+0x84>
   45490:	04400404 	movi	r17,16
   45494:	8940142e 	bgeu	r17,r5,454e8 <_malloc_r+0x94>
   45498:	00800304 	movi	r2,12
   4549c:	0007883a 	mov	r3,zero
   454a0:	90800015 	stw	r2,0(r18)
   454a4:	1805883a 	mov	r2,r3
   454a8:	dfc00917 	ldw	ra,36(sp)
   454ac:	df000817 	ldw	fp,32(sp)
   454b0:	ddc00717 	ldw	r23,28(sp)
   454b4:	dd800617 	ldw	r22,24(sp)
   454b8:	dd400517 	ldw	r21,20(sp)
   454bc:	dd000417 	ldw	r20,16(sp)
   454c0:	dcc00317 	ldw	r19,12(sp)
   454c4:	dc800217 	ldw	r18,8(sp)
   454c8:	dc400117 	ldw	r17,4(sp)
   454cc:	dc000017 	ldw	r16,0(sp)
   454d0:	dec00a04 	addi	sp,sp,40
   454d4:	f800283a 	ret
   454d8:	00bffe04 	movi	r2,-8
   454dc:	18a2703a 	and	r17,r3,r2
   454e0:	883fed16 	blt	r17,zero,45498 <_malloc_r+0x44>
   454e4:	897fec36 	bltu	r17,r5,45498 <_malloc_r+0x44>
   454e8:	9009883a 	mov	r4,r18
   454ec:	004a6000 	call	4a600 <__malloc_lock>
   454f0:	00807dc4 	movi	r2,503
   454f4:	14402b2e 	bgeu	r2,r17,455a4 <_malloc_r+0x150>
   454f8:	8806d27a 	srli	r3,r17,9
   454fc:	18003f1e 	bne	r3,zero,455fc <_malloc_r+0x1a8>
   45500:	880cd0fa 	srli	r6,r17,3
   45504:	300490fa 	slli	r2,r6,3
   45508:	02d00034 	movhi	r11,16384
   4550c:	5ac1e804 	addi	r11,r11,1952
   45510:	12cb883a 	add	r5,r2,r11
   45514:	2c000317 	ldw	r16,12(r5)
   45518:	580f883a 	mov	r7,r11
   4551c:	2c00041e 	bne	r5,r16,45530 <_malloc_r+0xdc>
   45520:	00000a06 	br	4554c <_malloc_r+0xf8>
   45524:	1800860e 	bge	r3,zero,45740 <_malloc_r+0x2ec>
   45528:	84000317 	ldw	r16,12(r16)
   4552c:	2c000726 	beq	r5,r16,4554c <_malloc_r+0xf8>
   45530:	80800117 	ldw	r2,4(r16)
   45534:	00ffff04 	movi	r3,-4
   45538:	10c8703a 	and	r4,r2,r3
   4553c:	2447c83a 	sub	r3,r4,r17
   45540:	008003c4 	movi	r2,15
   45544:	10fff70e 	bge	r2,r3,45524 <_malloc_r+0xd0>
   45548:	31bfffc4 	addi	r6,r6,-1
   4554c:	32400044 	addi	r9,r6,1
   45550:	02900034 	movhi	r10,16384
   45554:	5281ea04 	addi	r10,r10,1960
   45558:	54000217 	ldw	r16,8(r10)
   4555c:	8280a026 	beq	r16,r10,457e0 <_malloc_r+0x38c>
   45560:	80800117 	ldw	r2,4(r16)
   45564:	00ffff04 	movi	r3,-4
   45568:	10ca703a 	and	r5,r2,r3
   4556c:	2c4dc83a 	sub	r6,r5,r17
   45570:	008003c4 	movi	r2,15
   45574:	11808316 	blt	r2,r6,45784 <_malloc_r+0x330>
   45578:	52800315 	stw	r10,12(r10)
   4557c:	52800215 	stw	r10,8(r10)
   45580:	30002916 	blt	r6,zero,45628 <_malloc_r+0x1d4>
   45584:	8147883a 	add	r3,r16,r5
   45588:	18800117 	ldw	r2,4(r3)
   4558c:	9009883a 	mov	r4,r18
   45590:	10800054 	ori	r2,r2,1
   45594:	18800115 	stw	r2,4(r3)
   45598:	004a6200 	call	4a620 <__malloc_unlock>
   4559c:	80c00204 	addi	r3,r16,8
   455a0:	003fc006 	br	454a4 <_malloc_r+0x50>
   455a4:	02d00034 	movhi	r11,16384
   455a8:	5ac1e804 	addi	r11,r11,1952
   455ac:	8ac5883a 	add	r2,r17,r11
   455b0:	14000317 	ldw	r16,12(r2)
   455b4:	580f883a 	mov	r7,r11
   455b8:	8806d0fa 	srli	r3,r17,3
   455bc:	14006c26 	beq	r2,r16,45770 <_malloc_r+0x31c>
   455c0:	80c00117 	ldw	r3,4(r16)
   455c4:	00bfff04 	movi	r2,-4
   455c8:	81800317 	ldw	r6,12(r16)
   455cc:	1886703a 	and	r3,r3,r2
   455d0:	80c7883a 	add	r3,r16,r3
   455d4:	18800117 	ldw	r2,4(r3)
   455d8:	81400217 	ldw	r5,8(r16)
   455dc:	9009883a 	mov	r4,r18
   455e0:	10800054 	ori	r2,r2,1
   455e4:	18800115 	stw	r2,4(r3)
   455e8:	31400215 	stw	r5,8(r6)
   455ec:	29800315 	stw	r6,12(r5)
   455f0:	004a6200 	call	4a620 <__malloc_unlock>
   455f4:	80c00204 	addi	r3,r16,8
   455f8:	003faa06 	br	454a4 <_malloc_r+0x50>
   455fc:	00800104 	movi	r2,4
   45600:	10c0052e 	bgeu	r2,r3,45618 <_malloc_r+0x1c4>
   45604:	00800504 	movi	r2,20
   45608:	10c07836 	bltu	r2,r3,457ec <_malloc_r+0x398>
   4560c:	198016c4 	addi	r6,r3,91
   45610:	300490fa 	slli	r2,r6,3
   45614:	003fbc06 	br	45508 <_malloc_r+0xb4>
   45618:	8804d1ba 	srli	r2,r17,6
   4561c:	11800e04 	addi	r6,r2,56
   45620:	300490fa 	slli	r2,r6,3
   45624:	003fb806 	br	45508 <_malloc_r+0xb4>
   45628:	00807fc4 	movi	r2,511
   4562c:	1140bb36 	bltu	r2,r5,4591c <_malloc_r+0x4c8>
   45630:	2806d0fa 	srli	r3,r5,3
   45634:	573ffe04 	addi	fp,r10,-8
   45638:	00800044 	movi	r2,1
   4563c:	180890fa 	slli	r4,r3,3
   45640:	1807d0ba 	srai	r3,r3,2
   45644:	e1c00117 	ldw	r7,4(fp)
   45648:	5909883a 	add	r4,r11,r4
   4564c:	21400217 	ldw	r5,8(r4)
   45650:	10c4983a 	sll	r2,r2,r3
   45654:	81000315 	stw	r4,12(r16)
   45658:	81400215 	stw	r5,8(r16)
   4565c:	388eb03a 	or	r7,r7,r2
   45660:	2c000315 	stw	r16,12(r5)
   45664:	24000215 	stw	r16,8(r4)
   45668:	e1c00115 	stw	r7,4(fp)
   4566c:	4807883a 	mov	r3,r9
   45670:	4800cd16 	blt	r9,zero,459a8 <_malloc_r+0x554>
   45674:	1807d0ba 	srai	r3,r3,2
   45678:	00800044 	movi	r2,1
   4567c:	10c8983a 	sll	r4,r2,r3
   45680:	39004436 	bltu	r7,r4,45794 <_malloc_r+0x340>
   45684:	21c4703a 	and	r2,r4,r7
   45688:	10000a1e 	bne	r2,zero,456b4 <_malloc_r+0x260>
   4568c:	2109883a 	add	r4,r4,r4
   45690:	00bfff04 	movi	r2,-4
   45694:	4884703a 	and	r2,r9,r2
   45698:	3906703a 	and	r3,r7,r4
   4569c:	12400104 	addi	r9,r2,4
   456a0:	1800041e 	bne	r3,zero,456b4 <_malloc_r+0x260>
   456a4:	2109883a 	add	r4,r4,r4
   456a8:	3904703a 	and	r2,r7,r4
   456ac:	4a400104 	addi	r9,r9,4
   456b0:	103ffc26 	beq	r2,zero,456a4 <_malloc_r+0x250>
   456b4:	480490fa 	slli	r2,r9,3
   456b8:	4819883a 	mov	r12,r9
   456bc:	023fff04 	movi	r8,-4
   456c0:	589b883a 	add	r13,r11,r2
   456c4:	6807883a 	mov	r3,r13
   456c8:	014003c4 	movi	r5,15
   456cc:	1c000317 	ldw	r16,12(r3)
   456d0:	1c00041e 	bne	r3,r16,456e4 <_malloc_r+0x290>
   456d4:	0000a706 	br	45974 <_malloc_r+0x520>
   456d8:	3000ab0e 	bge	r6,zero,45988 <_malloc_r+0x534>
   456dc:	84000317 	ldw	r16,12(r16)
   456e0:	1c00a426 	beq	r3,r16,45974 <_malloc_r+0x520>
   456e4:	80800117 	ldw	r2,4(r16)
   456e8:	1204703a 	and	r2,r2,r8
   456ec:	144dc83a 	sub	r6,r2,r17
   456f0:	29bff90e 	bge	r5,r6,456d8 <_malloc_r+0x284>
   456f4:	81000317 	ldw	r4,12(r16)
   456f8:	80c00217 	ldw	r3,8(r16)
   456fc:	89400054 	ori	r5,r17,1
   45700:	8445883a 	add	r2,r16,r17
   45704:	20c00215 	stw	r3,8(r4)
   45708:	19000315 	stw	r4,12(r3)
   4570c:	81400115 	stw	r5,4(r16)
   45710:	1187883a 	add	r3,r2,r6
   45714:	31000054 	ori	r4,r6,1
   45718:	50800315 	stw	r2,12(r10)
   4571c:	50800215 	stw	r2,8(r10)
   45720:	19800015 	stw	r6,0(r3)
   45724:	11000115 	stw	r4,4(r2)
   45728:	12800215 	stw	r10,8(r2)
   4572c:	12800315 	stw	r10,12(r2)
   45730:	9009883a 	mov	r4,r18
   45734:	004a6200 	call	4a620 <__malloc_unlock>
   45738:	80c00204 	addi	r3,r16,8
   4573c:	003f5906 	br	454a4 <_malloc_r+0x50>
   45740:	8109883a 	add	r4,r16,r4
   45744:	20800117 	ldw	r2,4(r4)
   45748:	80c00217 	ldw	r3,8(r16)
   4574c:	81400317 	ldw	r5,12(r16)
   45750:	10800054 	ori	r2,r2,1
   45754:	20800115 	stw	r2,4(r4)
   45758:	28c00215 	stw	r3,8(r5)
   4575c:	19400315 	stw	r5,12(r3)
   45760:	9009883a 	mov	r4,r18
   45764:	004a6200 	call	4a620 <__malloc_unlock>
   45768:	80c00204 	addi	r3,r16,8
   4576c:	003f4d06 	br	454a4 <_malloc_r+0x50>
   45770:	80800204 	addi	r2,r16,8
   45774:	14000317 	ldw	r16,12(r2)
   45778:	143f911e 	bne	r2,r16,455c0 <_malloc_r+0x16c>
   4577c:	1a400084 	addi	r9,r3,2
   45780:	003f7306 	br	45550 <_malloc_r+0xfc>
   45784:	88c00054 	ori	r3,r17,1
   45788:	8445883a 	add	r2,r16,r17
   4578c:	80c00115 	stw	r3,4(r16)
   45790:	003fdf06 	br	45710 <_malloc_r+0x2bc>
   45794:	e4000217 	ldw	r16,8(fp)
   45798:	00bfff04 	movi	r2,-4
   4579c:	80c00117 	ldw	r3,4(r16)
   457a0:	802d883a 	mov	r22,r16
   457a4:	18aa703a 	and	r21,r3,r2
   457a8:	ac401636 	bltu	r21,r17,45804 <_malloc_r+0x3b0>
   457ac:	ac49c83a 	sub	r4,r21,r17
   457b0:	008003c4 	movi	r2,15
   457b4:	1100130e 	bge	r2,r4,45804 <_malloc_r+0x3b0>
   457b8:	88800054 	ori	r2,r17,1
   457bc:	8447883a 	add	r3,r16,r17
   457c0:	80800115 	stw	r2,4(r16)
   457c4:	20800054 	ori	r2,r4,1
   457c8:	18800115 	stw	r2,4(r3)
   457cc:	e0c00215 	stw	r3,8(fp)
   457d0:	9009883a 	mov	r4,r18
   457d4:	004a6200 	call	4a620 <__malloc_unlock>
   457d8:	80c00204 	addi	r3,r16,8
   457dc:	003f3106 	br	454a4 <_malloc_r+0x50>
   457e0:	39c00117 	ldw	r7,4(r7)
   457e4:	573ffe04 	addi	fp,r10,-8
   457e8:	003fa006 	br	4566c <_malloc_r+0x218>
   457ec:	00801504 	movi	r2,84
   457f0:	10c06736 	bltu	r2,r3,45990 <_malloc_r+0x53c>
   457f4:	8804d33a 	srli	r2,r17,12
   457f8:	11801b84 	addi	r6,r2,110
   457fc:	300490fa 	slli	r2,r6,3
   45800:	003f4106 	br	45508 <_malloc_r+0xb4>
   45804:	d0a01317 	ldw	r2,-32692(gp)
   45808:	d0e00517 	ldw	r3,-32748(gp)
   4580c:	053fffc4 	movi	r20,-1
   45810:	10800404 	addi	r2,r2,16
   45814:	88a7883a 	add	r19,r17,r2
   45818:	1d000326 	beq	r3,r20,45828 <_malloc_r+0x3d4>
   4581c:	98c3ffc4 	addi	r3,r19,4095
   45820:	00bc0004 	movi	r2,-4096
   45824:	18a6703a 	and	r19,r3,r2
   45828:	9009883a 	mov	r4,r18
   4582c:	980b883a 	mov	r5,r19
   45830:	00474e80 	call	474e8 <_sbrk_r>
   45834:	1009883a 	mov	r4,r2
   45838:	15000426 	beq	r2,r20,4584c <_malloc_r+0x3f8>
   4583c:	854b883a 	add	r5,r16,r21
   45840:	1029883a 	mov	r20,r2
   45844:	11405a2e 	bgeu	r2,r5,459b0 <_malloc_r+0x55c>
   45848:	87000c26 	beq	r16,fp,4587c <_malloc_r+0x428>
   4584c:	e4000217 	ldw	r16,8(fp)
   45850:	80c00117 	ldw	r3,4(r16)
   45854:	00bfff04 	movi	r2,-4
   45858:	1884703a 	and	r2,r3,r2
   4585c:	14400336 	bltu	r2,r17,4586c <_malloc_r+0x418>
   45860:	1449c83a 	sub	r4,r2,r17
   45864:	008003c4 	movi	r2,15
   45868:	113fd316 	blt	r2,r4,457b8 <_malloc_r+0x364>
   4586c:	9009883a 	mov	r4,r18
   45870:	004a6200 	call	4a620 <__malloc_unlock>
   45874:	0007883a 	mov	r3,zero
   45878:	003f0a06 	br	454a4 <_malloc_r+0x50>
   4587c:	05d00034 	movhi	r23,16384
   45880:	bdc78904 	addi	r23,r23,7716
   45884:	b8800017 	ldw	r2,0(r23)
   45888:	988d883a 	add	r6,r19,r2
   4588c:	b9800015 	stw	r6,0(r23)
   45890:	d0e00517 	ldw	r3,-32748(gp)
   45894:	00bfffc4 	movi	r2,-1
   45898:	18808e26 	beq	r3,r2,45ad4 <_malloc_r+0x680>
   4589c:	2145c83a 	sub	r2,r4,r5
   458a0:	3085883a 	add	r2,r6,r2
   458a4:	b8800015 	stw	r2,0(r23)
   458a8:	20c001cc 	andi	r3,r4,7
   458ac:	18005f1e 	bne	r3,zero,45a2c <_malloc_r+0x5d8>
   458b0:	000b883a 	mov	r5,zero
   458b4:	a4c5883a 	add	r2,r20,r19
   458b8:	1083ffcc 	andi	r2,r2,4095
   458bc:	00c40004 	movi	r3,4096
   458c0:	1887c83a 	sub	r3,r3,r2
   458c4:	28e7883a 	add	r19,r5,r3
   458c8:	9009883a 	mov	r4,r18
   458cc:	980b883a 	mov	r5,r19
   458d0:	00474e80 	call	474e8 <_sbrk_r>
   458d4:	1007883a 	mov	r3,r2
   458d8:	00bfffc4 	movi	r2,-1
   458dc:	18807a26 	beq	r3,r2,45ac8 <_malloc_r+0x674>
   458e0:	1d05c83a 	sub	r2,r3,r20
   458e4:	9885883a 	add	r2,r19,r2
   458e8:	10c00054 	ori	r3,r2,1
   458ec:	b8800017 	ldw	r2,0(r23)
   458f0:	a021883a 	mov	r16,r20
   458f4:	a0c00115 	stw	r3,4(r20)
   458f8:	9885883a 	add	r2,r19,r2
   458fc:	b8800015 	stw	r2,0(r23)
   45900:	e5000215 	stw	r20,8(fp)
   45904:	b7003626 	beq	r22,fp,459e0 <_malloc_r+0x58c>
   45908:	018003c4 	movi	r6,15
   4590c:	35404b36 	bltu	r6,r21,45a3c <_malloc_r+0x5e8>
   45910:	00800044 	movi	r2,1
   45914:	a0800115 	stw	r2,4(r20)
   45918:	003fcd06 	br	45850 <_malloc_r+0x3fc>
   4591c:	2808d27a 	srli	r4,r5,9
   45920:	2000371e 	bne	r4,zero,45a00 <_malloc_r+0x5ac>
   45924:	2808d0fa 	srli	r4,r5,3
   45928:	200690fa 	slli	r3,r4,3
   4592c:	1ad1883a 	add	r8,r3,r11
   45930:	41800217 	ldw	r6,8(r8)
   45934:	41805b26 	beq	r8,r6,45aa4 <_malloc_r+0x650>
   45938:	30800117 	ldw	r2,4(r6)
   4593c:	00ffff04 	movi	r3,-4
   45940:	10c4703a 	and	r2,r2,r3
   45944:	2880022e 	bgeu	r5,r2,45950 <_malloc_r+0x4fc>
   45948:	31800217 	ldw	r6,8(r6)
   4594c:	41bffa1e 	bne	r8,r6,45938 <_malloc_r+0x4e4>
   45950:	32000317 	ldw	r8,12(r6)
   45954:	39c00117 	ldw	r7,4(r7)
   45958:	82000315 	stw	r8,12(r16)
   4595c:	81800215 	stw	r6,8(r16)
   45960:	07100034 	movhi	fp,16384
   45964:	e701e804 	addi	fp,fp,1952
   45968:	34000315 	stw	r16,12(r6)
   4596c:	44000215 	stw	r16,8(r8)
   45970:	003f3e06 	br	4566c <_malloc_r+0x218>
   45974:	63000044 	addi	r12,r12,1
   45978:	608000cc 	andi	r2,r12,3
   4597c:	10005d26 	beq	r2,zero,45af4 <_malloc_r+0x6a0>
   45980:	18c00204 	addi	r3,r3,8
   45984:	003f5106 	br	456cc <_malloc_r+0x278>
   45988:	8089883a 	add	r4,r16,r2
   4598c:	003f6d06 	br	45744 <_malloc_r+0x2f0>
   45990:	00805504 	movi	r2,340
   45994:	10c02036 	bltu	r2,r3,45a18 <_malloc_r+0x5c4>
   45998:	8804d3fa 	srli	r2,r17,15
   4599c:	11801dc4 	addi	r6,r2,119
   459a0:	300490fa 	slli	r2,r6,3
   459a4:	003ed806 	br	45508 <_malloc_r+0xb4>
   459a8:	48c000c4 	addi	r3,r9,3
   459ac:	003f3106 	br	45674 <_malloc_r+0x220>
   459b0:	05d00034 	movhi	r23,16384
   459b4:	bdc78904 	addi	r23,r23,7716
   459b8:	b8800017 	ldw	r2,0(r23)
   459bc:	988d883a 	add	r6,r19,r2
   459c0:	b9800015 	stw	r6,0(r23)
   459c4:	293fb21e 	bne	r5,r4,45890 <_malloc_r+0x43c>
   459c8:	2083ffcc 	andi	r2,r4,4095
   459cc:	103fb01e 	bne	r2,zero,45890 <_malloc_r+0x43c>
   459d0:	e4000217 	ldw	r16,8(fp)
   459d4:	9d45883a 	add	r2,r19,r21
   459d8:	10800054 	ori	r2,r2,1
   459dc:	80800115 	stw	r2,4(r16)
   459e0:	b8c00017 	ldw	r3,0(r23)
   459e4:	d0a01417 	ldw	r2,-32688(gp)
   459e8:	10c0012e 	bgeu	r2,r3,459f0 <_malloc_r+0x59c>
   459ec:	d0e01415 	stw	r3,-32688(gp)
   459f0:	d0a01517 	ldw	r2,-32684(gp)
   459f4:	10ff962e 	bgeu	r2,r3,45850 <_malloc_r+0x3fc>
   459f8:	d0e01515 	stw	r3,-32684(gp)
   459fc:	003f9406 	br	45850 <_malloc_r+0x3fc>
   45a00:	00800104 	movi	r2,4
   45a04:	11001e36 	bltu	r2,r4,45a80 <_malloc_r+0x62c>
   45a08:	2804d1ba 	srli	r2,r5,6
   45a0c:	11000e04 	addi	r4,r2,56
   45a10:	200690fa 	slli	r3,r4,3
   45a14:	003fc506 	br	4592c <_malloc_r+0x4d8>
   45a18:	00815504 	movi	r2,1364
   45a1c:	10c01d2e 	bgeu	r2,r3,45a94 <_malloc_r+0x640>
   45a20:	01801f84 	movi	r6,126
   45a24:	0080fc04 	movi	r2,1008
   45a28:	003eb706 	br	45508 <_malloc_r+0xb4>
   45a2c:	00800204 	movi	r2,8
   45a30:	10cbc83a 	sub	r5,r2,r3
   45a34:	2169883a 	add	r20,r4,r5
   45a38:	003f9e06 	br	458b4 <_malloc_r+0x460>
   45a3c:	00bffe04 	movi	r2,-8
   45a40:	a93ffd04 	addi	r4,r21,-12
   45a44:	2088703a 	and	r4,r4,r2
   45a48:	b10b883a 	add	r5,r22,r4
   45a4c:	00c00144 	movi	r3,5
   45a50:	28c00215 	stw	r3,8(r5)
   45a54:	28c00115 	stw	r3,4(r5)
   45a58:	b0800117 	ldw	r2,4(r22)
   45a5c:	1080004c 	andi	r2,r2,1
   45a60:	2084b03a 	or	r2,r4,r2
   45a64:	b0800115 	stw	r2,4(r22)
   45a68:	313fdd2e 	bgeu	r6,r4,459e0 <_malloc_r+0x58c>
   45a6c:	b1400204 	addi	r5,r22,8
   45a70:	9009883a 	mov	r4,r18
   45a74:	00448cc0 	call	448cc <_free_r>
   45a78:	e4000217 	ldw	r16,8(fp)
   45a7c:	003fd806 	br	459e0 <_malloc_r+0x58c>
   45a80:	00800504 	movi	r2,20
   45a84:	11001536 	bltu	r2,r4,45adc <_malloc_r+0x688>
   45a88:	210016c4 	addi	r4,r4,91
   45a8c:	200690fa 	slli	r3,r4,3
   45a90:	003fa606 	br	4592c <_malloc_r+0x4d8>
   45a94:	8804d4ba 	srli	r2,r17,18
   45a98:	11801f04 	addi	r6,r2,124
   45a9c:	300490fa 	slli	r2,r6,3
   45aa0:	003e9906 	br	45508 <_malloc_r+0xb4>
   45aa4:	2009d0ba 	srai	r4,r4,2
   45aa8:	01500034 	movhi	r5,16384
   45aac:	2941e804 	addi	r5,r5,1952
   45ab0:	00c00044 	movi	r3,1
   45ab4:	28800117 	ldw	r2,4(r5)
   45ab8:	1906983a 	sll	r3,r3,r4
   45abc:	10c4b03a 	or	r2,r2,r3
   45ac0:	28800115 	stw	r2,4(r5)
   45ac4:	003fa306 	br	45954 <_malloc_r+0x500>
   45ac8:	0027883a 	mov	r19,zero
   45acc:	00c00044 	movi	r3,1
   45ad0:	003f8606 	br	458ec <_malloc_r+0x498>
   45ad4:	d1200515 	stw	r4,-32748(gp)
   45ad8:	003f7306 	br	458a8 <_malloc_r+0x454>
   45adc:	00801504 	movi	r2,84
   45ae0:	11001936 	bltu	r2,r4,45b48 <_malloc_r+0x6f4>
   45ae4:	2804d33a 	srli	r2,r5,12
   45ae8:	11001b84 	addi	r4,r2,110
   45aec:	200690fa 	slli	r3,r4,3
   45af0:	003f8e06 	br	4592c <_malloc_r+0x4d8>
   45af4:	480b883a 	mov	r5,r9
   45af8:	6807883a 	mov	r3,r13
   45afc:	288000cc 	andi	r2,r5,3
   45b00:	18fffe04 	addi	r3,r3,-8
   45b04:	297fffc4 	addi	r5,r5,-1
   45b08:	10001526 	beq	r2,zero,45b60 <_malloc_r+0x70c>
   45b0c:	18800217 	ldw	r2,8(r3)
   45b10:	10fffa26 	beq	r2,r3,45afc <_malloc_r+0x6a8>
   45b14:	2109883a 	add	r4,r4,r4
   45b18:	393f1e36 	bltu	r7,r4,45794 <_malloc_r+0x340>
   45b1c:	203f1d26 	beq	r4,zero,45794 <_malloc_r+0x340>
   45b20:	21c4703a 	and	r2,r4,r7
   45b24:	10000226 	beq	r2,zero,45b30 <_malloc_r+0x6dc>
   45b28:	6013883a 	mov	r9,r12
   45b2c:	003ee106 	br	456b4 <_malloc_r+0x260>
   45b30:	2109883a 	add	r4,r4,r4
   45b34:	3904703a 	and	r2,r7,r4
   45b38:	63000104 	addi	r12,r12,4
   45b3c:	103ffc26 	beq	r2,zero,45b30 <_malloc_r+0x6dc>
   45b40:	6013883a 	mov	r9,r12
   45b44:	003edb06 	br	456b4 <_malloc_r+0x260>
   45b48:	00805504 	movi	r2,340
   45b4c:	11000836 	bltu	r2,r4,45b70 <_malloc_r+0x71c>
   45b50:	2804d3fa 	srli	r2,r5,15
   45b54:	11001dc4 	addi	r4,r2,119
   45b58:	200690fa 	slli	r3,r4,3
   45b5c:	003f7306 	br	4592c <_malloc_r+0x4d8>
   45b60:	0104303a 	nor	r2,zero,r4
   45b64:	388e703a 	and	r7,r7,r2
   45b68:	e1c00115 	stw	r7,4(fp)
   45b6c:	003fe906 	br	45b14 <_malloc_r+0x6c0>
   45b70:	00815504 	movi	r2,1364
   45b74:	1100032e 	bgeu	r2,r4,45b84 <_malloc_r+0x730>
   45b78:	01001f84 	movi	r4,126
   45b7c:	00c0fc04 	movi	r3,1008
   45b80:	003f6a06 	br	4592c <_malloc_r+0x4d8>
   45b84:	2804d4ba 	srli	r2,r5,18
   45b88:	11001f04 	addi	r4,r2,124
   45b8c:	200690fa 	slli	r3,r4,3
   45b90:	003f6606 	br	4592c <_malloc_r+0x4d8>

00045b94 <memchr>:
   45b94:	008000c4 	movi	r2,3
   45b98:	29403fcc 	andi	r5,r5,255
   45b9c:	2007883a 	mov	r3,r4
   45ba0:	1180022e 	bgeu	r2,r6,45bac <memchr+0x18>
   45ba4:	2084703a 	and	r2,r4,r2
   45ba8:	10000b26 	beq	r2,zero,45bd8 <memchr+0x44>
   45bac:	313fffc4 	addi	r4,r6,-1
   45bb0:	3000051e 	bne	r6,zero,45bc8 <memchr+0x34>
   45bb4:	00002c06 	br	45c68 <memchr+0xd4>
   45bb8:	213fffc4 	addi	r4,r4,-1
   45bbc:	00bfffc4 	movi	r2,-1
   45bc0:	18c00044 	addi	r3,r3,1
   45bc4:	20802826 	beq	r4,r2,45c68 <memchr+0xd4>
   45bc8:	18800003 	ldbu	r2,0(r3)
   45bcc:	28bffa1e 	bne	r5,r2,45bb8 <memchr+0x24>
   45bd0:	1805883a 	mov	r2,r3
   45bd4:	f800283a 	ret
   45bd8:	0011883a 	mov	r8,zero
   45bdc:	0007883a 	mov	r3,zero
   45be0:	01c00104 	movi	r7,4
   45be4:	4004923a 	slli	r2,r8,8
   45be8:	18c00044 	addi	r3,r3,1
   45bec:	1151883a 	add	r8,r2,r5
   45bf0:	19fffc1e 	bne	r3,r7,45be4 <memchr+0x50>
   45bf4:	02bfbff4 	movhi	r10,65279
   45bf8:	52bfbfc4 	addi	r10,r10,-257
   45bfc:	02602074 	movhi	r9,32897
   45c00:	4a602004 	addi	r9,r9,-32640
   45c04:	02c000c4 	movi	r11,3
   45c08:	20800017 	ldw	r2,0(r4)
   45c0c:	31bfff04 	addi	r6,r6,-4
   45c10:	200f883a 	mov	r7,r4
   45c14:	1204f03a 	xor	r2,r2,r8
   45c18:	1287883a 	add	r3,r2,r10
   45c1c:	1a46703a 	and	r3,r3,r9
   45c20:	0084303a 	nor	r2,zero,r2
   45c24:	10c4703a 	and	r2,r2,r3
   45c28:	10000b26 	beq	r2,zero,45c58 <memchr+0xc4>
   45c2c:	20800003 	ldbu	r2,0(r4)
   45c30:	28800f26 	beq	r5,r2,45c70 <memchr+0xdc>
   45c34:	20800043 	ldbu	r2,1(r4)
   45c38:	21c00044 	addi	r7,r4,1
   45c3c:	28800c26 	beq	r5,r2,45c70 <memchr+0xdc>
   45c40:	20800083 	ldbu	r2,2(r4)
   45c44:	21c00084 	addi	r7,r4,2
   45c48:	28800926 	beq	r5,r2,45c70 <memchr+0xdc>
   45c4c:	208000c3 	ldbu	r2,3(r4)
   45c50:	21c000c4 	addi	r7,r4,3
   45c54:	28800626 	beq	r5,r2,45c70 <memchr+0xdc>
   45c58:	21000104 	addi	r4,r4,4
   45c5c:	59bfea36 	bltu	r11,r6,45c08 <memchr+0x74>
   45c60:	2007883a 	mov	r3,r4
   45c64:	003fd106 	br	45bac <memchr+0x18>
   45c68:	0005883a 	mov	r2,zero
   45c6c:	f800283a 	ret
   45c70:	3805883a 	mov	r2,r7
   45c74:	f800283a 	ret

00045c78 <memcpy>:
   45c78:	01c003c4 	movi	r7,15
   45c7c:	2007883a 	mov	r3,r4
   45c80:	3980032e 	bgeu	r7,r6,45c90 <memcpy+0x18>
   45c84:	2904b03a 	or	r2,r5,r4
   45c88:	108000cc 	andi	r2,r2,3
   45c8c:	10000926 	beq	r2,zero,45cb4 <memcpy+0x3c>
   45c90:	30000626 	beq	r6,zero,45cac <memcpy+0x34>
   45c94:	30cd883a 	add	r6,r6,r3
   45c98:	28800003 	ldbu	r2,0(r5)
   45c9c:	29400044 	addi	r5,r5,1
   45ca0:	18800005 	stb	r2,0(r3)
   45ca4:	18c00044 	addi	r3,r3,1
   45ca8:	30fffb1e 	bne	r6,r3,45c98 <memcpy+0x20>
   45cac:	2005883a 	mov	r2,r4
   45cb0:	f800283a 	ret
   45cb4:	3811883a 	mov	r8,r7
   45cb8:	200f883a 	mov	r7,r4
   45cbc:	28c00017 	ldw	r3,0(r5)
   45cc0:	31bffc04 	addi	r6,r6,-16
   45cc4:	38c00015 	stw	r3,0(r7)
   45cc8:	28800117 	ldw	r2,4(r5)
   45ccc:	38800115 	stw	r2,4(r7)
   45cd0:	28c00217 	ldw	r3,8(r5)
   45cd4:	38c00215 	stw	r3,8(r7)
   45cd8:	28800317 	ldw	r2,12(r5)
   45cdc:	29400404 	addi	r5,r5,16
   45ce0:	38800315 	stw	r2,12(r7)
   45ce4:	39c00404 	addi	r7,r7,16
   45ce8:	41bff436 	bltu	r8,r6,45cbc <memcpy+0x44>
   45cec:	008000c4 	movi	r2,3
   45cf0:	1180072e 	bgeu	r2,r6,45d10 <memcpy+0x98>
   45cf4:	1007883a 	mov	r3,r2
   45cf8:	28800017 	ldw	r2,0(r5)
   45cfc:	31bfff04 	addi	r6,r6,-4
   45d00:	29400104 	addi	r5,r5,4
   45d04:	38800015 	stw	r2,0(r7)
   45d08:	39c00104 	addi	r7,r7,4
   45d0c:	19bffa36 	bltu	r3,r6,45cf8 <memcpy+0x80>
   45d10:	3807883a 	mov	r3,r7
   45d14:	003fde06 	br	45c90 <memcpy+0x18>

00045d18 <memmove>:
   45d18:	2807883a 	mov	r3,r5
   45d1c:	2011883a 	mov	r8,r4
   45d20:	29000c2e 	bgeu	r5,r4,45d54 <memmove+0x3c>
   45d24:	298f883a 	add	r7,r5,r6
   45d28:	21c00a2e 	bgeu	r4,r7,45d54 <memmove+0x3c>
   45d2c:	30000726 	beq	r6,zero,45d4c <memmove+0x34>
   45d30:	2187883a 	add	r3,r4,r6
   45d34:	198dc83a 	sub	r6,r3,r6
   45d38:	39ffffc4 	addi	r7,r7,-1
   45d3c:	38800003 	ldbu	r2,0(r7)
   45d40:	18ffffc4 	addi	r3,r3,-1
   45d44:	18800005 	stb	r2,0(r3)
   45d48:	19bffb1e 	bne	r3,r6,45d38 <memmove+0x20>
   45d4c:	2005883a 	mov	r2,r4
   45d50:	f800283a 	ret
   45d54:	01c003c4 	movi	r7,15
   45d58:	39800a36 	bltu	r7,r6,45d84 <memmove+0x6c>
   45d5c:	303ffb26 	beq	r6,zero,45d4c <memmove+0x34>
   45d60:	400f883a 	mov	r7,r8
   45d64:	320d883a 	add	r6,r6,r8
   45d68:	28800003 	ldbu	r2,0(r5)
   45d6c:	29400044 	addi	r5,r5,1
   45d70:	38800005 	stb	r2,0(r7)
   45d74:	39c00044 	addi	r7,r7,1
   45d78:	39bffb1e 	bne	r7,r6,45d68 <memmove+0x50>
   45d7c:	2005883a 	mov	r2,r4
   45d80:	f800283a 	ret
   45d84:	1904b03a 	or	r2,r3,r4
   45d88:	108000cc 	andi	r2,r2,3
   45d8c:	103ff31e 	bne	r2,zero,45d5c <memmove+0x44>
   45d90:	3811883a 	mov	r8,r7
   45d94:	180b883a 	mov	r5,r3
   45d98:	200f883a 	mov	r7,r4
   45d9c:	28c00017 	ldw	r3,0(r5)
   45da0:	31bffc04 	addi	r6,r6,-16
   45da4:	38c00015 	stw	r3,0(r7)
   45da8:	28800117 	ldw	r2,4(r5)
   45dac:	38800115 	stw	r2,4(r7)
   45db0:	28c00217 	ldw	r3,8(r5)
   45db4:	38c00215 	stw	r3,8(r7)
   45db8:	28800317 	ldw	r2,12(r5)
   45dbc:	29400404 	addi	r5,r5,16
   45dc0:	38800315 	stw	r2,12(r7)
   45dc4:	39c00404 	addi	r7,r7,16
   45dc8:	41bff436 	bltu	r8,r6,45d9c <memmove+0x84>
   45dcc:	008000c4 	movi	r2,3
   45dd0:	1180072e 	bgeu	r2,r6,45df0 <memmove+0xd8>
   45dd4:	1007883a 	mov	r3,r2
   45dd8:	28800017 	ldw	r2,0(r5)
   45ddc:	31bfff04 	addi	r6,r6,-4
   45de0:	29400104 	addi	r5,r5,4
   45de4:	38800015 	stw	r2,0(r7)
   45de8:	39c00104 	addi	r7,r7,4
   45dec:	19bffa36 	bltu	r3,r6,45dd8 <memmove+0xc0>
   45df0:	3811883a 	mov	r8,r7
   45df4:	003fd906 	br	45d5c <memmove+0x44>

00045df8 <memset>:
   45df8:	008000c4 	movi	r2,3
   45dfc:	29403fcc 	andi	r5,r5,255
   45e00:	2007883a 	mov	r3,r4
   45e04:	1180022e 	bgeu	r2,r6,45e10 <memset+0x18>
   45e08:	2084703a 	and	r2,r4,r2
   45e0c:	10000826 	beq	r2,zero,45e30 <memset+0x38>
   45e10:	30000526 	beq	r6,zero,45e28 <memset+0x30>
   45e14:	2805883a 	mov	r2,r5
   45e18:	30cd883a 	add	r6,r6,r3
   45e1c:	18800005 	stb	r2,0(r3)
   45e20:	18c00044 	addi	r3,r3,1
   45e24:	19bffd1e 	bne	r3,r6,45e1c <memset+0x24>
   45e28:	2005883a 	mov	r2,r4
   45e2c:	f800283a 	ret
   45e30:	2804923a 	slli	r2,r5,8
   45e34:	020003c4 	movi	r8,15
   45e38:	200f883a 	mov	r7,r4
   45e3c:	2884b03a 	or	r2,r5,r2
   45e40:	1006943a 	slli	r3,r2,16
   45e44:	10c6b03a 	or	r3,r2,r3
   45e48:	41800a2e 	bgeu	r8,r6,45e74 <memset+0x7c>
   45e4c:	4005883a 	mov	r2,r8
   45e50:	31bffc04 	addi	r6,r6,-16
   45e54:	38c00015 	stw	r3,0(r7)
   45e58:	38c00115 	stw	r3,4(r7)
   45e5c:	38c00215 	stw	r3,8(r7)
   45e60:	38c00315 	stw	r3,12(r7)
   45e64:	39c00404 	addi	r7,r7,16
   45e68:	11bff936 	bltu	r2,r6,45e50 <memset+0x58>
   45e6c:	008000c4 	movi	r2,3
   45e70:	1180052e 	bgeu	r2,r6,45e88 <memset+0x90>
   45e74:	31bfff04 	addi	r6,r6,-4
   45e78:	008000c4 	movi	r2,3
   45e7c:	38c00015 	stw	r3,0(r7)
   45e80:	39c00104 	addi	r7,r7,4
   45e84:	11bffb36 	bltu	r2,r6,45e74 <memset+0x7c>
   45e88:	3807883a 	mov	r3,r7
   45e8c:	003fe006 	br	45e10 <memset+0x18>

00045e90 <_Bfree>:
   45e90:	28000826 	beq	r5,zero,45eb4 <_Bfree+0x24>
   45e94:	28800117 	ldw	r2,4(r5)
   45e98:	21001317 	ldw	r4,76(r4)
   45e9c:	1085883a 	add	r2,r2,r2
   45ea0:	1085883a 	add	r2,r2,r2
   45ea4:	1105883a 	add	r2,r2,r4
   45ea8:	10c00017 	ldw	r3,0(r2)
   45eac:	28c00015 	stw	r3,0(r5)
   45eb0:	11400015 	stw	r5,0(r2)
   45eb4:	f800283a 	ret

00045eb8 <__hi0bits>:
   45eb8:	20bfffec 	andhi	r2,r4,65535
   45ebc:	10001426 	beq	r2,zero,45f10 <__hi0bits+0x58>
   45ec0:	0007883a 	mov	r3,zero
   45ec4:	20bfc02c 	andhi	r2,r4,65280
   45ec8:	1000021e 	bne	r2,zero,45ed4 <__hi0bits+0x1c>
   45ecc:	2008923a 	slli	r4,r4,8
   45ed0:	18c00204 	addi	r3,r3,8
   45ed4:	20bc002c 	andhi	r2,r4,61440
   45ed8:	1000021e 	bne	r2,zero,45ee4 <__hi0bits+0x2c>
   45edc:	2008913a 	slli	r4,r4,4
   45ee0:	18c00104 	addi	r3,r3,4
   45ee4:	20b0002c 	andhi	r2,r4,49152
   45ee8:	1000031e 	bne	r2,zero,45ef8 <__hi0bits+0x40>
   45eec:	2105883a 	add	r2,r4,r4
   45ef0:	18c00084 	addi	r3,r3,2
   45ef4:	1089883a 	add	r4,r2,r2
   45ef8:	20000316 	blt	r4,zero,45f08 <__hi0bits+0x50>
   45efc:	2090002c 	andhi	r2,r4,16384
   45f00:	10000626 	beq	r2,zero,45f1c <__hi0bits+0x64>
   45f04:	18c00044 	addi	r3,r3,1
   45f08:	1805883a 	mov	r2,r3
   45f0c:	f800283a 	ret
   45f10:	2008943a 	slli	r4,r4,16
   45f14:	00c00404 	movi	r3,16
   45f18:	003fea06 	br	45ec4 <__hi0bits+0xc>
   45f1c:	00c00804 	movi	r3,32
   45f20:	1805883a 	mov	r2,r3
   45f24:	f800283a 	ret

00045f28 <__lo0bits>:
   45f28:	20c00017 	ldw	r3,0(r4)
   45f2c:	188001cc 	andi	r2,r3,7
   45f30:	10000a26 	beq	r2,zero,45f5c <__lo0bits+0x34>
   45f34:	1880004c 	andi	r2,r3,1
   45f38:	1005003a 	cmpeq	r2,r2,zero
   45f3c:	10002126 	beq	r2,zero,45fc4 <__lo0bits+0x9c>
   45f40:	1880008c 	andi	r2,r3,2
   45f44:	1000251e 	bne	r2,zero,45fdc <__lo0bits+0xb4>
   45f48:	1804d0ba 	srli	r2,r3,2
   45f4c:	01400084 	movi	r5,2
   45f50:	20800015 	stw	r2,0(r4)
   45f54:	2805883a 	mov	r2,r5
   45f58:	f800283a 	ret
   45f5c:	18bfffcc 	andi	r2,r3,65535
   45f60:	10001526 	beq	r2,zero,45fb8 <__lo0bits+0x90>
   45f64:	000b883a 	mov	r5,zero
   45f68:	18803fcc 	andi	r2,r3,255
   45f6c:	1000021e 	bne	r2,zero,45f78 <__lo0bits+0x50>
   45f70:	1806d23a 	srli	r3,r3,8
   45f74:	29400204 	addi	r5,r5,8
   45f78:	188003cc 	andi	r2,r3,15
   45f7c:	1000021e 	bne	r2,zero,45f88 <__lo0bits+0x60>
   45f80:	1806d13a 	srli	r3,r3,4
   45f84:	29400104 	addi	r5,r5,4
   45f88:	188000cc 	andi	r2,r3,3
   45f8c:	1000021e 	bne	r2,zero,45f98 <__lo0bits+0x70>
   45f90:	1806d0ba 	srli	r3,r3,2
   45f94:	29400084 	addi	r5,r5,2
   45f98:	1880004c 	andi	r2,r3,1
   45f9c:	1000031e 	bne	r2,zero,45fac <__lo0bits+0x84>
   45fa0:	1806d07a 	srli	r3,r3,1
   45fa4:	18000a26 	beq	r3,zero,45fd0 <__lo0bits+0xa8>
   45fa8:	29400044 	addi	r5,r5,1
   45fac:	2805883a 	mov	r2,r5
   45fb0:	20c00015 	stw	r3,0(r4)
   45fb4:	f800283a 	ret
   45fb8:	1806d43a 	srli	r3,r3,16
   45fbc:	01400404 	movi	r5,16
   45fc0:	003fe906 	br	45f68 <__lo0bits+0x40>
   45fc4:	000b883a 	mov	r5,zero
   45fc8:	2805883a 	mov	r2,r5
   45fcc:	f800283a 	ret
   45fd0:	01400804 	movi	r5,32
   45fd4:	2805883a 	mov	r2,r5
   45fd8:	f800283a 	ret
   45fdc:	1804d07a 	srli	r2,r3,1
   45fe0:	01400044 	movi	r5,1
   45fe4:	20800015 	stw	r2,0(r4)
   45fe8:	003fda06 	br	45f54 <__lo0bits+0x2c>

00045fec <__mcmp>:
   45fec:	20800417 	ldw	r2,16(r4)
   45ff0:	28c00417 	ldw	r3,16(r5)
   45ff4:	10cfc83a 	sub	r7,r2,r3
   45ff8:	38000c1e 	bne	r7,zero,4602c <__mcmp+0x40>
   45ffc:	18c5883a 	add	r2,r3,r3
   46000:	1085883a 	add	r2,r2,r2
   46004:	10c00504 	addi	r3,r2,20
   46008:	21000504 	addi	r4,r4,20
   4600c:	28cb883a 	add	r5,r5,r3
   46010:	2085883a 	add	r2,r4,r2
   46014:	10bfff04 	addi	r2,r2,-4
   46018:	297fff04 	addi	r5,r5,-4
   4601c:	11800017 	ldw	r6,0(r2)
   46020:	28c00017 	ldw	r3,0(r5)
   46024:	30c0031e 	bne	r6,r3,46034 <__mcmp+0x48>
   46028:	20bffa36 	bltu	r4,r2,46014 <__mcmp+0x28>
   4602c:	3805883a 	mov	r2,r7
   46030:	f800283a 	ret
   46034:	30c00336 	bltu	r6,r3,46044 <__mcmp+0x58>
   46038:	01c00044 	movi	r7,1
   4603c:	3805883a 	mov	r2,r7
   46040:	f800283a 	ret
   46044:	01ffffc4 	movi	r7,-1
   46048:	003ff806 	br	4602c <__mcmp+0x40>

0004604c <__ulp>:
   4604c:	295ffc2c 	andhi	r5,r5,32752
   46050:	013f3034 	movhi	r4,64704
   46054:	290b883a 	add	r5,r5,r4
   46058:	0145c83a 	sub	r2,zero,r5
   4605c:	1007d53a 	srai	r3,r2,20
   46060:	000d883a 	mov	r6,zero
   46064:	0140040e 	bge	zero,r5,46078 <__ulp+0x2c>
   46068:	280f883a 	mov	r7,r5
   4606c:	3807883a 	mov	r3,r7
   46070:	3005883a 	mov	r2,r6
   46074:	f800283a 	ret
   46078:	008004c4 	movi	r2,19
   4607c:	193ffb04 	addi	r4,r3,-20
   46080:	10c00c0e 	bge	r2,r3,460b4 <__ulp+0x68>
   46084:	008007c4 	movi	r2,31
   46088:	1107c83a 	sub	r3,r2,r4
   4608c:	00800784 	movi	r2,30
   46090:	01400044 	movi	r5,1
   46094:	11000216 	blt	r2,r4,460a0 <__ulp+0x54>
   46098:	00800044 	movi	r2,1
   4609c:	10ca983a 	sll	r5,r2,r3
   460a0:	000f883a 	mov	r7,zero
   460a4:	280d883a 	mov	r6,r5
   460a8:	3807883a 	mov	r3,r7
   460ac:	3005883a 	mov	r2,r6
   460b0:	f800283a 	ret
   460b4:	00800234 	movhi	r2,8
   460b8:	10cfd83a 	sra	r7,r2,r3
   460bc:	000d883a 	mov	r6,zero
   460c0:	3005883a 	mov	r2,r6
   460c4:	3807883a 	mov	r3,r7
   460c8:	f800283a 	ret

000460cc <__b2d>:
   460cc:	20800417 	ldw	r2,16(r4)
   460d0:	defff904 	addi	sp,sp,-28
   460d4:	dd000415 	stw	r20,16(sp)
   460d8:	1085883a 	add	r2,r2,r2
   460dc:	25000504 	addi	r20,r4,20
   460e0:	1085883a 	add	r2,r2,r2
   460e4:	dc000015 	stw	r16,0(sp)
   460e8:	a0a1883a 	add	r16,r20,r2
   460ec:	dd400515 	stw	r21,20(sp)
   460f0:	857fff17 	ldw	r21,-4(r16)
   460f4:	dc400115 	stw	r17,4(sp)
   460f8:	dfc00615 	stw	ra,24(sp)
   460fc:	a809883a 	mov	r4,r21
   46100:	2823883a 	mov	r17,r5
   46104:	dcc00315 	stw	r19,12(sp)
   46108:	dc800215 	stw	r18,8(sp)
   4610c:	0045eb80 	call	45eb8 <__hi0bits>
   46110:	100b883a 	mov	r5,r2
   46114:	00800804 	movi	r2,32
   46118:	1145c83a 	sub	r2,r2,r5
   4611c:	88800015 	stw	r2,0(r17)
   46120:	00800284 	movi	r2,10
   46124:	80ffff04 	addi	r3,r16,-4
   46128:	11401416 	blt	r2,r5,4617c <__b2d+0xb0>
   4612c:	008002c4 	movi	r2,11
   46130:	1149c83a 	sub	r4,r2,r5
   46134:	a0c02736 	bltu	r20,r3,461d4 <__b2d+0x108>
   46138:	000d883a 	mov	r6,zero
   4613c:	28800544 	addi	r2,r5,21
   46140:	a906d83a 	srl	r3,r21,r4
   46144:	a884983a 	sll	r2,r21,r2
   46148:	1ccffc34 	orhi	r19,r3,16368
   4614c:	11a4b03a 	or	r18,r2,r6
   46150:	9005883a 	mov	r2,r18
   46154:	9807883a 	mov	r3,r19
   46158:	dfc00617 	ldw	ra,24(sp)
   4615c:	dd400517 	ldw	r21,20(sp)
   46160:	dd000417 	ldw	r20,16(sp)
   46164:	dcc00317 	ldw	r19,12(sp)
   46168:	dc800217 	ldw	r18,8(sp)
   4616c:	dc400117 	ldw	r17,4(sp)
   46170:	dc000017 	ldw	r16,0(sp)
   46174:	dec00704 	addi	sp,sp,28
   46178:	f800283a 	ret
   4617c:	a0c00e36 	bltu	r20,r3,461b8 <__b2d+0xec>
   46180:	293ffd44 	addi	r4,r5,-11
   46184:	000d883a 	mov	r6,zero
   46188:	20000f26 	beq	r4,zero,461c8 <__b2d+0xfc>
   4618c:	00800804 	movi	r2,32
   46190:	110bc83a 	sub	r5,r2,r4
   46194:	a0c01236 	bltu	r20,r3,461e0 <__b2d+0x114>
   46198:	000f883a 	mov	r7,zero
   4619c:	a904983a 	sll	r2,r21,r4
   461a0:	3146d83a 	srl	r3,r6,r5
   461a4:	3108983a 	sll	r4,r6,r4
   461a8:	108ffc34 	orhi	r2,r2,16368
   461ac:	18a6b03a 	or	r19,r3,r2
   461b0:	3924b03a 	or	r18,r7,r4
   461b4:	003fe606 	br	46150 <__b2d+0x84>
   461b8:	293ffd44 	addi	r4,r5,-11
   461bc:	81bffe17 	ldw	r6,-8(r16)
   461c0:	80fffe04 	addi	r3,r16,-8
   461c4:	203ff11e 	bne	r4,zero,4618c <__b2d+0xc0>
   461c8:	accffc34 	orhi	r19,r21,16368
   461cc:	3025883a 	mov	r18,r6
   461d0:	003fdf06 	br	46150 <__b2d+0x84>
   461d4:	18bfff17 	ldw	r2,-4(r3)
   461d8:	110cd83a 	srl	r6,r2,r4
   461dc:	003fd706 	br	4613c <__b2d+0x70>
   461e0:	18bfff17 	ldw	r2,-4(r3)
   461e4:	114ed83a 	srl	r7,r2,r5
   461e8:	003fec06 	br	4619c <__b2d+0xd0>

000461ec <__ratio>:
   461ec:	defff904 	addi	sp,sp,-28
   461f0:	dc400215 	stw	r17,8(sp)
   461f4:	2823883a 	mov	r17,r5
   461f8:	d80b883a 	mov	r5,sp
   461fc:	dfc00615 	stw	ra,24(sp)
   46200:	dd000515 	stw	r20,20(sp)
   46204:	dcc00415 	stw	r19,16(sp)
   46208:	dc800315 	stw	r18,12(sp)
   4620c:	2025883a 	mov	r18,r4
   46210:	00460cc0 	call	460cc <__b2d>
   46214:	8809883a 	mov	r4,r17
   46218:	d9400104 	addi	r5,sp,4
   4621c:	1027883a 	mov	r19,r2
   46220:	1829883a 	mov	r20,r3
   46224:	00460cc0 	call	460cc <__b2d>
   46228:	89000417 	ldw	r4,16(r17)
   4622c:	91c00417 	ldw	r7,16(r18)
   46230:	d9800117 	ldw	r6,4(sp)
   46234:	180b883a 	mov	r5,r3
   46238:	390fc83a 	sub	r7,r7,r4
   4623c:	1009883a 	mov	r4,r2
   46240:	d8800017 	ldw	r2,0(sp)
   46244:	380e917a 	slli	r7,r7,5
   46248:	2011883a 	mov	r8,r4
   4624c:	1185c83a 	sub	r2,r2,r6
   46250:	11c5883a 	add	r2,r2,r7
   46254:	1006953a 	slli	r3,r2,20
   46258:	2813883a 	mov	r9,r5
   4625c:	00800d0e 	bge	zero,r2,46294 <__ratio+0xa8>
   46260:	1d29883a 	add	r20,r3,r20
   46264:	a00b883a 	mov	r5,r20
   46268:	480f883a 	mov	r7,r9
   4626c:	9809883a 	mov	r4,r19
   46270:	400d883a 	mov	r6,r8
   46274:	00490380 	call	49038 <__divdf3>
   46278:	dfc00617 	ldw	ra,24(sp)
   4627c:	dd000517 	ldw	r20,20(sp)
   46280:	dcc00417 	ldw	r19,16(sp)
   46284:	dc800317 	ldw	r18,12(sp)
   46288:	dc400217 	ldw	r17,8(sp)
   4628c:	dec00704 	addi	sp,sp,28
   46290:	f800283a 	ret
   46294:	28d3c83a 	sub	r9,r5,r3
   46298:	003ff206 	br	46264 <__ratio+0x78>

0004629c <_mprec_log10>:
   4629c:	defffe04 	addi	sp,sp,-8
   462a0:	008005c4 	movi	r2,23
   462a4:	dc000015 	stw	r16,0(sp)
   462a8:	dfc00115 	stw	ra,4(sp)
   462ac:	2021883a 	mov	r16,r4
   462b0:	11000c16 	blt	r2,r4,462e4 <_mprec_log10+0x48>
   462b4:	200490fa 	slli	r2,r4,3
   462b8:	00d00034 	movhi	r3,16384
   462bc:	18c04c04 	addi	r3,r3,304
   462c0:	10c5883a 	add	r2,r2,r3
   462c4:	12400117 	ldw	r9,4(r2)
   462c8:	12000017 	ldw	r8,0(r2)
   462cc:	4807883a 	mov	r3,r9
   462d0:	4005883a 	mov	r2,r8
   462d4:	dfc00117 	ldw	ra,4(sp)
   462d8:	dc000017 	ldw	r16,0(sp)
   462dc:	dec00204 	addi	sp,sp,8
   462e0:	f800283a 	ret
   462e4:	0011883a 	mov	r8,zero
   462e8:	024ffc34 	movhi	r9,16368
   462ec:	0005883a 	mov	r2,zero
   462f0:	00d00934 	movhi	r3,16420
   462f4:	480b883a 	mov	r5,r9
   462f8:	4009883a 	mov	r4,r8
   462fc:	180f883a 	mov	r7,r3
   46300:	100d883a 	mov	r6,r2
   46304:	0048c840 	call	48c84 <__muldf3>
   46308:	843fffc4 	addi	r16,r16,-1
   4630c:	1011883a 	mov	r8,r2
   46310:	1813883a 	mov	r9,r3
   46314:	803ff51e 	bne	r16,zero,462ec <_mprec_log10+0x50>
   46318:	4005883a 	mov	r2,r8
   4631c:	4807883a 	mov	r3,r9
   46320:	dfc00117 	ldw	ra,4(sp)
   46324:	dc000017 	ldw	r16,0(sp)
   46328:	dec00204 	addi	sp,sp,8
   4632c:	f800283a 	ret

00046330 <__copybits>:
   46330:	297fffc4 	addi	r5,r5,-1
   46334:	30800417 	ldw	r2,16(r6)
   46338:	280bd17a 	srai	r5,r5,5
   4633c:	31800504 	addi	r6,r6,20
   46340:	1085883a 	add	r2,r2,r2
   46344:	294b883a 	add	r5,r5,r5
   46348:	294b883a 	add	r5,r5,r5
   4634c:	1085883a 	add	r2,r2,r2
   46350:	290b883a 	add	r5,r5,r4
   46354:	3087883a 	add	r3,r6,r2
   46358:	29400104 	addi	r5,r5,4
   4635c:	30c0052e 	bgeu	r6,r3,46374 <__copybits+0x44>
   46360:	30800017 	ldw	r2,0(r6)
   46364:	31800104 	addi	r6,r6,4
   46368:	20800015 	stw	r2,0(r4)
   4636c:	21000104 	addi	r4,r4,4
   46370:	30fffb36 	bltu	r6,r3,46360 <__copybits+0x30>
   46374:	2140032e 	bgeu	r4,r5,46384 <__copybits+0x54>
   46378:	20000015 	stw	zero,0(r4)
   4637c:	21000104 	addi	r4,r4,4
   46380:	217ffd36 	bltu	r4,r5,46378 <__copybits+0x48>
   46384:	f800283a 	ret

00046388 <__any_on>:
   46388:	20800417 	ldw	r2,16(r4)
   4638c:	2807d17a 	srai	r3,r5,5
   46390:	21000504 	addi	r4,r4,20
   46394:	10c00d0e 	bge	r2,r3,463cc <__any_on+0x44>
   46398:	1085883a 	add	r2,r2,r2
   4639c:	1085883a 	add	r2,r2,r2
   463a0:	208d883a 	add	r6,r4,r2
   463a4:	2180182e 	bgeu	r4,r6,46408 <__any_on+0x80>
   463a8:	30bfff17 	ldw	r2,-4(r6)
   463ac:	30ffff04 	addi	r3,r6,-4
   463b0:	1000041e 	bne	r2,zero,463c4 <__any_on+0x3c>
   463b4:	20c0142e 	bgeu	r4,r3,46408 <__any_on+0x80>
   463b8:	18ffff04 	addi	r3,r3,-4
   463bc:	18800017 	ldw	r2,0(r3)
   463c0:	103ffc26 	beq	r2,zero,463b4 <__any_on+0x2c>
   463c4:	00800044 	movi	r2,1
   463c8:	f800283a 	ret
   463cc:	18800a0e 	bge	r3,r2,463f8 <__any_on+0x70>
   463d0:	294007cc 	andi	r5,r5,31
   463d4:	28000826 	beq	r5,zero,463f8 <__any_on+0x70>
   463d8:	18c5883a 	add	r2,r3,r3
   463dc:	1085883a 	add	r2,r2,r2
   463e0:	208d883a 	add	r6,r4,r2
   463e4:	30c00017 	ldw	r3,0(r6)
   463e8:	1944d83a 	srl	r2,r3,r5
   463ec:	1144983a 	sll	r2,r2,r5
   463f0:	18bff41e 	bne	r3,r2,463c4 <__any_on+0x3c>
   463f4:	003feb06 	br	463a4 <__any_on+0x1c>
   463f8:	18c5883a 	add	r2,r3,r3
   463fc:	1085883a 	add	r2,r2,r2
   46400:	208d883a 	add	r6,r4,r2
   46404:	003fe706 	br	463a4 <__any_on+0x1c>
   46408:	0005883a 	mov	r2,zero
   4640c:	f800283a 	ret

00046410 <_Balloc>:
   46410:	20c01317 	ldw	r3,76(r4)
   46414:	defffb04 	addi	sp,sp,-20
   46418:	dcc00315 	stw	r19,12(sp)
   4641c:	dc800215 	stw	r18,8(sp)
   46420:	dfc00415 	stw	ra,16(sp)
   46424:	2825883a 	mov	r18,r5
   46428:	dc400115 	stw	r17,4(sp)
   4642c:	dc000015 	stw	r16,0(sp)
   46430:	2027883a 	mov	r19,r4
   46434:	01800404 	movi	r6,16
   46438:	01400104 	movi	r5,4
   4643c:	18001726 	beq	r3,zero,4649c <_Balloc+0x8c>
   46440:	01400044 	movi	r5,1
   46444:	9485883a 	add	r2,r18,r18
   46448:	2ca2983a 	sll	r17,r5,r18
   4644c:	1085883a 	add	r2,r2,r2
   46450:	10c7883a 	add	r3,r2,r3
   46454:	1c000017 	ldw	r16,0(r3)
   46458:	8c4d883a 	add	r6,r17,r17
   4645c:	318d883a 	add	r6,r6,r6
   46460:	9809883a 	mov	r4,r19
   46464:	31800504 	addi	r6,r6,20
   46468:	80001226 	beq	r16,zero,464b4 <_Balloc+0xa4>
   4646c:	80800017 	ldw	r2,0(r16)
   46470:	18800015 	stw	r2,0(r3)
   46474:	80000415 	stw	zero,16(r16)
   46478:	80000315 	stw	zero,12(r16)
   4647c:	8005883a 	mov	r2,r16
   46480:	dfc00417 	ldw	ra,16(sp)
   46484:	dcc00317 	ldw	r19,12(sp)
   46488:	dc800217 	ldw	r18,8(sp)
   4648c:	dc400117 	ldw	r17,4(sp)
   46490:	dc000017 	ldw	r16,0(sp)
   46494:	dec00504 	addi	sp,sp,20
   46498:	f800283a 	ret
   4649c:	00477d80 	call	477d8 <_calloc_r>
   464a0:	1007883a 	mov	r3,r2
   464a4:	0021883a 	mov	r16,zero
   464a8:	98801315 	stw	r2,76(r19)
   464ac:	103fe41e 	bne	r2,zero,46440 <_Balloc+0x30>
   464b0:	003ff206 	br	4647c <_Balloc+0x6c>
   464b4:	00477d80 	call	477d8 <_calloc_r>
   464b8:	103ff026 	beq	r2,zero,4647c <_Balloc+0x6c>
   464bc:	1021883a 	mov	r16,r2
   464c0:	14800115 	stw	r18,4(r2)
   464c4:	14400215 	stw	r17,8(r2)
   464c8:	003fea06 	br	46474 <_Balloc+0x64>

000464cc <__d2b>:
   464cc:	defff504 	addi	sp,sp,-44
   464d0:	dcc00515 	stw	r19,20(sp)
   464d4:	04c00044 	movi	r19,1
   464d8:	dc000215 	stw	r16,8(sp)
   464dc:	2821883a 	mov	r16,r5
   464e0:	980b883a 	mov	r5,r19
   464e4:	ddc00915 	stw	r23,36(sp)
   464e8:	dd800815 	stw	r22,32(sp)
   464ec:	dd400715 	stw	r21,28(sp)
   464f0:	dd000615 	stw	r20,24(sp)
   464f4:	dc800415 	stw	r18,16(sp)
   464f8:	dc400315 	stw	r17,12(sp)
   464fc:	dfc00a15 	stw	ra,40(sp)
   46500:	3023883a 	mov	r17,r6
   46504:	382d883a 	mov	r22,r7
   46508:	ddc00b17 	ldw	r23,44(sp)
   4650c:	00464100 	call	46410 <_Balloc>
   46510:	1025883a 	mov	r18,r2
   46514:	00a00034 	movhi	r2,32768
   46518:	10bfffc4 	addi	r2,r2,-1
   4651c:	8888703a 	and	r4,r17,r2
   46520:	202ad53a 	srli	r21,r4,20
   46524:	00800434 	movhi	r2,16
   46528:	10bfffc4 	addi	r2,r2,-1
   4652c:	8886703a 	and	r3,r17,r2
   46530:	a829003a 	cmpeq	r20,r21,zero
   46534:	800b883a 	mov	r5,r16
   46538:	d8c00115 	stw	r3,4(sp)
   4653c:	94000504 	addi	r16,r18,20
   46540:	a000021e 	bne	r20,zero,4654c <__d2b+0x80>
   46544:	18c00434 	orhi	r3,r3,16
   46548:	d8c00115 	stw	r3,4(sp)
   4654c:	28002726 	beq	r5,zero,465ec <__d2b+0x120>
   46550:	d809883a 	mov	r4,sp
   46554:	d9400015 	stw	r5,0(sp)
   46558:	0045f280 	call	45f28 <__lo0bits>
   4655c:	100d883a 	mov	r6,r2
   46560:	10003526 	beq	r2,zero,46638 <__d2b+0x16c>
   46564:	d8c00117 	ldw	r3,4(sp)
   46568:	00800804 	movi	r2,32
   4656c:	1185c83a 	sub	r2,r2,r6
   46570:	d9000017 	ldw	r4,0(sp)
   46574:	1886983a 	sll	r3,r3,r2
   46578:	1906b03a 	or	r3,r3,r4
   4657c:	90c00515 	stw	r3,20(r18)
   46580:	d8c00117 	ldw	r3,4(sp)
   46584:	1986d83a 	srl	r3,r3,r6
   46588:	d8c00115 	stw	r3,4(sp)
   4658c:	180b003a 	cmpeq	r5,r3,zero
   46590:	00800084 	movi	r2,2
   46594:	114bc83a 	sub	r5,r2,r5
   46598:	80c00115 	stw	r3,4(r16)
   4659c:	91400415 	stw	r5,16(r18)
   465a0:	a0001a1e 	bne	r20,zero,4660c <__d2b+0x140>
   465a4:	3545883a 	add	r2,r6,r21
   465a8:	10bef344 	addi	r2,r2,-1075
   465ac:	00c00d44 	movi	r3,53
   465b0:	b0800015 	stw	r2,0(r22)
   465b4:	1987c83a 	sub	r3,r3,r6
   465b8:	b8c00015 	stw	r3,0(r23)
   465bc:	9005883a 	mov	r2,r18
   465c0:	dfc00a17 	ldw	ra,40(sp)
   465c4:	ddc00917 	ldw	r23,36(sp)
   465c8:	dd800817 	ldw	r22,32(sp)
   465cc:	dd400717 	ldw	r21,28(sp)
   465d0:	dd000617 	ldw	r20,24(sp)
   465d4:	dcc00517 	ldw	r19,20(sp)
   465d8:	dc800417 	ldw	r18,16(sp)
   465dc:	dc400317 	ldw	r17,12(sp)
   465e0:	dc000217 	ldw	r16,8(sp)
   465e4:	dec00b04 	addi	sp,sp,44
   465e8:	f800283a 	ret
   465ec:	d9000104 	addi	r4,sp,4
   465f0:	0045f280 	call	45f28 <__lo0bits>
   465f4:	11800804 	addi	r6,r2,32
   465f8:	d8800117 	ldw	r2,4(sp)
   465fc:	94c00415 	stw	r19,16(r18)
   46600:	980b883a 	mov	r5,r19
   46604:	90800515 	stw	r2,20(r18)
   46608:	a03fe626 	beq	r20,zero,465a4 <__d2b+0xd8>
   4660c:	2945883a 	add	r2,r5,r5
   46610:	1085883a 	add	r2,r2,r2
   46614:	1405883a 	add	r2,r2,r16
   46618:	113fff17 	ldw	r4,-4(r2)
   4661c:	30fef384 	addi	r3,r6,-1074
   46620:	2820917a 	slli	r16,r5,5
   46624:	b0c00015 	stw	r3,0(r22)
   46628:	0045eb80 	call	45eb8 <__hi0bits>
   4662c:	80a1c83a 	sub	r16,r16,r2
   46630:	bc000015 	stw	r16,0(r23)
   46634:	003fe106 	br	465bc <__d2b+0xf0>
   46638:	d8800017 	ldw	r2,0(sp)
   4663c:	90800515 	stw	r2,20(r18)
   46640:	d8c00117 	ldw	r3,4(sp)
   46644:	003fd106 	br	4658c <__d2b+0xc0>

00046648 <__mdiff>:
   46648:	defffb04 	addi	sp,sp,-20
   4664c:	dc000015 	stw	r16,0(sp)
   46650:	2821883a 	mov	r16,r5
   46654:	dc800215 	stw	r18,8(sp)
   46658:	300b883a 	mov	r5,r6
   4665c:	2025883a 	mov	r18,r4
   46660:	8009883a 	mov	r4,r16
   46664:	dc400115 	stw	r17,4(sp)
   46668:	dfc00415 	stw	ra,16(sp)
   4666c:	dcc00315 	stw	r19,12(sp)
   46670:	3023883a 	mov	r17,r6
   46674:	0045fec0 	call	45fec <__mcmp>
   46678:	10004226 	beq	r2,zero,46784 <__mdiff+0x13c>
   4667c:	10005016 	blt	r2,zero,467c0 <__mdiff+0x178>
   46680:	0027883a 	mov	r19,zero
   46684:	81400117 	ldw	r5,4(r16)
   46688:	9009883a 	mov	r4,r18
   4668c:	00464100 	call	46410 <_Balloc>
   46690:	1019883a 	mov	r12,r2
   46694:	82800417 	ldw	r10,16(r16)
   46698:	88800417 	ldw	r2,16(r17)
   4669c:	81800504 	addi	r6,r16,20
   466a0:	5287883a 	add	r3,r10,r10
   466a4:	1085883a 	add	r2,r2,r2
   466a8:	18c7883a 	add	r3,r3,r3
   466ac:	1085883a 	add	r2,r2,r2
   466b0:	8a000504 	addi	r8,r17,20
   466b4:	64c00315 	stw	r19,12(r12)
   466b8:	30db883a 	add	r13,r6,r3
   466bc:	4097883a 	add	r11,r8,r2
   466c0:	61c00504 	addi	r7,r12,20
   466c4:	0013883a 	mov	r9,zero
   466c8:	31000017 	ldw	r4,0(r6)
   466cc:	41400017 	ldw	r5,0(r8)
   466d0:	42000104 	addi	r8,r8,4
   466d4:	20bfffcc 	andi	r2,r4,65535
   466d8:	28ffffcc 	andi	r3,r5,65535
   466dc:	10c5c83a 	sub	r2,r2,r3
   466e0:	1245883a 	add	r2,r2,r9
   466e4:	2008d43a 	srli	r4,r4,16
   466e8:	280ad43a 	srli	r5,r5,16
   466ec:	1007d43a 	srai	r3,r2,16
   466f0:	3880000d 	sth	r2,0(r7)
   466f4:	2149c83a 	sub	r4,r4,r5
   466f8:	20c9883a 	add	r4,r4,r3
   466fc:	3900008d 	sth	r4,2(r7)
   46700:	31800104 	addi	r6,r6,4
   46704:	39c00104 	addi	r7,r7,4
   46708:	2013d43a 	srai	r9,r4,16
   4670c:	42ffee36 	bltu	r8,r11,466c8 <__mdiff+0x80>
   46710:	33400c2e 	bgeu	r6,r13,46744 <__mdiff+0xfc>
   46714:	30800017 	ldw	r2,0(r6)
   46718:	31800104 	addi	r6,r6,4
   4671c:	10ffffcc 	andi	r3,r2,65535
   46720:	1a47883a 	add	r3,r3,r9
   46724:	1004d43a 	srli	r2,r2,16
   46728:	1809d43a 	srai	r4,r3,16
   4672c:	38c0000d 	sth	r3,0(r7)
   46730:	1105883a 	add	r2,r2,r4
   46734:	3880008d 	sth	r2,2(r7)
   46738:	1013d43a 	srai	r9,r2,16
   4673c:	39c00104 	addi	r7,r7,4
   46740:	337ff436 	bltu	r6,r13,46714 <__mdiff+0xcc>
   46744:	38bfff17 	ldw	r2,-4(r7)
   46748:	38ffff04 	addi	r3,r7,-4
   4674c:	1000041e 	bne	r2,zero,46760 <__mdiff+0x118>
   46750:	18ffff04 	addi	r3,r3,-4
   46754:	18800017 	ldw	r2,0(r3)
   46758:	52bfffc4 	addi	r10,r10,-1
   4675c:	103ffc26 	beq	r2,zero,46750 <__mdiff+0x108>
   46760:	6005883a 	mov	r2,r12
   46764:	62800415 	stw	r10,16(r12)
   46768:	dfc00417 	ldw	ra,16(sp)
   4676c:	dcc00317 	ldw	r19,12(sp)
   46770:	dc800217 	ldw	r18,8(sp)
   46774:	dc400117 	ldw	r17,4(sp)
   46778:	dc000017 	ldw	r16,0(sp)
   4677c:	dec00504 	addi	sp,sp,20
   46780:	f800283a 	ret
   46784:	9009883a 	mov	r4,r18
   46788:	000b883a 	mov	r5,zero
   4678c:	00464100 	call	46410 <_Balloc>
   46790:	1019883a 	mov	r12,r2
   46794:	00800044 	movi	r2,1
   46798:	60800415 	stw	r2,16(r12)
   4679c:	6005883a 	mov	r2,r12
   467a0:	60000515 	stw	zero,20(r12)
   467a4:	dfc00417 	ldw	ra,16(sp)
   467a8:	dcc00317 	ldw	r19,12(sp)
   467ac:	dc800217 	ldw	r18,8(sp)
   467b0:	dc400117 	ldw	r17,4(sp)
   467b4:	dc000017 	ldw	r16,0(sp)
   467b8:	dec00504 	addi	sp,sp,20
   467bc:	f800283a 	ret
   467c0:	880d883a 	mov	r6,r17
   467c4:	04c00044 	movi	r19,1
   467c8:	8023883a 	mov	r17,r16
   467cc:	3021883a 	mov	r16,r6
   467d0:	003fac06 	br	46684 <__mdiff+0x3c>

000467d4 <__lshift>:
   467d4:	defff904 	addi	sp,sp,-28
   467d8:	28800417 	ldw	r2,16(r5)
   467dc:	dc000015 	stw	r16,0(sp)
   467e0:	3021d17a 	srai	r16,r6,5
   467e4:	28c00217 	ldw	r3,8(r5)
   467e8:	10800044 	addi	r2,r2,1
   467ec:	dc400115 	stw	r17,4(sp)
   467f0:	80a3883a 	add	r17,r16,r2
   467f4:	dd400515 	stw	r21,20(sp)
   467f8:	dd000415 	stw	r20,16(sp)
   467fc:	dc800215 	stw	r18,8(sp)
   46800:	dfc00615 	stw	ra,24(sp)
   46804:	2825883a 	mov	r18,r5
   46808:	dcc00315 	stw	r19,12(sp)
   4680c:	3029883a 	mov	r20,r6
   46810:	202b883a 	mov	r21,r4
   46814:	29400117 	ldw	r5,4(r5)
   46818:	1c40030e 	bge	r3,r17,46828 <__lshift+0x54>
   4681c:	18c7883a 	add	r3,r3,r3
   46820:	29400044 	addi	r5,r5,1
   46824:	1c7ffd16 	blt	r3,r17,4681c <__lshift+0x48>
   46828:	a809883a 	mov	r4,r21
   4682c:	00464100 	call	46410 <_Balloc>
   46830:	1027883a 	mov	r19,r2
   46834:	11400504 	addi	r5,r2,20
   46838:	0400090e 	bge	zero,r16,46860 <__lshift+0x8c>
   4683c:	2805883a 	mov	r2,r5
   46840:	0007883a 	mov	r3,zero
   46844:	18c00044 	addi	r3,r3,1
   46848:	10000015 	stw	zero,0(r2)
   4684c:	10800104 	addi	r2,r2,4
   46850:	80fffc1e 	bne	r16,r3,46844 <__lshift+0x70>
   46854:	8405883a 	add	r2,r16,r16
   46858:	1085883a 	add	r2,r2,r2
   4685c:	288b883a 	add	r5,r5,r2
   46860:	90800417 	ldw	r2,16(r18)
   46864:	91000504 	addi	r4,r18,20
   46868:	a18007cc 	andi	r6,r20,31
   4686c:	1085883a 	add	r2,r2,r2
   46870:	1085883a 	add	r2,r2,r2
   46874:	208f883a 	add	r7,r4,r2
   46878:	30001e26 	beq	r6,zero,468f4 <__lshift+0x120>
   4687c:	00800804 	movi	r2,32
   46880:	1191c83a 	sub	r8,r2,r6
   46884:	0007883a 	mov	r3,zero
   46888:	20800017 	ldw	r2,0(r4)
   4688c:	1184983a 	sll	r2,r2,r6
   46890:	1884b03a 	or	r2,r3,r2
   46894:	28800015 	stw	r2,0(r5)
   46898:	20c00017 	ldw	r3,0(r4)
   4689c:	21000104 	addi	r4,r4,4
   468a0:	29400104 	addi	r5,r5,4
   468a4:	1a06d83a 	srl	r3,r3,r8
   468a8:	21fff736 	bltu	r4,r7,46888 <__lshift+0xb4>
   468ac:	28c00015 	stw	r3,0(r5)
   468b0:	18000126 	beq	r3,zero,468b8 <__lshift+0xe4>
   468b4:	8c400044 	addi	r17,r17,1
   468b8:	88bfffc4 	addi	r2,r17,-1
   468bc:	98800415 	stw	r2,16(r19)
   468c0:	a809883a 	mov	r4,r21
   468c4:	900b883a 	mov	r5,r18
   468c8:	0045e900 	call	45e90 <_Bfree>
   468cc:	9805883a 	mov	r2,r19
   468d0:	dfc00617 	ldw	ra,24(sp)
   468d4:	dd400517 	ldw	r21,20(sp)
   468d8:	dd000417 	ldw	r20,16(sp)
   468dc:	dcc00317 	ldw	r19,12(sp)
   468e0:	dc800217 	ldw	r18,8(sp)
   468e4:	dc400117 	ldw	r17,4(sp)
   468e8:	dc000017 	ldw	r16,0(sp)
   468ec:	dec00704 	addi	sp,sp,28
   468f0:	f800283a 	ret
   468f4:	20800017 	ldw	r2,0(r4)
   468f8:	21000104 	addi	r4,r4,4
   468fc:	28800015 	stw	r2,0(r5)
   46900:	29400104 	addi	r5,r5,4
   46904:	21ffec2e 	bgeu	r4,r7,468b8 <__lshift+0xe4>
   46908:	20800017 	ldw	r2,0(r4)
   4690c:	21000104 	addi	r4,r4,4
   46910:	28800015 	stw	r2,0(r5)
   46914:	29400104 	addi	r5,r5,4
   46918:	21fff636 	bltu	r4,r7,468f4 <__lshift+0x120>
   4691c:	003fe606 	br	468b8 <__lshift+0xe4>

00046920 <__multiply>:
   46920:	defff904 	addi	sp,sp,-28
   46924:	dcc00315 	stw	r19,12(sp)
   46928:	dc800215 	stw	r18,8(sp)
   4692c:	2cc00417 	ldw	r19,16(r5)
   46930:	34800417 	ldw	r18,16(r6)
   46934:	dd000415 	stw	r20,16(sp)
   46938:	dc400115 	stw	r17,4(sp)
   4693c:	dfc00615 	stw	ra,24(sp)
   46940:	dd400515 	stw	r21,20(sp)
   46944:	dc000015 	stw	r16,0(sp)
   46948:	2823883a 	mov	r17,r5
   4694c:	3029883a 	mov	r20,r6
   46950:	9c80040e 	bge	r19,r18,46964 <__multiply+0x44>
   46954:	9027883a 	mov	r19,r18
   46958:	2c800417 	ldw	r18,16(r5)
   4695c:	2829883a 	mov	r20,r5
   46960:	3023883a 	mov	r17,r6
   46964:	88800217 	ldw	r2,8(r17)
   46968:	9ca1883a 	add	r16,r19,r18
   4696c:	89400117 	ldw	r5,4(r17)
   46970:	1400010e 	bge	r2,r16,46978 <__multiply+0x58>
   46974:	29400044 	addi	r5,r5,1
   46978:	00464100 	call	46410 <_Balloc>
   4697c:	102b883a 	mov	r21,r2
   46980:	8405883a 	add	r2,r16,r16
   46984:	1085883a 	add	r2,r2,r2
   46988:	a9000504 	addi	r4,r21,20
   4698c:	209d883a 	add	r14,r4,r2
   46990:	2380042e 	bgeu	r4,r14,469a4 <__multiply+0x84>
   46994:	2005883a 	mov	r2,r4
   46998:	10000015 	stw	zero,0(r2)
   4699c:	10800104 	addi	r2,r2,4
   469a0:	13bffd36 	bltu	r2,r14,46998 <__multiply+0x78>
   469a4:	9485883a 	add	r2,r18,r18
   469a8:	9cc7883a 	add	r3,r19,r19
   469ac:	a1800504 	addi	r6,r20,20
   469b0:	1085883a 	add	r2,r2,r2
   469b4:	8b400504 	addi	r13,r17,20
   469b8:	18c7883a 	add	r3,r3,r3
   469bc:	309f883a 	add	r15,r6,r2
   469c0:	68d7883a 	add	r11,r13,r3
   469c4:	33c03b2e 	bgeu	r6,r15,46ab4 <__multiply+0x194>
   469c8:	2019883a 	mov	r12,r4
   469cc:	30800017 	ldw	r2,0(r6)
   469d0:	127fffcc 	andi	r9,r2,65535
   469d4:	48001826 	beq	r9,zero,46a38 <__multiply+0x118>
   469d8:	6811883a 	mov	r8,r13
   469dc:	600f883a 	mov	r7,r12
   469e0:	0015883a 	mov	r10,zero
   469e4:	40c00017 	ldw	r3,0(r8)
   469e8:	39400017 	ldw	r5,0(r7)
   469ec:	42000104 	addi	r8,r8,4
   469f0:	193fffcc 	andi	r4,r3,65535
   469f4:	4909383a 	mul	r4,r9,r4
   469f8:	1806d43a 	srli	r3,r3,16
   469fc:	28bfffcc 	andi	r2,r5,65535
   46a00:	5085883a 	add	r2,r10,r2
   46a04:	2089883a 	add	r4,r4,r2
   46a08:	48c7383a 	mul	r3,r9,r3
   46a0c:	280ad43a 	srli	r5,r5,16
   46a10:	2004d43a 	srli	r2,r4,16
   46a14:	3900000d 	sth	r4,0(r7)
   46a18:	1947883a 	add	r3,r3,r5
   46a1c:	10c5883a 	add	r2,r2,r3
   46a20:	3880008d 	sth	r2,2(r7)
   46a24:	1014d43a 	srli	r10,r2,16
   46a28:	39c00104 	addi	r7,r7,4
   46a2c:	42ffed36 	bltu	r8,r11,469e4 <__multiply+0xc4>
   46a30:	3a800015 	stw	r10,0(r7)
   46a34:	30800017 	ldw	r2,0(r6)
   46a38:	1012d43a 	srli	r9,r2,16
   46a3c:	48001926 	beq	r9,zero,46aa4 <__multiply+0x184>
   46a40:	60800017 	ldw	r2,0(r12)
   46a44:	6811883a 	mov	r8,r13
   46a48:	600f883a 	mov	r7,r12
   46a4c:	0015883a 	mov	r10,zero
   46a50:	100b883a 	mov	r5,r2
   46a54:	41000017 	ldw	r4,0(r8)
   46a58:	2806d43a 	srli	r3,r5,16
   46a5c:	3880000d 	sth	r2,0(r7)
   46a60:	20bfffcc 	andi	r2,r4,65535
   46a64:	4885383a 	mul	r2,r9,r2
   46a68:	50c7883a 	add	r3,r10,r3
   46a6c:	2008d43a 	srli	r4,r4,16
   46a70:	10c5883a 	add	r2,r2,r3
   46a74:	3880008d 	sth	r2,2(r7)
   46a78:	39c00104 	addi	r7,r7,4
   46a7c:	39400017 	ldw	r5,0(r7)
   46a80:	4909383a 	mul	r4,r9,r4
   46a84:	1004d43a 	srli	r2,r2,16
   46a88:	28ffffcc 	andi	r3,r5,65535
   46a8c:	20c9883a 	add	r4,r4,r3
   46a90:	1105883a 	add	r2,r2,r4
   46a94:	42000104 	addi	r8,r8,4
   46a98:	1014d43a 	srli	r10,r2,16
   46a9c:	42ffed36 	bltu	r8,r11,46a54 <__multiply+0x134>
   46aa0:	38800015 	stw	r2,0(r7)
   46aa4:	31800104 	addi	r6,r6,4
   46aa8:	33c0022e 	bgeu	r6,r15,46ab4 <__multiply+0x194>
   46aac:	63000104 	addi	r12,r12,4
   46ab0:	003fc606 	br	469cc <__multiply+0xac>
   46ab4:	0400090e 	bge	zero,r16,46adc <__multiply+0x1bc>
   46ab8:	70bfff17 	ldw	r2,-4(r14)
   46abc:	70ffff04 	addi	r3,r14,-4
   46ac0:	10000326 	beq	r2,zero,46ad0 <__multiply+0x1b0>
   46ac4:	00000506 	br	46adc <__multiply+0x1bc>
   46ac8:	18800017 	ldw	r2,0(r3)
   46acc:	1000031e 	bne	r2,zero,46adc <__multiply+0x1bc>
   46ad0:	843fffc4 	addi	r16,r16,-1
   46ad4:	18ffff04 	addi	r3,r3,-4
   46ad8:	803ffb1e 	bne	r16,zero,46ac8 <__multiply+0x1a8>
   46adc:	a805883a 	mov	r2,r21
   46ae0:	ac000415 	stw	r16,16(r21)
   46ae4:	dfc00617 	ldw	ra,24(sp)
   46ae8:	dd400517 	ldw	r21,20(sp)
   46aec:	dd000417 	ldw	r20,16(sp)
   46af0:	dcc00317 	ldw	r19,12(sp)
   46af4:	dc800217 	ldw	r18,8(sp)
   46af8:	dc400117 	ldw	r17,4(sp)
   46afc:	dc000017 	ldw	r16,0(sp)
   46b00:	dec00704 	addi	sp,sp,28
   46b04:	f800283a 	ret

00046b08 <__i2b>:
   46b08:	defffd04 	addi	sp,sp,-12
   46b0c:	dc000015 	stw	r16,0(sp)
   46b10:	04000044 	movi	r16,1
   46b14:	dc800115 	stw	r18,4(sp)
   46b18:	2825883a 	mov	r18,r5
   46b1c:	800b883a 	mov	r5,r16
   46b20:	dfc00215 	stw	ra,8(sp)
   46b24:	00464100 	call	46410 <_Balloc>
   46b28:	14000415 	stw	r16,16(r2)
   46b2c:	14800515 	stw	r18,20(r2)
   46b30:	dfc00217 	ldw	ra,8(sp)
   46b34:	dc800117 	ldw	r18,4(sp)
   46b38:	dc000017 	ldw	r16,0(sp)
   46b3c:	dec00304 	addi	sp,sp,12
   46b40:	f800283a 	ret

00046b44 <__multadd>:
   46b44:	defffa04 	addi	sp,sp,-24
   46b48:	dc800215 	stw	r18,8(sp)
   46b4c:	2c800417 	ldw	r18,16(r5)
   46b50:	dd000415 	stw	r20,16(sp)
   46b54:	dcc00315 	stw	r19,12(sp)
   46b58:	dc000015 	stw	r16,0(sp)
   46b5c:	dfc00515 	stw	ra,20(sp)
   46b60:	3821883a 	mov	r16,r7
   46b64:	dc400115 	stw	r17,4(sp)
   46b68:	2827883a 	mov	r19,r5
   46b6c:	2029883a 	mov	r20,r4
   46b70:	2a000504 	addi	r8,r5,20
   46b74:	000f883a 	mov	r7,zero
   46b78:	40800017 	ldw	r2,0(r8)
   46b7c:	39c00044 	addi	r7,r7,1
   46b80:	10ffffcc 	andi	r3,r2,65535
   46b84:	1987383a 	mul	r3,r3,r6
   46b88:	1004d43a 	srli	r2,r2,16
   46b8c:	1c07883a 	add	r3,r3,r16
   46b90:	180ad43a 	srli	r5,r3,16
   46b94:	1185383a 	mul	r2,r2,r6
   46b98:	18ffffcc 	andi	r3,r3,65535
   46b9c:	1145883a 	add	r2,r2,r5
   46ba0:	1008943a 	slli	r4,r2,16
   46ba4:	1020d43a 	srli	r16,r2,16
   46ba8:	20c9883a 	add	r4,r4,r3
   46bac:	41000015 	stw	r4,0(r8)
   46bb0:	42000104 	addi	r8,r8,4
   46bb4:	3cbff016 	blt	r7,r18,46b78 <__multadd+0x34>
   46bb8:	80000826 	beq	r16,zero,46bdc <__multadd+0x98>
   46bbc:	98800217 	ldw	r2,8(r19)
   46bc0:	90800f0e 	bge	r18,r2,46c00 <__multadd+0xbc>
   46bc4:	9485883a 	add	r2,r18,r18
   46bc8:	1085883a 	add	r2,r2,r2
   46bcc:	14c5883a 	add	r2,r2,r19
   46bd0:	90c00044 	addi	r3,r18,1
   46bd4:	14000515 	stw	r16,20(r2)
   46bd8:	98c00415 	stw	r3,16(r19)
   46bdc:	9805883a 	mov	r2,r19
   46be0:	dfc00517 	ldw	ra,20(sp)
   46be4:	dd000417 	ldw	r20,16(sp)
   46be8:	dcc00317 	ldw	r19,12(sp)
   46bec:	dc800217 	ldw	r18,8(sp)
   46bf0:	dc400117 	ldw	r17,4(sp)
   46bf4:	dc000017 	ldw	r16,0(sp)
   46bf8:	dec00604 	addi	sp,sp,24
   46bfc:	f800283a 	ret
   46c00:	99400117 	ldw	r5,4(r19)
   46c04:	a009883a 	mov	r4,r20
   46c08:	29400044 	addi	r5,r5,1
   46c0c:	00464100 	call	46410 <_Balloc>
   46c10:	99800417 	ldw	r6,16(r19)
   46c14:	99400304 	addi	r5,r19,12
   46c18:	11000304 	addi	r4,r2,12
   46c1c:	318d883a 	add	r6,r6,r6
   46c20:	318d883a 	add	r6,r6,r6
   46c24:	31800204 	addi	r6,r6,8
   46c28:	1023883a 	mov	r17,r2
   46c2c:	0045c780 	call	45c78 <memcpy>
   46c30:	980b883a 	mov	r5,r19
   46c34:	a009883a 	mov	r4,r20
   46c38:	0045e900 	call	45e90 <_Bfree>
   46c3c:	8827883a 	mov	r19,r17
   46c40:	003fe006 	br	46bc4 <__multadd+0x80>

00046c44 <__pow5mult>:
   46c44:	defffa04 	addi	sp,sp,-24
   46c48:	308000cc 	andi	r2,r6,3
   46c4c:	dd000415 	stw	r20,16(sp)
   46c50:	dcc00315 	stw	r19,12(sp)
   46c54:	dc000015 	stw	r16,0(sp)
   46c58:	dfc00515 	stw	ra,20(sp)
   46c5c:	dc800215 	stw	r18,8(sp)
   46c60:	dc400115 	stw	r17,4(sp)
   46c64:	3021883a 	mov	r16,r6
   46c68:	2027883a 	mov	r19,r4
   46c6c:	2829883a 	mov	r20,r5
   46c70:	10002b1e 	bne	r2,zero,46d20 <__pow5mult+0xdc>
   46c74:	8025d0ba 	srai	r18,r16,2
   46c78:	90001b26 	beq	r18,zero,46ce8 <__pow5mult+0xa4>
   46c7c:	9c001217 	ldw	r16,72(r19)
   46c80:	8000081e 	bne	r16,zero,46ca4 <__pow5mult+0x60>
   46c84:	00003006 	br	46d48 <__pow5mult+0x104>
   46c88:	800b883a 	mov	r5,r16
   46c8c:	800d883a 	mov	r6,r16
   46c90:	9809883a 	mov	r4,r19
   46c94:	90001426 	beq	r18,zero,46ce8 <__pow5mult+0xa4>
   46c98:	80800017 	ldw	r2,0(r16)
   46c9c:	10001b26 	beq	r2,zero,46d0c <__pow5mult+0xc8>
   46ca0:	1021883a 	mov	r16,r2
   46ca4:	9080004c 	andi	r2,r18,1
   46ca8:	1005003a 	cmpeq	r2,r2,zero
   46cac:	9025d07a 	srai	r18,r18,1
   46cb0:	800d883a 	mov	r6,r16
   46cb4:	9809883a 	mov	r4,r19
   46cb8:	a00b883a 	mov	r5,r20
   46cbc:	103ff21e 	bne	r2,zero,46c88 <__pow5mult+0x44>
   46cc0:	00469200 	call	46920 <__multiply>
   46cc4:	a00b883a 	mov	r5,r20
   46cc8:	9809883a 	mov	r4,r19
   46ccc:	1023883a 	mov	r17,r2
   46cd0:	0045e900 	call	45e90 <_Bfree>
   46cd4:	8829883a 	mov	r20,r17
   46cd8:	800b883a 	mov	r5,r16
   46cdc:	800d883a 	mov	r6,r16
   46ce0:	9809883a 	mov	r4,r19
   46ce4:	903fec1e 	bne	r18,zero,46c98 <__pow5mult+0x54>
   46ce8:	a005883a 	mov	r2,r20
   46cec:	dfc00517 	ldw	ra,20(sp)
   46cf0:	dd000417 	ldw	r20,16(sp)
   46cf4:	dcc00317 	ldw	r19,12(sp)
   46cf8:	dc800217 	ldw	r18,8(sp)
   46cfc:	dc400117 	ldw	r17,4(sp)
   46d00:	dc000017 	ldw	r16,0(sp)
   46d04:	dec00604 	addi	sp,sp,24
   46d08:	f800283a 	ret
   46d0c:	00469200 	call	46920 <__multiply>
   46d10:	80800015 	stw	r2,0(r16)
   46d14:	1021883a 	mov	r16,r2
   46d18:	10000015 	stw	zero,0(r2)
   46d1c:	003fe106 	br	46ca4 <__pow5mult+0x60>
   46d20:	1085883a 	add	r2,r2,r2
   46d24:	00d00034 	movhi	r3,16384
   46d28:	18c09204 	addi	r3,r3,584
   46d2c:	1085883a 	add	r2,r2,r2
   46d30:	10c5883a 	add	r2,r2,r3
   46d34:	11bfff17 	ldw	r6,-4(r2)
   46d38:	000f883a 	mov	r7,zero
   46d3c:	0046b440 	call	46b44 <__multadd>
   46d40:	1029883a 	mov	r20,r2
   46d44:	003fcb06 	br	46c74 <__pow5mult+0x30>
   46d48:	9809883a 	mov	r4,r19
   46d4c:	01409c44 	movi	r5,625
   46d50:	0046b080 	call	46b08 <__i2b>
   46d54:	98801215 	stw	r2,72(r19)
   46d58:	1021883a 	mov	r16,r2
   46d5c:	10000015 	stw	zero,0(r2)
   46d60:	003fd006 	br	46ca4 <__pow5mult+0x60>

00046d64 <__s2b>:
   46d64:	defff904 	addi	sp,sp,-28
   46d68:	dcc00315 	stw	r19,12(sp)
   46d6c:	dc800215 	stw	r18,8(sp)
   46d70:	2827883a 	mov	r19,r5
   46d74:	2025883a 	mov	r18,r4
   46d78:	01400244 	movi	r5,9
   46d7c:	39000204 	addi	r4,r7,8
   46d80:	dd000415 	stw	r20,16(sp)
   46d84:	dc400115 	stw	r17,4(sp)
   46d88:	dfc00615 	stw	ra,24(sp)
   46d8c:	dd400515 	stw	r21,20(sp)
   46d90:	dc000015 	stw	r16,0(sp)
   46d94:	3829883a 	mov	r20,r7
   46d98:	3023883a 	mov	r17,r6
   46d9c:	00499180 	call	49918 <__divsi3>
   46da0:	00c00044 	movi	r3,1
   46da4:	1880350e 	bge	r3,r2,46e7c <__s2b+0x118>
   46da8:	000b883a 	mov	r5,zero
   46dac:	18c7883a 	add	r3,r3,r3
   46db0:	29400044 	addi	r5,r5,1
   46db4:	18bffd16 	blt	r3,r2,46dac <__s2b+0x48>
   46db8:	9009883a 	mov	r4,r18
   46dbc:	00464100 	call	46410 <_Balloc>
   46dc0:	1011883a 	mov	r8,r2
   46dc4:	d8800717 	ldw	r2,28(sp)
   46dc8:	00c00044 	movi	r3,1
   46dcc:	01800244 	movi	r6,9
   46dd0:	40800515 	stw	r2,20(r8)
   46dd4:	40c00415 	stw	r3,16(r8)
   46dd8:	3440260e 	bge	r6,r17,46e74 <__s2b+0x110>
   46ddc:	3021883a 	mov	r16,r6
   46de0:	99ab883a 	add	r21,r19,r6
   46de4:	9c05883a 	add	r2,r19,r16
   46de8:	11c00007 	ldb	r7,0(r2)
   46dec:	400b883a 	mov	r5,r8
   46df0:	9009883a 	mov	r4,r18
   46df4:	39fff404 	addi	r7,r7,-48
   46df8:	01800284 	movi	r6,10
   46dfc:	0046b440 	call	46b44 <__multadd>
   46e00:	84000044 	addi	r16,r16,1
   46e04:	1011883a 	mov	r8,r2
   46e08:	8c3ff61e 	bne	r17,r16,46de4 <__s2b+0x80>
   46e0c:	ac45883a 	add	r2,r21,r17
   46e10:	117ffe04 	addi	r5,r2,-8
   46e14:	880d883a 	mov	r6,r17
   46e18:	35000c0e 	bge	r6,r20,46e4c <__s2b+0xe8>
   46e1c:	a185c83a 	sub	r2,r20,r6
   46e20:	2821883a 	mov	r16,r5
   46e24:	28a3883a 	add	r17,r5,r2
   46e28:	81c00007 	ldb	r7,0(r16)
   46e2c:	400b883a 	mov	r5,r8
   46e30:	9009883a 	mov	r4,r18
   46e34:	39fff404 	addi	r7,r7,-48
   46e38:	01800284 	movi	r6,10
   46e3c:	0046b440 	call	46b44 <__multadd>
   46e40:	84000044 	addi	r16,r16,1
   46e44:	1011883a 	mov	r8,r2
   46e48:	847ff71e 	bne	r16,r17,46e28 <__s2b+0xc4>
   46e4c:	4005883a 	mov	r2,r8
   46e50:	dfc00617 	ldw	ra,24(sp)
   46e54:	dd400517 	ldw	r21,20(sp)
   46e58:	dd000417 	ldw	r20,16(sp)
   46e5c:	dcc00317 	ldw	r19,12(sp)
   46e60:	dc800217 	ldw	r18,8(sp)
   46e64:	dc400117 	ldw	r17,4(sp)
   46e68:	dc000017 	ldw	r16,0(sp)
   46e6c:	dec00704 	addi	sp,sp,28
   46e70:	f800283a 	ret
   46e74:	99400284 	addi	r5,r19,10
   46e78:	003fe706 	br	46e18 <__s2b+0xb4>
   46e7c:	000b883a 	mov	r5,zero
   46e80:	003fcd06 	br	46db8 <__s2b+0x54>

00046e84 <_realloc_r>:
   46e84:	defff404 	addi	sp,sp,-48
   46e88:	dd800815 	stw	r22,32(sp)
   46e8c:	dc800415 	stw	r18,16(sp)
   46e90:	dc400315 	stw	r17,12(sp)
   46e94:	dfc00b15 	stw	ra,44(sp)
   46e98:	df000a15 	stw	fp,40(sp)
   46e9c:	ddc00915 	stw	r23,36(sp)
   46ea0:	dd400715 	stw	r21,28(sp)
   46ea4:	dd000615 	stw	r20,24(sp)
   46ea8:	dcc00515 	stw	r19,20(sp)
   46eac:	dc000215 	stw	r16,8(sp)
   46eb0:	2825883a 	mov	r18,r5
   46eb4:	3023883a 	mov	r17,r6
   46eb8:	202d883a 	mov	r22,r4
   46ebc:	2800c926 	beq	r5,zero,471e4 <_realloc_r+0x360>
   46ec0:	004a6000 	call	4a600 <__malloc_lock>
   46ec4:	943ffe04 	addi	r16,r18,-8
   46ec8:	88c002c4 	addi	r3,r17,11
   46ecc:	00800584 	movi	r2,22
   46ed0:	82000117 	ldw	r8,4(r16)
   46ed4:	10c01b2e 	bgeu	r2,r3,46f44 <_realloc_r+0xc0>
   46ed8:	00bffe04 	movi	r2,-8
   46edc:	188e703a 	and	r7,r3,r2
   46ee0:	3839883a 	mov	fp,r7
   46ee4:	38001a16 	blt	r7,zero,46f50 <_realloc_r+0xcc>
   46ee8:	e4401936 	bltu	fp,r17,46f50 <_realloc_r+0xcc>
   46eec:	013fff04 	movi	r4,-4
   46ef0:	4126703a 	and	r19,r8,r4
   46ef4:	99c02616 	blt	r19,r7,46f90 <_realloc_r+0x10c>
   46ef8:	802b883a 	mov	r21,r16
   46efc:	9829883a 	mov	r20,r19
   46f00:	84000204 	addi	r16,r16,8
   46f04:	a80f883a 	mov	r7,r21
   46f08:	a70dc83a 	sub	r6,r20,fp
   46f0c:	008003c4 	movi	r2,15
   46f10:	1180c136 	bltu	r2,r6,47218 <_realloc_r+0x394>
   46f14:	38800117 	ldw	r2,4(r7)
   46f18:	a549883a 	add	r4,r20,r21
   46f1c:	1080004c 	andi	r2,r2,1
   46f20:	a084b03a 	or	r2,r20,r2
   46f24:	38800115 	stw	r2,4(r7)
   46f28:	20c00117 	ldw	r3,4(r4)
   46f2c:	18c00054 	ori	r3,r3,1
   46f30:	20c00115 	stw	r3,4(r4)
   46f34:	b009883a 	mov	r4,r22
   46f38:	004a6200 	call	4a620 <__malloc_unlock>
   46f3c:	8023883a 	mov	r17,r16
   46f40:	00000606 	br	46f5c <_realloc_r+0xd8>
   46f44:	01c00404 	movi	r7,16
   46f48:	3839883a 	mov	fp,r7
   46f4c:	e47fe72e 	bgeu	fp,r17,46eec <_realloc_r+0x68>
   46f50:	00800304 	movi	r2,12
   46f54:	0023883a 	mov	r17,zero
   46f58:	b0800015 	stw	r2,0(r22)
   46f5c:	8805883a 	mov	r2,r17
   46f60:	dfc00b17 	ldw	ra,44(sp)
   46f64:	df000a17 	ldw	fp,40(sp)
   46f68:	ddc00917 	ldw	r23,36(sp)
   46f6c:	dd800817 	ldw	r22,32(sp)
   46f70:	dd400717 	ldw	r21,28(sp)
   46f74:	dd000617 	ldw	r20,24(sp)
   46f78:	dcc00517 	ldw	r19,20(sp)
   46f7c:	dc800417 	ldw	r18,16(sp)
   46f80:	dc400317 	ldw	r17,12(sp)
   46f84:	dc000217 	ldw	r16,8(sp)
   46f88:	dec00c04 	addi	sp,sp,48
   46f8c:	f800283a 	ret
   46f90:	00900034 	movhi	r2,16384
   46f94:	1081e804 	addi	r2,r2,1952
   46f98:	12400217 	ldw	r9,8(r2)
   46f9c:	84cd883a 	add	r6,r16,r19
   46fa0:	802b883a 	mov	r21,r16
   46fa4:	3240b926 	beq	r6,r9,4728c <_realloc_r+0x408>
   46fa8:	31400117 	ldw	r5,4(r6)
   46fac:	00bfff84 	movi	r2,-2
   46fb0:	2884703a 	and	r2,r5,r2
   46fb4:	1185883a 	add	r2,r2,r6
   46fb8:	10c00117 	ldw	r3,4(r2)
   46fbc:	18c0004c 	andi	r3,r3,1
   46fc0:	1807003a 	cmpeq	r3,r3,zero
   46fc4:	1800a326 	beq	r3,zero,47254 <_realloc_r+0x3d0>
   46fc8:	2908703a 	and	r4,r5,r4
   46fcc:	9929883a 	add	r20,r19,r4
   46fd0:	a1c0a30e 	bge	r20,r7,47260 <_realloc_r+0x3dc>
   46fd4:	4080004c 	andi	r2,r8,1
   46fd8:	1000551e 	bne	r2,zero,47130 <_realloc_r+0x2ac>
   46fdc:	80800017 	ldw	r2,0(r16)
   46fe0:	80afc83a 	sub	r23,r16,r2
   46fe4:	b8c00117 	ldw	r3,4(r23)
   46fe8:	00bfff04 	movi	r2,-4
   46fec:	1884703a 	and	r2,r3,r2
   46ff0:	30002e26 	beq	r6,zero,470ac <_realloc_r+0x228>
   46ff4:	3240b926 	beq	r6,r9,472dc <_realloc_r+0x458>
   46ff8:	98a9883a 	add	r20,r19,r2
   46ffc:	2509883a 	add	r4,r4,r20
   47000:	d9000015 	stw	r4,0(sp)
   47004:	21c02a16 	blt	r4,r7,470b0 <_realloc_r+0x22c>
   47008:	30800317 	ldw	r2,12(r6)
   4700c:	30c00217 	ldw	r3,8(r6)
   47010:	01400904 	movi	r5,36
   47014:	99bfff04 	addi	r6,r19,-4
   47018:	18800315 	stw	r2,12(r3)
   4701c:	10c00215 	stw	r3,8(r2)
   47020:	b9000317 	ldw	r4,12(r23)
   47024:	b8800217 	ldw	r2,8(r23)
   47028:	b82b883a 	mov	r21,r23
   4702c:	bc000204 	addi	r16,r23,8
   47030:	20800215 	stw	r2,8(r4)
   47034:	11000315 	stw	r4,12(r2)
   47038:	2980e436 	bltu	r5,r6,473cc <_realloc_r+0x548>
   4703c:	008004c4 	movi	r2,19
   47040:	9009883a 	mov	r4,r18
   47044:	8011883a 	mov	r8,r16
   47048:	11800f2e 	bgeu	r2,r6,47088 <_realloc_r+0x204>
   4704c:	90800017 	ldw	r2,0(r18)
   47050:	ba000404 	addi	r8,r23,16
   47054:	91000204 	addi	r4,r18,8
   47058:	b8800215 	stw	r2,8(r23)
   4705c:	90c00117 	ldw	r3,4(r18)
   47060:	008006c4 	movi	r2,27
   47064:	b8c00315 	stw	r3,12(r23)
   47068:	1180072e 	bgeu	r2,r6,47088 <_realloc_r+0x204>
   4706c:	90c00217 	ldw	r3,8(r18)
   47070:	ba000604 	addi	r8,r23,24
   47074:	91000404 	addi	r4,r18,16
   47078:	b8c00415 	stw	r3,16(r23)
   4707c:	90800317 	ldw	r2,12(r18)
   47080:	b8800515 	stw	r2,20(r23)
   47084:	3140e726 	beq	r6,r5,47424 <_realloc_r+0x5a0>
   47088:	20800017 	ldw	r2,0(r4)
   4708c:	dd000017 	ldw	r20,0(sp)
   47090:	b80f883a 	mov	r7,r23
   47094:	40800015 	stw	r2,0(r8)
   47098:	20c00117 	ldw	r3,4(r4)
   4709c:	40c00115 	stw	r3,4(r8)
   470a0:	20800217 	ldw	r2,8(r4)
   470a4:	40800215 	stw	r2,8(r8)
   470a8:	003f9706 	br	46f08 <_realloc_r+0x84>
   470ac:	98a9883a 	add	r20,r19,r2
   470b0:	a1c01f16 	blt	r20,r7,47130 <_realloc_r+0x2ac>
   470b4:	b8c00317 	ldw	r3,12(r23)
   470b8:	b8800217 	ldw	r2,8(r23)
   470bc:	99bfff04 	addi	r6,r19,-4
   470c0:	01400904 	movi	r5,36
   470c4:	b82b883a 	mov	r21,r23
   470c8:	18800215 	stw	r2,8(r3)
   470cc:	10c00315 	stw	r3,12(r2)
   470d0:	bc000204 	addi	r16,r23,8
   470d4:	2980c336 	bltu	r5,r6,473e4 <_realloc_r+0x560>
   470d8:	008004c4 	movi	r2,19
   470dc:	9009883a 	mov	r4,r18
   470e0:	8011883a 	mov	r8,r16
   470e4:	11800f2e 	bgeu	r2,r6,47124 <_realloc_r+0x2a0>
   470e8:	90800017 	ldw	r2,0(r18)
   470ec:	ba000404 	addi	r8,r23,16
   470f0:	91000204 	addi	r4,r18,8
   470f4:	b8800215 	stw	r2,8(r23)
   470f8:	90c00117 	ldw	r3,4(r18)
   470fc:	008006c4 	movi	r2,27
   47100:	b8c00315 	stw	r3,12(r23)
   47104:	1180072e 	bgeu	r2,r6,47124 <_realloc_r+0x2a0>
   47108:	90c00217 	ldw	r3,8(r18)
   4710c:	ba000604 	addi	r8,r23,24
   47110:	91000404 	addi	r4,r18,16
   47114:	b8c00415 	stw	r3,16(r23)
   47118:	90800317 	ldw	r2,12(r18)
   4711c:	b8800515 	stw	r2,20(r23)
   47120:	3140c726 	beq	r6,r5,47440 <_realloc_r+0x5bc>
   47124:	20800017 	ldw	r2,0(r4)
   47128:	b80f883a 	mov	r7,r23
   4712c:	003fd906 	br	47094 <_realloc_r+0x210>
   47130:	880b883a 	mov	r5,r17
   47134:	b009883a 	mov	r4,r22
   47138:	00454540 	call	45454 <_malloc_r>
   4713c:	1023883a 	mov	r17,r2
   47140:	10002526 	beq	r2,zero,471d8 <_realloc_r+0x354>
   47144:	80800117 	ldw	r2,4(r16)
   47148:	00ffff84 	movi	r3,-2
   4714c:	893ffe04 	addi	r4,r17,-8
   47150:	10c4703a 	and	r2,r2,r3
   47154:	8085883a 	add	r2,r16,r2
   47158:	20809526 	beq	r4,r2,473b0 <_realloc_r+0x52c>
   4715c:	99bfff04 	addi	r6,r19,-4
   47160:	01c00904 	movi	r7,36
   47164:	39804536 	bltu	r7,r6,4727c <_realloc_r+0x3f8>
   47168:	008004c4 	movi	r2,19
   4716c:	9009883a 	mov	r4,r18
   47170:	880b883a 	mov	r5,r17
   47174:	11800f2e 	bgeu	r2,r6,471b4 <_realloc_r+0x330>
   47178:	90800017 	ldw	r2,0(r18)
   4717c:	89400204 	addi	r5,r17,8
   47180:	91000204 	addi	r4,r18,8
   47184:	88800015 	stw	r2,0(r17)
   47188:	90c00117 	ldw	r3,4(r18)
   4718c:	008006c4 	movi	r2,27
   47190:	88c00115 	stw	r3,4(r17)
   47194:	1180072e 	bgeu	r2,r6,471b4 <_realloc_r+0x330>
   47198:	90c00217 	ldw	r3,8(r18)
   4719c:	89400404 	addi	r5,r17,16
   471a0:	91000404 	addi	r4,r18,16
   471a4:	88c00215 	stw	r3,8(r17)
   471a8:	90800317 	ldw	r2,12(r18)
   471ac:	88800315 	stw	r2,12(r17)
   471b0:	31c09126 	beq	r6,r7,473f8 <_realloc_r+0x574>
   471b4:	20800017 	ldw	r2,0(r4)
   471b8:	28800015 	stw	r2,0(r5)
   471bc:	20c00117 	ldw	r3,4(r4)
   471c0:	28c00115 	stw	r3,4(r5)
   471c4:	20800217 	ldw	r2,8(r4)
   471c8:	28800215 	stw	r2,8(r5)
   471cc:	900b883a 	mov	r5,r18
   471d0:	b009883a 	mov	r4,r22
   471d4:	00448cc0 	call	448cc <_free_r>
   471d8:	b009883a 	mov	r4,r22
   471dc:	004a6200 	call	4a620 <__malloc_unlock>
   471e0:	003f5e06 	br	46f5c <_realloc_r+0xd8>
   471e4:	300b883a 	mov	r5,r6
   471e8:	dfc00b17 	ldw	ra,44(sp)
   471ec:	df000a17 	ldw	fp,40(sp)
   471f0:	ddc00917 	ldw	r23,36(sp)
   471f4:	dd800817 	ldw	r22,32(sp)
   471f8:	dd400717 	ldw	r21,28(sp)
   471fc:	dd000617 	ldw	r20,24(sp)
   47200:	dcc00517 	ldw	r19,20(sp)
   47204:	dc800417 	ldw	r18,16(sp)
   47208:	dc400317 	ldw	r17,12(sp)
   4720c:	dc000217 	ldw	r16,8(sp)
   47210:	dec00c04 	addi	sp,sp,48
   47214:	00454541 	jmpi	45454 <_malloc_r>
   47218:	38800117 	ldw	r2,4(r7)
   4721c:	e54b883a 	add	r5,fp,r21
   47220:	31000054 	ori	r4,r6,1
   47224:	1080004c 	andi	r2,r2,1
   47228:	1704b03a 	or	r2,r2,fp
   4722c:	38800115 	stw	r2,4(r7)
   47230:	29000115 	stw	r4,4(r5)
   47234:	2987883a 	add	r3,r5,r6
   47238:	18800117 	ldw	r2,4(r3)
   4723c:	29400204 	addi	r5,r5,8
   47240:	b009883a 	mov	r4,r22
   47244:	10800054 	ori	r2,r2,1
   47248:	18800115 	stw	r2,4(r3)
   4724c:	00448cc0 	call	448cc <_free_r>
   47250:	003f3806 	br	46f34 <_realloc_r+0xb0>
   47254:	000d883a 	mov	r6,zero
   47258:	0009883a 	mov	r4,zero
   4725c:	003f5d06 	br	46fd4 <_realloc_r+0x150>
   47260:	30c00217 	ldw	r3,8(r6)
   47264:	30800317 	ldw	r2,12(r6)
   47268:	800f883a 	mov	r7,r16
   4726c:	84000204 	addi	r16,r16,8
   47270:	10c00215 	stw	r3,8(r2)
   47274:	18800315 	stw	r2,12(r3)
   47278:	003f2306 	br	46f08 <_realloc_r+0x84>
   4727c:	8809883a 	mov	r4,r17
   47280:	900b883a 	mov	r5,r18
   47284:	0045d180 	call	45d18 <memmove>
   47288:	003fd006 	br	471cc <_realloc_r+0x348>
   4728c:	30800117 	ldw	r2,4(r6)
   47290:	e0c00404 	addi	r3,fp,16
   47294:	1108703a 	and	r4,r2,r4
   47298:	9905883a 	add	r2,r19,r4
   4729c:	10ff4d16 	blt	r2,r3,46fd4 <_realloc_r+0x150>
   472a0:	1705c83a 	sub	r2,r2,fp
   472a4:	870b883a 	add	r5,r16,fp
   472a8:	10800054 	ori	r2,r2,1
   472ac:	28800115 	stw	r2,4(r5)
   472b0:	80c00117 	ldw	r3,4(r16)
   472b4:	00900034 	movhi	r2,16384
   472b8:	1081e804 	addi	r2,r2,1952
   472bc:	b009883a 	mov	r4,r22
   472c0:	18c0004c 	andi	r3,r3,1
   472c4:	e0c6b03a 	or	r3,fp,r3
   472c8:	11400215 	stw	r5,8(r2)
   472cc:	80c00115 	stw	r3,4(r16)
   472d0:	004a6200 	call	4a620 <__malloc_unlock>
   472d4:	84400204 	addi	r17,r16,8
   472d8:	003f2006 	br	46f5c <_realloc_r+0xd8>
   472dc:	98a9883a 	add	r20,r19,r2
   472e0:	2509883a 	add	r4,r4,r20
   472e4:	e0800404 	addi	r2,fp,16
   472e8:	d9000115 	stw	r4,4(sp)
   472ec:	20bf7016 	blt	r4,r2,470b0 <_realloc_r+0x22c>
   472f0:	b8c00317 	ldw	r3,12(r23)
   472f4:	b8800217 	ldw	r2,8(r23)
   472f8:	99bfff04 	addi	r6,r19,-4
   472fc:	01400904 	movi	r5,36
   47300:	18800215 	stw	r2,8(r3)
   47304:	10c00315 	stw	r3,12(r2)
   47308:	bc400204 	addi	r17,r23,8
   4730c:	29804136 	bltu	r5,r6,47414 <_realloc_r+0x590>
   47310:	008004c4 	movi	r2,19
   47314:	9009883a 	mov	r4,r18
   47318:	880f883a 	mov	r7,r17
   4731c:	11800f2e 	bgeu	r2,r6,4735c <_realloc_r+0x4d8>
   47320:	90800017 	ldw	r2,0(r18)
   47324:	b9c00404 	addi	r7,r23,16
   47328:	91000204 	addi	r4,r18,8
   4732c:	b8800215 	stw	r2,8(r23)
   47330:	90c00117 	ldw	r3,4(r18)
   47334:	008006c4 	movi	r2,27
   47338:	b8c00315 	stw	r3,12(r23)
   4733c:	1180072e 	bgeu	r2,r6,4735c <_realloc_r+0x4d8>
   47340:	90c00217 	ldw	r3,8(r18)
   47344:	b9c00604 	addi	r7,r23,24
   47348:	91000404 	addi	r4,r18,16
   4734c:	b8c00415 	stw	r3,16(r23)
   47350:	90800317 	ldw	r2,12(r18)
   47354:	b8800515 	stw	r2,20(r23)
   47358:	31404026 	beq	r6,r5,4745c <_realloc_r+0x5d8>
   4735c:	20800017 	ldw	r2,0(r4)
   47360:	38800015 	stw	r2,0(r7)
   47364:	20c00117 	ldw	r3,4(r4)
   47368:	38c00115 	stw	r3,4(r7)
   4736c:	20800217 	ldw	r2,8(r4)
   47370:	38800215 	stw	r2,8(r7)
   47374:	d8c00117 	ldw	r3,4(sp)
   47378:	bf0b883a 	add	r5,r23,fp
   4737c:	b009883a 	mov	r4,r22
   47380:	1f05c83a 	sub	r2,r3,fp
   47384:	10800054 	ori	r2,r2,1
   47388:	28800115 	stw	r2,4(r5)
   4738c:	b8c00117 	ldw	r3,4(r23)
   47390:	00900034 	movhi	r2,16384
   47394:	1081e804 	addi	r2,r2,1952
   47398:	11400215 	stw	r5,8(r2)
   4739c:	18c0004c 	andi	r3,r3,1
   473a0:	e0c6b03a 	or	r3,fp,r3
   473a4:	b8c00115 	stw	r3,4(r23)
   473a8:	004a6200 	call	4a620 <__malloc_unlock>
   473ac:	003eeb06 	br	46f5c <_realloc_r+0xd8>
   473b0:	20800117 	ldw	r2,4(r4)
   473b4:	00ffff04 	movi	r3,-4
   473b8:	800f883a 	mov	r7,r16
   473bc:	10c4703a 	and	r2,r2,r3
   473c0:	98a9883a 	add	r20,r19,r2
   473c4:	84000204 	addi	r16,r16,8
   473c8:	003ecf06 	br	46f08 <_realloc_r+0x84>
   473cc:	900b883a 	mov	r5,r18
   473d0:	8009883a 	mov	r4,r16
   473d4:	0045d180 	call	45d18 <memmove>
   473d8:	dd000017 	ldw	r20,0(sp)
   473dc:	b80f883a 	mov	r7,r23
   473e0:	003ec906 	br	46f08 <_realloc_r+0x84>
   473e4:	900b883a 	mov	r5,r18
   473e8:	8009883a 	mov	r4,r16
   473ec:	0045d180 	call	45d18 <memmove>
   473f0:	b80f883a 	mov	r7,r23
   473f4:	003ec406 	br	46f08 <_realloc_r+0x84>
   473f8:	90c00417 	ldw	r3,16(r18)
   473fc:	89400604 	addi	r5,r17,24
   47400:	91000604 	addi	r4,r18,24
   47404:	88c00415 	stw	r3,16(r17)
   47408:	90800517 	ldw	r2,20(r18)
   4740c:	88800515 	stw	r2,20(r17)
   47410:	003f6806 	br	471b4 <_realloc_r+0x330>
   47414:	900b883a 	mov	r5,r18
   47418:	8809883a 	mov	r4,r17
   4741c:	0045d180 	call	45d18 <memmove>
   47420:	003fd406 	br	47374 <_realloc_r+0x4f0>
   47424:	90c00417 	ldw	r3,16(r18)
   47428:	91000604 	addi	r4,r18,24
   4742c:	ba000804 	addi	r8,r23,32
   47430:	b8c00615 	stw	r3,24(r23)
   47434:	90800517 	ldw	r2,20(r18)
   47438:	b8800715 	stw	r2,28(r23)
   4743c:	003f1206 	br	47088 <_realloc_r+0x204>
   47440:	90c00417 	ldw	r3,16(r18)
   47444:	91000604 	addi	r4,r18,24
   47448:	ba000804 	addi	r8,r23,32
   4744c:	b8c00615 	stw	r3,24(r23)
   47450:	90800517 	ldw	r2,20(r18)
   47454:	b8800715 	stw	r2,28(r23)
   47458:	003f3206 	br	47124 <_realloc_r+0x2a0>
   4745c:	90c00417 	ldw	r3,16(r18)
   47460:	91000604 	addi	r4,r18,24
   47464:	b9c00804 	addi	r7,r23,32
   47468:	b8c00615 	stw	r3,24(r23)
   4746c:	90800517 	ldw	r2,20(r18)
   47470:	b8800715 	stw	r2,28(r23)
   47474:	003fb906 	br	4735c <_realloc_r+0x4d8>

00047478 <__isinfd>:
   47478:	200d883a 	mov	r6,r4
   4747c:	0109c83a 	sub	r4,zero,r4
   47480:	2188b03a 	or	r4,r4,r6
   47484:	2008d7fa 	srli	r4,r4,31
   47488:	00a00034 	movhi	r2,32768
   4748c:	10bfffc4 	addi	r2,r2,-1
   47490:	1144703a 	and	r2,r2,r5
   47494:	2088b03a 	or	r4,r4,r2
   47498:	009ffc34 	movhi	r2,32752
   4749c:	1105c83a 	sub	r2,r2,r4
   474a0:	0087c83a 	sub	r3,zero,r2
   474a4:	10c4b03a 	or	r2,r2,r3
   474a8:	1004d7fa 	srli	r2,r2,31
   474ac:	00c00044 	movi	r3,1
   474b0:	1885c83a 	sub	r2,r3,r2
   474b4:	f800283a 	ret

000474b8 <__isnand>:
   474b8:	200d883a 	mov	r6,r4
   474bc:	0109c83a 	sub	r4,zero,r4
   474c0:	2188b03a 	or	r4,r4,r6
   474c4:	2008d7fa 	srli	r4,r4,31
   474c8:	00a00034 	movhi	r2,32768
   474cc:	10bfffc4 	addi	r2,r2,-1
   474d0:	1144703a 	and	r2,r2,r5
   474d4:	2088b03a 	or	r4,r4,r2
   474d8:	009ffc34 	movhi	r2,32752
   474dc:	1105c83a 	sub	r2,r2,r4
   474e0:	1004d7fa 	srli	r2,r2,31
   474e4:	f800283a 	ret

000474e8 <_sbrk_r>:
   474e8:	defffd04 	addi	sp,sp,-12
   474ec:	dc000015 	stw	r16,0(sp)
   474f0:	04100034 	movhi	r16,16384
   474f4:	84078204 	addi	r16,r16,7688
   474f8:	dc400115 	stw	r17,4(sp)
   474fc:	80000015 	stw	zero,0(r16)
   47500:	2023883a 	mov	r17,r4
   47504:	2809883a 	mov	r4,r5
   47508:	dfc00215 	stw	ra,8(sp)
   4750c:	004a8200 	call	4a820 <sbrk>
   47510:	1007883a 	mov	r3,r2
   47514:	00bfffc4 	movi	r2,-1
   47518:	18800626 	beq	r3,r2,47534 <_sbrk_r+0x4c>
   4751c:	1805883a 	mov	r2,r3
   47520:	dfc00217 	ldw	ra,8(sp)
   47524:	dc400117 	ldw	r17,4(sp)
   47528:	dc000017 	ldw	r16,0(sp)
   4752c:	dec00304 	addi	sp,sp,12
   47530:	f800283a 	ret
   47534:	80800017 	ldw	r2,0(r16)
   47538:	103ff826 	beq	r2,zero,4751c <_sbrk_r+0x34>
   4753c:	88800015 	stw	r2,0(r17)
   47540:	1805883a 	mov	r2,r3
   47544:	dfc00217 	ldw	ra,8(sp)
   47548:	dc400117 	ldw	r17,4(sp)
   4754c:	dc000017 	ldw	r16,0(sp)
   47550:	dec00304 	addi	sp,sp,12
   47554:	f800283a 	ret

00047558 <__sclose>:
   47558:	2940038f 	ldh	r5,14(r5)
   4755c:	004788c1 	jmpi	4788c <_close_r>

00047560 <__sseek>:
   47560:	defffe04 	addi	sp,sp,-8
   47564:	dc000015 	stw	r16,0(sp)
   47568:	2821883a 	mov	r16,r5
   4756c:	2940038f 	ldh	r5,14(r5)
   47570:	dfc00115 	stw	ra,4(sp)
   47574:	0047b040 	call	47b04 <_lseek_r>
   47578:	1007883a 	mov	r3,r2
   4757c:	00bfffc4 	movi	r2,-1
   47580:	18800926 	beq	r3,r2,475a8 <__sseek+0x48>
   47584:	8080030b 	ldhu	r2,12(r16)
   47588:	80c01415 	stw	r3,80(r16)
   4758c:	10840014 	ori	r2,r2,4096
   47590:	8080030d 	sth	r2,12(r16)
   47594:	1805883a 	mov	r2,r3
   47598:	dfc00117 	ldw	ra,4(sp)
   4759c:	dc000017 	ldw	r16,0(sp)
   475a0:	dec00204 	addi	sp,sp,8
   475a4:	f800283a 	ret
   475a8:	8080030b 	ldhu	r2,12(r16)
   475ac:	10bbffcc 	andi	r2,r2,61439
   475b0:	8080030d 	sth	r2,12(r16)
   475b4:	1805883a 	mov	r2,r3
   475b8:	dfc00117 	ldw	ra,4(sp)
   475bc:	dc000017 	ldw	r16,0(sp)
   475c0:	dec00204 	addi	sp,sp,8
   475c4:	f800283a 	ret

000475c8 <__swrite>:
   475c8:	2880030b 	ldhu	r2,12(r5)
   475cc:	defffb04 	addi	sp,sp,-20
   475d0:	dcc00315 	stw	r19,12(sp)
   475d4:	1080400c 	andi	r2,r2,256
   475d8:	dc800215 	stw	r18,8(sp)
   475dc:	dc400115 	stw	r17,4(sp)
   475e0:	dc000015 	stw	r16,0(sp)
   475e4:	3027883a 	mov	r19,r6
   475e8:	3825883a 	mov	r18,r7
   475ec:	dfc00415 	stw	ra,16(sp)
   475f0:	2821883a 	mov	r16,r5
   475f4:	000d883a 	mov	r6,zero
   475f8:	01c00084 	movi	r7,2
   475fc:	2023883a 	mov	r17,r4
   47600:	10000226 	beq	r2,zero,4760c <__swrite+0x44>
   47604:	2940038f 	ldh	r5,14(r5)
   47608:	0047b040 	call	47b04 <_lseek_r>
   4760c:	8080030b 	ldhu	r2,12(r16)
   47610:	8140038f 	ldh	r5,14(r16)
   47614:	8809883a 	mov	r4,r17
   47618:	10bbffcc 	andi	r2,r2,61439
   4761c:	980d883a 	mov	r6,r19
   47620:	900f883a 	mov	r7,r18
   47624:	8080030d 	sth	r2,12(r16)
   47628:	dfc00417 	ldw	ra,16(sp)
   4762c:	dcc00317 	ldw	r19,12(sp)
   47630:	dc800217 	ldw	r18,8(sp)
   47634:	dc400117 	ldw	r17,4(sp)
   47638:	dc000017 	ldw	r16,0(sp)
   4763c:	dec00504 	addi	sp,sp,20
   47640:	00477601 	jmpi	47760 <_write_r>

00047644 <__sread>:
   47644:	defffe04 	addi	sp,sp,-8
   47648:	dc000015 	stw	r16,0(sp)
   4764c:	2821883a 	mov	r16,r5
   47650:	2940038f 	ldh	r5,14(r5)
   47654:	dfc00115 	stw	ra,4(sp)
   47658:	0047b7c0 	call	47b7c <_read_r>
   4765c:	1007883a 	mov	r3,r2
   47660:	10000816 	blt	r2,zero,47684 <__sread+0x40>
   47664:	80801417 	ldw	r2,80(r16)
   47668:	10c5883a 	add	r2,r2,r3
   4766c:	80801415 	stw	r2,80(r16)
   47670:	1805883a 	mov	r2,r3
   47674:	dfc00117 	ldw	ra,4(sp)
   47678:	dc000017 	ldw	r16,0(sp)
   4767c:	dec00204 	addi	sp,sp,8
   47680:	f800283a 	ret
   47684:	8080030b 	ldhu	r2,12(r16)
   47688:	10bbffcc 	andi	r2,r2,61439
   4768c:	8080030d 	sth	r2,12(r16)
   47690:	1805883a 	mov	r2,r3
   47694:	dfc00117 	ldw	ra,4(sp)
   47698:	dc000017 	ldw	r16,0(sp)
   4769c:	dec00204 	addi	sp,sp,8
   476a0:	f800283a 	ret

000476a4 <strcmp>:
   476a4:	2144b03a 	or	r2,r4,r5
   476a8:	108000cc 	andi	r2,r2,3
   476ac:	10001d1e 	bne	r2,zero,47724 <strcmp+0x80>
   476b0:	200f883a 	mov	r7,r4
   476b4:	28800017 	ldw	r2,0(r5)
   476b8:	21000017 	ldw	r4,0(r4)
   476bc:	280d883a 	mov	r6,r5
   476c0:	2080161e 	bne	r4,r2,4771c <strcmp+0x78>
   476c4:	023fbff4 	movhi	r8,65279
   476c8:	423fbfc4 	addi	r8,r8,-257
   476cc:	2207883a 	add	r3,r4,r8
   476d0:	01602074 	movhi	r5,32897
   476d4:	29602004 	addi	r5,r5,-32640
   476d8:	1946703a 	and	r3,r3,r5
   476dc:	0104303a 	nor	r2,zero,r4
   476e0:	10c4703a 	and	r2,r2,r3
   476e4:	10001c1e 	bne	r2,zero,47758 <strcmp+0xb4>
   476e8:	4013883a 	mov	r9,r8
   476ec:	2811883a 	mov	r8,r5
   476f0:	00000106 	br	476f8 <strcmp+0x54>
   476f4:	1800181e 	bne	r3,zero,47758 <strcmp+0xb4>
   476f8:	39c00104 	addi	r7,r7,4
   476fc:	39000017 	ldw	r4,0(r7)
   47700:	31800104 	addi	r6,r6,4
   47704:	31400017 	ldw	r5,0(r6)
   47708:	2245883a 	add	r2,r4,r9
   4770c:	1204703a 	and	r2,r2,r8
   47710:	0106303a 	nor	r3,zero,r4
   47714:	1886703a 	and	r3,r3,r2
   47718:	217ff626 	beq	r4,r5,476f4 <strcmp+0x50>
   4771c:	3809883a 	mov	r4,r7
   47720:	300b883a 	mov	r5,r6
   47724:	20c00007 	ldb	r3,0(r4)
   47728:	1800051e 	bne	r3,zero,47740 <strcmp+0x9c>
   4772c:	00000606 	br	47748 <strcmp+0xa4>
   47730:	21000044 	addi	r4,r4,1
   47734:	20c00007 	ldb	r3,0(r4)
   47738:	29400044 	addi	r5,r5,1
   4773c:	18000226 	beq	r3,zero,47748 <strcmp+0xa4>
   47740:	28800007 	ldb	r2,0(r5)
   47744:	18bffa26 	beq	r3,r2,47730 <strcmp+0x8c>
   47748:	20c00003 	ldbu	r3,0(r4)
   4774c:	28800003 	ldbu	r2,0(r5)
   47750:	1885c83a 	sub	r2,r3,r2
   47754:	f800283a 	ret
   47758:	0005883a 	mov	r2,zero
   4775c:	f800283a 	ret

00047760 <_write_r>:
   47760:	defffd04 	addi	sp,sp,-12
   47764:	dc000015 	stw	r16,0(sp)
   47768:	04100034 	movhi	r16,16384
   4776c:	84078204 	addi	r16,r16,7688
   47770:	dc400115 	stw	r17,4(sp)
   47774:	80000015 	stw	zero,0(r16)
   47778:	2023883a 	mov	r17,r4
   4777c:	2809883a 	mov	r4,r5
   47780:	300b883a 	mov	r5,r6
   47784:	380d883a 	mov	r6,r7
   47788:	dfc00215 	stw	ra,8(sp)
   4778c:	004a90c0 	call	4a90c <write>
   47790:	1007883a 	mov	r3,r2
   47794:	00bfffc4 	movi	r2,-1
   47798:	18800626 	beq	r3,r2,477b4 <_write_r+0x54>
   4779c:	1805883a 	mov	r2,r3
   477a0:	dfc00217 	ldw	ra,8(sp)
   477a4:	dc400117 	ldw	r17,4(sp)
   477a8:	dc000017 	ldw	r16,0(sp)
   477ac:	dec00304 	addi	sp,sp,12
   477b0:	f800283a 	ret
   477b4:	80800017 	ldw	r2,0(r16)
   477b8:	103ff826 	beq	r2,zero,4779c <_write_r+0x3c>
   477bc:	88800015 	stw	r2,0(r17)
   477c0:	1805883a 	mov	r2,r3
   477c4:	dfc00217 	ldw	ra,8(sp)
   477c8:	dc400117 	ldw	r17,4(sp)
   477cc:	dc000017 	ldw	r16,0(sp)
   477d0:	dec00304 	addi	sp,sp,12
   477d4:	f800283a 	ret

000477d8 <_calloc_r>:
   477d8:	298b383a 	mul	r5,r5,r6
   477dc:	defffe04 	addi	sp,sp,-8
   477e0:	dc000015 	stw	r16,0(sp)
   477e4:	dfc00115 	stw	ra,4(sp)
   477e8:	00454540 	call	45454 <_malloc_r>
   477ec:	1021883a 	mov	r16,r2
   477f0:	01c00904 	movi	r7,36
   477f4:	10000d26 	beq	r2,zero,4782c <_calloc_r+0x54>
   477f8:	10ffff17 	ldw	r3,-4(r2)
   477fc:	1009883a 	mov	r4,r2
   47800:	00bfff04 	movi	r2,-4
   47804:	1886703a 	and	r3,r3,r2
   47808:	1887883a 	add	r3,r3,r2
   4780c:	180d883a 	mov	r6,r3
   47810:	000b883a 	mov	r5,zero
   47814:	38c01736 	bltu	r7,r3,47874 <_calloc_r+0x9c>
   47818:	008004c4 	movi	r2,19
   4781c:	10c00836 	bltu	r2,r3,47840 <_calloc_r+0x68>
   47820:	20000215 	stw	zero,8(r4)
   47824:	20000015 	stw	zero,0(r4)
   47828:	20000115 	stw	zero,4(r4)
   4782c:	8005883a 	mov	r2,r16
   47830:	dfc00117 	ldw	ra,4(sp)
   47834:	dc000017 	ldw	r16,0(sp)
   47838:	dec00204 	addi	sp,sp,8
   4783c:	f800283a 	ret
   47840:	008006c4 	movi	r2,27
   47844:	80000015 	stw	zero,0(r16)
   47848:	80000115 	stw	zero,4(r16)
   4784c:	81000204 	addi	r4,r16,8
   47850:	10fff32e 	bgeu	r2,r3,47820 <_calloc_r+0x48>
   47854:	80000215 	stw	zero,8(r16)
   47858:	80000315 	stw	zero,12(r16)
   4785c:	81000404 	addi	r4,r16,16
   47860:	19ffef1e 	bne	r3,r7,47820 <_calloc_r+0x48>
   47864:	81000604 	addi	r4,r16,24
   47868:	80000415 	stw	zero,16(r16)
   4786c:	80000515 	stw	zero,20(r16)
   47870:	003feb06 	br	47820 <_calloc_r+0x48>
   47874:	0045df80 	call	45df8 <memset>
   47878:	8005883a 	mov	r2,r16
   4787c:	dfc00117 	ldw	ra,4(sp)
   47880:	dc000017 	ldw	r16,0(sp)
   47884:	dec00204 	addi	sp,sp,8
   47888:	f800283a 	ret

0004788c <_close_r>:
   4788c:	defffd04 	addi	sp,sp,-12
   47890:	dc000015 	stw	r16,0(sp)
   47894:	04100034 	movhi	r16,16384
   47898:	84078204 	addi	r16,r16,7688
   4789c:	dc400115 	stw	r17,4(sp)
   478a0:	80000015 	stw	zero,0(r16)
   478a4:	2023883a 	mov	r17,r4
   478a8:	2809883a 	mov	r4,r5
   478ac:	dfc00215 	stw	ra,8(sp)
   478b0:	0049f7c0 	call	49f7c <close>
   478b4:	1007883a 	mov	r3,r2
   478b8:	00bfffc4 	movi	r2,-1
   478bc:	18800626 	beq	r3,r2,478d8 <_close_r+0x4c>
   478c0:	1805883a 	mov	r2,r3
   478c4:	dfc00217 	ldw	ra,8(sp)
   478c8:	dc400117 	ldw	r17,4(sp)
   478cc:	dc000017 	ldw	r16,0(sp)
   478d0:	dec00304 	addi	sp,sp,12
   478d4:	f800283a 	ret
   478d8:	80800017 	ldw	r2,0(r16)
   478dc:	103ff826 	beq	r2,zero,478c0 <_close_r+0x34>
   478e0:	88800015 	stw	r2,0(r17)
   478e4:	1805883a 	mov	r2,r3
   478e8:	dfc00217 	ldw	ra,8(sp)
   478ec:	dc400117 	ldw	r17,4(sp)
   478f0:	dc000017 	ldw	r16,0(sp)
   478f4:	dec00304 	addi	sp,sp,12
   478f8:	f800283a 	ret

000478fc <_fclose_r>:
   478fc:	defffc04 	addi	sp,sp,-16
   47900:	dc400115 	stw	r17,4(sp)
   47904:	dc000015 	stw	r16,0(sp)
   47908:	dfc00315 	stw	ra,12(sp)
   4790c:	dc800215 	stw	r18,8(sp)
   47910:	2821883a 	mov	r16,r5
   47914:	2023883a 	mov	r17,r4
   47918:	28002926 	beq	r5,zero,479c0 <_fclose_r+0xc4>
   4791c:	00445380 	call	44538 <__sfp_lock_acquire>
   47920:	88000226 	beq	r17,zero,4792c <_fclose_r+0x30>
   47924:	88800e17 	ldw	r2,56(r17)
   47928:	10002d26 	beq	r2,zero,479e0 <_fclose_r+0xe4>
   4792c:	8080030f 	ldh	r2,12(r16)
   47930:	10002226 	beq	r2,zero,479bc <_fclose_r+0xc0>
   47934:	8809883a 	mov	r4,r17
   47938:	800b883a 	mov	r5,r16
   4793c:	00442b00 	call	442b0 <_fflush_r>
   47940:	1025883a 	mov	r18,r2
   47944:	80800b17 	ldw	r2,44(r16)
   47948:	10000426 	beq	r2,zero,4795c <_fclose_r+0x60>
   4794c:	81400717 	ldw	r5,28(r16)
   47950:	8809883a 	mov	r4,r17
   47954:	103ee83a 	callr	r2
   47958:	10002a16 	blt	r2,zero,47a04 <_fclose_r+0x108>
   4795c:	8080030b 	ldhu	r2,12(r16)
   47960:	1080200c 	andi	r2,r2,128
   47964:	1000231e 	bne	r2,zero,479f4 <_fclose_r+0xf8>
   47968:	81400c17 	ldw	r5,48(r16)
   4796c:	28000526 	beq	r5,zero,47984 <_fclose_r+0x88>
   47970:	80801004 	addi	r2,r16,64
   47974:	28800226 	beq	r5,r2,47980 <_fclose_r+0x84>
   47978:	8809883a 	mov	r4,r17
   4797c:	00448cc0 	call	448cc <_free_r>
   47980:	80000c15 	stw	zero,48(r16)
   47984:	81401117 	ldw	r5,68(r16)
   47988:	28000326 	beq	r5,zero,47998 <_fclose_r+0x9c>
   4798c:	8809883a 	mov	r4,r17
   47990:	00448cc0 	call	448cc <_free_r>
   47994:	80001115 	stw	zero,68(r16)
   47998:	8000030d 	sth	zero,12(r16)
   4799c:	004453c0 	call	4453c <__sfp_lock_release>
   479a0:	9005883a 	mov	r2,r18
   479a4:	dfc00317 	ldw	ra,12(sp)
   479a8:	dc800217 	ldw	r18,8(sp)
   479ac:	dc400117 	ldw	r17,4(sp)
   479b0:	dc000017 	ldw	r16,0(sp)
   479b4:	dec00404 	addi	sp,sp,16
   479b8:	f800283a 	ret
   479bc:	004453c0 	call	4453c <__sfp_lock_release>
   479c0:	0025883a 	mov	r18,zero
   479c4:	9005883a 	mov	r2,r18
   479c8:	dfc00317 	ldw	ra,12(sp)
   479cc:	dc800217 	ldw	r18,8(sp)
   479d0:	dc400117 	ldw	r17,4(sp)
   479d4:	dc000017 	ldw	r16,0(sp)
   479d8:	dec00404 	addi	sp,sp,16
   479dc:	f800283a 	ret
   479e0:	8809883a 	mov	r4,r17
   479e4:	00445480 	call	44548 <__sinit>
   479e8:	8080030f 	ldh	r2,12(r16)
   479ec:	103fd11e 	bne	r2,zero,47934 <_fclose_r+0x38>
   479f0:	003ff206 	br	479bc <_fclose_r+0xc0>
   479f4:	81400417 	ldw	r5,16(r16)
   479f8:	8809883a 	mov	r4,r17
   479fc:	00448cc0 	call	448cc <_free_r>
   47a00:	003fd906 	br	47968 <_fclose_r+0x6c>
   47a04:	04bfffc4 	movi	r18,-1
   47a08:	003fd406 	br	4795c <_fclose_r+0x60>

00047a0c <fclose>:
   47a0c:	00900034 	movhi	r2,16384
   47a10:	10876c04 	addi	r2,r2,7600
   47a14:	200b883a 	mov	r5,r4
   47a18:	11000017 	ldw	r4,0(r2)
   47a1c:	00478fc1 	jmpi	478fc <_fclose_r>

00047a20 <_fstat_r>:
   47a20:	defffd04 	addi	sp,sp,-12
   47a24:	dc000015 	stw	r16,0(sp)
   47a28:	04100034 	movhi	r16,16384
   47a2c:	84078204 	addi	r16,r16,7688
   47a30:	dc400115 	stw	r17,4(sp)
   47a34:	80000015 	stw	zero,0(r16)
   47a38:	2023883a 	mov	r17,r4
   47a3c:	2809883a 	mov	r4,r5
   47a40:	300b883a 	mov	r5,r6
   47a44:	dfc00215 	stw	ra,8(sp)
   47a48:	004a1040 	call	4a104 <fstat>
   47a4c:	1007883a 	mov	r3,r2
   47a50:	00bfffc4 	movi	r2,-1
   47a54:	18800626 	beq	r3,r2,47a70 <_fstat_r+0x50>
   47a58:	1805883a 	mov	r2,r3
   47a5c:	dfc00217 	ldw	ra,8(sp)
   47a60:	dc400117 	ldw	r17,4(sp)
   47a64:	dc000017 	ldw	r16,0(sp)
   47a68:	dec00304 	addi	sp,sp,12
   47a6c:	f800283a 	ret
   47a70:	80800017 	ldw	r2,0(r16)
   47a74:	103ff826 	beq	r2,zero,47a58 <_fstat_r+0x38>
   47a78:	88800015 	stw	r2,0(r17)
   47a7c:	1805883a 	mov	r2,r3
   47a80:	dfc00217 	ldw	ra,8(sp)
   47a84:	dc400117 	ldw	r17,4(sp)
   47a88:	dc000017 	ldw	r16,0(sp)
   47a8c:	dec00304 	addi	sp,sp,12
   47a90:	f800283a 	ret

00047a94 <_isatty_r>:
   47a94:	defffd04 	addi	sp,sp,-12
   47a98:	dc000015 	stw	r16,0(sp)
   47a9c:	04100034 	movhi	r16,16384
   47aa0:	84078204 	addi	r16,r16,7688
   47aa4:	dc400115 	stw	r17,4(sp)
   47aa8:	80000015 	stw	zero,0(r16)
   47aac:	2023883a 	mov	r17,r4
   47ab0:	2809883a 	mov	r4,r5
   47ab4:	dfc00215 	stw	ra,8(sp)
   47ab8:	004a2380 	call	4a238 <isatty>
   47abc:	1007883a 	mov	r3,r2
   47ac0:	00bfffc4 	movi	r2,-1
   47ac4:	18800626 	beq	r3,r2,47ae0 <_isatty_r+0x4c>
   47ac8:	1805883a 	mov	r2,r3
   47acc:	dfc00217 	ldw	ra,8(sp)
   47ad0:	dc400117 	ldw	r17,4(sp)
   47ad4:	dc000017 	ldw	r16,0(sp)
   47ad8:	dec00304 	addi	sp,sp,12
   47adc:	f800283a 	ret
   47ae0:	80800017 	ldw	r2,0(r16)
   47ae4:	103ff826 	beq	r2,zero,47ac8 <_isatty_r+0x34>
   47ae8:	88800015 	stw	r2,0(r17)
   47aec:	1805883a 	mov	r2,r3
   47af0:	dfc00217 	ldw	ra,8(sp)
   47af4:	dc400117 	ldw	r17,4(sp)
   47af8:	dc000017 	ldw	r16,0(sp)
   47afc:	dec00304 	addi	sp,sp,12
   47b00:	f800283a 	ret

00047b04 <_lseek_r>:
   47b04:	defffd04 	addi	sp,sp,-12
   47b08:	dc000015 	stw	r16,0(sp)
   47b0c:	04100034 	movhi	r16,16384
   47b10:	84078204 	addi	r16,r16,7688
   47b14:	dc400115 	stw	r17,4(sp)
   47b18:	80000015 	stw	zero,0(r16)
   47b1c:	2023883a 	mov	r17,r4
   47b20:	2809883a 	mov	r4,r5
   47b24:	300b883a 	mov	r5,r6
   47b28:	380d883a 	mov	r6,r7
   47b2c:	dfc00215 	stw	ra,8(sp)
   47b30:	004a4440 	call	4a444 <lseek>
   47b34:	1007883a 	mov	r3,r2
   47b38:	00bfffc4 	movi	r2,-1
   47b3c:	18800626 	beq	r3,r2,47b58 <_lseek_r+0x54>
   47b40:	1805883a 	mov	r2,r3
   47b44:	dfc00217 	ldw	ra,8(sp)
   47b48:	dc400117 	ldw	r17,4(sp)
   47b4c:	dc000017 	ldw	r16,0(sp)
   47b50:	dec00304 	addi	sp,sp,12
   47b54:	f800283a 	ret
   47b58:	80800017 	ldw	r2,0(r16)
   47b5c:	103ff826 	beq	r2,zero,47b40 <_lseek_r+0x3c>
   47b60:	88800015 	stw	r2,0(r17)
   47b64:	1805883a 	mov	r2,r3
   47b68:	dfc00217 	ldw	ra,8(sp)
   47b6c:	dc400117 	ldw	r17,4(sp)
   47b70:	dc000017 	ldw	r16,0(sp)
   47b74:	dec00304 	addi	sp,sp,12
   47b78:	f800283a 	ret

00047b7c <_read_r>:
   47b7c:	defffd04 	addi	sp,sp,-12
   47b80:	dc000015 	stw	r16,0(sp)
   47b84:	04100034 	movhi	r16,16384
   47b88:	84078204 	addi	r16,r16,7688
   47b8c:	dc400115 	stw	r17,4(sp)
   47b90:	80000015 	stw	zero,0(r16)
   47b94:	2023883a 	mov	r17,r4
   47b98:	2809883a 	mov	r4,r5
   47b9c:	300b883a 	mov	r5,r6
   47ba0:	380d883a 	mov	r6,r7
   47ba4:	dfc00215 	stw	ra,8(sp)
   47ba8:	004a6400 	call	4a640 <read>
   47bac:	1007883a 	mov	r3,r2
   47bb0:	00bfffc4 	movi	r2,-1
   47bb4:	18800626 	beq	r3,r2,47bd0 <_read_r+0x54>
   47bb8:	1805883a 	mov	r2,r3
   47bbc:	dfc00217 	ldw	ra,8(sp)
   47bc0:	dc400117 	ldw	r17,4(sp)
   47bc4:	dc000017 	ldw	r16,0(sp)
   47bc8:	dec00304 	addi	sp,sp,12
   47bcc:	f800283a 	ret
   47bd0:	80800017 	ldw	r2,0(r16)
   47bd4:	103ff826 	beq	r2,zero,47bb8 <_read_r+0x3c>
   47bd8:	88800015 	stw	r2,0(r17)
   47bdc:	1805883a 	mov	r2,r3
   47be0:	dfc00217 	ldw	ra,8(sp)
   47be4:	dc400117 	ldw	r17,4(sp)
   47be8:	dc000017 	ldw	r16,0(sp)
   47bec:	dec00304 	addi	sp,sp,12
   47bf0:	f800283a 	ret

00047bf4 <__udivdi3>:
   47bf4:	defff004 	addi	sp,sp,-64
   47bf8:	2005883a 	mov	r2,r4
   47bfc:	3011883a 	mov	r8,r6
   47c00:	df000e15 	stw	fp,56(sp)
   47c04:	dd000a15 	stw	r20,40(sp)
   47c08:	dc000615 	stw	r16,24(sp)
   47c0c:	dfc00f15 	stw	ra,60(sp)
   47c10:	ddc00d15 	stw	r23,52(sp)
   47c14:	dd800c15 	stw	r22,48(sp)
   47c18:	dd400b15 	stw	r21,44(sp)
   47c1c:	dcc00915 	stw	r19,36(sp)
   47c20:	dc800815 	stw	r18,32(sp)
   47c24:	dc400715 	stw	r17,28(sp)
   47c28:	4021883a 	mov	r16,r8
   47c2c:	1039883a 	mov	fp,r2
   47c30:	2829883a 	mov	r20,r5
   47c34:	38003b1e 	bne	r7,zero,47d24 <__udivdi3+0x130>
   47c38:	2a005c36 	bltu	r5,r8,47dac <__udivdi3+0x1b8>
   47c3c:	4000a626 	beq	r8,zero,47ed8 <__udivdi3+0x2e4>
   47c40:	00bfffd4 	movui	r2,65535
   47c44:	14009e36 	bltu	r2,r16,47ec0 <__udivdi3+0x2cc>
   47c48:	00803fc4 	movi	r2,255
   47c4c:	14013d36 	bltu	r2,r16,48144 <__udivdi3+0x550>
   47c50:	000b883a 	mov	r5,zero
   47c54:	0005883a 	mov	r2,zero
   47c58:	8084d83a 	srl	r2,r16,r2
   47c5c:	01100034 	movhi	r4,16384
   47c60:	21009a04 	addi	r4,r4,616
   47c64:	01800804 	movi	r6,32
   47c68:	1105883a 	add	r2,r2,r4
   47c6c:	10c00003 	ldbu	r3,0(r2)
   47c70:	28c7883a 	add	r3,r5,r3
   47c74:	30edc83a 	sub	r22,r6,r3
   47c78:	b000ee1e 	bne	r22,zero,48034 <__udivdi3+0x440>
   47c7c:	802ad43a 	srli	r21,r16,16
   47c80:	00800044 	movi	r2,1
   47c84:	a423c83a 	sub	r17,r20,r16
   47c88:	85ffffcc 	andi	r23,r16,65535
   47c8c:	d8800315 	stw	r2,12(sp)
   47c90:	8809883a 	mov	r4,r17
   47c94:	a80b883a 	mov	r5,r21
   47c98:	00499d80 	call	499d8 <__udivsi3>
   47c9c:	8809883a 	mov	r4,r17
   47ca0:	a80b883a 	mov	r5,r21
   47ca4:	102d883a 	mov	r22,r2
   47ca8:	00499e00 	call	499e0 <__umodsi3>
   47cac:	1004943a 	slli	r2,r2,16
   47cb0:	e006d43a 	srli	r3,fp,16
   47cb4:	bda3383a 	mul	r17,r23,r22
   47cb8:	10c4b03a 	or	r2,r2,r3
   47cbc:	1440042e 	bgeu	r2,r17,47cd0 <__udivdi3+0xdc>
   47cc0:	1405883a 	add	r2,r2,r16
   47cc4:	b5bfffc4 	addi	r22,r22,-1
   47cc8:	14000136 	bltu	r2,r16,47cd0 <__udivdi3+0xdc>
   47ccc:	14413d36 	bltu	r2,r17,481c4 <__udivdi3+0x5d0>
   47cd0:	1463c83a 	sub	r17,r2,r17
   47cd4:	8809883a 	mov	r4,r17
   47cd8:	a80b883a 	mov	r5,r21
   47cdc:	00499d80 	call	499d8 <__udivsi3>
   47ce0:	8809883a 	mov	r4,r17
   47ce4:	a80b883a 	mov	r5,r21
   47ce8:	1029883a 	mov	r20,r2
   47cec:	00499e00 	call	499e0 <__umodsi3>
   47cf0:	1004943a 	slli	r2,r2,16
   47cf4:	bd09383a 	mul	r4,r23,r20
   47cf8:	e0ffffcc 	andi	r3,fp,65535
   47cfc:	10c4b03a 	or	r2,r2,r3
   47d00:	1100042e 	bgeu	r2,r4,47d14 <__udivdi3+0x120>
   47d04:	8085883a 	add	r2,r16,r2
   47d08:	a53fffc4 	addi	r20,r20,-1
   47d0c:	14000136 	bltu	r2,r16,47d14 <__udivdi3+0x120>
   47d10:	11012036 	bltu	r2,r4,48194 <__udivdi3+0x5a0>
   47d14:	b004943a 	slli	r2,r22,16
   47d18:	d9000317 	ldw	r4,12(sp)
   47d1c:	a084b03a 	or	r2,r20,r2
   47d20:	00001506 	br	47d78 <__udivdi3+0x184>
   47d24:	380d883a 	mov	r6,r7
   47d28:	29c06236 	bltu	r5,r7,47eb4 <__udivdi3+0x2c0>
   47d2c:	00bfffd4 	movui	r2,65535
   47d30:	11c05a36 	bltu	r2,r7,47e9c <__udivdi3+0x2a8>
   47d34:	00803fc4 	movi	r2,255
   47d38:	11c0fc36 	bltu	r2,r7,4812c <__udivdi3+0x538>
   47d3c:	000b883a 	mov	r5,zero
   47d40:	0005883a 	mov	r2,zero
   47d44:	3084d83a 	srl	r2,r6,r2
   47d48:	01100034 	movhi	r4,16384
   47d4c:	21009a04 	addi	r4,r4,616
   47d50:	01c00804 	movi	r7,32
   47d54:	1105883a 	add	r2,r2,r4
   47d58:	10c00003 	ldbu	r3,0(r2)
   47d5c:	28c7883a 	add	r3,r5,r3
   47d60:	38efc83a 	sub	r23,r7,r3
   47d64:	b800691e 	bne	r23,zero,47f0c <__udivdi3+0x318>
   47d68:	35000136 	bltu	r6,r20,47d70 <__udivdi3+0x17c>
   47d6c:	e4005136 	bltu	fp,r16,47eb4 <__udivdi3+0x2c0>
   47d70:	00800044 	movi	r2,1
   47d74:	0009883a 	mov	r4,zero
   47d78:	2007883a 	mov	r3,r4
   47d7c:	dfc00f17 	ldw	ra,60(sp)
   47d80:	df000e17 	ldw	fp,56(sp)
   47d84:	ddc00d17 	ldw	r23,52(sp)
   47d88:	dd800c17 	ldw	r22,48(sp)
   47d8c:	dd400b17 	ldw	r21,44(sp)
   47d90:	dd000a17 	ldw	r20,40(sp)
   47d94:	dcc00917 	ldw	r19,36(sp)
   47d98:	dc800817 	ldw	r18,32(sp)
   47d9c:	dc400717 	ldw	r17,28(sp)
   47da0:	dc000617 	ldw	r16,24(sp)
   47da4:	dec01004 	addi	sp,sp,64
   47da8:	f800283a 	ret
   47dac:	00bfffd4 	movui	r2,65535
   47db0:	12005036 	bltu	r2,r8,47ef4 <__udivdi3+0x300>
   47db4:	00803fc4 	movi	r2,255
   47db8:	1200e836 	bltu	r2,r8,4815c <__udivdi3+0x568>
   47dbc:	000b883a 	mov	r5,zero
   47dc0:	0005883a 	mov	r2,zero
   47dc4:	8084d83a 	srl	r2,r16,r2
   47dc8:	01100034 	movhi	r4,16384
   47dcc:	21009a04 	addi	r4,r4,616
   47dd0:	01800804 	movi	r6,32
   47dd4:	1105883a 	add	r2,r2,r4
   47dd8:	10c00003 	ldbu	r3,0(r2)
   47ddc:	28c7883a 	add	r3,r5,r3
   47de0:	30cbc83a 	sub	r5,r6,r3
   47de4:	28000626 	beq	r5,zero,47e00 <__udivdi3+0x20c>
   47de8:	3145c83a 	sub	r2,r6,r5
   47dec:	e084d83a 	srl	r2,fp,r2
   47df0:	a146983a 	sll	r3,r20,r5
   47df4:	e178983a 	sll	fp,fp,r5
   47df8:	8160983a 	sll	r16,r16,r5
   47dfc:	18a8b03a 	or	r20,r3,r2
   47e00:	802ad43a 	srli	r21,r16,16
   47e04:	a009883a 	mov	r4,r20
   47e08:	85ffffcc 	andi	r23,r16,65535
   47e0c:	a80b883a 	mov	r5,r21
   47e10:	00499d80 	call	499d8 <__udivsi3>
   47e14:	a009883a 	mov	r4,r20
   47e18:	a80b883a 	mov	r5,r21
   47e1c:	102d883a 	mov	r22,r2
   47e20:	00499e00 	call	499e0 <__umodsi3>
   47e24:	1004943a 	slli	r2,r2,16
   47e28:	e006d43a 	srli	r3,fp,16
   47e2c:	bda3383a 	mul	r17,r23,r22
   47e30:	10c4b03a 	or	r2,r2,r3
   47e34:	1440042e 	bgeu	r2,r17,47e48 <__udivdi3+0x254>
   47e38:	1405883a 	add	r2,r2,r16
   47e3c:	b5bfffc4 	addi	r22,r22,-1
   47e40:	14000136 	bltu	r2,r16,47e48 <__udivdi3+0x254>
   47e44:	1440d536 	bltu	r2,r17,4819c <__udivdi3+0x5a8>
   47e48:	1463c83a 	sub	r17,r2,r17
   47e4c:	8809883a 	mov	r4,r17
   47e50:	a80b883a 	mov	r5,r21
   47e54:	00499d80 	call	499d8 <__udivsi3>
   47e58:	8809883a 	mov	r4,r17
   47e5c:	a80b883a 	mov	r5,r21
   47e60:	1029883a 	mov	r20,r2
   47e64:	00499e00 	call	499e0 <__umodsi3>
   47e68:	1004943a 	slli	r2,r2,16
   47e6c:	bd09383a 	mul	r4,r23,r20
   47e70:	e0ffffcc 	andi	r3,fp,65535
   47e74:	10c4b03a 	or	r2,r2,r3
   47e78:	1100042e 	bgeu	r2,r4,47e8c <__udivdi3+0x298>
   47e7c:	8085883a 	add	r2,r16,r2
   47e80:	a53fffc4 	addi	r20,r20,-1
   47e84:	14000136 	bltu	r2,r16,47e8c <__udivdi3+0x298>
   47e88:	1100c736 	bltu	r2,r4,481a8 <__udivdi3+0x5b4>
   47e8c:	b004943a 	slli	r2,r22,16
   47e90:	0009883a 	mov	r4,zero
   47e94:	a084b03a 	or	r2,r20,r2
   47e98:	003fb706 	br	47d78 <__udivdi3+0x184>
   47e9c:	00804034 	movhi	r2,256
   47ea0:	10bfffc4 	addi	r2,r2,-1
   47ea4:	11c0a436 	bltu	r2,r7,48138 <__udivdi3+0x544>
   47ea8:	01400404 	movi	r5,16
   47eac:	2805883a 	mov	r2,r5
   47eb0:	003fa406 	br	47d44 <__udivdi3+0x150>
   47eb4:	0005883a 	mov	r2,zero
   47eb8:	0009883a 	mov	r4,zero
   47ebc:	003fae06 	br	47d78 <__udivdi3+0x184>
   47ec0:	00804034 	movhi	r2,256
   47ec4:	10bfffc4 	addi	r2,r2,-1
   47ec8:	1400a136 	bltu	r2,r16,48150 <__udivdi3+0x55c>
   47ecc:	01400404 	movi	r5,16
   47ed0:	2805883a 	mov	r2,r5
   47ed4:	003f6006 	br	47c58 <__udivdi3+0x64>
   47ed8:	01000044 	movi	r4,1
   47edc:	000b883a 	mov	r5,zero
   47ee0:	00499d80 	call	499d8 <__udivsi3>
   47ee4:	1021883a 	mov	r16,r2
   47ee8:	00bfffd4 	movui	r2,65535
   47eec:	143ff436 	bltu	r2,r16,47ec0 <__udivdi3+0x2cc>
   47ef0:	003f5506 	br	47c48 <__udivdi3+0x54>
   47ef4:	00804034 	movhi	r2,256
   47ef8:	10bfffc4 	addi	r2,r2,-1
   47efc:	12009a36 	bltu	r2,r8,48168 <__udivdi3+0x574>
   47f00:	01400404 	movi	r5,16
   47f04:	2805883a 	mov	r2,r5
   47f08:	003fae06 	br	47dc4 <__udivdi3+0x1d0>
   47f0c:	3dc5c83a 	sub	r2,r7,r23
   47f10:	35c8983a 	sll	r4,r6,r23
   47f14:	8086d83a 	srl	r3,r16,r2
   47f18:	a0a2d83a 	srl	r17,r20,r2
   47f1c:	e084d83a 	srl	r2,fp,r2
   47f20:	20eab03a 	or	r21,r4,r3
   47f24:	a82cd43a 	srli	r22,r21,16
   47f28:	a5c6983a 	sll	r3,r20,r23
   47f2c:	8809883a 	mov	r4,r17
   47f30:	b00b883a 	mov	r5,r22
   47f34:	1886b03a 	or	r3,r3,r2
   47f38:	d8c00215 	stw	r3,8(sp)
   47f3c:	00499d80 	call	499d8 <__udivsi3>
   47f40:	8809883a 	mov	r4,r17
   47f44:	b00b883a 	mov	r5,r22
   47f48:	1029883a 	mov	r20,r2
   47f4c:	00499e00 	call	499e0 <__umodsi3>
   47f50:	a8ffffcc 	andi	r3,r21,65535
   47f54:	d8c00515 	stw	r3,20(sp)
   47f58:	d9000217 	ldw	r4,8(sp)
   47f5c:	d9400517 	ldw	r5,20(sp)
   47f60:	1004943a 	slli	r2,r2,16
   47f64:	2006d43a 	srli	r3,r4,16
   47f68:	85e0983a 	sll	r16,r16,r23
   47f6c:	2d23383a 	mul	r17,r5,r20
   47f70:	10c4b03a 	or	r2,r2,r3
   47f74:	dc000015 	stw	r16,0(sp)
   47f78:	1440032e 	bgeu	r2,r17,47f88 <__udivdi3+0x394>
   47f7c:	1545883a 	add	r2,r2,r21
   47f80:	a53fffc4 	addi	r20,r20,-1
   47f84:	15407f2e 	bgeu	r2,r21,48184 <__udivdi3+0x590>
   47f88:	1463c83a 	sub	r17,r2,r17
   47f8c:	8809883a 	mov	r4,r17
   47f90:	b00b883a 	mov	r5,r22
   47f94:	00499d80 	call	499d8 <__udivsi3>
   47f98:	8809883a 	mov	r4,r17
   47f9c:	b00b883a 	mov	r5,r22
   47fa0:	1021883a 	mov	r16,r2
   47fa4:	00499e00 	call	499e0 <__umodsi3>
   47fa8:	d8c00517 	ldw	r3,20(sp)
   47fac:	d9000217 	ldw	r4,8(sp)
   47fb0:	1004943a 	slli	r2,r2,16
   47fb4:	1c0f383a 	mul	r7,r3,r16
   47fb8:	20ffffcc 	andi	r3,r4,65535
   47fbc:	10e2b03a 	or	r17,r2,r3
   47fc0:	89c0032e 	bgeu	r17,r7,47fd0 <__udivdi3+0x3dc>
   47fc4:	8d63883a 	add	r17,r17,r21
   47fc8:	843fffc4 	addi	r16,r16,-1
   47fcc:	8d40692e 	bgeu	r17,r21,48174 <__udivdi3+0x580>
   47fd0:	a008943a 	slli	r4,r20,16
   47fd4:	d9400017 	ldw	r5,0(sp)
   47fd8:	89e3c83a 	sub	r17,r17,r7
   47fdc:	8110b03a 	or	r8,r16,r4
   47fe0:	280cd43a 	srli	r6,r5,16
   47fe4:	28ffffcc 	andi	r3,r5,65535
   47fe8:	40bfffcc 	andi	r2,r8,65535
   47fec:	400ad43a 	srli	r5,r8,16
   47ff0:	10d3383a 	mul	r9,r2,r3
   47ff4:	1185383a 	mul	r2,r2,r6
   47ff8:	28c7383a 	mul	r3,r5,r3
   47ffc:	4808d43a 	srli	r4,r9,16
   48000:	298b383a 	mul	r5,r5,r6
   48004:	10c5883a 	add	r2,r2,r3
   48008:	2089883a 	add	r4,r4,r2
   4800c:	20c0022e 	bgeu	r4,r3,48018 <__udivdi3+0x424>
   48010:	00800074 	movhi	r2,1
   48014:	288b883a 	add	r5,r5,r2
   48018:	2004d43a 	srli	r2,r4,16
   4801c:	288b883a 	add	r5,r5,r2
   48020:	89403f36 	bltu	r17,r5,48120 <__udivdi3+0x52c>
   48024:	89403926 	beq	r17,r5,4810c <__udivdi3+0x518>
   48028:	4005883a 	mov	r2,r8
   4802c:	0009883a 	mov	r4,zero
   48030:	003f5106 	br	47d78 <__udivdi3+0x184>
   48034:	85a0983a 	sll	r16,r16,r22
   48038:	3585c83a 	sub	r2,r6,r22
   4803c:	a0a2d83a 	srl	r17,r20,r2
   48040:	802ad43a 	srli	r21,r16,16
   48044:	e084d83a 	srl	r2,fp,r2
   48048:	a586983a 	sll	r3,r20,r22
   4804c:	8809883a 	mov	r4,r17
   48050:	a80b883a 	mov	r5,r21
   48054:	1886b03a 	or	r3,r3,r2
   48058:	d8c00115 	stw	r3,4(sp)
   4805c:	00499d80 	call	499d8 <__udivsi3>
   48060:	8809883a 	mov	r4,r17
   48064:	a80b883a 	mov	r5,r21
   48068:	d8800415 	stw	r2,16(sp)
   4806c:	00499e00 	call	499e0 <__umodsi3>
   48070:	d9000117 	ldw	r4,4(sp)
   48074:	d9400417 	ldw	r5,16(sp)
   48078:	1004943a 	slli	r2,r2,16
   4807c:	85ffffcc 	andi	r23,r16,65535
   48080:	2006d43a 	srli	r3,r4,16
   48084:	b963383a 	mul	r17,r23,r5
   48088:	10c4b03a 	or	r2,r2,r3
   4808c:	1440042e 	bgeu	r2,r17,480a0 <__udivdi3+0x4ac>
   48090:	297fffc4 	addi	r5,r5,-1
   48094:	1405883a 	add	r2,r2,r16
   48098:	d9400415 	stw	r5,16(sp)
   4809c:	1400442e 	bgeu	r2,r16,481b0 <__udivdi3+0x5bc>
   480a0:	1463c83a 	sub	r17,r2,r17
   480a4:	8809883a 	mov	r4,r17
   480a8:	a80b883a 	mov	r5,r21
   480ac:	00499d80 	call	499d8 <__udivsi3>
   480b0:	8809883a 	mov	r4,r17
   480b4:	a80b883a 	mov	r5,r21
   480b8:	1029883a 	mov	r20,r2
   480bc:	00499e00 	call	499e0 <__umodsi3>
   480c0:	d9400117 	ldw	r5,4(sp)
   480c4:	1004943a 	slli	r2,r2,16
   480c8:	bd09383a 	mul	r4,r23,r20
   480cc:	28ffffcc 	andi	r3,r5,65535
   480d0:	10c6b03a 	or	r3,r2,r3
   480d4:	1900062e 	bgeu	r3,r4,480f0 <__udivdi3+0x4fc>
   480d8:	1c07883a 	add	r3,r3,r16
   480dc:	a53fffc4 	addi	r20,r20,-1
   480e0:	1c000336 	bltu	r3,r16,480f0 <__udivdi3+0x4fc>
   480e4:	1900022e 	bgeu	r3,r4,480f0 <__udivdi3+0x4fc>
   480e8:	a53fffc4 	addi	r20,r20,-1
   480ec:	1c07883a 	add	r3,r3,r16
   480f0:	d9400417 	ldw	r5,16(sp)
   480f4:	e5b8983a 	sll	fp,fp,r22
   480f8:	1923c83a 	sub	r17,r3,r4
   480fc:	2804943a 	slli	r2,r5,16
   48100:	a0a8b03a 	or	r20,r20,r2
   48104:	dd000315 	stw	r20,12(sp)
   48108:	003ee106 	br	47c90 <__udivdi3+0x9c>
   4810c:	2004943a 	slli	r2,r4,16
   48110:	e5c8983a 	sll	r4,fp,r23
   48114:	48ffffcc 	andi	r3,r9,65535
   48118:	10c5883a 	add	r2,r2,r3
   4811c:	20bfc22e 	bgeu	r4,r2,48028 <__udivdi3+0x434>
   48120:	40bfffc4 	addi	r2,r8,-1
   48124:	0009883a 	mov	r4,zero
   48128:	003f1306 	br	47d78 <__udivdi3+0x184>
   4812c:	01400204 	movi	r5,8
   48130:	2805883a 	mov	r2,r5
   48134:	003f0306 	br	47d44 <__udivdi3+0x150>
   48138:	01400604 	movi	r5,24
   4813c:	2805883a 	mov	r2,r5
   48140:	003f0006 	br	47d44 <__udivdi3+0x150>
   48144:	01400204 	movi	r5,8
   48148:	2805883a 	mov	r2,r5
   4814c:	003ec206 	br	47c58 <__udivdi3+0x64>
   48150:	01400604 	movi	r5,24
   48154:	2805883a 	mov	r2,r5
   48158:	003ebf06 	br	47c58 <__udivdi3+0x64>
   4815c:	01400204 	movi	r5,8
   48160:	2805883a 	mov	r2,r5
   48164:	003f1706 	br	47dc4 <__udivdi3+0x1d0>
   48168:	01400604 	movi	r5,24
   4816c:	2805883a 	mov	r2,r5
   48170:	003f1406 	br	47dc4 <__udivdi3+0x1d0>
   48174:	89ff962e 	bgeu	r17,r7,47fd0 <__udivdi3+0x3dc>
   48178:	8d63883a 	add	r17,r17,r21
   4817c:	843fffc4 	addi	r16,r16,-1
   48180:	003f9306 	br	47fd0 <__udivdi3+0x3dc>
   48184:	147f802e 	bgeu	r2,r17,47f88 <__udivdi3+0x394>
   48188:	a53fffc4 	addi	r20,r20,-1
   4818c:	1545883a 	add	r2,r2,r21
   48190:	003f7d06 	br	47f88 <__udivdi3+0x394>
   48194:	a53fffc4 	addi	r20,r20,-1
   48198:	003ede06 	br	47d14 <__udivdi3+0x120>
   4819c:	b5bfffc4 	addi	r22,r22,-1
   481a0:	1405883a 	add	r2,r2,r16
   481a4:	003f2806 	br	47e48 <__udivdi3+0x254>
   481a8:	a53fffc4 	addi	r20,r20,-1
   481ac:	003f3706 	br	47e8c <__udivdi3+0x298>
   481b0:	147fbb2e 	bgeu	r2,r17,480a0 <__udivdi3+0x4ac>
   481b4:	297fffc4 	addi	r5,r5,-1
   481b8:	1405883a 	add	r2,r2,r16
   481bc:	d9400415 	stw	r5,16(sp)
   481c0:	003fb706 	br	480a0 <__udivdi3+0x4ac>
   481c4:	b5bfffc4 	addi	r22,r22,-1
   481c8:	1405883a 	add	r2,r2,r16
   481cc:	003ec006 	br	47cd0 <__udivdi3+0xdc>

000481d0 <__umoddi3>:
   481d0:	defff104 	addi	sp,sp,-60
   481d4:	dd800b15 	stw	r22,44(sp)
   481d8:	dd000915 	stw	r20,36(sp)
   481dc:	dc000515 	stw	r16,20(sp)
   481e0:	dfc00e15 	stw	ra,56(sp)
   481e4:	df000d15 	stw	fp,52(sp)
   481e8:	ddc00c15 	stw	r23,48(sp)
   481ec:	dd400a15 	stw	r21,40(sp)
   481f0:	dcc00815 	stw	r19,32(sp)
   481f4:	dc800715 	stw	r18,28(sp)
   481f8:	dc400615 	stw	r17,24(sp)
   481fc:	3021883a 	mov	r16,r6
   48200:	202d883a 	mov	r22,r4
   48204:	2829883a 	mov	r20,r5
   48208:	38002b1e 	bne	r7,zero,482b8 <__umoddi3+0xe8>
   4820c:	29805036 	bltu	r5,r6,48350 <__umoddi3+0x180>
   48210:	30008a26 	beq	r6,zero,4843c <__umoddi3+0x26c>
   48214:	00bfffd4 	movui	r2,65535
   48218:	14008236 	bltu	r2,r16,48424 <__umoddi3+0x254>
   4821c:	00803fc4 	movi	r2,255
   48220:	14013636 	bltu	r2,r16,486fc <__umoddi3+0x52c>
   48224:	000b883a 	mov	r5,zero
   48228:	0005883a 	mov	r2,zero
   4822c:	8084d83a 	srl	r2,r16,r2
   48230:	01100034 	movhi	r4,16384
   48234:	21009a04 	addi	r4,r4,616
   48238:	01800804 	movi	r6,32
   4823c:	1105883a 	add	r2,r2,r4
   48240:	10c00003 	ldbu	r3,0(r2)
   48244:	28c7883a 	add	r3,r5,r3
   48248:	30efc83a 	sub	r23,r6,r3
   4824c:	b800941e 	bne	r23,zero,484a0 <__umoddi3+0x2d0>
   48250:	802ad43a 	srli	r21,r16,16
   48254:	a423c83a 	sub	r17,r20,r16
   48258:	0039883a 	mov	fp,zero
   4825c:	853fffcc 	andi	r20,r16,65535
   48260:	8809883a 	mov	r4,r17
   48264:	a80b883a 	mov	r5,r21
   48268:	00499d80 	call	499d8 <__udivsi3>
   4826c:	8809883a 	mov	r4,r17
   48270:	a80b883a 	mov	r5,r21
   48274:	a0a3383a 	mul	r17,r20,r2
   48278:	00499e00 	call	499e0 <__umodsi3>
   4827c:	1004943a 	slli	r2,r2,16
   48280:	b006d43a 	srli	r3,r22,16
   48284:	10c4b03a 	or	r2,r2,r3
   48288:	1440032e 	bgeu	r2,r17,48298 <__umoddi3+0xc8>
   4828c:	1405883a 	add	r2,r2,r16
   48290:	14000136 	bltu	r2,r16,48298 <__umoddi3+0xc8>
   48294:	14413536 	bltu	r2,r17,4876c <__umoddi3+0x59c>
   48298:	1463c83a 	sub	r17,r2,r17
   4829c:	8809883a 	mov	r4,r17
   482a0:	a80b883a 	mov	r5,r21
   482a4:	00499d80 	call	499d8 <__udivsi3>
   482a8:	8809883a 	mov	r4,r17
   482ac:	a0a3383a 	mul	r17,r20,r2
   482b0:	a80b883a 	mov	r5,r21
   482b4:	00004d06 	br	483ec <__umoddi3+0x21c>
   482b8:	380d883a 	mov	r6,r7
   482bc:	29c0102e 	bgeu	r5,r7,48300 <__umoddi3+0x130>
   482c0:	2011883a 	mov	r8,r4
   482c4:	2813883a 	mov	r9,r5
   482c8:	4005883a 	mov	r2,r8
   482cc:	4807883a 	mov	r3,r9
   482d0:	dfc00e17 	ldw	ra,56(sp)
   482d4:	df000d17 	ldw	fp,52(sp)
   482d8:	ddc00c17 	ldw	r23,48(sp)
   482dc:	dd800b17 	ldw	r22,44(sp)
   482e0:	dd400a17 	ldw	r21,40(sp)
   482e4:	dd000917 	ldw	r20,36(sp)
   482e8:	dcc00817 	ldw	r19,32(sp)
   482ec:	dc800717 	ldw	r18,28(sp)
   482f0:	dc400617 	ldw	r17,24(sp)
   482f4:	dc000517 	ldw	r16,20(sp)
   482f8:	dec00f04 	addi	sp,sp,60
   482fc:	f800283a 	ret
   48300:	00bfffd4 	movui	r2,65535
   48304:	11c05a36 	bltu	r2,r7,48470 <__umoddi3+0x2a0>
   48308:	00803fc4 	movi	r2,255
   4830c:	11c0fe36 	bltu	r2,r7,48708 <__umoddi3+0x538>
   48310:	000b883a 	mov	r5,zero
   48314:	0005883a 	mov	r2,zero
   48318:	3084d83a 	srl	r2,r6,r2
   4831c:	01100034 	movhi	r4,16384
   48320:	21009a04 	addi	r4,r4,616
   48324:	01c00804 	movi	r7,32
   48328:	1105883a 	add	r2,r2,r4
   4832c:	10c00003 	ldbu	r3,0(r2)
   48330:	28c7883a 	add	r3,r5,r3
   48334:	38ebc83a 	sub	r21,r7,r3
   48338:	a800851e 	bne	r21,zero,48550 <__umoddi3+0x380>
   4833c:	35005236 	bltu	r6,r20,48488 <__umoddi3+0x2b8>
   48340:	b400512e 	bgeu	r22,r16,48488 <__umoddi3+0x2b8>
   48344:	b011883a 	mov	r8,r22
   48348:	a013883a 	mov	r9,r20
   4834c:	003fde06 	br	482c8 <__umoddi3+0xf8>
   48350:	00bfffd4 	movui	r2,65535
   48354:	11804036 	bltu	r2,r6,48458 <__umoddi3+0x288>
   48358:	00803fc4 	movi	r2,255
   4835c:	1180ed36 	bltu	r2,r6,48714 <__umoddi3+0x544>
   48360:	000b883a 	mov	r5,zero
   48364:	0005883a 	mov	r2,zero
   48368:	8084d83a 	srl	r2,r16,r2
   4836c:	01100034 	movhi	r4,16384
   48370:	21009a04 	addi	r4,r4,616
   48374:	01800804 	movi	r6,32
   48378:	1105883a 	add	r2,r2,r4
   4837c:	10c00003 	ldbu	r3,0(r2)
   48380:	28c7883a 	add	r3,r5,r3
   48384:	30c7c83a 	sub	r3,r6,r3
   48388:	1800bf1e 	bne	r3,zero,48688 <__umoddi3+0x4b8>
   4838c:	0039883a 	mov	fp,zero
   48390:	802ad43a 	srli	r21,r16,16
   48394:	a009883a 	mov	r4,r20
   48398:	85ffffcc 	andi	r23,r16,65535
   4839c:	a80b883a 	mov	r5,r21
   483a0:	00499d80 	call	499d8 <__udivsi3>
   483a4:	a009883a 	mov	r4,r20
   483a8:	a80b883a 	mov	r5,r21
   483ac:	b8a3383a 	mul	r17,r23,r2
   483b0:	00499e00 	call	499e0 <__umodsi3>
   483b4:	1004943a 	slli	r2,r2,16
   483b8:	b006d43a 	srli	r3,r22,16
   483bc:	10c4b03a 	or	r2,r2,r3
   483c0:	1440032e 	bgeu	r2,r17,483d0 <__umoddi3+0x200>
   483c4:	1405883a 	add	r2,r2,r16
   483c8:	14000136 	bltu	r2,r16,483d0 <__umoddi3+0x200>
   483cc:	1440e536 	bltu	r2,r17,48764 <__umoddi3+0x594>
   483d0:	1463c83a 	sub	r17,r2,r17
   483d4:	8809883a 	mov	r4,r17
   483d8:	a80b883a 	mov	r5,r21
   483dc:	00499d80 	call	499d8 <__udivsi3>
   483e0:	8809883a 	mov	r4,r17
   483e4:	b8a3383a 	mul	r17,r23,r2
   483e8:	a80b883a 	mov	r5,r21
   483ec:	00499e00 	call	499e0 <__umodsi3>
   483f0:	1004943a 	slli	r2,r2,16
   483f4:	b0ffffcc 	andi	r3,r22,65535
   483f8:	10c4b03a 	or	r2,r2,r3
   483fc:	1440042e 	bgeu	r2,r17,48410 <__umoddi3+0x240>
   48400:	1405883a 	add	r2,r2,r16
   48404:	14000236 	bltu	r2,r16,48410 <__umoddi3+0x240>
   48408:	1440012e 	bgeu	r2,r17,48410 <__umoddi3+0x240>
   4840c:	1405883a 	add	r2,r2,r16
   48410:	1445c83a 	sub	r2,r2,r17
   48414:	1724d83a 	srl	r18,r2,fp
   48418:	0013883a 	mov	r9,zero
   4841c:	9011883a 	mov	r8,r18
   48420:	003fa906 	br	482c8 <__umoddi3+0xf8>
   48424:	00804034 	movhi	r2,256
   48428:	10bfffc4 	addi	r2,r2,-1
   4842c:	1400b036 	bltu	r2,r16,486f0 <__umoddi3+0x520>
   48430:	01400404 	movi	r5,16
   48434:	2805883a 	mov	r2,r5
   48438:	003f7c06 	br	4822c <__umoddi3+0x5c>
   4843c:	01000044 	movi	r4,1
   48440:	000b883a 	mov	r5,zero
   48444:	00499d80 	call	499d8 <__udivsi3>
   48448:	1021883a 	mov	r16,r2
   4844c:	00bfffd4 	movui	r2,65535
   48450:	143ff436 	bltu	r2,r16,48424 <__umoddi3+0x254>
   48454:	003f7106 	br	4821c <__umoddi3+0x4c>
   48458:	00804034 	movhi	r2,256
   4845c:	10bfffc4 	addi	r2,r2,-1
   48460:	1180af36 	bltu	r2,r6,48720 <__umoddi3+0x550>
   48464:	01400404 	movi	r5,16
   48468:	2805883a 	mov	r2,r5
   4846c:	003fbe06 	br	48368 <__umoddi3+0x198>
   48470:	00804034 	movhi	r2,256
   48474:	10bfffc4 	addi	r2,r2,-1
   48478:	11c0ac36 	bltu	r2,r7,4872c <__umoddi3+0x55c>
   4847c:	01400404 	movi	r5,16
   48480:	2805883a 	mov	r2,r5
   48484:	003fa406 	br	48318 <__umoddi3+0x148>
   48488:	b409c83a 	sub	r4,r22,r16
   4848c:	b105803a 	cmpltu	r2,r22,r4
   48490:	a187c83a 	sub	r3,r20,r6
   48494:	18a9c83a 	sub	r20,r3,r2
   48498:	202d883a 	mov	r22,r4
   4849c:	003fa906 	br	48344 <__umoddi3+0x174>
   484a0:	85e0983a 	sll	r16,r16,r23
   484a4:	35c5c83a 	sub	r2,r6,r23
   484a8:	a0a2d83a 	srl	r17,r20,r2
   484ac:	802ad43a 	srli	r21,r16,16
   484b0:	b084d83a 	srl	r2,r22,r2
   484b4:	a5c6983a 	sll	r3,r20,r23
   484b8:	8809883a 	mov	r4,r17
   484bc:	a80b883a 	mov	r5,r21
   484c0:	1886b03a 	or	r3,r3,r2
   484c4:	d8c00115 	stw	r3,4(sp)
   484c8:	853fffcc 	andi	r20,r16,65535
   484cc:	00499d80 	call	499d8 <__udivsi3>
   484d0:	8809883a 	mov	r4,r17
   484d4:	a80b883a 	mov	r5,r21
   484d8:	a0a3383a 	mul	r17,r20,r2
   484dc:	00499e00 	call	499e0 <__umodsi3>
   484e0:	d9000117 	ldw	r4,4(sp)
   484e4:	1004943a 	slli	r2,r2,16
   484e8:	b839883a 	mov	fp,r23
   484ec:	2006d43a 	srli	r3,r4,16
   484f0:	10c4b03a 	or	r2,r2,r3
   484f4:	1440022e 	bgeu	r2,r17,48500 <__umoddi3+0x330>
   484f8:	1405883a 	add	r2,r2,r16
   484fc:	1400962e 	bgeu	r2,r16,48758 <__umoddi3+0x588>
   48500:	1463c83a 	sub	r17,r2,r17
   48504:	8809883a 	mov	r4,r17
   48508:	a80b883a 	mov	r5,r21
   4850c:	00499d80 	call	499d8 <__udivsi3>
   48510:	8809883a 	mov	r4,r17
   48514:	a80b883a 	mov	r5,r21
   48518:	a0a3383a 	mul	r17,r20,r2
   4851c:	00499e00 	call	499e0 <__umodsi3>
   48520:	d9400117 	ldw	r5,4(sp)
   48524:	1004943a 	slli	r2,r2,16
   48528:	28ffffcc 	andi	r3,r5,65535
   4852c:	10c4b03a 	or	r2,r2,r3
   48530:	1440042e 	bgeu	r2,r17,48544 <__umoddi3+0x374>
   48534:	1405883a 	add	r2,r2,r16
   48538:	14000236 	bltu	r2,r16,48544 <__umoddi3+0x374>
   4853c:	1440012e 	bgeu	r2,r17,48544 <__umoddi3+0x374>
   48540:	1405883a 	add	r2,r2,r16
   48544:	b5ec983a 	sll	r22,r22,r23
   48548:	1463c83a 	sub	r17,r2,r17
   4854c:	003f4406 	br	48260 <__umoddi3+0x90>
   48550:	3d4fc83a 	sub	r7,r7,r21
   48554:	3546983a 	sll	r3,r6,r21
   48558:	81c4d83a 	srl	r2,r16,r7
   4855c:	a1e2d83a 	srl	r17,r20,r7
   48560:	a54c983a 	sll	r6,r20,r21
   48564:	18aeb03a 	or	r23,r3,r2
   48568:	b828d43a 	srli	r20,r23,16
   4856c:	b1c4d83a 	srl	r2,r22,r7
   48570:	8809883a 	mov	r4,r17
   48574:	a00b883a 	mov	r5,r20
   48578:	308cb03a 	or	r6,r6,r2
   4857c:	d9c00315 	stw	r7,12(sp)
   48580:	d9800215 	stw	r6,8(sp)
   48584:	00499d80 	call	499d8 <__udivsi3>
   48588:	8809883a 	mov	r4,r17
   4858c:	a00b883a 	mov	r5,r20
   48590:	1039883a 	mov	fp,r2
   48594:	00499e00 	call	499e0 <__umodsi3>
   48598:	b8ffffcc 	andi	r3,r23,65535
   4859c:	d8c00415 	stw	r3,16(sp)
   485a0:	d9000217 	ldw	r4,8(sp)
   485a4:	d9400417 	ldw	r5,16(sp)
   485a8:	1004943a 	slli	r2,r2,16
   485ac:	2006d43a 	srli	r3,r4,16
   485b0:	8560983a 	sll	r16,r16,r21
   485b4:	2f23383a 	mul	r17,r5,fp
   485b8:	10c4b03a 	or	r2,r2,r3
   485bc:	dc000015 	stw	r16,0(sp)
   485c0:	b56c983a 	sll	r22,r22,r21
   485c4:	1440032e 	bgeu	r2,r17,485d4 <__umoddi3+0x404>
   485c8:	15c5883a 	add	r2,r2,r23
   485cc:	e73fffc4 	addi	fp,fp,-1
   485d0:	15c05d2e 	bgeu	r2,r23,48748 <__umoddi3+0x578>
   485d4:	1463c83a 	sub	r17,r2,r17
   485d8:	8809883a 	mov	r4,r17
   485dc:	a00b883a 	mov	r5,r20
   485e0:	00499d80 	call	499d8 <__udivsi3>
   485e4:	8809883a 	mov	r4,r17
   485e8:	a00b883a 	mov	r5,r20
   485ec:	1021883a 	mov	r16,r2
   485f0:	00499e00 	call	499e0 <__umodsi3>
   485f4:	d8c00417 	ldw	r3,16(sp)
   485f8:	d9000217 	ldw	r4,8(sp)
   485fc:	1004943a 	slli	r2,r2,16
   48600:	1c23383a 	mul	r17,r3,r16
   48604:	20ffffcc 	andi	r3,r4,65535
   48608:	10ceb03a 	or	r7,r2,r3
   4860c:	3c40032e 	bgeu	r7,r17,4861c <__umoddi3+0x44c>
   48610:	3dcf883a 	add	r7,r7,r23
   48614:	843fffc4 	addi	r16,r16,-1
   48618:	3dc0472e 	bgeu	r7,r23,48738 <__umoddi3+0x568>
   4861c:	e004943a 	slli	r2,fp,16
   48620:	d9400017 	ldw	r5,0(sp)
   48624:	3c4fc83a 	sub	r7,r7,r17
   48628:	8084b03a 	or	r2,r16,r2
   4862c:	28ffffcc 	andi	r3,r5,65535
   48630:	280cd43a 	srli	r6,r5,16
   48634:	100ad43a 	srli	r5,r2,16
   48638:	10bfffcc 	andi	r2,r2,65535
   4863c:	10d1383a 	mul	r8,r2,r3
   48640:	28c7383a 	mul	r3,r5,r3
   48644:	1185383a 	mul	r2,r2,r6
   48648:	4008d43a 	srli	r4,r8,16
   4864c:	298b383a 	mul	r5,r5,r6
   48650:	10c5883a 	add	r2,r2,r3
   48654:	2089883a 	add	r4,r4,r2
   48658:	20c0022e 	bgeu	r4,r3,48664 <__umoddi3+0x494>
   4865c:	00800074 	movhi	r2,1
   48660:	288b883a 	add	r5,r5,r2
   48664:	2004d43a 	srli	r2,r4,16
   48668:	2008943a 	slli	r4,r4,16
   4866c:	40ffffcc 	andi	r3,r8,65535
   48670:	288b883a 	add	r5,r5,r2
   48674:	20c9883a 	add	r4,r4,r3
   48678:	39400b36 	bltu	r7,r5,486a8 <__umoddi3+0x4d8>
   4867c:	39403d26 	beq	r7,r5,48774 <__umoddi3+0x5a4>
   48680:	394bc83a 	sub	r5,r7,r5
   48684:	00000f06 	br	486c4 <__umoddi3+0x4f4>
   48688:	30c5c83a 	sub	r2,r6,r3
   4868c:	1839883a 	mov	fp,r3
   48690:	b084d83a 	srl	r2,r22,r2
   48694:	a0c6983a 	sll	r3,r20,r3
   48698:	8720983a 	sll	r16,r16,fp
   4869c:	b72c983a 	sll	r22,r22,fp
   486a0:	18a8b03a 	or	r20,r3,r2
   486a4:	003f3a06 	br	48390 <__umoddi3+0x1c0>
   486a8:	d8c00017 	ldw	r3,0(sp)
   486ac:	20c5c83a 	sub	r2,r4,r3
   486b0:	2089803a 	cmpltu	r4,r4,r2
   486b4:	2dc7c83a 	sub	r3,r5,r23
   486b8:	1907c83a 	sub	r3,r3,r4
   486bc:	38cbc83a 	sub	r5,r7,r3
   486c0:	1009883a 	mov	r4,r2
   486c4:	b105c83a 	sub	r2,r22,r4
   486c8:	b087803a 	cmpltu	r3,r22,r2
   486cc:	28c7c83a 	sub	r3,r5,r3
   486d0:	d9400317 	ldw	r5,12(sp)
   486d4:	1544d83a 	srl	r2,r2,r21
   486d8:	1948983a 	sll	r4,r3,r5
   486dc:	1d46d83a 	srl	r3,r3,r21
   486e0:	20a4b03a 	or	r18,r4,r2
   486e4:	9011883a 	mov	r8,r18
   486e8:	1813883a 	mov	r9,r3
   486ec:	003ef606 	br	482c8 <__umoddi3+0xf8>
   486f0:	01400604 	movi	r5,24
   486f4:	2805883a 	mov	r2,r5
   486f8:	003ecc06 	br	4822c <__umoddi3+0x5c>
   486fc:	01400204 	movi	r5,8
   48700:	2805883a 	mov	r2,r5
   48704:	003ec906 	br	4822c <__umoddi3+0x5c>
   48708:	01400204 	movi	r5,8
   4870c:	2805883a 	mov	r2,r5
   48710:	003f0106 	br	48318 <__umoddi3+0x148>
   48714:	01400204 	movi	r5,8
   48718:	2805883a 	mov	r2,r5
   4871c:	003f1206 	br	48368 <__umoddi3+0x198>
   48720:	01400604 	movi	r5,24
   48724:	2805883a 	mov	r2,r5
   48728:	003f0f06 	br	48368 <__umoddi3+0x198>
   4872c:	01400604 	movi	r5,24
   48730:	2805883a 	mov	r2,r5
   48734:	003ef806 	br	48318 <__umoddi3+0x148>
   48738:	3c7fb82e 	bgeu	r7,r17,4861c <__umoddi3+0x44c>
   4873c:	843fffc4 	addi	r16,r16,-1
   48740:	3dcf883a 	add	r7,r7,r23
   48744:	003fb506 	br	4861c <__umoddi3+0x44c>
   48748:	147fa22e 	bgeu	r2,r17,485d4 <__umoddi3+0x404>
   4874c:	e73fffc4 	addi	fp,fp,-1
   48750:	15c5883a 	add	r2,r2,r23
   48754:	003f9f06 	br	485d4 <__umoddi3+0x404>
   48758:	147f692e 	bgeu	r2,r17,48500 <__umoddi3+0x330>
   4875c:	1405883a 	add	r2,r2,r16
   48760:	003f6706 	br	48500 <__umoddi3+0x330>
   48764:	1405883a 	add	r2,r2,r16
   48768:	003f1906 	br	483d0 <__umoddi3+0x200>
   4876c:	1405883a 	add	r2,r2,r16
   48770:	003ec906 	br	48298 <__umoddi3+0xc8>
   48774:	b13fcc36 	bltu	r22,r4,486a8 <__umoddi3+0x4d8>
   48778:	000b883a 	mov	r5,zero
   4877c:	003fd106 	br	486c4 <__umoddi3+0x4f4>

00048780 <_fpadd_parts>:
   48780:	defff804 	addi	sp,sp,-32
   48784:	dcc00315 	stw	r19,12(sp)
   48788:	2027883a 	mov	r19,r4
   4878c:	21000017 	ldw	r4,0(r4)
   48790:	00c00044 	movi	r3,1
   48794:	dd400515 	stw	r21,20(sp)
   48798:	dd000415 	stw	r20,16(sp)
   4879c:	ddc00715 	stw	r23,28(sp)
   487a0:	dd800615 	stw	r22,24(sp)
   487a4:	dc800215 	stw	r18,8(sp)
   487a8:	dc400115 	stw	r17,4(sp)
   487ac:	dc000015 	stw	r16,0(sp)
   487b0:	282b883a 	mov	r21,r5
   487b4:	3029883a 	mov	r20,r6
   487b8:	1900632e 	bgeu	r3,r4,48948 <_fpadd_parts+0x1c8>
   487bc:	28800017 	ldw	r2,0(r5)
   487c0:	1880812e 	bgeu	r3,r2,489c8 <_fpadd_parts+0x248>
   487c4:	00c00104 	movi	r3,4
   487c8:	20c0dc26 	beq	r4,r3,48b3c <_fpadd_parts+0x3bc>
   487cc:	10c07e26 	beq	r2,r3,489c8 <_fpadd_parts+0x248>
   487d0:	00c00084 	movi	r3,2
   487d4:	10c06726 	beq	r2,r3,48974 <_fpadd_parts+0x1f4>
   487d8:	20c07b26 	beq	r4,r3,489c8 <_fpadd_parts+0x248>
   487dc:	9dc00217 	ldw	r23,8(r19)
   487e0:	28c00217 	ldw	r3,8(r5)
   487e4:	9c400317 	ldw	r17,12(r19)
   487e8:	2bc00317 	ldw	r15,12(r5)
   487ec:	b8cdc83a 	sub	r6,r23,r3
   487f0:	9c800417 	ldw	r18,16(r19)
   487f4:	2c000417 	ldw	r16,16(r5)
   487f8:	3009883a 	mov	r4,r6
   487fc:	30009716 	blt	r6,zero,48a5c <_fpadd_parts+0x2dc>
   48800:	00800fc4 	movi	r2,63
   48804:	11806b16 	blt	r2,r6,489b4 <_fpadd_parts+0x234>
   48808:	0100a40e 	bge	zero,r4,48a9c <_fpadd_parts+0x31c>
   4880c:	35bff804 	addi	r22,r6,-32
   48810:	b000bc16 	blt	r22,zero,48b04 <_fpadd_parts+0x384>
   48814:	8596d83a 	srl	r11,r16,r22
   48818:	0019883a 	mov	r12,zero
   4881c:	0013883a 	mov	r9,zero
   48820:	01000044 	movi	r4,1
   48824:	0015883a 	mov	r10,zero
   48828:	b000be16 	blt	r22,zero,48b24 <_fpadd_parts+0x3a4>
   4882c:	2590983a 	sll	r8,r4,r22
   48830:	000f883a 	mov	r7,zero
   48834:	00bfffc4 	movi	r2,-1
   48838:	3889883a 	add	r4,r7,r2
   4883c:	408b883a 	add	r5,r8,r2
   48840:	21cd803a 	cmpltu	r6,r4,r7
   48844:	314b883a 	add	r5,r6,r5
   48848:	7904703a 	and	r2,r15,r4
   4884c:	8146703a 	and	r3,r16,r5
   48850:	10c4b03a 	or	r2,r2,r3
   48854:	10000226 	beq	r2,zero,48860 <_fpadd_parts+0xe0>
   48858:	02400044 	movi	r9,1
   4885c:	0015883a 	mov	r10,zero
   48860:	5a5eb03a 	or	r15,r11,r9
   48864:	62a0b03a 	or	r16,r12,r10
   48868:	99400117 	ldw	r5,4(r19)
   4886c:	a8800117 	ldw	r2,4(r21)
   48870:	28806e26 	beq	r5,r2,48a2c <_fpadd_parts+0x2ac>
   48874:	28006626 	beq	r5,zero,48a10 <_fpadd_parts+0x290>
   48878:	7c45c83a 	sub	r2,r15,r17
   4887c:	7889803a 	cmpltu	r4,r15,r2
   48880:	8487c83a 	sub	r3,r16,r18
   48884:	1909c83a 	sub	r4,r3,r4
   48888:	100d883a 	mov	r6,r2
   4888c:	200f883a 	mov	r7,r4
   48890:	38007716 	blt	r7,zero,48a70 <_fpadd_parts+0x2f0>
   48894:	a5c00215 	stw	r23,8(r20)
   48898:	a1c00415 	stw	r7,16(r20)
   4889c:	a0000115 	stw	zero,4(r20)
   488a0:	a1800315 	stw	r6,12(r20)
   488a4:	a2000317 	ldw	r8,12(r20)
   488a8:	a2400417 	ldw	r9,16(r20)
   488ac:	00bfffc4 	movi	r2,-1
   488b0:	408b883a 	add	r5,r8,r2
   488b4:	2a09803a 	cmpltu	r4,r5,r8
   488b8:	488d883a 	add	r6,r9,r2
   488bc:	01c40034 	movhi	r7,4096
   488c0:	39ffffc4 	addi	r7,r7,-1
   488c4:	218d883a 	add	r6,r4,r6
   488c8:	39801736 	bltu	r7,r6,48928 <_fpadd_parts+0x1a8>
   488cc:	31c06526 	beq	r6,r7,48a64 <_fpadd_parts+0x2e4>
   488d0:	a3000217 	ldw	r12,8(r20)
   488d4:	4209883a 	add	r4,r8,r8
   488d8:	00bfffc4 	movi	r2,-1
   488dc:	220f803a 	cmpltu	r7,r4,r8
   488e0:	4a4b883a 	add	r5,r9,r9
   488e4:	394f883a 	add	r7,r7,r5
   488e8:	2095883a 	add	r10,r4,r2
   488ec:	3897883a 	add	r11,r7,r2
   488f0:	510d803a 	cmpltu	r6,r10,r4
   488f4:	6099883a 	add	r12,r12,r2
   488f8:	32d7883a 	add	r11,r6,r11
   488fc:	00840034 	movhi	r2,4096
   48900:	10bfffc4 	addi	r2,r2,-1
   48904:	2011883a 	mov	r8,r4
   48908:	3813883a 	mov	r9,r7
   4890c:	a1000315 	stw	r4,12(r20)
   48910:	a1c00415 	stw	r7,16(r20)
   48914:	a3000215 	stw	r12,8(r20)
   48918:	12c00336 	bltu	r2,r11,48928 <_fpadd_parts+0x1a8>
   4891c:	58bfed1e 	bne	r11,r2,488d4 <_fpadd_parts+0x154>
   48920:	00bfff84 	movi	r2,-2
   48924:	12bfeb2e 	bgeu	r2,r10,488d4 <_fpadd_parts+0x154>
   48928:	a2800417 	ldw	r10,16(r20)
   4892c:	008000c4 	movi	r2,3
   48930:	00c80034 	movhi	r3,8192
   48934:	18ffffc4 	addi	r3,r3,-1
   48938:	a2400317 	ldw	r9,12(r20)
   4893c:	a0800015 	stw	r2,0(r20)
   48940:	1a802336 	bltu	r3,r10,489d0 <_fpadd_parts+0x250>
   48944:	a027883a 	mov	r19,r20
   48948:	9805883a 	mov	r2,r19
   4894c:	ddc00717 	ldw	r23,28(sp)
   48950:	dd800617 	ldw	r22,24(sp)
   48954:	dd400517 	ldw	r21,20(sp)
   48958:	dd000417 	ldw	r20,16(sp)
   4895c:	dcc00317 	ldw	r19,12(sp)
   48960:	dc800217 	ldw	r18,8(sp)
   48964:	dc400117 	ldw	r17,4(sp)
   48968:	dc000017 	ldw	r16,0(sp)
   4896c:	dec00804 	addi	sp,sp,32
   48970:	f800283a 	ret
   48974:	20fff41e 	bne	r4,r3,48948 <_fpadd_parts+0x1c8>
   48978:	31000015 	stw	r4,0(r6)
   4897c:	98800117 	ldw	r2,4(r19)
   48980:	30800115 	stw	r2,4(r6)
   48984:	98c00217 	ldw	r3,8(r19)
   48988:	30c00215 	stw	r3,8(r6)
   4898c:	98800317 	ldw	r2,12(r19)
   48990:	30800315 	stw	r2,12(r6)
   48994:	98c00417 	ldw	r3,16(r19)
   48998:	30c00415 	stw	r3,16(r6)
   4899c:	98800117 	ldw	r2,4(r19)
   489a0:	28c00117 	ldw	r3,4(r5)
   489a4:	3027883a 	mov	r19,r6
   489a8:	10c4703a 	and	r2,r2,r3
   489ac:	30800115 	stw	r2,4(r6)
   489b0:	003fe506 	br	48948 <_fpadd_parts+0x1c8>
   489b4:	1dc02616 	blt	r3,r23,48a50 <_fpadd_parts+0x2d0>
   489b8:	0023883a 	mov	r17,zero
   489bc:	182f883a 	mov	r23,r3
   489c0:	0025883a 	mov	r18,zero
   489c4:	003fa806 	br	48868 <_fpadd_parts+0xe8>
   489c8:	a827883a 	mov	r19,r21
   489cc:	003fde06 	br	48948 <_fpadd_parts+0x1c8>
   489d0:	01800044 	movi	r6,1
   489d4:	500497fa 	slli	r2,r10,31
   489d8:	4808d07a 	srli	r4,r9,1
   489dc:	518ad83a 	srl	r5,r10,r6
   489e0:	a2000217 	ldw	r8,8(r20)
   489e4:	1108b03a 	or	r4,r2,r4
   489e8:	0007883a 	mov	r3,zero
   489ec:	4984703a 	and	r2,r9,r6
   489f0:	208cb03a 	or	r6,r4,r2
   489f4:	28ceb03a 	or	r7,r5,r3
   489f8:	42000044 	addi	r8,r8,1
   489fc:	a027883a 	mov	r19,r20
   48a00:	a1c00415 	stw	r7,16(r20)
   48a04:	a2000215 	stw	r8,8(r20)
   48a08:	a1800315 	stw	r6,12(r20)
   48a0c:	003fce06 	br	48948 <_fpadd_parts+0x1c8>
   48a10:	8bc5c83a 	sub	r2,r17,r15
   48a14:	8889803a 	cmpltu	r4,r17,r2
   48a18:	9407c83a 	sub	r3,r18,r16
   48a1c:	1909c83a 	sub	r4,r3,r4
   48a20:	100d883a 	mov	r6,r2
   48a24:	200f883a 	mov	r7,r4
   48a28:	003f9906 	br	48890 <_fpadd_parts+0x110>
   48a2c:	7c45883a 	add	r2,r15,r17
   48a30:	13c9803a 	cmpltu	r4,r2,r15
   48a34:	8487883a 	add	r3,r16,r18
   48a38:	20c9883a 	add	r4,r4,r3
   48a3c:	a1400115 	stw	r5,4(r20)
   48a40:	a5c00215 	stw	r23,8(r20)
   48a44:	a0800315 	stw	r2,12(r20)
   48a48:	a1000415 	stw	r4,16(r20)
   48a4c:	003fb606 	br	48928 <_fpadd_parts+0x1a8>
   48a50:	001f883a 	mov	r15,zero
   48a54:	0021883a 	mov	r16,zero
   48a58:	003f8306 	br	48868 <_fpadd_parts+0xe8>
   48a5c:	018dc83a 	sub	r6,zero,r6
   48a60:	003f6706 	br	48800 <_fpadd_parts+0x80>
   48a64:	00bfff84 	movi	r2,-2
   48a68:	117faf36 	bltu	r2,r5,48928 <_fpadd_parts+0x1a8>
   48a6c:	003f9806 	br	488d0 <_fpadd_parts+0x150>
   48a70:	0005883a 	mov	r2,zero
   48a74:	1189c83a 	sub	r4,r2,r6
   48a78:	1105803a 	cmpltu	r2,r2,r4
   48a7c:	01cbc83a 	sub	r5,zero,r7
   48a80:	2885c83a 	sub	r2,r5,r2
   48a84:	01800044 	movi	r6,1
   48a88:	a1800115 	stw	r6,4(r20)
   48a8c:	a5c00215 	stw	r23,8(r20)
   48a90:	a1000315 	stw	r4,12(r20)
   48a94:	a0800415 	stw	r2,16(r20)
   48a98:	003f8206 	br	488a4 <_fpadd_parts+0x124>
   48a9c:	203f7226 	beq	r4,zero,48868 <_fpadd_parts+0xe8>
   48aa0:	35bff804 	addi	r22,r6,-32
   48aa4:	b9af883a 	add	r23,r23,r6
   48aa8:	b0003116 	blt	r22,zero,48b70 <_fpadd_parts+0x3f0>
   48aac:	959ad83a 	srl	r13,r18,r22
   48ab0:	001d883a 	mov	r14,zero
   48ab4:	000f883a 	mov	r7,zero
   48ab8:	01000044 	movi	r4,1
   48abc:	0011883a 	mov	r8,zero
   48ac0:	b0002516 	blt	r22,zero,48b58 <_fpadd_parts+0x3d8>
   48ac4:	2594983a 	sll	r10,r4,r22
   48ac8:	0013883a 	mov	r9,zero
   48acc:	00bfffc4 	movi	r2,-1
   48ad0:	4889883a 	add	r4,r9,r2
   48ad4:	508b883a 	add	r5,r10,r2
   48ad8:	224d803a 	cmpltu	r6,r4,r9
   48adc:	314b883a 	add	r5,r6,r5
   48ae0:	8904703a 	and	r2,r17,r4
   48ae4:	9146703a 	and	r3,r18,r5
   48ae8:	10c4b03a 	or	r2,r2,r3
   48aec:	10000226 	beq	r2,zero,48af8 <_fpadd_parts+0x378>
   48af0:	01c00044 	movi	r7,1
   48af4:	0011883a 	mov	r8,zero
   48af8:	69e2b03a 	or	r17,r13,r7
   48afc:	7224b03a 	or	r18,r14,r8
   48b00:	003f5906 	br	48868 <_fpadd_parts+0xe8>
   48b04:	8407883a 	add	r3,r16,r16
   48b08:	008007c4 	movi	r2,31
   48b0c:	1185c83a 	sub	r2,r2,r6
   48b10:	1886983a 	sll	r3,r3,r2
   48b14:	7996d83a 	srl	r11,r15,r6
   48b18:	8198d83a 	srl	r12,r16,r6
   48b1c:	1ad6b03a 	or	r11,r3,r11
   48b20:	003f3e06 	br	4881c <_fpadd_parts+0x9c>
   48b24:	2006d07a 	srli	r3,r4,1
   48b28:	008007c4 	movi	r2,31
   48b2c:	1185c83a 	sub	r2,r2,r6
   48b30:	1890d83a 	srl	r8,r3,r2
   48b34:	218e983a 	sll	r7,r4,r6
   48b38:	003f3e06 	br	48834 <_fpadd_parts+0xb4>
   48b3c:	113f821e 	bne	r2,r4,48948 <_fpadd_parts+0x1c8>
   48b40:	28c00117 	ldw	r3,4(r5)
   48b44:	98800117 	ldw	r2,4(r19)
   48b48:	10ff7f26 	beq	r2,r3,48948 <_fpadd_parts+0x1c8>
   48b4c:	04d00034 	movhi	r19,16384
   48b50:	9cc09504 	addi	r19,r19,596
   48b54:	003f7c06 	br	48948 <_fpadd_parts+0x1c8>
   48b58:	2006d07a 	srli	r3,r4,1
   48b5c:	008007c4 	movi	r2,31
   48b60:	1185c83a 	sub	r2,r2,r6
   48b64:	1894d83a 	srl	r10,r3,r2
   48b68:	2192983a 	sll	r9,r4,r6
   48b6c:	003fd706 	br	48acc <_fpadd_parts+0x34c>
   48b70:	9487883a 	add	r3,r18,r18
   48b74:	008007c4 	movi	r2,31
   48b78:	1185c83a 	sub	r2,r2,r6
   48b7c:	1886983a 	sll	r3,r3,r2
   48b80:	899ad83a 	srl	r13,r17,r6
   48b84:	919cd83a 	srl	r14,r18,r6
   48b88:	1b5ab03a 	or	r13,r3,r13
   48b8c:	003fc906 	br	48ab4 <_fpadd_parts+0x334>

00048b90 <__subdf3>:
   48b90:	deffea04 	addi	sp,sp,-88
   48b94:	dcc01415 	stw	r19,80(sp)
   48b98:	dcc00404 	addi	r19,sp,16
   48b9c:	2011883a 	mov	r8,r4
   48ba0:	2813883a 	mov	r9,r5
   48ba4:	dc401315 	stw	r17,76(sp)
   48ba8:	d809883a 	mov	r4,sp
   48bac:	980b883a 	mov	r5,r19
   48bb0:	dc400904 	addi	r17,sp,36
   48bb4:	dfc01515 	stw	ra,84(sp)
   48bb8:	da400115 	stw	r9,4(sp)
   48bbc:	d9c00315 	stw	r7,12(sp)
   48bc0:	da000015 	stw	r8,0(sp)
   48bc4:	d9800215 	stw	r6,8(sp)
   48bc8:	0049d7c0 	call	49d7c <__unpack_d>
   48bcc:	d9000204 	addi	r4,sp,8
   48bd0:	880b883a 	mov	r5,r17
   48bd4:	0049d7c0 	call	49d7c <__unpack_d>
   48bd8:	d8800a17 	ldw	r2,40(sp)
   48bdc:	880b883a 	mov	r5,r17
   48be0:	9809883a 	mov	r4,r19
   48be4:	d9800e04 	addi	r6,sp,56
   48be8:	1080005c 	xori	r2,r2,1
   48bec:	d8800a15 	stw	r2,40(sp)
   48bf0:	00487800 	call	48780 <_fpadd_parts>
   48bf4:	1009883a 	mov	r4,r2
   48bf8:	0049a680 	call	49a68 <__pack_d>
   48bfc:	dfc01517 	ldw	ra,84(sp)
   48c00:	dcc01417 	ldw	r19,80(sp)
   48c04:	dc401317 	ldw	r17,76(sp)
   48c08:	dec01604 	addi	sp,sp,88
   48c0c:	f800283a 	ret

00048c10 <__adddf3>:
   48c10:	deffea04 	addi	sp,sp,-88
   48c14:	dcc01415 	stw	r19,80(sp)
   48c18:	dcc00404 	addi	r19,sp,16
   48c1c:	2011883a 	mov	r8,r4
   48c20:	2813883a 	mov	r9,r5
   48c24:	dc401315 	stw	r17,76(sp)
   48c28:	d809883a 	mov	r4,sp
   48c2c:	980b883a 	mov	r5,r19
   48c30:	dc400904 	addi	r17,sp,36
   48c34:	dfc01515 	stw	ra,84(sp)
   48c38:	da400115 	stw	r9,4(sp)
   48c3c:	d9c00315 	stw	r7,12(sp)
   48c40:	da000015 	stw	r8,0(sp)
   48c44:	d9800215 	stw	r6,8(sp)
   48c48:	0049d7c0 	call	49d7c <__unpack_d>
   48c4c:	d9000204 	addi	r4,sp,8
   48c50:	880b883a 	mov	r5,r17
   48c54:	0049d7c0 	call	49d7c <__unpack_d>
   48c58:	d9800e04 	addi	r6,sp,56
   48c5c:	9809883a 	mov	r4,r19
   48c60:	880b883a 	mov	r5,r17
   48c64:	00487800 	call	48780 <_fpadd_parts>
   48c68:	1009883a 	mov	r4,r2
   48c6c:	0049a680 	call	49a68 <__pack_d>
   48c70:	dfc01517 	ldw	ra,84(sp)
   48c74:	dcc01417 	ldw	r19,80(sp)
   48c78:	dc401317 	ldw	r17,76(sp)
   48c7c:	dec01604 	addi	sp,sp,88
   48c80:	f800283a 	ret

00048c84 <__muldf3>:
   48c84:	deffdd04 	addi	sp,sp,-140
   48c88:	df002115 	stw	fp,132(sp)
   48c8c:	df000404 	addi	fp,sp,16
   48c90:	2011883a 	mov	r8,r4
   48c94:	2813883a 	mov	r9,r5
   48c98:	d809883a 	mov	r4,sp
   48c9c:	e00b883a 	mov	r5,fp
   48ca0:	dfc02215 	stw	ra,136(sp)
   48ca4:	da400115 	stw	r9,4(sp)
   48ca8:	d9c00315 	stw	r7,12(sp)
   48cac:	da000015 	stw	r8,0(sp)
   48cb0:	d9800215 	stw	r6,8(sp)
   48cb4:	ddc02015 	stw	r23,128(sp)
   48cb8:	dd801f15 	stw	r22,124(sp)
   48cbc:	dd401e15 	stw	r21,120(sp)
   48cc0:	dd001d15 	stw	r20,116(sp)
   48cc4:	dcc01c15 	stw	r19,112(sp)
   48cc8:	dc801b15 	stw	r18,108(sp)
   48ccc:	dc401a15 	stw	r17,104(sp)
   48cd0:	dc001915 	stw	r16,100(sp)
   48cd4:	0049d7c0 	call	49d7c <__unpack_d>
   48cd8:	d9000204 	addi	r4,sp,8
   48cdc:	d9400904 	addi	r5,sp,36
   48ce0:	0049d7c0 	call	49d7c <__unpack_d>
   48ce4:	d9000417 	ldw	r4,16(sp)
   48ce8:	00800044 	movi	r2,1
   48cec:	1100102e 	bgeu	r2,r4,48d30 <__muldf3+0xac>
   48cf0:	d8c00917 	ldw	r3,36(sp)
   48cf4:	10c0062e 	bgeu	r2,r3,48d10 <__muldf3+0x8c>
   48cf8:	00800104 	movi	r2,4
   48cfc:	20800a26 	beq	r4,r2,48d28 <__muldf3+0xa4>
   48d00:	1880c826 	beq	r3,r2,49024 <__muldf3+0x3a0>
   48d04:	00800084 	movi	r2,2
   48d08:	20800926 	beq	r4,r2,48d30 <__muldf3+0xac>
   48d0c:	18801a1e 	bne	r3,r2,48d78 <__muldf3+0xf4>
   48d10:	d8c00a17 	ldw	r3,40(sp)
   48d14:	d8800517 	ldw	r2,20(sp)
   48d18:	d9000904 	addi	r4,sp,36
   48d1c:	10c4c03a 	cmpne	r2,r2,r3
   48d20:	d8800a15 	stw	r2,40(sp)
   48d24:	00000706 	br	48d44 <__muldf3+0xc0>
   48d28:	00800084 	movi	r2,2
   48d2c:	1880bf26 	beq	r3,r2,4902c <__muldf3+0x3a8>
   48d30:	d8800517 	ldw	r2,20(sp)
   48d34:	d8c00a17 	ldw	r3,40(sp)
   48d38:	e009883a 	mov	r4,fp
   48d3c:	10c4c03a 	cmpne	r2,r2,r3
   48d40:	d8800515 	stw	r2,20(sp)
   48d44:	0049a680 	call	49a68 <__pack_d>
   48d48:	dfc02217 	ldw	ra,136(sp)
   48d4c:	df002117 	ldw	fp,132(sp)
   48d50:	ddc02017 	ldw	r23,128(sp)
   48d54:	dd801f17 	ldw	r22,124(sp)
   48d58:	dd401e17 	ldw	r21,120(sp)
   48d5c:	dd001d17 	ldw	r20,116(sp)
   48d60:	dcc01c17 	ldw	r19,112(sp)
   48d64:	dc801b17 	ldw	r18,108(sp)
   48d68:	dc401a17 	ldw	r17,104(sp)
   48d6c:	dc001917 	ldw	r16,100(sp)
   48d70:	dec02304 	addi	sp,sp,140
   48d74:	f800283a 	ret
   48d78:	db000c17 	ldw	r12,48(sp)
   48d7c:	db800717 	ldw	r14,28(sp)
   48d80:	dbc00817 	ldw	r15,32(sp)
   48d84:	db400d17 	ldw	r13,52(sp)
   48d88:	6009883a 	mov	r4,r12
   48d8c:	000d883a 	mov	r6,zero
   48d90:	0011883a 	mov	r8,zero
   48d94:	000b883a 	mov	r5,zero
   48d98:	0007883a 	mov	r3,zero
   48d9c:	0019883a 	mov	r12,zero
   48da0:	4393383a 	mul	r9,r8,r14
   48da4:	d9801415 	stw	r6,80(sp)
   48da8:	6111383a 	mul	r8,r12,r4
   48dac:	d9801615 	stw	r6,88(sp)
   48db0:	1b4f383a 	mul	r7,r3,r13
   48db4:	2bcd383a 	mul	r6,r5,r15
   48db8:	7361383a 	mul	r16,r14,r13
   48dbc:	23e5383a 	mul	r18,r4,r15
   48dc0:	7362383a 	mulxuu	r17,r14,r13
   48dc4:	23e6383a 	mulxuu	r19,r4,r15
   48dc8:	3a4f883a 	add	r7,r7,r9
   48dcc:	320d883a 	add	r6,r6,r8
   48dd0:	3c63883a 	add	r17,r7,r17
   48dd4:	34e7883a 	add	r19,r6,r19
   48dd8:	8495883a 	add	r10,r16,r18
   48ddc:	23aa383a 	mulxuu	r21,r4,r14
   48de0:	540f803a 	cmpltu	r7,r10,r16
   48de4:	8cd7883a 	add	r11,r17,r19
   48de8:	3acf883a 	add	r7,r7,r11
   48dec:	4a0d883a 	add	r6,r9,r8
   48df0:	db401315 	stw	r13,76(sp)
   48df4:	dbc01515 	stw	r15,84(sp)
   48df8:	23a9383a 	mul	r20,r4,r14
   48dfc:	da801715 	stw	r10,92(sp)
   48e00:	d9c01815 	stw	r7,96(sp)
   48e04:	356b883a 	add	r21,r6,r21
   48e08:	3c40682e 	bgeu	r7,r17,48fac <__muldf3+0x328>
   48e0c:	000f883a 	mov	r7,zero
   48e10:	02000044 	movi	r8,1
   48e14:	d9401717 	ldw	r5,92(sp)
   48e18:	0009883a 	mov	r4,zero
   48e1c:	a105883a 	add	r2,r20,r4
   48e20:	150d803a 	cmpltu	r6,r2,r20
   48e24:	a947883a 	add	r3,r21,r5
   48e28:	30cd883a 	add	r6,r6,r3
   48e2c:	101f883a 	mov	r15,r2
   48e30:	3021883a 	mov	r16,r6
   48e34:	35406236 	bltu	r6,r21,48fc0 <__muldf3+0x33c>
   48e38:	a9806026 	beq	r21,r6,48fbc <__muldf3+0x338>
   48e3c:	d9801317 	ldw	r6,76(sp)
   48e40:	db001517 	ldw	r12,84(sp)
   48e44:	d8c01417 	ldw	r3,80(sp)
   48e48:	d9401617 	ldw	r5,88(sp)
   48e4c:	6009883a 	mov	r4,r12
   48e50:	1b05383a 	mul	r2,r3,r12
   48e54:	2987383a 	mul	r3,r5,r6
   48e58:	332d383a 	mul	r22,r6,r12
   48e5c:	312e383a 	mulxuu	r23,r6,r4
   48e60:	d9801817 	ldw	r6,96(sp)
   48e64:	10c5883a 	add	r2,r2,r3
   48e68:	15ef883a 	add	r23,r2,r23
   48e6c:	000b883a 	mov	r5,zero
   48e70:	b185883a 	add	r2,r22,r6
   48e74:	158d803a 	cmpltu	r6,r2,r22
   48e78:	b947883a 	add	r3,r23,r5
   48e7c:	30c7883a 	add	r3,r6,r3
   48e80:	40cb883a 	add	r5,r8,r3
   48e84:	d8c00617 	ldw	r3,24(sp)
   48e88:	3889883a 	add	r4,r7,r2
   48e8c:	d8800b17 	ldw	r2,44(sp)
   48e90:	18c00104 	addi	r3,r3,4
   48e94:	21cd803a 	cmpltu	r6,r4,r7
   48e98:	10c7883a 	add	r3,r2,r3
   48e9c:	2013883a 	mov	r9,r4
   48ea0:	d8800a17 	ldw	r2,40(sp)
   48ea4:	d9000517 	ldw	r4,20(sp)
   48ea8:	314d883a 	add	r6,r6,r5
   48eac:	3015883a 	mov	r10,r6
   48eb0:	2088c03a 	cmpne	r4,r4,r2
   48eb4:	00880034 	movhi	r2,8192
   48eb8:	10bfffc4 	addi	r2,r2,-1
   48ebc:	d9000f15 	stw	r4,60(sp)
   48ec0:	d8c01015 	stw	r3,64(sp)
   48ec4:	1180162e 	bgeu	r2,r6,48f20 <__muldf3+0x29c>
   48ec8:	1811883a 	mov	r8,r3
   48ecc:	1023883a 	mov	r17,r2
   48ed0:	800497fa 	slli	r2,r16,31
   48ed4:	7816d07a 	srli	r11,r15,1
   48ed8:	500697fa 	slli	r3,r10,31
   48edc:	480cd07a 	srli	r6,r9,1
   48ee0:	500ed07a 	srli	r7,r10,1
   48ee4:	12d6b03a 	or	r11,r2,r11
   48ee8:	00800044 	movi	r2,1
   48eec:	198cb03a 	or	r6,r3,r6
   48ef0:	4888703a 	and	r4,r9,r2
   48ef4:	8018d07a 	srli	r12,r16,1
   48ef8:	001b883a 	mov	r13,zero
   48efc:	03a00034 	movhi	r14,32768
   48f00:	3013883a 	mov	r9,r6
   48f04:	3815883a 	mov	r10,r7
   48f08:	4091883a 	add	r8,r8,r2
   48f0c:	20000226 	beq	r4,zero,48f18 <__muldf3+0x294>
   48f10:	5b5eb03a 	or	r15,r11,r13
   48f14:	63a0b03a 	or	r16,r12,r14
   48f18:	8abfed36 	bltu	r17,r10,48ed0 <__muldf3+0x24c>
   48f1c:	da001015 	stw	r8,64(sp)
   48f20:	00840034 	movhi	r2,4096
   48f24:	10bfffc4 	addi	r2,r2,-1
   48f28:	12801436 	bltu	r2,r10,48f7c <__muldf3+0x2f8>
   48f2c:	da001017 	ldw	r8,64(sp)
   48f30:	1023883a 	mov	r17,r2
   48f34:	4a45883a 	add	r2,r9,r9
   48f38:	124d803a 	cmpltu	r6,r2,r9
   48f3c:	5287883a 	add	r3,r10,r10
   48f40:	7bd7883a 	add	r11,r15,r15
   48f44:	5bcf803a 	cmpltu	r7,r11,r15
   48f48:	8419883a 	add	r12,r16,r16
   48f4c:	01000044 	movi	r4,1
   48f50:	30cd883a 	add	r6,r6,r3
   48f54:	3b0f883a 	add	r7,r7,r12
   48f58:	423fffc4 	addi	r8,r8,-1
   48f5c:	1013883a 	mov	r9,r2
   48f60:	3015883a 	mov	r10,r6
   48f64:	111ab03a 	or	r13,r2,r4
   48f68:	80002a16 	blt	r16,zero,49014 <__muldf3+0x390>
   48f6c:	581f883a 	mov	r15,r11
   48f70:	3821883a 	mov	r16,r7
   48f74:	8abfef2e 	bgeu	r17,r10,48f34 <__muldf3+0x2b0>
   48f78:	da001015 	stw	r8,64(sp)
   48f7c:	00803fc4 	movi	r2,255
   48f80:	488e703a 	and	r7,r9,r2
   48f84:	00802004 	movi	r2,128
   48f88:	0007883a 	mov	r3,zero
   48f8c:	0011883a 	mov	r8,zero
   48f90:	38801226 	beq	r7,r2,48fdc <__muldf3+0x358>
   48f94:	008000c4 	movi	r2,3
   48f98:	d9000e04 	addi	r4,sp,56
   48f9c:	da801215 	stw	r10,72(sp)
   48fa0:	d8800e15 	stw	r2,56(sp)
   48fa4:	da401115 	stw	r9,68(sp)
   48fa8:	003f6606 	br	48d44 <__muldf3+0xc0>
   48fac:	89c01b26 	beq	r17,r7,4901c <__muldf3+0x398>
   48fb0:	000f883a 	mov	r7,zero
   48fb4:	0011883a 	mov	r8,zero
   48fb8:	003f9606 	br	48e14 <__muldf3+0x190>
   48fbc:	153f9f2e 	bgeu	r2,r20,48e3c <__muldf3+0x1b8>
   48fc0:	00800044 	movi	r2,1
   48fc4:	3889883a 	add	r4,r7,r2
   48fc8:	21cd803a 	cmpltu	r6,r4,r7
   48fcc:	320d883a 	add	r6,r6,r8
   48fd0:	200f883a 	mov	r7,r4
   48fd4:	3011883a 	mov	r8,r6
   48fd8:	003f9806 	br	48e3c <__muldf3+0x1b8>
   48fdc:	403fed1e 	bne	r8,zero,48f94 <__muldf3+0x310>
   48fe0:	01004004 	movi	r4,256
   48fe4:	4904703a 	and	r2,r9,r4
   48fe8:	10c4b03a 	or	r2,r2,r3
   48fec:	103fe91e 	bne	r2,zero,48f94 <__muldf3+0x310>
   48ff0:	7c04b03a 	or	r2,r15,r16
   48ff4:	103fe726 	beq	r2,zero,48f94 <__muldf3+0x310>
   48ff8:	49c5883a 	add	r2,r9,r7
   48ffc:	1251803a 	cmpltu	r8,r2,r9
   49000:	4291883a 	add	r8,r8,r10
   49004:	013fc004 	movi	r4,-256
   49008:	1112703a 	and	r9,r2,r4
   4900c:	4015883a 	mov	r10,r8
   49010:	003fe006 	br	48f94 <__muldf3+0x310>
   49014:	6813883a 	mov	r9,r13
   49018:	003fd406 	br	48f6c <__muldf3+0x2e8>
   4901c:	543f7b36 	bltu	r10,r16,48e0c <__muldf3+0x188>
   49020:	003fe306 	br	48fb0 <__muldf3+0x32c>
   49024:	00800084 	movi	r2,2
   49028:	20bf391e 	bne	r4,r2,48d10 <__muldf3+0x8c>
   4902c:	01100034 	movhi	r4,16384
   49030:	21009504 	addi	r4,r4,596
   49034:	003f4306 	br	48d44 <__muldf3+0xc0>

00049038 <__divdf3>:
   49038:	deffed04 	addi	sp,sp,-76
   4903c:	dcc01115 	stw	r19,68(sp)
   49040:	dcc00404 	addi	r19,sp,16
   49044:	2011883a 	mov	r8,r4
   49048:	2813883a 	mov	r9,r5
   4904c:	dc000e15 	stw	r16,56(sp)
   49050:	d809883a 	mov	r4,sp
   49054:	980b883a 	mov	r5,r19
   49058:	dc000904 	addi	r16,sp,36
   4905c:	dfc01215 	stw	ra,72(sp)
   49060:	da400115 	stw	r9,4(sp)
   49064:	d9c00315 	stw	r7,12(sp)
   49068:	da000015 	stw	r8,0(sp)
   4906c:	d9800215 	stw	r6,8(sp)
   49070:	dc801015 	stw	r18,64(sp)
   49074:	dc400f15 	stw	r17,60(sp)
   49078:	0049d7c0 	call	49d7c <__unpack_d>
   4907c:	d9000204 	addi	r4,sp,8
   49080:	800b883a 	mov	r5,r16
   49084:	0049d7c0 	call	49d7c <__unpack_d>
   49088:	d9000417 	ldw	r4,16(sp)
   4908c:	00800044 	movi	r2,1
   49090:	11000b2e 	bgeu	r2,r4,490c0 <__divdf3+0x88>
   49094:	d9400917 	ldw	r5,36(sp)
   49098:	1140762e 	bgeu	r2,r5,49274 <__divdf3+0x23c>
   4909c:	d8800517 	ldw	r2,20(sp)
   490a0:	d8c00a17 	ldw	r3,40(sp)
   490a4:	01800104 	movi	r6,4
   490a8:	10c4f03a 	xor	r2,r2,r3
   490ac:	d8800515 	stw	r2,20(sp)
   490b0:	21800226 	beq	r4,r6,490bc <__divdf3+0x84>
   490b4:	00800084 	movi	r2,2
   490b8:	2080141e 	bne	r4,r2,4910c <__divdf3+0xd4>
   490bc:	29000926 	beq	r5,r4,490e4 <__divdf3+0xac>
   490c0:	9809883a 	mov	r4,r19
   490c4:	0049a680 	call	49a68 <__pack_d>
   490c8:	dfc01217 	ldw	ra,72(sp)
   490cc:	dcc01117 	ldw	r19,68(sp)
   490d0:	dc801017 	ldw	r18,64(sp)
   490d4:	dc400f17 	ldw	r17,60(sp)
   490d8:	dc000e17 	ldw	r16,56(sp)
   490dc:	dec01304 	addi	sp,sp,76
   490e0:	f800283a 	ret
   490e4:	01100034 	movhi	r4,16384
   490e8:	21009504 	addi	r4,r4,596
   490ec:	0049a680 	call	49a68 <__pack_d>
   490f0:	dfc01217 	ldw	ra,72(sp)
   490f4:	dcc01117 	ldw	r19,68(sp)
   490f8:	dc801017 	ldw	r18,64(sp)
   490fc:	dc400f17 	ldw	r17,60(sp)
   49100:	dc000e17 	ldw	r16,56(sp)
   49104:	dec01304 	addi	sp,sp,76
   49108:	f800283a 	ret
   4910c:	29805b26 	beq	r5,r6,4927c <__divdf3+0x244>
   49110:	28802d26 	beq	r5,r2,491c8 <__divdf3+0x190>
   49114:	d8c00617 	ldw	r3,24(sp)
   49118:	d8800b17 	ldw	r2,44(sp)
   4911c:	d9c00817 	ldw	r7,32(sp)
   49120:	dc400d17 	ldw	r17,52(sp)
   49124:	188bc83a 	sub	r5,r3,r2
   49128:	d9800717 	ldw	r6,28(sp)
   4912c:	dc000c17 	ldw	r16,48(sp)
   49130:	d9400615 	stw	r5,24(sp)
   49134:	3c403836 	bltu	r7,r17,49218 <__divdf3+0x1e0>
   49138:	89c03626 	beq	r17,r7,49214 <__divdf3+0x1dc>
   4913c:	0015883a 	mov	r10,zero
   49140:	001d883a 	mov	r14,zero
   49144:	02c40034 	movhi	r11,4096
   49148:	001f883a 	mov	r15,zero
   4914c:	003f883a 	mov	ra,zero
   49150:	04800f44 	movi	r18,61
   49154:	00000f06 	br	49194 <__divdf3+0x15c>
   49158:	601d883a 	mov	r14,r12
   4915c:	681f883a 	mov	r15,r13
   49160:	400d883a 	mov	r6,r8
   49164:	100f883a 	mov	r7,r2
   49168:	3191883a 	add	r8,r6,r6
   4916c:	5808d07a 	srli	r4,r11,1
   49170:	4185803a 	cmpltu	r2,r8,r6
   49174:	39d3883a 	add	r9,r7,r7
   49178:	28c6b03a 	or	r3,r5,r3
   4917c:	1245883a 	add	r2,r2,r9
   49180:	1815883a 	mov	r10,r3
   49184:	2017883a 	mov	r11,r4
   49188:	400d883a 	mov	r6,r8
   4918c:	100f883a 	mov	r7,r2
   49190:	fc801726 	beq	ra,r18,491f0 <__divdf3+0x1b8>
   49194:	580a97fa 	slli	r5,r11,31
   49198:	5006d07a 	srli	r3,r10,1
   4919c:	ffc00044 	addi	ra,ra,1
   491a0:	3c7ff136 	bltu	r7,r17,49168 <__divdf3+0x130>
   491a4:	3411c83a 	sub	r8,r6,r16
   491a8:	3205803a 	cmpltu	r2,r6,r8
   491ac:	3c53c83a 	sub	r9,r7,r17
   491b0:	7298b03a 	or	r12,r14,r10
   491b4:	7adab03a 	or	r13,r15,r11
   491b8:	4885c83a 	sub	r2,r9,r2
   491bc:	89ffe61e 	bne	r17,r7,49158 <__divdf3+0x120>
   491c0:	343fe936 	bltu	r6,r16,49168 <__divdf3+0x130>
   491c4:	003fe406 	br	49158 <__divdf3+0x120>
   491c8:	9809883a 	mov	r4,r19
   491cc:	d9800415 	stw	r6,16(sp)
   491d0:	0049a680 	call	49a68 <__pack_d>
   491d4:	dfc01217 	ldw	ra,72(sp)
   491d8:	dcc01117 	ldw	r19,68(sp)
   491dc:	dc801017 	ldw	r18,64(sp)
   491e0:	dc400f17 	ldw	r17,60(sp)
   491e4:	dc000e17 	ldw	r16,56(sp)
   491e8:	dec01304 	addi	sp,sp,76
   491ec:	f800283a 	ret
   491f0:	00803fc4 	movi	r2,255
   491f4:	7090703a 	and	r8,r14,r2
   491f8:	00802004 	movi	r2,128
   491fc:	0007883a 	mov	r3,zero
   49200:	0013883a 	mov	r9,zero
   49204:	40800d26 	beq	r8,r2,4923c <__divdf3+0x204>
   49208:	dbc00815 	stw	r15,32(sp)
   4920c:	db800715 	stw	r14,28(sp)
   49210:	003fab06 	br	490c0 <__divdf3+0x88>
   49214:	343fc92e 	bgeu	r6,r16,4913c <__divdf3+0x104>
   49218:	3185883a 	add	r2,r6,r6
   4921c:	1189803a 	cmpltu	r4,r2,r6
   49220:	39c7883a 	add	r3,r7,r7
   49224:	20c9883a 	add	r4,r4,r3
   49228:	297fffc4 	addi	r5,r5,-1
   4922c:	100d883a 	mov	r6,r2
   49230:	200f883a 	mov	r7,r4
   49234:	d9400615 	stw	r5,24(sp)
   49238:	003fc006 	br	4913c <__divdf3+0x104>
   4923c:	483ff21e 	bne	r9,zero,49208 <__divdf3+0x1d0>
   49240:	01004004 	movi	r4,256
   49244:	7104703a 	and	r2,r14,r4
   49248:	10c4b03a 	or	r2,r2,r3
   4924c:	103fee1e 	bne	r2,zero,49208 <__divdf3+0x1d0>
   49250:	31c4b03a 	or	r2,r6,r7
   49254:	103fec26 	beq	r2,zero,49208 <__divdf3+0x1d0>
   49258:	7205883a 	add	r2,r14,r8
   4925c:	1391803a 	cmpltu	r8,r2,r14
   49260:	43d1883a 	add	r8,r8,r15
   49264:	013fc004 	movi	r4,-256
   49268:	111c703a 	and	r14,r2,r4
   4926c:	401f883a 	mov	r15,r8
   49270:	003fe506 	br	49208 <__divdf3+0x1d0>
   49274:	8009883a 	mov	r4,r16
   49278:	003f9206 	br	490c4 <__divdf3+0x8c>
   4927c:	9809883a 	mov	r4,r19
   49280:	d8000715 	stw	zero,28(sp)
   49284:	d8000815 	stw	zero,32(sp)
   49288:	d8000615 	stw	zero,24(sp)
   4928c:	003f8d06 	br	490c4 <__divdf3+0x8c>

00049290 <__eqdf2>:
   49290:	deffef04 	addi	sp,sp,-68
   49294:	dc400f15 	stw	r17,60(sp)
   49298:	dc400404 	addi	r17,sp,16
   4929c:	2005883a 	mov	r2,r4
   492a0:	2807883a 	mov	r3,r5
   492a4:	dc000e15 	stw	r16,56(sp)
   492a8:	d809883a 	mov	r4,sp
   492ac:	880b883a 	mov	r5,r17
   492b0:	dc000904 	addi	r16,sp,36
   492b4:	d8c00115 	stw	r3,4(sp)
   492b8:	d8800015 	stw	r2,0(sp)
   492bc:	d9800215 	stw	r6,8(sp)
   492c0:	dfc01015 	stw	ra,64(sp)
   492c4:	d9c00315 	stw	r7,12(sp)
   492c8:	0049d7c0 	call	49d7c <__unpack_d>
   492cc:	d9000204 	addi	r4,sp,8
   492d0:	800b883a 	mov	r5,r16
   492d4:	0049d7c0 	call	49d7c <__unpack_d>
   492d8:	d8800417 	ldw	r2,16(sp)
   492dc:	00c00044 	movi	r3,1
   492e0:	180d883a 	mov	r6,r3
   492e4:	1880062e 	bgeu	r3,r2,49300 <__eqdf2+0x70>
   492e8:	d8800917 	ldw	r2,36(sp)
   492ec:	8809883a 	mov	r4,r17
   492f0:	800b883a 	mov	r5,r16
   492f4:	1880022e 	bgeu	r3,r2,49300 <__eqdf2+0x70>
   492f8:	0049eb40 	call	49eb4 <__fpcmp_parts_d>
   492fc:	100d883a 	mov	r6,r2
   49300:	3005883a 	mov	r2,r6
   49304:	dfc01017 	ldw	ra,64(sp)
   49308:	dc400f17 	ldw	r17,60(sp)
   4930c:	dc000e17 	ldw	r16,56(sp)
   49310:	dec01104 	addi	sp,sp,68
   49314:	f800283a 	ret

00049318 <__nedf2>:
   49318:	deffef04 	addi	sp,sp,-68
   4931c:	dc400f15 	stw	r17,60(sp)
   49320:	dc400404 	addi	r17,sp,16
   49324:	2005883a 	mov	r2,r4
   49328:	2807883a 	mov	r3,r5
   4932c:	dc000e15 	stw	r16,56(sp)
   49330:	d809883a 	mov	r4,sp
   49334:	880b883a 	mov	r5,r17
   49338:	dc000904 	addi	r16,sp,36
   4933c:	d8c00115 	stw	r3,4(sp)
   49340:	d8800015 	stw	r2,0(sp)
   49344:	d9800215 	stw	r6,8(sp)
   49348:	dfc01015 	stw	ra,64(sp)
   4934c:	d9c00315 	stw	r7,12(sp)
   49350:	0049d7c0 	call	49d7c <__unpack_d>
   49354:	d9000204 	addi	r4,sp,8
   49358:	800b883a 	mov	r5,r16
   4935c:	0049d7c0 	call	49d7c <__unpack_d>
   49360:	d8800417 	ldw	r2,16(sp)
   49364:	00c00044 	movi	r3,1
   49368:	180d883a 	mov	r6,r3
   4936c:	1880062e 	bgeu	r3,r2,49388 <__nedf2+0x70>
   49370:	d8800917 	ldw	r2,36(sp)
   49374:	8809883a 	mov	r4,r17
   49378:	800b883a 	mov	r5,r16
   4937c:	1880022e 	bgeu	r3,r2,49388 <__nedf2+0x70>
   49380:	0049eb40 	call	49eb4 <__fpcmp_parts_d>
   49384:	100d883a 	mov	r6,r2
   49388:	3005883a 	mov	r2,r6
   4938c:	dfc01017 	ldw	ra,64(sp)
   49390:	dc400f17 	ldw	r17,60(sp)
   49394:	dc000e17 	ldw	r16,56(sp)
   49398:	dec01104 	addi	sp,sp,68
   4939c:	f800283a 	ret

000493a0 <__gtdf2>:
   493a0:	deffef04 	addi	sp,sp,-68
   493a4:	dc400f15 	stw	r17,60(sp)
   493a8:	dc400404 	addi	r17,sp,16
   493ac:	2005883a 	mov	r2,r4
   493b0:	2807883a 	mov	r3,r5
   493b4:	dc000e15 	stw	r16,56(sp)
   493b8:	d809883a 	mov	r4,sp
   493bc:	880b883a 	mov	r5,r17
   493c0:	dc000904 	addi	r16,sp,36
   493c4:	d8c00115 	stw	r3,4(sp)
   493c8:	d8800015 	stw	r2,0(sp)
   493cc:	d9800215 	stw	r6,8(sp)
   493d0:	dfc01015 	stw	ra,64(sp)
   493d4:	d9c00315 	stw	r7,12(sp)
   493d8:	0049d7c0 	call	49d7c <__unpack_d>
   493dc:	d9000204 	addi	r4,sp,8
   493e0:	800b883a 	mov	r5,r16
   493e4:	0049d7c0 	call	49d7c <__unpack_d>
   493e8:	d8800417 	ldw	r2,16(sp)
   493ec:	00c00044 	movi	r3,1
   493f0:	01bfffc4 	movi	r6,-1
   493f4:	1880062e 	bgeu	r3,r2,49410 <__gtdf2+0x70>
   493f8:	d8800917 	ldw	r2,36(sp)
   493fc:	8809883a 	mov	r4,r17
   49400:	800b883a 	mov	r5,r16
   49404:	1880022e 	bgeu	r3,r2,49410 <__gtdf2+0x70>
   49408:	0049eb40 	call	49eb4 <__fpcmp_parts_d>
   4940c:	100d883a 	mov	r6,r2
   49410:	3005883a 	mov	r2,r6
   49414:	dfc01017 	ldw	ra,64(sp)
   49418:	dc400f17 	ldw	r17,60(sp)
   4941c:	dc000e17 	ldw	r16,56(sp)
   49420:	dec01104 	addi	sp,sp,68
   49424:	f800283a 	ret

00049428 <__gedf2>:
   49428:	deffef04 	addi	sp,sp,-68
   4942c:	dc400f15 	stw	r17,60(sp)
   49430:	dc400404 	addi	r17,sp,16
   49434:	2005883a 	mov	r2,r4
   49438:	2807883a 	mov	r3,r5
   4943c:	dc000e15 	stw	r16,56(sp)
   49440:	d809883a 	mov	r4,sp
   49444:	880b883a 	mov	r5,r17
   49448:	dc000904 	addi	r16,sp,36
   4944c:	d8c00115 	stw	r3,4(sp)
   49450:	d8800015 	stw	r2,0(sp)
   49454:	d9800215 	stw	r6,8(sp)
   49458:	dfc01015 	stw	ra,64(sp)
   4945c:	d9c00315 	stw	r7,12(sp)
   49460:	0049d7c0 	call	49d7c <__unpack_d>
   49464:	d9000204 	addi	r4,sp,8
   49468:	800b883a 	mov	r5,r16
   4946c:	0049d7c0 	call	49d7c <__unpack_d>
   49470:	d8800417 	ldw	r2,16(sp)
   49474:	00c00044 	movi	r3,1
   49478:	01bfffc4 	movi	r6,-1
   4947c:	1880062e 	bgeu	r3,r2,49498 <__gedf2+0x70>
   49480:	d8800917 	ldw	r2,36(sp)
   49484:	8809883a 	mov	r4,r17
   49488:	800b883a 	mov	r5,r16
   4948c:	1880022e 	bgeu	r3,r2,49498 <__gedf2+0x70>
   49490:	0049eb40 	call	49eb4 <__fpcmp_parts_d>
   49494:	100d883a 	mov	r6,r2
   49498:	3005883a 	mov	r2,r6
   4949c:	dfc01017 	ldw	ra,64(sp)
   494a0:	dc400f17 	ldw	r17,60(sp)
   494a4:	dc000e17 	ldw	r16,56(sp)
   494a8:	dec01104 	addi	sp,sp,68
   494ac:	f800283a 	ret

000494b0 <__ltdf2>:
   494b0:	deffef04 	addi	sp,sp,-68
   494b4:	dc400f15 	stw	r17,60(sp)
   494b8:	dc400404 	addi	r17,sp,16
   494bc:	2005883a 	mov	r2,r4
   494c0:	2807883a 	mov	r3,r5
   494c4:	dc000e15 	stw	r16,56(sp)
   494c8:	d809883a 	mov	r4,sp
   494cc:	880b883a 	mov	r5,r17
   494d0:	dc000904 	addi	r16,sp,36
   494d4:	d8c00115 	stw	r3,4(sp)
   494d8:	d8800015 	stw	r2,0(sp)
   494dc:	d9800215 	stw	r6,8(sp)
   494e0:	dfc01015 	stw	ra,64(sp)
   494e4:	d9c00315 	stw	r7,12(sp)
   494e8:	0049d7c0 	call	49d7c <__unpack_d>
   494ec:	d9000204 	addi	r4,sp,8
   494f0:	800b883a 	mov	r5,r16
   494f4:	0049d7c0 	call	49d7c <__unpack_d>
   494f8:	d8800417 	ldw	r2,16(sp)
   494fc:	00c00044 	movi	r3,1
   49500:	180d883a 	mov	r6,r3
   49504:	1880062e 	bgeu	r3,r2,49520 <__ltdf2+0x70>
   49508:	d8800917 	ldw	r2,36(sp)
   4950c:	8809883a 	mov	r4,r17
   49510:	800b883a 	mov	r5,r16
   49514:	1880022e 	bgeu	r3,r2,49520 <__ltdf2+0x70>
   49518:	0049eb40 	call	49eb4 <__fpcmp_parts_d>
   4951c:	100d883a 	mov	r6,r2
   49520:	3005883a 	mov	r2,r6
   49524:	dfc01017 	ldw	ra,64(sp)
   49528:	dc400f17 	ldw	r17,60(sp)
   4952c:	dc000e17 	ldw	r16,56(sp)
   49530:	dec01104 	addi	sp,sp,68
   49534:	f800283a 	ret

00049538 <__floatsidf>:
   49538:	2006d7fa 	srli	r3,r4,31
   4953c:	defff604 	addi	sp,sp,-40
   49540:	008000c4 	movi	r2,3
   49544:	dfc00915 	stw	ra,36(sp)
   49548:	dcc00815 	stw	r19,32(sp)
   4954c:	dc800715 	stw	r18,28(sp)
   49550:	dc400615 	stw	r17,24(sp)
   49554:	dc000515 	stw	r16,20(sp)
   49558:	d8800015 	stw	r2,0(sp)
   4955c:	d8c00115 	stw	r3,4(sp)
   49560:	20000f1e 	bne	r4,zero,495a0 <__floatsidf+0x68>
   49564:	00800084 	movi	r2,2
   49568:	d8800015 	stw	r2,0(sp)
   4956c:	d809883a 	mov	r4,sp
   49570:	0049a680 	call	49a68 <__pack_d>
   49574:	1009883a 	mov	r4,r2
   49578:	180b883a 	mov	r5,r3
   4957c:	2005883a 	mov	r2,r4
   49580:	2807883a 	mov	r3,r5
   49584:	dfc00917 	ldw	ra,36(sp)
   49588:	dcc00817 	ldw	r19,32(sp)
   4958c:	dc800717 	ldw	r18,28(sp)
   49590:	dc400617 	ldw	r17,24(sp)
   49594:	dc000517 	ldw	r16,20(sp)
   49598:	dec00a04 	addi	sp,sp,40
   4959c:	f800283a 	ret
   495a0:	00800f04 	movi	r2,60
   495a4:	1807003a 	cmpeq	r3,r3,zero
   495a8:	d8800215 	stw	r2,8(sp)
   495ac:	18001126 	beq	r3,zero,495f4 <__floatsidf+0xbc>
   495b0:	0027883a 	mov	r19,zero
   495b4:	2025883a 	mov	r18,r4
   495b8:	d9000315 	stw	r4,12(sp)
   495bc:	dcc00415 	stw	r19,16(sp)
   495c0:	00499e80 	call	499e8 <__clzsi2>
   495c4:	11000744 	addi	r4,r2,29
   495c8:	013fe80e 	bge	zero,r4,4956c <__floatsidf+0x34>
   495cc:	10bfff44 	addi	r2,r2,-3
   495d0:	10000c16 	blt	r2,zero,49604 <__floatsidf+0xcc>
   495d4:	90a2983a 	sll	r17,r18,r2
   495d8:	0021883a 	mov	r16,zero
   495dc:	d8800217 	ldw	r2,8(sp)
   495e0:	dc400415 	stw	r17,16(sp)
   495e4:	dc000315 	stw	r16,12(sp)
   495e8:	1105c83a 	sub	r2,r2,r4
   495ec:	d8800215 	stw	r2,8(sp)
   495f0:	003fde06 	br	4956c <__floatsidf+0x34>
   495f4:	00a00034 	movhi	r2,32768
   495f8:	20800a26 	beq	r4,r2,49624 <__floatsidf+0xec>
   495fc:	0109c83a 	sub	r4,zero,r4
   49600:	003feb06 	br	495b0 <__floatsidf+0x78>
   49604:	9006d07a 	srli	r3,r18,1
   49608:	008007c4 	movi	r2,31
   4960c:	1105c83a 	sub	r2,r2,r4
   49610:	1886d83a 	srl	r3,r3,r2
   49614:	9922983a 	sll	r17,r19,r4
   49618:	9120983a 	sll	r16,r18,r4
   4961c:	1c62b03a 	or	r17,r3,r17
   49620:	003fee06 	br	495dc <__floatsidf+0xa4>
   49624:	0009883a 	mov	r4,zero
   49628:	01707834 	movhi	r5,49632
   4962c:	003fd306 	br	4957c <__floatsidf+0x44>

00049630 <__fixdfsi>:
   49630:	defff804 	addi	sp,sp,-32
   49634:	2005883a 	mov	r2,r4
   49638:	2807883a 	mov	r3,r5
   4963c:	d809883a 	mov	r4,sp
   49640:	d9400204 	addi	r5,sp,8
   49644:	d8c00115 	stw	r3,4(sp)
   49648:	d8800015 	stw	r2,0(sp)
   4964c:	dfc00715 	stw	ra,28(sp)
   49650:	0049d7c0 	call	49d7c <__unpack_d>
   49654:	d8c00217 	ldw	r3,8(sp)
   49658:	00800084 	movi	r2,2
   4965c:	1880051e 	bne	r3,r2,49674 <__fixdfsi+0x44>
   49660:	0007883a 	mov	r3,zero
   49664:	1805883a 	mov	r2,r3
   49668:	dfc00717 	ldw	ra,28(sp)
   4966c:	dec00804 	addi	sp,sp,32
   49670:	f800283a 	ret
   49674:	00800044 	movi	r2,1
   49678:	10fff92e 	bgeu	r2,r3,49660 <__fixdfsi+0x30>
   4967c:	00800104 	movi	r2,4
   49680:	18800426 	beq	r3,r2,49694 <__fixdfsi+0x64>
   49684:	d8c00417 	ldw	r3,16(sp)
   49688:	183ff516 	blt	r3,zero,49660 <__fixdfsi+0x30>
   4968c:	00800784 	movi	r2,30
   49690:	10c0080e 	bge	r2,r3,496b4 <__fixdfsi+0x84>
   49694:	d8800317 	ldw	r2,12(sp)
   49698:	1000121e 	bne	r2,zero,496e4 <__fixdfsi+0xb4>
   4969c:	00e00034 	movhi	r3,32768
   496a0:	18ffffc4 	addi	r3,r3,-1
   496a4:	1805883a 	mov	r2,r3
   496a8:	dfc00717 	ldw	ra,28(sp)
   496ac:	dec00804 	addi	sp,sp,32
   496b0:	f800283a 	ret
   496b4:	00800f04 	movi	r2,60
   496b8:	10d1c83a 	sub	r8,r2,r3
   496bc:	40bff804 	addi	r2,r8,-32
   496c0:	d9800517 	ldw	r6,20(sp)
   496c4:	d9c00617 	ldw	r7,24(sp)
   496c8:	10000816 	blt	r2,zero,496ec <__fixdfsi+0xbc>
   496cc:	3888d83a 	srl	r4,r7,r2
   496d0:	d8800317 	ldw	r2,12(sp)
   496d4:	2007883a 	mov	r3,r4
   496d8:	103fe226 	beq	r2,zero,49664 <__fixdfsi+0x34>
   496dc:	0107c83a 	sub	r3,zero,r4
   496e0:	003fe006 	br	49664 <__fixdfsi+0x34>
   496e4:	00e00034 	movhi	r3,32768
   496e8:	003fde06 	br	49664 <__fixdfsi+0x34>
   496ec:	39c7883a 	add	r3,r7,r7
   496f0:	008007c4 	movi	r2,31
   496f4:	1205c83a 	sub	r2,r2,r8
   496f8:	1886983a 	sll	r3,r3,r2
   496fc:	3208d83a 	srl	r4,r6,r8
   49700:	1908b03a 	or	r4,r3,r4
   49704:	003ff206 	br	496d0 <__fixdfsi+0xa0>

00049708 <__floatunsidf>:
   49708:	defff204 	addi	sp,sp,-56
   4970c:	dfc00d15 	stw	ra,52(sp)
   49710:	ddc00c15 	stw	r23,48(sp)
   49714:	dd800b15 	stw	r22,44(sp)
   49718:	dd400a15 	stw	r21,40(sp)
   4971c:	dd000915 	stw	r20,36(sp)
   49720:	dcc00815 	stw	r19,32(sp)
   49724:	dc800715 	stw	r18,28(sp)
   49728:	dc400615 	stw	r17,24(sp)
   4972c:	dc000515 	stw	r16,20(sp)
   49730:	d8000115 	stw	zero,4(sp)
   49734:	20000f1e 	bne	r4,zero,49774 <__floatunsidf+0x6c>
   49738:	00800084 	movi	r2,2
   4973c:	d8800015 	stw	r2,0(sp)
   49740:	d809883a 	mov	r4,sp
   49744:	0049a680 	call	49a68 <__pack_d>
   49748:	dfc00d17 	ldw	ra,52(sp)
   4974c:	ddc00c17 	ldw	r23,48(sp)
   49750:	dd800b17 	ldw	r22,44(sp)
   49754:	dd400a17 	ldw	r21,40(sp)
   49758:	dd000917 	ldw	r20,36(sp)
   4975c:	dcc00817 	ldw	r19,32(sp)
   49760:	dc800717 	ldw	r18,28(sp)
   49764:	dc400617 	ldw	r17,24(sp)
   49768:	dc000517 	ldw	r16,20(sp)
   4976c:	dec00e04 	addi	sp,sp,56
   49770:	f800283a 	ret
   49774:	008000c4 	movi	r2,3
   49778:	00c00f04 	movi	r3,60
   4977c:	002f883a 	mov	r23,zero
   49780:	202d883a 	mov	r22,r4
   49784:	d8800015 	stw	r2,0(sp)
   49788:	d8c00215 	stw	r3,8(sp)
   4978c:	d9000315 	stw	r4,12(sp)
   49790:	ddc00415 	stw	r23,16(sp)
   49794:	00499e80 	call	499e8 <__clzsi2>
   49798:	12400744 	addi	r9,r2,29
   4979c:	48000b16 	blt	r9,zero,497cc <__floatunsidf+0xc4>
   497a0:	483fe726 	beq	r9,zero,49740 <__floatunsidf+0x38>
   497a4:	10bfff44 	addi	r2,r2,-3
   497a8:	10002e16 	blt	r2,zero,49864 <__floatunsidf+0x15c>
   497ac:	b0a2983a 	sll	r17,r22,r2
   497b0:	0021883a 	mov	r16,zero
   497b4:	d8800217 	ldw	r2,8(sp)
   497b8:	dc400415 	stw	r17,16(sp)
   497bc:	dc000315 	stw	r16,12(sp)
   497c0:	1245c83a 	sub	r2,r2,r9
   497c4:	d8800215 	stw	r2,8(sp)
   497c8:	003fdd06 	br	49740 <__floatunsidf+0x38>
   497cc:	0255c83a 	sub	r10,zero,r9
   497d0:	51bff804 	addi	r6,r10,-32
   497d4:	30001b16 	blt	r6,zero,49844 <__floatunsidf+0x13c>
   497d8:	b9a8d83a 	srl	r20,r23,r6
   497dc:	002b883a 	mov	r21,zero
   497e0:	000f883a 	mov	r7,zero
   497e4:	01000044 	movi	r4,1
   497e8:	0011883a 	mov	r8,zero
   497ec:	30002516 	blt	r6,zero,49884 <__floatunsidf+0x17c>
   497f0:	21a6983a 	sll	r19,r4,r6
   497f4:	0025883a 	mov	r18,zero
   497f8:	00bfffc4 	movi	r2,-1
   497fc:	9089883a 	add	r4,r18,r2
   49800:	988b883a 	add	r5,r19,r2
   49804:	248d803a 	cmpltu	r6,r4,r18
   49808:	314b883a 	add	r5,r6,r5
   4980c:	b104703a 	and	r2,r22,r4
   49810:	b946703a 	and	r3,r23,r5
   49814:	10c4b03a 	or	r2,r2,r3
   49818:	10000226 	beq	r2,zero,49824 <__floatunsidf+0x11c>
   4981c:	01c00044 	movi	r7,1
   49820:	0011883a 	mov	r8,zero
   49824:	d9000217 	ldw	r4,8(sp)
   49828:	a1c4b03a 	or	r2,r20,r7
   4982c:	aa06b03a 	or	r3,r21,r8
   49830:	2249c83a 	sub	r4,r4,r9
   49834:	d8c00415 	stw	r3,16(sp)
   49838:	d9000215 	stw	r4,8(sp)
   4983c:	d8800315 	stw	r2,12(sp)
   49840:	003fbf06 	br	49740 <__floatunsidf+0x38>
   49844:	bdc7883a 	add	r3,r23,r23
   49848:	008007c4 	movi	r2,31
   4984c:	1285c83a 	sub	r2,r2,r10
   49850:	1886983a 	sll	r3,r3,r2
   49854:	b2a8d83a 	srl	r20,r22,r10
   49858:	baaad83a 	srl	r21,r23,r10
   4985c:	1d28b03a 	or	r20,r3,r20
   49860:	003fdf06 	br	497e0 <__floatunsidf+0xd8>
   49864:	b006d07a 	srli	r3,r22,1
   49868:	008007c4 	movi	r2,31
   4986c:	1245c83a 	sub	r2,r2,r9
   49870:	1886d83a 	srl	r3,r3,r2
   49874:	ba62983a 	sll	r17,r23,r9
   49878:	b260983a 	sll	r16,r22,r9
   4987c:	1c62b03a 	or	r17,r3,r17
   49880:	003fcc06 	br	497b4 <__floatunsidf+0xac>
   49884:	2006d07a 	srli	r3,r4,1
   49888:	008007c4 	movi	r2,31
   4988c:	1285c83a 	sub	r2,r2,r10
   49890:	18a6d83a 	srl	r19,r3,r2
   49894:	22a4983a 	sll	r18,r4,r10
   49898:	003fd706 	br	497f8 <__floatunsidf+0xf0>

0004989c <udivmodsi4>:
   4989c:	29001b2e 	bgeu	r5,r4,4990c <udivmodsi4+0x70>
   498a0:	28001a16 	blt	r5,zero,4990c <udivmodsi4+0x70>
   498a4:	00800044 	movi	r2,1
   498a8:	0007883a 	mov	r3,zero
   498ac:	01c007c4 	movi	r7,31
   498b0:	00000306 	br	498c0 <udivmodsi4+0x24>
   498b4:	19c01326 	beq	r3,r7,49904 <udivmodsi4+0x68>
   498b8:	18c00044 	addi	r3,r3,1
   498bc:	28000416 	blt	r5,zero,498d0 <udivmodsi4+0x34>
   498c0:	294b883a 	add	r5,r5,r5
   498c4:	1085883a 	add	r2,r2,r2
   498c8:	293ffa36 	bltu	r5,r4,498b4 <udivmodsi4+0x18>
   498cc:	10000d26 	beq	r2,zero,49904 <udivmodsi4+0x68>
   498d0:	0007883a 	mov	r3,zero
   498d4:	21400236 	bltu	r4,r5,498e0 <udivmodsi4+0x44>
   498d8:	2149c83a 	sub	r4,r4,r5
   498dc:	1886b03a 	or	r3,r3,r2
   498e0:	1004d07a 	srli	r2,r2,1
   498e4:	280ad07a 	srli	r5,r5,1
   498e8:	103ffa1e 	bne	r2,zero,498d4 <udivmodsi4+0x38>
   498ec:	30000226 	beq	r6,zero,498f8 <udivmodsi4+0x5c>
   498f0:	2005883a 	mov	r2,r4
   498f4:	f800283a 	ret
   498f8:	1809883a 	mov	r4,r3
   498fc:	2005883a 	mov	r2,r4
   49900:	f800283a 	ret
   49904:	0007883a 	mov	r3,zero
   49908:	003ff806 	br	498ec <udivmodsi4+0x50>
   4990c:	00800044 	movi	r2,1
   49910:	0007883a 	mov	r3,zero
   49914:	003fef06 	br	498d4 <udivmodsi4+0x38>

00049918 <__divsi3>:
   49918:	defffe04 	addi	sp,sp,-8
   4991c:	dc000015 	stw	r16,0(sp)
   49920:	dfc00115 	stw	ra,4(sp)
   49924:	0021883a 	mov	r16,zero
   49928:	20000c16 	blt	r4,zero,4995c <__divsi3+0x44>
   4992c:	000d883a 	mov	r6,zero
   49930:	28000e16 	blt	r5,zero,4996c <__divsi3+0x54>
   49934:	004989c0 	call	4989c <udivmodsi4>
   49938:	1007883a 	mov	r3,r2
   4993c:	8005003a 	cmpeq	r2,r16,zero
   49940:	1000011e 	bne	r2,zero,49948 <__divsi3+0x30>
   49944:	00c7c83a 	sub	r3,zero,r3
   49948:	1805883a 	mov	r2,r3
   4994c:	dfc00117 	ldw	ra,4(sp)
   49950:	dc000017 	ldw	r16,0(sp)
   49954:	dec00204 	addi	sp,sp,8
   49958:	f800283a 	ret
   4995c:	0109c83a 	sub	r4,zero,r4
   49960:	04000044 	movi	r16,1
   49964:	000d883a 	mov	r6,zero
   49968:	283ff20e 	bge	r5,zero,49934 <__divsi3+0x1c>
   4996c:	014bc83a 	sub	r5,zero,r5
   49970:	8021003a 	cmpeq	r16,r16,zero
   49974:	003fef06 	br	49934 <__divsi3+0x1c>

00049978 <__modsi3>:
   49978:	deffff04 	addi	sp,sp,-4
   4997c:	dfc00015 	stw	ra,0(sp)
   49980:	01800044 	movi	r6,1
   49984:	2807883a 	mov	r3,r5
   49988:	20000416 	blt	r4,zero,4999c <__modsi3+0x24>
   4998c:	28000c16 	blt	r5,zero,499c0 <__modsi3+0x48>
   49990:	dfc00017 	ldw	ra,0(sp)
   49994:	dec00104 	addi	sp,sp,4
   49998:	004989c1 	jmpi	4989c <udivmodsi4>
   4999c:	0109c83a 	sub	r4,zero,r4
   499a0:	28000b16 	blt	r5,zero,499d0 <__modsi3+0x58>
   499a4:	180b883a 	mov	r5,r3
   499a8:	01800044 	movi	r6,1
   499ac:	004989c0 	call	4989c <udivmodsi4>
   499b0:	0085c83a 	sub	r2,zero,r2
   499b4:	dfc00017 	ldw	ra,0(sp)
   499b8:	dec00104 	addi	sp,sp,4
   499bc:	f800283a 	ret
   499c0:	014bc83a 	sub	r5,zero,r5
   499c4:	dfc00017 	ldw	ra,0(sp)
   499c8:	dec00104 	addi	sp,sp,4
   499cc:	004989c1 	jmpi	4989c <udivmodsi4>
   499d0:	0147c83a 	sub	r3,zero,r5
   499d4:	003ff306 	br	499a4 <__modsi3+0x2c>

000499d8 <__udivsi3>:
   499d8:	000d883a 	mov	r6,zero
   499dc:	004989c1 	jmpi	4989c <udivmodsi4>

000499e0 <__umodsi3>:
   499e0:	01800044 	movi	r6,1
   499e4:	004989c1 	jmpi	4989c <udivmodsi4>

000499e8 <__clzsi2>:
   499e8:	00bfffd4 	movui	r2,65535
   499ec:	11000e36 	bltu	r2,r4,49a28 <__clzsi2+0x40>
   499f0:	00803fc4 	movi	r2,255
   499f4:	01400204 	movi	r5,8
   499f8:	0007883a 	mov	r3,zero
   499fc:	11001036 	bltu	r2,r4,49a40 <__clzsi2+0x58>
   49a00:	000b883a 	mov	r5,zero
   49a04:	20c6d83a 	srl	r3,r4,r3
   49a08:	00900034 	movhi	r2,16384
   49a0c:	10809a04 	addi	r2,r2,616
   49a10:	1887883a 	add	r3,r3,r2
   49a14:	18800003 	ldbu	r2,0(r3)
   49a18:	00c00804 	movi	r3,32
   49a1c:	2885883a 	add	r2,r5,r2
   49a20:	1885c83a 	sub	r2,r3,r2
   49a24:	f800283a 	ret
   49a28:	01400404 	movi	r5,16
   49a2c:	00804034 	movhi	r2,256
   49a30:	10bfffc4 	addi	r2,r2,-1
   49a34:	2807883a 	mov	r3,r5
   49a38:	113ff22e 	bgeu	r2,r4,49a04 <__clzsi2+0x1c>
   49a3c:	01400604 	movi	r5,24
   49a40:	2807883a 	mov	r3,r5
   49a44:	20c6d83a 	srl	r3,r4,r3
   49a48:	00900034 	movhi	r2,16384
   49a4c:	10809a04 	addi	r2,r2,616
   49a50:	1887883a 	add	r3,r3,r2
   49a54:	18800003 	ldbu	r2,0(r3)
   49a58:	00c00804 	movi	r3,32
   49a5c:	2885883a 	add	r2,r5,r2
   49a60:	1885c83a 	sub	r2,r3,r2
   49a64:	f800283a 	ret

00049a68 <__pack_d>:
   49a68:	20c00017 	ldw	r3,0(r4)
   49a6c:	defffd04 	addi	sp,sp,-12
   49a70:	dc000015 	stw	r16,0(sp)
   49a74:	dc800215 	stw	r18,8(sp)
   49a78:	dc400115 	stw	r17,4(sp)
   49a7c:	00800044 	movi	r2,1
   49a80:	22000317 	ldw	r8,12(r4)
   49a84:	001f883a 	mov	r15,zero
   49a88:	22400417 	ldw	r9,16(r4)
   49a8c:	24000117 	ldw	r16,4(r4)
   49a90:	10c0552e 	bgeu	r2,r3,49be8 <__pack_d+0x180>
   49a94:	00800104 	movi	r2,4
   49a98:	18804f26 	beq	r3,r2,49bd8 <__pack_d+0x170>
   49a9c:	00800084 	movi	r2,2
   49aa0:	18800226 	beq	r3,r2,49aac <__pack_d+0x44>
   49aa4:	4244b03a 	or	r2,r8,r9
   49aa8:	10001a1e 	bne	r2,zero,49b14 <__pack_d+0xac>
   49aac:	000d883a 	mov	r6,zero
   49ab0:	000f883a 	mov	r7,zero
   49ab4:	0011883a 	mov	r8,zero
   49ab8:	00800434 	movhi	r2,16
   49abc:	10bfffc4 	addi	r2,r2,-1
   49ac0:	301d883a 	mov	r14,r6
   49ac4:	3884703a 	and	r2,r7,r2
   49ac8:	400a953a 	slli	r5,r8,20
   49acc:	79bffc2c 	andhi	r6,r15,65520
   49ad0:	308cb03a 	or	r6,r6,r2
   49ad4:	00e00434 	movhi	r3,32784
   49ad8:	18ffffc4 	addi	r3,r3,-1
   49adc:	800497fa 	slli	r2,r16,31
   49ae0:	30c6703a 	and	r3,r6,r3
   49ae4:	1946b03a 	or	r3,r3,r5
   49ae8:	01600034 	movhi	r5,32768
   49aec:	297fffc4 	addi	r5,r5,-1
   49af0:	194a703a 	and	r5,r3,r5
   49af4:	288ab03a 	or	r5,r5,r2
   49af8:	2807883a 	mov	r3,r5
   49afc:	7005883a 	mov	r2,r14
   49b00:	dc800217 	ldw	r18,8(sp)
   49b04:	dc400117 	ldw	r17,4(sp)
   49b08:	dc000017 	ldw	r16,0(sp)
   49b0c:	dec00304 	addi	sp,sp,12
   49b10:	f800283a 	ret
   49b14:	21000217 	ldw	r4,8(r4)
   49b18:	00bf0084 	movi	r2,-1022
   49b1c:	20803f16 	blt	r4,r2,49c1c <__pack_d+0x1b4>
   49b20:	0080ffc4 	movi	r2,1023
   49b24:	11002c16 	blt	r2,r4,49bd8 <__pack_d+0x170>
   49b28:	00803fc4 	movi	r2,255
   49b2c:	408c703a 	and	r6,r8,r2
   49b30:	00802004 	movi	r2,128
   49b34:	0007883a 	mov	r3,zero
   49b38:	000f883a 	mov	r7,zero
   49b3c:	2280ffc4 	addi	r10,r4,1023
   49b40:	30801e26 	beq	r6,r2,49bbc <__pack_d+0x154>
   49b44:	00801fc4 	movi	r2,127
   49b48:	4089883a 	add	r4,r8,r2
   49b4c:	220d803a 	cmpltu	r6,r4,r8
   49b50:	324d883a 	add	r6,r6,r9
   49b54:	2011883a 	mov	r8,r4
   49b58:	3013883a 	mov	r9,r6
   49b5c:	00880034 	movhi	r2,8192
   49b60:	10bfffc4 	addi	r2,r2,-1
   49b64:	12400d36 	bltu	r2,r9,49b9c <__pack_d+0x134>
   49b68:	4804963a 	slli	r2,r9,24
   49b6c:	400cd23a 	srli	r6,r8,8
   49b70:	480ed23a 	srli	r7,r9,8
   49b74:	013fffc4 	movi	r4,-1
   49b78:	118cb03a 	or	r6,r2,r6
   49b7c:	01400434 	movhi	r5,16
   49b80:	297fffc4 	addi	r5,r5,-1
   49b84:	3104703a 	and	r2,r6,r4
   49b88:	3946703a 	and	r3,r7,r5
   49b8c:	5201ffcc 	andi	r8,r10,2047
   49b90:	100d883a 	mov	r6,r2
   49b94:	180f883a 	mov	r7,r3
   49b98:	003fc706 	br	49ab8 <__pack_d+0x50>
   49b9c:	480897fa 	slli	r4,r9,31
   49ba0:	4004d07a 	srli	r2,r8,1
   49ba4:	4806d07a 	srli	r3,r9,1
   49ba8:	52800044 	addi	r10,r10,1
   49bac:	2084b03a 	or	r2,r4,r2
   49bb0:	1011883a 	mov	r8,r2
   49bb4:	1813883a 	mov	r9,r3
   49bb8:	003feb06 	br	49b68 <__pack_d+0x100>
   49bbc:	383fe11e 	bne	r7,zero,49b44 <__pack_d+0xdc>
   49bc0:	01004004 	movi	r4,256
   49bc4:	4104703a 	and	r2,r8,r4
   49bc8:	10c4b03a 	or	r2,r2,r3
   49bcc:	103fe326 	beq	r2,zero,49b5c <__pack_d+0xf4>
   49bd0:	3005883a 	mov	r2,r6
   49bd4:	003fdc06 	br	49b48 <__pack_d+0xe0>
   49bd8:	000d883a 	mov	r6,zero
   49bdc:	000f883a 	mov	r7,zero
   49be0:	0201ffc4 	movi	r8,2047
   49be4:	003fb406 	br	49ab8 <__pack_d+0x50>
   49be8:	0005883a 	mov	r2,zero
   49bec:	00c00234 	movhi	r3,8
   49bf0:	408cb03a 	or	r6,r8,r2
   49bf4:	48ceb03a 	or	r7,r9,r3
   49bf8:	013fffc4 	movi	r4,-1
   49bfc:	01400434 	movhi	r5,16
   49c00:	297fffc4 	addi	r5,r5,-1
   49c04:	3104703a 	and	r2,r6,r4
   49c08:	3946703a 	and	r3,r7,r5
   49c0c:	100d883a 	mov	r6,r2
   49c10:	180f883a 	mov	r7,r3
   49c14:	0201ffc4 	movi	r8,2047
   49c18:	003fa706 	br	49ab8 <__pack_d+0x50>
   49c1c:	1109c83a 	sub	r4,r2,r4
   49c20:	00800e04 	movi	r2,56
   49c24:	11004316 	blt	r2,r4,49d34 <__pack_d+0x2cc>
   49c28:	21fff804 	addi	r7,r4,-32
   49c2c:	38004516 	blt	r7,zero,49d44 <__pack_d+0x2dc>
   49c30:	49d8d83a 	srl	r12,r9,r7
   49c34:	001b883a 	mov	r13,zero
   49c38:	0023883a 	mov	r17,zero
   49c3c:	01400044 	movi	r5,1
   49c40:	0025883a 	mov	r18,zero
   49c44:	38004716 	blt	r7,zero,49d64 <__pack_d+0x2fc>
   49c48:	29d6983a 	sll	r11,r5,r7
   49c4c:	0015883a 	mov	r10,zero
   49c50:	00bfffc4 	movi	r2,-1
   49c54:	5089883a 	add	r4,r10,r2
   49c58:	588b883a 	add	r5,r11,r2
   49c5c:	228d803a 	cmpltu	r6,r4,r10
   49c60:	314b883a 	add	r5,r6,r5
   49c64:	4104703a 	and	r2,r8,r4
   49c68:	4946703a 	and	r3,r9,r5
   49c6c:	10c4b03a 	or	r2,r2,r3
   49c70:	10000226 	beq	r2,zero,49c7c <__pack_d+0x214>
   49c74:	04400044 	movi	r17,1
   49c78:	0025883a 	mov	r18,zero
   49c7c:	00803fc4 	movi	r2,255
   49c80:	644eb03a 	or	r7,r12,r17
   49c84:	3892703a 	and	r9,r7,r2
   49c88:	00802004 	movi	r2,128
   49c8c:	6c90b03a 	or	r8,r13,r18
   49c90:	0015883a 	mov	r10,zero
   49c94:	48801626 	beq	r9,r2,49cf0 <__pack_d+0x288>
   49c98:	01001fc4 	movi	r4,127
   49c9c:	3905883a 	add	r2,r7,r4
   49ca0:	11cd803a 	cmpltu	r6,r2,r7
   49ca4:	320d883a 	add	r6,r6,r8
   49ca8:	100f883a 	mov	r7,r2
   49cac:	00840034 	movhi	r2,4096
   49cb0:	10bfffc4 	addi	r2,r2,-1
   49cb4:	3011883a 	mov	r8,r6
   49cb8:	0007883a 	mov	r3,zero
   49cbc:	11801b36 	bltu	r2,r6,49d2c <__pack_d+0x2c4>
   49cc0:	4004963a 	slli	r2,r8,24
   49cc4:	3808d23a 	srli	r4,r7,8
   49cc8:	400ad23a 	srli	r5,r8,8
   49ccc:	1813883a 	mov	r9,r3
   49cd0:	1108b03a 	or	r4,r2,r4
   49cd4:	00bfffc4 	movi	r2,-1
   49cd8:	00c00434 	movhi	r3,16
   49cdc:	18ffffc4 	addi	r3,r3,-1
   49ce0:	208c703a 	and	r6,r4,r2
   49ce4:	28ce703a 	and	r7,r5,r3
   49ce8:	4a01ffcc 	andi	r8,r9,2047
   49cec:	003f7206 	br	49ab8 <__pack_d+0x50>
   49cf0:	503fe91e 	bne	r10,zero,49c98 <__pack_d+0x230>
   49cf4:	01004004 	movi	r4,256
   49cf8:	3904703a 	and	r2,r7,r4
   49cfc:	0007883a 	mov	r3,zero
   49d00:	10c4b03a 	or	r2,r2,r3
   49d04:	10000626 	beq	r2,zero,49d20 <__pack_d+0x2b8>
   49d08:	3a45883a 	add	r2,r7,r9
   49d0c:	11cd803a 	cmpltu	r6,r2,r7
   49d10:	320d883a 	add	r6,r6,r8
   49d14:	100f883a 	mov	r7,r2
   49d18:	3011883a 	mov	r8,r6
   49d1c:	0007883a 	mov	r3,zero
   49d20:	00840034 	movhi	r2,4096
   49d24:	10bfffc4 	addi	r2,r2,-1
   49d28:	123fe52e 	bgeu	r2,r8,49cc0 <__pack_d+0x258>
   49d2c:	00c00044 	movi	r3,1
   49d30:	003fe306 	br	49cc0 <__pack_d+0x258>
   49d34:	0009883a 	mov	r4,zero
   49d38:	0013883a 	mov	r9,zero
   49d3c:	000b883a 	mov	r5,zero
   49d40:	003fe406 	br	49cd4 <__pack_d+0x26c>
   49d44:	4a47883a 	add	r3,r9,r9
   49d48:	008007c4 	movi	r2,31
   49d4c:	1105c83a 	sub	r2,r2,r4
   49d50:	1886983a 	sll	r3,r3,r2
   49d54:	4118d83a 	srl	r12,r8,r4
   49d58:	491ad83a 	srl	r13,r9,r4
   49d5c:	1b18b03a 	or	r12,r3,r12
   49d60:	003fb506 	br	49c38 <__pack_d+0x1d0>
   49d64:	2806d07a 	srli	r3,r5,1
   49d68:	008007c4 	movi	r2,31
   49d6c:	1105c83a 	sub	r2,r2,r4
   49d70:	1896d83a 	srl	r11,r3,r2
   49d74:	2914983a 	sll	r10,r5,r4
   49d78:	003fb506 	br	49c50 <__pack_d+0x1e8>

00049d7c <__unpack_d>:
   49d7c:	20c00117 	ldw	r3,4(r4)
   49d80:	22400017 	ldw	r9,0(r4)
   49d84:	00800434 	movhi	r2,16
   49d88:	10bfffc4 	addi	r2,r2,-1
   49d8c:	1808d53a 	srli	r4,r3,20
   49d90:	180cd7fa 	srli	r6,r3,31
   49d94:	1894703a 	and	r10,r3,r2
   49d98:	2201ffcc 	andi	r8,r4,2047
   49d9c:	281b883a 	mov	r13,r5
   49da0:	4817883a 	mov	r11,r9
   49da4:	29800115 	stw	r6,4(r5)
   49da8:	5019883a 	mov	r12,r10
   49dac:	40001e1e 	bne	r8,zero,49e28 <__unpack_d+0xac>
   49db0:	4a84b03a 	or	r2,r9,r10
   49db4:	10001926 	beq	r2,zero,49e1c <__unpack_d+0xa0>
   49db8:	4804d63a 	srli	r2,r9,24
   49dbc:	500c923a 	slli	r6,r10,8
   49dc0:	013f0084 	movi	r4,-1022
   49dc4:	00c40034 	movhi	r3,4096
   49dc8:	18ffffc4 	addi	r3,r3,-1
   49dcc:	118cb03a 	or	r6,r2,r6
   49dd0:	008000c4 	movi	r2,3
   49dd4:	480a923a 	slli	r5,r9,8
   49dd8:	68800015 	stw	r2,0(r13)
   49ddc:	69000215 	stw	r4,8(r13)
   49de0:	19800b36 	bltu	r3,r6,49e10 <__unpack_d+0x94>
   49de4:	200f883a 	mov	r7,r4
   49de8:	1811883a 	mov	r8,r3
   49dec:	2945883a 	add	r2,r5,r5
   49df0:	1149803a 	cmpltu	r4,r2,r5
   49df4:	3187883a 	add	r3,r6,r6
   49df8:	20c9883a 	add	r4,r4,r3
   49dfc:	100b883a 	mov	r5,r2
   49e00:	200d883a 	mov	r6,r4
   49e04:	39ffffc4 	addi	r7,r7,-1
   49e08:	413ff82e 	bgeu	r8,r4,49dec <__unpack_d+0x70>
   49e0c:	69c00215 	stw	r7,8(r13)
   49e10:	69800415 	stw	r6,16(r13)
   49e14:	69400315 	stw	r5,12(r13)
   49e18:	f800283a 	ret
   49e1c:	00800084 	movi	r2,2
   49e20:	28800015 	stw	r2,0(r5)
   49e24:	f800283a 	ret
   49e28:	0081ffc4 	movi	r2,2047
   49e2c:	40800f26 	beq	r8,r2,49e6c <__unpack_d+0xf0>
   49e30:	480cd63a 	srli	r6,r9,24
   49e34:	5006923a 	slli	r3,r10,8
   49e38:	4804923a 	slli	r2,r9,8
   49e3c:	0009883a 	mov	r4,zero
   49e40:	30c6b03a 	or	r3,r6,r3
   49e44:	01440034 	movhi	r5,4096
   49e48:	110cb03a 	or	r6,r2,r4
   49e4c:	423f0044 	addi	r8,r8,-1023
   49e50:	194eb03a 	or	r7,r3,r5
   49e54:	008000c4 	movi	r2,3
   49e58:	69c00415 	stw	r7,16(r13)
   49e5c:	6a000215 	stw	r8,8(r13)
   49e60:	68800015 	stw	r2,0(r13)
   49e64:	69800315 	stw	r6,12(r13)
   49e68:	f800283a 	ret
   49e6c:	4a84b03a 	or	r2,r9,r10
   49e70:	1000031e 	bne	r2,zero,49e80 <__unpack_d+0x104>
   49e74:	00800104 	movi	r2,4
   49e78:	28800015 	stw	r2,0(r5)
   49e7c:	f800283a 	ret
   49e80:	0009883a 	mov	r4,zero
   49e84:	01400234 	movhi	r5,8
   49e88:	4904703a 	and	r2,r9,r4
   49e8c:	5146703a 	and	r3,r10,r5
   49e90:	10c4b03a 	or	r2,r2,r3
   49e94:	10000526 	beq	r2,zero,49eac <__unpack_d+0x130>
   49e98:	00800044 	movi	r2,1
   49e9c:	68800015 	stw	r2,0(r13)
   49ea0:	6b000415 	stw	r12,16(r13)
   49ea4:	6ac00315 	stw	r11,12(r13)
   49ea8:	f800283a 	ret
   49eac:	68000015 	stw	zero,0(r13)
   49eb0:	003ffb06 	br	49ea0 <__unpack_d+0x124>

00049eb4 <__fpcmp_parts_d>:
   49eb4:	21800017 	ldw	r6,0(r4)
   49eb8:	00c00044 	movi	r3,1
   49ebc:	19800a2e 	bgeu	r3,r6,49ee8 <__fpcmp_parts_d+0x34>
   49ec0:	28800017 	ldw	r2,0(r5)
   49ec4:	1880082e 	bgeu	r3,r2,49ee8 <__fpcmp_parts_d+0x34>
   49ec8:	00c00104 	movi	r3,4
   49ecc:	30c02626 	beq	r6,r3,49f68 <__fpcmp_parts_d+0xb4>
   49ed0:	10c02226 	beq	r2,r3,49f5c <__fpcmp_parts_d+0xa8>
   49ed4:	00c00084 	movi	r3,2
   49ed8:	30c00526 	beq	r6,r3,49ef0 <__fpcmp_parts_d+0x3c>
   49edc:	10c0071e 	bne	r2,r3,49efc <__fpcmp_parts_d+0x48>
   49ee0:	20800117 	ldw	r2,4(r4)
   49ee4:	1000091e 	bne	r2,zero,49f0c <__fpcmp_parts_d+0x58>
   49ee8:	00800044 	movi	r2,1
   49eec:	f800283a 	ret
   49ef0:	10c01a1e 	bne	r2,r3,49f5c <__fpcmp_parts_d+0xa8>
   49ef4:	0005883a 	mov	r2,zero
   49ef8:	f800283a 	ret
   49efc:	22000117 	ldw	r8,4(r4)
   49f00:	28800117 	ldw	r2,4(r5)
   49f04:	40800326 	beq	r8,r2,49f14 <__fpcmp_parts_d+0x60>
   49f08:	403ff726 	beq	r8,zero,49ee8 <__fpcmp_parts_d+0x34>
   49f0c:	00bfffc4 	movi	r2,-1
   49f10:	f800283a 	ret
   49f14:	20c00217 	ldw	r3,8(r4)
   49f18:	28800217 	ldw	r2,8(r5)
   49f1c:	10fffa16 	blt	r2,r3,49f08 <__fpcmp_parts_d+0x54>
   49f20:	18800916 	blt	r3,r2,49f48 <__fpcmp_parts_d+0x94>
   49f24:	21c00417 	ldw	r7,16(r4)
   49f28:	28c00417 	ldw	r3,16(r5)
   49f2c:	21800317 	ldw	r6,12(r4)
   49f30:	28800317 	ldw	r2,12(r5)
   49f34:	19fff436 	bltu	r3,r7,49f08 <__fpcmp_parts_d+0x54>
   49f38:	38c00526 	beq	r7,r3,49f50 <__fpcmp_parts_d+0x9c>
   49f3c:	38c00236 	bltu	r7,r3,49f48 <__fpcmp_parts_d+0x94>
   49f40:	19ffec1e 	bne	r3,r7,49ef4 <__fpcmp_parts_d+0x40>
   49f44:	30bfeb2e 	bgeu	r6,r2,49ef4 <__fpcmp_parts_d+0x40>
   49f48:	403fe71e 	bne	r8,zero,49ee8 <__fpcmp_parts_d+0x34>
   49f4c:	003fef06 	br	49f0c <__fpcmp_parts_d+0x58>
   49f50:	11bffa2e 	bgeu	r2,r6,49f3c <__fpcmp_parts_d+0x88>
   49f54:	403fe426 	beq	r8,zero,49ee8 <__fpcmp_parts_d+0x34>
   49f58:	003fec06 	br	49f0c <__fpcmp_parts_d+0x58>
   49f5c:	28800117 	ldw	r2,4(r5)
   49f60:	103fe11e 	bne	r2,zero,49ee8 <__fpcmp_parts_d+0x34>
   49f64:	003fe906 	br	49f0c <__fpcmp_parts_d+0x58>
   49f68:	11bfdd1e 	bne	r2,r6,49ee0 <__fpcmp_parts_d+0x2c>
   49f6c:	28c00117 	ldw	r3,4(r5)
   49f70:	20800117 	ldw	r2,4(r4)
   49f74:	1885c83a 	sub	r2,r3,r2
   49f78:	f800283a 	ret

00049f7c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   49f7c:	defff804 	addi	sp,sp,-32
   49f80:	dfc00715 	stw	ra,28(sp)
   49f84:	df000615 	stw	fp,24(sp)
   49f88:	df000604 	addi	fp,sp,24
   49f8c:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   49f90:	e0bffc17 	ldw	r2,-16(fp)
   49f94:	1004803a 	cmplt	r2,r2,zero
   49f98:	1000081e 	bne	r2,zero,49fbc <close+0x40>
   49f9c:	e0bffc17 	ldw	r2,-16(fp)
   49fa0:	10800324 	muli	r2,r2,12
   49fa4:	1007883a 	mov	r3,r2
   49fa8:	00900034 	movhi	r2,16384
   49fac:	1082f404 	addi	r2,r2,3024
   49fb0:	1887883a 	add	r3,r3,r2
   49fb4:	e0ffff15 	stw	r3,-4(fp)
   49fb8:	00000106 	br	49fc0 <close+0x44>
   49fbc:	e03fff15 	stw	zero,-4(fp)
   49fc0:	e0bfff17 	ldw	r2,-4(fp)
   49fc4:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
   49fc8:	e0bffb17 	ldw	r2,-20(fp)
   49fcc:	1005003a 	cmpeq	r2,r2,zero
   49fd0:	10001d1e 	bne	r2,zero,4a048 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   49fd4:	e0bffb17 	ldw	r2,-20(fp)
   49fd8:	10800017 	ldw	r2,0(r2)
   49fdc:	10800417 	ldw	r2,16(r2)
   49fe0:	1005003a 	cmpeq	r2,r2,zero
   49fe4:	1000071e 	bne	r2,zero,4a004 <close+0x88>
   49fe8:	e0bffb17 	ldw	r2,-20(fp)
   49fec:	10800017 	ldw	r2,0(r2)
   49ff0:	10800417 	ldw	r2,16(r2)
   49ff4:	e13ffb17 	ldw	r4,-20(fp)
   49ff8:	103ee83a 	callr	r2
   49ffc:	e0bffe15 	stw	r2,-8(fp)
   4a000:	00000106 	br	4a008 <close+0x8c>
   4a004:	e03ffe15 	stw	zero,-8(fp)
   4a008:	e0bffe17 	ldw	r2,-8(fp)
   4a00c:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   4a010:	e13ffc17 	ldw	r4,-16(fp)
   4a014:	004a7c00 	call	4a7c0 <alt_release_fd>
    if (rval < 0)
   4a018:	e0bffa17 	ldw	r2,-24(fp)
   4a01c:	1004403a 	cmpge	r2,r2,zero
   4a020:	1000071e 	bne	r2,zero,4a040 <close+0xc4>
    {
      ALT_ERRNO = -rval;
   4a024:	004a0780 	call	4a078 <alt_get_errno>
   4a028:	e0fffa17 	ldw	r3,-24(fp)
   4a02c:	00c7c83a 	sub	r3,zero,r3
   4a030:	10c00015 	stw	r3,0(r2)
      return -1;
   4a034:	00bfffc4 	movi	r2,-1
   4a038:	e0bffd15 	stw	r2,-12(fp)
   4a03c:	00000806 	br	4a060 <close+0xe4>
    }
    return 0;
   4a040:	e03ffd15 	stw	zero,-12(fp)
   4a044:	00000606 	br	4a060 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   4a048:	004a0780 	call	4a078 <alt_get_errno>
   4a04c:	1007883a 	mov	r3,r2
   4a050:	00801444 	movi	r2,81
   4a054:	18800015 	stw	r2,0(r3)
    return -1;
   4a058:	00bfffc4 	movi	r2,-1
   4a05c:	e0bffd15 	stw	r2,-12(fp)
   4a060:	e0bffd17 	ldw	r2,-12(fp)
  }
}
   4a064:	e037883a 	mov	sp,fp
   4a068:	dfc00117 	ldw	ra,4(sp)
   4a06c:	df000017 	ldw	fp,0(sp)
   4a070:	dec00204 	addi	sp,sp,8
   4a074:	f800283a 	ret

0004a078 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4a078:	defffd04 	addi	sp,sp,-12
   4a07c:	dfc00215 	stw	ra,8(sp)
   4a080:	df000115 	stw	fp,4(sp)
   4a084:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   4a088:	00900034 	movhi	r2,16384
   4a08c:	10877704 	addi	r2,r2,7644
   4a090:	10800017 	ldw	r2,0(r2)
   4a094:	1005003a 	cmpeq	r2,r2,zero
   4a098:	1000061e 	bne	r2,zero,4a0b4 <alt_get_errno+0x3c>
   4a09c:	00900034 	movhi	r2,16384
   4a0a0:	10877704 	addi	r2,r2,7644
   4a0a4:	10800017 	ldw	r2,0(r2)
   4a0a8:	103ee83a 	callr	r2
   4a0ac:	e0bfff15 	stw	r2,-4(fp)
   4a0b0:	00000306 	br	4a0c0 <alt_get_errno+0x48>
   4a0b4:	00900034 	movhi	r2,16384
   4a0b8:	10878204 	addi	r2,r2,7688
   4a0bc:	e0bfff15 	stw	r2,-4(fp)
   4a0c0:	e0bfff17 	ldw	r2,-4(fp)
}
   4a0c4:	e037883a 	mov	sp,fp
   4a0c8:	dfc00117 	ldw	ra,4(sp)
   4a0cc:	df000017 	ldw	fp,0(sp)
   4a0d0:	dec00204 	addi	sp,sp,8
   4a0d4:	f800283a 	ret

0004a0d8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   4a0d8:	defffc04 	addi	sp,sp,-16
   4a0dc:	df000315 	stw	fp,12(sp)
   4a0e0:	df000304 	addi	fp,sp,12
   4a0e4:	e13ffd15 	stw	r4,-12(fp)
   4a0e8:	e17ffe15 	stw	r5,-8(fp)
   4a0ec:	e1bfff15 	stw	r6,-4(fp)
  return len;
   4a0f0:	e0bfff17 	ldw	r2,-4(fp)
}
   4a0f4:	e037883a 	mov	sp,fp
   4a0f8:	df000017 	ldw	fp,0(sp)
   4a0fc:	dec00104 	addi	sp,sp,4
   4a100:	f800283a 	ret

0004a104 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   4a104:	defff904 	addi	sp,sp,-28
   4a108:	dfc00615 	stw	ra,24(sp)
   4a10c:	df000515 	stw	fp,20(sp)
   4a110:	df000504 	addi	fp,sp,20
   4a114:	e13ffc15 	stw	r4,-16(fp)
   4a118:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4a11c:	e0bffc17 	ldw	r2,-16(fp)
   4a120:	1004803a 	cmplt	r2,r2,zero
   4a124:	1000081e 	bne	r2,zero,4a148 <fstat+0x44>
   4a128:	e0bffc17 	ldw	r2,-16(fp)
   4a12c:	10800324 	muli	r2,r2,12
   4a130:	1007883a 	mov	r3,r2
   4a134:	00900034 	movhi	r2,16384
   4a138:	1082f404 	addi	r2,r2,3024
   4a13c:	1887883a 	add	r3,r3,r2
   4a140:	e0ffff15 	stw	r3,-4(fp)
   4a144:	00000106 	br	4a14c <fstat+0x48>
   4a148:	e03fff15 	stw	zero,-4(fp)
   4a14c:	e0bfff17 	ldw	r2,-4(fp)
   4a150:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   4a154:	e0bffb17 	ldw	r2,-20(fp)
   4a158:	1005003a 	cmpeq	r2,r2,zero
   4a15c:	1000121e 	bne	r2,zero,4a1a8 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   4a160:	e0bffb17 	ldw	r2,-20(fp)
   4a164:	10800017 	ldw	r2,0(r2)
   4a168:	10800817 	ldw	r2,32(r2)
   4a16c:	1005003a 	cmpeq	r2,r2,zero
   4a170:	1000081e 	bne	r2,zero,4a194 <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
   4a174:	e0bffb17 	ldw	r2,-20(fp)
   4a178:	10800017 	ldw	r2,0(r2)
   4a17c:	10800817 	ldw	r2,32(r2)
   4a180:	e13ffb17 	ldw	r4,-20(fp)
   4a184:	e17ffd17 	ldw	r5,-12(fp)
   4a188:	103ee83a 	callr	r2
   4a18c:	e0bffe15 	stw	r2,-8(fp)
   4a190:	00000b06 	br	4a1c0 <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   4a194:	e0fffd17 	ldw	r3,-12(fp)
   4a198:	00880004 	movi	r2,8192
   4a19c:	18800115 	stw	r2,4(r3)
      return 0;
   4a1a0:	e03ffe15 	stw	zero,-8(fp)
   4a1a4:	00000606 	br	4a1c0 <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   4a1a8:	004a1d80 	call	4a1d8 <alt_get_errno>
   4a1ac:	1007883a 	mov	r3,r2
   4a1b0:	00801444 	movi	r2,81
   4a1b4:	18800015 	stw	r2,0(r3)
    return -1;
   4a1b8:	00bfffc4 	movi	r2,-1
   4a1bc:	e0bffe15 	stw	r2,-8(fp)
   4a1c0:	e0bffe17 	ldw	r2,-8(fp)
  }
}
   4a1c4:	e037883a 	mov	sp,fp
   4a1c8:	dfc00117 	ldw	ra,4(sp)
   4a1cc:	df000017 	ldw	fp,0(sp)
   4a1d0:	dec00204 	addi	sp,sp,8
   4a1d4:	f800283a 	ret

0004a1d8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4a1d8:	defffd04 	addi	sp,sp,-12
   4a1dc:	dfc00215 	stw	ra,8(sp)
   4a1e0:	df000115 	stw	fp,4(sp)
   4a1e4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   4a1e8:	00900034 	movhi	r2,16384
   4a1ec:	10877704 	addi	r2,r2,7644
   4a1f0:	10800017 	ldw	r2,0(r2)
   4a1f4:	1005003a 	cmpeq	r2,r2,zero
   4a1f8:	1000061e 	bne	r2,zero,4a214 <alt_get_errno+0x3c>
   4a1fc:	00900034 	movhi	r2,16384
   4a200:	10877704 	addi	r2,r2,7644
   4a204:	10800017 	ldw	r2,0(r2)
   4a208:	103ee83a 	callr	r2
   4a20c:	e0bfff15 	stw	r2,-4(fp)
   4a210:	00000306 	br	4a220 <alt_get_errno+0x48>
   4a214:	00900034 	movhi	r2,16384
   4a218:	10878204 	addi	r2,r2,7688
   4a21c:	e0bfff15 	stw	r2,-4(fp)
   4a220:	e0bfff17 	ldw	r2,-4(fp)
}
   4a224:	e037883a 	mov	sp,fp
   4a228:	dfc00117 	ldw	ra,4(sp)
   4a22c:	df000017 	ldw	fp,0(sp)
   4a230:	dec00204 	addi	sp,sp,8
   4a234:	f800283a 	ret

0004a238 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   4a238:	deffeb04 	addi	sp,sp,-84
   4a23c:	dfc01415 	stw	ra,80(sp)
   4a240:	df001315 	stw	fp,76(sp)
   4a244:	df001304 	addi	fp,sp,76
   4a248:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4a24c:	e0bffd17 	ldw	r2,-12(fp)
   4a250:	1004803a 	cmplt	r2,r2,zero
   4a254:	1000081e 	bne	r2,zero,4a278 <isatty+0x40>
   4a258:	e0bffd17 	ldw	r2,-12(fp)
   4a25c:	10800324 	muli	r2,r2,12
   4a260:	1007883a 	mov	r3,r2
   4a264:	00900034 	movhi	r2,16384
   4a268:	1082f404 	addi	r2,r2,3024
   4a26c:	1887883a 	add	r3,r3,r2
   4a270:	e0ffff15 	stw	r3,-4(fp)
   4a274:	00000106 	br	4a27c <isatty+0x44>
   4a278:	e03fff15 	stw	zero,-4(fp)
   4a27c:	e0bfff17 	ldw	r2,-4(fp)
   4a280:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
   4a284:	e0bfed17 	ldw	r2,-76(fp)
   4a288:	1005003a 	cmpeq	r2,r2,zero
   4a28c:	10000f1e 	bne	r2,zero,4a2cc <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   4a290:	e0bfed17 	ldw	r2,-76(fp)
   4a294:	10800017 	ldw	r2,0(r2)
   4a298:	10800817 	ldw	r2,32(r2)
   4a29c:	1004c03a 	cmpne	r2,r2,zero
   4a2a0:	1000031e 	bne	r2,zero,4a2b0 <isatty+0x78>
    {
      return 1;
   4a2a4:	00800044 	movi	r2,1
   4a2a8:	e0bffe15 	stw	r2,-8(fp)
   4a2ac:	00000c06 	br	4a2e0 <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   4a2b0:	e17fee04 	addi	r5,fp,-72
   4a2b4:	e13ffd17 	ldw	r4,-12(fp)
   4a2b8:	004a1040 	call	4a104 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   4a2bc:	e0bfef17 	ldw	r2,-68(fp)
   4a2c0:	10880020 	cmpeqi	r2,r2,8192
   4a2c4:	e0bffe15 	stw	r2,-8(fp)
   4a2c8:	00000506 	br	4a2e0 <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   4a2cc:	004a2f80 	call	4a2f8 <alt_get_errno>
   4a2d0:	1007883a 	mov	r3,r2
   4a2d4:	00801444 	movi	r2,81
   4a2d8:	18800015 	stw	r2,0(r3)
    return 0;
   4a2dc:	e03ffe15 	stw	zero,-8(fp)
   4a2e0:	e0bffe17 	ldw	r2,-8(fp)
  }
}
   4a2e4:	e037883a 	mov	sp,fp
   4a2e8:	dfc00117 	ldw	ra,4(sp)
   4a2ec:	df000017 	ldw	fp,0(sp)
   4a2f0:	dec00204 	addi	sp,sp,8
   4a2f4:	f800283a 	ret

0004a2f8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4a2f8:	defffd04 	addi	sp,sp,-12
   4a2fc:	dfc00215 	stw	ra,8(sp)
   4a300:	df000115 	stw	fp,4(sp)
   4a304:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   4a308:	00900034 	movhi	r2,16384
   4a30c:	10877704 	addi	r2,r2,7644
   4a310:	10800017 	ldw	r2,0(r2)
   4a314:	1005003a 	cmpeq	r2,r2,zero
   4a318:	1000061e 	bne	r2,zero,4a334 <alt_get_errno+0x3c>
   4a31c:	00900034 	movhi	r2,16384
   4a320:	10877704 	addi	r2,r2,7644
   4a324:	10800017 	ldw	r2,0(r2)
   4a328:	103ee83a 	callr	r2
   4a32c:	e0bfff15 	stw	r2,-4(fp)
   4a330:	00000306 	br	4a340 <alt_get_errno+0x48>
   4a334:	00900034 	movhi	r2,16384
   4a338:	10878204 	addi	r2,r2,7688
   4a33c:	e0bfff15 	stw	r2,-4(fp)
   4a340:	e0bfff17 	ldw	r2,-4(fp)
}
   4a344:	e037883a 	mov	sp,fp
   4a348:	dfc00117 	ldw	ra,4(sp)
   4a34c:	df000017 	ldw	fp,0(sp)
   4a350:	dec00204 	addi	sp,sp,8
   4a354:	f800283a 	ret

0004a358 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   4a358:	defffe04 	addi	sp,sp,-8
   4a35c:	dfc00115 	stw	ra,4(sp)
   4a360:	df000015 	stw	fp,0(sp)
   4a364:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   4a368:	01000174 	movhi	r4,5
   4a36c:	21345504 	addi	r4,r4,-11948
   4a370:	01500034 	movhi	r5,16384
   4a374:	2940e504 	addi	r5,r5,916
   4a378:	01900034 	movhi	r6,16384
   4a37c:	31877c04 	addi	r6,r6,7664
   4a380:	004a3d80 	call	4a3d8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   4a384:	01000134 	movhi	r4,4
   4a388:	21000804 	addi	r4,r4,32
   4a38c:	01400134 	movhi	r5,4
   4a390:	29400804 	addi	r5,r5,32
   4a394:	01800134 	movhi	r6,4
   4a398:	31806d04 	addi	r6,r6,436
   4a39c:	004a3d80 	call	4a3d8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   4a3a0:	01000174 	movhi	r4,5
   4a3a4:	21337004 	addi	r4,r4,-12864
   4a3a8:	01500034 	movhi	r5,16384
   4a3ac:	29400004 	addi	r5,r5,0
   4a3b0:	01900034 	movhi	r6,16384
   4a3b4:	3180e504 	addi	r6,r6,916
   4a3b8:	004a3d80 	call	4a3d8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   4a3bc:	004bbd80 	call	4bbd8 <alt_dcache_flush_all>
  alt_icache_flush_all();
   4a3c0:	004bdf80 	call	4bdf8 <alt_icache_flush_all>
}
   4a3c4:	e037883a 	mov	sp,fp
   4a3c8:	dfc00117 	ldw	ra,4(sp)
   4a3cc:	df000017 	ldw	fp,0(sp)
   4a3d0:	dec00204 	addi	sp,sp,8
   4a3d4:	f800283a 	ret

0004a3d8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   4a3d8:	defffc04 	addi	sp,sp,-16
   4a3dc:	df000315 	stw	fp,12(sp)
   4a3e0:	df000304 	addi	fp,sp,12
   4a3e4:	e13ffd15 	stw	r4,-12(fp)
   4a3e8:	e17ffe15 	stw	r5,-8(fp)
   4a3ec:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   4a3f0:	e0fffe17 	ldw	r3,-8(fp)
   4a3f4:	e0bffd17 	ldw	r2,-12(fp)
   4a3f8:	18800e26 	beq	r3,r2,4a434 <alt_load_section+0x5c>
  {
    while( to != end )
   4a3fc:	00000a06 	br	4a428 <alt_load_section+0x50>
    {
      *to++ = *from++;
   4a400:	e0bffd17 	ldw	r2,-12(fp)
   4a404:	10c00017 	ldw	r3,0(r2)
   4a408:	e0bffe17 	ldw	r2,-8(fp)
   4a40c:	10c00015 	stw	r3,0(r2)
   4a410:	e0bffe17 	ldw	r2,-8(fp)
   4a414:	10800104 	addi	r2,r2,4
   4a418:	e0bffe15 	stw	r2,-8(fp)
   4a41c:	e0bffd17 	ldw	r2,-12(fp)
   4a420:	10800104 	addi	r2,r2,4
   4a424:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   4a428:	e0fffe17 	ldw	r3,-8(fp)
   4a42c:	e0bfff17 	ldw	r2,-4(fp)
   4a430:	18bff31e 	bne	r3,r2,4a400 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   4a434:	e037883a 	mov	sp,fp
   4a438:	df000017 	ldw	fp,0(sp)
   4a43c:	dec00104 	addi	sp,sp,4
   4a440:	f800283a 	ret

0004a444 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   4a444:	defff804 	addi	sp,sp,-32
   4a448:	dfc00715 	stw	ra,28(sp)
   4a44c:	df000615 	stw	fp,24(sp)
   4a450:	df000604 	addi	fp,sp,24
   4a454:	e13ffc15 	stw	r4,-16(fp)
   4a458:	e17ffd15 	stw	r5,-12(fp)
   4a45c:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   4a460:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4a464:	e0bffc17 	ldw	r2,-16(fp)
   4a468:	1004803a 	cmplt	r2,r2,zero
   4a46c:	1000081e 	bne	r2,zero,4a490 <lseek+0x4c>
   4a470:	e0bffc17 	ldw	r2,-16(fp)
   4a474:	10800324 	muli	r2,r2,12
   4a478:	1007883a 	mov	r3,r2
   4a47c:	00900034 	movhi	r2,16384
   4a480:	1082f404 	addi	r2,r2,3024
   4a484:	1887883a 	add	r3,r3,r2
   4a488:	e0ffff15 	stw	r3,-4(fp)
   4a48c:	00000106 	br	4a494 <lseek+0x50>
   4a490:	e03fff15 	stw	zero,-4(fp)
   4a494:	e0bfff17 	ldw	r2,-4(fp)
   4a498:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
   4a49c:	e0bffb17 	ldw	r2,-20(fp)
   4a4a0:	1005003a 	cmpeq	r2,r2,zero
   4a4a4:	1000111e 	bne	r2,zero,4a4ec <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   4a4a8:	e0bffb17 	ldw	r2,-20(fp)
   4a4ac:	10800017 	ldw	r2,0(r2)
   4a4b0:	10800717 	ldw	r2,28(r2)
   4a4b4:	1005003a 	cmpeq	r2,r2,zero
   4a4b8:	1000091e 	bne	r2,zero,4a4e0 <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   4a4bc:	e0bffb17 	ldw	r2,-20(fp)
   4a4c0:	10800017 	ldw	r2,0(r2)
   4a4c4:	10800717 	ldw	r2,28(r2)
   4a4c8:	e13ffb17 	ldw	r4,-20(fp)
   4a4cc:	e17ffd17 	ldw	r5,-12(fp)
   4a4d0:	e1bffe17 	ldw	r6,-8(fp)
   4a4d4:	103ee83a 	callr	r2
   4a4d8:	e0bffa15 	stw	r2,-24(fp)
   4a4dc:	00000506 	br	4a4f4 <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   4a4e0:	00bfde84 	movi	r2,-134
   4a4e4:	e0bffa15 	stw	r2,-24(fp)
   4a4e8:	00000206 	br	4a4f4 <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
   4a4ec:	00bfebc4 	movi	r2,-81
   4a4f0:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
   4a4f4:	e0bffa17 	ldw	r2,-24(fp)
   4a4f8:	1004403a 	cmpge	r2,r2,zero
   4a4fc:	1000071e 	bne	r2,zero,4a51c <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
   4a500:	004a5340 	call	4a534 <alt_get_errno>
   4a504:	1007883a 	mov	r3,r2
   4a508:	e0bffa17 	ldw	r2,-24(fp)
   4a50c:	0085c83a 	sub	r2,zero,r2
   4a510:	18800015 	stw	r2,0(r3)
    rc = -1;
   4a514:	00bfffc4 	movi	r2,-1
   4a518:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
   4a51c:	e0bffa17 	ldw	r2,-24(fp)
}
   4a520:	e037883a 	mov	sp,fp
   4a524:	dfc00117 	ldw	ra,4(sp)
   4a528:	df000017 	ldw	fp,0(sp)
   4a52c:	dec00204 	addi	sp,sp,8
   4a530:	f800283a 	ret

0004a534 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4a534:	defffd04 	addi	sp,sp,-12
   4a538:	dfc00215 	stw	ra,8(sp)
   4a53c:	df000115 	stw	fp,4(sp)
   4a540:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   4a544:	00900034 	movhi	r2,16384
   4a548:	10877704 	addi	r2,r2,7644
   4a54c:	10800017 	ldw	r2,0(r2)
   4a550:	1005003a 	cmpeq	r2,r2,zero
   4a554:	1000061e 	bne	r2,zero,4a570 <alt_get_errno+0x3c>
   4a558:	00900034 	movhi	r2,16384
   4a55c:	10877704 	addi	r2,r2,7644
   4a560:	10800017 	ldw	r2,0(r2)
   4a564:	103ee83a 	callr	r2
   4a568:	e0bfff15 	stw	r2,-4(fp)
   4a56c:	00000306 	br	4a57c <alt_get_errno+0x48>
   4a570:	00900034 	movhi	r2,16384
   4a574:	10878204 	addi	r2,r2,7688
   4a578:	e0bfff15 	stw	r2,-4(fp)
   4a57c:	e0bfff17 	ldw	r2,-4(fp)
}
   4a580:	e037883a 	mov	sp,fp
   4a584:	dfc00117 	ldw	ra,4(sp)
   4a588:	df000017 	ldw	fp,0(sp)
   4a58c:	dec00204 	addi	sp,sp,8
   4a590:	f800283a 	ret

0004a594 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   4a594:	defffd04 	addi	sp,sp,-12
   4a598:	dfc00215 	stw	ra,8(sp)
   4a59c:	df000115 	stw	fp,4(sp)
   4a5a0:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   4a5a4:	0009883a 	mov	r4,zero
   4a5a8:	004aa8c0 	call	4aa8c <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   4a5ac:	004aac00 	call	4aac0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   4a5b0:	01100034 	movhi	r4,16384
   4a5b4:	2100dd04 	addi	r4,r4,884
   4a5b8:	01500034 	movhi	r5,16384
   4a5bc:	2940dd04 	addi	r5,r5,884
   4a5c0:	01900034 	movhi	r6,16384
   4a5c4:	3180dd04 	addi	r6,r6,884
   4a5c8:	004c1b80 	call	4c1b8 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   4a5cc:	004bd300 	call	4bd30 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   4a5d0:	01000174 	movhi	r4,5
   4a5d4:	212f6504 	addi	r4,r4,-17004
   4a5d8:	004c9b40 	call	4c9b4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   4a5dc:	d1201717 	ldw	r4,-32676(gp)
   4a5e0:	d1601817 	ldw	r5,-32672(gp)
   4a5e4:	d1a01917 	ldw	r6,-32668(gp)
   4a5e8:	00407f80 	call	407f8 <main>
   4a5ec:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   4a5f0:	01000044 	movi	r4,1
   4a5f4:	0049f7c0 	call	49f7c <close>
  exit (result);
   4a5f8:	e13fff17 	ldw	r4,-4(fp)
   4a5fc:	004c9c80 	call	4c9c8 <exit>

0004a600 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   4a600:	defffe04 	addi	sp,sp,-8
   4a604:	df000115 	stw	fp,4(sp)
   4a608:	df000104 	addi	fp,sp,4
   4a60c:	e13fff15 	stw	r4,-4(fp)
}
   4a610:	e037883a 	mov	sp,fp
   4a614:	df000017 	ldw	fp,0(sp)
   4a618:	dec00104 	addi	sp,sp,4
   4a61c:	f800283a 	ret

0004a620 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   4a620:	defffe04 	addi	sp,sp,-8
   4a624:	df000115 	stw	fp,4(sp)
   4a628:	df000104 	addi	fp,sp,4
   4a62c:	e13fff15 	stw	r4,-4(fp)
}
   4a630:	e037883a 	mov	sp,fp
   4a634:	df000017 	ldw	fp,0(sp)
   4a638:	dec00104 	addi	sp,sp,4
   4a63c:	f800283a 	ret

0004a640 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   4a640:	defff704 	addi	sp,sp,-36
   4a644:	dfc00815 	stw	ra,32(sp)
   4a648:	df000715 	stw	fp,28(sp)
   4a64c:	df000704 	addi	fp,sp,28
   4a650:	e13ffb15 	stw	r4,-20(fp)
   4a654:	e17ffc15 	stw	r5,-16(fp)
   4a658:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4a65c:	e0bffb17 	ldw	r2,-20(fp)
   4a660:	1004803a 	cmplt	r2,r2,zero
   4a664:	1000081e 	bne	r2,zero,4a688 <read+0x48>
   4a668:	e0bffb17 	ldw	r2,-20(fp)
   4a66c:	10800324 	muli	r2,r2,12
   4a670:	1007883a 	mov	r3,r2
   4a674:	00900034 	movhi	r2,16384
   4a678:	1082f404 	addi	r2,r2,3024
   4a67c:	1887883a 	add	r3,r3,r2
   4a680:	e0ffff15 	stw	r3,-4(fp)
   4a684:	00000106 	br	4a68c <read+0x4c>
   4a688:	e03fff15 	stw	zero,-4(fp)
   4a68c:	e0bfff17 	ldw	r2,-4(fp)
   4a690:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   4a694:	e0bffa17 	ldw	r2,-24(fp)
   4a698:	1005003a 	cmpeq	r2,r2,zero
   4a69c:	1000241e 	bne	r2,zero,4a730 <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   4a6a0:	e0bffa17 	ldw	r2,-24(fp)
   4a6a4:	10800217 	ldw	r2,8(r2)
   4a6a8:	108000cc 	andi	r2,r2,3
   4a6ac:	10800060 	cmpeqi	r2,r2,1
   4a6b0:	10001a1e 	bne	r2,zero,4a71c <read+0xdc>
   4a6b4:	e0bffa17 	ldw	r2,-24(fp)
   4a6b8:	10800017 	ldw	r2,0(r2)
   4a6bc:	10800517 	ldw	r2,20(r2)
   4a6c0:	1005003a 	cmpeq	r2,r2,zero
   4a6c4:	1000151e 	bne	r2,zero,4a71c <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   4a6c8:	e0bffa17 	ldw	r2,-24(fp)
   4a6cc:	10800017 	ldw	r2,0(r2)
   4a6d0:	10800517 	ldw	r2,20(r2)
   4a6d4:	e17ffc17 	ldw	r5,-16(fp)
   4a6d8:	e1bffd17 	ldw	r6,-12(fp)
   4a6dc:	e13ffa17 	ldw	r4,-24(fp)
   4a6e0:	103ee83a 	callr	r2
   4a6e4:	e0bff915 	stw	r2,-28(fp)
   4a6e8:	e0bff917 	ldw	r2,-28(fp)
   4a6ec:	1004403a 	cmpge	r2,r2,zero
   4a6f0:	1000071e 	bne	r2,zero,4a710 <read+0xd0>
        {
          ALT_ERRNO = -rval;
   4a6f4:	004a7600 	call	4a760 <alt_get_errno>
   4a6f8:	e0fff917 	ldw	r3,-28(fp)
   4a6fc:	00c7c83a 	sub	r3,zero,r3
   4a700:	10c00015 	stw	r3,0(r2)
          return -1;
   4a704:	00bfffc4 	movi	r2,-1
   4a708:	e0bffe15 	stw	r2,-8(fp)
   4a70c:	00000e06 	br	4a748 <read+0x108>
        }
        return rval;
   4a710:	e0bff917 	ldw	r2,-28(fp)
   4a714:	e0bffe15 	stw	r2,-8(fp)
   4a718:	00000b06 	br	4a748 <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
   4a71c:	004a7600 	call	4a760 <alt_get_errno>
   4a720:	1007883a 	mov	r3,r2
   4a724:	00800344 	movi	r2,13
   4a728:	18800015 	stw	r2,0(r3)
   4a72c:	00000406 	br	4a740 <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   4a730:	004a7600 	call	4a760 <alt_get_errno>
   4a734:	1007883a 	mov	r3,r2
   4a738:	00801444 	movi	r2,81
   4a73c:	18800015 	stw	r2,0(r3)
  }
  return -1;
   4a740:	00bfffc4 	movi	r2,-1
   4a744:	e0bffe15 	stw	r2,-8(fp)
   4a748:	e0bffe17 	ldw	r2,-8(fp)
}
   4a74c:	e037883a 	mov	sp,fp
   4a750:	dfc00117 	ldw	ra,4(sp)
   4a754:	df000017 	ldw	fp,0(sp)
   4a758:	dec00204 	addi	sp,sp,8
   4a75c:	f800283a 	ret

0004a760 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4a760:	defffd04 	addi	sp,sp,-12
   4a764:	dfc00215 	stw	ra,8(sp)
   4a768:	df000115 	stw	fp,4(sp)
   4a76c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   4a770:	00900034 	movhi	r2,16384
   4a774:	10877704 	addi	r2,r2,7644
   4a778:	10800017 	ldw	r2,0(r2)
   4a77c:	1005003a 	cmpeq	r2,r2,zero
   4a780:	1000061e 	bne	r2,zero,4a79c <alt_get_errno+0x3c>
   4a784:	00900034 	movhi	r2,16384
   4a788:	10877704 	addi	r2,r2,7644
   4a78c:	10800017 	ldw	r2,0(r2)
   4a790:	103ee83a 	callr	r2
   4a794:	e0bfff15 	stw	r2,-4(fp)
   4a798:	00000306 	br	4a7a8 <alt_get_errno+0x48>
   4a79c:	00900034 	movhi	r2,16384
   4a7a0:	10878204 	addi	r2,r2,7688
   4a7a4:	e0bfff15 	stw	r2,-4(fp)
   4a7a8:	e0bfff17 	ldw	r2,-4(fp)
}
   4a7ac:	e037883a 	mov	sp,fp
   4a7b0:	dfc00117 	ldw	ra,4(sp)
   4a7b4:	df000017 	ldw	fp,0(sp)
   4a7b8:	dec00204 	addi	sp,sp,8
   4a7bc:	f800283a 	ret

0004a7c0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   4a7c0:	defffe04 	addi	sp,sp,-8
   4a7c4:	df000115 	stw	fp,4(sp)
   4a7c8:	df000104 	addi	fp,sp,4
   4a7cc:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   4a7d0:	e0bfff17 	ldw	r2,-4(fp)
   4a7d4:	108000d0 	cmplti	r2,r2,3
   4a7d8:	10000d1e 	bne	r2,zero,4a810 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   4a7dc:	e0bfff17 	ldw	r2,-4(fp)
   4a7e0:	00d00034 	movhi	r3,16384
   4a7e4:	18c2f404 	addi	r3,r3,3024
   4a7e8:	10800324 	muli	r2,r2,12
   4a7ec:	10c5883a 	add	r2,r2,r3
   4a7f0:	10800204 	addi	r2,r2,8
   4a7f4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   4a7f8:	e0bfff17 	ldw	r2,-4(fp)
   4a7fc:	00d00034 	movhi	r3,16384
   4a800:	18c2f404 	addi	r3,r3,3024
   4a804:	10800324 	muli	r2,r2,12
   4a808:	10c5883a 	add	r2,r2,r3
   4a80c:	10000015 	stw	zero,0(r2)
  }
}
   4a810:	e037883a 	mov	sp,fp
   4a814:	df000017 	ldw	fp,0(sp)
   4a818:	dec00104 	addi	sp,sp,4
   4a81c:	f800283a 	ret

0004a820 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   4a820:	defff804 	addi	sp,sp,-32
   4a824:	df000715 	stw	fp,28(sp)
   4a828:	df000704 	addi	fp,sp,28
   4a82c:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4a830:	0005303a 	rdctl	r2,status
   4a834:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4a838:	e0fffb17 	ldw	r3,-20(fp)
   4a83c:	00bfff84 	movi	r2,-2
   4a840:	1884703a 	and	r2,r3,r2
   4a844:	1001703a 	wrctl	status,r2
  
  return context;
   4a848:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   4a84c:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   4a850:	d0a00c17 	ldw	r2,-32720(gp)
   4a854:	10c000c4 	addi	r3,r2,3
   4a858:	00bfff04 	movi	r2,-4
   4a85c:	1884703a 	and	r2,r3,r2
   4a860:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   4a864:	d0e00c17 	ldw	r3,-32720(gp)
   4a868:	e0bffe17 	ldw	r2,-8(fp)
   4a86c:	1887883a 	add	r3,r3,r2
   4a870:	00a00034 	movhi	r2,32768
   4a874:	10800004 	addi	r2,r2,0
   4a878:	10c0072e 	bgeu	r2,r3,4a898 <sbrk+0x78>
   4a87c:	e0bffd17 	ldw	r2,-12(fp)
   4a880:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4a884:	e0bffa17 	ldw	r2,-24(fp)
   4a888:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   4a88c:	00bfffc4 	movi	r2,-1
   4a890:	e0bfff15 	stw	r2,-4(fp)
   4a894:	00000c06 	br	4a8c8 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
   4a898:	d0a00c17 	ldw	r2,-32720(gp)
   4a89c:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
   4a8a0:	d0e00c17 	ldw	r3,-32720(gp)
   4a8a4:	e0bffe17 	ldw	r2,-8(fp)
   4a8a8:	1885883a 	add	r2,r3,r2
   4a8ac:	d0a00c15 	stw	r2,-32720(gp)
   4a8b0:	e0bffd17 	ldw	r2,-12(fp)
   4a8b4:	e0bff915 	stw	r2,-28(fp)
   4a8b8:	e0bff917 	ldw	r2,-28(fp)
   4a8bc:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   4a8c0:	e0bffc17 	ldw	r2,-16(fp)
   4a8c4:	e0bfff15 	stw	r2,-4(fp)
   4a8c8:	e0bfff17 	ldw	r2,-4(fp)
} 
   4a8cc:	e037883a 	mov	sp,fp
   4a8d0:	df000017 	ldw	fp,0(sp)
   4a8d4:	dec00104 	addi	sp,sp,4
   4a8d8:	f800283a 	ret

0004a8dc <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   4a8dc:	defffd04 	addi	sp,sp,-12
   4a8e0:	dfc00215 	stw	ra,8(sp)
   4a8e4:	df000115 	stw	fp,4(sp)
   4a8e8:	df000104 	addi	fp,sp,4
   4a8ec:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   4a8f0:	e13fff17 	ldw	r4,-4(fp)
   4a8f4:	004ba8c0 	call	4ba8c <alt_busy_sleep>
}
   4a8f8:	e037883a 	mov	sp,fp
   4a8fc:	dfc00117 	ldw	ra,4(sp)
   4a900:	df000017 	ldw	fp,0(sp)
   4a904:	dec00204 	addi	sp,sp,8
   4a908:	f800283a 	ret

0004a90c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   4a90c:	defff704 	addi	sp,sp,-36
   4a910:	dfc00815 	stw	ra,32(sp)
   4a914:	df000715 	stw	fp,28(sp)
   4a918:	df000704 	addi	fp,sp,28
   4a91c:	e13ffb15 	stw	r4,-20(fp)
   4a920:	e17ffc15 	stw	r5,-16(fp)
   4a924:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4a928:	e0bffb17 	ldw	r2,-20(fp)
   4a92c:	1004803a 	cmplt	r2,r2,zero
   4a930:	1000081e 	bne	r2,zero,4a954 <write+0x48>
   4a934:	e0bffb17 	ldw	r2,-20(fp)
   4a938:	10800324 	muli	r2,r2,12
   4a93c:	1007883a 	mov	r3,r2
   4a940:	00900034 	movhi	r2,16384
   4a944:	1082f404 	addi	r2,r2,3024
   4a948:	1887883a 	add	r3,r3,r2
   4a94c:	e0ffff15 	stw	r3,-4(fp)
   4a950:	00000106 	br	4a958 <write+0x4c>
   4a954:	e03fff15 	stw	zero,-4(fp)
   4a958:	e0bfff17 	ldw	r2,-4(fp)
   4a95c:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   4a960:	e0bffa17 	ldw	r2,-24(fp)
   4a964:	1005003a 	cmpeq	r2,r2,zero
   4a968:	1000241e 	bne	r2,zero,4a9fc <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   4a96c:	e0bffa17 	ldw	r2,-24(fp)
   4a970:	10800217 	ldw	r2,8(r2)
   4a974:	108000cc 	andi	r2,r2,3
   4a978:	1005003a 	cmpeq	r2,r2,zero
   4a97c:	10001a1e 	bne	r2,zero,4a9e8 <write+0xdc>
   4a980:	e0bffa17 	ldw	r2,-24(fp)
   4a984:	10800017 	ldw	r2,0(r2)
   4a988:	10800617 	ldw	r2,24(r2)
   4a98c:	1005003a 	cmpeq	r2,r2,zero
   4a990:	1000151e 	bne	r2,zero,4a9e8 <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   4a994:	e0bffa17 	ldw	r2,-24(fp)
   4a998:	10800017 	ldw	r2,0(r2)
   4a99c:	10800617 	ldw	r2,24(r2)
   4a9a0:	e17ffc17 	ldw	r5,-16(fp)
   4a9a4:	e1bffd17 	ldw	r6,-12(fp)
   4a9a8:	e13ffa17 	ldw	r4,-24(fp)
   4a9ac:	103ee83a 	callr	r2
   4a9b0:	e0bff915 	stw	r2,-28(fp)
   4a9b4:	e0bff917 	ldw	r2,-28(fp)
   4a9b8:	1004403a 	cmpge	r2,r2,zero
   4a9bc:	1000071e 	bne	r2,zero,4a9dc <write+0xd0>
      {
        ALT_ERRNO = -rval;
   4a9c0:	004aa2c0 	call	4aa2c <alt_get_errno>
   4a9c4:	e0fff917 	ldw	r3,-28(fp)
   4a9c8:	00c7c83a 	sub	r3,zero,r3
   4a9cc:	10c00015 	stw	r3,0(r2)
        return -1;
   4a9d0:	00bfffc4 	movi	r2,-1
   4a9d4:	e0bffe15 	stw	r2,-8(fp)
   4a9d8:	00000e06 	br	4aa14 <write+0x108>
      }
      return rval;
   4a9dc:	e0bff917 	ldw	r2,-28(fp)
   4a9e0:	e0bffe15 	stw	r2,-8(fp)
   4a9e4:	00000b06 	br	4aa14 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
   4a9e8:	004aa2c0 	call	4aa2c <alt_get_errno>
   4a9ec:	1007883a 	mov	r3,r2
   4a9f0:	00800344 	movi	r2,13
   4a9f4:	18800015 	stw	r2,0(r3)
   4a9f8:	00000406 	br	4aa0c <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   4a9fc:	004aa2c0 	call	4aa2c <alt_get_errno>
   4aa00:	1007883a 	mov	r3,r2
   4aa04:	00801444 	movi	r2,81
   4aa08:	18800015 	stw	r2,0(r3)
  }
  return -1;
   4aa0c:	00bfffc4 	movi	r2,-1
   4aa10:	e0bffe15 	stw	r2,-8(fp)
   4aa14:	e0bffe17 	ldw	r2,-8(fp)
}
   4aa18:	e037883a 	mov	sp,fp
   4aa1c:	dfc00117 	ldw	ra,4(sp)
   4aa20:	df000017 	ldw	fp,0(sp)
   4aa24:	dec00204 	addi	sp,sp,8
   4aa28:	f800283a 	ret

0004aa2c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4aa2c:	defffd04 	addi	sp,sp,-12
   4aa30:	dfc00215 	stw	ra,8(sp)
   4aa34:	df000115 	stw	fp,4(sp)
   4aa38:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   4aa3c:	00900034 	movhi	r2,16384
   4aa40:	10877704 	addi	r2,r2,7644
   4aa44:	10800017 	ldw	r2,0(r2)
   4aa48:	1005003a 	cmpeq	r2,r2,zero
   4aa4c:	1000061e 	bne	r2,zero,4aa68 <alt_get_errno+0x3c>
   4aa50:	00900034 	movhi	r2,16384
   4aa54:	10877704 	addi	r2,r2,7644
   4aa58:	10800017 	ldw	r2,0(r2)
   4aa5c:	103ee83a 	callr	r2
   4aa60:	e0bfff15 	stw	r2,-4(fp)
   4aa64:	00000306 	br	4aa74 <alt_get_errno+0x48>
   4aa68:	00900034 	movhi	r2,16384
   4aa6c:	10878204 	addi	r2,r2,7688
   4aa70:	e0bfff15 	stw	r2,-4(fp)
   4aa74:	e0bfff17 	ldw	r2,-4(fp)
}
   4aa78:	e037883a 	mov	sp,fp
   4aa7c:	dfc00117 	ldw	ra,4(sp)
   4aa80:	df000017 	ldw	fp,0(sp)
   4aa84:	dec00204 	addi	sp,sp,8
   4aa88:	f800283a 	ret

0004aa8c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   4aa8c:	defffd04 	addi	sp,sp,-12
   4aa90:	dfc00215 	stw	ra,8(sp)
   4aa94:	df000115 	stw	fp,4(sp)
   4aa98:	df000104 	addi	fp,sp,4
   4aa9c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS, nios2_qsys);
   4aaa0:	004c6980 	call	4c698 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   4aaa4:	00800044 	movi	r2,1
   4aaa8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   4aaac:	e037883a 	mov	sp,fp
   4aab0:	dfc00117 	ldw	ra,4(sp)
   4aab4:	df000017 	ldw	fp,0(sp)
   4aab8:	dec00204 	addi	sp,sp,8
   4aabc:	f800283a 	ret

0004aac0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   4aac0:	defffe04 	addi	sp,sp,-8
   4aac4:	dfc00115 	stw	ra,4(sp)
   4aac8:	df000015 	stw	fp,0(sp)
   4aacc:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
   4aad0:	01004034 	movhi	r4,256
   4aad4:	21001004 	addi	r4,r4,64
   4aad8:	000b883a 	mov	r5,zero
   4aadc:	01800044 	movi	r6,1
   4aae0:	01c0fa04 	movi	r7,1000
   4aae4:	004b8a80 	call	4b8a8 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   4aae8:	01100034 	movhi	r4,16384
   4aaec:	21035e04 	addi	r4,r4,3448
   4aaf0:	000b883a 	mov	r5,zero
   4aaf4:	000d883a 	mov	r6,zero
   4aaf8:	004ac9c0 	call	4ac9c <altera_avalon_jtag_uart_init>
   4aafc:	01100034 	movhi	r4,16384
   4ab00:	21035404 	addi	r4,r4,3408
   4ab04:	004ab1c0 	call	4ab1c <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SPI_1, spi_1);
    ALTERA_AVALON_SPI_INIT ( SPI_2, spi_2);
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
}
   4ab08:	e037883a 	mov	sp,fp
   4ab0c:	dfc00117 	ldw	ra,4(sp)
   4ab10:	df000017 	ldw	fp,0(sp)
   4ab14:	dec00204 	addi	sp,sp,8
   4ab18:	f800283a 	ret

0004ab1c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   4ab1c:	defffd04 	addi	sp,sp,-12
   4ab20:	dfc00215 	stw	ra,8(sp)
   4ab24:	df000115 	stw	fp,4(sp)
   4ab28:	df000104 	addi	fp,sp,4
   4ab2c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   4ab30:	e13fff17 	ldw	r4,-4(fp)
   4ab34:	01500034 	movhi	r5,16384
   4ab38:	29477404 	addi	r5,r5,7632
   4ab3c:	004bc1c0 	call	4bc1c <alt_dev_llist_insert>
}
   4ab40:	e037883a 	mov	sp,fp
   4ab44:	dfc00117 	ldw	ra,4(sp)
   4ab48:	df000017 	ldw	fp,0(sp)
   4ab4c:	dec00204 	addi	sp,sp,8
   4ab50:	f800283a 	ret

0004ab54 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   4ab54:	defffa04 	addi	sp,sp,-24
   4ab58:	dfc00515 	stw	ra,20(sp)
   4ab5c:	df000415 	stw	fp,16(sp)
   4ab60:	df000404 	addi	fp,sp,16
   4ab64:	e13ffd15 	stw	r4,-12(fp)
   4ab68:	e17ffe15 	stw	r5,-8(fp)
   4ab6c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   4ab70:	e0bffd17 	ldw	r2,-12(fp)
   4ab74:	10800017 	ldw	r2,0(r2)
   4ab78:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   4ab7c:	e0bffc17 	ldw	r2,-16(fp)
   4ab80:	11000a04 	addi	r4,r2,40
   4ab84:	e0bffd17 	ldw	r2,-12(fp)
   4ab88:	11c00217 	ldw	r7,8(r2)
   4ab8c:	e17ffe17 	ldw	r5,-8(fp)
   4ab90:	e1bfff17 	ldw	r6,-4(fp)
   4ab94:	004b19c0 	call	4b19c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   4ab98:	e037883a 	mov	sp,fp
   4ab9c:	dfc00117 	ldw	ra,4(sp)
   4aba0:	df000017 	ldw	fp,0(sp)
   4aba4:	dec00204 	addi	sp,sp,8
   4aba8:	f800283a 	ret

0004abac <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   4abac:	defffa04 	addi	sp,sp,-24
   4abb0:	dfc00515 	stw	ra,20(sp)
   4abb4:	df000415 	stw	fp,16(sp)
   4abb8:	df000404 	addi	fp,sp,16
   4abbc:	e13ffd15 	stw	r4,-12(fp)
   4abc0:	e17ffe15 	stw	r5,-8(fp)
   4abc4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   4abc8:	e0bffd17 	ldw	r2,-12(fp)
   4abcc:	10800017 	ldw	r2,0(r2)
   4abd0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   4abd4:	e0bffc17 	ldw	r2,-16(fp)
   4abd8:	11000a04 	addi	r4,r2,40
   4abdc:	e0bffd17 	ldw	r2,-12(fp)
   4abe0:	11c00217 	ldw	r7,8(r2)
   4abe4:	e17ffe17 	ldw	r5,-8(fp)
   4abe8:	e1bfff17 	ldw	r6,-4(fp)
   4abec:	004b3c00 	call	4b3c0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   4abf0:	e037883a 	mov	sp,fp
   4abf4:	dfc00117 	ldw	ra,4(sp)
   4abf8:	df000017 	ldw	fp,0(sp)
   4abfc:	dec00204 	addi	sp,sp,8
   4ac00:	f800283a 	ret

0004ac04 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   4ac04:	defffc04 	addi	sp,sp,-16
   4ac08:	dfc00315 	stw	ra,12(sp)
   4ac0c:	df000215 	stw	fp,8(sp)
   4ac10:	df000204 	addi	fp,sp,8
   4ac14:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   4ac18:	e0bfff17 	ldw	r2,-4(fp)
   4ac1c:	10800017 	ldw	r2,0(r2)
   4ac20:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   4ac24:	e0bffe17 	ldw	r2,-8(fp)
   4ac28:	11000a04 	addi	r4,r2,40
   4ac2c:	e0bfff17 	ldw	r2,-4(fp)
   4ac30:	11400217 	ldw	r5,8(r2)
   4ac34:	004b0340 	call	4b034 <altera_avalon_jtag_uart_close>
}
   4ac38:	e037883a 	mov	sp,fp
   4ac3c:	dfc00117 	ldw	ra,4(sp)
   4ac40:	df000017 	ldw	fp,0(sp)
   4ac44:	dec00204 	addi	sp,sp,8
   4ac48:	f800283a 	ret

0004ac4c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   4ac4c:	defffa04 	addi	sp,sp,-24
   4ac50:	dfc00515 	stw	ra,20(sp)
   4ac54:	df000415 	stw	fp,16(sp)
   4ac58:	df000404 	addi	fp,sp,16
   4ac5c:	e13ffd15 	stw	r4,-12(fp)
   4ac60:	e17ffe15 	stw	r5,-8(fp)
   4ac64:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   4ac68:	e0bffd17 	ldw	r2,-12(fp)
   4ac6c:	10800017 	ldw	r2,0(r2)
   4ac70:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   4ac74:	e0bffc17 	ldw	r2,-16(fp)
   4ac78:	11000a04 	addi	r4,r2,40
   4ac7c:	e17ffe17 	ldw	r5,-8(fp)
   4ac80:	e1bfff17 	ldw	r6,-4(fp)
   4ac84:	004b0a80 	call	4b0a8 <altera_avalon_jtag_uart_ioctl>
}
   4ac88:	e037883a 	mov	sp,fp
   4ac8c:	dfc00117 	ldw	ra,4(sp)
   4ac90:	df000017 	ldw	fp,0(sp)
   4ac94:	dec00204 	addi	sp,sp,8
   4ac98:	f800283a 	ret

0004ac9c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   4ac9c:	defffa04 	addi	sp,sp,-24
   4aca0:	dfc00515 	stw	ra,20(sp)
   4aca4:	df000415 	stw	fp,16(sp)
   4aca8:	df000404 	addi	fp,sp,16
   4acac:	e13ffd15 	stw	r4,-12(fp)
   4acb0:	e17ffe15 	stw	r5,-8(fp)
   4acb4:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   4acb8:	e0fffd17 	ldw	r3,-12(fp)
   4acbc:	00800044 	movi	r2,1
   4acc0:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   4acc4:	e0bffd17 	ldw	r2,-12(fp)
   4acc8:	10800017 	ldw	r2,0(r2)
   4accc:	11000104 	addi	r4,r2,4
   4acd0:	e0bffd17 	ldw	r2,-12(fp)
   4acd4:	10800817 	ldw	r2,32(r2)
   4acd8:	1007883a 	mov	r3,r2
   4acdc:	2005883a 	mov	r2,r4
   4ace0:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   4ace4:	e13ffe17 	ldw	r4,-8(fp)
   4ace8:	e17fff17 	ldw	r5,-4(fp)
   4acec:	d8000015 	stw	zero,0(sp)
   4acf0:	01800174 	movhi	r6,5
   4acf4:	31ab5704 	addi	r6,r6,-21156
   4acf8:	e1fffd17 	ldw	r7,-12(fp)
   4acfc:	004be280 	call	4be28 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   4ad00:	e0bffd17 	ldw	r2,-12(fp)
   4ad04:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   4ad08:	e0bffd17 	ldw	r2,-12(fp)
   4ad0c:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   4ad10:	00900034 	movhi	r2,16384
   4ad14:	10878704 	addi	r2,r2,7708
   4ad18:	10800017 	ldw	r2,0(r2)
   4ad1c:	100b883a 	mov	r5,r2
   4ad20:	01800174 	movhi	r6,5
   4ad24:	31abe104 	addi	r6,r6,-20604
   4ad28:	e1fffd17 	ldw	r7,-12(fp)
   4ad2c:	004b9380 	call	4b938 <alt_alarm_start>
   4ad30:	1004403a 	cmpge	r2,r2,zero
   4ad34:	1000041e 	bne	r2,zero,4ad48 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   4ad38:	e0fffd17 	ldw	r3,-12(fp)
   4ad3c:	00a00034 	movhi	r2,32768
   4ad40:	10bfffc4 	addi	r2,r2,-1
   4ad44:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   4ad48:	e037883a 	mov	sp,fp
   4ad4c:	dfc00117 	ldw	ra,4(sp)
   4ad50:	df000017 	ldw	fp,0(sp)
   4ad54:	dec00204 	addi	sp,sp,8
   4ad58:	f800283a 	ret

0004ad5c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   4ad5c:	defff804 	addi	sp,sp,-32
   4ad60:	df000715 	stw	fp,28(sp)
   4ad64:	df000704 	addi	fp,sp,28
   4ad68:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   4ad6c:	e0bfff17 	ldw	r2,-4(fp)
   4ad70:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
   4ad74:	e0bffe17 	ldw	r2,-8(fp)
   4ad78:	10800017 	ldw	r2,0(r2)
   4ad7c:	e0bffd15 	stw	r2,-12(fp)
   4ad80:	00000006 	br	4ad84 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   4ad84:	e0bffd17 	ldw	r2,-12(fp)
   4ad88:	10800104 	addi	r2,r2,4
   4ad8c:	10800037 	ldwio	r2,0(r2)
   4ad90:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   4ad94:	e0bffc17 	ldw	r2,-16(fp)
   4ad98:	1080c00c 	andi	r2,r2,768
   4ad9c:	1005003a 	cmpeq	r2,r2,zero
   4ada0:	1000741e 	bne	r2,zero,4af74 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   4ada4:	e0bffc17 	ldw	r2,-16(fp)
   4ada8:	1080400c 	andi	r2,r2,256
   4adac:	1005003a 	cmpeq	r2,r2,zero
   4adb0:	1000351e 	bne	r2,zero,4ae88 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   4adb4:	00800074 	movhi	r2,1
   4adb8:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4adbc:	e0bffe17 	ldw	r2,-8(fp)
   4adc0:	10800a17 	ldw	r2,40(r2)
   4adc4:	10800044 	addi	r2,r2,1
   4adc8:	1081ffcc 	andi	r2,r2,2047
   4adcc:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
   4add0:	e0bffe17 	ldw	r2,-8(fp)
   4add4:	10c00b17 	ldw	r3,44(r2)
   4add8:	e0bffa17 	ldw	r2,-24(fp)
   4addc:	18801626 	beq	r3,r2,4ae38 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   4ade0:	e0bffd17 	ldw	r2,-12(fp)
   4ade4:	10800037 	ldwio	r2,0(r2)
   4ade8:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   4adec:	e0bffb17 	ldw	r2,-20(fp)
   4adf0:	10a0000c 	andi	r2,r2,32768
   4adf4:	1005003a 	cmpeq	r2,r2,zero
   4adf8:	10000f1e 	bne	r2,zero,4ae38 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   4adfc:	e0bffe17 	ldw	r2,-8(fp)
   4ae00:	10c00a17 	ldw	r3,40(r2)
   4ae04:	e0bffb17 	ldw	r2,-20(fp)
   4ae08:	1009883a 	mov	r4,r2
   4ae0c:	e0bffe17 	ldw	r2,-8(fp)
   4ae10:	1885883a 	add	r2,r3,r2
   4ae14:	10800e04 	addi	r2,r2,56
   4ae18:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4ae1c:	e0bffe17 	ldw	r2,-8(fp)
   4ae20:	10800a17 	ldw	r2,40(r2)
   4ae24:	10800044 	addi	r2,r2,1
   4ae28:	10c1ffcc 	andi	r3,r2,2047
   4ae2c:	e0bffe17 	ldw	r2,-8(fp)
   4ae30:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   4ae34:	003fe106 	br	4adbc <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   4ae38:	e0bffb17 	ldw	r2,-20(fp)
   4ae3c:	10bfffec 	andhi	r2,r2,65535
   4ae40:	1005003a 	cmpeq	r2,r2,zero
   4ae44:	1000101e 	bne	r2,zero,4ae88 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   4ae48:	e0bffe17 	ldw	r2,-8(fp)
   4ae4c:	10c00817 	ldw	r3,32(r2)
   4ae50:	00bfff84 	movi	r2,-2
   4ae54:	1886703a 	and	r3,r3,r2
   4ae58:	e0bffe17 	ldw	r2,-8(fp)
   4ae5c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   4ae60:	e0bffd17 	ldw	r2,-12(fp)
   4ae64:	11000104 	addi	r4,r2,4
   4ae68:	e0bffe17 	ldw	r2,-8(fp)
   4ae6c:	10800817 	ldw	r2,32(r2)
   4ae70:	1007883a 	mov	r3,r2
   4ae74:	2005883a 	mov	r2,r4
   4ae78:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   4ae7c:	e0bffd17 	ldw	r2,-12(fp)
   4ae80:	10800104 	addi	r2,r2,4
   4ae84:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   4ae88:	e0bffc17 	ldw	r2,-16(fp)
   4ae8c:	1080800c 	andi	r2,r2,512
   4ae90:	1005003a 	cmpeq	r2,r2,zero
   4ae94:	103fbb1e 	bne	r2,zero,4ad84 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   4ae98:	e0bffc17 	ldw	r2,-16(fp)
   4ae9c:	10bfffec 	andhi	r2,r2,65535
   4aea0:	1004d43a 	srli	r2,r2,16
   4aea4:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   4aea8:	00001506 	br	4af00 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   4aeac:	e13ffd17 	ldw	r4,-12(fp)
   4aeb0:	e0bffe17 	ldw	r2,-8(fp)
   4aeb4:	10c00d17 	ldw	r3,52(r2)
   4aeb8:	e0bffe17 	ldw	r2,-8(fp)
   4aebc:	1885883a 	add	r2,r3,r2
   4aec0:	10820e04 	addi	r2,r2,2104
   4aec4:	10800003 	ldbu	r2,0(r2)
   4aec8:	10c03fcc 	andi	r3,r2,255
   4aecc:	18c0201c 	xori	r3,r3,128
   4aed0:	18ffe004 	addi	r3,r3,-128
   4aed4:	2005883a 	mov	r2,r4
   4aed8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4aedc:	e0bffe17 	ldw	r2,-8(fp)
   4aee0:	10800d17 	ldw	r2,52(r2)
   4aee4:	10800044 	addi	r2,r2,1
   4aee8:	10c1ffcc 	andi	r3,r2,2047
   4aeec:	e0bffe17 	ldw	r2,-8(fp)
   4aef0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   4aef4:	e0bff917 	ldw	r2,-28(fp)
   4aef8:	10bfffc4 	addi	r2,r2,-1
   4aefc:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   4af00:	e0bff917 	ldw	r2,-28(fp)
   4af04:	1005003a 	cmpeq	r2,r2,zero
   4af08:	1000051e 	bne	r2,zero,4af20 <altera_avalon_jtag_uart_irq+0x1c4>
   4af0c:	e0bffe17 	ldw	r2,-8(fp)
   4af10:	10c00d17 	ldw	r3,52(r2)
   4af14:	e0bffe17 	ldw	r2,-8(fp)
   4af18:	10800c17 	ldw	r2,48(r2)
   4af1c:	18bfe31e 	bne	r3,r2,4aeac <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   4af20:	e0bff917 	ldw	r2,-28(fp)
   4af24:	1005003a 	cmpeq	r2,r2,zero
   4af28:	103f961e 	bne	r2,zero,4ad84 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   4af2c:	e0bffe17 	ldw	r2,-8(fp)
   4af30:	10c00817 	ldw	r3,32(r2)
   4af34:	00bfff44 	movi	r2,-3
   4af38:	1886703a 	and	r3,r3,r2
   4af3c:	e0bffe17 	ldw	r2,-8(fp)
   4af40:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   4af44:	e0bffe17 	ldw	r2,-8(fp)
   4af48:	10800017 	ldw	r2,0(r2)
   4af4c:	11000104 	addi	r4,r2,4
   4af50:	e0bffe17 	ldw	r2,-8(fp)
   4af54:	10800817 	ldw	r2,32(r2)
   4af58:	1007883a 	mov	r3,r2
   4af5c:	2005883a 	mov	r2,r4
   4af60:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   4af64:	e0bffd17 	ldw	r2,-12(fp)
   4af68:	10800104 	addi	r2,r2,4
   4af6c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   4af70:	003f8406 	br	4ad84 <altera_avalon_jtag_uart_irq+0x28>
}
   4af74:	e037883a 	mov	sp,fp
   4af78:	df000017 	ldw	fp,0(sp)
   4af7c:	dec00104 	addi	sp,sp,4
   4af80:	f800283a 	ret

0004af84 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   4af84:	defffc04 	addi	sp,sp,-16
   4af88:	df000315 	stw	fp,12(sp)
   4af8c:	df000304 	addi	fp,sp,12
   4af90:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   4af94:	e0bfff17 	ldw	r2,-4(fp)
   4af98:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   4af9c:	e0bffe17 	ldw	r2,-8(fp)
   4afa0:	10800017 	ldw	r2,0(r2)
   4afa4:	10800104 	addi	r2,r2,4
   4afa8:	10800037 	ldwio	r2,0(r2)
   4afac:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   4afb0:	e0bffd17 	ldw	r2,-12(fp)
   4afb4:	1081000c 	andi	r2,r2,1024
   4afb8:	1005003a 	cmpeq	r2,r2,zero
   4afbc:	10000c1e 	bne	r2,zero,4aff0 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   4afc0:	e0bffe17 	ldw	r2,-8(fp)
   4afc4:	10800017 	ldw	r2,0(r2)
   4afc8:	11000104 	addi	r4,r2,4
   4afcc:	e0bffe17 	ldw	r2,-8(fp)
   4afd0:	10800817 	ldw	r2,32(r2)
   4afd4:	10810014 	ori	r2,r2,1024
   4afd8:	1007883a 	mov	r3,r2
   4afdc:	2005883a 	mov	r2,r4
   4afe0:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
   4afe4:	e0bffe17 	ldw	r2,-8(fp)
   4afe8:	10000915 	stw	zero,36(r2)
   4afec:	00000a06 	br	4b018 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   4aff0:	e0bffe17 	ldw	r2,-8(fp)
   4aff4:	10c00917 	ldw	r3,36(r2)
   4aff8:	00a00034 	movhi	r2,32768
   4affc:	10bfff04 	addi	r2,r2,-4
   4b000:	10c00536 	bltu	r2,r3,4b018 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
   4b004:	e0bffe17 	ldw	r2,-8(fp)
   4b008:	10800917 	ldw	r2,36(r2)
   4b00c:	10c00044 	addi	r3,r2,1
   4b010:	e0bffe17 	ldw	r2,-8(fp)
   4b014:	10c00915 	stw	r3,36(r2)
   4b018:	00900034 	movhi	r2,16384
   4b01c:	10878704 	addi	r2,r2,7708
   4b020:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   4b024:	e037883a 	mov	sp,fp
   4b028:	df000017 	ldw	fp,0(sp)
   4b02c:	dec00104 	addi	sp,sp,4
   4b030:	f800283a 	ret

0004b034 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   4b034:	defffc04 	addi	sp,sp,-16
   4b038:	df000315 	stw	fp,12(sp)
   4b03c:	df000304 	addi	fp,sp,12
   4b040:	e13ffd15 	stw	r4,-12(fp)
   4b044:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   4b048:	00000706 	br	4b068 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
   4b04c:	e0bffe17 	ldw	r2,-8(fp)
   4b050:	1090000c 	andi	r2,r2,16384
   4b054:	1005003a 	cmpeq	r2,r2,zero
   4b058:	1000031e 	bne	r2,zero,4b068 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
   4b05c:	00bffd44 	movi	r2,-11
   4b060:	e0bfff15 	stw	r2,-4(fp)
   4b064:	00000b06 	br	4b094 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   4b068:	e0bffd17 	ldw	r2,-12(fp)
   4b06c:	10c00d17 	ldw	r3,52(r2)
   4b070:	e0bffd17 	ldw	r2,-12(fp)
   4b074:	10800c17 	ldw	r2,48(r2)
   4b078:	18800526 	beq	r3,r2,4b090 <altera_avalon_jtag_uart_close+0x5c>
   4b07c:	e0bffd17 	ldw	r2,-12(fp)
   4b080:	10c00917 	ldw	r3,36(r2)
   4b084:	e0bffd17 	ldw	r2,-12(fp)
   4b088:	10800117 	ldw	r2,4(r2)
   4b08c:	18bfef36 	bltu	r3,r2,4b04c <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   4b090:	e03fff15 	stw	zero,-4(fp)
   4b094:	e0bfff17 	ldw	r2,-4(fp)
}
   4b098:	e037883a 	mov	sp,fp
   4b09c:	df000017 	ldw	fp,0(sp)
   4b0a0:	dec00104 	addi	sp,sp,4
   4b0a4:	f800283a 	ret

0004b0a8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   4b0a8:	defff804 	addi	sp,sp,-32
   4b0ac:	df000715 	stw	fp,28(sp)
   4b0b0:	df000704 	addi	fp,sp,28
   4b0b4:	e13ffb15 	stw	r4,-20(fp)
   4b0b8:	e17ffc15 	stw	r5,-16(fp)
   4b0bc:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
   4b0c0:	00bff9c4 	movi	r2,-25
   4b0c4:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
   4b0c8:	e0bffc17 	ldw	r2,-16(fp)
   4b0cc:	e0bfff15 	stw	r2,-4(fp)
   4b0d0:	e0ffff17 	ldw	r3,-4(fp)
   4b0d4:	189a8060 	cmpeqi	r2,r3,27137
   4b0d8:	1000041e 	bne	r2,zero,4b0ec <altera_avalon_jtag_uart_ioctl+0x44>
   4b0dc:	e0ffff17 	ldw	r3,-4(fp)
   4b0e0:	189a80a0 	cmpeqi	r2,r3,27138
   4b0e4:	10001b1e 	bne	r2,zero,4b154 <altera_avalon_jtag_uart_ioctl+0xac>
   4b0e8:	00002706 	br	4b188 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   4b0ec:	e0bffb17 	ldw	r2,-20(fp)
   4b0f0:	10c00117 	ldw	r3,4(r2)
   4b0f4:	00a00034 	movhi	r2,32768
   4b0f8:	10bfffc4 	addi	r2,r2,-1
   4b0fc:	18802226 	beq	r3,r2,4b188 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
   4b100:	e0bffd17 	ldw	r2,-12(fp)
   4b104:	10800017 	ldw	r2,0(r2)
   4b108:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   4b10c:	e0bff917 	ldw	r2,-28(fp)
   4b110:	10800090 	cmplti	r2,r2,2
   4b114:	1000071e 	bne	r2,zero,4b134 <altera_avalon_jtag_uart_ioctl+0x8c>
   4b118:	e0fff917 	ldw	r3,-28(fp)
   4b11c:	00a00034 	movhi	r2,32768
   4b120:	10bfffc4 	addi	r2,r2,-1
   4b124:	18800326 	beq	r3,r2,4b134 <altera_avalon_jtag_uart_ioctl+0x8c>
   4b128:	e0bff917 	ldw	r2,-28(fp)
   4b12c:	e0bffe15 	stw	r2,-8(fp)
   4b130:	00000306 	br	4b140 <altera_avalon_jtag_uart_ioctl+0x98>
   4b134:	00e00034 	movhi	r3,32768
   4b138:	18ffff84 	addi	r3,r3,-2
   4b13c:	e0fffe15 	stw	r3,-8(fp)
   4b140:	e0bffb17 	ldw	r2,-20(fp)
   4b144:	e0fffe17 	ldw	r3,-8(fp)
   4b148:	10c00115 	stw	r3,4(r2)
      rc = 0;
   4b14c:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
   4b150:	00000d06 	br	4b188 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   4b154:	e0bffb17 	ldw	r2,-20(fp)
   4b158:	10c00117 	ldw	r3,4(r2)
   4b15c:	00a00034 	movhi	r2,32768
   4b160:	10bfffc4 	addi	r2,r2,-1
   4b164:	18800826 	beq	r3,r2,4b188 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   4b168:	e13ffd17 	ldw	r4,-12(fp)
   4b16c:	e0bffb17 	ldw	r2,-20(fp)
   4b170:	10c00917 	ldw	r3,36(r2)
   4b174:	e0bffb17 	ldw	r2,-20(fp)
   4b178:	10800117 	ldw	r2,4(r2)
   4b17c:	1885803a 	cmpltu	r2,r3,r2
   4b180:	20800015 	stw	r2,0(r4)
      rc = 0;
   4b184:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
   4b188:	e0bffa17 	ldw	r2,-24(fp)
}
   4b18c:	e037883a 	mov	sp,fp
   4b190:	df000017 	ldw	fp,0(sp)
   4b194:	dec00104 	addi	sp,sp,4
   4b198:	f800283a 	ret

0004b19c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   4b19c:	defff204 	addi	sp,sp,-56
   4b1a0:	dfc00d15 	stw	ra,52(sp)
   4b1a4:	df000c15 	stw	fp,48(sp)
   4b1a8:	df000c04 	addi	fp,sp,48
   4b1ac:	e13ffb15 	stw	r4,-20(fp)
   4b1b0:	e17ffc15 	stw	r5,-16(fp)
   4b1b4:	e1bffd15 	stw	r6,-12(fp)
   4b1b8:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
   4b1bc:	e0bffc17 	ldw	r2,-16(fp)
   4b1c0:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   4b1c4:	00004806 	br	4b2e8 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   4b1c8:	e0bffb17 	ldw	r2,-20(fp)
   4b1cc:	10800a17 	ldw	r2,40(r2)
   4b1d0:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   4b1d4:	e0bffb17 	ldw	r2,-20(fp)
   4b1d8:	10800b17 	ldw	r2,44(r2)
   4b1dc:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
   4b1e0:	e0fff717 	ldw	r3,-36(fp)
   4b1e4:	e0bff617 	ldw	r2,-40(fp)
   4b1e8:	18800536 	bltu	r3,r2,4b200 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   4b1ec:	e0bff717 	ldw	r2,-36(fp)
   4b1f0:	e0fff617 	ldw	r3,-40(fp)
   4b1f4:	10c5c83a 	sub	r2,r2,r3
   4b1f8:	e0bff815 	stw	r2,-32(fp)
   4b1fc:	00000406 	br	4b210 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   4b200:	00820004 	movi	r2,2048
   4b204:	e0fff617 	ldw	r3,-40(fp)
   4b208:	10c5c83a 	sub	r2,r2,r3
   4b20c:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
   4b210:	e0bff817 	ldw	r2,-32(fp)
   4b214:	1005003a 	cmpeq	r2,r2,zero
   4b218:	10001f1e 	bne	r2,zero,4b298 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
   4b21c:	e0fffd17 	ldw	r3,-12(fp)
   4b220:	e0bff817 	ldw	r2,-32(fp)
   4b224:	1880022e 	bgeu	r3,r2,4b230 <altera_avalon_jtag_uart_read+0x94>
        n = space;
   4b228:	e0bffd17 	ldw	r2,-12(fp)
   4b22c:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   4b230:	e0bffb17 	ldw	r2,-20(fp)
   4b234:	10c00e04 	addi	r3,r2,56
   4b238:	e0bff617 	ldw	r2,-40(fp)
   4b23c:	1887883a 	add	r3,r3,r2
   4b240:	e0bffa17 	ldw	r2,-24(fp)
   4b244:	1009883a 	mov	r4,r2
   4b248:	180b883a 	mov	r5,r3
   4b24c:	e1bff817 	ldw	r6,-32(fp)
   4b250:	0045c780 	call	45c78 <memcpy>
      ptr   += n;
   4b254:	e0fff817 	ldw	r3,-32(fp)
   4b258:	e0bffa17 	ldw	r2,-24(fp)
   4b25c:	10c5883a 	add	r2,r2,r3
   4b260:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
   4b264:	e0fffd17 	ldw	r3,-12(fp)
   4b268:	e0bff817 	ldw	r2,-32(fp)
   4b26c:	1885c83a 	sub	r2,r3,r2
   4b270:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4b274:	e0fff617 	ldw	r3,-40(fp)
   4b278:	e0bff817 	ldw	r2,-32(fp)
   4b27c:	1885883a 	add	r2,r3,r2
   4b280:	10c1ffcc 	andi	r3,r2,2047
   4b284:	e0bffb17 	ldw	r2,-20(fp)
   4b288:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   4b28c:	e0bffd17 	ldw	r2,-12(fp)
   4b290:	10800048 	cmpgei	r2,r2,1
   4b294:	103fcc1e 	bne	r2,zero,4b1c8 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
   4b298:	e0fffa17 	ldw	r3,-24(fp)
   4b29c:	e0bffc17 	ldw	r2,-16(fp)
   4b2a0:	1880141e 	bne	r3,r2,4b2f4 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   4b2a4:	e0bffe17 	ldw	r2,-8(fp)
   4b2a8:	1090000c 	andi	r2,r2,16384
   4b2ac:	1004c03a 	cmpne	r2,r2,zero
   4b2b0:	1000101e 	bne	r2,zero,4b2f4 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   4b2b4:	e0bffb17 	ldw	r2,-20(fp)
   4b2b8:	10c00a17 	ldw	r3,40(r2)
   4b2bc:	e0bff717 	ldw	r2,-36(fp)
   4b2c0:	1880051e 	bne	r3,r2,4b2d8 <altera_avalon_jtag_uart_read+0x13c>
   4b2c4:	e0bffb17 	ldw	r2,-20(fp)
   4b2c8:	10c00917 	ldw	r3,36(r2)
   4b2cc:	e0bffb17 	ldw	r2,-20(fp)
   4b2d0:	10800117 	ldw	r2,4(r2)
   4b2d4:	18bff736 	bltu	r3,r2,4b2b4 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   4b2d8:	e0bffb17 	ldw	r2,-20(fp)
   4b2dc:	10c00a17 	ldw	r3,40(r2)
   4b2e0:	e0bff717 	ldw	r2,-36(fp)
   4b2e4:	18800326 	beq	r3,r2,4b2f4 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   4b2e8:	e0bffd17 	ldw	r2,-12(fp)
   4b2ec:	10800048 	cmpgei	r2,r2,1
   4b2f0:	103fb51e 	bne	r2,zero,4b1c8 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   4b2f4:	e0fffa17 	ldw	r3,-24(fp)
   4b2f8:	e0bffc17 	ldw	r2,-16(fp)
   4b2fc:	18801926 	beq	r3,r2,4b364 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4b300:	0005303a 	rdctl	r2,status
   4b304:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4b308:	e0fff517 	ldw	r3,-44(fp)
   4b30c:	00bfff84 	movi	r2,-2
   4b310:	1884703a 	and	r2,r3,r2
   4b314:	1001703a 	wrctl	status,r2
  
  return context;
   4b318:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   4b31c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   4b320:	e0bffb17 	ldw	r2,-20(fp)
   4b324:	10800817 	ldw	r2,32(r2)
   4b328:	10c00054 	ori	r3,r2,1
   4b32c:	e0bffb17 	ldw	r2,-20(fp)
   4b330:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   4b334:	e0bffb17 	ldw	r2,-20(fp)
   4b338:	10800017 	ldw	r2,0(r2)
   4b33c:	11000104 	addi	r4,r2,4
   4b340:	e0bffb17 	ldw	r2,-20(fp)
   4b344:	10800817 	ldw	r2,32(r2)
   4b348:	1007883a 	mov	r3,r2
   4b34c:	2005883a 	mov	r2,r4
   4b350:	10c00035 	stwio	r3,0(r2)
   4b354:	e0bff917 	ldw	r2,-28(fp)
   4b358:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4b35c:	e0bff417 	ldw	r2,-48(fp)
   4b360:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   4b364:	e0fffa17 	ldw	r3,-24(fp)
   4b368:	e0bffc17 	ldw	r2,-16(fp)
   4b36c:	18800526 	beq	r3,r2,4b384 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
   4b370:	e0fffa17 	ldw	r3,-24(fp)
   4b374:	e0bffc17 	ldw	r2,-16(fp)
   4b378:	1887c83a 	sub	r3,r3,r2
   4b37c:	e0ffff15 	stw	r3,-4(fp)
   4b380:	00000906 	br	4b3a8 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
   4b384:	e0bffe17 	ldw	r2,-8(fp)
   4b388:	1090000c 	andi	r2,r2,16384
   4b38c:	1005003a 	cmpeq	r2,r2,zero
   4b390:	1000031e 	bne	r2,zero,4b3a0 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   4b394:	00bffd44 	movi	r2,-11
   4b398:	e0bfff15 	stw	r2,-4(fp)
   4b39c:	00000206 	br	4b3a8 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
   4b3a0:	00bffec4 	movi	r2,-5
   4b3a4:	e0bfff15 	stw	r2,-4(fp)
   4b3a8:	e0bfff17 	ldw	r2,-4(fp)
}
   4b3ac:	e037883a 	mov	sp,fp
   4b3b0:	dfc00117 	ldw	ra,4(sp)
   4b3b4:	df000017 	ldw	fp,0(sp)
   4b3b8:	dec00204 	addi	sp,sp,8
   4b3bc:	f800283a 	ret

0004b3c0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   4b3c0:	defff204 	addi	sp,sp,-56
   4b3c4:	dfc00d15 	stw	ra,52(sp)
   4b3c8:	df000c15 	stw	fp,48(sp)
   4b3cc:	df000c04 	addi	fp,sp,48
   4b3d0:	e13ffb15 	stw	r4,-20(fp)
   4b3d4:	e17ffc15 	stw	r5,-16(fp)
   4b3d8:	e1bffd15 	stw	r6,-12(fp)
   4b3dc:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   4b3e0:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   4b3e4:	e0bffc17 	ldw	r2,-16(fp)
   4b3e8:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   4b3ec:	00003a06 	br	4b4d8 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   4b3f0:	e0bffb17 	ldw	r2,-20(fp)
   4b3f4:	10800c17 	ldw	r2,48(r2)
   4b3f8:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
   4b3fc:	e0bffb17 	ldw	r2,-20(fp)
   4b400:	10800d17 	ldw	r2,52(r2)
   4b404:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
   4b408:	e0fffa17 	ldw	r3,-24(fp)
   4b40c:	e0bff917 	ldw	r2,-28(fp)
   4b410:	1880062e 	bgeu	r3,r2,4b42c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   4b414:	e0fff917 	ldw	r3,-28(fp)
   4b418:	e0bffa17 	ldw	r2,-24(fp)
   4b41c:	1885c83a 	sub	r2,r3,r2
   4b420:	10bfffc4 	addi	r2,r2,-1
   4b424:	e0bff815 	stw	r2,-32(fp)
   4b428:	00000c06 	br	4b45c <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
   4b42c:	e0bff917 	ldw	r2,-28(fp)
   4b430:	1005003a 	cmpeq	r2,r2,zero
   4b434:	1000051e 	bne	r2,zero,4b44c <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   4b438:	00820004 	movi	r2,2048
   4b43c:	e0fffa17 	ldw	r3,-24(fp)
   4b440:	10c5c83a 	sub	r2,r2,r3
   4b444:	e0bff815 	stw	r2,-32(fp)
   4b448:	00000406 	br	4b45c <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   4b44c:	0081ffc4 	movi	r2,2047
   4b450:	e0fffa17 	ldw	r3,-24(fp)
   4b454:	10c5c83a 	sub	r2,r2,r3
   4b458:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
   4b45c:	e0bff817 	ldw	r2,-32(fp)
   4b460:	1005003a 	cmpeq	r2,r2,zero
   4b464:	10001f1e 	bne	r2,zero,4b4e4 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
   4b468:	e0fffd17 	ldw	r3,-12(fp)
   4b46c:	e0bff817 	ldw	r2,-32(fp)
   4b470:	1880022e 	bgeu	r3,r2,4b47c <altera_avalon_jtag_uart_write+0xbc>
        n = count;
   4b474:	e0bffd17 	ldw	r2,-12(fp)
   4b478:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   4b47c:	e0bffb17 	ldw	r2,-20(fp)
   4b480:	10c20e04 	addi	r3,r2,2104
   4b484:	e0bffa17 	ldw	r2,-24(fp)
   4b488:	1885883a 	add	r2,r3,r2
   4b48c:	e0fffc17 	ldw	r3,-16(fp)
   4b490:	1009883a 	mov	r4,r2
   4b494:	180b883a 	mov	r5,r3
   4b498:	e1bff817 	ldw	r6,-32(fp)
   4b49c:	0045c780 	call	45c78 <memcpy>
      ptr   += n;
   4b4a0:	e0fff817 	ldw	r3,-32(fp)
   4b4a4:	e0bffc17 	ldw	r2,-16(fp)
   4b4a8:	10c5883a 	add	r2,r2,r3
   4b4ac:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
   4b4b0:	e0fffd17 	ldw	r3,-12(fp)
   4b4b4:	e0bff817 	ldw	r2,-32(fp)
   4b4b8:	1885c83a 	sub	r2,r3,r2
   4b4bc:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4b4c0:	e0fffa17 	ldw	r3,-24(fp)
   4b4c4:	e0bff817 	ldw	r2,-32(fp)
   4b4c8:	1885883a 	add	r2,r3,r2
   4b4cc:	10c1ffcc 	andi	r3,r2,2047
   4b4d0:	e0bffb17 	ldw	r2,-20(fp)
   4b4d4:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   4b4d8:	e0bffd17 	ldw	r2,-12(fp)
   4b4dc:	10800048 	cmpgei	r2,r2,1
   4b4e0:	103fc31e 	bne	r2,zero,4b3f0 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4b4e4:	0005303a 	rdctl	r2,status
   4b4e8:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4b4ec:	e0fff517 	ldw	r3,-44(fp)
   4b4f0:	00bfff84 	movi	r2,-2
   4b4f4:	1884703a 	and	r2,r3,r2
   4b4f8:	1001703a 	wrctl	status,r2
  
  return context;
   4b4fc:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   4b500:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   4b504:	e0bffb17 	ldw	r2,-20(fp)
   4b508:	10800817 	ldw	r2,32(r2)
   4b50c:	10c00094 	ori	r3,r2,2
   4b510:	e0bffb17 	ldw	r2,-20(fp)
   4b514:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   4b518:	e0bffb17 	ldw	r2,-20(fp)
   4b51c:	10800017 	ldw	r2,0(r2)
   4b520:	11000104 	addi	r4,r2,4
   4b524:	e0bffb17 	ldw	r2,-20(fp)
   4b528:	10800817 	ldw	r2,32(r2)
   4b52c:	1007883a 	mov	r3,r2
   4b530:	2005883a 	mov	r2,r4
   4b534:	10c00035 	stwio	r3,0(r2)
   4b538:	e0bff717 	ldw	r2,-36(fp)
   4b53c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4b540:	e0bff417 	ldw	r2,-48(fp)
   4b544:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   4b548:	e0bffd17 	ldw	r2,-12(fp)
   4b54c:	10800050 	cmplti	r2,r2,1
   4b550:	1000111e 	bne	r2,zero,4b598 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
   4b554:	e0bffe17 	ldw	r2,-8(fp)
   4b558:	1090000c 	andi	r2,r2,16384
   4b55c:	1004c03a 	cmpne	r2,r2,zero
   4b560:	1000101e 	bne	r2,zero,4b5a4 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   4b564:	e0bffb17 	ldw	r2,-20(fp)
   4b568:	10c00d17 	ldw	r3,52(r2)
   4b56c:	e0bff917 	ldw	r2,-28(fp)
   4b570:	1880051e 	bne	r3,r2,4b588 <altera_avalon_jtag_uart_write+0x1c8>
   4b574:	e0bffb17 	ldw	r2,-20(fp)
   4b578:	10c00917 	ldw	r3,36(r2)
   4b57c:	e0bffb17 	ldw	r2,-20(fp)
   4b580:	10800117 	ldw	r2,4(r2)
   4b584:	18bff736 	bltu	r3,r2,4b564 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
   4b588:	e0bffb17 	ldw	r2,-20(fp)
   4b58c:	10c00d17 	ldw	r3,52(r2)
   4b590:	e0bff917 	ldw	r2,-28(fp)
   4b594:	18800326 	beq	r3,r2,4b5a4 <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
   4b598:	e0bffd17 	ldw	r2,-12(fp)
   4b59c:	10800048 	cmpgei	r2,r2,1
   4b5a0:	103fcd1e 	bne	r2,zero,4b4d8 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   4b5a4:	e0fffc17 	ldw	r3,-16(fp)
   4b5a8:	e0bff617 	ldw	r2,-40(fp)
   4b5ac:	18800526 	beq	r3,r2,4b5c4 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
   4b5b0:	e0fffc17 	ldw	r3,-16(fp)
   4b5b4:	e0bff617 	ldw	r2,-40(fp)
   4b5b8:	1887c83a 	sub	r3,r3,r2
   4b5bc:	e0ffff15 	stw	r3,-4(fp)
   4b5c0:	00000906 	br	4b5e8 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
   4b5c4:	e0bffe17 	ldw	r2,-8(fp)
   4b5c8:	1090000c 	andi	r2,r2,16384
   4b5cc:	1005003a 	cmpeq	r2,r2,zero
   4b5d0:	1000031e 	bne	r2,zero,4b5e0 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
   4b5d4:	00bffd44 	movi	r2,-11
   4b5d8:	e0bfff15 	stw	r2,-4(fp)
   4b5dc:	00000206 	br	4b5e8 <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
   4b5e0:	00bffec4 	movi	r2,-5
   4b5e4:	e0bfff15 	stw	r2,-4(fp)
   4b5e8:	e0bfff17 	ldw	r2,-4(fp)
}
   4b5ec:	e037883a 	mov	sp,fp
   4b5f0:	dfc00117 	ldw	ra,4(sp)
   4b5f4:	df000017 	ldw	fp,0(sp)
   4b5f8:	dec00204 	addi	sp,sp,8
   4b5fc:	f800283a 	ret

0004b600 <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
   4b600:	defff404 	addi	sp,sp,-48
   4b604:	df000b15 	stw	fp,44(sp)
   4b608:	df000b04 	addi	fp,sp,44
   4b60c:	e13ffc15 	stw	r4,-16(fp)
   4b610:	e17ffd15 	stw	r5,-12(fp)
   4b614:	e1bffe15 	stw	r6,-8(fp)
   4b618:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
   4b61c:	e0fffe17 	ldw	r3,-8(fp)
   4b620:	e0bfff17 	ldw	r2,-4(fp)
   4b624:	10c5883a 	add	r2,r2,r3
   4b628:	e0bffb15 	stw	r2,-20(fp)
  alt_u8 * read_end = read_data + read_length;
   4b62c:	e0c00117 	ldw	r3,4(fp)
   4b630:	e0800217 	ldw	r2,8(fp)
   4b634:	10c5883a 	add	r2,r2,r3
   4b638:	e0bffa15 	stw	r2,-24(fp)

  alt_u32 write_zeros = read_length;
   4b63c:	e0800117 	ldw	r2,4(fp)
   4b640:	e0bff915 	stw	r2,-28(fp)
  alt_u32 read_ignore = write_length;
   4b644:	e0bffe17 	ldw	r2,-8(fp)
   4b648:	e0bff815 	stw	r2,-32(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
   4b64c:	00800044 	movi	r2,1
   4b650:	e0bff615 	stw	r2,-40(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
   4b654:	e0bffc17 	ldw	r2,-16(fp)
   4b658:	11000504 	addi	r4,r2,20
   4b65c:	e0fffd17 	ldw	r3,-12(fp)
   4b660:	00800044 	movi	r2,1
   4b664:	10c6983a 	sll	r3,r2,r3
   4b668:	2005883a 	mov	r2,r4
   4b66c:	10c00035 	stwio	r3,0(r2)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
   4b670:	e0800317 	ldw	r2,12(fp)
   4b674:	1080008c 	andi	r2,r2,2
   4b678:	1004c03a 	cmpne	r2,r2,zero
   4b67c:	1000051e 	bne	r2,zero,4b694 <alt_avalon_spi_command+0x94>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
   4b680:	e0bffc17 	ldw	r2,-16(fp)
   4b684:	10800304 	addi	r2,r2,12
   4b688:	1007883a 	mov	r3,r2
   4b68c:	00810004 	movi	r2,1024
   4b690:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
   4b694:	e0bffc17 	ldw	r2,-16(fp)
   4b698:	10800037 	ldwio	r2,0(r2)
   4b69c:	00000006 	br	4b6a0 <alt_avalon_spi_command+0xa0>
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
   4b6a0:	e0bffc17 	ldw	r2,-16(fp)
   4b6a4:	10800204 	addi	r2,r2,8
   4b6a8:	10800037 	ldwio	r2,0(r2)
   4b6ac:	e0bff715 	stw	r2,-36(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
   4b6b0:	e0bff717 	ldw	r2,-36(fp)
   4b6b4:	1080100c 	andi	r2,r2,64
   4b6b8:	1005003a 	cmpeq	r2,r2,zero
   4b6bc:	1000031e 	bne	r2,zero,4b6cc <alt_avalon_spi_command+0xcc>
   4b6c0:	e0bff617 	ldw	r2,-40(fp)
   4b6c4:	1004c03a 	cmpne	r2,r2,zero
   4b6c8:	1000041e 	bne	r2,zero,4b6dc <alt_avalon_spi_command+0xdc>
   4b6cc:	e0bff717 	ldw	r2,-36(fp)
   4b6d0:	1080200c 	andi	r2,r2,128
   4b6d4:	1005003a 	cmpeq	r2,r2,zero
   4b6d8:	103ff11e 	bne	r2,zero,4b6a0 <alt_avalon_spi_command+0xa0>

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
   4b6dc:	e0bff717 	ldw	r2,-36(fp)
   4b6e0:	1080100c 	andi	r2,r2,64
   4b6e4:	1005003a 	cmpeq	r2,r2,zero
   4b6e8:	1000201e 	bne	r2,zero,4b76c <alt_avalon_spi_command+0x16c>
   4b6ec:	e0bff617 	ldw	r2,-40(fp)
   4b6f0:	10800050 	cmplti	r2,r2,1
   4b6f4:	10001d1e 	bne	r2,zero,4b76c <alt_avalon_spi_command+0x16c>
    {
      credits--;
   4b6f8:	e0bff617 	ldw	r2,-40(fp)
   4b6fc:	10bfffc4 	addi	r2,r2,-1
   4b700:	e0bff615 	stw	r2,-40(fp)

      if (write_data < write_end)
   4b704:	e0ffff17 	ldw	r3,-4(fp)
   4b708:	e0bffb17 	ldw	r2,-20(fp)
   4b70c:	18800b2e 	bgeu	r3,r2,4b73c <alt_avalon_spi_command+0x13c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
   4b710:	e0bffc17 	ldw	r2,-16(fp)
   4b714:	11000104 	addi	r4,r2,4
   4b718:	e0bfff17 	ldw	r2,-4(fp)
   4b71c:	10800003 	ldbu	r2,0(r2)
   4b720:	10c03fcc 	andi	r3,r2,255
   4b724:	e0bfff17 	ldw	r2,-4(fp)
   4b728:	10800044 	addi	r2,r2,1
   4b72c:	e0bfff15 	stw	r2,-4(fp)
   4b730:	2005883a 	mov	r2,r4
   4b734:	10c00035 	stwio	r3,0(r2)
   4b738:	00000c06 	br	4b76c <alt_avalon_spi_command+0x16c>
      else if (write_zeros > 0)
   4b73c:	e0bff917 	ldw	r2,-28(fp)
   4b740:	1005003a 	cmpeq	r2,r2,zero
   4b744:	1000071e 	bne	r2,zero,4b764 <alt_avalon_spi_command+0x164>
      {
        write_zeros--;
   4b748:	e0bff917 	ldw	r2,-28(fp)
   4b74c:	10bfffc4 	addi	r2,r2,-1
   4b750:	e0bff915 	stw	r2,-28(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
   4b754:	e0bffc17 	ldw	r2,-16(fp)
   4b758:	10800104 	addi	r2,r2,4
   4b75c:	10000035 	stwio	zero,0(r2)
   4b760:	00000206 	br	4b76c <alt_avalon_spi_command+0x16c>
      }
      else
        credits = -1024;
   4b764:	00bf0004 	movi	r2,-1024
   4b768:	e0bff615 	stw	r2,-40(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
   4b76c:	e0bff717 	ldw	r2,-36(fp)
   4b770:	1080200c 	andi	r2,r2,128
   4b774:	1005003a 	cmpeq	r2,r2,zero
   4b778:	103fc91e 	bne	r2,zero,4b6a0 <alt_avalon_spi_command+0xa0>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
   4b77c:	e0bffc17 	ldw	r2,-16(fp)
   4b780:	10800037 	ldwio	r2,0(r2)
   4b784:	e0bff515 	stw	r2,-44(fp)

      if (read_ignore > 0)
   4b788:	e0bff817 	ldw	r2,-32(fp)
   4b78c:	1005003a 	cmpeq	r2,r2,zero
   4b790:	1000041e 	bne	r2,zero,4b7a4 <alt_avalon_spi_command+0x1a4>
        read_ignore--;
   4b794:	e0bff817 	ldw	r2,-32(fp)
   4b798:	10bfffc4 	addi	r2,r2,-1
   4b79c:	e0bff815 	stw	r2,-32(fp)
   4b7a0:	00000706 	br	4b7c0 <alt_avalon_spi_command+0x1c0>
      else
        *read_data++ = (alt_u8)rxdata;
   4b7a4:	e0bff517 	ldw	r2,-44(fp)
   4b7a8:	1007883a 	mov	r3,r2
   4b7ac:	e0800217 	ldw	r2,8(fp)
   4b7b0:	10c00005 	stb	r3,0(r2)
   4b7b4:	e0800217 	ldw	r2,8(fp)
   4b7b8:	10800044 	addi	r2,r2,1
   4b7bc:	e0800215 	stw	r2,8(fp)
      credits++;
   4b7c0:	e0bff617 	ldw	r2,-40(fp)
   4b7c4:	10800044 	addi	r2,r2,1
   4b7c8:	e0bff615 	stw	r2,-40(fp)

      if (read_ignore == 0 && read_data == read_end)
   4b7cc:	e0bff817 	ldw	r2,-32(fp)
   4b7d0:	1004c03a 	cmpne	r2,r2,zero
   4b7d4:	103fb21e 	bne	r2,zero,4b6a0 <alt_avalon_spi_command+0xa0>
   4b7d8:	e0c00217 	ldw	r3,8(fp)
   4b7dc:	e0bffa17 	ldw	r2,-24(fp)
   4b7e0:	18800126 	beq	r3,r2,4b7e8 <alt_avalon_spi_command+0x1e8>
        break;
    }
    
  }
   4b7e4:	003fae06 	br	4b6a0 <alt_avalon_spi_command+0xa0>

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
   4b7e8:	e0bffc17 	ldw	r2,-16(fp)
   4b7ec:	10800204 	addi	r2,r2,8
   4b7f0:	10800037 	ldwio	r2,0(r2)
   4b7f4:	e0bff715 	stw	r2,-36(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
   4b7f8:	e0bff717 	ldw	r2,-36(fp)
   4b7fc:	1080080c 	andi	r2,r2,32
   4b800:	1005003a 	cmpeq	r2,r2,zero
   4b804:	103ff81e 	bne	r2,zero,4b7e8 <alt_avalon_spi_command+0x1e8>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
   4b808:	e0800317 	ldw	r2,12(fp)
   4b80c:	1080004c 	andi	r2,r2,1
   4b810:	1004c03a 	cmpne	r2,r2,zero
   4b814:	1000031e 	bne	r2,zero,4b824 <alt_avalon_spi_command+0x224>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
   4b818:	e0bffc17 	ldw	r2,-16(fp)
   4b81c:	10800304 	addi	r2,r2,12
   4b820:	10000035 	stwio	zero,0(r2)

  return read_length;
   4b824:	e0800117 	ldw	r2,4(fp)
}
   4b828:	e037883a 	mov	sp,fp
   4b82c:	df000017 	ldw	fp,0(sp)
   4b830:	dec00104 	addi	sp,sp,4
   4b834:	f800283a 	ret

0004b838 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   4b838:	defffa04 	addi	sp,sp,-24
   4b83c:	dfc00515 	stw	ra,20(sp)
   4b840:	df000415 	stw	fp,16(sp)
   4b844:	df000404 	addi	fp,sp,16
   4b848:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   4b84c:	e0bfff17 	ldw	r2,-4(fp)
   4b850:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   4b854:	e0bfff17 	ldw	r2,-4(fp)
   4b858:	10800104 	addi	r2,r2,4
   4b85c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4b860:	0005303a 	rdctl	r2,status
   4b864:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4b868:	e0fffd17 	ldw	r3,-12(fp)
   4b86c:	00bfff84 	movi	r2,-2
   4b870:	1884703a 	and	r2,r3,r2
   4b874:	1001703a 	wrctl	status,r2
  
  return context;
   4b878:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   4b87c:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
   4b880:	004c58c0 	call	4c58c <alt_tick>
   4b884:	e0bffe17 	ldw	r2,-8(fp)
   4b888:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4b88c:	e0bffc17 	ldw	r2,-16(fp)
   4b890:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   4b894:	e037883a 	mov	sp,fp
   4b898:	dfc00117 	ldw	ra,4(sp)
   4b89c:	df000017 	ldw	fp,0(sp)
   4b8a0:	dec00204 	addi	sp,sp,8
   4b8a4:	f800283a 	ret

0004b8a8 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   4b8a8:	defff804 	addi	sp,sp,-32
   4b8ac:	dfc00715 	stw	ra,28(sp)
   4b8b0:	df000615 	stw	fp,24(sp)
   4b8b4:	df000604 	addi	fp,sp,24
   4b8b8:	e13ffc15 	stw	r4,-16(fp)
   4b8bc:	e17ffd15 	stw	r5,-12(fp)
   4b8c0:	e1bffe15 	stw	r6,-8(fp)
   4b8c4:	e1ffff15 	stw	r7,-4(fp)
   4b8c8:	e0bfff17 	ldw	r2,-4(fp)
   4b8cc:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   4b8d0:	00900034 	movhi	r2,16384
   4b8d4:	10878704 	addi	r2,r2,7708
   4b8d8:	10800017 	ldw	r2,0(r2)
   4b8dc:	1004c03a 	cmpne	r2,r2,zero
   4b8e0:	1000041e 	bne	r2,zero,4b8f4 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
   4b8e4:	00d00034 	movhi	r3,16384
   4b8e8:	18c78704 	addi	r3,r3,7708
   4b8ec:	e0bffb17 	ldw	r2,-20(fp)
   4b8f0:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   4b8f4:	e0bffc17 	ldw	r2,-16(fp)
   4b8f8:	10800104 	addi	r2,r2,4
   4b8fc:	1007883a 	mov	r3,r2
   4b900:	008001c4 	movi	r2,7
   4b904:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   4b908:	d8000015 	stw	zero,0(sp)
   4b90c:	e13ffd17 	ldw	r4,-12(fp)
   4b910:	e17ffe17 	ldw	r5,-8(fp)
   4b914:	01800174 	movhi	r6,5
   4b918:	31ae0e04 	addi	r6,r6,-18376
   4b91c:	e1fffc17 	ldw	r7,-16(fp)
   4b920:	004be280 	call	4be28 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   4b924:	e037883a 	mov	sp,fp
   4b928:	dfc00117 	ldw	ra,4(sp)
   4b92c:	df000017 	ldw	fp,0(sp)
   4b930:	dec00204 	addi	sp,sp,8
   4b934:	f800283a 	ret

0004b938 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   4b938:	defff404 	addi	sp,sp,-48
   4b93c:	df000b15 	stw	fp,44(sp)
   4b940:	df000b04 	addi	fp,sp,44
   4b944:	e13ffb15 	stw	r4,-20(fp)
   4b948:	e17ffc15 	stw	r5,-16(fp)
   4b94c:	e1bffd15 	stw	r6,-12(fp)
   4b950:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   4b954:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   4b958:	00900034 	movhi	r2,16384
   4b95c:	10878704 	addi	r2,r2,7708
   4b960:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   4b964:	1005003a 	cmpeq	r2,r2,zero
   4b968:	1000411e 	bne	r2,zero,4ba70 <alt_alarm_start+0x138>
  {
    if (alarm)
   4b96c:	e0bffb17 	ldw	r2,-20(fp)
   4b970:	1005003a 	cmpeq	r2,r2,zero
   4b974:	10003b1e 	bne	r2,zero,4ba64 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
   4b978:	e0fffb17 	ldw	r3,-20(fp)
   4b97c:	e0bffd17 	ldw	r2,-12(fp)
   4b980:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
   4b984:	e0fffb17 	ldw	r3,-20(fp)
   4b988:	e0bffe17 	ldw	r2,-8(fp)
   4b98c:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4b990:	0005303a 	rdctl	r2,status
   4b994:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4b998:	e0fff817 	ldw	r3,-32(fp)
   4b99c:	00bfff84 	movi	r2,-2
   4b9a0:	1884703a 	and	r2,r3,r2
   4b9a4:	1001703a 	wrctl	status,r2
  
  return context;
   4b9a8:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   4b9ac:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   4b9b0:	00900034 	movhi	r2,16384
   4b9b4:	10878804 	addi	r2,r2,7712
   4b9b8:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   4b9bc:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   4b9c0:	e0fffc17 	ldw	r3,-16(fp)
   4b9c4:	e0bff917 	ldw	r2,-28(fp)
   4b9c8:	1885883a 	add	r2,r3,r2
   4b9cc:	10c00044 	addi	r3,r2,1
   4b9d0:	e0bffb17 	ldw	r2,-20(fp)
   4b9d4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   4b9d8:	e0bffb17 	ldw	r2,-20(fp)
   4b9dc:	10c00217 	ldw	r3,8(r2)
   4b9e0:	e0bff917 	ldw	r2,-28(fp)
   4b9e4:	1880042e 	bgeu	r3,r2,4b9f8 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
   4b9e8:	e0fffb17 	ldw	r3,-20(fp)
   4b9ec:	00800044 	movi	r2,1
   4b9f0:	18800405 	stb	r2,16(r3)
   4b9f4:	00000206 	br	4ba00 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
   4b9f8:	e0bffb17 	ldw	r2,-20(fp)
   4b9fc:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   4ba00:	e0fffb17 	ldw	r3,-20(fp)
   4ba04:	00900034 	movhi	r2,16384
   4ba08:	10877a04 	addi	r2,r2,7656
   4ba0c:	e0bff615 	stw	r2,-40(fp)
   4ba10:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   4ba14:	e0fff717 	ldw	r3,-36(fp)
   4ba18:	e0bff617 	ldw	r2,-40(fp)
   4ba1c:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   4ba20:	e0bff617 	ldw	r2,-40(fp)
   4ba24:	10c00017 	ldw	r3,0(r2)
   4ba28:	e0bff717 	ldw	r2,-36(fp)
   4ba2c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   4ba30:	e0bff617 	ldw	r2,-40(fp)
   4ba34:	10c00017 	ldw	r3,0(r2)
   4ba38:	e0bff717 	ldw	r2,-36(fp)
   4ba3c:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   4ba40:	e0fff617 	ldw	r3,-40(fp)
   4ba44:	e0bff717 	ldw	r2,-36(fp)
   4ba48:	18800015 	stw	r2,0(r3)
   4ba4c:	e0bffa17 	ldw	r2,-24(fp)
   4ba50:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4ba54:	e0bff517 	ldw	r2,-44(fp)
   4ba58:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   4ba5c:	e03fff15 	stw	zero,-4(fp)
   4ba60:	00000506 	br	4ba78 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
   4ba64:	00bffa84 	movi	r2,-22
   4ba68:	e0bfff15 	stw	r2,-4(fp)
   4ba6c:	00000206 	br	4ba78 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
   4ba70:	00bfde84 	movi	r2,-134
   4ba74:	e0bfff15 	stw	r2,-4(fp)
   4ba78:	e0bfff17 	ldw	r2,-4(fp)
  }
}
   4ba7c:	e037883a 	mov	sp,fp
   4ba80:	df000017 	ldw	fp,0(sp)
   4ba84:	dec00104 	addi	sp,sp,4
   4ba88:	f800283a 	ret

0004ba8c <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   4ba8c:	defffa04 	addi	sp,sp,-24
   4ba90:	dfc00515 	stw	ra,20(sp)
   4ba94:	df000415 	stw	fp,16(sp)
   4ba98:	df000404 	addi	fp,sp,16
   4ba9c:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
   4baa0:	008000c4 	movi	r2,3
   4baa4:	e0bffc15 	stw	r2,-16(fp)
  }
  

  big_loops = us / (INT_MAX/
   4baa8:	e0fffc17 	ldw	r3,-16(fp)
   4baac:	008003f4 	movhi	r2,15
   4bab0:	10909004 	addi	r2,r2,16960
   4bab4:	188b383a 	mul	r5,r3,r2
   4bab8:	0102fb34 	movhi	r4,3052
   4babc:	21308004 	addi	r4,r4,-15872
   4bac0:	00499d80 	call	499d8 <__udivsi3>
   4bac4:	100b883a 	mov	r5,r2
   4bac8:	01200034 	movhi	r4,32768
   4bacc:	213fffc4 	addi	r4,r4,-1
   4bad0:	00499d80 	call	499d8 <__udivsi3>
   4bad4:	100b883a 	mov	r5,r2
   4bad8:	e13fff17 	ldw	r4,-4(fp)
   4badc:	00499d80 	call	499d8 <__udivsi3>
   4bae0:	e0bffd15 	stw	r2,-12(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   4bae4:	e0bffd17 	ldw	r2,-12(fp)
   4bae8:	1005003a 	cmpeq	r2,r2,zero
   4baec:	1000281e 	bne	r2,zero,4bb90 <alt_busy_sleep+0x104>
  {
    for(i=0;i<big_loops;i++)
   4baf0:	e03ffe15 	stw	zero,-8(fp)
   4baf4:	00001606 	br	4bb50 <alt_busy_sleep+0xc4>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   4baf8:	00a00034 	movhi	r2,32768
   4bafc:	10bfffc4 	addi	r2,r2,-1
   4bb00:	10bfffc4 	addi	r2,r2,-1
   4bb04:	103ffe1e 	bne	r2,zero,4bb00 <alt_busy_sleep+0x74>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   4bb08:	e0fffc17 	ldw	r3,-16(fp)
   4bb0c:	008003f4 	movhi	r2,15
   4bb10:	10909004 	addi	r2,r2,16960
   4bb14:	188b383a 	mul	r5,r3,r2
   4bb18:	0102fb34 	movhi	r4,3052
   4bb1c:	21308004 	addi	r4,r4,-15872
   4bb20:	00499d80 	call	499d8 <__udivsi3>
   4bb24:	100b883a 	mov	r5,r2
   4bb28:	01200034 	movhi	r4,32768
   4bb2c:	213fffc4 	addi	r4,r4,-1
   4bb30:	00499d80 	call	499d8 <__udivsi3>
   4bb34:	1007883a 	mov	r3,r2
   4bb38:	e0bfff17 	ldw	r2,-4(fp)
   4bb3c:	10c5c83a 	sub	r2,r2,r3
   4bb40:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   4bb44:	e0bffe17 	ldw	r2,-8(fp)
   4bb48:	10800044 	addi	r2,r2,1
   4bb4c:	e0bffe15 	stw	r2,-8(fp)
   4bb50:	e0fffe17 	ldw	r3,-8(fp)
   4bb54:	e0bffd17 	ldw	r2,-12(fp)
   4bb58:	18bfe716 	blt	r3,r2,4baf8 <alt_busy_sleep+0x6c>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   4bb5c:	e0fffc17 	ldw	r3,-16(fp)
   4bb60:	008003f4 	movhi	r2,15
   4bb64:	10909004 	addi	r2,r2,16960
   4bb68:	188b383a 	mul	r5,r3,r2
   4bb6c:	0102fb34 	movhi	r4,3052
   4bb70:	21308004 	addi	r4,r4,-15872
   4bb74:	00499d80 	call	499d8 <__udivsi3>
   4bb78:	1007883a 	mov	r3,r2
   4bb7c:	e0bfff17 	ldw	r2,-4(fp)
   4bb80:	1885383a 	mul	r2,r3,r2
   4bb84:	10bfffc4 	addi	r2,r2,-1
   4bb88:	103ffe1e 	bne	r2,zero,4bb84 <alt_busy_sleep+0xf8>
   4bb8c:	00000c06 	br	4bbc0 <alt_busy_sleep+0x134>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   4bb90:	e0fffc17 	ldw	r3,-16(fp)
   4bb94:	008003f4 	movhi	r2,15
   4bb98:	10909004 	addi	r2,r2,16960
   4bb9c:	188b383a 	mul	r5,r3,r2
   4bba0:	0102fb34 	movhi	r4,3052
   4bba4:	21308004 	addi	r4,r4,-15872
   4bba8:	00499d80 	call	499d8 <__udivsi3>
   4bbac:	1007883a 	mov	r3,r2
   4bbb0:	e0bfff17 	ldw	r2,-4(fp)
   4bbb4:	1885383a 	mul	r2,r3,r2
   4bbb8:	10bfffc4 	addi	r2,r2,-1
   4bbbc:	00bffe16 	blt	zero,r2,4bbb8 <alt_busy_sleep+0x12c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   4bbc0:	0005883a 	mov	r2,zero
}
   4bbc4:	e037883a 	mov	sp,fp
   4bbc8:	dfc00117 	ldw	ra,4(sp)
   4bbcc:	df000017 	ldw	fp,0(sp)
   4bbd0:	dec00204 	addi	sp,sp,8
   4bbd4:	f800283a 	ret

0004bbd8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   4bbd8:	defffe04 	addi	sp,sp,-8
   4bbdc:	df000115 	stw	fp,4(sp)
   4bbe0:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   4bbe4:	e03fff15 	stw	zero,-4(fp)
   4bbe8:	00000506 	br	4bc00 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   4bbec:	e0bfff17 	ldw	r2,-4(fp)
   4bbf0:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   4bbf4:	e0bfff17 	ldw	r2,-4(fp)
   4bbf8:	10800804 	addi	r2,r2,32
   4bbfc:	e0bfff15 	stw	r2,-4(fp)
   4bc00:	e0bfff17 	ldw	r2,-4(fp)
   4bc04:	10820030 	cmpltui	r2,r2,2048
   4bc08:	103ff81e 	bne	r2,zero,4bbec <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   4bc0c:	e037883a 	mov	sp,fp
   4bc10:	df000017 	ldw	fp,0(sp)
   4bc14:	dec00104 	addi	sp,sp,4
   4bc18:	f800283a 	ret

0004bc1c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   4bc1c:	defff904 	addi	sp,sp,-28
   4bc20:	dfc00615 	stw	ra,24(sp)
   4bc24:	df000515 	stw	fp,20(sp)
   4bc28:	df000504 	addi	fp,sp,20
   4bc2c:	e13ffd15 	stw	r4,-12(fp)
   4bc30:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   4bc34:	e0bffd17 	ldw	r2,-12(fp)
   4bc38:	1005003a 	cmpeq	r2,r2,zero
   4bc3c:	1000041e 	bne	r2,zero,4bc50 <alt_dev_llist_insert+0x34>
   4bc40:	e0bffd17 	ldw	r2,-12(fp)
   4bc44:	10800217 	ldw	r2,8(r2)
   4bc48:	1004c03a 	cmpne	r2,r2,zero
   4bc4c:	1000071e 	bne	r2,zero,4bc6c <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
   4bc50:	004bcd00 	call	4bcd0 <alt_get_errno>
   4bc54:	1007883a 	mov	r3,r2
   4bc58:	00800584 	movi	r2,22
   4bc5c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   4bc60:	00bffa84 	movi	r2,-22
   4bc64:	e0bfff15 	stw	r2,-4(fp)
   4bc68:	00001306 	br	4bcb8 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   4bc6c:	e0fffd17 	ldw	r3,-12(fp)
   4bc70:	e0bffe17 	ldw	r2,-8(fp)
   4bc74:	e0bffb15 	stw	r2,-20(fp)
   4bc78:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   4bc7c:	e0fffc17 	ldw	r3,-16(fp)
   4bc80:	e0bffb17 	ldw	r2,-20(fp)
   4bc84:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   4bc88:	e0bffb17 	ldw	r2,-20(fp)
   4bc8c:	10c00017 	ldw	r3,0(r2)
   4bc90:	e0bffc17 	ldw	r2,-16(fp)
   4bc94:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   4bc98:	e0bffb17 	ldw	r2,-20(fp)
   4bc9c:	10c00017 	ldw	r3,0(r2)
   4bca0:	e0bffc17 	ldw	r2,-16(fp)
   4bca4:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   4bca8:	e0fffb17 	ldw	r3,-20(fp)
   4bcac:	e0bffc17 	ldw	r2,-16(fp)
   4bcb0:	18800015 	stw	r2,0(r3)

  return 0;  
   4bcb4:	e03fff15 	stw	zero,-4(fp)
   4bcb8:	e0bfff17 	ldw	r2,-4(fp)
}
   4bcbc:	e037883a 	mov	sp,fp
   4bcc0:	dfc00117 	ldw	ra,4(sp)
   4bcc4:	df000017 	ldw	fp,0(sp)
   4bcc8:	dec00204 	addi	sp,sp,8
   4bccc:	f800283a 	ret

0004bcd0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4bcd0:	defffd04 	addi	sp,sp,-12
   4bcd4:	dfc00215 	stw	ra,8(sp)
   4bcd8:	df000115 	stw	fp,4(sp)
   4bcdc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   4bce0:	00900034 	movhi	r2,16384
   4bce4:	10877704 	addi	r2,r2,7644
   4bce8:	10800017 	ldw	r2,0(r2)
   4bcec:	1005003a 	cmpeq	r2,r2,zero
   4bcf0:	1000061e 	bne	r2,zero,4bd0c <alt_get_errno+0x3c>
   4bcf4:	00900034 	movhi	r2,16384
   4bcf8:	10877704 	addi	r2,r2,7644
   4bcfc:	10800017 	ldw	r2,0(r2)
   4bd00:	103ee83a 	callr	r2
   4bd04:	e0bfff15 	stw	r2,-4(fp)
   4bd08:	00000306 	br	4bd18 <alt_get_errno+0x48>
   4bd0c:	00900034 	movhi	r2,16384
   4bd10:	10878204 	addi	r2,r2,7688
   4bd14:	e0bfff15 	stw	r2,-4(fp)
   4bd18:	e0bfff17 	ldw	r2,-4(fp)
}
   4bd1c:	e037883a 	mov	sp,fp
   4bd20:	dfc00117 	ldw	ra,4(sp)
   4bd24:	df000017 	ldw	fp,0(sp)
   4bd28:	dec00204 	addi	sp,sp,8
   4bd2c:	f800283a 	ret

0004bd30 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   4bd30:	defffd04 	addi	sp,sp,-12
   4bd34:	dfc00215 	stw	ra,8(sp)
   4bd38:	df000115 	stw	fp,4(sp)
   4bd3c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   4bd40:	00bfff04 	movi	r2,-4
   4bd44:	00c00174 	movhi	r3,5
   4bd48:	18f37004 	addi	r3,r3,-12864
   4bd4c:	1885883a 	add	r2,r3,r2
   4bd50:	e0bfff15 	stw	r2,-4(fp)
   4bd54:	00000606 	br	4bd70 <_do_ctors+0x40>
        (*ctor) (); 
   4bd58:	e0bfff17 	ldw	r2,-4(fp)
   4bd5c:	10800017 	ldw	r2,0(r2)
   4bd60:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   4bd64:	e0bfff17 	ldw	r2,-4(fp)
   4bd68:	10bfff04 	addi	r2,r2,-4
   4bd6c:	e0bfff15 	stw	r2,-4(fp)
   4bd70:	e0ffff17 	ldw	r3,-4(fp)
   4bd74:	00800174 	movhi	r2,5
   4bd78:	10b36f04 	addi	r2,r2,-12868
   4bd7c:	18bff62e 	bgeu	r3,r2,4bd58 <_do_ctors+0x28>
        (*ctor) (); 
}
   4bd80:	e037883a 	mov	sp,fp
   4bd84:	dfc00117 	ldw	ra,4(sp)
   4bd88:	df000017 	ldw	fp,0(sp)
   4bd8c:	dec00204 	addi	sp,sp,8
   4bd90:	f800283a 	ret

0004bd94 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   4bd94:	defffd04 	addi	sp,sp,-12
   4bd98:	dfc00215 	stw	ra,8(sp)
   4bd9c:	df000115 	stw	fp,4(sp)
   4bda0:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   4bda4:	00bfff04 	movi	r2,-4
   4bda8:	00c00174 	movhi	r3,5
   4bdac:	18f37004 	addi	r3,r3,-12864
   4bdb0:	1885883a 	add	r2,r3,r2
   4bdb4:	e0bfff15 	stw	r2,-4(fp)
   4bdb8:	00000606 	br	4bdd4 <_do_dtors+0x40>
        (*dtor) (); 
   4bdbc:	e0bfff17 	ldw	r2,-4(fp)
   4bdc0:	10800017 	ldw	r2,0(r2)
   4bdc4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   4bdc8:	e0bfff17 	ldw	r2,-4(fp)
   4bdcc:	10bfff04 	addi	r2,r2,-4
   4bdd0:	e0bfff15 	stw	r2,-4(fp)
   4bdd4:	e0ffff17 	ldw	r3,-4(fp)
   4bdd8:	00800174 	movhi	r2,5
   4bddc:	10b37004 	addi	r2,r2,-12864
   4bde0:	18bff62e 	bgeu	r3,r2,4bdbc <_do_dtors+0x28>
        (*dtor) (); 
}
   4bde4:	e037883a 	mov	sp,fp
   4bde8:	dfc00117 	ldw	ra,4(sp)
   4bdec:	df000017 	ldw	fp,0(sp)
   4bdf0:	dec00204 	addi	sp,sp,8
   4bdf4:	f800283a 	ret

0004bdf8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   4bdf8:	defffe04 	addi	sp,sp,-8
   4bdfc:	dfc00115 	stw	ra,4(sp)
   4be00:	df000015 	stw	fp,0(sp)
   4be04:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   4be08:	0009883a 	mov	r4,zero
   4be0c:	01440004 	movi	r5,4096
   4be10:	004c9240 	call	4c924 <alt_icache_flush>
#endif
}
   4be14:	e037883a 	mov	sp,fp
   4be18:	dfc00117 	ldw	ra,4(sp)
   4be1c:	df000017 	ldw	fp,0(sp)
   4be20:	dec00204 	addi	sp,sp,8
   4be24:	f800283a 	ret

0004be28 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   4be28:	defff904 	addi	sp,sp,-28
   4be2c:	dfc00615 	stw	ra,24(sp)
   4be30:	df000515 	stw	fp,20(sp)
   4be34:	df000504 	addi	fp,sp,20
   4be38:	e13ffc15 	stw	r4,-16(fp)
   4be3c:	e17ffd15 	stw	r5,-12(fp)
   4be40:	e1bffe15 	stw	r6,-8(fp)
   4be44:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   4be48:	e0800217 	ldw	r2,8(fp)
   4be4c:	d8800015 	stw	r2,0(sp)
   4be50:	e13ffc17 	ldw	r4,-16(fp)
   4be54:	e17ffd17 	ldw	r5,-12(fp)
   4be58:	e1bffe17 	ldw	r6,-8(fp)
   4be5c:	e1ffff17 	ldw	r7,-4(fp)
   4be60:	004bffc0 	call	4bffc <alt_iic_isr_register>
}  
   4be64:	e037883a 	mov	sp,fp
   4be68:	dfc00117 	ldw	ra,4(sp)
   4be6c:	df000017 	ldw	fp,0(sp)
   4be70:	dec00204 	addi	sp,sp,8
   4be74:	f800283a 	ret

0004be78 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   4be78:	defff904 	addi	sp,sp,-28
   4be7c:	df000615 	stw	fp,24(sp)
   4be80:	df000604 	addi	fp,sp,24
   4be84:	e13ffe15 	stw	r4,-8(fp)
   4be88:	e17fff15 	stw	r5,-4(fp)
   4be8c:	e0bfff17 	ldw	r2,-4(fp)
   4be90:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4be94:	0005303a 	rdctl	r2,status
   4be98:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4be9c:	e0fffb17 	ldw	r3,-20(fp)
   4bea0:	00bfff84 	movi	r2,-2
   4bea4:	1884703a 	and	r2,r3,r2
   4bea8:	1001703a 	wrctl	status,r2
  
  return context;
   4beac:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   4beb0:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
   4beb4:	e0fffc17 	ldw	r3,-16(fp)
   4beb8:	00800044 	movi	r2,1
   4bebc:	10c4983a 	sll	r2,r2,r3
   4bec0:	1007883a 	mov	r3,r2
   4bec4:	00900034 	movhi	r2,16384
   4bec8:	10878604 	addi	r2,r2,7704
   4becc:	10800017 	ldw	r2,0(r2)
   4bed0:	1886b03a 	or	r3,r3,r2
   4bed4:	00900034 	movhi	r2,16384
   4bed8:	10878604 	addi	r2,r2,7704
   4bedc:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   4bee0:	00900034 	movhi	r2,16384
   4bee4:	10878604 	addi	r2,r2,7704
   4bee8:	10800017 	ldw	r2,0(r2)
   4beec:	100170fa 	wrctl	ienable,r2
   4bef0:	e0bffd17 	ldw	r2,-12(fp)
   4bef4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4bef8:	e0bffa17 	ldw	r2,-24(fp)
   4befc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   4bf00:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   4bf04:	e037883a 	mov	sp,fp
   4bf08:	df000017 	ldw	fp,0(sp)
   4bf0c:	dec00104 	addi	sp,sp,4
   4bf10:	f800283a 	ret

0004bf14 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   4bf14:	defff904 	addi	sp,sp,-28
   4bf18:	df000615 	stw	fp,24(sp)
   4bf1c:	df000604 	addi	fp,sp,24
   4bf20:	e13ffe15 	stw	r4,-8(fp)
   4bf24:	e17fff15 	stw	r5,-4(fp)
   4bf28:	e0bfff17 	ldw	r2,-4(fp)
   4bf2c:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4bf30:	0005303a 	rdctl	r2,status
   4bf34:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4bf38:	e0fffb17 	ldw	r3,-20(fp)
   4bf3c:	00bfff84 	movi	r2,-2
   4bf40:	1884703a 	and	r2,r3,r2
   4bf44:	1001703a 	wrctl	status,r2
  
  return context;
   4bf48:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   4bf4c:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
   4bf50:	e0fffc17 	ldw	r3,-16(fp)
   4bf54:	00800044 	movi	r2,1
   4bf58:	10c4983a 	sll	r2,r2,r3
   4bf5c:	0084303a 	nor	r2,zero,r2
   4bf60:	1007883a 	mov	r3,r2
   4bf64:	00900034 	movhi	r2,16384
   4bf68:	10878604 	addi	r2,r2,7704
   4bf6c:	10800017 	ldw	r2,0(r2)
   4bf70:	1886703a 	and	r3,r3,r2
   4bf74:	00900034 	movhi	r2,16384
   4bf78:	10878604 	addi	r2,r2,7704
   4bf7c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   4bf80:	00900034 	movhi	r2,16384
   4bf84:	10878604 	addi	r2,r2,7704
   4bf88:	10800017 	ldw	r2,0(r2)
   4bf8c:	100170fa 	wrctl	ienable,r2
   4bf90:	e0bffd17 	ldw	r2,-12(fp)
   4bf94:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4bf98:	e0bffa17 	ldw	r2,-24(fp)
   4bf9c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   4bfa0:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   4bfa4:	e037883a 	mov	sp,fp
   4bfa8:	df000017 	ldw	fp,0(sp)
   4bfac:	dec00104 	addi	sp,sp,4
   4bfb0:	f800283a 	ret

0004bfb4 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   4bfb4:	defffc04 	addi	sp,sp,-16
   4bfb8:	df000315 	stw	fp,12(sp)
   4bfbc:	df000304 	addi	fp,sp,12
   4bfc0:	e13ffe15 	stw	r4,-8(fp)
   4bfc4:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   4bfc8:	000530fa 	rdctl	r2,ienable
   4bfcc:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   4bfd0:	e0ffff17 	ldw	r3,-4(fp)
   4bfd4:	00800044 	movi	r2,1
   4bfd8:	10c4983a 	sll	r2,r2,r3
   4bfdc:	1007883a 	mov	r3,r2
   4bfe0:	e0bffd17 	ldw	r2,-12(fp)
   4bfe4:	1884703a 	and	r2,r3,r2
   4bfe8:	1004c03a 	cmpne	r2,r2,zero
}
   4bfec:	e037883a 	mov	sp,fp
   4bff0:	df000017 	ldw	fp,0(sp)
   4bff4:	dec00104 	addi	sp,sp,4
   4bff8:	f800283a 	ret

0004bffc <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   4bffc:	defff404 	addi	sp,sp,-48
   4c000:	dfc00b15 	stw	ra,44(sp)
   4c004:	df000a15 	stw	fp,40(sp)
   4c008:	df000a04 	addi	fp,sp,40
   4c00c:	e13ffb15 	stw	r4,-20(fp)
   4c010:	e17ffc15 	stw	r5,-16(fp)
   4c014:	e1bffd15 	stw	r6,-12(fp)
   4c018:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
   4c01c:	00bffa84 	movi	r2,-22
   4c020:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   4c024:	e0bffc17 	ldw	r2,-16(fp)
   4c028:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   4c02c:	e0bff917 	ldw	r2,-28(fp)
   4c030:	10800808 	cmpgei	r2,r2,32
   4c034:	1000291e 	bne	r2,zero,4c0dc <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4c038:	0005303a 	rdctl	r2,status
   4c03c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4c040:	e0fff717 	ldw	r3,-36(fp)
   4c044:	00bfff84 	movi	r2,-2
   4c048:	1884703a 	and	r2,r3,r2
   4c04c:	1001703a 	wrctl	status,r2
  
  return context;
   4c050:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   4c054:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
   4c058:	e0bff917 	ldw	r2,-28(fp)
   4c05c:	00d00034 	movhi	r3,16384
   4c060:	18c79304 	addi	r3,r3,7756
   4c064:	100490fa 	slli	r2,r2,3
   4c068:	10c7883a 	add	r3,r2,r3
   4c06c:	e0bffd17 	ldw	r2,-12(fp)
   4c070:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
   4c074:	e0bff917 	ldw	r2,-28(fp)
   4c078:	00d00034 	movhi	r3,16384
   4c07c:	18c79304 	addi	r3,r3,7756
   4c080:	100490fa 	slli	r2,r2,3
   4c084:	10c5883a 	add	r2,r2,r3
   4c088:	10c00104 	addi	r3,r2,4
   4c08c:	e0bffe17 	ldw	r2,-8(fp)
   4c090:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   4c094:	e0bffd17 	ldw	r2,-12(fp)
   4c098:	1005003a 	cmpeq	r2,r2,zero
   4c09c:	1000051e 	bne	r2,zero,4c0b4 <alt_iic_isr_register+0xb8>
   4c0a0:	e17ff917 	ldw	r5,-28(fp)
   4c0a4:	e13ffb17 	ldw	r4,-20(fp)
   4c0a8:	004be780 	call	4be78 <alt_ic_irq_enable>
   4c0ac:	e0bfff15 	stw	r2,-4(fp)
   4c0b0:	00000406 	br	4c0c4 <alt_iic_isr_register+0xc8>
   4c0b4:	e17ff917 	ldw	r5,-28(fp)
   4c0b8:	e13ffb17 	ldw	r4,-20(fp)
   4c0bc:	004bf140 	call	4bf14 <alt_ic_irq_disable>
   4c0c0:	e0bfff15 	stw	r2,-4(fp)
   4c0c4:	e0bfff17 	ldw	r2,-4(fp)
   4c0c8:	e0bffa15 	stw	r2,-24(fp)
   4c0cc:	e0bff817 	ldw	r2,-32(fp)
   4c0d0:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4c0d4:	e0bff617 	ldw	r2,-40(fp)
   4c0d8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   4c0dc:	e0bffa17 	ldw	r2,-24(fp)
}
   4c0e0:	e037883a 	mov	sp,fp
   4c0e4:	dfc00117 	ldw	ra,4(sp)
   4c0e8:	df000017 	ldw	fp,0(sp)
   4c0ec:	dec00204 	addi	sp,sp,8
   4c0f0:	f800283a 	ret

0004c0f4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   4c0f4:	defff904 	addi	sp,sp,-28
   4c0f8:	dfc00615 	stw	ra,24(sp)
   4c0fc:	df000515 	stw	fp,20(sp)
   4c100:	df000504 	addi	fp,sp,20
   4c104:	e13ffc15 	stw	r4,-16(fp)
   4c108:	e17ffd15 	stw	r5,-12(fp)
   4c10c:	e1bffe15 	stw	r6,-8(fp)
   4c110:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   4c114:	e13ffd17 	ldw	r4,-12(fp)
   4c118:	e17ffe17 	ldw	r5,-8(fp)
   4c11c:	e1bfff17 	ldw	r6,-4(fp)
   4c120:	004c30c0 	call	4c30c <open>
   4c124:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   4c128:	e0bffb17 	ldw	r2,-20(fp)
   4c12c:	1004803a 	cmplt	r2,r2,zero
   4c130:	10001c1e 	bne	r2,zero,4c1a4 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
   4c134:	e0bffb17 	ldw	r2,-20(fp)
   4c138:	00d00034 	movhi	r3,16384
   4c13c:	18c2f404 	addi	r3,r3,3024
   4c140:	10800324 	muli	r2,r2,12
   4c144:	10c5883a 	add	r2,r2,r3
   4c148:	10c00017 	ldw	r3,0(r2)
   4c14c:	e0bffc17 	ldw	r2,-16(fp)
   4c150:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   4c154:	e0bffb17 	ldw	r2,-20(fp)
   4c158:	00d00034 	movhi	r3,16384
   4c15c:	18c2f404 	addi	r3,r3,3024
   4c160:	10800324 	muli	r2,r2,12
   4c164:	10c5883a 	add	r2,r2,r3
   4c168:	10800104 	addi	r2,r2,4
   4c16c:	10c00017 	ldw	r3,0(r2)
   4c170:	e0bffc17 	ldw	r2,-16(fp)
   4c174:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   4c178:	e0bffb17 	ldw	r2,-20(fp)
   4c17c:	00d00034 	movhi	r3,16384
   4c180:	18c2f404 	addi	r3,r3,3024
   4c184:	10800324 	muli	r2,r2,12
   4c188:	10c5883a 	add	r2,r2,r3
   4c18c:	10800204 	addi	r2,r2,8
   4c190:	10c00017 	ldw	r3,0(r2)
   4c194:	e0bffc17 	ldw	r2,-16(fp)
   4c198:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   4c19c:	e13ffb17 	ldw	r4,-20(fp)
   4c1a0:	004a7c00 	call	4a7c0 <alt_release_fd>
  }
} 
   4c1a4:	e037883a 	mov	sp,fp
   4c1a8:	dfc00117 	ldw	ra,4(sp)
   4c1ac:	df000017 	ldw	fp,0(sp)
   4c1b0:	dec00204 	addi	sp,sp,8
   4c1b4:	f800283a 	ret

0004c1b8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   4c1b8:	defffb04 	addi	sp,sp,-20
   4c1bc:	dfc00415 	stw	ra,16(sp)
   4c1c0:	df000315 	stw	fp,12(sp)
   4c1c4:	df000304 	addi	fp,sp,12
   4c1c8:	e13ffd15 	stw	r4,-12(fp)
   4c1cc:	e17ffe15 	stw	r5,-8(fp)
   4c1d0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   4c1d4:	01100034 	movhi	r4,16384
   4c1d8:	2102f704 	addi	r4,r4,3036
   4c1dc:	e17ffd17 	ldw	r5,-12(fp)
   4c1e0:	01800044 	movi	r6,1
   4c1e4:	01c07fc4 	movi	r7,511
   4c1e8:	004c0f40 	call	4c0f4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   4c1ec:	01100034 	movhi	r4,16384
   4c1f0:	2102f404 	addi	r4,r4,3024
   4c1f4:	e17ffe17 	ldw	r5,-8(fp)
   4c1f8:	000d883a 	mov	r6,zero
   4c1fc:	01c07fc4 	movi	r7,511
   4c200:	004c0f40 	call	4c0f4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   4c204:	01100034 	movhi	r4,16384
   4c208:	2102fa04 	addi	r4,r4,3048
   4c20c:	e17fff17 	ldw	r5,-4(fp)
   4c210:	01800044 	movi	r6,1
   4c214:	01c07fc4 	movi	r7,511
   4c218:	004c0f40 	call	4c0f4 <alt_open_fd>
}  
   4c21c:	e037883a 	mov	sp,fp
   4c220:	dfc00117 	ldw	ra,4(sp)
   4c224:	df000017 	ldw	fp,0(sp)
   4c228:	dec00204 	addi	sp,sp,8
   4c22c:	f800283a 	ret

0004c230 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   4c230:	defffc04 	addi	sp,sp,-16
   4c234:	df000315 	stw	fp,12(sp)
   4c238:	df000304 	addi	fp,sp,12
   4c23c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   4c240:	e0bffe17 	ldw	r2,-8(fp)
   4c244:	10800217 	ldw	r2,8(r2)
   4c248:	10d00034 	orhi	r3,r2,16384
   4c24c:	e0bffe17 	ldw	r2,-8(fp)
   4c250:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   4c254:	e03ffd15 	stw	zero,-12(fp)
   4c258:	00002006 	br	4c2dc <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   4c25c:	e0bffd17 	ldw	r2,-12(fp)
   4c260:	00d00034 	movhi	r3,16384
   4c264:	18c2f404 	addi	r3,r3,3024
   4c268:	10800324 	muli	r2,r2,12
   4c26c:	10c5883a 	add	r2,r2,r3
   4c270:	10c00017 	ldw	r3,0(r2)
   4c274:	e0bffe17 	ldw	r2,-8(fp)
   4c278:	10800017 	ldw	r2,0(r2)
   4c27c:	1880141e 	bne	r3,r2,4c2d0 <alt_file_locked+0xa0>
   4c280:	e0bffd17 	ldw	r2,-12(fp)
   4c284:	00d00034 	movhi	r3,16384
   4c288:	18c2f404 	addi	r3,r3,3024
   4c28c:	10800324 	muli	r2,r2,12
   4c290:	10c5883a 	add	r2,r2,r3
   4c294:	10800204 	addi	r2,r2,8
   4c298:	10800017 	ldw	r2,0(r2)
   4c29c:	1004403a 	cmpge	r2,r2,zero
   4c2a0:	10000b1e 	bne	r2,zero,4c2d0 <alt_file_locked+0xa0>
   4c2a4:	e0bffd17 	ldw	r2,-12(fp)
   4c2a8:	10800324 	muli	r2,r2,12
   4c2ac:	1007883a 	mov	r3,r2
   4c2b0:	00900034 	movhi	r2,16384
   4c2b4:	1082f404 	addi	r2,r2,3024
   4c2b8:	1887883a 	add	r3,r3,r2
   4c2bc:	e0bffe17 	ldw	r2,-8(fp)
   4c2c0:	18800326 	beq	r3,r2,4c2d0 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   4c2c4:	00bffcc4 	movi	r2,-13
   4c2c8:	e0bfff15 	stw	r2,-4(fp)
   4c2cc:	00000a06 	br	4c2f8 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   4c2d0:	e0bffd17 	ldw	r2,-12(fp)
   4c2d4:	10800044 	addi	r2,r2,1
   4c2d8:	e0bffd15 	stw	r2,-12(fp)
   4c2dc:	00900034 	movhi	r2,16384
   4c2e0:	10877604 	addi	r2,r2,7640
   4c2e4:	10800017 	ldw	r2,0(r2)
   4c2e8:	1007883a 	mov	r3,r2
   4c2ec:	e0bffd17 	ldw	r2,-12(fp)
   4c2f0:	18bfda2e 	bgeu	r3,r2,4c25c <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   4c2f4:	e03fff15 	stw	zero,-4(fp)
   4c2f8:	e0bfff17 	ldw	r2,-4(fp)
}
   4c2fc:	e037883a 	mov	sp,fp
   4c300:	df000017 	ldw	fp,0(sp)
   4c304:	dec00104 	addi	sp,sp,4
   4c308:	f800283a 	ret

0004c30c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   4c30c:	defff404 	addi	sp,sp,-48
   4c310:	dfc00b15 	stw	ra,44(sp)
   4c314:	df000a15 	stw	fp,40(sp)
   4c318:	df000a04 	addi	fp,sp,40
   4c31c:	e13ffb15 	stw	r4,-20(fp)
   4c320:	e17ffc15 	stw	r5,-16(fp)
   4c324:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   4c328:	00bfffc4 	movi	r2,-1
   4c32c:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
   4c330:	00bffb44 	movi	r2,-19
   4c334:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
   4c338:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   4c33c:	e13ffb17 	ldw	r4,-20(fp)
   4c340:	01500034 	movhi	r5,16384
   4c344:	29477404 	addi	r5,r5,7632
   4c348:	004c6b80 	call	4c6b8 <alt_find_dev>
   4c34c:	e0bffa15 	stw	r2,-24(fp)
   4c350:	e0bffa17 	ldw	r2,-24(fp)
   4c354:	1004c03a 	cmpne	r2,r2,zero
   4c358:	1000051e 	bne	r2,zero,4c370 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   4c35c:	e13ffb17 	ldw	r4,-20(fp)
   4c360:	004c74c0 	call	4c74c <alt_find_file>
   4c364:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
   4c368:	00800044 	movi	r2,1
   4c36c:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   4c370:	e0bffa17 	ldw	r2,-24(fp)
   4c374:	1005003a 	cmpeq	r2,r2,zero
   4c378:	1000301e 	bne	r2,zero,4c43c <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
   4c37c:	e13ffa17 	ldw	r4,-24(fp)
   4c380:	004c86c0 	call	4c86c <alt_get_fd>
   4c384:	e0bff815 	stw	r2,-32(fp)
   4c388:	e0bff817 	ldw	r2,-32(fp)
   4c38c:	1004403a 	cmpge	r2,r2,zero
   4c390:	1000031e 	bne	r2,zero,4c3a0 <open+0x94>
    {
      status = index;
   4c394:	e0bff817 	ldw	r2,-32(fp)
   4c398:	e0bff715 	stw	r2,-36(fp)
   4c39c:	00002906 	br	4c444 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
   4c3a0:	e0bff817 	ldw	r2,-32(fp)
   4c3a4:	10800324 	muli	r2,r2,12
   4c3a8:	1007883a 	mov	r3,r2
   4c3ac:	00900034 	movhi	r2,16384
   4c3b0:	1082f404 	addi	r2,r2,3024
   4c3b4:	1885883a 	add	r2,r3,r2
   4c3b8:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   4c3bc:	e0fffc17 	ldw	r3,-16(fp)
   4c3c0:	00900034 	movhi	r2,16384
   4c3c4:	10bfffc4 	addi	r2,r2,-1
   4c3c8:	1886703a 	and	r3,r3,r2
   4c3cc:	e0bff917 	ldw	r2,-28(fp)
   4c3d0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   4c3d4:	e0bff617 	ldw	r2,-40(fp)
   4c3d8:	1004c03a 	cmpne	r2,r2,zero
   4c3dc:	1000061e 	bne	r2,zero,4c3f8 <open+0xec>
   4c3e0:	e13ff917 	ldw	r4,-28(fp)
   4c3e4:	004c2300 	call	4c230 <alt_file_locked>
   4c3e8:	e0bff715 	stw	r2,-36(fp)
   4c3ec:	e0bff717 	ldw	r2,-36(fp)
   4c3f0:	1004803a 	cmplt	r2,r2,zero
   4c3f4:	1000131e 	bne	r2,zero,4c444 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   4c3f8:	e0bffa17 	ldw	r2,-24(fp)
   4c3fc:	10800317 	ldw	r2,12(r2)
   4c400:	1005003a 	cmpeq	r2,r2,zero
   4c404:	1000091e 	bne	r2,zero,4c42c <open+0x120>
   4c408:	e0bffa17 	ldw	r2,-24(fp)
   4c40c:	10800317 	ldw	r2,12(r2)
   4c410:	e13ff917 	ldw	r4,-28(fp)
   4c414:	e17ffb17 	ldw	r5,-20(fp)
   4c418:	e1bffc17 	ldw	r6,-16(fp)
   4c41c:	e1fffd17 	ldw	r7,-12(fp)
   4c420:	103ee83a 	callr	r2
   4c424:	e0bfff15 	stw	r2,-4(fp)
   4c428:	00000106 	br	4c430 <open+0x124>
   4c42c:	e03fff15 	stw	zero,-4(fp)
   4c430:	e0bfff17 	ldw	r2,-4(fp)
   4c434:	e0bff715 	stw	r2,-36(fp)
   4c438:	00000206 	br	4c444 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
   4c43c:	00bffb44 	movi	r2,-19
   4c440:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   4c444:	e0bff717 	ldw	r2,-36(fp)
   4c448:	1004403a 	cmpge	r2,r2,zero
   4c44c:	1000091e 	bne	r2,zero,4c474 <open+0x168>
  {
    alt_release_fd (index);  
   4c450:	e13ff817 	ldw	r4,-32(fp)
   4c454:	004a7c00 	call	4a7c0 <alt_release_fd>
    ALT_ERRNO = -status;
   4c458:	004c4940 	call	4c494 <alt_get_errno>
   4c45c:	e0fff717 	ldw	r3,-36(fp)
   4c460:	00c7c83a 	sub	r3,zero,r3
   4c464:	10c00015 	stw	r3,0(r2)
    return -1;
   4c468:	00bfffc4 	movi	r2,-1
   4c46c:	e0bffe15 	stw	r2,-8(fp)
   4c470:	00000206 	br	4c47c <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
   4c474:	e0bff817 	ldw	r2,-32(fp)
   4c478:	e0bffe15 	stw	r2,-8(fp)
   4c47c:	e0bffe17 	ldw	r2,-8(fp)
}
   4c480:	e037883a 	mov	sp,fp
   4c484:	dfc00117 	ldw	ra,4(sp)
   4c488:	df000017 	ldw	fp,0(sp)
   4c48c:	dec00204 	addi	sp,sp,8
   4c490:	f800283a 	ret

0004c494 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4c494:	defffd04 	addi	sp,sp,-12
   4c498:	dfc00215 	stw	ra,8(sp)
   4c49c:	df000115 	stw	fp,4(sp)
   4c4a0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   4c4a4:	00900034 	movhi	r2,16384
   4c4a8:	10877704 	addi	r2,r2,7644
   4c4ac:	10800017 	ldw	r2,0(r2)
   4c4b0:	1005003a 	cmpeq	r2,r2,zero
   4c4b4:	1000061e 	bne	r2,zero,4c4d0 <alt_get_errno+0x3c>
   4c4b8:	00900034 	movhi	r2,16384
   4c4bc:	10877704 	addi	r2,r2,7644
   4c4c0:	10800017 	ldw	r2,0(r2)
   4c4c4:	103ee83a 	callr	r2
   4c4c8:	e0bfff15 	stw	r2,-4(fp)
   4c4cc:	00000306 	br	4c4dc <alt_get_errno+0x48>
   4c4d0:	00900034 	movhi	r2,16384
   4c4d4:	10878204 	addi	r2,r2,7688
   4c4d8:	e0bfff15 	stw	r2,-4(fp)
   4c4dc:	e0bfff17 	ldw	r2,-4(fp)
}
   4c4e0:	e037883a 	mov	sp,fp
   4c4e4:	dfc00117 	ldw	ra,4(sp)
   4c4e8:	df000017 	ldw	fp,0(sp)
   4c4ec:	dec00204 	addi	sp,sp,8
   4c4f0:	f800283a 	ret

0004c4f4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   4c4f4:	defffa04 	addi	sp,sp,-24
   4c4f8:	df000515 	stw	fp,20(sp)
   4c4fc:	df000504 	addi	fp,sp,20
   4c500:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4c504:	0005303a 	rdctl	r2,status
   4c508:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4c50c:	e0fffd17 	ldw	r3,-12(fp)
   4c510:	00bfff84 	movi	r2,-2
   4c514:	1884703a 	and	r2,r3,r2
   4c518:	1001703a 	wrctl	status,r2
  
  return context;
   4c51c:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   4c520:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
   4c524:	e0bfff17 	ldw	r2,-4(fp)
   4c528:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   4c52c:	e0bffc17 	ldw	r2,-16(fp)
   4c530:	10c00017 	ldw	r3,0(r2)
   4c534:	e0bffc17 	ldw	r2,-16(fp)
   4c538:	10800117 	ldw	r2,4(r2)
   4c53c:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
   4c540:	e0bffc17 	ldw	r2,-16(fp)
   4c544:	10c00117 	ldw	r3,4(r2)
   4c548:	e0bffc17 	ldw	r2,-16(fp)
   4c54c:	10800017 	ldw	r2,0(r2)
   4c550:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   4c554:	e0fffc17 	ldw	r3,-16(fp)
   4c558:	e0bffc17 	ldw	r2,-16(fp)
   4c55c:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
   4c560:	e0fffc17 	ldw	r3,-16(fp)
   4c564:	e0bffc17 	ldw	r2,-16(fp)
   4c568:	18800015 	stw	r2,0(r3)
   4c56c:	e0bffe17 	ldw	r2,-8(fp)
   4c570:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4c574:	e0bffb17 	ldw	r2,-20(fp)
   4c578:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   4c57c:	e037883a 	mov	sp,fp
   4c580:	df000017 	ldw	fp,0(sp)
   4c584:	dec00104 	addi	sp,sp,4
   4c588:	f800283a 	ret

0004c58c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   4c58c:	defffb04 	addi	sp,sp,-20
   4c590:	dfc00415 	stw	ra,16(sp)
   4c594:	df000315 	stw	fp,12(sp)
   4c598:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   4c59c:	d0a00e17 	ldw	r2,-32712(gp)
   4c5a0:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   4c5a4:	d0a01c17 	ldw	r2,-32656(gp)
   4c5a8:	10800044 	addi	r2,r2,1
   4c5ac:	d0a01c15 	stw	r2,-32656(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   4c5b0:	00003106 	br	4c678 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
   4c5b4:	e0bffe17 	ldw	r2,-8(fp)
   4c5b8:	10800017 	ldw	r2,0(r2)
   4c5bc:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   4c5c0:	e0bffe17 	ldw	r2,-8(fp)
   4c5c4:	10800403 	ldbu	r2,16(r2)
   4c5c8:	10803fcc 	andi	r2,r2,255
   4c5cc:	1005003a 	cmpeq	r2,r2,zero
   4c5d0:	1000051e 	bne	r2,zero,4c5e8 <alt_tick+0x5c>
   4c5d4:	d0a01c17 	ldw	r2,-32656(gp)
   4c5d8:	1004c03a 	cmpne	r2,r2,zero
   4c5dc:	1000021e 	bne	r2,zero,4c5e8 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
   4c5e0:	e0bffe17 	ldw	r2,-8(fp)
   4c5e4:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   4c5e8:	e0bffe17 	ldw	r2,-8(fp)
   4c5ec:	10c00217 	ldw	r3,8(r2)
   4c5f0:	d0a01c17 	ldw	r2,-32656(gp)
   4c5f4:	10c01e36 	bltu	r2,r3,4c670 <alt_tick+0xe4>
   4c5f8:	e0bffe17 	ldw	r2,-8(fp)
   4c5fc:	10800403 	ldbu	r2,16(r2)
   4c600:	10803fcc 	andi	r2,r2,255
   4c604:	1004c03a 	cmpne	r2,r2,zero
   4c608:	1000191e 	bne	r2,zero,4c670 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
   4c60c:	e0bffe17 	ldw	r2,-8(fp)
   4c610:	10c00317 	ldw	r3,12(r2)
   4c614:	e0bffe17 	ldw	r2,-8(fp)
   4c618:	11000517 	ldw	r4,20(r2)
   4c61c:	183ee83a 	callr	r3
   4c620:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   4c624:	e0bffd17 	ldw	r2,-12(fp)
   4c628:	1004c03a 	cmpne	r2,r2,zero
   4c62c:	1000031e 	bne	r2,zero,4c63c <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
   4c630:	e13ffe17 	ldw	r4,-8(fp)
   4c634:	004c4f40 	call	4c4f4 <alt_alarm_stop>
   4c638:	00000d06 	br	4c670 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
   4c63c:	e0bffe17 	ldw	r2,-8(fp)
   4c640:	10c00217 	ldw	r3,8(r2)
   4c644:	e0bffd17 	ldw	r2,-12(fp)
   4c648:	1887883a 	add	r3,r3,r2
   4c64c:	e0bffe17 	ldw	r2,-8(fp)
   4c650:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   4c654:	e0bffe17 	ldw	r2,-8(fp)
   4c658:	10c00217 	ldw	r3,8(r2)
   4c65c:	d0a01c17 	ldw	r2,-32656(gp)
   4c660:	1880032e 	bgeu	r3,r2,4c670 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
   4c664:	e0fffe17 	ldw	r3,-8(fp)
   4c668:	00800044 	movi	r2,1
   4c66c:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
   4c670:	e0bfff17 	ldw	r2,-4(fp)
   4c674:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   4c678:	d0e00e04 	addi	r3,gp,-32712
   4c67c:	e0bffe17 	ldw	r2,-8(fp)
   4c680:	10ffcc1e 	bne	r2,r3,4c5b4 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
   4c684:	e037883a 	mov	sp,fp
   4c688:	dfc00117 	ldw	ra,4(sp)
   4c68c:	df000017 	ldw	fp,0(sp)
   4c690:	dec00204 	addi	sp,sp,8
   4c694:	f800283a 	ret

0004c698 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   4c698:	deffff04 	addi	sp,sp,-4
   4c69c:	df000015 	stw	fp,0(sp)
   4c6a0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   4c6a4:	000170fa 	wrctl	ienable,zero
}
   4c6a8:	e037883a 	mov	sp,fp
   4c6ac:	df000017 	ldw	fp,0(sp)
   4c6b0:	dec00104 	addi	sp,sp,4
   4c6b4:	f800283a 	ret

0004c6b8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   4c6b8:	defff904 	addi	sp,sp,-28
   4c6bc:	dfc00615 	stw	ra,24(sp)
   4c6c0:	df000515 	stw	fp,20(sp)
   4c6c4:	df000504 	addi	fp,sp,20
   4c6c8:	e13ffd15 	stw	r4,-12(fp)
   4c6cc:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
   4c6d0:	e0bffe17 	ldw	r2,-8(fp)
   4c6d4:	10800017 	ldw	r2,0(r2)
   4c6d8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   4c6dc:	e13ffd17 	ldw	r4,-12(fp)
   4c6e0:	0040a0c0 	call	40a0c <strlen>
   4c6e4:	10800044 	addi	r2,r2,1
   4c6e8:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   4c6ec:	00000d06 	br	4c724 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   4c6f0:	e0bffc17 	ldw	r2,-16(fp)
   4c6f4:	11000217 	ldw	r4,8(r2)
   4c6f8:	e1bffb17 	ldw	r6,-20(fp)
   4c6fc:	e17ffd17 	ldw	r5,-12(fp)
   4c700:	004ca000 	call	4ca00 <memcmp>
   4c704:	1004c03a 	cmpne	r2,r2,zero
   4c708:	1000031e 	bne	r2,zero,4c718 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   4c70c:	e0bffc17 	ldw	r2,-16(fp)
   4c710:	e0bfff15 	stw	r2,-4(fp)
   4c714:	00000706 	br	4c734 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   4c718:	e0bffc17 	ldw	r2,-16(fp)
   4c71c:	10800017 	ldw	r2,0(r2)
   4c720:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   4c724:	e0fffe17 	ldw	r3,-8(fp)
   4c728:	e0bffc17 	ldw	r2,-16(fp)
   4c72c:	10fff01e 	bne	r2,r3,4c6f0 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   4c730:	e03fff15 	stw	zero,-4(fp)
   4c734:	e0bfff17 	ldw	r2,-4(fp)
}
   4c738:	e037883a 	mov	sp,fp
   4c73c:	dfc00117 	ldw	ra,4(sp)
   4c740:	df000017 	ldw	fp,0(sp)
   4c744:	dec00204 	addi	sp,sp,8
   4c748:	f800283a 	ret

0004c74c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   4c74c:	defffa04 	addi	sp,sp,-24
   4c750:	dfc00515 	stw	ra,20(sp)
   4c754:	df000415 	stw	fp,16(sp)
   4c758:	df000404 	addi	fp,sp,16
   4c75c:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   4c760:	00900034 	movhi	r2,16384
   4c764:	10877204 	addi	r2,r2,7624
   4c768:	10800017 	ldw	r2,0(r2)
   4c76c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   4c770:	00003306 	br	4c840 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
   4c774:	e0bffd17 	ldw	r2,-12(fp)
   4c778:	11000217 	ldw	r4,8(r2)
   4c77c:	0040a0c0 	call	40a0c <strlen>
   4c780:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
   4c784:	e0bffd17 	ldw	r2,-12(fp)
   4c788:	10c00217 	ldw	r3,8(r2)
   4c78c:	e0bffc17 	ldw	r2,-16(fp)
   4c790:	1885883a 	add	r2,r3,r2
   4c794:	10bfffc4 	addi	r2,r2,-1
   4c798:	10800003 	ldbu	r2,0(r2)
   4c79c:	10803fcc 	andi	r2,r2,255
   4c7a0:	1080201c 	xori	r2,r2,128
   4c7a4:	10bfe004 	addi	r2,r2,-128
   4c7a8:	10800bd8 	cmpnei	r2,r2,47
   4c7ac:	1000031e 	bne	r2,zero,4c7bc <alt_find_file+0x70>
    {
      len -= 1;
   4c7b0:	e0bffc17 	ldw	r2,-16(fp)
   4c7b4:	10bfffc4 	addi	r2,r2,-1
   4c7b8:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   4c7bc:	e0bffc17 	ldw	r2,-16(fp)
   4c7c0:	1007883a 	mov	r3,r2
   4c7c4:	e0bffe17 	ldw	r2,-8(fp)
   4c7c8:	1885883a 	add	r2,r3,r2
   4c7cc:	10800003 	ldbu	r2,0(r2)
   4c7d0:	10803fcc 	andi	r2,r2,255
   4c7d4:	1080201c 	xori	r2,r2,128
   4c7d8:	10bfe004 	addi	r2,r2,-128
   4c7dc:	10800be0 	cmpeqi	r2,r2,47
   4c7e0:	10000a1e 	bne	r2,zero,4c80c <alt_find_file+0xc0>
   4c7e4:	e0bffc17 	ldw	r2,-16(fp)
   4c7e8:	1007883a 	mov	r3,r2
   4c7ec:	e0bffe17 	ldw	r2,-8(fp)
   4c7f0:	1885883a 	add	r2,r3,r2
   4c7f4:	10800003 	ldbu	r2,0(r2)
   4c7f8:	10803fcc 	andi	r2,r2,255
   4c7fc:	1080201c 	xori	r2,r2,128
   4c800:	10bfe004 	addi	r2,r2,-128
   4c804:	1004c03a 	cmpne	r2,r2,zero
   4c808:	10000a1e 	bne	r2,zero,4c834 <alt_find_file+0xe8>
   4c80c:	e0bffd17 	ldw	r2,-12(fp)
   4c810:	11000217 	ldw	r4,8(r2)
   4c814:	e1bffc17 	ldw	r6,-16(fp)
   4c818:	e17ffe17 	ldw	r5,-8(fp)
   4c81c:	004ca000 	call	4ca00 <memcmp>
   4c820:	1004c03a 	cmpne	r2,r2,zero
   4c824:	1000031e 	bne	r2,zero,4c834 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   4c828:	e0bffd17 	ldw	r2,-12(fp)
   4c82c:	e0bfff15 	stw	r2,-4(fp)
   4c830:	00000806 	br	4c854 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
   4c834:	e0bffd17 	ldw	r2,-12(fp)
   4c838:	10800017 	ldw	r2,0(r2)
   4c83c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   4c840:	00d00034 	movhi	r3,16384
   4c844:	18c77204 	addi	r3,r3,7624
   4c848:	e0bffd17 	ldw	r2,-12(fp)
   4c84c:	10ffc91e 	bne	r2,r3,4c774 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   4c850:	e03fff15 	stw	zero,-4(fp)
   4c854:	e0bfff17 	ldw	r2,-4(fp)
}
   4c858:	e037883a 	mov	sp,fp
   4c85c:	dfc00117 	ldw	ra,4(sp)
   4c860:	df000017 	ldw	fp,0(sp)
   4c864:	dec00204 	addi	sp,sp,8
   4c868:	f800283a 	ret

0004c86c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   4c86c:	defffc04 	addi	sp,sp,-16
   4c870:	df000315 	stw	fp,12(sp)
   4c874:	df000304 	addi	fp,sp,12
   4c878:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   4c87c:	00bffa04 	movi	r2,-24
   4c880:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   4c884:	e03ffe15 	stw	zero,-8(fp)
   4c888:	00001e06 	br	4c904 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
   4c88c:	e0bffe17 	ldw	r2,-8(fp)
   4c890:	00d00034 	movhi	r3,16384
   4c894:	18c2f404 	addi	r3,r3,3024
   4c898:	10800324 	muli	r2,r2,12
   4c89c:	10c5883a 	add	r2,r2,r3
   4c8a0:	10800017 	ldw	r2,0(r2)
   4c8a4:	1004c03a 	cmpne	r2,r2,zero
   4c8a8:	1000131e 	bne	r2,zero,4c8f8 <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
   4c8ac:	e0bffe17 	ldw	r2,-8(fp)
   4c8b0:	00d00034 	movhi	r3,16384
   4c8b4:	18c2f404 	addi	r3,r3,3024
   4c8b8:	10800324 	muli	r2,r2,12
   4c8bc:	10c7883a 	add	r3,r2,r3
   4c8c0:	e0bfff17 	ldw	r2,-4(fp)
   4c8c4:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
   4c8c8:	00900034 	movhi	r2,16384
   4c8cc:	10877604 	addi	r2,r2,7640
   4c8d0:	10c00017 	ldw	r3,0(r2)
   4c8d4:	e0bffe17 	ldw	r2,-8(fp)
   4c8d8:	1880040e 	bge	r3,r2,4c8ec <alt_get_fd+0x80>
      {
        alt_max_fd = i;
   4c8dc:	00d00034 	movhi	r3,16384
   4c8e0:	18c77604 	addi	r3,r3,7640
   4c8e4:	e0bffe17 	ldw	r2,-8(fp)
   4c8e8:	18800015 	stw	r2,0(r3)
      }
      rc = i;
   4c8ec:	e0bffe17 	ldw	r2,-8(fp)
   4c8f0:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   4c8f4:	00000606 	br	4c910 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   4c8f8:	e0bffe17 	ldw	r2,-8(fp)
   4c8fc:	10800044 	addi	r2,r2,1
   4c900:	e0bffe15 	stw	r2,-8(fp)
   4c904:	e0bffe17 	ldw	r2,-8(fp)
   4c908:	10800810 	cmplti	r2,r2,32
   4c90c:	103fdf1e 	bne	r2,zero,4c88c <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   4c910:	e0bffd17 	ldw	r2,-12(fp)
}
   4c914:	e037883a 	mov	sp,fp
   4c918:	df000017 	ldw	fp,0(sp)
   4c91c:	dec00104 	addi	sp,sp,4
   4c920:	f800283a 	ret

0004c924 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   4c924:	defffb04 	addi	sp,sp,-20
   4c928:	df000415 	stw	fp,16(sp)
   4c92c:	df000404 	addi	fp,sp,16
   4c930:	e13ffe15 	stw	r4,-8(fp)
   4c934:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   4c938:	e0bfff17 	ldw	r2,-4(fp)
   4c93c:	10840070 	cmpltui	r2,r2,4097
   4c940:	1000021e 	bne	r2,zero,4c94c <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   4c944:	00840004 	movi	r2,4096
   4c948:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   4c94c:	e0fffe17 	ldw	r3,-8(fp)
   4c950:	e0bfff17 	ldw	r2,-4(fp)
   4c954:	1885883a 	add	r2,r3,r2
   4c958:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   4c95c:	e0bffe17 	ldw	r2,-8(fp)
   4c960:	e0bffd15 	stw	r2,-12(fp)
   4c964:	00000506 	br	4c97c <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   4c968:	e0bffd17 	ldw	r2,-12(fp)
   4c96c:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   4c970:	e0bffd17 	ldw	r2,-12(fp)
   4c974:	10800804 	addi	r2,r2,32
   4c978:	e0bffd15 	stw	r2,-12(fp)
   4c97c:	e0fffd17 	ldw	r3,-12(fp)
   4c980:	e0bffc17 	ldw	r2,-16(fp)
   4c984:	18bff836 	bltu	r3,r2,4c968 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   4c988:	e0bffe17 	ldw	r2,-8(fp)
   4c98c:	108007cc 	andi	r2,r2,31
   4c990:	1005003a 	cmpeq	r2,r2,zero
   4c994:	1000021e 	bne	r2,zero,4c9a0 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   4c998:	e0bffd17 	ldw	r2,-12(fp)
   4c99c:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   4c9a0:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   4c9a4:	e037883a 	mov	sp,fp
   4c9a8:	df000017 	ldw	fp,0(sp)
   4c9ac:	dec00104 	addi	sp,sp,4
   4c9b0:	f800283a 	ret

0004c9b4 <atexit>:
   4c9b4:	200b883a 	mov	r5,r4
   4c9b8:	000d883a 	mov	r6,zero
   4c9bc:	0009883a 	mov	r4,zero
   4c9c0:	000f883a 	mov	r7,zero
   4c9c4:	004ca741 	jmpi	4ca74 <__register_exitproc>

0004c9c8 <exit>:
   4c9c8:	defffe04 	addi	sp,sp,-8
   4c9cc:	000b883a 	mov	r5,zero
   4c9d0:	dc000015 	stw	r16,0(sp)
   4c9d4:	dfc00115 	stw	ra,4(sp)
   4c9d8:	2021883a 	mov	r16,r4
   4c9dc:	004cbac0 	call	4cbac <__call_exitprocs>
   4c9e0:	00900034 	movhi	r2,16384
   4c9e4:	10876d04 	addi	r2,r2,7604
   4c9e8:	11000017 	ldw	r4,0(r2)
   4c9ec:	20800f17 	ldw	r2,60(r4)
   4c9f0:	10000126 	beq	r2,zero,4c9f8 <exit+0x30>
   4c9f4:	103ee83a 	callr	r2
   4c9f8:	8009883a 	mov	r4,r16
   4c9fc:	004cd9c0 	call	4cd9c <_exit>

0004ca00 <memcmp>:
   4ca00:	00c000c4 	movi	r3,3
   4ca04:	1980032e 	bgeu	r3,r6,4ca14 <memcmp+0x14>
   4ca08:	2144b03a 	or	r2,r4,r5
   4ca0c:	10c4703a 	and	r2,r2,r3
   4ca10:	10000f26 	beq	r2,zero,4ca50 <memcmp+0x50>
   4ca14:	31ffffc4 	addi	r7,r6,-1
   4ca18:	3000061e 	bne	r6,zero,4ca34 <memcmp+0x34>
   4ca1c:	00000a06 	br	4ca48 <memcmp+0x48>
   4ca20:	39ffffc4 	addi	r7,r7,-1
   4ca24:	00bfffc4 	movi	r2,-1
   4ca28:	21000044 	addi	r4,r4,1
   4ca2c:	29400044 	addi	r5,r5,1
   4ca30:	38800526 	beq	r7,r2,4ca48 <memcmp+0x48>
   4ca34:	20c00003 	ldbu	r3,0(r4)
   4ca38:	28800003 	ldbu	r2,0(r5)
   4ca3c:	18bff826 	beq	r3,r2,4ca20 <memcmp+0x20>
   4ca40:	1885c83a 	sub	r2,r3,r2
   4ca44:	f800283a 	ret
   4ca48:	0005883a 	mov	r2,zero
   4ca4c:	f800283a 	ret
   4ca50:	180f883a 	mov	r7,r3
   4ca54:	20c00017 	ldw	r3,0(r4)
   4ca58:	28800017 	ldw	r2,0(r5)
   4ca5c:	18bfed1e 	bne	r3,r2,4ca14 <memcmp+0x14>
   4ca60:	31bfff04 	addi	r6,r6,-4
   4ca64:	21000104 	addi	r4,r4,4
   4ca68:	29400104 	addi	r5,r5,4
   4ca6c:	39bff936 	bltu	r7,r6,4ca54 <memcmp+0x54>
   4ca70:	003fe806 	br	4ca14 <memcmp+0x14>

0004ca74 <__register_exitproc>:
   4ca74:	defffa04 	addi	sp,sp,-24
   4ca78:	00900034 	movhi	r2,16384
   4ca7c:	10876d04 	addi	r2,r2,7604
   4ca80:	dc000015 	stw	r16,0(sp)
   4ca84:	14000017 	ldw	r16,0(r2)
   4ca88:	dd000415 	stw	r20,16(sp)
   4ca8c:	2829883a 	mov	r20,r5
   4ca90:	81405217 	ldw	r5,328(r16)
   4ca94:	dcc00315 	stw	r19,12(sp)
   4ca98:	dc800215 	stw	r18,8(sp)
   4ca9c:	dc400115 	stw	r17,4(sp)
   4caa0:	dfc00515 	stw	ra,20(sp)
   4caa4:	2023883a 	mov	r17,r4
   4caa8:	3027883a 	mov	r19,r6
   4caac:	3825883a 	mov	r18,r7
   4cab0:	28002526 	beq	r5,zero,4cb48 <__register_exitproc+0xd4>
   4cab4:	29000117 	ldw	r4,4(r5)
   4cab8:	008007c4 	movi	r2,31
   4cabc:	11002716 	blt	r2,r4,4cb5c <__register_exitproc+0xe8>
   4cac0:	8800101e 	bne	r17,zero,4cb04 <__register_exitproc+0x90>
   4cac4:	2105883a 	add	r2,r4,r4
   4cac8:	1085883a 	add	r2,r2,r2
   4cacc:	20c00044 	addi	r3,r4,1
   4cad0:	1145883a 	add	r2,r2,r5
   4cad4:	0009883a 	mov	r4,zero
   4cad8:	15000215 	stw	r20,8(r2)
   4cadc:	28c00115 	stw	r3,4(r5)
   4cae0:	2005883a 	mov	r2,r4
   4cae4:	dfc00517 	ldw	ra,20(sp)
   4cae8:	dd000417 	ldw	r20,16(sp)
   4caec:	dcc00317 	ldw	r19,12(sp)
   4caf0:	dc800217 	ldw	r18,8(sp)
   4caf4:	dc400117 	ldw	r17,4(sp)
   4caf8:	dc000017 	ldw	r16,0(sp)
   4cafc:	dec00604 	addi	sp,sp,24
   4cb00:	f800283a 	ret
   4cb04:	29802204 	addi	r6,r5,136
   4cb08:	00800044 	movi	r2,1
   4cb0c:	110e983a 	sll	r7,r2,r4
   4cb10:	30c04017 	ldw	r3,256(r6)
   4cb14:	2105883a 	add	r2,r4,r4
   4cb18:	1085883a 	add	r2,r2,r2
   4cb1c:	1185883a 	add	r2,r2,r6
   4cb20:	19c6b03a 	or	r3,r3,r7
   4cb24:	14802015 	stw	r18,128(r2)
   4cb28:	14c00015 	stw	r19,0(r2)
   4cb2c:	00800084 	movi	r2,2
   4cb30:	30c04015 	stw	r3,256(r6)
   4cb34:	88bfe31e 	bne	r17,r2,4cac4 <__register_exitproc+0x50>
   4cb38:	30804117 	ldw	r2,260(r6)
   4cb3c:	11c4b03a 	or	r2,r2,r7
   4cb40:	30804115 	stw	r2,260(r6)
   4cb44:	003fdf06 	br	4cac4 <__register_exitproc+0x50>
   4cb48:	00900034 	movhi	r2,16384
   4cb4c:	1087d304 	addi	r2,r2,8012
   4cb50:	100b883a 	mov	r5,r2
   4cb54:	80805215 	stw	r2,328(r16)
   4cb58:	003fd606 	br	4cab4 <__register_exitproc+0x40>
   4cb5c:	00800034 	movhi	r2,0
   4cb60:	10800004 	addi	r2,r2,0
   4cb64:	1000021e 	bne	r2,zero,4cb70 <__register_exitproc+0xfc>
   4cb68:	013fffc4 	movi	r4,-1
   4cb6c:	003fdc06 	br	4cae0 <__register_exitproc+0x6c>
   4cb70:	01006404 	movi	r4,400
   4cb74:	103ee83a 	callr	r2
   4cb78:	1007883a 	mov	r3,r2
   4cb7c:	103ffa26 	beq	r2,zero,4cb68 <__register_exitproc+0xf4>
   4cb80:	80805217 	ldw	r2,328(r16)
   4cb84:	180b883a 	mov	r5,r3
   4cb88:	18000115 	stw	zero,4(r3)
   4cb8c:	18800015 	stw	r2,0(r3)
   4cb90:	80c05215 	stw	r3,328(r16)
   4cb94:	18006215 	stw	zero,392(r3)
   4cb98:	18006315 	stw	zero,396(r3)
   4cb9c:	0009883a 	mov	r4,zero
   4cba0:	883fc826 	beq	r17,zero,4cac4 <__register_exitproc+0x50>
   4cba4:	003fd706 	br	4cb04 <__register_exitproc+0x90>

0004cba8 <register_fini>:
   4cba8:	f800283a 	ret

0004cbac <__call_exitprocs>:
   4cbac:	00900034 	movhi	r2,16384
   4cbb0:	10876d04 	addi	r2,r2,7604
   4cbb4:	10800017 	ldw	r2,0(r2)
   4cbb8:	defff304 	addi	sp,sp,-52
   4cbbc:	df000b15 	stw	fp,44(sp)
   4cbc0:	d8800115 	stw	r2,4(sp)
   4cbc4:	00800034 	movhi	r2,0
   4cbc8:	10800004 	addi	r2,r2,0
   4cbcc:	1005003a 	cmpeq	r2,r2,zero
   4cbd0:	d8800215 	stw	r2,8(sp)
   4cbd4:	d8800117 	ldw	r2,4(sp)
   4cbd8:	dd400815 	stw	r21,32(sp)
   4cbdc:	dd000715 	stw	r20,28(sp)
   4cbe0:	10805204 	addi	r2,r2,328
   4cbe4:	dfc00c15 	stw	ra,48(sp)
   4cbe8:	ddc00a15 	stw	r23,40(sp)
   4cbec:	dd800915 	stw	r22,36(sp)
   4cbf0:	dcc00615 	stw	r19,24(sp)
   4cbf4:	dc800515 	stw	r18,20(sp)
   4cbf8:	dc400415 	stw	r17,16(sp)
   4cbfc:	dc000315 	stw	r16,12(sp)
   4cc00:	282b883a 	mov	r21,r5
   4cc04:	2039883a 	mov	fp,r4
   4cc08:	d8800015 	stw	r2,0(sp)
   4cc0c:	2829003a 	cmpeq	r20,r5,zero
   4cc10:	d8800117 	ldw	r2,4(sp)
   4cc14:	14405217 	ldw	r17,328(r2)
   4cc18:	88001026 	beq	r17,zero,4cc5c <__call_exitprocs+0xb0>
   4cc1c:	ddc00017 	ldw	r23,0(sp)
   4cc20:	88800117 	ldw	r2,4(r17)
   4cc24:	8c802204 	addi	r18,r17,136
   4cc28:	143fffc4 	addi	r16,r2,-1
   4cc2c:	80000916 	blt	r16,zero,4cc54 <__call_exitprocs+0xa8>
   4cc30:	05bfffc4 	movi	r22,-1
   4cc34:	a000151e 	bne	r20,zero,4cc8c <__call_exitprocs+0xe0>
   4cc38:	8409883a 	add	r4,r16,r16
   4cc3c:	2105883a 	add	r2,r4,r4
   4cc40:	1485883a 	add	r2,r2,r18
   4cc44:	10c02017 	ldw	r3,128(r2)
   4cc48:	a8c01126 	beq	r21,r3,4cc90 <__call_exitprocs+0xe4>
   4cc4c:	843fffc4 	addi	r16,r16,-1
   4cc50:	85bff81e 	bne	r16,r22,4cc34 <__call_exitprocs+0x88>
   4cc54:	d8800217 	ldw	r2,8(sp)
   4cc58:	10003126 	beq	r2,zero,4cd20 <__call_exitprocs+0x174>
   4cc5c:	dfc00c17 	ldw	ra,48(sp)
   4cc60:	df000b17 	ldw	fp,44(sp)
   4cc64:	ddc00a17 	ldw	r23,40(sp)
   4cc68:	dd800917 	ldw	r22,36(sp)
   4cc6c:	dd400817 	ldw	r21,32(sp)
   4cc70:	dd000717 	ldw	r20,28(sp)
   4cc74:	dcc00617 	ldw	r19,24(sp)
   4cc78:	dc800517 	ldw	r18,20(sp)
   4cc7c:	dc400417 	ldw	r17,16(sp)
   4cc80:	dc000317 	ldw	r16,12(sp)
   4cc84:	dec00d04 	addi	sp,sp,52
   4cc88:	f800283a 	ret
   4cc8c:	8409883a 	add	r4,r16,r16
   4cc90:	88c00117 	ldw	r3,4(r17)
   4cc94:	2105883a 	add	r2,r4,r4
   4cc98:	1445883a 	add	r2,r2,r17
   4cc9c:	18ffffc4 	addi	r3,r3,-1
   4cca0:	11800217 	ldw	r6,8(r2)
   4cca4:	1c001526 	beq	r3,r16,4ccfc <__call_exitprocs+0x150>
   4cca8:	10000215 	stw	zero,8(r2)
   4ccac:	303fe726 	beq	r6,zero,4cc4c <__call_exitprocs+0xa0>
   4ccb0:	00c00044 	movi	r3,1
   4ccb4:	1c06983a 	sll	r3,r3,r16
   4ccb8:	90804017 	ldw	r2,256(r18)
   4ccbc:	8cc00117 	ldw	r19,4(r17)
   4ccc0:	1884703a 	and	r2,r3,r2
   4ccc4:	10001426 	beq	r2,zero,4cd18 <__call_exitprocs+0x16c>
   4ccc8:	90804117 	ldw	r2,260(r18)
   4cccc:	1884703a 	and	r2,r3,r2
   4ccd0:	10000c1e 	bne	r2,zero,4cd04 <__call_exitprocs+0x158>
   4ccd4:	2105883a 	add	r2,r4,r4
   4ccd8:	1485883a 	add	r2,r2,r18
   4ccdc:	11400017 	ldw	r5,0(r2)
   4cce0:	e009883a 	mov	r4,fp
   4cce4:	303ee83a 	callr	r6
   4cce8:	88800117 	ldw	r2,4(r17)
   4ccec:	98bfc81e 	bne	r19,r2,4cc10 <__call_exitprocs+0x64>
   4ccf0:	b8800017 	ldw	r2,0(r23)
   4ccf4:	147fd526 	beq	r2,r17,4cc4c <__call_exitprocs+0xa0>
   4ccf8:	003fc506 	br	4cc10 <__call_exitprocs+0x64>
   4ccfc:	8c000115 	stw	r16,4(r17)
   4cd00:	003fea06 	br	4ccac <__call_exitprocs+0x100>
   4cd04:	2105883a 	add	r2,r4,r4
   4cd08:	1485883a 	add	r2,r2,r18
   4cd0c:	11000017 	ldw	r4,0(r2)
   4cd10:	303ee83a 	callr	r6
   4cd14:	003ff406 	br	4cce8 <__call_exitprocs+0x13c>
   4cd18:	303ee83a 	callr	r6
   4cd1c:	003ff206 	br	4cce8 <__call_exitprocs+0x13c>
   4cd20:	88800117 	ldw	r2,4(r17)
   4cd24:	1000081e 	bne	r2,zero,4cd48 <__call_exitprocs+0x19c>
   4cd28:	89000017 	ldw	r4,0(r17)
   4cd2c:	20000726 	beq	r4,zero,4cd4c <__call_exitprocs+0x1a0>
   4cd30:	b9000015 	stw	r4,0(r23)
   4cd34:	8809883a 	mov	r4,r17
   4cd38:	00000000 	call	0 <__reset-0x40000>
   4cd3c:	bc400017 	ldw	r17,0(r23)
   4cd40:	883fb71e 	bne	r17,zero,4cc20 <__call_exitprocs+0x74>
   4cd44:	003fc506 	br	4cc5c <__call_exitprocs+0xb0>
   4cd48:	89000017 	ldw	r4,0(r17)
   4cd4c:	882f883a 	mov	r23,r17
   4cd50:	2023883a 	mov	r17,r4
   4cd54:	883fb21e 	bne	r17,zero,4cc20 <__call_exitprocs+0x74>
   4cd58:	003fc006 	br	4cc5c <__call_exitprocs+0xb0>

0004cd5c <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
   4cd5c:	defffd04 	addi	sp,sp,-12
   4cd60:	df000215 	stw	fp,8(sp)
   4cd64:	df000204 	addi	fp,sp,8
   4cd68:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
   4cd6c:	e0bfff17 	ldw	r2,-4(fp)
   4cd70:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   4cd74:	e0bffe17 	ldw	r2,-8(fp)
   4cd78:	1005003a 	cmpeq	r2,r2,zero
   4cd7c:	1000021e 	bne	r2,zero,4cd88 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
   4cd80:	002af070 	cmpltui	zero,zero,43969
   4cd84:	00000106 	br	4cd8c <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
   4cd88:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
   4cd8c:	e037883a 	mov	sp,fp
   4cd90:	df000017 	ldw	fp,0(sp)
   4cd94:	dec00104 	addi	sp,sp,4
   4cd98:	f800283a 	ret

0004cd9c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   4cd9c:	defffd04 	addi	sp,sp,-12
   4cda0:	dfc00215 	stw	ra,8(sp)
   4cda4:	df000115 	stw	fp,4(sp)
   4cda8:	df000104 	addi	fp,sp,4
   4cdac:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
   4cdb0:	e13fff17 	ldw	r4,-4(fp)
   4cdb4:	004cd5c0 	call	4cd5c <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   4cdb8:	003fff06 	br	4cdb8 <_exit+0x1c>
   4cdbc:	0004cba8 	cmpgeui	zero,zero,4910
