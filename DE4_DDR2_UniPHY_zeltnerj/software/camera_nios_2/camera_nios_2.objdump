
camera_nios_2.elf:     file format elf32-littlenios2
camera_nios_2.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000401b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00040000 paddr 0x00040000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00040020 paddr 0x00040020 align 2**12
         filesz 0x00005fbc memsz 0x00005fbc flags r-x
    LOAD off    0x00007000 vaddr 0x40000000 paddr 0x00045fdc align 2**12
         filesz 0x00001aa0 memsz 0x00001d80 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00040000  00040000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00040020  00040020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00005e28  000401b4  000401b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000058  40000000  00045fdc  00007000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a48  40000058  00046034  00007058  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002e0  40001aa0  00047a7c  00008aa0  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00008aa0  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000998  00000000  00000000  00008ac8  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00000e2a  00000000  00000000  00009460  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0001a4c1  00000000  00000000  0000a28a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000522c  00000000  00000000  0002474b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000d5a3  00000000  00000000  00029977  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001130  00000000  00000000  00036f1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000017a3  00000000  00000000  0003804c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004086  00000000  00000000  000397ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  0003d878  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000002f8  00000000  00000000  0003d8d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00040234  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000a  00000000  00000000  00040237  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00040241  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00040242  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00040243  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00040247  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0004024b  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0004024f  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  00040258  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  00040261  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000008  00000000  00000000  0004026a  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000034  00000000  00000000  00040272  2**0
                  CONTENTS, READONLY
 29 .jdi          00004d22  00000000  00000000  000402a6  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     000ad276  00000000  00000000  00044fc8  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00040000 l    d  .entry	00000000 .entry
00040020 l    d  .exceptions	00000000 .exceptions
000401b4 l    d  .text	00000000 .text
40000000 l    d  .rodata	00000000 .rodata
40000058 l    d  .rwdata	00000000 .rwdata
40001aa0 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000401fc l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 camera.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 impure.c
40000058 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00042074 l     F .text	00000058 std
00042180 l     F .text	00000008 __fp_lock
00042188 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 alt_close.c
00043148 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
000431a8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
000432a8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
000433c8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
000434a8 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00043604 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00043830 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
40001a90 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00043afc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
40000a08 l     O .rwdata	00001060 jtag_uart
00043bec l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00043e2c l     F .text	00000228 altera_avalon_jtag_uart_irq
00044054 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00044908 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00044da0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000451c4 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00045300 l     F .text	000000dc alt_file_locked
00045564 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00045c78 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 lib2-divmod.c
00045e2c l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 alt_exit.c
00045f78 l     F .text	00000040 alt_sim_halt
00042eec g     F .text	00000070 _isatty_r
00043664 g     F .text	0000006c alt_main
0004073c g     F .text	000000a0 _puts_r
40001af0 g     O .bss	00000100 alt_irq
00042f5c g     F .text	00000078 _lseek_r
00046034 g       *ABS*	00000000 __flash_rwdata_start
40001d80 g       *ABS*	00000000 __alt_heap_start
00042b28 g     F .text	00000068 __sseek
000420dc g     F .text	000000a4 __sinit
000421dc g     F .text	00000068 __sfmoreglue
000436f0 g     F .text	00000020 __malloc_unlock
000415c4 g     F .text	000000e0 memmove
000421cc g     F .text	00000010 _cleanup
00000000  w      *UND*	00000000 __errno
00040000 g     F .entry	0000001c __reset
00040020 g       *ABS*	00000000 __flash_exceptions_start
00042e78 g     F .text	00000074 _fstat_r
40001aac g     O .bss	00000004 errno
40001ab4 g     O .bss	00000004 alt_argv
40009a68 g       *ABS*	00000000 _gp
000439ac g     F .text	00000030 usleep
40000888 g     O .rwdata	00000180 alt_fd_list
00045788 g     F .text	00000094 alt_find_dev
00041524 g     F .text	000000a0 memcpy
000421c0 g     F .text	0000000c _cleanup_r
00045288 g     F .text	00000078 alt_io_redirect
00045fdc g       *ABS*	00000000 __DTOR_END__
000407dc g     F .text	00000014 puts
0004426c g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00045f68 g     F .text	00000008 __udivsi3
00043308 g     F .text	000000c0 isatty
000459f4 g     F .text	00000090 alt_icache_flush
40001aa0 g     O .bss	00000004 __malloc_top_pad
00040864 g     F .text	0000049c __sfvwrite_r
00041c98 g     F .text	00000070 _sbrk_r
00042fd4 g     F .text	00000078 _read_r
40001a88 g     O .rwdata	00000004 alt_max_fd
00042d54 g     F .text	00000110 _fclose_r
00042040 g     F .text	00000034 fflush
40001aa4 g     O .bss	00000004 __malloc_max_sbrked_mem
00043514 g     F .text	000000f0 lseek
40001a6c g     O .rwdata	00000004 _global_impure_ptr
000416a4 g     F .text	000005f4 _realloc_r
40001d80 g       *ABS*	00000000 __bss_end
000450cc g     F .text	000000f8 alt_iic_isr_register
0004565c g     F .text	0000010c alt_tick
000421a8 g     F .text	00000018 __fp_lock_all
00045084 g     F .text	00000048 alt_ic_irq_enabled
000455c4 g     F .text	00000098 alt_alarm_stop
40001abc g     O .bss	00000004 alt_irq_active
000400ec g     F .exceptions	000000c8 alt_irq_handler
40000860 g     O .rwdata	00000028 alt_dev_null
00044ca8 g     F .text	00000044 alt_dcache_flush_all
40001aa0 g       *ABS*	00000000 __ram_rwdata_end
00040000 g       *ABS*	00000000 __alt_mem_onchip_memory
40001a80 g     O .rwdata	00000008 alt_dev_list
000439dc g     F .text	00000120 write
40000058 g       *ABS*	00000000 __ram_rodata_end
000431d4 g     F .text	000000d4 fstat
00045f70 g     F .text	00000008 __umodsi3
40001d80 g       *ABS*	00000000 end
00043d6c g     F .text	000000c0 altera_avalon_jtag_uart_init
00045fd8 g       *ABS*	00000000 __CTOR_LIST__
80000000 g       *ABS*	00000000 __alt_stack_pointer
00044978 g     F .text	00000090 alt_avalon_timer_sc_init
00044490 g     F .text	00000240 altera_avalon_jtag_uart_write
000420cc g     F .text	00000004 __sfp_lock_acquire
00041440 g     F .text	000000e4 memchr
00042460 g     F .text	00000314 _free_r
00045c7c g     F .text	000001b0 __call_exitprocs
40001a74 g     O .rwdata	00000004 __malloc_sbrk_base
000401b4 g     F .text	0000004c _start
40001ac0 g     O .bss	00000004 _alt_tick_rate
000446d0 g     F .text	00000238 alt_avalon_spi_command
40001ac4 g     O .bss	00000004 _alt_nticks
00043710 g     F .text	00000120 read
00043b90 g     F .text	0000005c alt_sys_init
00045b44 g     F .text	00000134 __register_exitproc
00044104 g     F .text	00000074 altera_avalon_jtag_uart_close
40000058 g       *ABS*	00000000 __ram_rwdata_start
40000000 g       *ABS*	00000000 __ram_rodata_start
40001ac8 g     O .bss	00000028 __malloc_current_mallinfo
00043c24 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0004593c g     F .text	000000b8 alt_get_fd
00044b5c g     F .text	0000014c alt_busy_sleep
00042ce4 g     F .text	00000070 _close_r
00045ad0 g     F .text	00000074 memcmp
00043cd4 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
40001d80 g       *ABS*	00000000 __alt_stack_base
00043d1c g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00041d08 g     F .text	0000013c __swsetup_r
00042244 g     F .text	000000f0 __sfp
40000458 g     O .rwdata	00000408 __malloc_av_
000420d8 g     F .text	00000004 __sinit_lock_release
00042c0c g     F .text	00000060 __sread
0004581c g     F .text	00000120 alt_find_file
00044cec g     F .text	000000b4 alt_dev_llist_insert
000436d0 g     F .text	00000020 __malloc_lock
000438f0 g     F .text	000000bc sbrk
00041e44 g     F .text	000001fc _fflush_r
40001aa0 g       *ABS*	00000000 __bss_start
00042a88 g     F .text	00000098 memset
0004066c g     F .text	000000d0 main
40001ab8 g     O .bss	00000004 alt_envp
40001aa8 g     O .bss	00000004 __malloc_max_total_mem
00043c7c g     F .text	00000058 altera_avalon_jtag_uart_write_fd
00042b20 g     F .text	00000008 __sclose
80000000 g       *ABS*	00000000 __alt_heap_limit
00042e64 g     F .text	00000014 fclose
40001bf0 g     O .bss	00000190 _atexit0
00040d00 g     F .text	00000740 _malloc_r
40001a8c g     O .rwdata	00000004 alt_errno
40000000 g       *ABS*	00000000 __alt_mem_mem_if_ddr2_emif
0004283c g     F .text	000000b8 _fwalk
00045ea8 g     F .text	00000060 __divsi3
00042334 g     F .text	0000012c _malloc_trim_r
00045fdc g       *ABS*	00000000 __CTOR_END__
00045fdc g       *ABS*	00000000 __flash_rodata_start
00045fdc g       *ABS*	00000000 __DTOR_LIST__
00043b5c g     F .text	00000034 alt_irq_init
00043890 g     F .text	00000060 alt_release_fd
00045a84 g     F .text	00000014 atexit
00042c6c g     F .text	00000078 _write_r
40001a68 g     O .rwdata	00000004 _impure_ptr
40001ab0 g     O .bss	00000004 alt_argc
00044e64 g     F .text	00000064 _do_dtors
00040020 g       .exceptions	00000000 alt_irq_entry
00042190 g     F .text	00000018 __fp_unlock_all
40001a78 g     O .rwdata	00000008 alt_fs_list
00040020 g       *ABS*	00000000 __ram_exceptions_start
00044ef8 g     F .text	00000050 alt_ic_isr_register
40001aa0 g       *ABS*	00000000 _edata
40001d80 g       *ABS*	00000000 _end
000401b4 g       *ABS*	00000000 __ram_exceptions_end
00044178 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00044fe4 g     F .text	000000a0 alt_ic_irq_disable
00042b90 g     F .text	0000007c __swrite
40001a70 g     O .rwdata	00000004 __malloc_trim_threshold
00045768 g     F .text	00000020 altera_nios2_qsys_irq_init
00045a98 g     F .text	00000038 exit
00042774 g     F .text	000000c8 _fwalk_reent
00045f08 g     F .text	00000060 __modsi3
80000000 g       *ABS*	00000000 __alt_data_end
00040020 g     F .exceptions	00000000 alt_exception
000420d0 g     F .text	00000004 __sfp_lock_release
00045fb8 g     F .text	00000020 _exit
00044a08 g     F .text	00000154 alt_alarm_start
000428f4 g     F .text	00000194 __smakebuf_r
000407f0 g     F .text	00000074 strlen
000453dc g     F .text	00000188 open
00044ec8 g     F .text	00000030 alt_icache_flush_all
40001a94 g     O .rwdata	00000004 alt_priority_mask
00044f48 g     F .text	0000009c alt_ic_irq_enable
00040200 g     F .text	0000046c camera_init
40001a98 g     O .rwdata	00000008 alt_alarm_list
00044e00 g     F .text	00000064 _do_ctors
0004304c g     F .text	000000fc close
00043428 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free
000420d4 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00040000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   40000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   40004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   40008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   4000c:	00bffd16 	blt	zero,r2,40004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   40010:	00400134 	movhi	at,4
    ori r1, r1, %lo(_start)
   40014:	08406d14 	ori	at,at,436
    jmp r1
   40018:	0800683a 	jmp	at
   4001c:	00000000 	call	0 <__reset-0x40000>

Disassembly of section .exceptions:

00040020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
   40020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
   40024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
   40028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   4002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   40030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   40034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   40038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   4003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   40040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
   40044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
   40048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   4004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   40050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   40054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   40058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   4005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   40060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   40064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   40068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   4006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   40070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   40074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   40078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   4007c:	10000326 	beq	r2,zero,4008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   40080:	20000226 	beq	r4,zero,4008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   40084:	00400ec0 	call	400ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   40088:	00000306 	br	40098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   4008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   40090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   40094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   40098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   4009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   400a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   400a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   400a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   400ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   400b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   400b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   400b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   400bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   400c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
   400c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   400c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   400cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   400d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   400d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   400d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   400dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   400e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
   400e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   400e8:	ef80083a 	eret

000400ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   400ec:	defff904 	addi	sp,sp,-28
   400f0:	dfc00615 	stw	ra,24(sp)
   400f4:	df000515 	stw	fp,20(sp)
   400f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   400fc:	0005313a 	rdctl	r2,ipending
   40100:	e0bffc15 	stw	r2,-16(fp)

  return active;
   40104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   40108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
   4010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   40110:	00800044 	movi	r2,1
   40114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   40118:	e0ffff17 	ldw	r3,-4(fp)
   4011c:	e0bffe17 	ldw	r2,-8(fp)
   40120:	1884703a 	and	r2,r3,r2
   40124:	1005003a 	cmpeq	r2,r2,zero
   40128:	1000161e 	bne	r2,zero,40184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   4012c:	e0bffd17 	ldw	r2,-12(fp)
   40130:	00d00034 	movhi	r3,16384
   40134:	18c6bc04 	addi	r3,r3,6896
   40138:	100490fa 	slli	r2,r2,3
   4013c:	10c5883a 	add	r2,r2,r3
   40140:	11400017 	ldw	r5,0(r2)
   40144:	e0bffd17 	ldw	r2,-12(fp)
   40148:	00d00034 	movhi	r3,16384
   4014c:	18c6bc04 	addi	r3,r3,6896
   40150:	100490fa 	slli	r2,r2,3
   40154:	10c5883a 	add	r2,r2,r3
   40158:	10800104 	addi	r2,r2,4
   4015c:	11000017 	ldw	r4,0(r2)
   40160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   40164:	0005313a 	rdctl	r2,ipending
   40168:	e0bffb15 	stw	r2,-20(fp)

  return active;
   4016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
   40170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
   40174:	e0bfff17 	ldw	r2,-4(fp)
   40178:	1004c03a 	cmpne	r2,r2,zero
   4017c:	103fe31e 	bne	r2,zero,4010c <alt_irq_handler+0x20>
   40180:	00000706 	br	401a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   40184:	e0bffe17 	ldw	r2,-8(fp)
   40188:	1085883a 	add	r2,r2,r2
   4018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
   40190:	e0bffd17 	ldw	r2,-12(fp)
   40194:	10800044 	addi	r2,r2,1
   40198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   4019c:	003fde06 	br	40118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   401a0:	e037883a 	mov	sp,fp
   401a4:	dfc00117 	ldw	ra,4(sp)
   401a8:	df000017 	ldw	fp,0(sp)
   401ac:	dec00204 	addi	sp,sp,8
   401b0:	f800283a 	ret

Disassembly of section .text:

000401b4 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
   401b4:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
   401b8:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
   401bc:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   401c0:	00bffd16 	blt	zero,r2,401b8 <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   401c4:	06e00034 	movhi	sp,32768
    ori sp, sp, %lo(__alt_stack_pointer)
   401c8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
   401cc:	06900034 	movhi	gp,16384
    ori gp, gp, %lo(_gp)
   401d0:	d6a69a14 	ori	gp,gp,39528
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   401d4:	00900034 	movhi	r2,16384
    ori r2, r2, %lo(__bss_start)
   401d8:	1086a814 	ori	r2,r2,6816

    movhi r3, %hi(__bss_end)
   401dc:	00d00034 	movhi	r3,16384
    ori r3, r3, %lo(__bss_end)
   401e0:	18c76014 	ori	r3,r3,7552

    beq r2, r3, 1f
   401e4:	10c00326 	beq	r2,r3,401f4 <_start+0x40>

0:
    stw zero, (r2)
   401e8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   401ec:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   401f0:	10fffd36 	bltu	r2,r3,401e8 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   401f4:	00434280 	call	43428 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   401f8:	00436640 	call	43664 <alt_main>

000401fc <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   401fc:	003fff06 	br	401fc <alt_after_alt_main>

00040200 <camera_init>:
 */

#include "system.h"
#include "altera_avalon_spi.h"

void camera_init(alt_u32 SPI_BASE) {
   40200:	defff904 	addi	sp,sp,-28
   40204:	dfc00615 	stw	ra,24(sp)
   40208:	df000515 	stw	fp,20(sp)
   4020c:	df000504 	addi	fp,sp,20
   40210:	e13fff15 	stw	r4,-4(fp)

	alt_u8 sentwrite[2];
	alt_u8 received = 0;
   40214:	e03ffe85 	stb	zero,-6(fp)

	sentwrite[1] = 44;
   40218:	00800b04 	movi	r2,44
   4021c:	e0bffe45 	stb	r2,-7(fp)
	sentwrite[0] = 103 | 0x80;
   40220:	00bff9c4 	movi	r2,-25
   40224:	e0bffe05 	stb	r2,-8(fp)
	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   40228:	d8000015 	stw	zero,0(sp)
   4022c:	e0bffe84 	addi	r2,fp,-6
   40230:	d8800115 	stw	r2,4(sp)
   40234:	d8000215 	stw	zero,8(sp)
   40238:	e13fff17 	ldw	r4,-4(fp)
   4023c:	000b883a 	mov	r5,zero
   40240:	01800084 	movi	r6,2
   40244:	e1fffe04 	addi	r7,fp,-8
   40248:	00446d00 	call	446d0 <alt_avalon_spi_command>

	sentwrite[1] = 4;
   4024c:	00800104 	movi	r2,4
   40250:	e0bffe45 	stb	r2,-7(fp)
	sentwrite[0] = 84 | 0x80;
   40254:	00bff504 	movi	r2,-44
   40258:	e0bffe05 	stb	r2,-8(fp)
	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   4025c:	d8000015 	stw	zero,0(sp)
   40260:	e0bffe84 	addi	r2,fp,-6
   40264:	d8800115 	stw	r2,4(sp)
   40268:	d8000215 	stw	zero,8(sp)
   4026c:	e13fff17 	ldw	r4,-4(fp)
   40270:	000b883a 	mov	r5,zero
   40274:	01800084 	movi	r6,2
   40278:	e1fffe04 	addi	r7,fp,-8
   4027c:	00446d00 	call	446d0 <alt_avalon_spi_command>

	sentwrite[1] = 1;
   40280:	00800044 	movi	r2,1
   40284:	e0bffe45 	stb	r2,-7(fp)
	sentwrite[0] = 85 | 0x80;
   40288:	00bff544 	movi	r2,-43
   4028c:	e0bffe05 	stb	r2,-8(fp)
	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   40290:	d8000015 	stw	zero,0(sp)
   40294:	e0bffe84 	addi	r2,fp,-6
   40298:	d8800115 	stw	r2,4(sp)
   4029c:	d8000215 	stw	zero,8(sp)
   402a0:	e13fff17 	ldw	r4,-4(fp)
   402a4:	000b883a 	mov	r5,zero
   402a8:	01800084 	movi	r6,2
   402ac:	e1fffe04 	addi	r7,fp,-8
   402b0:	00446d00 	call	446d0 <alt_avalon_spi_command>

	sentwrite[1] = 64;
   402b4:	00801004 	movi	r2,64
   402b8:	e0bffe45 	stb	r2,-7(fp)
	sentwrite[0] = 88 | 0x80;
   402bc:	00bff604 	movi	r2,-40
   402c0:	e0bffe05 	stb	r2,-8(fp)
	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   402c4:	d8000015 	stw	zero,0(sp)
   402c8:	e0bffe84 	addi	r2,fp,-6
   402cc:	d8800115 	stw	r2,4(sp)
   402d0:	d8000215 	stw	zero,8(sp)
   402d4:	e13fff17 	ldw	r4,-4(fp)
   402d8:	000b883a 	mov	r5,zero
   402dc:	01800084 	movi	r6,2
   402e0:	e1fffe04 	addi	r7,fp,-8
   402e4:	00446d00 	call	446d0 <alt_avalon_spi_command>

	sentwrite[1] = 64;
   402e8:	00801004 	movi	r2,64
   402ec:	e0bffe45 	stb	r2,-7(fp)
	sentwrite[0] = 91 | 0x80;
   402f0:	00bff6c4 	movi	r2,-37
   402f4:	e0bffe05 	stb	r2,-8(fp)
	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   402f8:	d8000015 	stw	zero,0(sp)
   402fc:	e0bffe84 	addi	r2,fp,-6
   40300:	d8800115 	stw	r2,4(sp)
   40304:	d8000215 	stw	zero,8(sp)
   40308:	e13fff17 	ldw	r4,-4(fp)
   4030c:	000b883a 	mov	r5,zero
   40310:	01800084 	movi	r6,2
   40314:	e1fffe04 	addi	r7,fp,-8
   40318:	00446d00 	call	446d0 <alt_avalon_spi_command>

	sentwrite[1] = 101;
   4031c:	00801944 	movi	r2,101
   40320:	e0bffe45 	stb	r2,-7(fp)
	sentwrite[0] = 94 | 0x80;
   40324:	00bff784 	movi	r2,-34
   40328:	e0bffe05 	stb	r2,-8(fp)
	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   4032c:	d8000015 	stw	zero,0(sp)
   40330:	e0bffe84 	addi	r2,fp,-6
   40334:	d8800115 	stw	r2,4(sp)
   40338:	d8000215 	stw	zero,8(sp)
   4033c:	e13fff17 	ldw	r4,-4(fp)
   40340:	000b883a 	mov	r5,zero
   40344:	01800084 	movi	r6,2
   40348:	e1fffe04 	addi	r7,fp,-8
   4034c:	00446d00 	call	446d0 <alt_avalon_spi_command>

	sentwrite[1] = 109;
   40350:	00801b44 	movi	r2,109
   40354:	e0bffe45 	stb	r2,-7(fp)
	sentwrite[0] = 98 | 0x80;
   40358:	00bff884 	movi	r2,-30
   4035c:	e0bffe05 	stb	r2,-8(fp)
	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   40360:	d8000015 	stw	zero,0(sp)
   40364:	e0bffe84 	addi	r2,fp,-6
   40368:	d8800115 	stw	r2,4(sp)
   4036c:	d8000215 	stw	zero,8(sp)
   40370:	e13fff17 	ldw	r4,-4(fp)
   40374:	000b883a 	mov	r5,zero
   40378:	01800084 	movi	r6,2
   4037c:	e1fffe04 	addi	r7,fp,-8
   40380:	00446d00 	call	446d0 <alt_avalon_spi_command>

	sentwrite[1] = 109;
   40384:	00801b44 	movi	r2,109
   40388:	e0bffe45 	stb	r2,-7(fp)
	sentwrite[0] = 99 | 0x80;
   4038c:	00bff8c4 	movi	r2,-29
   40390:	e0bffe05 	stb	r2,-8(fp)
	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   40394:	d8000015 	stw	zero,0(sp)
   40398:	e0bffe84 	addi	r2,fp,-6
   4039c:	d8800115 	stw	r2,4(sp)
   403a0:	d8000215 	stw	zero,8(sp)
   403a4:	e13fff17 	ldw	r4,-4(fp)
   403a8:	000b883a 	mov	r5,zero
   403ac:	01800084 	movi	r6,2
   403b0:	e1fffe04 	addi	r7,fp,-8
   403b4:	00446d00 	call	446d0 <alt_avalon_spi_command>

	sentwrite[1] = 106;
   403b8:	00801a84 	movi	r2,106
   403bc:	e0bffe45 	stb	r2,-7(fp)
	sentwrite[0] = 95 | 0x80;
   403c0:	00bff7c4 	movi	r2,-33
   403c4:	e0bffe05 	stb	r2,-8(fp)
	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   403c8:	d8000015 	stw	zero,0(sp)
   403cc:	e0bffe84 	addi	r2,fp,-6
   403d0:	d8800115 	stw	r2,4(sp)
   403d4:	d8000215 	stw	zero,8(sp)
   403d8:	e13fff17 	ldw	r4,-4(fp)
   403dc:	000b883a 	mov	r5,zero
   403e0:	01800084 	movi	r6,2
   403e4:	e1fffe04 	addi	r7,fp,-8
   403e8:	00446d00 	call	446d0 <alt_avalon_spi_command>

	sentwrite[1] = 1;
   403ec:	00800044 	movi	r2,1
   403f0:	e0bffe45 	stb	r2,-7(fp)
	sentwrite[0] = 117 | 0x80;
   403f4:	00bffd44 	movi	r2,-11
   403f8:	e0bffe05 	stb	r2,-8(fp)
	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   403fc:	d8000015 	stw	zero,0(sp)
   40400:	e0bffe84 	addi	r2,fp,-6
   40404:	d8800115 	stw	r2,4(sp)
   40408:	d8000215 	stw	zero,8(sp)
   4040c:	e13fff17 	ldw	r4,-4(fp)
   40410:	000b883a 	mov	r5,zero
   40414:	01800084 	movi	r6,2
   40418:	e1fffe04 	addi	r7,fp,-8
   4041c:	00446d00 	call	446d0 <alt_avalon_spi_command>

	sentwrite[1] = 1;
   40420:	00800044 	movi	r2,1
   40424:	e0bffe45 	stb	r2,-7(fp)
	sentwrite[0] = 115 | 0x80;
   40428:	00bffcc4 	movi	r2,-13
   4042c:	e0bffe05 	stb	r2,-8(fp)
	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   40430:	d8000015 	stw	zero,0(sp)
   40434:	e0bffe84 	addi	r2,fp,-6
   40438:	d8800115 	stw	r2,4(sp)
   4043c:	d8000215 	stw	zero,8(sp)
   40440:	e13fff17 	ldw	r4,-4(fp)
   40444:	000b883a 	mov	r5,zero
   40448:	01800084 	movi	r6,2
   4044c:	e1fffe04 	addi	r7,fp,-8
   40450:	00446d00 	call	446d0 <alt_avalon_spi_command>

	sentwrite[1] = 7;
   40454:	008001c4 	movi	r2,7
   40458:	e0bffe45 	stb	r2,-7(fp)
	sentwrite[0] = 82 | 0x80;
   4045c:	00bff484 	movi	r2,-46
   40460:	e0bffe05 	stb	r2,-8(fp)
	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   40464:	d8000015 	stw	zero,0(sp)
   40468:	e0bffe84 	addi	r2,fp,-6
   4046c:	d8800115 	stw	r2,4(sp)
   40470:	d8000215 	stw	zero,8(sp)
   40474:	e13fff17 	ldw	r4,-4(fp)
   40478:	000b883a 	mov	r5,zero
   4047c:	01800084 	movi	r6,2
   40480:	e1fffe04 	addi	r7,fp,-8
   40484:	00446d00 	call	446d0 <alt_avalon_spi_command>

	//adjusting registers for optimal performance
	sentwrite[1] = 44; //req:44, valid:40-55
   40488:	00800b04 	movi	r2,44
   4048c:	e0bffe45 	stb	r2,-7(fp)
	sentwrite[0] = 103 | 0x80;
   40490:	00bff9c4 	movi	r2,-25
   40494:	e0bffe05 	stb	r2,-8(fp)
	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   40498:	d8000015 	stw	zero,0(sp)
   4049c:	e0bffe84 	addi	r2,fp,-6
   404a0:	d8800115 	stw	r2,4(sp)
   404a4:	d8000215 	stw	zero,8(sp)
   404a8:	e13fff17 	ldw	r4,-4(fp)
   404ac:	000b883a 	mov	r5,zero
   404b0:	01800084 	movi	r6,2
   404b4:	e1fffe04 	addi	r7,fp,-8
   404b8:	00446d00 	call	446d0 <alt_avalon_spi_command>

	sentwrite[1] = 109; //req:109, valid:102-115
   404bc:	00801b44 	movi	r2,109
   404c0:	e0bffe45 	stb	r2,-7(fp)
	sentwrite[0] = 98 | 0x80;
   404c4:	00bff884 	movi	r2,-30
   404c8:	e0bffe05 	stb	r2,-8(fp)
	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   404cc:	d8000015 	stw	zero,0(sp)
   404d0:	e0bffe84 	addi	r2,fp,-6
   404d4:	d8800115 	stw	r2,4(sp)
   404d8:	d8000215 	stw	zero,8(sp)
   404dc:	e13fff17 	ldw	r4,-4(fp)
   404e0:	000b883a 	mov	r5,zero
   404e4:	01800084 	movi	r6,2
   404e8:	e1fffe04 	addi	r7,fp,-8
   404ec:	00446d00 	call	446d0 <alt_avalon_spi_command>

	sentwrite[1] = 109; //req:109, valid:102-115
   404f0:	00801b44 	movi	r2,109
   404f4:	e0bffe45 	stb	r2,-7(fp)
	sentwrite[0] = 99 | 0x80;
   404f8:	00bff8c4 	movi	r2,-29
   404fc:	e0bffe05 	stb	r2,-8(fp)
	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   40500:	d8000015 	stw	zero,0(sp)
   40504:	e0bffe84 	addi	r2,fp,-6
   40508:	d8800115 	stw	r2,4(sp)
   4050c:	d8000215 	stw	zero,8(sp)
   40510:	e13fff17 	ldw	r4,-4(fp)
   40514:	000b883a 	mov	r5,zero
   40518:	01800084 	movi	r6,2
   4051c:	e1fffe04 	addi	r7,fp,-8
   40520:	00446d00 	call	446d0 <alt_avalon_spi_command>

	//channel mode 0=16 channels; 1=8 channels; 2=4 channels; 3=2 channels
	sentwrite[1] = 2;
   40524:	00800084 	movi	r2,2
   40528:	e0bffe45 	stb	r2,-7(fp)
	sentwrite[0] = 72 | 0x80;
   4052c:	00bff204 	movi	r2,-56
   40530:	e0bffe05 	stb	r2,-8(fp)
	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   40534:	d8000015 	stw	zero,0(sp)
   40538:	e0bffe84 	addi	r2,fp,-6
   4053c:	d8800115 	stw	r2,4(sp)
   40540:	d8000215 	stw	zero,8(sp)
   40544:	e13fff17 	ldw	r4,-4(fp)
   40548:	000b883a 	mov	r5,zero
   4054c:	01800084 	movi	r6,2
   40550:	e1fffe04 	addi	r7,fp,-8
   40554:	00446d00 	call	446d0 <alt_avalon_spi_command>

	//	request amount of frames
	sentwrite[1] = 1;
   40558:	00800044 	movi	r2,1
   4055c:	e0bffe45 	stb	r2,-7(fp)
	sentwrite[0] = 70 | 0x80;
   40560:	00bff184 	movi	r2,-58
   40564:	e0bffe05 	stb	r2,-8(fp)

	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   40568:	d8000015 	stw	zero,0(sp)
   4056c:	e0bffe84 	addi	r2,fp,-6
   40570:	d8800115 	stw	r2,4(sp)
   40574:	d8000215 	stw	zero,8(sp)
   40578:	e13fff17 	ldw	r4,-4(fp)
   4057c:	000b883a 	mov	r5,zero
   40580:	01800084 	movi	r6,2
   40584:	e1fffe04 	addi	r7,fp,-8
   40588:	00446d00 	call	446d0 <alt_avalon_spi_command>
//
	//	training pattern 1
	sentwrite[1] = 0x00; //0b01010101
   4058c:	e03ffe45 	stb	zero,-7(fp)
	sentwrite[0] = 78 | 0x80;
   40590:	00bff384 	movi	r2,-50
   40594:	e0bffe05 	stb	r2,-8(fp)

	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   40598:	d8000015 	stw	zero,0(sp)
   4059c:	e0bffe84 	addi	r2,fp,-6
   405a0:	d8800115 	stw	r2,4(sp)
   405a4:	d8000215 	stw	zero,8(sp)
   405a8:	e13fff17 	ldw	r4,-4(fp)
   405ac:	000b883a 	mov	r5,zero
   405b0:	01800084 	movi	r6,2
   405b4:	e1fffe04 	addi	r7,fp,-8
   405b8:	00446d00 	call	446d0 <alt_avalon_spi_command>

	//	training pattern 2
	sentwrite[1] = 0x02;
   405bc:	00800084 	movi	r2,2
   405c0:	e0bffe45 	stb	r2,-7(fp)
	sentwrite[0] = 79 | 0x80;
   405c4:	00bff3c4 	movi	r2,-49
   405c8:	e0bffe05 	stb	r2,-8(fp)

	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   405cc:	d8000015 	stw	zero,0(sp)
   405d0:	e0bffe84 	addi	r2,fp,-6
   405d4:	d8800115 	stw	r2,4(sp)
   405d8:	d8000215 	stw	zero,8(sp)
   405dc:	e13fff17 	ldw	r4,-4(fp)
   405e0:	000b883a 	mov	r5,zero
   405e4:	01800084 	movi	r6,2
   405e8:	e1fffe04 	addi	r7,fp,-8
   405ec:	00446d00 	call	446d0 <alt_avalon_spi_command>
//	sentwrite[0] = 37 | 0x80;
//	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);


	//bit mode
	sentwrite[1] = 0x01;
   405f0:	00800044 	movi	r2,1
   405f4:	e0bffe45 	stb	r2,-7(fp)
	sentwrite[0] = 111 | 0x80;
   405f8:	00bffbc4 	movi	r2,-17
   405fc:	e0bffe05 	stb	r2,-8(fp)
	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   40600:	d8000015 	stw	zero,0(sp)
   40604:	e0bffe84 	addi	r2,fp,-6
   40608:	d8800115 	stw	r2,4(sp)
   4060c:	d8000215 	stw	zero,8(sp)
   40610:	e13fff17 	ldw	r4,-4(fp)
   40614:	000b883a 	mov	r5,zero
   40618:	01800084 	movi	r6,2
   4061c:	e1fffe04 	addi	r7,fp,-8
   40620:	00446d00 	call	446d0 <alt_avalon_spi_command>


	//	image flipping x/y
	sentwrite[1] = 0x01; //0x01: image flipping x
   40624:	00800044 	movi	r2,1
   40628:	e0bffe45 	stb	r2,-7(fp)
	sentwrite[0] = 40 | 0x80;
   4062c:	00bfea04 	movi	r2,-88
   40630:	e0bffe05 	stb	r2,-8(fp)
	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);
   40634:	d8000015 	stw	zero,0(sp)
   40638:	e0bffe84 	addi	r2,fp,-6
   4063c:	d8800115 	stw	r2,4(sp)
   40640:	d8000215 	stw	zero,8(sp)
   40644:	e13fff17 	ldw	r4,-4(fp)
   40648:	000b883a 	mov	r5,zero
   4064c:	01800084 	movi	r6,2
   40650:	e1fffe04 	addi	r7,fp,-8
   40654:	00446d00 	call	446d0 <alt_avalon_spi_command>
//	//	exposure time 3
//	sentwrite[1] = 0x00; //0x00
//	sentwrite[0] = 44 | 0x80;
//	alt_avalon_spi_command(SPI_BASE, 0, 2, sentwrite, 0, &received, 0);

}
   40658:	e037883a 	mov	sp,fp
   4065c:	dfc00117 	ldw	ra,4(sp)
   40660:	df000017 	ldw	fp,0(sp)
   40664:	dec00204 	addi	sp,sp,8
   40668:	f800283a 	ret

0004066c <main>:
#include "terasic_includes.h"
#include "altera_avalon_spi.h"
#include "camera.h"
#include "unistd.h"

int main() {
   4066c:	defffb04 	addi	sp,sp,-20
   40670:	dfc00415 	stw	ra,16(sp)
   40674:	df000315 	stw	fp,12(sp)
   40678:	df000304 	addi	fp,sp,12

	alt_u8 received1 = 0;
   4067c:	e03ffec5 	stb	zero,-5(fp)
	alt_u8 received2 = 0;
   40680:	e03ffe85 	stb	zero,-6(fp)
	alt_u8 sent = 103;
   40684:	008019c4 	movi	r2,103
   40688:	e0bffe45 	stb	r2,-7(fp)
	alt_u8 sentwrite[2];
	alt_u8 sentread = 78;
   4068c:	00801384 	movi	r2,78
   40690:	e0bffe05 	stb	r2,-8(fp)

	int counter = 0;
   40694:	e03ffd15 	stw	zero,-12(fp)


	printf("Hello from semester thesis Nios II!\n");
   40698:	01100034 	movhi	r4,16384
   4069c:	21000004 	addi	r4,r4,0
   406a0:	00407dc0 	call	407dc <puts>
	/*
	 * pio[7] is cmv_reset_n, active low
	 * pio[6] is frame_req, active high
	 */

	usleep(100);
   406a4:	01001904 	movi	r4,100
   406a8:	00439ac0 	call	439ac <usleep>
	IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE, 0x00); //cmv_reset_n, low
   406ac:	00804034 	movhi	r2,256
   406b0:	10807004 	addi	r2,r2,448
   406b4:	10000035 	stwio	zero,0(r2)
	usleep(100);
   406b8:	01001904 	movi	r4,100
   406bc:	00439ac0 	call	439ac <usleep>
	IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE, 0x80); //cmv_reset_n, high
   406c0:	00c04034 	movhi	r3,256
   406c4:	18c07004 	addi	r3,r3,448
   406c8:	00802004 	movi	r2,128
   406cc:	18800035 	stwio	r2,0(r3)

	usleep(1000);
   406d0:	0100fa04 	movi	r4,1000
   406d4:	00439ac0 	call	439ac <usleep>
	//camera_init(SPI_1_BASE);
	camera_init(SPI_2_BASE);
   406d8:	01004034 	movhi	r4,256
   406dc:	21002004 	addi	r4,r4,128
   406e0:	00402000 	call	40200 <camera_init>
	usleep(1000);
   406e4:	0100fa04 	movi	r4,1000
   406e8:	00439ac0 	call	439ac <usleep>
//	IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE, 0x80|0x40); //sets pio[6] which is connected to cmv frameRequest
//	usleep(1000);
//	IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE, 0x80|0x00); //resets pio[6] which is connected to cmv frameRequest
//	usleep(1000);

	IOWR_ALTERA_AVALON_PIO_DATA(NO_OF_CAM_CHANNELS_BASE, 0x1);
   406ec:	00c04034 	movhi	r3,256
   406f0:	18c06004 	addi	r3,r3,384
   406f4:	00800044 	movi	r2,1
   406f8:	18800035 	stwio	r2,0(r3)
	usleep(1000);
   406fc:	0100fa04 	movi	r4,1000
   40700:	00439ac0 	call	439ac <usleep>

	IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE, 0x80|0x40); //sets pio[6] which is connected to cmv frameRequest
   40704:	00c04034 	movhi	r3,256
   40708:	18c07004 	addi	r3,r3,448
   4070c:	00803004 	movi	r2,192
   40710:	18800035 	stwio	r2,0(r3)
	IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE, 0x80|0x00); //sets pio[6] which is connected to cmv frameRequest
   40714:	00c04034 	movhi	r3,256
   40718:	18c07004 	addi	r3,r3,448
   4071c:	00802004 	movi	r2,128
   40720:	18800035 	stwio	r2,0(r3)
//		usleep(10000);
//
//
//	}

	return 0;
   40724:	0005883a 	mov	r2,zero
}
   40728:	e037883a 	mov	sp,fp
   4072c:	dfc00117 	ldw	ra,4(sp)
   40730:	df000017 	ldw	fp,0(sp)
   40734:	dec00204 	addi	sp,sp,8
   40738:	f800283a 	ret

0004073c <_puts_r>:
   4073c:	defff604 	addi	sp,sp,-40
   40740:	dc400715 	stw	r17,28(sp)
   40744:	2023883a 	mov	r17,r4
   40748:	2809883a 	mov	r4,r5
   4074c:	dfc00915 	stw	ra,36(sp)
   40750:	dcc00815 	stw	r19,32(sp)
   40754:	2827883a 	mov	r19,r5
   40758:	00407f00 	call	407f0 <strlen>
   4075c:	89400217 	ldw	r5,8(r17)
   40760:	00d00034 	movhi	r3,16384
   40764:	18c00904 	addi	r3,r3,36
   40768:	01c00044 	movi	r7,1
   4076c:	12000044 	addi	r8,r2,1
   40770:	d8c00515 	stw	r3,20(sp)
   40774:	d9c00615 	stw	r7,24(sp)
   40778:	d8c00304 	addi	r3,sp,12
   4077c:	01c00084 	movi	r7,2
   40780:	8809883a 	mov	r4,r17
   40784:	d80d883a 	mov	r6,sp
   40788:	d8c00015 	stw	r3,0(sp)
   4078c:	dcc00315 	stw	r19,12(sp)
   40790:	da000215 	stw	r8,8(sp)
   40794:	d9c00115 	stw	r7,4(sp)
   40798:	d8800415 	stw	r2,16(sp)
   4079c:	00408640 	call	40864 <__sfvwrite_r>
   407a0:	00ffffc4 	movi	r3,-1
   407a4:	10000626 	beq	r2,zero,407c0 <_puts_r+0x84>
   407a8:	1805883a 	mov	r2,r3
   407ac:	dfc00917 	ldw	ra,36(sp)
   407b0:	dcc00817 	ldw	r19,32(sp)
   407b4:	dc400717 	ldw	r17,28(sp)
   407b8:	dec00a04 	addi	sp,sp,40
   407bc:	f800283a 	ret
   407c0:	00c00284 	movi	r3,10
   407c4:	1805883a 	mov	r2,r3
   407c8:	dfc00917 	ldw	ra,36(sp)
   407cc:	dcc00817 	ldw	r19,32(sp)
   407d0:	dc400717 	ldw	r17,28(sp)
   407d4:	dec00a04 	addi	sp,sp,40
   407d8:	f800283a 	ret

000407dc <puts>:
   407dc:	00900034 	movhi	r2,16384
   407e0:	10869a04 	addi	r2,r2,6760
   407e4:	200b883a 	mov	r5,r4
   407e8:	11000017 	ldw	r4,0(r2)
   407ec:	004073c1 	jmpi	4073c <_puts_r>

000407f0 <strlen>:
   407f0:	208000cc 	andi	r2,r4,3
   407f4:	2011883a 	mov	r8,r4
   407f8:	1000161e 	bne	r2,zero,40854 <strlen+0x64>
   407fc:	20c00017 	ldw	r3,0(r4)
   40800:	017fbff4 	movhi	r5,65279
   40804:	297fbfc4 	addi	r5,r5,-257
   40808:	01e02074 	movhi	r7,32897
   4080c:	39e02004 	addi	r7,r7,-32640
   40810:	1945883a 	add	r2,r3,r5
   40814:	11c4703a 	and	r2,r2,r7
   40818:	00c6303a 	nor	r3,zero,r3
   4081c:	1886703a 	and	r3,r3,r2
   40820:	18000c1e 	bne	r3,zero,40854 <strlen+0x64>
   40824:	280d883a 	mov	r6,r5
   40828:	380b883a 	mov	r5,r7
   4082c:	21000104 	addi	r4,r4,4
   40830:	20800017 	ldw	r2,0(r4)
   40834:	1187883a 	add	r3,r2,r6
   40838:	1946703a 	and	r3,r3,r5
   4083c:	0084303a 	nor	r2,zero,r2
   40840:	10c4703a 	and	r2,r2,r3
   40844:	103ff926 	beq	r2,zero,4082c <strlen+0x3c>
   40848:	20800007 	ldb	r2,0(r4)
   4084c:	10000326 	beq	r2,zero,4085c <strlen+0x6c>
   40850:	21000044 	addi	r4,r4,1
   40854:	20800007 	ldb	r2,0(r4)
   40858:	103ffd1e 	bne	r2,zero,40850 <strlen+0x60>
   4085c:	2205c83a 	sub	r2,r4,r8
   40860:	f800283a 	ret

00040864 <__sfvwrite_r>:
   40864:	30800217 	ldw	r2,8(r6)
   40868:	defff504 	addi	sp,sp,-44
   4086c:	df000915 	stw	fp,36(sp)
   40870:	dd800715 	stw	r22,28(sp)
   40874:	dc800315 	stw	r18,12(sp)
   40878:	dfc00a15 	stw	ra,40(sp)
   4087c:	ddc00815 	stw	r23,32(sp)
   40880:	dd400615 	stw	r21,24(sp)
   40884:	dd000515 	stw	r20,20(sp)
   40888:	dcc00415 	stw	r19,16(sp)
   4088c:	dc400215 	stw	r17,8(sp)
   40890:	dc000115 	stw	r16,4(sp)
   40894:	302d883a 	mov	r22,r6
   40898:	2039883a 	mov	fp,r4
   4089c:	2825883a 	mov	r18,r5
   408a0:	10001c26 	beq	r2,zero,40914 <__sfvwrite_r+0xb0>
   408a4:	29c0030b 	ldhu	r7,12(r5)
   408a8:	3880020c 	andi	r2,r7,8
   408ac:	10002726 	beq	r2,zero,4094c <__sfvwrite_r+0xe8>
   408b0:	28800417 	ldw	r2,16(r5)
   408b4:	10002526 	beq	r2,zero,4094c <__sfvwrite_r+0xe8>
   408b8:	3880008c 	andi	r2,r7,2
   408bc:	b5400017 	ldw	r21,0(r22)
   408c0:	10002826 	beq	r2,zero,40964 <__sfvwrite_r+0x100>
   408c4:	0021883a 	mov	r16,zero
   408c8:	0023883a 	mov	r17,zero
   408cc:	880d883a 	mov	r6,r17
   408d0:	e009883a 	mov	r4,fp
   408d4:	00810004 	movi	r2,1024
   408d8:	80006e26 	beq	r16,zero,40a94 <__sfvwrite_r+0x230>
   408dc:	800f883a 	mov	r7,r16
   408e0:	91400717 	ldw	r5,28(r18)
   408e4:	1400012e 	bgeu	r2,r16,408ec <__sfvwrite_r+0x88>
   408e8:	100f883a 	mov	r7,r2
   408ec:	90c00917 	ldw	r3,36(r18)
   408f0:	183ee83a 	callr	r3
   408f4:	1007883a 	mov	r3,r2
   408f8:	80a1c83a 	sub	r16,r16,r2
   408fc:	88a3883a 	add	r17,r17,r2
   40900:	00806d0e 	bge	zero,r2,40ab8 <__sfvwrite_r+0x254>
   40904:	b0800217 	ldw	r2,8(r22)
   40908:	10c5c83a 	sub	r2,r2,r3
   4090c:	b0800215 	stw	r2,8(r22)
   40910:	103fee1e 	bne	r2,zero,408cc <__sfvwrite_r+0x68>
   40914:	0009883a 	mov	r4,zero
   40918:	2005883a 	mov	r2,r4
   4091c:	dfc00a17 	ldw	ra,40(sp)
   40920:	df000917 	ldw	fp,36(sp)
   40924:	ddc00817 	ldw	r23,32(sp)
   40928:	dd800717 	ldw	r22,28(sp)
   4092c:	dd400617 	ldw	r21,24(sp)
   40930:	dd000517 	ldw	r20,20(sp)
   40934:	dcc00417 	ldw	r19,16(sp)
   40938:	dc800317 	ldw	r18,12(sp)
   4093c:	dc400217 	ldw	r17,8(sp)
   40940:	dc000117 	ldw	r16,4(sp)
   40944:	dec00b04 	addi	sp,sp,44
   40948:	f800283a 	ret
   4094c:	0041d080 	call	41d08 <__swsetup_r>
   40950:	1000e41e 	bne	r2,zero,40ce4 <__sfvwrite_r+0x480>
   40954:	91c0030b 	ldhu	r7,12(r18)
   40958:	b5400017 	ldw	r21,0(r22)
   4095c:	3880008c 	andi	r2,r7,2
   40960:	103fd81e 	bne	r2,zero,408c4 <__sfvwrite_r+0x60>
   40964:	3880004c 	andi	r2,r7,1
   40968:	1005003a 	cmpeq	r2,r2,zero
   4096c:	10005726 	beq	r2,zero,40acc <__sfvwrite_r+0x268>
   40970:	0029883a 	mov	r20,zero
   40974:	002f883a 	mov	r23,zero
   40978:	a0004226 	beq	r20,zero,40a84 <__sfvwrite_r+0x220>
   4097c:	3880800c 	andi	r2,r7,512
   40980:	94000217 	ldw	r16,8(r18)
   40984:	10008b26 	beq	r2,zero,40bb4 <__sfvwrite_r+0x350>
   40988:	800d883a 	mov	r6,r16
   4098c:	a400a536 	bltu	r20,r16,40c24 <__sfvwrite_r+0x3c0>
   40990:	3881200c 	andi	r2,r7,1152
   40994:	10002726 	beq	r2,zero,40a34 <__sfvwrite_r+0x1d0>
   40998:	90800517 	ldw	r2,20(r18)
   4099c:	92000417 	ldw	r8,16(r18)
   409a0:	91400017 	ldw	r5,0(r18)
   409a4:	1087883a 	add	r3,r2,r2
   409a8:	1887883a 	add	r3,r3,r2
   409ac:	1808d7fa 	srli	r4,r3,31
   409b0:	2a21c83a 	sub	r16,r5,r8
   409b4:	80800044 	addi	r2,r16,1
   409b8:	20c9883a 	add	r4,r4,r3
   409bc:	2027d07a 	srai	r19,r4,1
   409c0:	a085883a 	add	r2,r20,r2
   409c4:	980d883a 	mov	r6,r19
   409c8:	9880022e 	bgeu	r19,r2,409d4 <__sfvwrite_r+0x170>
   409cc:	1027883a 	mov	r19,r2
   409d0:	100d883a 	mov	r6,r2
   409d4:	3881000c 	andi	r2,r7,1024
   409d8:	1000b826 	beq	r2,zero,40cbc <__sfvwrite_r+0x458>
   409dc:	300b883a 	mov	r5,r6
   409e0:	e009883a 	mov	r4,fp
   409e4:	0040d000 	call	40d00 <_malloc_r>
   409e8:	10003126 	beq	r2,zero,40ab0 <__sfvwrite_r+0x24c>
   409ec:	91400417 	ldw	r5,16(r18)
   409f0:	1009883a 	mov	r4,r2
   409f4:	800d883a 	mov	r6,r16
   409f8:	1023883a 	mov	r17,r2
   409fc:	00415240 	call	41524 <memcpy>
   40a00:	90c0030b 	ldhu	r3,12(r18)
   40a04:	00beffc4 	movi	r2,-1025
   40a08:	1886703a 	and	r3,r3,r2
   40a0c:	18c02014 	ori	r3,r3,128
   40a10:	90c0030d 	sth	r3,12(r18)
   40a14:	9c07c83a 	sub	r3,r19,r16
   40a18:	8c05883a 	add	r2,r17,r16
   40a1c:	a00d883a 	mov	r6,r20
   40a20:	a021883a 	mov	r16,r20
   40a24:	90800015 	stw	r2,0(r18)
   40a28:	90c00215 	stw	r3,8(r18)
   40a2c:	94400415 	stw	r17,16(r18)
   40a30:	94c00515 	stw	r19,20(r18)
   40a34:	91000017 	ldw	r4,0(r18)
   40a38:	b80b883a 	mov	r5,r23
   40a3c:	a023883a 	mov	r17,r20
   40a40:	00415c40 	call	415c4 <memmove>
   40a44:	90c00217 	ldw	r3,8(r18)
   40a48:	90800017 	ldw	r2,0(r18)
   40a4c:	a027883a 	mov	r19,r20
   40a50:	1c07c83a 	sub	r3,r3,r16
   40a54:	1405883a 	add	r2,r2,r16
   40a58:	90c00215 	stw	r3,8(r18)
   40a5c:	a021883a 	mov	r16,r20
   40a60:	90800015 	stw	r2,0(r18)
   40a64:	b0800217 	ldw	r2,8(r22)
   40a68:	1405c83a 	sub	r2,r2,r16
   40a6c:	b0800215 	stw	r2,8(r22)
   40a70:	103fa826 	beq	r2,zero,40914 <__sfvwrite_r+0xb0>
   40a74:	a469c83a 	sub	r20,r20,r17
   40a78:	91c0030b 	ldhu	r7,12(r18)
   40a7c:	bcef883a 	add	r23,r23,r19
   40a80:	a03fbe1e 	bne	r20,zero,4097c <__sfvwrite_r+0x118>
   40a84:	adc00017 	ldw	r23,0(r21)
   40a88:	ad000117 	ldw	r20,4(r21)
   40a8c:	ad400204 	addi	r21,r21,8
   40a90:	003fb906 	br	40978 <__sfvwrite_r+0x114>
   40a94:	ac400017 	ldw	r17,0(r21)
   40a98:	ac000117 	ldw	r16,4(r21)
   40a9c:	ad400204 	addi	r21,r21,8
   40aa0:	003f8a06 	br	408cc <__sfvwrite_r+0x68>
   40aa4:	91400417 	ldw	r5,16(r18)
   40aa8:	e009883a 	mov	r4,fp
   40aac:	00424600 	call	42460 <_free_r>
   40ab0:	00800304 	movi	r2,12
   40ab4:	e0800015 	stw	r2,0(fp)
   40ab8:	9080030b 	ldhu	r2,12(r18)
   40abc:	013fffc4 	movi	r4,-1
   40ac0:	10801014 	ori	r2,r2,64
   40ac4:	9080030d 	sth	r2,12(r18)
   40ac8:	003f9306 	br	40918 <__sfvwrite_r+0xb4>
   40acc:	0027883a 	mov	r19,zero
   40ad0:	002f883a 	mov	r23,zero
   40ad4:	d8000015 	stw	zero,0(sp)
   40ad8:	0029883a 	mov	r20,zero
   40adc:	98001e26 	beq	r19,zero,40b58 <__sfvwrite_r+0x2f4>
   40ae0:	d8c00017 	ldw	r3,0(sp)
   40ae4:	1804c03a 	cmpne	r2,r3,zero
   40ae8:	10005e26 	beq	r2,zero,40c64 <__sfvwrite_r+0x400>
   40aec:	9821883a 	mov	r16,r19
   40af0:	a4c0012e 	bgeu	r20,r19,40af8 <__sfvwrite_r+0x294>
   40af4:	a021883a 	mov	r16,r20
   40af8:	91000017 	ldw	r4,0(r18)
   40afc:	90800417 	ldw	r2,16(r18)
   40b00:	91800217 	ldw	r6,8(r18)
   40b04:	91c00517 	ldw	r7,20(r18)
   40b08:	1100022e 	bgeu	r2,r4,40b14 <__sfvwrite_r+0x2b0>
   40b0c:	31e3883a 	add	r17,r6,r7
   40b10:	8c001616 	blt	r17,r16,40b6c <__sfvwrite_r+0x308>
   40b14:	81c03816 	blt	r16,r7,40bf8 <__sfvwrite_r+0x394>
   40b18:	90c00917 	ldw	r3,36(r18)
   40b1c:	91400717 	ldw	r5,28(r18)
   40b20:	e009883a 	mov	r4,fp
   40b24:	b80d883a 	mov	r6,r23
   40b28:	183ee83a 	callr	r3
   40b2c:	1023883a 	mov	r17,r2
   40b30:	00bfe10e 	bge	zero,r2,40ab8 <__sfvwrite_r+0x254>
   40b34:	a469c83a 	sub	r20,r20,r17
   40b38:	a0001826 	beq	r20,zero,40b9c <__sfvwrite_r+0x338>
   40b3c:	b0800217 	ldw	r2,8(r22)
   40b40:	1445c83a 	sub	r2,r2,r17
   40b44:	b0800215 	stw	r2,8(r22)
   40b48:	103f7226 	beq	r2,zero,40914 <__sfvwrite_r+0xb0>
   40b4c:	9c67c83a 	sub	r19,r19,r17
   40b50:	bc6f883a 	add	r23,r23,r17
   40b54:	983fe21e 	bne	r19,zero,40ae0 <__sfvwrite_r+0x27c>
   40b58:	adc00017 	ldw	r23,0(r21)
   40b5c:	acc00117 	ldw	r19,4(r21)
   40b60:	ad400204 	addi	r21,r21,8
   40b64:	d8000015 	stw	zero,0(sp)
   40b68:	003fdc06 	br	40adc <__sfvwrite_r+0x278>
   40b6c:	b80b883a 	mov	r5,r23
   40b70:	880d883a 	mov	r6,r17
   40b74:	00415c40 	call	415c4 <memmove>
   40b78:	90c00017 	ldw	r3,0(r18)
   40b7c:	e009883a 	mov	r4,fp
   40b80:	900b883a 	mov	r5,r18
   40b84:	1c47883a 	add	r3,r3,r17
   40b88:	90c00015 	stw	r3,0(r18)
   40b8c:	0041e440 	call	41e44 <_fflush_r>
   40b90:	103fc91e 	bne	r2,zero,40ab8 <__sfvwrite_r+0x254>
   40b94:	a469c83a 	sub	r20,r20,r17
   40b98:	a03fe81e 	bne	r20,zero,40b3c <__sfvwrite_r+0x2d8>
   40b9c:	e009883a 	mov	r4,fp
   40ba0:	900b883a 	mov	r5,r18
   40ba4:	0041e440 	call	41e44 <_fflush_r>
   40ba8:	103fc31e 	bne	r2,zero,40ab8 <__sfvwrite_r+0x254>
   40bac:	d8000015 	stw	zero,0(sp)
   40bb0:	003fe206 	br	40b3c <__sfvwrite_r+0x2d8>
   40bb4:	91000017 	ldw	r4,0(r18)
   40bb8:	90800417 	ldw	r2,16(r18)
   40bbc:	1100022e 	bgeu	r2,r4,40bc8 <__sfvwrite_r+0x364>
   40bc0:	8023883a 	mov	r17,r16
   40bc4:	85003136 	bltu	r16,r20,40c8c <__sfvwrite_r+0x428>
   40bc8:	91c00517 	ldw	r7,20(r18)
   40bcc:	a1c01836 	bltu	r20,r7,40c30 <__sfvwrite_r+0x3cc>
   40bd0:	90c00917 	ldw	r3,36(r18)
   40bd4:	91400717 	ldw	r5,28(r18)
   40bd8:	e009883a 	mov	r4,fp
   40bdc:	b80d883a 	mov	r6,r23
   40be0:	183ee83a 	callr	r3
   40be4:	1021883a 	mov	r16,r2
   40be8:	00bfb30e 	bge	zero,r2,40ab8 <__sfvwrite_r+0x254>
   40bec:	1023883a 	mov	r17,r2
   40bf0:	1027883a 	mov	r19,r2
   40bf4:	003f9b06 	br	40a64 <__sfvwrite_r+0x200>
   40bf8:	b80b883a 	mov	r5,r23
   40bfc:	800d883a 	mov	r6,r16
   40c00:	00415c40 	call	415c4 <memmove>
   40c04:	90c00217 	ldw	r3,8(r18)
   40c08:	90800017 	ldw	r2,0(r18)
   40c0c:	8023883a 	mov	r17,r16
   40c10:	1c07c83a 	sub	r3,r3,r16
   40c14:	1405883a 	add	r2,r2,r16
   40c18:	90c00215 	stw	r3,8(r18)
   40c1c:	90800015 	stw	r2,0(r18)
   40c20:	003fc406 	br	40b34 <__sfvwrite_r+0x2d0>
   40c24:	a00d883a 	mov	r6,r20
   40c28:	a021883a 	mov	r16,r20
   40c2c:	003f8106 	br	40a34 <__sfvwrite_r+0x1d0>
   40c30:	b80b883a 	mov	r5,r23
   40c34:	a00d883a 	mov	r6,r20
   40c38:	00415c40 	call	415c4 <memmove>
   40c3c:	90c00217 	ldw	r3,8(r18)
   40c40:	90800017 	ldw	r2,0(r18)
   40c44:	a021883a 	mov	r16,r20
   40c48:	1d07c83a 	sub	r3,r3,r20
   40c4c:	1505883a 	add	r2,r2,r20
   40c50:	a023883a 	mov	r17,r20
   40c54:	a027883a 	mov	r19,r20
   40c58:	90c00215 	stw	r3,8(r18)
   40c5c:	90800015 	stw	r2,0(r18)
   40c60:	003f8006 	br	40a64 <__sfvwrite_r+0x200>
   40c64:	b809883a 	mov	r4,r23
   40c68:	01400284 	movi	r5,10
   40c6c:	980d883a 	mov	r6,r19
   40c70:	00414400 	call	41440 <memchr>
   40c74:	10001726 	beq	r2,zero,40cd4 <__sfvwrite_r+0x470>
   40c78:	15c5c83a 	sub	r2,r2,r23
   40c7c:	15000044 	addi	r20,r2,1
   40c80:	00800044 	movi	r2,1
   40c84:	d8800015 	stw	r2,0(sp)
   40c88:	003f9806 	br	40aec <__sfvwrite_r+0x288>
   40c8c:	b80b883a 	mov	r5,r23
   40c90:	800d883a 	mov	r6,r16
   40c94:	00415c40 	call	415c4 <memmove>
   40c98:	90c00017 	ldw	r3,0(r18)
   40c9c:	e009883a 	mov	r4,fp
   40ca0:	900b883a 	mov	r5,r18
   40ca4:	1c07883a 	add	r3,r3,r16
   40ca8:	90c00015 	stw	r3,0(r18)
   40cac:	8027883a 	mov	r19,r16
   40cb0:	0041e440 	call	41e44 <_fflush_r>
   40cb4:	103f6b26 	beq	r2,zero,40a64 <__sfvwrite_r+0x200>
   40cb8:	003f7f06 	br	40ab8 <__sfvwrite_r+0x254>
   40cbc:	400b883a 	mov	r5,r8
   40cc0:	e009883a 	mov	r4,fp
   40cc4:	00416a40 	call	416a4 <_realloc_r>
   40cc8:	103f7626 	beq	r2,zero,40aa4 <__sfvwrite_r+0x240>
   40ccc:	1023883a 	mov	r17,r2
   40cd0:	003f5006 	br	40a14 <__sfvwrite_r+0x1b0>
   40cd4:	00c00044 	movi	r3,1
   40cd8:	9d000044 	addi	r20,r19,1
   40cdc:	d8c00015 	stw	r3,0(sp)
   40ce0:	003f8206 	br	40aec <__sfvwrite_r+0x288>
   40ce4:	9080030b 	ldhu	r2,12(r18)
   40ce8:	00c00244 	movi	r3,9
   40cec:	013fffc4 	movi	r4,-1
   40cf0:	10801014 	ori	r2,r2,64
   40cf4:	9080030d 	sth	r2,12(r18)
   40cf8:	e0c00015 	stw	r3,0(fp)
   40cfc:	003f0606 	br	40918 <__sfvwrite_r+0xb4>

00040d00 <_malloc_r>:
   40d00:	defff604 	addi	sp,sp,-40
   40d04:	28c002c4 	addi	r3,r5,11
   40d08:	00800584 	movi	r2,22
   40d0c:	dc800215 	stw	r18,8(sp)
   40d10:	dfc00915 	stw	ra,36(sp)
   40d14:	df000815 	stw	fp,32(sp)
   40d18:	ddc00715 	stw	r23,28(sp)
   40d1c:	dd800615 	stw	r22,24(sp)
   40d20:	dd400515 	stw	r21,20(sp)
   40d24:	dd000415 	stw	r20,16(sp)
   40d28:	dcc00315 	stw	r19,12(sp)
   40d2c:	dc400115 	stw	r17,4(sp)
   40d30:	dc000015 	stw	r16,0(sp)
   40d34:	2025883a 	mov	r18,r4
   40d38:	10c01236 	bltu	r2,r3,40d84 <_malloc_r+0x84>
   40d3c:	04400404 	movi	r17,16
   40d40:	8940142e 	bgeu	r17,r5,40d94 <_malloc_r+0x94>
   40d44:	00800304 	movi	r2,12
   40d48:	0007883a 	mov	r3,zero
   40d4c:	90800015 	stw	r2,0(r18)
   40d50:	1805883a 	mov	r2,r3
   40d54:	dfc00917 	ldw	ra,36(sp)
   40d58:	df000817 	ldw	fp,32(sp)
   40d5c:	ddc00717 	ldw	r23,28(sp)
   40d60:	dd800617 	ldw	r22,24(sp)
   40d64:	dd400517 	ldw	r21,20(sp)
   40d68:	dd000417 	ldw	r20,16(sp)
   40d6c:	dcc00317 	ldw	r19,12(sp)
   40d70:	dc800217 	ldw	r18,8(sp)
   40d74:	dc400117 	ldw	r17,4(sp)
   40d78:	dc000017 	ldw	r16,0(sp)
   40d7c:	dec00a04 	addi	sp,sp,40
   40d80:	f800283a 	ret
   40d84:	00bffe04 	movi	r2,-8
   40d88:	18a2703a 	and	r17,r3,r2
   40d8c:	883fed16 	blt	r17,zero,40d44 <_malloc_r+0x44>
   40d90:	897fec36 	bltu	r17,r5,40d44 <_malloc_r+0x44>
   40d94:	9009883a 	mov	r4,r18
   40d98:	00436d00 	call	436d0 <__malloc_lock>
   40d9c:	00807dc4 	movi	r2,503
   40da0:	14402b2e 	bgeu	r2,r17,40e50 <_malloc_r+0x150>
   40da4:	8806d27a 	srli	r3,r17,9
   40da8:	18003f1e 	bne	r3,zero,40ea8 <_malloc_r+0x1a8>
   40dac:	880cd0fa 	srli	r6,r17,3
   40db0:	300490fa 	slli	r2,r6,3
   40db4:	02d00034 	movhi	r11,16384
   40db8:	5ac11604 	addi	r11,r11,1112
   40dbc:	12cb883a 	add	r5,r2,r11
   40dc0:	2c000317 	ldw	r16,12(r5)
   40dc4:	580f883a 	mov	r7,r11
   40dc8:	2c00041e 	bne	r5,r16,40ddc <_malloc_r+0xdc>
   40dcc:	00000a06 	br	40df8 <_malloc_r+0xf8>
   40dd0:	1800860e 	bge	r3,zero,40fec <_malloc_r+0x2ec>
   40dd4:	84000317 	ldw	r16,12(r16)
   40dd8:	2c000726 	beq	r5,r16,40df8 <_malloc_r+0xf8>
   40ddc:	80800117 	ldw	r2,4(r16)
   40de0:	00ffff04 	movi	r3,-4
   40de4:	10c8703a 	and	r4,r2,r3
   40de8:	2447c83a 	sub	r3,r4,r17
   40dec:	008003c4 	movi	r2,15
   40df0:	10fff70e 	bge	r2,r3,40dd0 <_malloc_r+0xd0>
   40df4:	31bfffc4 	addi	r6,r6,-1
   40df8:	32400044 	addi	r9,r6,1
   40dfc:	02900034 	movhi	r10,16384
   40e00:	52811804 	addi	r10,r10,1120
   40e04:	54000217 	ldw	r16,8(r10)
   40e08:	8280a026 	beq	r16,r10,4108c <_malloc_r+0x38c>
   40e0c:	80800117 	ldw	r2,4(r16)
   40e10:	00ffff04 	movi	r3,-4
   40e14:	10ca703a 	and	r5,r2,r3
   40e18:	2c4dc83a 	sub	r6,r5,r17
   40e1c:	008003c4 	movi	r2,15
   40e20:	11808316 	blt	r2,r6,41030 <_malloc_r+0x330>
   40e24:	52800315 	stw	r10,12(r10)
   40e28:	52800215 	stw	r10,8(r10)
   40e2c:	30002916 	blt	r6,zero,40ed4 <_malloc_r+0x1d4>
   40e30:	8147883a 	add	r3,r16,r5
   40e34:	18800117 	ldw	r2,4(r3)
   40e38:	9009883a 	mov	r4,r18
   40e3c:	10800054 	ori	r2,r2,1
   40e40:	18800115 	stw	r2,4(r3)
   40e44:	00436f00 	call	436f0 <__malloc_unlock>
   40e48:	80c00204 	addi	r3,r16,8
   40e4c:	003fc006 	br	40d50 <_malloc_r+0x50>
   40e50:	02d00034 	movhi	r11,16384
   40e54:	5ac11604 	addi	r11,r11,1112
   40e58:	8ac5883a 	add	r2,r17,r11
   40e5c:	14000317 	ldw	r16,12(r2)
   40e60:	580f883a 	mov	r7,r11
   40e64:	8806d0fa 	srli	r3,r17,3
   40e68:	14006c26 	beq	r2,r16,4101c <_malloc_r+0x31c>
   40e6c:	80c00117 	ldw	r3,4(r16)
   40e70:	00bfff04 	movi	r2,-4
   40e74:	81800317 	ldw	r6,12(r16)
   40e78:	1886703a 	and	r3,r3,r2
   40e7c:	80c7883a 	add	r3,r16,r3
   40e80:	18800117 	ldw	r2,4(r3)
   40e84:	81400217 	ldw	r5,8(r16)
   40e88:	9009883a 	mov	r4,r18
   40e8c:	10800054 	ori	r2,r2,1
   40e90:	18800115 	stw	r2,4(r3)
   40e94:	31400215 	stw	r5,8(r6)
   40e98:	29800315 	stw	r6,12(r5)
   40e9c:	00436f00 	call	436f0 <__malloc_unlock>
   40ea0:	80c00204 	addi	r3,r16,8
   40ea4:	003faa06 	br	40d50 <_malloc_r+0x50>
   40ea8:	00800104 	movi	r2,4
   40eac:	10c0052e 	bgeu	r2,r3,40ec4 <_malloc_r+0x1c4>
   40eb0:	00800504 	movi	r2,20
   40eb4:	10c07836 	bltu	r2,r3,41098 <_malloc_r+0x398>
   40eb8:	198016c4 	addi	r6,r3,91
   40ebc:	300490fa 	slli	r2,r6,3
   40ec0:	003fbc06 	br	40db4 <_malloc_r+0xb4>
   40ec4:	8804d1ba 	srli	r2,r17,6
   40ec8:	11800e04 	addi	r6,r2,56
   40ecc:	300490fa 	slli	r2,r6,3
   40ed0:	003fb806 	br	40db4 <_malloc_r+0xb4>
   40ed4:	00807fc4 	movi	r2,511
   40ed8:	1140bb36 	bltu	r2,r5,411c8 <_malloc_r+0x4c8>
   40edc:	2806d0fa 	srli	r3,r5,3
   40ee0:	573ffe04 	addi	fp,r10,-8
   40ee4:	00800044 	movi	r2,1
   40ee8:	180890fa 	slli	r4,r3,3
   40eec:	1807d0ba 	srai	r3,r3,2
   40ef0:	e1c00117 	ldw	r7,4(fp)
   40ef4:	5909883a 	add	r4,r11,r4
   40ef8:	21400217 	ldw	r5,8(r4)
   40efc:	10c4983a 	sll	r2,r2,r3
   40f00:	81000315 	stw	r4,12(r16)
   40f04:	81400215 	stw	r5,8(r16)
   40f08:	388eb03a 	or	r7,r7,r2
   40f0c:	2c000315 	stw	r16,12(r5)
   40f10:	24000215 	stw	r16,8(r4)
   40f14:	e1c00115 	stw	r7,4(fp)
   40f18:	4807883a 	mov	r3,r9
   40f1c:	4800cd16 	blt	r9,zero,41254 <_malloc_r+0x554>
   40f20:	1807d0ba 	srai	r3,r3,2
   40f24:	00800044 	movi	r2,1
   40f28:	10c8983a 	sll	r4,r2,r3
   40f2c:	39004436 	bltu	r7,r4,41040 <_malloc_r+0x340>
   40f30:	21c4703a 	and	r2,r4,r7
   40f34:	10000a1e 	bne	r2,zero,40f60 <_malloc_r+0x260>
   40f38:	2109883a 	add	r4,r4,r4
   40f3c:	00bfff04 	movi	r2,-4
   40f40:	4884703a 	and	r2,r9,r2
   40f44:	3906703a 	and	r3,r7,r4
   40f48:	12400104 	addi	r9,r2,4
   40f4c:	1800041e 	bne	r3,zero,40f60 <_malloc_r+0x260>
   40f50:	2109883a 	add	r4,r4,r4
   40f54:	3904703a 	and	r2,r7,r4
   40f58:	4a400104 	addi	r9,r9,4
   40f5c:	103ffc26 	beq	r2,zero,40f50 <_malloc_r+0x250>
   40f60:	480490fa 	slli	r2,r9,3
   40f64:	4819883a 	mov	r12,r9
   40f68:	023fff04 	movi	r8,-4
   40f6c:	589b883a 	add	r13,r11,r2
   40f70:	6807883a 	mov	r3,r13
   40f74:	014003c4 	movi	r5,15
   40f78:	1c000317 	ldw	r16,12(r3)
   40f7c:	1c00041e 	bne	r3,r16,40f90 <_malloc_r+0x290>
   40f80:	0000a706 	br	41220 <_malloc_r+0x520>
   40f84:	3000ab0e 	bge	r6,zero,41234 <_malloc_r+0x534>
   40f88:	84000317 	ldw	r16,12(r16)
   40f8c:	1c00a426 	beq	r3,r16,41220 <_malloc_r+0x520>
   40f90:	80800117 	ldw	r2,4(r16)
   40f94:	1204703a 	and	r2,r2,r8
   40f98:	144dc83a 	sub	r6,r2,r17
   40f9c:	29bff90e 	bge	r5,r6,40f84 <_malloc_r+0x284>
   40fa0:	81000317 	ldw	r4,12(r16)
   40fa4:	80c00217 	ldw	r3,8(r16)
   40fa8:	89400054 	ori	r5,r17,1
   40fac:	8445883a 	add	r2,r16,r17
   40fb0:	20c00215 	stw	r3,8(r4)
   40fb4:	19000315 	stw	r4,12(r3)
   40fb8:	81400115 	stw	r5,4(r16)
   40fbc:	1187883a 	add	r3,r2,r6
   40fc0:	31000054 	ori	r4,r6,1
   40fc4:	50800315 	stw	r2,12(r10)
   40fc8:	50800215 	stw	r2,8(r10)
   40fcc:	19800015 	stw	r6,0(r3)
   40fd0:	11000115 	stw	r4,4(r2)
   40fd4:	12800215 	stw	r10,8(r2)
   40fd8:	12800315 	stw	r10,12(r2)
   40fdc:	9009883a 	mov	r4,r18
   40fe0:	00436f00 	call	436f0 <__malloc_unlock>
   40fe4:	80c00204 	addi	r3,r16,8
   40fe8:	003f5906 	br	40d50 <_malloc_r+0x50>
   40fec:	8109883a 	add	r4,r16,r4
   40ff0:	20800117 	ldw	r2,4(r4)
   40ff4:	80c00217 	ldw	r3,8(r16)
   40ff8:	81400317 	ldw	r5,12(r16)
   40ffc:	10800054 	ori	r2,r2,1
   41000:	20800115 	stw	r2,4(r4)
   41004:	28c00215 	stw	r3,8(r5)
   41008:	19400315 	stw	r5,12(r3)
   4100c:	9009883a 	mov	r4,r18
   41010:	00436f00 	call	436f0 <__malloc_unlock>
   41014:	80c00204 	addi	r3,r16,8
   41018:	003f4d06 	br	40d50 <_malloc_r+0x50>
   4101c:	80800204 	addi	r2,r16,8
   41020:	14000317 	ldw	r16,12(r2)
   41024:	143f911e 	bne	r2,r16,40e6c <_malloc_r+0x16c>
   41028:	1a400084 	addi	r9,r3,2
   4102c:	003f7306 	br	40dfc <_malloc_r+0xfc>
   41030:	88c00054 	ori	r3,r17,1
   41034:	8445883a 	add	r2,r16,r17
   41038:	80c00115 	stw	r3,4(r16)
   4103c:	003fdf06 	br	40fbc <_malloc_r+0x2bc>
   41040:	e4000217 	ldw	r16,8(fp)
   41044:	00bfff04 	movi	r2,-4
   41048:	80c00117 	ldw	r3,4(r16)
   4104c:	802d883a 	mov	r22,r16
   41050:	18aa703a 	and	r21,r3,r2
   41054:	ac401636 	bltu	r21,r17,410b0 <_malloc_r+0x3b0>
   41058:	ac49c83a 	sub	r4,r21,r17
   4105c:	008003c4 	movi	r2,15
   41060:	1100130e 	bge	r2,r4,410b0 <_malloc_r+0x3b0>
   41064:	88800054 	ori	r2,r17,1
   41068:	8447883a 	add	r3,r16,r17
   4106c:	80800115 	stw	r2,4(r16)
   41070:	20800054 	ori	r2,r4,1
   41074:	18800115 	stw	r2,4(r3)
   41078:	e0c00215 	stw	r3,8(fp)
   4107c:	9009883a 	mov	r4,r18
   41080:	00436f00 	call	436f0 <__malloc_unlock>
   41084:	80c00204 	addi	r3,r16,8
   41088:	003f3106 	br	40d50 <_malloc_r+0x50>
   4108c:	39c00117 	ldw	r7,4(r7)
   41090:	573ffe04 	addi	fp,r10,-8
   41094:	003fa006 	br	40f18 <_malloc_r+0x218>
   41098:	00801504 	movi	r2,84
   4109c:	10c06736 	bltu	r2,r3,4123c <_malloc_r+0x53c>
   410a0:	8804d33a 	srli	r2,r17,12
   410a4:	11801b84 	addi	r6,r2,110
   410a8:	300490fa 	slli	r2,r6,3
   410ac:	003f4106 	br	40db4 <_malloc_r+0xb4>
   410b0:	d0a00e17 	ldw	r2,-32712(gp)
   410b4:	d0e00317 	ldw	r3,-32756(gp)
   410b8:	053fffc4 	movi	r20,-1
   410bc:	10800404 	addi	r2,r2,16
   410c0:	88a7883a 	add	r19,r17,r2
   410c4:	1d000326 	beq	r3,r20,410d4 <_malloc_r+0x3d4>
   410c8:	98c3ffc4 	addi	r3,r19,4095
   410cc:	00bc0004 	movi	r2,-4096
   410d0:	18a6703a 	and	r19,r3,r2
   410d4:	9009883a 	mov	r4,r18
   410d8:	980b883a 	mov	r5,r19
   410dc:	0041c980 	call	41c98 <_sbrk_r>
   410e0:	1009883a 	mov	r4,r2
   410e4:	15000426 	beq	r2,r20,410f8 <_malloc_r+0x3f8>
   410e8:	854b883a 	add	r5,r16,r21
   410ec:	1029883a 	mov	r20,r2
   410f0:	11405a2e 	bgeu	r2,r5,4125c <_malloc_r+0x55c>
   410f4:	87000c26 	beq	r16,fp,41128 <_malloc_r+0x428>
   410f8:	e4000217 	ldw	r16,8(fp)
   410fc:	80c00117 	ldw	r3,4(r16)
   41100:	00bfff04 	movi	r2,-4
   41104:	1884703a 	and	r2,r3,r2
   41108:	14400336 	bltu	r2,r17,41118 <_malloc_r+0x418>
   4110c:	1449c83a 	sub	r4,r2,r17
   41110:	008003c4 	movi	r2,15
   41114:	113fd316 	blt	r2,r4,41064 <_malloc_r+0x364>
   41118:	9009883a 	mov	r4,r18
   4111c:	00436f00 	call	436f0 <__malloc_unlock>
   41120:	0007883a 	mov	r3,zero
   41124:	003f0a06 	br	40d50 <_malloc_r+0x50>
   41128:	05d00034 	movhi	r23,16384
   4112c:	bdc6b204 	addi	r23,r23,6856
   41130:	b8800017 	ldw	r2,0(r23)
   41134:	988d883a 	add	r6,r19,r2
   41138:	b9800015 	stw	r6,0(r23)
   4113c:	d0e00317 	ldw	r3,-32756(gp)
   41140:	00bfffc4 	movi	r2,-1
   41144:	18808e26 	beq	r3,r2,41380 <_malloc_r+0x680>
   41148:	2145c83a 	sub	r2,r4,r5
   4114c:	3085883a 	add	r2,r6,r2
   41150:	b8800015 	stw	r2,0(r23)
   41154:	20c001cc 	andi	r3,r4,7
   41158:	18005f1e 	bne	r3,zero,412d8 <_malloc_r+0x5d8>
   4115c:	000b883a 	mov	r5,zero
   41160:	a4c5883a 	add	r2,r20,r19
   41164:	1083ffcc 	andi	r2,r2,4095
   41168:	00c40004 	movi	r3,4096
   4116c:	1887c83a 	sub	r3,r3,r2
   41170:	28e7883a 	add	r19,r5,r3
   41174:	9009883a 	mov	r4,r18
   41178:	980b883a 	mov	r5,r19
   4117c:	0041c980 	call	41c98 <_sbrk_r>
   41180:	1007883a 	mov	r3,r2
   41184:	00bfffc4 	movi	r2,-1
   41188:	18807a26 	beq	r3,r2,41374 <_malloc_r+0x674>
   4118c:	1d05c83a 	sub	r2,r3,r20
   41190:	9885883a 	add	r2,r19,r2
   41194:	10c00054 	ori	r3,r2,1
   41198:	b8800017 	ldw	r2,0(r23)
   4119c:	a021883a 	mov	r16,r20
   411a0:	a0c00115 	stw	r3,4(r20)
   411a4:	9885883a 	add	r2,r19,r2
   411a8:	b8800015 	stw	r2,0(r23)
   411ac:	e5000215 	stw	r20,8(fp)
   411b0:	b7003626 	beq	r22,fp,4128c <_malloc_r+0x58c>
   411b4:	018003c4 	movi	r6,15
   411b8:	35404b36 	bltu	r6,r21,412e8 <_malloc_r+0x5e8>
   411bc:	00800044 	movi	r2,1
   411c0:	a0800115 	stw	r2,4(r20)
   411c4:	003fcd06 	br	410fc <_malloc_r+0x3fc>
   411c8:	2808d27a 	srli	r4,r5,9
   411cc:	2000371e 	bne	r4,zero,412ac <_malloc_r+0x5ac>
   411d0:	2808d0fa 	srli	r4,r5,3
   411d4:	200690fa 	slli	r3,r4,3
   411d8:	1ad1883a 	add	r8,r3,r11
   411dc:	41800217 	ldw	r6,8(r8)
   411e0:	41805b26 	beq	r8,r6,41350 <_malloc_r+0x650>
   411e4:	30800117 	ldw	r2,4(r6)
   411e8:	00ffff04 	movi	r3,-4
   411ec:	10c4703a 	and	r2,r2,r3
   411f0:	2880022e 	bgeu	r5,r2,411fc <_malloc_r+0x4fc>
   411f4:	31800217 	ldw	r6,8(r6)
   411f8:	41bffa1e 	bne	r8,r6,411e4 <_malloc_r+0x4e4>
   411fc:	32000317 	ldw	r8,12(r6)
   41200:	39c00117 	ldw	r7,4(r7)
   41204:	82000315 	stw	r8,12(r16)
   41208:	81800215 	stw	r6,8(r16)
   4120c:	07100034 	movhi	fp,16384
   41210:	e7011604 	addi	fp,fp,1112
   41214:	34000315 	stw	r16,12(r6)
   41218:	44000215 	stw	r16,8(r8)
   4121c:	003f3e06 	br	40f18 <_malloc_r+0x218>
   41220:	63000044 	addi	r12,r12,1
   41224:	608000cc 	andi	r2,r12,3
   41228:	10005d26 	beq	r2,zero,413a0 <_malloc_r+0x6a0>
   4122c:	18c00204 	addi	r3,r3,8
   41230:	003f5106 	br	40f78 <_malloc_r+0x278>
   41234:	8089883a 	add	r4,r16,r2
   41238:	003f6d06 	br	40ff0 <_malloc_r+0x2f0>
   4123c:	00805504 	movi	r2,340
   41240:	10c02036 	bltu	r2,r3,412c4 <_malloc_r+0x5c4>
   41244:	8804d3fa 	srli	r2,r17,15
   41248:	11801dc4 	addi	r6,r2,119
   4124c:	300490fa 	slli	r2,r6,3
   41250:	003ed806 	br	40db4 <_malloc_r+0xb4>
   41254:	48c000c4 	addi	r3,r9,3
   41258:	003f3106 	br	40f20 <_malloc_r+0x220>
   4125c:	05d00034 	movhi	r23,16384
   41260:	bdc6b204 	addi	r23,r23,6856
   41264:	b8800017 	ldw	r2,0(r23)
   41268:	988d883a 	add	r6,r19,r2
   4126c:	b9800015 	stw	r6,0(r23)
   41270:	293fb21e 	bne	r5,r4,4113c <_malloc_r+0x43c>
   41274:	2083ffcc 	andi	r2,r4,4095
   41278:	103fb01e 	bne	r2,zero,4113c <_malloc_r+0x43c>
   4127c:	e4000217 	ldw	r16,8(fp)
   41280:	9d45883a 	add	r2,r19,r21
   41284:	10800054 	ori	r2,r2,1
   41288:	80800115 	stw	r2,4(r16)
   4128c:	b8c00017 	ldw	r3,0(r23)
   41290:	d0a00f17 	ldw	r2,-32708(gp)
   41294:	10c0012e 	bgeu	r2,r3,4129c <_malloc_r+0x59c>
   41298:	d0e00f15 	stw	r3,-32708(gp)
   4129c:	d0a01017 	ldw	r2,-32704(gp)
   412a0:	10ff962e 	bgeu	r2,r3,410fc <_malloc_r+0x3fc>
   412a4:	d0e01015 	stw	r3,-32704(gp)
   412a8:	003f9406 	br	410fc <_malloc_r+0x3fc>
   412ac:	00800104 	movi	r2,4
   412b0:	11001e36 	bltu	r2,r4,4132c <_malloc_r+0x62c>
   412b4:	2804d1ba 	srli	r2,r5,6
   412b8:	11000e04 	addi	r4,r2,56
   412bc:	200690fa 	slli	r3,r4,3
   412c0:	003fc506 	br	411d8 <_malloc_r+0x4d8>
   412c4:	00815504 	movi	r2,1364
   412c8:	10c01d2e 	bgeu	r2,r3,41340 <_malloc_r+0x640>
   412cc:	01801f84 	movi	r6,126
   412d0:	0080fc04 	movi	r2,1008
   412d4:	003eb706 	br	40db4 <_malloc_r+0xb4>
   412d8:	00800204 	movi	r2,8
   412dc:	10cbc83a 	sub	r5,r2,r3
   412e0:	2169883a 	add	r20,r4,r5
   412e4:	003f9e06 	br	41160 <_malloc_r+0x460>
   412e8:	00bffe04 	movi	r2,-8
   412ec:	a93ffd04 	addi	r4,r21,-12
   412f0:	2088703a 	and	r4,r4,r2
   412f4:	b10b883a 	add	r5,r22,r4
   412f8:	00c00144 	movi	r3,5
   412fc:	28c00215 	stw	r3,8(r5)
   41300:	28c00115 	stw	r3,4(r5)
   41304:	b0800117 	ldw	r2,4(r22)
   41308:	1080004c 	andi	r2,r2,1
   4130c:	2084b03a 	or	r2,r4,r2
   41310:	b0800115 	stw	r2,4(r22)
   41314:	313fdd2e 	bgeu	r6,r4,4128c <_malloc_r+0x58c>
   41318:	b1400204 	addi	r5,r22,8
   4131c:	9009883a 	mov	r4,r18
   41320:	00424600 	call	42460 <_free_r>
   41324:	e4000217 	ldw	r16,8(fp)
   41328:	003fd806 	br	4128c <_malloc_r+0x58c>
   4132c:	00800504 	movi	r2,20
   41330:	11001536 	bltu	r2,r4,41388 <_malloc_r+0x688>
   41334:	210016c4 	addi	r4,r4,91
   41338:	200690fa 	slli	r3,r4,3
   4133c:	003fa606 	br	411d8 <_malloc_r+0x4d8>
   41340:	8804d4ba 	srli	r2,r17,18
   41344:	11801f04 	addi	r6,r2,124
   41348:	300490fa 	slli	r2,r6,3
   4134c:	003e9906 	br	40db4 <_malloc_r+0xb4>
   41350:	2009d0ba 	srai	r4,r4,2
   41354:	01500034 	movhi	r5,16384
   41358:	29411604 	addi	r5,r5,1112
   4135c:	00c00044 	movi	r3,1
   41360:	28800117 	ldw	r2,4(r5)
   41364:	1906983a 	sll	r3,r3,r4
   41368:	10c4b03a 	or	r2,r2,r3
   4136c:	28800115 	stw	r2,4(r5)
   41370:	003fa306 	br	41200 <_malloc_r+0x500>
   41374:	0027883a 	mov	r19,zero
   41378:	00c00044 	movi	r3,1
   4137c:	003f8606 	br	41198 <_malloc_r+0x498>
   41380:	d1200315 	stw	r4,-32756(gp)
   41384:	003f7306 	br	41154 <_malloc_r+0x454>
   41388:	00801504 	movi	r2,84
   4138c:	11001936 	bltu	r2,r4,413f4 <_malloc_r+0x6f4>
   41390:	2804d33a 	srli	r2,r5,12
   41394:	11001b84 	addi	r4,r2,110
   41398:	200690fa 	slli	r3,r4,3
   4139c:	003f8e06 	br	411d8 <_malloc_r+0x4d8>
   413a0:	480b883a 	mov	r5,r9
   413a4:	6807883a 	mov	r3,r13
   413a8:	288000cc 	andi	r2,r5,3
   413ac:	18fffe04 	addi	r3,r3,-8
   413b0:	297fffc4 	addi	r5,r5,-1
   413b4:	10001526 	beq	r2,zero,4140c <_malloc_r+0x70c>
   413b8:	18800217 	ldw	r2,8(r3)
   413bc:	10fffa26 	beq	r2,r3,413a8 <_malloc_r+0x6a8>
   413c0:	2109883a 	add	r4,r4,r4
   413c4:	393f1e36 	bltu	r7,r4,41040 <_malloc_r+0x340>
   413c8:	203f1d26 	beq	r4,zero,41040 <_malloc_r+0x340>
   413cc:	21c4703a 	and	r2,r4,r7
   413d0:	10000226 	beq	r2,zero,413dc <_malloc_r+0x6dc>
   413d4:	6013883a 	mov	r9,r12
   413d8:	003ee106 	br	40f60 <_malloc_r+0x260>
   413dc:	2109883a 	add	r4,r4,r4
   413e0:	3904703a 	and	r2,r7,r4
   413e4:	63000104 	addi	r12,r12,4
   413e8:	103ffc26 	beq	r2,zero,413dc <_malloc_r+0x6dc>
   413ec:	6013883a 	mov	r9,r12
   413f0:	003edb06 	br	40f60 <_malloc_r+0x260>
   413f4:	00805504 	movi	r2,340
   413f8:	11000836 	bltu	r2,r4,4141c <_malloc_r+0x71c>
   413fc:	2804d3fa 	srli	r2,r5,15
   41400:	11001dc4 	addi	r4,r2,119
   41404:	200690fa 	slli	r3,r4,3
   41408:	003f7306 	br	411d8 <_malloc_r+0x4d8>
   4140c:	0104303a 	nor	r2,zero,r4
   41410:	388e703a 	and	r7,r7,r2
   41414:	e1c00115 	stw	r7,4(fp)
   41418:	003fe906 	br	413c0 <_malloc_r+0x6c0>
   4141c:	00815504 	movi	r2,1364
   41420:	1100032e 	bgeu	r2,r4,41430 <_malloc_r+0x730>
   41424:	01001f84 	movi	r4,126
   41428:	00c0fc04 	movi	r3,1008
   4142c:	003f6a06 	br	411d8 <_malloc_r+0x4d8>
   41430:	2804d4ba 	srli	r2,r5,18
   41434:	11001f04 	addi	r4,r2,124
   41438:	200690fa 	slli	r3,r4,3
   4143c:	003f6606 	br	411d8 <_malloc_r+0x4d8>

00041440 <memchr>:
   41440:	008000c4 	movi	r2,3
   41444:	29403fcc 	andi	r5,r5,255
   41448:	2007883a 	mov	r3,r4
   4144c:	1180022e 	bgeu	r2,r6,41458 <memchr+0x18>
   41450:	2084703a 	and	r2,r4,r2
   41454:	10000b26 	beq	r2,zero,41484 <memchr+0x44>
   41458:	313fffc4 	addi	r4,r6,-1
   4145c:	3000051e 	bne	r6,zero,41474 <memchr+0x34>
   41460:	00002c06 	br	41514 <memchr+0xd4>
   41464:	213fffc4 	addi	r4,r4,-1
   41468:	00bfffc4 	movi	r2,-1
   4146c:	18c00044 	addi	r3,r3,1
   41470:	20802826 	beq	r4,r2,41514 <memchr+0xd4>
   41474:	18800003 	ldbu	r2,0(r3)
   41478:	28bffa1e 	bne	r5,r2,41464 <memchr+0x24>
   4147c:	1805883a 	mov	r2,r3
   41480:	f800283a 	ret
   41484:	0011883a 	mov	r8,zero
   41488:	0007883a 	mov	r3,zero
   4148c:	01c00104 	movi	r7,4
   41490:	4004923a 	slli	r2,r8,8
   41494:	18c00044 	addi	r3,r3,1
   41498:	1151883a 	add	r8,r2,r5
   4149c:	19fffc1e 	bne	r3,r7,41490 <memchr+0x50>
   414a0:	02bfbff4 	movhi	r10,65279
   414a4:	52bfbfc4 	addi	r10,r10,-257
   414a8:	02602074 	movhi	r9,32897
   414ac:	4a602004 	addi	r9,r9,-32640
   414b0:	02c000c4 	movi	r11,3
   414b4:	20800017 	ldw	r2,0(r4)
   414b8:	31bfff04 	addi	r6,r6,-4
   414bc:	200f883a 	mov	r7,r4
   414c0:	1204f03a 	xor	r2,r2,r8
   414c4:	1287883a 	add	r3,r2,r10
   414c8:	1a46703a 	and	r3,r3,r9
   414cc:	0084303a 	nor	r2,zero,r2
   414d0:	10c4703a 	and	r2,r2,r3
   414d4:	10000b26 	beq	r2,zero,41504 <memchr+0xc4>
   414d8:	20800003 	ldbu	r2,0(r4)
   414dc:	28800f26 	beq	r5,r2,4151c <memchr+0xdc>
   414e0:	20800043 	ldbu	r2,1(r4)
   414e4:	21c00044 	addi	r7,r4,1
   414e8:	28800c26 	beq	r5,r2,4151c <memchr+0xdc>
   414ec:	20800083 	ldbu	r2,2(r4)
   414f0:	21c00084 	addi	r7,r4,2
   414f4:	28800926 	beq	r5,r2,4151c <memchr+0xdc>
   414f8:	208000c3 	ldbu	r2,3(r4)
   414fc:	21c000c4 	addi	r7,r4,3
   41500:	28800626 	beq	r5,r2,4151c <memchr+0xdc>
   41504:	21000104 	addi	r4,r4,4
   41508:	59bfea36 	bltu	r11,r6,414b4 <memchr+0x74>
   4150c:	2007883a 	mov	r3,r4
   41510:	003fd106 	br	41458 <memchr+0x18>
   41514:	0005883a 	mov	r2,zero
   41518:	f800283a 	ret
   4151c:	3805883a 	mov	r2,r7
   41520:	f800283a 	ret

00041524 <memcpy>:
   41524:	01c003c4 	movi	r7,15
   41528:	2007883a 	mov	r3,r4
   4152c:	3980032e 	bgeu	r7,r6,4153c <memcpy+0x18>
   41530:	2904b03a 	or	r2,r5,r4
   41534:	108000cc 	andi	r2,r2,3
   41538:	10000926 	beq	r2,zero,41560 <memcpy+0x3c>
   4153c:	30000626 	beq	r6,zero,41558 <memcpy+0x34>
   41540:	30cd883a 	add	r6,r6,r3
   41544:	28800003 	ldbu	r2,0(r5)
   41548:	29400044 	addi	r5,r5,1
   4154c:	18800005 	stb	r2,0(r3)
   41550:	18c00044 	addi	r3,r3,1
   41554:	30fffb1e 	bne	r6,r3,41544 <memcpy+0x20>
   41558:	2005883a 	mov	r2,r4
   4155c:	f800283a 	ret
   41560:	3811883a 	mov	r8,r7
   41564:	200f883a 	mov	r7,r4
   41568:	28c00017 	ldw	r3,0(r5)
   4156c:	31bffc04 	addi	r6,r6,-16
   41570:	38c00015 	stw	r3,0(r7)
   41574:	28800117 	ldw	r2,4(r5)
   41578:	38800115 	stw	r2,4(r7)
   4157c:	28c00217 	ldw	r3,8(r5)
   41580:	38c00215 	stw	r3,8(r7)
   41584:	28800317 	ldw	r2,12(r5)
   41588:	29400404 	addi	r5,r5,16
   4158c:	38800315 	stw	r2,12(r7)
   41590:	39c00404 	addi	r7,r7,16
   41594:	41bff436 	bltu	r8,r6,41568 <memcpy+0x44>
   41598:	008000c4 	movi	r2,3
   4159c:	1180072e 	bgeu	r2,r6,415bc <memcpy+0x98>
   415a0:	1007883a 	mov	r3,r2
   415a4:	28800017 	ldw	r2,0(r5)
   415a8:	31bfff04 	addi	r6,r6,-4
   415ac:	29400104 	addi	r5,r5,4
   415b0:	38800015 	stw	r2,0(r7)
   415b4:	39c00104 	addi	r7,r7,4
   415b8:	19bffa36 	bltu	r3,r6,415a4 <memcpy+0x80>
   415bc:	3807883a 	mov	r3,r7
   415c0:	003fde06 	br	4153c <memcpy+0x18>

000415c4 <memmove>:
   415c4:	2807883a 	mov	r3,r5
   415c8:	2011883a 	mov	r8,r4
   415cc:	29000c2e 	bgeu	r5,r4,41600 <memmove+0x3c>
   415d0:	298f883a 	add	r7,r5,r6
   415d4:	21c00a2e 	bgeu	r4,r7,41600 <memmove+0x3c>
   415d8:	30000726 	beq	r6,zero,415f8 <memmove+0x34>
   415dc:	2187883a 	add	r3,r4,r6
   415e0:	198dc83a 	sub	r6,r3,r6
   415e4:	39ffffc4 	addi	r7,r7,-1
   415e8:	38800003 	ldbu	r2,0(r7)
   415ec:	18ffffc4 	addi	r3,r3,-1
   415f0:	18800005 	stb	r2,0(r3)
   415f4:	19bffb1e 	bne	r3,r6,415e4 <memmove+0x20>
   415f8:	2005883a 	mov	r2,r4
   415fc:	f800283a 	ret
   41600:	01c003c4 	movi	r7,15
   41604:	39800a36 	bltu	r7,r6,41630 <memmove+0x6c>
   41608:	303ffb26 	beq	r6,zero,415f8 <memmove+0x34>
   4160c:	400f883a 	mov	r7,r8
   41610:	320d883a 	add	r6,r6,r8
   41614:	28800003 	ldbu	r2,0(r5)
   41618:	29400044 	addi	r5,r5,1
   4161c:	38800005 	stb	r2,0(r7)
   41620:	39c00044 	addi	r7,r7,1
   41624:	39bffb1e 	bne	r7,r6,41614 <memmove+0x50>
   41628:	2005883a 	mov	r2,r4
   4162c:	f800283a 	ret
   41630:	1904b03a 	or	r2,r3,r4
   41634:	108000cc 	andi	r2,r2,3
   41638:	103ff31e 	bne	r2,zero,41608 <memmove+0x44>
   4163c:	3811883a 	mov	r8,r7
   41640:	180b883a 	mov	r5,r3
   41644:	200f883a 	mov	r7,r4
   41648:	28c00017 	ldw	r3,0(r5)
   4164c:	31bffc04 	addi	r6,r6,-16
   41650:	38c00015 	stw	r3,0(r7)
   41654:	28800117 	ldw	r2,4(r5)
   41658:	38800115 	stw	r2,4(r7)
   4165c:	28c00217 	ldw	r3,8(r5)
   41660:	38c00215 	stw	r3,8(r7)
   41664:	28800317 	ldw	r2,12(r5)
   41668:	29400404 	addi	r5,r5,16
   4166c:	38800315 	stw	r2,12(r7)
   41670:	39c00404 	addi	r7,r7,16
   41674:	41bff436 	bltu	r8,r6,41648 <memmove+0x84>
   41678:	008000c4 	movi	r2,3
   4167c:	1180072e 	bgeu	r2,r6,4169c <memmove+0xd8>
   41680:	1007883a 	mov	r3,r2
   41684:	28800017 	ldw	r2,0(r5)
   41688:	31bfff04 	addi	r6,r6,-4
   4168c:	29400104 	addi	r5,r5,4
   41690:	38800015 	stw	r2,0(r7)
   41694:	39c00104 	addi	r7,r7,4
   41698:	19bffa36 	bltu	r3,r6,41684 <memmove+0xc0>
   4169c:	3811883a 	mov	r8,r7
   416a0:	003fd906 	br	41608 <memmove+0x44>

000416a4 <_realloc_r>:
   416a4:	defff404 	addi	sp,sp,-48
   416a8:	dd800815 	stw	r22,32(sp)
   416ac:	dc800415 	stw	r18,16(sp)
   416b0:	dc400315 	stw	r17,12(sp)
   416b4:	dfc00b15 	stw	ra,44(sp)
   416b8:	df000a15 	stw	fp,40(sp)
   416bc:	ddc00915 	stw	r23,36(sp)
   416c0:	dd400715 	stw	r21,28(sp)
   416c4:	dd000615 	stw	r20,24(sp)
   416c8:	dcc00515 	stw	r19,20(sp)
   416cc:	dc000215 	stw	r16,8(sp)
   416d0:	2825883a 	mov	r18,r5
   416d4:	3023883a 	mov	r17,r6
   416d8:	202d883a 	mov	r22,r4
   416dc:	2800c926 	beq	r5,zero,41a04 <_realloc_r+0x360>
   416e0:	00436d00 	call	436d0 <__malloc_lock>
   416e4:	943ffe04 	addi	r16,r18,-8
   416e8:	88c002c4 	addi	r3,r17,11
   416ec:	00800584 	movi	r2,22
   416f0:	82000117 	ldw	r8,4(r16)
   416f4:	10c01b2e 	bgeu	r2,r3,41764 <_realloc_r+0xc0>
   416f8:	00bffe04 	movi	r2,-8
   416fc:	188e703a 	and	r7,r3,r2
   41700:	3839883a 	mov	fp,r7
   41704:	38001a16 	blt	r7,zero,41770 <_realloc_r+0xcc>
   41708:	e4401936 	bltu	fp,r17,41770 <_realloc_r+0xcc>
   4170c:	013fff04 	movi	r4,-4
   41710:	4126703a 	and	r19,r8,r4
   41714:	99c02616 	blt	r19,r7,417b0 <_realloc_r+0x10c>
   41718:	802b883a 	mov	r21,r16
   4171c:	9829883a 	mov	r20,r19
   41720:	84000204 	addi	r16,r16,8
   41724:	a80f883a 	mov	r7,r21
   41728:	a70dc83a 	sub	r6,r20,fp
   4172c:	008003c4 	movi	r2,15
   41730:	1180c136 	bltu	r2,r6,41a38 <_realloc_r+0x394>
   41734:	38800117 	ldw	r2,4(r7)
   41738:	a549883a 	add	r4,r20,r21
   4173c:	1080004c 	andi	r2,r2,1
   41740:	a084b03a 	or	r2,r20,r2
   41744:	38800115 	stw	r2,4(r7)
   41748:	20c00117 	ldw	r3,4(r4)
   4174c:	18c00054 	ori	r3,r3,1
   41750:	20c00115 	stw	r3,4(r4)
   41754:	b009883a 	mov	r4,r22
   41758:	00436f00 	call	436f0 <__malloc_unlock>
   4175c:	8023883a 	mov	r17,r16
   41760:	00000606 	br	4177c <_realloc_r+0xd8>
   41764:	01c00404 	movi	r7,16
   41768:	3839883a 	mov	fp,r7
   4176c:	e47fe72e 	bgeu	fp,r17,4170c <_realloc_r+0x68>
   41770:	00800304 	movi	r2,12
   41774:	0023883a 	mov	r17,zero
   41778:	b0800015 	stw	r2,0(r22)
   4177c:	8805883a 	mov	r2,r17
   41780:	dfc00b17 	ldw	ra,44(sp)
   41784:	df000a17 	ldw	fp,40(sp)
   41788:	ddc00917 	ldw	r23,36(sp)
   4178c:	dd800817 	ldw	r22,32(sp)
   41790:	dd400717 	ldw	r21,28(sp)
   41794:	dd000617 	ldw	r20,24(sp)
   41798:	dcc00517 	ldw	r19,20(sp)
   4179c:	dc800417 	ldw	r18,16(sp)
   417a0:	dc400317 	ldw	r17,12(sp)
   417a4:	dc000217 	ldw	r16,8(sp)
   417a8:	dec00c04 	addi	sp,sp,48
   417ac:	f800283a 	ret
   417b0:	00900034 	movhi	r2,16384
   417b4:	10811604 	addi	r2,r2,1112
   417b8:	12400217 	ldw	r9,8(r2)
   417bc:	84cd883a 	add	r6,r16,r19
   417c0:	802b883a 	mov	r21,r16
   417c4:	3240b926 	beq	r6,r9,41aac <_realloc_r+0x408>
   417c8:	31400117 	ldw	r5,4(r6)
   417cc:	00bfff84 	movi	r2,-2
   417d0:	2884703a 	and	r2,r5,r2
   417d4:	1185883a 	add	r2,r2,r6
   417d8:	10c00117 	ldw	r3,4(r2)
   417dc:	18c0004c 	andi	r3,r3,1
   417e0:	1807003a 	cmpeq	r3,r3,zero
   417e4:	1800a326 	beq	r3,zero,41a74 <_realloc_r+0x3d0>
   417e8:	2908703a 	and	r4,r5,r4
   417ec:	9929883a 	add	r20,r19,r4
   417f0:	a1c0a30e 	bge	r20,r7,41a80 <_realloc_r+0x3dc>
   417f4:	4080004c 	andi	r2,r8,1
   417f8:	1000551e 	bne	r2,zero,41950 <_realloc_r+0x2ac>
   417fc:	80800017 	ldw	r2,0(r16)
   41800:	80afc83a 	sub	r23,r16,r2
   41804:	b8c00117 	ldw	r3,4(r23)
   41808:	00bfff04 	movi	r2,-4
   4180c:	1884703a 	and	r2,r3,r2
   41810:	30002e26 	beq	r6,zero,418cc <_realloc_r+0x228>
   41814:	3240b926 	beq	r6,r9,41afc <_realloc_r+0x458>
   41818:	98a9883a 	add	r20,r19,r2
   4181c:	2509883a 	add	r4,r4,r20
   41820:	d9000015 	stw	r4,0(sp)
   41824:	21c02a16 	blt	r4,r7,418d0 <_realloc_r+0x22c>
   41828:	30800317 	ldw	r2,12(r6)
   4182c:	30c00217 	ldw	r3,8(r6)
   41830:	01400904 	movi	r5,36
   41834:	99bfff04 	addi	r6,r19,-4
   41838:	18800315 	stw	r2,12(r3)
   4183c:	10c00215 	stw	r3,8(r2)
   41840:	b9000317 	ldw	r4,12(r23)
   41844:	b8800217 	ldw	r2,8(r23)
   41848:	b82b883a 	mov	r21,r23
   4184c:	bc000204 	addi	r16,r23,8
   41850:	20800215 	stw	r2,8(r4)
   41854:	11000315 	stw	r4,12(r2)
   41858:	2980e436 	bltu	r5,r6,41bec <_realloc_r+0x548>
   4185c:	008004c4 	movi	r2,19
   41860:	9009883a 	mov	r4,r18
   41864:	8011883a 	mov	r8,r16
   41868:	11800f2e 	bgeu	r2,r6,418a8 <_realloc_r+0x204>
   4186c:	90800017 	ldw	r2,0(r18)
   41870:	ba000404 	addi	r8,r23,16
   41874:	91000204 	addi	r4,r18,8
   41878:	b8800215 	stw	r2,8(r23)
   4187c:	90c00117 	ldw	r3,4(r18)
   41880:	008006c4 	movi	r2,27
   41884:	b8c00315 	stw	r3,12(r23)
   41888:	1180072e 	bgeu	r2,r6,418a8 <_realloc_r+0x204>
   4188c:	90c00217 	ldw	r3,8(r18)
   41890:	ba000604 	addi	r8,r23,24
   41894:	91000404 	addi	r4,r18,16
   41898:	b8c00415 	stw	r3,16(r23)
   4189c:	90800317 	ldw	r2,12(r18)
   418a0:	b8800515 	stw	r2,20(r23)
   418a4:	3140e726 	beq	r6,r5,41c44 <_realloc_r+0x5a0>
   418a8:	20800017 	ldw	r2,0(r4)
   418ac:	dd000017 	ldw	r20,0(sp)
   418b0:	b80f883a 	mov	r7,r23
   418b4:	40800015 	stw	r2,0(r8)
   418b8:	20c00117 	ldw	r3,4(r4)
   418bc:	40c00115 	stw	r3,4(r8)
   418c0:	20800217 	ldw	r2,8(r4)
   418c4:	40800215 	stw	r2,8(r8)
   418c8:	003f9706 	br	41728 <_realloc_r+0x84>
   418cc:	98a9883a 	add	r20,r19,r2
   418d0:	a1c01f16 	blt	r20,r7,41950 <_realloc_r+0x2ac>
   418d4:	b8c00317 	ldw	r3,12(r23)
   418d8:	b8800217 	ldw	r2,8(r23)
   418dc:	99bfff04 	addi	r6,r19,-4
   418e0:	01400904 	movi	r5,36
   418e4:	b82b883a 	mov	r21,r23
   418e8:	18800215 	stw	r2,8(r3)
   418ec:	10c00315 	stw	r3,12(r2)
   418f0:	bc000204 	addi	r16,r23,8
   418f4:	2980c336 	bltu	r5,r6,41c04 <_realloc_r+0x560>
   418f8:	008004c4 	movi	r2,19
   418fc:	9009883a 	mov	r4,r18
   41900:	8011883a 	mov	r8,r16
   41904:	11800f2e 	bgeu	r2,r6,41944 <_realloc_r+0x2a0>
   41908:	90800017 	ldw	r2,0(r18)
   4190c:	ba000404 	addi	r8,r23,16
   41910:	91000204 	addi	r4,r18,8
   41914:	b8800215 	stw	r2,8(r23)
   41918:	90c00117 	ldw	r3,4(r18)
   4191c:	008006c4 	movi	r2,27
   41920:	b8c00315 	stw	r3,12(r23)
   41924:	1180072e 	bgeu	r2,r6,41944 <_realloc_r+0x2a0>
   41928:	90c00217 	ldw	r3,8(r18)
   4192c:	ba000604 	addi	r8,r23,24
   41930:	91000404 	addi	r4,r18,16
   41934:	b8c00415 	stw	r3,16(r23)
   41938:	90800317 	ldw	r2,12(r18)
   4193c:	b8800515 	stw	r2,20(r23)
   41940:	3140c726 	beq	r6,r5,41c60 <_realloc_r+0x5bc>
   41944:	20800017 	ldw	r2,0(r4)
   41948:	b80f883a 	mov	r7,r23
   4194c:	003fd906 	br	418b4 <_realloc_r+0x210>
   41950:	880b883a 	mov	r5,r17
   41954:	b009883a 	mov	r4,r22
   41958:	0040d000 	call	40d00 <_malloc_r>
   4195c:	1023883a 	mov	r17,r2
   41960:	10002526 	beq	r2,zero,419f8 <_realloc_r+0x354>
   41964:	80800117 	ldw	r2,4(r16)
   41968:	00ffff84 	movi	r3,-2
   4196c:	893ffe04 	addi	r4,r17,-8
   41970:	10c4703a 	and	r2,r2,r3
   41974:	8085883a 	add	r2,r16,r2
   41978:	20809526 	beq	r4,r2,41bd0 <_realloc_r+0x52c>
   4197c:	99bfff04 	addi	r6,r19,-4
   41980:	01c00904 	movi	r7,36
   41984:	39804536 	bltu	r7,r6,41a9c <_realloc_r+0x3f8>
   41988:	008004c4 	movi	r2,19
   4198c:	9009883a 	mov	r4,r18
   41990:	880b883a 	mov	r5,r17
   41994:	11800f2e 	bgeu	r2,r6,419d4 <_realloc_r+0x330>
   41998:	90800017 	ldw	r2,0(r18)
   4199c:	89400204 	addi	r5,r17,8
   419a0:	91000204 	addi	r4,r18,8
   419a4:	88800015 	stw	r2,0(r17)
   419a8:	90c00117 	ldw	r3,4(r18)
   419ac:	008006c4 	movi	r2,27
   419b0:	88c00115 	stw	r3,4(r17)
   419b4:	1180072e 	bgeu	r2,r6,419d4 <_realloc_r+0x330>
   419b8:	90c00217 	ldw	r3,8(r18)
   419bc:	89400404 	addi	r5,r17,16
   419c0:	91000404 	addi	r4,r18,16
   419c4:	88c00215 	stw	r3,8(r17)
   419c8:	90800317 	ldw	r2,12(r18)
   419cc:	88800315 	stw	r2,12(r17)
   419d0:	31c09126 	beq	r6,r7,41c18 <_realloc_r+0x574>
   419d4:	20800017 	ldw	r2,0(r4)
   419d8:	28800015 	stw	r2,0(r5)
   419dc:	20c00117 	ldw	r3,4(r4)
   419e0:	28c00115 	stw	r3,4(r5)
   419e4:	20800217 	ldw	r2,8(r4)
   419e8:	28800215 	stw	r2,8(r5)
   419ec:	900b883a 	mov	r5,r18
   419f0:	b009883a 	mov	r4,r22
   419f4:	00424600 	call	42460 <_free_r>
   419f8:	b009883a 	mov	r4,r22
   419fc:	00436f00 	call	436f0 <__malloc_unlock>
   41a00:	003f5e06 	br	4177c <_realloc_r+0xd8>
   41a04:	300b883a 	mov	r5,r6
   41a08:	dfc00b17 	ldw	ra,44(sp)
   41a0c:	df000a17 	ldw	fp,40(sp)
   41a10:	ddc00917 	ldw	r23,36(sp)
   41a14:	dd800817 	ldw	r22,32(sp)
   41a18:	dd400717 	ldw	r21,28(sp)
   41a1c:	dd000617 	ldw	r20,24(sp)
   41a20:	dcc00517 	ldw	r19,20(sp)
   41a24:	dc800417 	ldw	r18,16(sp)
   41a28:	dc400317 	ldw	r17,12(sp)
   41a2c:	dc000217 	ldw	r16,8(sp)
   41a30:	dec00c04 	addi	sp,sp,48
   41a34:	0040d001 	jmpi	40d00 <_malloc_r>
   41a38:	38800117 	ldw	r2,4(r7)
   41a3c:	e54b883a 	add	r5,fp,r21
   41a40:	31000054 	ori	r4,r6,1
   41a44:	1080004c 	andi	r2,r2,1
   41a48:	1704b03a 	or	r2,r2,fp
   41a4c:	38800115 	stw	r2,4(r7)
   41a50:	29000115 	stw	r4,4(r5)
   41a54:	2987883a 	add	r3,r5,r6
   41a58:	18800117 	ldw	r2,4(r3)
   41a5c:	29400204 	addi	r5,r5,8
   41a60:	b009883a 	mov	r4,r22
   41a64:	10800054 	ori	r2,r2,1
   41a68:	18800115 	stw	r2,4(r3)
   41a6c:	00424600 	call	42460 <_free_r>
   41a70:	003f3806 	br	41754 <_realloc_r+0xb0>
   41a74:	000d883a 	mov	r6,zero
   41a78:	0009883a 	mov	r4,zero
   41a7c:	003f5d06 	br	417f4 <_realloc_r+0x150>
   41a80:	30c00217 	ldw	r3,8(r6)
   41a84:	30800317 	ldw	r2,12(r6)
   41a88:	800f883a 	mov	r7,r16
   41a8c:	84000204 	addi	r16,r16,8
   41a90:	10c00215 	stw	r3,8(r2)
   41a94:	18800315 	stw	r2,12(r3)
   41a98:	003f2306 	br	41728 <_realloc_r+0x84>
   41a9c:	8809883a 	mov	r4,r17
   41aa0:	900b883a 	mov	r5,r18
   41aa4:	00415c40 	call	415c4 <memmove>
   41aa8:	003fd006 	br	419ec <_realloc_r+0x348>
   41aac:	30800117 	ldw	r2,4(r6)
   41ab0:	e0c00404 	addi	r3,fp,16
   41ab4:	1108703a 	and	r4,r2,r4
   41ab8:	9905883a 	add	r2,r19,r4
   41abc:	10ff4d16 	blt	r2,r3,417f4 <_realloc_r+0x150>
   41ac0:	1705c83a 	sub	r2,r2,fp
   41ac4:	870b883a 	add	r5,r16,fp
   41ac8:	10800054 	ori	r2,r2,1
   41acc:	28800115 	stw	r2,4(r5)
   41ad0:	80c00117 	ldw	r3,4(r16)
   41ad4:	00900034 	movhi	r2,16384
   41ad8:	10811604 	addi	r2,r2,1112
   41adc:	b009883a 	mov	r4,r22
   41ae0:	18c0004c 	andi	r3,r3,1
   41ae4:	e0c6b03a 	or	r3,fp,r3
   41ae8:	11400215 	stw	r5,8(r2)
   41aec:	80c00115 	stw	r3,4(r16)
   41af0:	00436f00 	call	436f0 <__malloc_unlock>
   41af4:	84400204 	addi	r17,r16,8
   41af8:	003f2006 	br	4177c <_realloc_r+0xd8>
   41afc:	98a9883a 	add	r20,r19,r2
   41b00:	2509883a 	add	r4,r4,r20
   41b04:	e0800404 	addi	r2,fp,16
   41b08:	d9000115 	stw	r4,4(sp)
   41b0c:	20bf7016 	blt	r4,r2,418d0 <_realloc_r+0x22c>
   41b10:	b8c00317 	ldw	r3,12(r23)
   41b14:	b8800217 	ldw	r2,8(r23)
   41b18:	99bfff04 	addi	r6,r19,-4
   41b1c:	01400904 	movi	r5,36
   41b20:	18800215 	stw	r2,8(r3)
   41b24:	10c00315 	stw	r3,12(r2)
   41b28:	bc400204 	addi	r17,r23,8
   41b2c:	29804136 	bltu	r5,r6,41c34 <_realloc_r+0x590>
   41b30:	008004c4 	movi	r2,19
   41b34:	9009883a 	mov	r4,r18
   41b38:	880f883a 	mov	r7,r17
   41b3c:	11800f2e 	bgeu	r2,r6,41b7c <_realloc_r+0x4d8>
   41b40:	90800017 	ldw	r2,0(r18)
   41b44:	b9c00404 	addi	r7,r23,16
   41b48:	91000204 	addi	r4,r18,8
   41b4c:	b8800215 	stw	r2,8(r23)
   41b50:	90c00117 	ldw	r3,4(r18)
   41b54:	008006c4 	movi	r2,27
   41b58:	b8c00315 	stw	r3,12(r23)
   41b5c:	1180072e 	bgeu	r2,r6,41b7c <_realloc_r+0x4d8>
   41b60:	90c00217 	ldw	r3,8(r18)
   41b64:	b9c00604 	addi	r7,r23,24
   41b68:	91000404 	addi	r4,r18,16
   41b6c:	b8c00415 	stw	r3,16(r23)
   41b70:	90800317 	ldw	r2,12(r18)
   41b74:	b8800515 	stw	r2,20(r23)
   41b78:	31404026 	beq	r6,r5,41c7c <_realloc_r+0x5d8>
   41b7c:	20800017 	ldw	r2,0(r4)
   41b80:	38800015 	stw	r2,0(r7)
   41b84:	20c00117 	ldw	r3,4(r4)
   41b88:	38c00115 	stw	r3,4(r7)
   41b8c:	20800217 	ldw	r2,8(r4)
   41b90:	38800215 	stw	r2,8(r7)
   41b94:	d8c00117 	ldw	r3,4(sp)
   41b98:	bf0b883a 	add	r5,r23,fp
   41b9c:	b009883a 	mov	r4,r22
   41ba0:	1f05c83a 	sub	r2,r3,fp
   41ba4:	10800054 	ori	r2,r2,1
   41ba8:	28800115 	stw	r2,4(r5)
   41bac:	b8c00117 	ldw	r3,4(r23)
   41bb0:	00900034 	movhi	r2,16384
   41bb4:	10811604 	addi	r2,r2,1112
   41bb8:	11400215 	stw	r5,8(r2)
   41bbc:	18c0004c 	andi	r3,r3,1
   41bc0:	e0c6b03a 	or	r3,fp,r3
   41bc4:	b8c00115 	stw	r3,4(r23)
   41bc8:	00436f00 	call	436f0 <__malloc_unlock>
   41bcc:	003eeb06 	br	4177c <_realloc_r+0xd8>
   41bd0:	20800117 	ldw	r2,4(r4)
   41bd4:	00ffff04 	movi	r3,-4
   41bd8:	800f883a 	mov	r7,r16
   41bdc:	10c4703a 	and	r2,r2,r3
   41be0:	98a9883a 	add	r20,r19,r2
   41be4:	84000204 	addi	r16,r16,8
   41be8:	003ecf06 	br	41728 <_realloc_r+0x84>
   41bec:	900b883a 	mov	r5,r18
   41bf0:	8009883a 	mov	r4,r16
   41bf4:	00415c40 	call	415c4 <memmove>
   41bf8:	dd000017 	ldw	r20,0(sp)
   41bfc:	b80f883a 	mov	r7,r23
   41c00:	003ec906 	br	41728 <_realloc_r+0x84>
   41c04:	900b883a 	mov	r5,r18
   41c08:	8009883a 	mov	r4,r16
   41c0c:	00415c40 	call	415c4 <memmove>
   41c10:	b80f883a 	mov	r7,r23
   41c14:	003ec406 	br	41728 <_realloc_r+0x84>
   41c18:	90c00417 	ldw	r3,16(r18)
   41c1c:	89400604 	addi	r5,r17,24
   41c20:	91000604 	addi	r4,r18,24
   41c24:	88c00415 	stw	r3,16(r17)
   41c28:	90800517 	ldw	r2,20(r18)
   41c2c:	88800515 	stw	r2,20(r17)
   41c30:	003f6806 	br	419d4 <_realloc_r+0x330>
   41c34:	900b883a 	mov	r5,r18
   41c38:	8809883a 	mov	r4,r17
   41c3c:	00415c40 	call	415c4 <memmove>
   41c40:	003fd406 	br	41b94 <_realloc_r+0x4f0>
   41c44:	90c00417 	ldw	r3,16(r18)
   41c48:	91000604 	addi	r4,r18,24
   41c4c:	ba000804 	addi	r8,r23,32
   41c50:	b8c00615 	stw	r3,24(r23)
   41c54:	90800517 	ldw	r2,20(r18)
   41c58:	b8800715 	stw	r2,28(r23)
   41c5c:	003f1206 	br	418a8 <_realloc_r+0x204>
   41c60:	90c00417 	ldw	r3,16(r18)
   41c64:	91000604 	addi	r4,r18,24
   41c68:	ba000804 	addi	r8,r23,32
   41c6c:	b8c00615 	stw	r3,24(r23)
   41c70:	90800517 	ldw	r2,20(r18)
   41c74:	b8800715 	stw	r2,28(r23)
   41c78:	003f3206 	br	41944 <_realloc_r+0x2a0>
   41c7c:	90c00417 	ldw	r3,16(r18)
   41c80:	91000604 	addi	r4,r18,24
   41c84:	b9c00804 	addi	r7,r23,32
   41c88:	b8c00615 	stw	r3,24(r23)
   41c8c:	90800517 	ldw	r2,20(r18)
   41c90:	b8800715 	stw	r2,28(r23)
   41c94:	003fb906 	br	41b7c <_realloc_r+0x4d8>

00041c98 <_sbrk_r>:
   41c98:	defffd04 	addi	sp,sp,-12
   41c9c:	dc000015 	stw	r16,0(sp)
   41ca0:	04100034 	movhi	r16,16384
   41ca4:	8406ab04 	addi	r16,r16,6828
   41ca8:	dc400115 	stw	r17,4(sp)
   41cac:	80000015 	stw	zero,0(r16)
   41cb0:	2023883a 	mov	r17,r4
   41cb4:	2809883a 	mov	r4,r5
   41cb8:	dfc00215 	stw	ra,8(sp)
   41cbc:	00438f00 	call	438f0 <sbrk>
   41cc0:	1007883a 	mov	r3,r2
   41cc4:	00bfffc4 	movi	r2,-1
   41cc8:	18800626 	beq	r3,r2,41ce4 <_sbrk_r+0x4c>
   41ccc:	1805883a 	mov	r2,r3
   41cd0:	dfc00217 	ldw	ra,8(sp)
   41cd4:	dc400117 	ldw	r17,4(sp)
   41cd8:	dc000017 	ldw	r16,0(sp)
   41cdc:	dec00304 	addi	sp,sp,12
   41ce0:	f800283a 	ret
   41ce4:	80800017 	ldw	r2,0(r16)
   41ce8:	103ff826 	beq	r2,zero,41ccc <_sbrk_r+0x34>
   41cec:	88800015 	stw	r2,0(r17)
   41cf0:	1805883a 	mov	r2,r3
   41cf4:	dfc00217 	ldw	ra,8(sp)
   41cf8:	dc400117 	ldw	r17,4(sp)
   41cfc:	dc000017 	ldw	r16,0(sp)
   41d00:	dec00304 	addi	sp,sp,12
   41d04:	f800283a 	ret

00041d08 <__swsetup_r>:
   41d08:	00900034 	movhi	r2,16384
   41d0c:	10869a04 	addi	r2,r2,6760
   41d10:	10c00017 	ldw	r3,0(r2)
   41d14:	defffd04 	addi	sp,sp,-12
   41d18:	dc400115 	stw	r17,4(sp)
   41d1c:	dc000015 	stw	r16,0(sp)
   41d20:	dfc00215 	stw	ra,8(sp)
   41d24:	2023883a 	mov	r17,r4
   41d28:	2821883a 	mov	r16,r5
   41d2c:	18000226 	beq	r3,zero,41d38 <__swsetup_r+0x30>
   41d30:	18800e17 	ldw	r2,56(r3)
   41d34:	10001f26 	beq	r2,zero,41db4 <__swsetup_r+0xac>
   41d38:	8100030b 	ldhu	r4,12(r16)
   41d3c:	2080020c 	andi	r2,r4,8
   41d40:	10002826 	beq	r2,zero,41de4 <__swsetup_r+0xdc>
   41d44:	81400417 	ldw	r5,16(r16)
   41d48:	28001d26 	beq	r5,zero,41dc0 <__swsetup_r+0xb8>
   41d4c:	2080004c 	andi	r2,r4,1
   41d50:	1005003a 	cmpeq	r2,r2,zero
   41d54:	10000b26 	beq	r2,zero,41d84 <__swsetup_r+0x7c>
   41d58:	2080008c 	andi	r2,r4,2
   41d5c:	10001226 	beq	r2,zero,41da8 <__swsetup_r+0xa0>
   41d60:	0005883a 	mov	r2,zero
   41d64:	80800215 	stw	r2,8(r16)
   41d68:	28000b26 	beq	r5,zero,41d98 <__swsetup_r+0x90>
   41d6c:	0005883a 	mov	r2,zero
   41d70:	dfc00217 	ldw	ra,8(sp)
   41d74:	dc400117 	ldw	r17,4(sp)
   41d78:	dc000017 	ldw	r16,0(sp)
   41d7c:	dec00304 	addi	sp,sp,12
   41d80:	f800283a 	ret
   41d84:	80800517 	ldw	r2,20(r16)
   41d88:	80000215 	stw	zero,8(r16)
   41d8c:	0085c83a 	sub	r2,zero,r2
   41d90:	80800615 	stw	r2,24(r16)
   41d94:	283ff51e 	bne	r5,zero,41d6c <__swsetup_r+0x64>
   41d98:	2080200c 	andi	r2,r4,128
   41d9c:	103ff326 	beq	r2,zero,41d6c <__swsetup_r+0x64>
   41da0:	00bfffc4 	movi	r2,-1
   41da4:	003ff206 	br	41d70 <__swsetup_r+0x68>
   41da8:	80800517 	ldw	r2,20(r16)
   41dac:	80800215 	stw	r2,8(r16)
   41db0:	003fed06 	br	41d68 <__swsetup_r+0x60>
   41db4:	1809883a 	mov	r4,r3
   41db8:	00420dc0 	call	420dc <__sinit>
   41dbc:	003fde06 	br	41d38 <__swsetup_r+0x30>
   41dc0:	20c0a00c 	andi	r3,r4,640
   41dc4:	00808004 	movi	r2,512
   41dc8:	18bfe026 	beq	r3,r2,41d4c <__swsetup_r+0x44>
   41dcc:	8809883a 	mov	r4,r17
   41dd0:	800b883a 	mov	r5,r16
   41dd4:	00428f40 	call	428f4 <__smakebuf_r>
   41dd8:	8100030b 	ldhu	r4,12(r16)
   41ddc:	81400417 	ldw	r5,16(r16)
   41de0:	003fda06 	br	41d4c <__swsetup_r+0x44>
   41de4:	2080040c 	andi	r2,r4,16
   41de8:	103fed26 	beq	r2,zero,41da0 <__swsetup_r+0x98>
   41dec:	2080010c 	andi	r2,r4,4
   41df0:	10001226 	beq	r2,zero,41e3c <__swsetup_r+0x134>
   41df4:	81400c17 	ldw	r5,48(r16)
   41df8:	28000526 	beq	r5,zero,41e10 <__swsetup_r+0x108>
   41dfc:	80801004 	addi	r2,r16,64
   41e00:	28800226 	beq	r5,r2,41e0c <__swsetup_r+0x104>
   41e04:	8809883a 	mov	r4,r17
   41e08:	00424600 	call	42460 <_free_r>
   41e0c:	80000c15 	stw	zero,48(r16)
   41e10:	8080030b 	ldhu	r2,12(r16)
   41e14:	81400417 	ldw	r5,16(r16)
   41e18:	80000115 	stw	zero,4(r16)
   41e1c:	10bff6cc 	andi	r2,r2,65499
   41e20:	8080030d 	sth	r2,12(r16)
   41e24:	81400015 	stw	r5,0(r16)
   41e28:	8080030b 	ldhu	r2,12(r16)
   41e2c:	10800214 	ori	r2,r2,8
   41e30:	113fffcc 	andi	r4,r2,65535
   41e34:	8080030d 	sth	r2,12(r16)
   41e38:	003fc306 	br	41d48 <__swsetup_r+0x40>
   41e3c:	81400417 	ldw	r5,16(r16)
   41e40:	003ff906 	br	41e28 <__swsetup_r+0x120>

00041e44 <_fflush_r>:
   41e44:	defffb04 	addi	sp,sp,-20
   41e48:	dcc00315 	stw	r19,12(sp)
   41e4c:	dc800215 	stw	r18,8(sp)
   41e50:	dfc00415 	stw	ra,16(sp)
   41e54:	dc400115 	stw	r17,4(sp)
   41e58:	dc000015 	stw	r16,0(sp)
   41e5c:	2027883a 	mov	r19,r4
   41e60:	2825883a 	mov	r18,r5
   41e64:	20000226 	beq	r4,zero,41e70 <_fflush_r+0x2c>
   41e68:	20800e17 	ldw	r2,56(r4)
   41e6c:	10005626 	beq	r2,zero,41fc8 <_fflush_r+0x184>
   41e70:	9100030b 	ldhu	r4,12(r18)
   41e74:	20ffffcc 	andi	r3,r4,65535
   41e78:	18e0001c 	xori	r3,r3,32768
   41e7c:	18e00004 	addi	r3,r3,-32768
   41e80:	1880020c 	andi	r2,r3,8
   41e84:	1000261e 	bne	r2,zero,41f20 <_fflush_r+0xdc>
   41e88:	90c00117 	ldw	r3,4(r18)
   41e8c:	20820014 	ori	r2,r4,2048
   41e90:	9080030d 	sth	r2,12(r18)
   41e94:	1009883a 	mov	r4,r2
   41e98:	00c0400e 	bge	zero,r3,41f9c <_fflush_r+0x158>
   41e9c:	92000a17 	ldw	r8,40(r18)
   41ea0:	40004026 	beq	r8,zero,41fa4 <_fflush_r+0x160>
   41ea4:	2084000c 	andi	r2,r4,4096
   41ea8:	10005326 	beq	r2,zero,41ff8 <_fflush_r+0x1b4>
   41eac:	94001417 	ldw	r16,80(r18)
   41eb0:	9080030b 	ldhu	r2,12(r18)
   41eb4:	1080010c 	andi	r2,r2,4
   41eb8:	1000481e 	bne	r2,zero,41fdc <_fflush_r+0x198>
   41ebc:	91400717 	ldw	r5,28(r18)
   41ec0:	9809883a 	mov	r4,r19
   41ec4:	800d883a 	mov	r6,r16
   41ec8:	000f883a 	mov	r7,zero
   41ecc:	403ee83a 	callr	r8
   41ed0:	8080261e 	bne	r16,r2,41f6c <_fflush_r+0x128>
   41ed4:	9080030b 	ldhu	r2,12(r18)
   41ed8:	91000417 	ldw	r4,16(r18)
   41edc:	90000115 	stw	zero,4(r18)
   41ee0:	10bdffcc 	andi	r2,r2,63487
   41ee4:	10ffffcc 	andi	r3,r2,65535
   41ee8:	18c4000c 	andi	r3,r3,4096
   41eec:	9080030d 	sth	r2,12(r18)
   41ef0:	91000015 	stw	r4,0(r18)
   41ef4:	18002b26 	beq	r3,zero,41fa4 <_fflush_r+0x160>
   41ef8:	0007883a 	mov	r3,zero
   41efc:	1805883a 	mov	r2,r3
   41f00:	94001415 	stw	r16,80(r18)
   41f04:	dfc00417 	ldw	ra,16(sp)
   41f08:	dcc00317 	ldw	r19,12(sp)
   41f0c:	dc800217 	ldw	r18,8(sp)
   41f10:	dc400117 	ldw	r17,4(sp)
   41f14:	dc000017 	ldw	r16,0(sp)
   41f18:	dec00504 	addi	sp,sp,20
   41f1c:	f800283a 	ret
   41f20:	94400417 	ldw	r17,16(r18)
   41f24:	88001f26 	beq	r17,zero,41fa4 <_fflush_r+0x160>
   41f28:	90800017 	ldw	r2,0(r18)
   41f2c:	18c000cc 	andi	r3,r3,3
   41f30:	94400015 	stw	r17,0(r18)
   41f34:	1461c83a 	sub	r16,r2,r17
   41f38:	18002526 	beq	r3,zero,41fd0 <_fflush_r+0x18c>
   41f3c:	0005883a 	mov	r2,zero
   41f40:	90800215 	stw	r2,8(r18)
   41f44:	0400170e 	bge	zero,r16,41fa4 <_fflush_r+0x160>
   41f48:	90c00917 	ldw	r3,36(r18)
   41f4c:	91400717 	ldw	r5,28(r18)
   41f50:	880d883a 	mov	r6,r17
   41f54:	800f883a 	mov	r7,r16
   41f58:	9809883a 	mov	r4,r19
   41f5c:	183ee83a 	callr	r3
   41f60:	88a3883a 	add	r17,r17,r2
   41f64:	80a1c83a 	sub	r16,r16,r2
   41f68:	00bff616 	blt	zero,r2,41f44 <_fflush_r+0x100>
   41f6c:	9080030b 	ldhu	r2,12(r18)
   41f70:	00ffffc4 	movi	r3,-1
   41f74:	10801014 	ori	r2,r2,64
   41f78:	9080030d 	sth	r2,12(r18)
   41f7c:	1805883a 	mov	r2,r3
   41f80:	dfc00417 	ldw	ra,16(sp)
   41f84:	dcc00317 	ldw	r19,12(sp)
   41f88:	dc800217 	ldw	r18,8(sp)
   41f8c:	dc400117 	ldw	r17,4(sp)
   41f90:	dc000017 	ldw	r16,0(sp)
   41f94:	dec00504 	addi	sp,sp,20
   41f98:	f800283a 	ret
   41f9c:	90800f17 	ldw	r2,60(r18)
   41fa0:	00bfbe16 	blt	zero,r2,41e9c <_fflush_r+0x58>
   41fa4:	0007883a 	mov	r3,zero
   41fa8:	1805883a 	mov	r2,r3
   41fac:	dfc00417 	ldw	ra,16(sp)
   41fb0:	dcc00317 	ldw	r19,12(sp)
   41fb4:	dc800217 	ldw	r18,8(sp)
   41fb8:	dc400117 	ldw	r17,4(sp)
   41fbc:	dc000017 	ldw	r16,0(sp)
   41fc0:	dec00504 	addi	sp,sp,20
   41fc4:	f800283a 	ret
   41fc8:	00420dc0 	call	420dc <__sinit>
   41fcc:	003fa806 	br	41e70 <_fflush_r+0x2c>
   41fd0:	90800517 	ldw	r2,20(r18)
   41fd4:	90800215 	stw	r2,8(r18)
   41fd8:	003fda06 	br	41f44 <_fflush_r+0x100>
   41fdc:	90800117 	ldw	r2,4(r18)
   41fe0:	90c00c17 	ldw	r3,48(r18)
   41fe4:	80a1c83a 	sub	r16,r16,r2
   41fe8:	183fb426 	beq	r3,zero,41ebc <_fflush_r+0x78>
   41fec:	90800f17 	ldw	r2,60(r18)
   41ff0:	80a1c83a 	sub	r16,r16,r2
   41ff4:	003fb106 	br	41ebc <_fflush_r+0x78>
   41ff8:	91400717 	ldw	r5,28(r18)
   41ffc:	9809883a 	mov	r4,r19
   42000:	000d883a 	mov	r6,zero
   42004:	01c00044 	movi	r7,1
   42008:	403ee83a 	callr	r8
   4200c:	1021883a 	mov	r16,r2
   42010:	00bfffc4 	movi	r2,-1
   42014:	80800226 	beq	r16,r2,42020 <_fflush_r+0x1dc>
   42018:	92000a17 	ldw	r8,40(r18)
   4201c:	003fa406 	br	41eb0 <_fflush_r+0x6c>
   42020:	98c00017 	ldw	r3,0(r19)
   42024:	00800744 	movi	r2,29
   42028:	18bfde26 	beq	r3,r2,41fa4 <_fflush_r+0x160>
   4202c:	9080030b 	ldhu	r2,12(r18)
   42030:	8007883a 	mov	r3,r16
   42034:	10801014 	ori	r2,r2,64
   42038:	9080030d 	sth	r2,12(r18)
   4203c:	003fcf06 	br	41f7c <_fflush_r+0x138>

00042040 <fflush>:
   42040:	01400134 	movhi	r5,4
   42044:	29479104 	addi	r5,r5,7748
   42048:	2007883a 	mov	r3,r4
   4204c:	20000526 	beq	r4,zero,42064 <fflush+0x24>
   42050:	00900034 	movhi	r2,16384
   42054:	10869a04 	addi	r2,r2,6760
   42058:	11000017 	ldw	r4,0(r2)
   4205c:	180b883a 	mov	r5,r3
   42060:	0041e441 	jmpi	41e44 <_fflush_r>
   42064:	00900034 	movhi	r2,16384
   42068:	10869b04 	addi	r2,r2,6764
   4206c:	11000017 	ldw	r4,0(r2)
   42070:	00427741 	jmpi	42774 <_fwalk_reent>

00042074 <std>:
   42074:	00800134 	movhi	r2,4
   42078:	108ac804 	addi	r2,r2,11040
   4207c:	20800b15 	stw	r2,44(r4)
   42080:	00800134 	movhi	r2,4
   42084:	108b0304 	addi	r2,r2,11276
   42088:	20800815 	stw	r2,32(r4)
   4208c:	00c00134 	movhi	r3,4
   42090:	18cae404 	addi	r3,r3,11152
   42094:	00800134 	movhi	r2,4
   42098:	108aca04 	addi	r2,r2,11048
   4209c:	2140030d 	sth	r5,12(r4)
   420a0:	2180038d 	sth	r6,14(r4)
   420a4:	20c00915 	stw	r3,36(r4)
   420a8:	20800a15 	stw	r2,40(r4)
   420ac:	20000015 	stw	zero,0(r4)
   420b0:	20000115 	stw	zero,4(r4)
   420b4:	20000215 	stw	zero,8(r4)
   420b8:	20000415 	stw	zero,16(r4)
   420bc:	20000515 	stw	zero,20(r4)
   420c0:	20000615 	stw	zero,24(r4)
   420c4:	21000715 	stw	r4,28(r4)
   420c8:	f800283a 	ret

000420cc <__sfp_lock_acquire>:
   420cc:	f800283a 	ret

000420d0 <__sfp_lock_release>:
   420d0:	f800283a 	ret

000420d4 <__sinit_lock_acquire>:
   420d4:	f800283a 	ret

000420d8 <__sinit_lock_release>:
   420d8:	f800283a 	ret

000420dc <__sinit>:
   420dc:	20800e17 	ldw	r2,56(r4)
   420e0:	defffd04 	addi	sp,sp,-12
   420e4:	dc400115 	stw	r17,4(sp)
   420e8:	dc000015 	stw	r16,0(sp)
   420ec:	dfc00215 	stw	ra,8(sp)
   420f0:	04400044 	movi	r17,1
   420f4:	01400104 	movi	r5,4
   420f8:	000d883a 	mov	r6,zero
   420fc:	2021883a 	mov	r16,r4
   42100:	2200bb04 	addi	r8,r4,748
   42104:	200f883a 	mov	r7,r4
   42108:	10000526 	beq	r2,zero,42120 <__sinit+0x44>
   4210c:	dfc00217 	ldw	ra,8(sp)
   42110:	dc400117 	ldw	r17,4(sp)
   42114:	dc000017 	ldw	r16,0(sp)
   42118:	dec00304 	addi	sp,sp,12
   4211c:	f800283a 	ret
   42120:	21000117 	ldw	r4,4(r4)
   42124:	00800134 	movhi	r2,4
   42128:	10887004 	addi	r2,r2,8640
   4212c:	00c000c4 	movi	r3,3
   42130:	80800f15 	stw	r2,60(r16)
   42134:	80c0b915 	stw	r3,740(r16)
   42138:	8200ba15 	stw	r8,744(r16)
   4213c:	84400e15 	stw	r17,56(r16)
   42140:	8000b815 	stw	zero,736(r16)
   42144:	00420740 	call	42074 <std>
   42148:	81000217 	ldw	r4,8(r16)
   4214c:	880d883a 	mov	r6,r17
   42150:	800f883a 	mov	r7,r16
   42154:	01400284 	movi	r5,10
   42158:	00420740 	call	42074 <std>
   4215c:	81000317 	ldw	r4,12(r16)
   42160:	800f883a 	mov	r7,r16
   42164:	01400484 	movi	r5,18
   42168:	01800084 	movi	r6,2
   4216c:	dfc00217 	ldw	ra,8(sp)
   42170:	dc400117 	ldw	r17,4(sp)
   42174:	dc000017 	ldw	r16,0(sp)
   42178:	dec00304 	addi	sp,sp,12
   4217c:	00420741 	jmpi	42074 <std>

00042180 <__fp_lock>:
   42180:	0005883a 	mov	r2,zero
   42184:	f800283a 	ret

00042188 <__fp_unlock>:
   42188:	0005883a 	mov	r2,zero
   4218c:	f800283a 	ret

00042190 <__fp_unlock_all>:
   42190:	00900034 	movhi	r2,16384
   42194:	10869a04 	addi	r2,r2,6760
   42198:	11000017 	ldw	r4,0(r2)
   4219c:	01400134 	movhi	r5,4
   421a0:	29486204 	addi	r5,r5,8584
   421a4:	004283c1 	jmpi	4283c <_fwalk>

000421a8 <__fp_lock_all>:
   421a8:	00900034 	movhi	r2,16384
   421ac:	10869a04 	addi	r2,r2,6760
   421b0:	11000017 	ldw	r4,0(r2)
   421b4:	01400134 	movhi	r5,4
   421b8:	29486004 	addi	r5,r5,8576
   421bc:	004283c1 	jmpi	4283c <_fwalk>

000421c0 <_cleanup_r>:
   421c0:	01400134 	movhi	r5,4
   421c4:	294b9904 	addi	r5,r5,11876
   421c8:	004283c1 	jmpi	4283c <_fwalk>

000421cc <_cleanup>:
   421cc:	00900034 	movhi	r2,16384
   421d0:	10869b04 	addi	r2,r2,6764
   421d4:	11000017 	ldw	r4,0(r2)
   421d8:	00421c01 	jmpi	421c0 <_cleanup_r>

000421dc <__sfmoreglue>:
   421dc:	defffc04 	addi	sp,sp,-16
   421e0:	dc400115 	stw	r17,4(sp)
   421e4:	2c401724 	muli	r17,r5,92
   421e8:	dc800215 	stw	r18,8(sp)
   421ec:	2825883a 	mov	r18,r5
   421f0:	89400304 	addi	r5,r17,12
   421f4:	dc000015 	stw	r16,0(sp)
   421f8:	dfc00315 	stw	ra,12(sp)
   421fc:	0040d000 	call	40d00 <_malloc_r>
   42200:	0021883a 	mov	r16,zero
   42204:	880d883a 	mov	r6,r17
   42208:	000b883a 	mov	r5,zero
   4220c:	10000626 	beq	r2,zero,42228 <__sfmoreglue+0x4c>
   42210:	11000304 	addi	r4,r2,12
   42214:	14800115 	stw	r18,4(r2)
   42218:	10000015 	stw	zero,0(r2)
   4221c:	11000215 	stw	r4,8(r2)
   42220:	1021883a 	mov	r16,r2
   42224:	0042a880 	call	42a88 <memset>
   42228:	8005883a 	mov	r2,r16
   4222c:	dfc00317 	ldw	ra,12(sp)
   42230:	dc800217 	ldw	r18,8(sp)
   42234:	dc400117 	ldw	r17,4(sp)
   42238:	dc000017 	ldw	r16,0(sp)
   4223c:	dec00404 	addi	sp,sp,16
   42240:	f800283a 	ret

00042244 <__sfp>:
   42244:	defffd04 	addi	sp,sp,-12
   42248:	00900034 	movhi	r2,16384
   4224c:	10869b04 	addi	r2,r2,6764
   42250:	dc000015 	stw	r16,0(sp)
   42254:	14000017 	ldw	r16,0(r2)
   42258:	dc400115 	stw	r17,4(sp)
   4225c:	dfc00215 	stw	ra,8(sp)
   42260:	80800e17 	ldw	r2,56(r16)
   42264:	2023883a 	mov	r17,r4
   42268:	10002626 	beq	r2,zero,42304 <__sfp+0xc0>
   4226c:	8400b804 	addi	r16,r16,736
   42270:	80800117 	ldw	r2,4(r16)
   42274:	81000217 	ldw	r4,8(r16)
   42278:	10ffffc4 	addi	r3,r2,-1
   4227c:	18000916 	blt	r3,zero,422a4 <__sfp+0x60>
   42280:	2080030f 	ldh	r2,12(r4)
   42284:	10000b26 	beq	r2,zero,422b4 <__sfp+0x70>
   42288:	017fffc4 	movi	r5,-1
   4228c:	00000206 	br	42298 <__sfp+0x54>
   42290:	2080030f 	ldh	r2,12(r4)
   42294:	10000726 	beq	r2,zero,422b4 <__sfp+0x70>
   42298:	18ffffc4 	addi	r3,r3,-1
   4229c:	21001704 	addi	r4,r4,92
   422a0:	197ffb1e 	bne	r3,r5,42290 <__sfp+0x4c>
   422a4:	80800017 	ldw	r2,0(r16)
   422a8:	10001926 	beq	r2,zero,42310 <__sfp+0xcc>
   422ac:	1021883a 	mov	r16,r2
   422b0:	003fef06 	br	42270 <__sfp+0x2c>
   422b4:	00bfffc4 	movi	r2,-1
   422b8:	00c00044 	movi	r3,1
   422bc:	2080038d 	sth	r2,14(r4)
   422c0:	20c0030d 	sth	r3,12(r4)
   422c4:	20000015 	stw	zero,0(r4)
   422c8:	20000215 	stw	zero,8(r4)
   422cc:	20000115 	stw	zero,4(r4)
   422d0:	20000415 	stw	zero,16(r4)
   422d4:	20000515 	stw	zero,20(r4)
   422d8:	20000615 	stw	zero,24(r4)
   422dc:	20000c15 	stw	zero,48(r4)
   422e0:	20000d15 	stw	zero,52(r4)
   422e4:	20001115 	stw	zero,68(r4)
   422e8:	20001215 	stw	zero,72(r4)
   422ec:	2005883a 	mov	r2,r4
   422f0:	dfc00217 	ldw	ra,8(sp)
   422f4:	dc400117 	ldw	r17,4(sp)
   422f8:	dc000017 	ldw	r16,0(sp)
   422fc:	dec00304 	addi	sp,sp,12
   42300:	f800283a 	ret
   42304:	8009883a 	mov	r4,r16
   42308:	00420dc0 	call	420dc <__sinit>
   4230c:	003fd706 	br	4226c <__sfp+0x28>
   42310:	8809883a 	mov	r4,r17
   42314:	01400104 	movi	r5,4
   42318:	00421dc0 	call	421dc <__sfmoreglue>
   4231c:	80800015 	stw	r2,0(r16)
   42320:	103fe21e 	bne	r2,zero,422ac <__sfp+0x68>
   42324:	00800304 	movi	r2,12
   42328:	0009883a 	mov	r4,zero
   4232c:	88800015 	stw	r2,0(r17)
   42330:	003fee06 	br	422ec <__sfp+0xa8>

00042334 <_malloc_trim_r>:
   42334:	defffb04 	addi	sp,sp,-20
   42338:	dcc00315 	stw	r19,12(sp)
   4233c:	04d00034 	movhi	r19,16384
   42340:	9cc11604 	addi	r19,r19,1112
   42344:	dc800215 	stw	r18,8(sp)
   42348:	dc400115 	stw	r17,4(sp)
   4234c:	dc000015 	stw	r16,0(sp)
   42350:	2823883a 	mov	r17,r5
   42354:	2025883a 	mov	r18,r4
   42358:	dfc00415 	stw	ra,16(sp)
   4235c:	00436d00 	call	436d0 <__malloc_lock>
   42360:	98800217 	ldw	r2,8(r19)
   42364:	9009883a 	mov	r4,r18
   42368:	000b883a 	mov	r5,zero
   4236c:	10c00117 	ldw	r3,4(r2)
   42370:	00bfff04 	movi	r2,-4
   42374:	18a0703a 	and	r16,r3,r2
   42378:	8463c83a 	sub	r17,r16,r17
   4237c:	8c43fbc4 	addi	r17,r17,4079
   42380:	8822d33a 	srli	r17,r17,12
   42384:	0083ffc4 	movi	r2,4095
   42388:	8c7fffc4 	addi	r17,r17,-1
   4238c:	8822933a 	slli	r17,r17,12
   42390:	1440060e 	bge	r2,r17,423ac <_malloc_trim_r+0x78>
   42394:	0041c980 	call	41c98 <_sbrk_r>
   42398:	98c00217 	ldw	r3,8(r19)
   4239c:	9009883a 	mov	r4,r18
   423a0:	044bc83a 	sub	r5,zero,r17
   423a4:	80c7883a 	add	r3,r16,r3
   423a8:	10c00926 	beq	r2,r3,423d0 <_malloc_trim_r+0x9c>
   423ac:	00436f00 	call	436f0 <__malloc_unlock>
   423b0:	0005883a 	mov	r2,zero
   423b4:	dfc00417 	ldw	ra,16(sp)
   423b8:	dcc00317 	ldw	r19,12(sp)
   423bc:	dc800217 	ldw	r18,8(sp)
   423c0:	dc400117 	ldw	r17,4(sp)
   423c4:	dc000017 	ldw	r16,0(sp)
   423c8:	dec00504 	addi	sp,sp,20
   423cc:	f800283a 	ret
   423d0:	9009883a 	mov	r4,r18
   423d4:	0041c980 	call	41c98 <_sbrk_r>
   423d8:	844dc83a 	sub	r6,r16,r17
   423dc:	00ffffc4 	movi	r3,-1
   423e0:	9009883a 	mov	r4,r18
   423e4:	000b883a 	mov	r5,zero
   423e8:	01d00034 	movhi	r7,16384
   423ec:	39c6b204 	addi	r7,r7,6856
   423f0:	31800054 	ori	r6,r6,1
   423f4:	10c00926 	beq	r2,r3,4241c <_malloc_trim_r+0xe8>
   423f8:	38800017 	ldw	r2,0(r7)
   423fc:	98c00217 	ldw	r3,8(r19)
   42400:	9009883a 	mov	r4,r18
   42404:	1445c83a 	sub	r2,r2,r17
   42408:	38800015 	stw	r2,0(r7)
   4240c:	19800115 	stw	r6,4(r3)
   42410:	00436f00 	call	436f0 <__malloc_unlock>
   42414:	00800044 	movi	r2,1
   42418:	003fe606 	br	423b4 <_malloc_trim_r+0x80>
   4241c:	0041c980 	call	41c98 <_sbrk_r>
   42420:	99800217 	ldw	r6,8(r19)
   42424:	100f883a 	mov	r7,r2
   42428:	9009883a 	mov	r4,r18
   4242c:	1187c83a 	sub	r3,r2,r6
   42430:	008003c4 	movi	r2,15
   42434:	19400054 	ori	r5,r3,1
   42438:	10ffdc0e 	bge	r2,r3,423ac <_malloc_trim_r+0x78>
   4243c:	00900034 	movhi	r2,16384
   42440:	10869d04 	addi	r2,r2,6772
   42444:	10c00017 	ldw	r3,0(r2)
   42448:	00900034 	movhi	r2,16384
   4244c:	1086b204 	addi	r2,r2,6856
   42450:	31400115 	stw	r5,4(r6)
   42454:	38c7c83a 	sub	r3,r7,r3
   42458:	10c00015 	stw	r3,0(r2)
   4245c:	003fd306 	br	423ac <_malloc_trim_r+0x78>

00042460 <_free_r>:
   42460:	defffd04 	addi	sp,sp,-12
   42464:	dc400115 	stw	r17,4(sp)
   42468:	dc000015 	stw	r16,0(sp)
   4246c:	dfc00215 	stw	ra,8(sp)
   42470:	2821883a 	mov	r16,r5
   42474:	2023883a 	mov	r17,r4
   42478:	28005a26 	beq	r5,zero,425e4 <_free_r+0x184>
   4247c:	00436d00 	call	436d0 <__malloc_lock>
   42480:	823ffe04 	addi	r8,r16,-8
   42484:	41400117 	ldw	r5,4(r8)
   42488:	00bfff84 	movi	r2,-2
   4248c:	02900034 	movhi	r10,16384
   42490:	52811604 	addi	r10,r10,1112
   42494:	288e703a 	and	r7,r5,r2
   42498:	41cd883a 	add	r6,r8,r7
   4249c:	30c00117 	ldw	r3,4(r6)
   424a0:	51000217 	ldw	r4,8(r10)
   424a4:	00bfff04 	movi	r2,-4
   424a8:	1892703a 	and	r9,r3,r2
   424ac:	5017883a 	mov	r11,r10
   424b0:	31006726 	beq	r6,r4,42650 <_free_r+0x1f0>
   424b4:	2880004c 	andi	r2,r5,1
   424b8:	1005003a 	cmpeq	r2,r2,zero
   424bc:	32400115 	stw	r9,4(r6)
   424c0:	10001a1e 	bne	r2,zero,4252c <_free_r+0xcc>
   424c4:	000b883a 	mov	r5,zero
   424c8:	3247883a 	add	r3,r6,r9
   424cc:	18800117 	ldw	r2,4(r3)
   424d0:	1080004c 	andi	r2,r2,1
   424d4:	1000231e 	bne	r2,zero,42564 <_free_r+0x104>
   424d8:	280ac03a 	cmpne	r5,r5,zero
   424dc:	3a4f883a 	add	r7,r7,r9
   424e0:	2800451e 	bne	r5,zero,425f8 <_free_r+0x198>
   424e4:	31000217 	ldw	r4,8(r6)
   424e8:	00900034 	movhi	r2,16384
   424ec:	10811804 	addi	r2,r2,1120
   424f0:	20807b26 	beq	r4,r2,426e0 <_free_r+0x280>
   424f4:	30800317 	ldw	r2,12(r6)
   424f8:	3a07883a 	add	r3,r7,r8
   424fc:	19c00015 	stw	r7,0(r3)
   42500:	11000215 	stw	r4,8(r2)
   42504:	20800315 	stw	r2,12(r4)
   42508:	38800054 	ori	r2,r7,1
   4250c:	40800115 	stw	r2,4(r8)
   42510:	28001a26 	beq	r5,zero,4257c <_free_r+0x11c>
   42514:	8809883a 	mov	r4,r17
   42518:	dfc00217 	ldw	ra,8(sp)
   4251c:	dc400117 	ldw	r17,4(sp)
   42520:	dc000017 	ldw	r16,0(sp)
   42524:	dec00304 	addi	sp,sp,12
   42528:	00436f01 	jmpi	436f0 <__malloc_unlock>
   4252c:	80bffe17 	ldw	r2,-8(r16)
   42530:	50c00204 	addi	r3,r10,8
   42534:	4091c83a 	sub	r8,r8,r2
   42538:	41000217 	ldw	r4,8(r8)
   4253c:	388f883a 	add	r7,r7,r2
   42540:	20c06126 	beq	r4,r3,426c8 <_free_r+0x268>
   42544:	40800317 	ldw	r2,12(r8)
   42548:	3247883a 	add	r3,r6,r9
   4254c:	000b883a 	mov	r5,zero
   42550:	11000215 	stw	r4,8(r2)
   42554:	20800315 	stw	r2,12(r4)
   42558:	18800117 	ldw	r2,4(r3)
   4255c:	1080004c 	andi	r2,r2,1
   42560:	103fdd26 	beq	r2,zero,424d8 <_free_r+0x78>
   42564:	38800054 	ori	r2,r7,1
   42568:	3a07883a 	add	r3,r7,r8
   4256c:	280ac03a 	cmpne	r5,r5,zero
   42570:	40800115 	stw	r2,4(r8)
   42574:	19c00015 	stw	r7,0(r3)
   42578:	283fe61e 	bne	r5,zero,42514 <_free_r+0xb4>
   4257c:	00807fc4 	movi	r2,511
   42580:	11c01f2e 	bgeu	r2,r7,42600 <_free_r+0x1a0>
   42584:	3806d27a 	srli	r3,r7,9
   42588:	1800481e 	bne	r3,zero,426ac <_free_r+0x24c>
   4258c:	3804d0fa 	srli	r2,r7,3
   42590:	100690fa 	slli	r3,r2,3
   42594:	1acd883a 	add	r6,r3,r11
   42598:	31400217 	ldw	r5,8(r6)
   4259c:	31405926 	beq	r6,r5,42704 <_free_r+0x2a4>
   425a0:	28800117 	ldw	r2,4(r5)
   425a4:	00ffff04 	movi	r3,-4
   425a8:	10c4703a 	and	r2,r2,r3
   425ac:	3880022e 	bgeu	r7,r2,425b8 <_free_r+0x158>
   425b0:	29400217 	ldw	r5,8(r5)
   425b4:	317ffa1e 	bne	r6,r5,425a0 <_free_r+0x140>
   425b8:	29800317 	ldw	r6,12(r5)
   425bc:	41800315 	stw	r6,12(r8)
   425c0:	41400215 	stw	r5,8(r8)
   425c4:	8809883a 	mov	r4,r17
   425c8:	2a000315 	stw	r8,12(r5)
   425cc:	32000215 	stw	r8,8(r6)
   425d0:	dfc00217 	ldw	ra,8(sp)
   425d4:	dc400117 	ldw	r17,4(sp)
   425d8:	dc000017 	ldw	r16,0(sp)
   425dc:	dec00304 	addi	sp,sp,12
   425e0:	00436f01 	jmpi	436f0 <__malloc_unlock>
   425e4:	dfc00217 	ldw	ra,8(sp)
   425e8:	dc400117 	ldw	r17,4(sp)
   425ec:	dc000017 	ldw	r16,0(sp)
   425f0:	dec00304 	addi	sp,sp,12
   425f4:	f800283a 	ret
   425f8:	31000217 	ldw	r4,8(r6)
   425fc:	003fbd06 	br	424f4 <_free_r+0x94>
   42600:	3806d0fa 	srli	r3,r7,3
   42604:	00800044 	movi	r2,1
   42608:	51400117 	ldw	r5,4(r10)
   4260c:	180890fa 	slli	r4,r3,3
   42610:	1807d0ba 	srai	r3,r3,2
   42614:	22c9883a 	add	r4,r4,r11
   42618:	21800217 	ldw	r6,8(r4)
   4261c:	10c4983a 	sll	r2,r2,r3
   42620:	41000315 	stw	r4,12(r8)
   42624:	41800215 	stw	r6,8(r8)
   42628:	288ab03a 	or	r5,r5,r2
   4262c:	22000215 	stw	r8,8(r4)
   42630:	8809883a 	mov	r4,r17
   42634:	51400115 	stw	r5,4(r10)
   42638:	32000315 	stw	r8,12(r6)
   4263c:	dfc00217 	ldw	ra,8(sp)
   42640:	dc400117 	ldw	r17,4(sp)
   42644:	dc000017 	ldw	r16,0(sp)
   42648:	dec00304 	addi	sp,sp,12
   4264c:	00436f01 	jmpi	436f0 <__malloc_unlock>
   42650:	2880004c 	andi	r2,r5,1
   42654:	3a4d883a 	add	r6,r7,r9
   42658:	1000071e 	bne	r2,zero,42678 <_free_r+0x218>
   4265c:	80bffe17 	ldw	r2,-8(r16)
   42660:	4091c83a 	sub	r8,r8,r2
   42664:	41000317 	ldw	r4,12(r8)
   42668:	40c00217 	ldw	r3,8(r8)
   4266c:	308d883a 	add	r6,r6,r2
   42670:	20c00215 	stw	r3,8(r4)
   42674:	19000315 	stw	r4,12(r3)
   42678:	00900034 	movhi	r2,16384
   4267c:	10869c04 	addi	r2,r2,6768
   42680:	11000017 	ldw	r4,0(r2)
   42684:	30c00054 	ori	r3,r6,1
   42688:	52000215 	stw	r8,8(r10)
   4268c:	40c00115 	stw	r3,4(r8)
   42690:	313fa036 	bltu	r6,r4,42514 <_free_r+0xb4>
   42694:	00900034 	movhi	r2,16384
   42698:	1086a804 	addi	r2,r2,6816
   4269c:	11400017 	ldw	r5,0(r2)
   426a0:	8809883a 	mov	r4,r17
   426a4:	00423340 	call	42334 <_malloc_trim_r>
   426a8:	003f9a06 	br	42514 <_free_r+0xb4>
   426ac:	00800104 	movi	r2,4
   426b0:	10c0072e 	bgeu	r2,r3,426d0 <_free_r+0x270>
   426b4:	00800504 	movi	r2,20
   426b8:	10c01936 	bltu	r2,r3,42720 <_free_r+0x2c0>
   426bc:	188016c4 	addi	r2,r3,91
   426c0:	100690fa 	slli	r3,r2,3
   426c4:	003fb306 	br	42594 <_free_r+0x134>
   426c8:	01400044 	movi	r5,1
   426cc:	003f7e06 	br	424c8 <_free_r+0x68>
   426d0:	3804d1ba 	srli	r2,r7,6
   426d4:	10800e04 	addi	r2,r2,56
   426d8:	100690fa 	slli	r3,r2,3
   426dc:	003fad06 	br	42594 <_free_r+0x134>
   426e0:	22000315 	stw	r8,12(r4)
   426e4:	22000215 	stw	r8,8(r4)
   426e8:	3a05883a 	add	r2,r7,r8
   426ec:	38c00054 	ori	r3,r7,1
   426f0:	11c00015 	stw	r7,0(r2)
   426f4:	41000215 	stw	r4,8(r8)
   426f8:	40c00115 	stw	r3,4(r8)
   426fc:	41000315 	stw	r4,12(r8)
   42700:	003f8406 	br	42514 <_free_r+0xb4>
   42704:	1005d0ba 	srai	r2,r2,2
   42708:	00c00044 	movi	r3,1
   4270c:	51000117 	ldw	r4,4(r10)
   42710:	1886983a 	sll	r3,r3,r2
   42714:	20c8b03a 	or	r4,r4,r3
   42718:	51000115 	stw	r4,4(r10)
   4271c:	003fa706 	br	425bc <_free_r+0x15c>
   42720:	00801504 	movi	r2,84
   42724:	10c00436 	bltu	r2,r3,42738 <_free_r+0x2d8>
   42728:	3804d33a 	srli	r2,r7,12
   4272c:	10801b84 	addi	r2,r2,110
   42730:	100690fa 	slli	r3,r2,3
   42734:	003f9706 	br	42594 <_free_r+0x134>
   42738:	00805504 	movi	r2,340
   4273c:	10c00436 	bltu	r2,r3,42750 <_free_r+0x2f0>
   42740:	3804d3fa 	srli	r2,r7,15
   42744:	10801dc4 	addi	r2,r2,119
   42748:	100690fa 	slli	r3,r2,3
   4274c:	003f9106 	br	42594 <_free_r+0x134>
   42750:	00815504 	movi	r2,1364
   42754:	10c0032e 	bgeu	r2,r3,42764 <_free_r+0x304>
   42758:	00801f84 	movi	r2,126
   4275c:	00c0fc04 	movi	r3,1008
   42760:	003f8c06 	br	42594 <_free_r+0x134>
   42764:	3804d4ba 	srli	r2,r7,18
   42768:	10801f04 	addi	r2,r2,124
   4276c:	100690fa 	slli	r3,r2,3
   42770:	003f8806 	br	42594 <_free_r+0x134>

00042774 <_fwalk_reent>:
   42774:	defff704 	addi	sp,sp,-36
   42778:	dcc00315 	stw	r19,12(sp)
   4277c:	24c0b804 	addi	r19,r4,736
   42780:	dd800615 	stw	r22,24(sp)
   42784:	dd400515 	stw	r21,20(sp)
   42788:	dfc00815 	stw	ra,32(sp)
   4278c:	ddc00715 	stw	r23,28(sp)
   42790:	dd000415 	stw	r20,16(sp)
   42794:	dc800215 	stw	r18,8(sp)
   42798:	dc400115 	stw	r17,4(sp)
   4279c:	dc000015 	stw	r16,0(sp)
   427a0:	202b883a 	mov	r21,r4
   427a4:	282d883a 	mov	r22,r5
   427a8:	00420cc0 	call	420cc <__sfp_lock_acquire>
   427ac:	98002126 	beq	r19,zero,42834 <_fwalk_reent+0xc0>
   427b0:	002f883a 	mov	r23,zero
   427b4:	9c800117 	ldw	r18,4(r19)
   427b8:	9c000217 	ldw	r16,8(r19)
   427bc:	90bfffc4 	addi	r2,r18,-1
   427c0:	10000d16 	blt	r2,zero,427f8 <_fwalk_reent+0x84>
   427c4:	0023883a 	mov	r17,zero
   427c8:	053fffc4 	movi	r20,-1
   427cc:	8080030f 	ldh	r2,12(r16)
   427d0:	8c400044 	addi	r17,r17,1
   427d4:	10000626 	beq	r2,zero,427f0 <_fwalk_reent+0x7c>
   427d8:	8080038f 	ldh	r2,14(r16)
   427dc:	800b883a 	mov	r5,r16
   427e0:	a809883a 	mov	r4,r21
   427e4:	15000226 	beq	r2,r20,427f0 <_fwalk_reent+0x7c>
   427e8:	b03ee83a 	callr	r22
   427ec:	b8aeb03a 	or	r23,r23,r2
   427f0:	84001704 	addi	r16,r16,92
   427f4:	947ff51e 	bne	r18,r17,427cc <_fwalk_reent+0x58>
   427f8:	9cc00017 	ldw	r19,0(r19)
   427fc:	983fed1e 	bne	r19,zero,427b4 <_fwalk_reent+0x40>
   42800:	00420d00 	call	420d0 <__sfp_lock_release>
   42804:	b805883a 	mov	r2,r23
   42808:	dfc00817 	ldw	ra,32(sp)
   4280c:	ddc00717 	ldw	r23,28(sp)
   42810:	dd800617 	ldw	r22,24(sp)
   42814:	dd400517 	ldw	r21,20(sp)
   42818:	dd000417 	ldw	r20,16(sp)
   4281c:	dcc00317 	ldw	r19,12(sp)
   42820:	dc800217 	ldw	r18,8(sp)
   42824:	dc400117 	ldw	r17,4(sp)
   42828:	dc000017 	ldw	r16,0(sp)
   4282c:	dec00904 	addi	sp,sp,36
   42830:	f800283a 	ret
   42834:	002f883a 	mov	r23,zero
   42838:	003ff106 	br	42800 <_fwalk_reent+0x8c>

0004283c <_fwalk>:
   4283c:	defff804 	addi	sp,sp,-32
   42840:	dcc00315 	stw	r19,12(sp)
   42844:	24c0b804 	addi	r19,r4,736
   42848:	dd400515 	stw	r21,20(sp)
   4284c:	dfc00715 	stw	ra,28(sp)
   42850:	dd800615 	stw	r22,24(sp)
   42854:	dd000415 	stw	r20,16(sp)
   42858:	dc800215 	stw	r18,8(sp)
   4285c:	dc400115 	stw	r17,4(sp)
   42860:	dc000015 	stw	r16,0(sp)
   42864:	282b883a 	mov	r21,r5
   42868:	00420cc0 	call	420cc <__sfp_lock_acquire>
   4286c:	98001f26 	beq	r19,zero,428ec <_fwalk+0xb0>
   42870:	002d883a 	mov	r22,zero
   42874:	9c800117 	ldw	r18,4(r19)
   42878:	9c000217 	ldw	r16,8(r19)
   4287c:	90bfffc4 	addi	r2,r18,-1
   42880:	10000c16 	blt	r2,zero,428b4 <_fwalk+0x78>
   42884:	0023883a 	mov	r17,zero
   42888:	053fffc4 	movi	r20,-1
   4288c:	8080030f 	ldh	r2,12(r16)
   42890:	8c400044 	addi	r17,r17,1
   42894:	10000526 	beq	r2,zero,428ac <_fwalk+0x70>
   42898:	8080038f 	ldh	r2,14(r16)
   4289c:	8009883a 	mov	r4,r16
   428a0:	15000226 	beq	r2,r20,428ac <_fwalk+0x70>
   428a4:	a83ee83a 	callr	r21
   428a8:	b0acb03a 	or	r22,r22,r2
   428ac:	84001704 	addi	r16,r16,92
   428b0:	947ff61e 	bne	r18,r17,4288c <_fwalk+0x50>
   428b4:	9cc00017 	ldw	r19,0(r19)
   428b8:	983fee1e 	bne	r19,zero,42874 <_fwalk+0x38>
   428bc:	00420d00 	call	420d0 <__sfp_lock_release>
   428c0:	b005883a 	mov	r2,r22
   428c4:	dfc00717 	ldw	ra,28(sp)
   428c8:	dd800617 	ldw	r22,24(sp)
   428cc:	dd400517 	ldw	r21,20(sp)
   428d0:	dd000417 	ldw	r20,16(sp)
   428d4:	dcc00317 	ldw	r19,12(sp)
   428d8:	dc800217 	ldw	r18,8(sp)
   428dc:	dc400117 	ldw	r17,4(sp)
   428e0:	dc000017 	ldw	r16,0(sp)
   428e4:	dec00804 	addi	sp,sp,32
   428e8:	f800283a 	ret
   428ec:	002d883a 	mov	r22,zero
   428f0:	003ff206 	br	428bc <_fwalk+0x80>

000428f4 <__smakebuf_r>:
   428f4:	2880030b 	ldhu	r2,12(r5)
   428f8:	deffed04 	addi	sp,sp,-76
   428fc:	dc401015 	stw	r17,64(sp)
   42900:	1080008c 	andi	r2,r2,2
   42904:	dc000f15 	stw	r16,60(sp)
   42908:	dfc01215 	stw	ra,72(sp)
   4290c:	dc801115 	stw	r18,68(sp)
   42910:	2821883a 	mov	r16,r5
   42914:	2023883a 	mov	r17,r4
   42918:	10000b26 	beq	r2,zero,42948 <__smakebuf_r+0x54>
   4291c:	28c010c4 	addi	r3,r5,67
   42920:	00800044 	movi	r2,1
   42924:	28800515 	stw	r2,20(r5)
   42928:	28c00415 	stw	r3,16(r5)
   4292c:	28c00015 	stw	r3,0(r5)
   42930:	dfc01217 	ldw	ra,72(sp)
   42934:	dc801117 	ldw	r18,68(sp)
   42938:	dc401017 	ldw	r17,64(sp)
   4293c:	dc000f17 	ldw	r16,60(sp)
   42940:	dec01304 	addi	sp,sp,76
   42944:	f800283a 	ret
   42948:	2940038f 	ldh	r5,14(r5)
   4294c:	28002116 	blt	r5,zero,429d4 <__smakebuf_r+0xe0>
   42950:	d80d883a 	mov	r6,sp
   42954:	0042e780 	call	42e78 <_fstat_r>
   42958:	10001e16 	blt	r2,zero,429d4 <__smakebuf_r+0xe0>
   4295c:	d8800117 	ldw	r2,4(sp)
   42960:	00e00014 	movui	r3,32768
   42964:	113c000c 	andi	r4,r2,61440
   42968:	20c03126 	beq	r4,r3,42a30 <__smakebuf_r+0x13c>
   4296c:	8080030b 	ldhu	r2,12(r16)
   42970:	00c80004 	movi	r3,8192
   42974:	10820014 	ori	r2,r2,2048
   42978:	8080030d 	sth	r2,12(r16)
   4297c:	20c01e26 	beq	r4,r3,429f8 <__smakebuf_r+0x104>
   42980:	04810004 	movi	r18,1024
   42984:	8809883a 	mov	r4,r17
   42988:	900b883a 	mov	r5,r18
   4298c:	0040d000 	call	40d00 <_malloc_r>
   42990:	1009883a 	mov	r4,r2
   42994:	10003126 	beq	r2,zero,42a5c <__smakebuf_r+0x168>
   42998:	80c0030b 	ldhu	r3,12(r16)
   4299c:	00800134 	movhi	r2,4
   429a0:	10887004 	addi	r2,r2,8640
   429a4:	88800f15 	stw	r2,60(r17)
   429a8:	18c02014 	ori	r3,r3,128
   429ac:	84800515 	stw	r18,20(r16)
   429b0:	80c0030d 	sth	r3,12(r16)
   429b4:	81000415 	stw	r4,16(r16)
   429b8:	81000015 	stw	r4,0(r16)
   429bc:	dfc01217 	ldw	ra,72(sp)
   429c0:	dc801117 	ldw	r18,68(sp)
   429c4:	dc401017 	ldw	r17,64(sp)
   429c8:	dc000f17 	ldw	r16,60(sp)
   429cc:	dec01304 	addi	sp,sp,76
   429d0:	f800283a 	ret
   429d4:	80c0030b 	ldhu	r3,12(r16)
   429d8:	1880200c 	andi	r2,r3,128
   429dc:	10000426 	beq	r2,zero,429f0 <__smakebuf_r+0xfc>
   429e0:	04801004 	movi	r18,64
   429e4:	18820014 	ori	r2,r3,2048
   429e8:	8080030d 	sth	r2,12(r16)
   429ec:	003fe506 	br	42984 <__smakebuf_r+0x90>
   429f0:	04810004 	movi	r18,1024
   429f4:	003ffb06 	br	429e4 <__smakebuf_r+0xf0>
   429f8:	8140038f 	ldh	r5,14(r16)
   429fc:	8809883a 	mov	r4,r17
   42a00:	0042eec0 	call	42eec <_isatty_r>
   42a04:	103fde26 	beq	r2,zero,42980 <__smakebuf_r+0x8c>
   42a08:	8080030b 	ldhu	r2,12(r16)
   42a0c:	80c010c4 	addi	r3,r16,67
   42a10:	04810004 	movi	r18,1024
   42a14:	10800054 	ori	r2,r2,1
   42a18:	8080030d 	sth	r2,12(r16)
   42a1c:	00800044 	movi	r2,1
   42a20:	80c00415 	stw	r3,16(r16)
   42a24:	80800515 	stw	r2,20(r16)
   42a28:	80c00015 	stw	r3,0(r16)
   42a2c:	003fd506 	br	42984 <__smakebuf_r+0x90>
   42a30:	80c00a17 	ldw	r3,40(r16)
   42a34:	00800134 	movhi	r2,4
   42a38:	108aca04 	addi	r2,r2,11048
   42a3c:	18bfcb1e 	bne	r3,r2,4296c <__smakebuf_r+0x78>
   42a40:	8080030b 	ldhu	r2,12(r16)
   42a44:	00c10004 	movi	r3,1024
   42a48:	1825883a 	mov	r18,r3
   42a4c:	10c4b03a 	or	r2,r2,r3
   42a50:	8080030d 	sth	r2,12(r16)
   42a54:	80c01315 	stw	r3,76(r16)
   42a58:	003fca06 	br	42984 <__smakebuf_r+0x90>
   42a5c:	8100030b 	ldhu	r4,12(r16)
   42a60:	2080800c 	andi	r2,r4,512
   42a64:	103fb21e 	bne	r2,zero,42930 <__smakebuf_r+0x3c>
   42a68:	80c010c4 	addi	r3,r16,67
   42a6c:	21000094 	ori	r4,r4,2
   42a70:	00800044 	movi	r2,1
   42a74:	80800515 	stw	r2,20(r16)
   42a78:	8100030d 	sth	r4,12(r16)
   42a7c:	80c00415 	stw	r3,16(r16)
   42a80:	80c00015 	stw	r3,0(r16)
   42a84:	003faa06 	br	42930 <__smakebuf_r+0x3c>

00042a88 <memset>:
   42a88:	008000c4 	movi	r2,3
   42a8c:	29403fcc 	andi	r5,r5,255
   42a90:	2007883a 	mov	r3,r4
   42a94:	1180022e 	bgeu	r2,r6,42aa0 <memset+0x18>
   42a98:	2084703a 	and	r2,r4,r2
   42a9c:	10000826 	beq	r2,zero,42ac0 <memset+0x38>
   42aa0:	30000526 	beq	r6,zero,42ab8 <memset+0x30>
   42aa4:	2805883a 	mov	r2,r5
   42aa8:	30cd883a 	add	r6,r6,r3
   42aac:	18800005 	stb	r2,0(r3)
   42ab0:	18c00044 	addi	r3,r3,1
   42ab4:	19bffd1e 	bne	r3,r6,42aac <memset+0x24>
   42ab8:	2005883a 	mov	r2,r4
   42abc:	f800283a 	ret
   42ac0:	2804923a 	slli	r2,r5,8
   42ac4:	020003c4 	movi	r8,15
   42ac8:	200f883a 	mov	r7,r4
   42acc:	2884b03a 	or	r2,r5,r2
   42ad0:	1006943a 	slli	r3,r2,16
   42ad4:	10c6b03a 	or	r3,r2,r3
   42ad8:	41800a2e 	bgeu	r8,r6,42b04 <memset+0x7c>
   42adc:	4005883a 	mov	r2,r8
   42ae0:	31bffc04 	addi	r6,r6,-16
   42ae4:	38c00015 	stw	r3,0(r7)
   42ae8:	38c00115 	stw	r3,4(r7)
   42aec:	38c00215 	stw	r3,8(r7)
   42af0:	38c00315 	stw	r3,12(r7)
   42af4:	39c00404 	addi	r7,r7,16
   42af8:	11bff936 	bltu	r2,r6,42ae0 <memset+0x58>
   42afc:	008000c4 	movi	r2,3
   42b00:	1180052e 	bgeu	r2,r6,42b18 <memset+0x90>
   42b04:	31bfff04 	addi	r6,r6,-4
   42b08:	008000c4 	movi	r2,3
   42b0c:	38c00015 	stw	r3,0(r7)
   42b10:	39c00104 	addi	r7,r7,4
   42b14:	11bffb36 	bltu	r2,r6,42b04 <memset+0x7c>
   42b18:	3807883a 	mov	r3,r7
   42b1c:	003fe006 	br	42aa0 <memset+0x18>

00042b20 <__sclose>:
   42b20:	2940038f 	ldh	r5,14(r5)
   42b24:	0042ce41 	jmpi	42ce4 <_close_r>

00042b28 <__sseek>:
   42b28:	defffe04 	addi	sp,sp,-8
   42b2c:	dc000015 	stw	r16,0(sp)
   42b30:	2821883a 	mov	r16,r5
   42b34:	2940038f 	ldh	r5,14(r5)
   42b38:	dfc00115 	stw	ra,4(sp)
   42b3c:	0042f5c0 	call	42f5c <_lseek_r>
   42b40:	1007883a 	mov	r3,r2
   42b44:	00bfffc4 	movi	r2,-1
   42b48:	18800926 	beq	r3,r2,42b70 <__sseek+0x48>
   42b4c:	8080030b 	ldhu	r2,12(r16)
   42b50:	80c01415 	stw	r3,80(r16)
   42b54:	10840014 	ori	r2,r2,4096
   42b58:	8080030d 	sth	r2,12(r16)
   42b5c:	1805883a 	mov	r2,r3
   42b60:	dfc00117 	ldw	ra,4(sp)
   42b64:	dc000017 	ldw	r16,0(sp)
   42b68:	dec00204 	addi	sp,sp,8
   42b6c:	f800283a 	ret
   42b70:	8080030b 	ldhu	r2,12(r16)
   42b74:	10bbffcc 	andi	r2,r2,61439
   42b78:	8080030d 	sth	r2,12(r16)
   42b7c:	1805883a 	mov	r2,r3
   42b80:	dfc00117 	ldw	ra,4(sp)
   42b84:	dc000017 	ldw	r16,0(sp)
   42b88:	dec00204 	addi	sp,sp,8
   42b8c:	f800283a 	ret

00042b90 <__swrite>:
   42b90:	2880030b 	ldhu	r2,12(r5)
   42b94:	defffb04 	addi	sp,sp,-20
   42b98:	dcc00315 	stw	r19,12(sp)
   42b9c:	1080400c 	andi	r2,r2,256
   42ba0:	dc800215 	stw	r18,8(sp)
   42ba4:	dc400115 	stw	r17,4(sp)
   42ba8:	dc000015 	stw	r16,0(sp)
   42bac:	3027883a 	mov	r19,r6
   42bb0:	3825883a 	mov	r18,r7
   42bb4:	dfc00415 	stw	ra,16(sp)
   42bb8:	2821883a 	mov	r16,r5
   42bbc:	000d883a 	mov	r6,zero
   42bc0:	01c00084 	movi	r7,2
   42bc4:	2023883a 	mov	r17,r4
   42bc8:	10000226 	beq	r2,zero,42bd4 <__swrite+0x44>
   42bcc:	2940038f 	ldh	r5,14(r5)
   42bd0:	0042f5c0 	call	42f5c <_lseek_r>
   42bd4:	8080030b 	ldhu	r2,12(r16)
   42bd8:	8140038f 	ldh	r5,14(r16)
   42bdc:	8809883a 	mov	r4,r17
   42be0:	10bbffcc 	andi	r2,r2,61439
   42be4:	980d883a 	mov	r6,r19
   42be8:	900f883a 	mov	r7,r18
   42bec:	8080030d 	sth	r2,12(r16)
   42bf0:	dfc00417 	ldw	ra,16(sp)
   42bf4:	dcc00317 	ldw	r19,12(sp)
   42bf8:	dc800217 	ldw	r18,8(sp)
   42bfc:	dc400117 	ldw	r17,4(sp)
   42c00:	dc000017 	ldw	r16,0(sp)
   42c04:	dec00504 	addi	sp,sp,20
   42c08:	0042c6c1 	jmpi	42c6c <_write_r>

00042c0c <__sread>:
   42c0c:	defffe04 	addi	sp,sp,-8
   42c10:	dc000015 	stw	r16,0(sp)
   42c14:	2821883a 	mov	r16,r5
   42c18:	2940038f 	ldh	r5,14(r5)
   42c1c:	dfc00115 	stw	ra,4(sp)
   42c20:	0042fd40 	call	42fd4 <_read_r>
   42c24:	1007883a 	mov	r3,r2
   42c28:	10000816 	blt	r2,zero,42c4c <__sread+0x40>
   42c2c:	80801417 	ldw	r2,80(r16)
   42c30:	10c5883a 	add	r2,r2,r3
   42c34:	80801415 	stw	r2,80(r16)
   42c38:	1805883a 	mov	r2,r3
   42c3c:	dfc00117 	ldw	ra,4(sp)
   42c40:	dc000017 	ldw	r16,0(sp)
   42c44:	dec00204 	addi	sp,sp,8
   42c48:	f800283a 	ret
   42c4c:	8080030b 	ldhu	r2,12(r16)
   42c50:	10bbffcc 	andi	r2,r2,61439
   42c54:	8080030d 	sth	r2,12(r16)
   42c58:	1805883a 	mov	r2,r3
   42c5c:	dfc00117 	ldw	ra,4(sp)
   42c60:	dc000017 	ldw	r16,0(sp)
   42c64:	dec00204 	addi	sp,sp,8
   42c68:	f800283a 	ret

00042c6c <_write_r>:
   42c6c:	defffd04 	addi	sp,sp,-12
   42c70:	dc000015 	stw	r16,0(sp)
   42c74:	04100034 	movhi	r16,16384
   42c78:	8406ab04 	addi	r16,r16,6828
   42c7c:	dc400115 	stw	r17,4(sp)
   42c80:	80000015 	stw	zero,0(r16)
   42c84:	2023883a 	mov	r17,r4
   42c88:	2809883a 	mov	r4,r5
   42c8c:	300b883a 	mov	r5,r6
   42c90:	380d883a 	mov	r6,r7
   42c94:	dfc00215 	stw	ra,8(sp)
   42c98:	00439dc0 	call	439dc <write>
   42c9c:	1007883a 	mov	r3,r2
   42ca0:	00bfffc4 	movi	r2,-1
   42ca4:	18800626 	beq	r3,r2,42cc0 <_write_r+0x54>
   42ca8:	1805883a 	mov	r2,r3
   42cac:	dfc00217 	ldw	ra,8(sp)
   42cb0:	dc400117 	ldw	r17,4(sp)
   42cb4:	dc000017 	ldw	r16,0(sp)
   42cb8:	dec00304 	addi	sp,sp,12
   42cbc:	f800283a 	ret
   42cc0:	80800017 	ldw	r2,0(r16)
   42cc4:	103ff826 	beq	r2,zero,42ca8 <_write_r+0x3c>
   42cc8:	88800015 	stw	r2,0(r17)
   42ccc:	1805883a 	mov	r2,r3
   42cd0:	dfc00217 	ldw	ra,8(sp)
   42cd4:	dc400117 	ldw	r17,4(sp)
   42cd8:	dc000017 	ldw	r16,0(sp)
   42cdc:	dec00304 	addi	sp,sp,12
   42ce0:	f800283a 	ret

00042ce4 <_close_r>:
   42ce4:	defffd04 	addi	sp,sp,-12
   42ce8:	dc000015 	stw	r16,0(sp)
   42cec:	04100034 	movhi	r16,16384
   42cf0:	8406ab04 	addi	r16,r16,6828
   42cf4:	dc400115 	stw	r17,4(sp)
   42cf8:	80000015 	stw	zero,0(r16)
   42cfc:	2023883a 	mov	r17,r4
   42d00:	2809883a 	mov	r4,r5
   42d04:	dfc00215 	stw	ra,8(sp)
   42d08:	004304c0 	call	4304c <close>
   42d0c:	1007883a 	mov	r3,r2
   42d10:	00bfffc4 	movi	r2,-1
   42d14:	18800626 	beq	r3,r2,42d30 <_close_r+0x4c>
   42d18:	1805883a 	mov	r2,r3
   42d1c:	dfc00217 	ldw	ra,8(sp)
   42d20:	dc400117 	ldw	r17,4(sp)
   42d24:	dc000017 	ldw	r16,0(sp)
   42d28:	dec00304 	addi	sp,sp,12
   42d2c:	f800283a 	ret
   42d30:	80800017 	ldw	r2,0(r16)
   42d34:	103ff826 	beq	r2,zero,42d18 <_close_r+0x34>
   42d38:	88800015 	stw	r2,0(r17)
   42d3c:	1805883a 	mov	r2,r3
   42d40:	dfc00217 	ldw	ra,8(sp)
   42d44:	dc400117 	ldw	r17,4(sp)
   42d48:	dc000017 	ldw	r16,0(sp)
   42d4c:	dec00304 	addi	sp,sp,12
   42d50:	f800283a 	ret

00042d54 <_fclose_r>:
   42d54:	defffc04 	addi	sp,sp,-16
   42d58:	dc400115 	stw	r17,4(sp)
   42d5c:	dc000015 	stw	r16,0(sp)
   42d60:	dfc00315 	stw	ra,12(sp)
   42d64:	dc800215 	stw	r18,8(sp)
   42d68:	2821883a 	mov	r16,r5
   42d6c:	2023883a 	mov	r17,r4
   42d70:	28002926 	beq	r5,zero,42e18 <_fclose_r+0xc4>
   42d74:	00420cc0 	call	420cc <__sfp_lock_acquire>
   42d78:	88000226 	beq	r17,zero,42d84 <_fclose_r+0x30>
   42d7c:	88800e17 	ldw	r2,56(r17)
   42d80:	10002d26 	beq	r2,zero,42e38 <_fclose_r+0xe4>
   42d84:	8080030f 	ldh	r2,12(r16)
   42d88:	10002226 	beq	r2,zero,42e14 <_fclose_r+0xc0>
   42d8c:	8809883a 	mov	r4,r17
   42d90:	800b883a 	mov	r5,r16
   42d94:	0041e440 	call	41e44 <_fflush_r>
   42d98:	1025883a 	mov	r18,r2
   42d9c:	80800b17 	ldw	r2,44(r16)
   42da0:	10000426 	beq	r2,zero,42db4 <_fclose_r+0x60>
   42da4:	81400717 	ldw	r5,28(r16)
   42da8:	8809883a 	mov	r4,r17
   42dac:	103ee83a 	callr	r2
   42db0:	10002a16 	blt	r2,zero,42e5c <_fclose_r+0x108>
   42db4:	8080030b 	ldhu	r2,12(r16)
   42db8:	1080200c 	andi	r2,r2,128
   42dbc:	1000231e 	bne	r2,zero,42e4c <_fclose_r+0xf8>
   42dc0:	81400c17 	ldw	r5,48(r16)
   42dc4:	28000526 	beq	r5,zero,42ddc <_fclose_r+0x88>
   42dc8:	80801004 	addi	r2,r16,64
   42dcc:	28800226 	beq	r5,r2,42dd8 <_fclose_r+0x84>
   42dd0:	8809883a 	mov	r4,r17
   42dd4:	00424600 	call	42460 <_free_r>
   42dd8:	80000c15 	stw	zero,48(r16)
   42ddc:	81401117 	ldw	r5,68(r16)
   42de0:	28000326 	beq	r5,zero,42df0 <_fclose_r+0x9c>
   42de4:	8809883a 	mov	r4,r17
   42de8:	00424600 	call	42460 <_free_r>
   42dec:	80001115 	stw	zero,68(r16)
   42df0:	8000030d 	sth	zero,12(r16)
   42df4:	00420d00 	call	420d0 <__sfp_lock_release>
   42df8:	9005883a 	mov	r2,r18
   42dfc:	dfc00317 	ldw	ra,12(sp)
   42e00:	dc800217 	ldw	r18,8(sp)
   42e04:	dc400117 	ldw	r17,4(sp)
   42e08:	dc000017 	ldw	r16,0(sp)
   42e0c:	dec00404 	addi	sp,sp,16
   42e10:	f800283a 	ret
   42e14:	00420d00 	call	420d0 <__sfp_lock_release>
   42e18:	0025883a 	mov	r18,zero
   42e1c:	9005883a 	mov	r2,r18
   42e20:	dfc00317 	ldw	ra,12(sp)
   42e24:	dc800217 	ldw	r18,8(sp)
   42e28:	dc400117 	ldw	r17,4(sp)
   42e2c:	dc000017 	ldw	r16,0(sp)
   42e30:	dec00404 	addi	sp,sp,16
   42e34:	f800283a 	ret
   42e38:	8809883a 	mov	r4,r17
   42e3c:	00420dc0 	call	420dc <__sinit>
   42e40:	8080030f 	ldh	r2,12(r16)
   42e44:	103fd11e 	bne	r2,zero,42d8c <_fclose_r+0x38>
   42e48:	003ff206 	br	42e14 <_fclose_r+0xc0>
   42e4c:	81400417 	ldw	r5,16(r16)
   42e50:	8809883a 	mov	r4,r17
   42e54:	00424600 	call	42460 <_free_r>
   42e58:	003fd906 	br	42dc0 <_fclose_r+0x6c>
   42e5c:	04bfffc4 	movi	r18,-1
   42e60:	003fd406 	br	42db4 <_fclose_r+0x60>

00042e64 <fclose>:
   42e64:	00900034 	movhi	r2,16384
   42e68:	10869a04 	addi	r2,r2,6760
   42e6c:	200b883a 	mov	r5,r4
   42e70:	11000017 	ldw	r4,0(r2)
   42e74:	0042d541 	jmpi	42d54 <_fclose_r>

00042e78 <_fstat_r>:
   42e78:	defffd04 	addi	sp,sp,-12
   42e7c:	dc000015 	stw	r16,0(sp)
   42e80:	04100034 	movhi	r16,16384
   42e84:	8406ab04 	addi	r16,r16,6828
   42e88:	dc400115 	stw	r17,4(sp)
   42e8c:	80000015 	stw	zero,0(r16)
   42e90:	2023883a 	mov	r17,r4
   42e94:	2809883a 	mov	r4,r5
   42e98:	300b883a 	mov	r5,r6
   42e9c:	dfc00215 	stw	ra,8(sp)
   42ea0:	00431d40 	call	431d4 <fstat>
   42ea4:	1007883a 	mov	r3,r2
   42ea8:	00bfffc4 	movi	r2,-1
   42eac:	18800626 	beq	r3,r2,42ec8 <_fstat_r+0x50>
   42eb0:	1805883a 	mov	r2,r3
   42eb4:	dfc00217 	ldw	ra,8(sp)
   42eb8:	dc400117 	ldw	r17,4(sp)
   42ebc:	dc000017 	ldw	r16,0(sp)
   42ec0:	dec00304 	addi	sp,sp,12
   42ec4:	f800283a 	ret
   42ec8:	80800017 	ldw	r2,0(r16)
   42ecc:	103ff826 	beq	r2,zero,42eb0 <_fstat_r+0x38>
   42ed0:	88800015 	stw	r2,0(r17)
   42ed4:	1805883a 	mov	r2,r3
   42ed8:	dfc00217 	ldw	ra,8(sp)
   42edc:	dc400117 	ldw	r17,4(sp)
   42ee0:	dc000017 	ldw	r16,0(sp)
   42ee4:	dec00304 	addi	sp,sp,12
   42ee8:	f800283a 	ret

00042eec <_isatty_r>:
   42eec:	defffd04 	addi	sp,sp,-12
   42ef0:	dc000015 	stw	r16,0(sp)
   42ef4:	04100034 	movhi	r16,16384
   42ef8:	8406ab04 	addi	r16,r16,6828
   42efc:	dc400115 	stw	r17,4(sp)
   42f00:	80000015 	stw	zero,0(r16)
   42f04:	2023883a 	mov	r17,r4
   42f08:	2809883a 	mov	r4,r5
   42f0c:	dfc00215 	stw	ra,8(sp)
   42f10:	00433080 	call	43308 <isatty>
   42f14:	1007883a 	mov	r3,r2
   42f18:	00bfffc4 	movi	r2,-1
   42f1c:	18800626 	beq	r3,r2,42f38 <_isatty_r+0x4c>
   42f20:	1805883a 	mov	r2,r3
   42f24:	dfc00217 	ldw	ra,8(sp)
   42f28:	dc400117 	ldw	r17,4(sp)
   42f2c:	dc000017 	ldw	r16,0(sp)
   42f30:	dec00304 	addi	sp,sp,12
   42f34:	f800283a 	ret
   42f38:	80800017 	ldw	r2,0(r16)
   42f3c:	103ff826 	beq	r2,zero,42f20 <_isatty_r+0x34>
   42f40:	88800015 	stw	r2,0(r17)
   42f44:	1805883a 	mov	r2,r3
   42f48:	dfc00217 	ldw	ra,8(sp)
   42f4c:	dc400117 	ldw	r17,4(sp)
   42f50:	dc000017 	ldw	r16,0(sp)
   42f54:	dec00304 	addi	sp,sp,12
   42f58:	f800283a 	ret

00042f5c <_lseek_r>:
   42f5c:	defffd04 	addi	sp,sp,-12
   42f60:	dc000015 	stw	r16,0(sp)
   42f64:	04100034 	movhi	r16,16384
   42f68:	8406ab04 	addi	r16,r16,6828
   42f6c:	dc400115 	stw	r17,4(sp)
   42f70:	80000015 	stw	zero,0(r16)
   42f74:	2023883a 	mov	r17,r4
   42f78:	2809883a 	mov	r4,r5
   42f7c:	300b883a 	mov	r5,r6
   42f80:	380d883a 	mov	r6,r7
   42f84:	dfc00215 	stw	ra,8(sp)
   42f88:	00435140 	call	43514 <lseek>
   42f8c:	1007883a 	mov	r3,r2
   42f90:	00bfffc4 	movi	r2,-1
   42f94:	18800626 	beq	r3,r2,42fb0 <_lseek_r+0x54>
   42f98:	1805883a 	mov	r2,r3
   42f9c:	dfc00217 	ldw	ra,8(sp)
   42fa0:	dc400117 	ldw	r17,4(sp)
   42fa4:	dc000017 	ldw	r16,0(sp)
   42fa8:	dec00304 	addi	sp,sp,12
   42fac:	f800283a 	ret
   42fb0:	80800017 	ldw	r2,0(r16)
   42fb4:	103ff826 	beq	r2,zero,42f98 <_lseek_r+0x3c>
   42fb8:	88800015 	stw	r2,0(r17)
   42fbc:	1805883a 	mov	r2,r3
   42fc0:	dfc00217 	ldw	ra,8(sp)
   42fc4:	dc400117 	ldw	r17,4(sp)
   42fc8:	dc000017 	ldw	r16,0(sp)
   42fcc:	dec00304 	addi	sp,sp,12
   42fd0:	f800283a 	ret

00042fd4 <_read_r>:
   42fd4:	defffd04 	addi	sp,sp,-12
   42fd8:	dc000015 	stw	r16,0(sp)
   42fdc:	04100034 	movhi	r16,16384
   42fe0:	8406ab04 	addi	r16,r16,6828
   42fe4:	dc400115 	stw	r17,4(sp)
   42fe8:	80000015 	stw	zero,0(r16)
   42fec:	2023883a 	mov	r17,r4
   42ff0:	2809883a 	mov	r4,r5
   42ff4:	300b883a 	mov	r5,r6
   42ff8:	380d883a 	mov	r6,r7
   42ffc:	dfc00215 	stw	ra,8(sp)
   43000:	00437100 	call	43710 <read>
   43004:	1007883a 	mov	r3,r2
   43008:	00bfffc4 	movi	r2,-1
   4300c:	18800626 	beq	r3,r2,43028 <_read_r+0x54>
   43010:	1805883a 	mov	r2,r3
   43014:	dfc00217 	ldw	ra,8(sp)
   43018:	dc400117 	ldw	r17,4(sp)
   4301c:	dc000017 	ldw	r16,0(sp)
   43020:	dec00304 	addi	sp,sp,12
   43024:	f800283a 	ret
   43028:	80800017 	ldw	r2,0(r16)
   4302c:	103ff826 	beq	r2,zero,43010 <_read_r+0x3c>
   43030:	88800015 	stw	r2,0(r17)
   43034:	1805883a 	mov	r2,r3
   43038:	dfc00217 	ldw	ra,8(sp)
   4303c:	dc400117 	ldw	r17,4(sp)
   43040:	dc000017 	ldw	r16,0(sp)
   43044:	dec00304 	addi	sp,sp,12
   43048:	f800283a 	ret

0004304c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   4304c:	defff804 	addi	sp,sp,-32
   43050:	dfc00715 	stw	ra,28(sp)
   43054:	df000615 	stw	fp,24(sp)
   43058:	df000604 	addi	fp,sp,24
   4305c:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   43060:	e0bffc17 	ldw	r2,-16(fp)
   43064:	1004803a 	cmplt	r2,r2,zero
   43068:	1000081e 	bne	r2,zero,4308c <close+0x40>
   4306c:	e0bffc17 	ldw	r2,-16(fp)
   43070:	10800324 	muli	r2,r2,12
   43074:	1007883a 	mov	r3,r2
   43078:	00900034 	movhi	r2,16384
   4307c:	10822204 	addi	r2,r2,2184
   43080:	1887883a 	add	r3,r3,r2
   43084:	e0ffff15 	stw	r3,-4(fp)
   43088:	00000106 	br	43090 <close+0x44>
   4308c:	e03fff15 	stw	zero,-4(fp)
   43090:	e0bfff17 	ldw	r2,-4(fp)
   43094:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
   43098:	e0bffb17 	ldw	r2,-20(fp)
   4309c:	1005003a 	cmpeq	r2,r2,zero
   430a0:	10001d1e 	bne	r2,zero,43118 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   430a4:	e0bffb17 	ldw	r2,-20(fp)
   430a8:	10800017 	ldw	r2,0(r2)
   430ac:	10800417 	ldw	r2,16(r2)
   430b0:	1005003a 	cmpeq	r2,r2,zero
   430b4:	1000071e 	bne	r2,zero,430d4 <close+0x88>
   430b8:	e0bffb17 	ldw	r2,-20(fp)
   430bc:	10800017 	ldw	r2,0(r2)
   430c0:	10800417 	ldw	r2,16(r2)
   430c4:	e13ffb17 	ldw	r4,-20(fp)
   430c8:	103ee83a 	callr	r2
   430cc:	e0bffe15 	stw	r2,-8(fp)
   430d0:	00000106 	br	430d8 <close+0x8c>
   430d4:	e03ffe15 	stw	zero,-8(fp)
   430d8:	e0bffe17 	ldw	r2,-8(fp)
   430dc:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   430e0:	e13ffc17 	ldw	r4,-16(fp)
   430e4:	00438900 	call	43890 <alt_release_fd>
    if (rval < 0)
   430e8:	e0bffa17 	ldw	r2,-24(fp)
   430ec:	1004403a 	cmpge	r2,r2,zero
   430f0:	1000071e 	bne	r2,zero,43110 <close+0xc4>
    {
      ALT_ERRNO = -rval;
   430f4:	00431480 	call	43148 <alt_get_errno>
   430f8:	e0fffa17 	ldw	r3,-24(fp)
   430fc:	00c7c83a 	sub	r3,zero,r3
   43100:	10c00015 	stw	r3,0(r2)
      return -1;
   43104:	00bfffc4 	movi	r2,-1
   43108:	e0bffd15 	stw	r2,-12(fp)
   4310c:	00000806 	br	43130 <close+0xe4>
    }
    return 0;
   43110:	e03ffd15 	stw	zero,-12(fp)
   43114:	00000606 	br	43130 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   43118:	00431480 	call	43148 <alt_get_errno>
   4311c:	1007883a 	mov	r3,r2
   43120:	00801444 	movi	r2,81
   43124:	18800015 	stw	r2,0(r3)
    return -1;
   43128:	00bfffc4 	movi	r2,-1
   4312c:	e0bffd15 	stw	r2,-12(fp)
   43130:	e0bffd17 	ldw	r2,-12(fp)
  }
}
   43134:	e037883a 	mov	sp,fp
   43138:	dfc00117 	ldw	ra,4(sp)
   4313c:	df000017 	ldw	fp,0(sp)
   43140:	dec00204 	addi	sp,sp,8
   43144:	f800283a 	ret

00043148 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   43148:	defffd04 	addi	sp,sp,-12
   4314c:	dfc00215 	stw	ra,8(sp)
   43150:	df000115 	stw	fp,4(sp)
   43154:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   43158:	00900034 	movhi	r2,16384
   4315c:	1086a304 	addi	r2,r2,6796
   43160:	10800017 	ldw	r2,0(r2)
   43164:	1005003a 	cmpeq	r2,r2,zero
   43168:	1000061e 	bne	r2,zero,43184 <alt_get_errno+0x3c>
   4316c:	00900034 	movhi	r2,16384
   43170:	1086a304 	addi	r2,r2,6796
   43174:	10800017 	ldw	r2,0(r2)
   43178:	103ee83a 	callr	r2
   4317c:	e0bfff15 	stw	r2,-4(fp)
   43180:	00000306 	br	43190 <alt_get_errno+0x48>
   43184:	00900034 	movhi	r2,16384
   43188:	1086ab04 	addi	r2,r2,6828
   4318c:	e0bfff15 	stw	r2,-4(fp)
   43190:	e0bfff17 	ldw	r2,-4(fp)
}
   43194:	e037883a 	mov	sp,fp
   43198:	dfc00117 	ldw	ra,4(sp)
   4319c:	df000017 	ldw	fp,0(sp)
   431a0:	dec00204 	addi	sp,sp,8
   431a4:	f800283a 	ret

000431a8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   431a8:	defffc04 	addi	sp,sp,-16
   431ac:	df000315 	stw	fp,12(sp)
   431b0:	df000304 	addi	fp,sp,12
   431b4:	e13ffd15 	stw	r4,-12(fp)
   431b8:	e17ffe15 	stw	r5,-8(fp)
   431bc:	e1bfff15 	stw	r6,-4(fp)
  return len;
   431c0:	e0bfff17 	ldw	r2,-4(fp)
}
   431c4:	e037883a 	mov	sp,fp
   431c8:	df000017 	ldw	fp,0(sp)
   431cc:	dec00104 	addi	sp,sp,4
   431d0:	f800283a 	ret

000431d4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   431d4:	defff904 	addi	sp,sp,-28
   431d8:	dfc00615 	stw	ra,24(sp)
   431dc:	df000515 	stw	fp,20(sp)
   431e0:	df000504 	addi	fp,sp,20
   431e4:	e13ffc15 	stw	r4,-16(fp)
   431e8:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   431ec:	e0bffc17 	ldw	r2,-16(fp)
   431f0:	1004803a 	cmplt	r2,r2,zero
   431f4:	1000081e 	bne	r2,zero,43218 <fstat+0x44>
   431f8:	e0bffc17 	ldw	r2,-16(fp)
   431fc:	10800324 	muli	r2,r2,12
   43200:	1007883a 	mov	r3,r2
   43204:	00900034 	movhi	r2,16384
   43208:	10822204 	addi	r2,r2,2184
   4320c:	1887883a 	add	r3,r3,r2
   43210:	e0ffff15 	stw	r3,-4(fp)
   43214:	00000106 	br	4321c <fstat+0x48>
   43218:	e03fff15 	stw	zero,-4(fp)
   4321c:	e0bfff17 	ldw	r2,-4(fp)
   43220:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   43224:	e0bffb17 	ldw	r2,-20(fp)
   43228:	1005003a 	cmpeq	r2,r2,zero
   4322c:	1000121e 	bne	r2,zero,43278 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   43230:	e0bffb17 	ldw	r2,-20(fp)
   43234:	10800017 	ldw	r2,0(r2)
   43238:	10800817 	ldw	r2,32(r2)
   4323c:	1005003a 	cmpeq	r2,r2,zero
   43240:	1000081e 	bne	r2,zero,43264 <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
   43244:	e0bffb17 	ldw	r2,-20(fp)
   43248:	10800017 	ldw	r2,0(r2)
   4324c:	10800817 	ldw	r2,32(r2)
   43250:	e13ffb17 	ldw	r4,-20(fp)
   43254:	e17ffd17 	ldw	r5,-12(fp)
   43258:	103ee83a 	callr	r2
   4325c:	e0bffe15 	stw	r2,-8(fp)
   43260:	00000b06 	br	43290 <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   43264:	e0fffd17 	ldw	r3,-12(fp)
   43268:	00880004 	movi	r2,8192
   4326c:	18800115 	stw	r2,4(r3)
      return 0;
   43270:	e03ffe15 	stw	zero,-8(fp)
   43274:	00000606 	br	43290 <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   43278:	00432a80 	call	432a8 <alt_get_errno>
   4327c:	1007883a 	mov	r3,r2
   43280:	00801444 	movi	r2,81
   43284:	18800015 	stw	r2,0(r3)
    return -1;
   43288:	00bfffc4 	movi	r2,-1
   4328c:	e0bffe15 	stw	r2,-8(fp)
   43290:	e0bffe17 	ldw	r2,-8(fp)
  }
}
   43294:	e037883a 	mov	sp,fp
   43298:	dfc00117 	ldw	ra,4(sp)
   4329c:	df000017 	ldw	fp,0(sp)
   432a0:	dec00204 	addi	sp,sp,8
   432a4:	f800283a 	ret

000432a8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   432a8:	defffd04 	addi	sp,sp,-12
   432ac:	dfc00215 	stw	ra,8(sp)
   432b0:	df000115 	stw	fp,4(sp)
   432b4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   432b8:	00900034 	movhi	r2,16384
   432bc:	1086a304 	addi	r2,r2,6796
   432c0:	10800017 	ldw	r2,0(r2)
   432c4:	1005003a 	cmpeq	r2,r2,zero
   432c8:	1000061e 	bne	r2,zero,432e4 <alt_get_errno+0x3c>
   432cc:	00900034 	movhi	r2,16384
   432d0:	1086a304 	addi	r2,r2,6796
   432d4:	10800017 	ldw	r2,0(r2)
   432d8:	103ee83a 	callr	r2
   432dc:	e0bfff15 	stw	r2,-4(fp)
   432e0:	00000306 	br	432f0 <alt_get_errno+0x48>
   432e4:	00900034 	movhi	r2,16384
   432e8:	1086ab04 	addi	r2,r2,6828
   432ec:	e0bfff15 	stw	r2,-4(fp)
   432f0:	e0bfff17 	ldw	r2,-4(fp)
}
   432f4:	e037883a 	mov	sp,fp
   432f8:	dfc00117 	ldw	ra,4(sp)
   432fc:	df000017 	ldw	fp,0(sp)
   43300:	dec00204 	addi	sp,sp,8
   43304:	f800283a 	ret

00043308 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   43308:	deffeb04 	addi	sp,sp,-84
   4330c:	dfc01415 	stw	ra,80(sp)
   43310:	df001315 	stw	fp,76(sp)
   43314:	df001304 	addi	fp,sp,76
   43318:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4331c:	e0bffd17 	ldw	r2,-12(fp)
   43320:	1004803a 	cmplt	r2,r2,zero
   43324:	1000081e 	bne	r2,zero,43348 <isatty+0x40>
   43328:	e0bffd17 	ldw	r2,-12(fp)
   4332c:	10800324 	muli	r2,r2,12
   43330:	1007883a 	mov	r3,r2
   43334:	00900034 	movhi	r2,16384
   43338:	10822204 	addi	r2,r2,2184
   4333c:	1887883a 	add	r3,r3,r2
   43340:	e0ffff15 	stw	r3,-4(fp)
   43344:	00000106 	br	4334c <isatty+0x44>
   43348:	e03fff15 	stw	zero,-4(fp)
   4334c:	e0bfff17 	ldw	r2,-4(fp)
   43350:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
   43354:	e0bfed17 	ldw	r2,-76(fp)
   43358:	1005003a 	cmpeq	r2,r2,zero
   4335c:	10000f1e 	bne	r2,zero,4339c <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   43360:	e0bfed17 	ldw	r2,-76(fp)
   43364:	10800017 	ldw	r2,0(r2)
   43368:	10800817 	ldw	r2,32(r2)
   4336c:	1004c03a 	cmpne	r2,r2,zero
   43370:	1000031e 	bne	r2,zero,43380 <isatty+0x78>
    {
      return 1;
   43374:	00800044 	movi	r2,1
   43378:	e0bffe15 	stw	r2,-8(fp)
   4337c:	00000c06 	br	433b0 <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   43380:	e17fee04 	addi	r5,fp,-72
   43384:	e13ffd17 	ldw	r4,-12(fp)
   43388:	00431d40 	call	431d4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   4338c:	e0bfef17 	ldw	r2,-68(fp)
   43390:	10880020 	cmpeqi	r2,r2,8192
   43394:	e0bffe15 	stw	r2,-8(fp)
   43398:	00000506 	br	433b0 <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   4339c:	00433c80 	call	433c8 <alt_get_errno>
   433a0:	1007883a 	mov	r3,r2
   433a4:	00801444 	movi	r2,81
   433a8:	18800015 	stw	r2,0(r3)
    return 0;
   433ac:	e03ffe15 	stw	zero,-8(fp)
   433b0:	e0bffe17 	ldw	r2,-8(fp)
  }
}
   433b4:	e037883a 	mov	sp,fp
   433b8:	dfc00117 	ldw	ra,4(sp)
   433bc:	df000017 	ldw	fp,0(sp)
   433c0:	dec00204 	addi	sp,sp,8
   433c4:	f800283a 	ret

000433c8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   433c8:	defffd04 	addi	sp,sp,-12
   433cc:	dfc00215 	stw	ra,8(sp)
   433d0:	df000115 	stw	fp,4(sp)
   433d4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   433d8:	00900034 	movhi	r2,16384
   433dc:	1086a304 	addi	r2,r2,6796
   433e0:	10800017 	ldw	r2,0(r2)
   433e4:	1005003a 	cmpeq	r2,r2,zero
   433e8:	1000061e 	bne	r2,zero,43404 <alt_get_errno+0x3c>
   433ec:	00900034 	movhi	r2,16384
   433f0:	1086a304 	addi	r2,r2,6796
   433f4:	10800017 	ldw	r2,0(r2)
   433f8:	103ee83a 	callr	r2
   433fc:	e0bfff15 	stw	r2,-4(fp)
   43400:	00000306 	br	43410 <alt_get_errno+0x48>
   43404:	00900034 	movhi	r2,16384
   43408:	1086ab04 	addi	r2,r2,6828
   4340c:	e0bfff15 	stw	r2,-4(fp)
   43410:	e0bfff17 	ldw	r2,-4(fp)
}
   43414:	e037883a 	mov	sp,fp
   43418:	dfc00117 	ldw	ra,4(sp)
   4341c:	df000017 	ldw	fp,0(sp)
   43420:	dec00204 	addi	sp,sp,8
   43424:	f800283a 	ret

00043428 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   43428:	defffe04 	addi	sp,sp,-8
   4342c:	dfc00115 	stw	ra,4(sp)
   43430:	df000015 	stw	fp,0(sp)
   43434:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   43438:	01000134 	movhi	r4,4
   4343c:	21180d04 	addi	r4,r4,24628
   43440:	01500034 	movhi	r5,16384
   43444:	29401604 	addi	r5,r5,88
   43448:	01900034 	movhi	r6,16384
   4344c:	3186a804 	addi	r6,r6,6816
   43450:	00434a80 	call	434a8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   43454:	01000134 	movhi	r4,4
   43458:	21000804 	addi	r4,r4,32
   4345c:	01400134 	movhi	r5,4
   43460:	29400804 	addi	r5,r5,32
   43464:	01800134 	movhi	r6,4
   43468:	31806d04 	addi	r6,r6,436
   4346c:	00434a80 	call	434a8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   43470:	01000134 	movhi	r4,4
   43474:	2117f704 	addi	r4,r4,24540
   43478:	01500034 	movhi	r5,16384
   4347c:	29400004 	addi	r5,r5,0
   43480:	01900034 	movhi	r6,16384
   43484:	31801604 	addi	r6,r6,88
   43488:	00434a80 	call	434a8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   4348c:	0044ca80 	call	44ca8 <alt_dcache_flush_all>
  alt_icache_flush_all();
   43490:	0044ec80 	call	44ec8 <alt_icache_flush_all>
}
   43494:	e037883a 	mov	sp,fp
   43498:	dfc00117 	ldw	ra,4(sp)
   4349c:	df000017 	ldw	fp,0(sp)
   434a0:	dec00204 	addi	sp,sp,8
   434a4:	f800283a 	ret

000434a8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   434a8:	defffc04 	addi	sp,sp,-16
   434ac:	df000315 	stw	fp,12(sp)
   434b0:	df000304 	addi	fp,sp,12
   434b4:	e13ffd15 	stw	r4,-12(fp)
   434b8:	e17ffe15 	stw	r5,-8(fp)
   434bc:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   434c0:	e0fffe17 	ldw	r3,-8(fp)
   434c4:	e0bffd17 	ldw	r2,-12(fp)
   434c8:	18800e26 	beq	r3,r2,43504 <alt_load_section+0x5c>
  {
    while( to != end )
   434cc:	00000a06 	br	434f8 <alt_load_section+0x50>
    {
      *to++ = *from++;
   434d0:	e0bffd17 	ldw	r2,-12(fp)
   434d4:	10c00017 	ldw	r3,0(r2)
   434d8:	e0bffe17 	ldw	r2,-8(fp)
   434dc:	10c00015 	stw	r3,0(r2)
   434e0:	e0bffe17 	ldw	r2,-8(fp)
   434e4:	10800104 	addi	r2,r2,4
   434e8:	e0bffe15 	stw	r2,-8(fp)
   434ec:	e0bffd17 	ldw	r2,-12(fp)
   434f0:	10800104 	addi	r2,r2,4
   434f4:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   434f8:	e0fffe17 	ldw	r3,-8(fp)
   434fc:	e0bfff17 	ldw	r2,-4(fp)
   43500:	18bff31e 	bne	r3,r2,434d0 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   43504:	e037883a 	mov	sp,fp
   43508:	df000017 	ldw	fp,0(sp)
   4350c:	dec00104 	addi	sp,sp,4
   43510:	f800283a 	ret

00043514 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   43514:	defff804 	addi	sp,sp,-32
   43518:	dfc00715 	stw	ra,28(sp)
   4351c:	df000615 	stw	fp,24(sp)
   43520:	df000604 	addi	fp,sp,24
   43524:	e13ffc15 	stw	r4,-16(fp)
   43528:	e17ffd15 	stw	r5,-12(fp)
   4352c:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   43530:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   43534:	e0bffc17 	ldw	r2,-16(fp)
   43538:	1004803a 	cmplt	r2,r2,zero
   4353c:	1000081e 	bne	r2,zero,43560 <lseek+0x4c>
   43540:	e0bffc17 	ldw	r2,-16(fp)
   43544:	10800324 	muli	r2,r2,12
   43548:	1007883a 	mov	r3,r2
   4354c:	00900034 	movhi	r2,16384
   43550:	10822204 	addi	r2,r2,2184
   43554:	1887883a 	add	r3,r3,r2
   43558:	e0ffff15 	stw	r3,-4(fp)
   4355c:	00000106 	br	43564 <lseek+0x50>
   43560:	e03fff15 	stw	zero,-4(fp)
   43564:	e0bfff17 	ldw	r2,-4(fp)
   43568:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
   4356c:	e0bffb17 	ldw	r2,-20(fp)
   43570:	1005003a 	cmpeq	r2,r2,zero
   43574:	1000111e 	bne	r2,zero,435bc <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   43578:	e0bffb17 	ldw	r2,-20(fp)
   4357c:	10800017 	ldw	r2,0(r2)
   43580:	10800717 	ldw	r2,28(r2)
   43584:	1005003a 	cmpeq	r2,r2,zero
   43588:	1000091e 	bne	r2,zero,435b0 <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   4358c:	e0bffb17 	ldw	r2,-20(fp)
   43590:	10800017 	ldw	r2,0(r2)
   43594:	10800717 	ldw	r2,28(r2)
   43598:	e13ffb17 	ldw	r4,-20(fp)
   4359c:	e17ffd17 	ldw	r5,-12(fp)
   435a0:	e1bffe17 	ldw	r6,-8(fp)
   435a4:	103ee83a 	callr	r2
   435a8:	e0bffa15 	stw	r2,-24(fp)
   435ac:	00000506 	br	435c4 <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   435b0:	00bfde84 	movi	r2,-134
   435b4:	e0bffa15 	stw	r2,-24(fp)
   435b8:	00000206 	br	435c4 <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
   435bc:	00bfebc4 	movi	r2,-81
   435c0:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
   435c4:	e0bffa17 	ldw	r2,-24(fp)
   435c8:	1004403a 	cmpge	r2,r2,zero
   435cc:	1000071e 	bne	r2,zero,435ec <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
   435d0:	00436040 	call	43604 <alt_get_errno>
   435d4:	1007883a 	mov	r3,r2
   435d8:	e0bffa17 	ldw	r2,-24(fp)
   435dc:	0085c83a 	sub	r2,zero,r2
   435e0:	18800015 	stw	r2,0(r3)
    rc = -1;
   435e4:	00bfffc4 	movi	r2,-1
   435e8:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
   435ec:	e0bffa17 	ldw	r2,-24(fp)
}
   435f0:	e037883a 	mov	sp,fp
   435f4:	dfc00117 	ldw	ra,4(sp)
   435f8:	df000017 	ldw	fp,0(sp)
   435fc:	dec00204 	addi	sp,sp,8
   43600:	f800283a 	ret

00043604 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   43604:	defffd04 	addi	sp,sp,-12
   43608:	dfc00215 	stw	ra,8(sp)
   4360c:	df000115 	stw	fp,4(sp)
   43610:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   43614:	00900034 	movhi	r2,16384
   43618:	1086a304 	addi	r2,r2,6796
   4361c:	10800017 	ldw	r2,0(r2)
   43620:	1005003a 	cmpeq	r2,r2,zero
   43624:	1000061e 	bne	r2,zero,43640 <alt_get_errno+0x3c>
   43628:	00900034 	movhi	r2,16384
   4362c:	1086a304 	addi	r2,r2,6796
   43630:	10800017 	ldw	r2,0(r2)
   43634:	103ee83a 	callr	r2
   43638:	e0bfff15 	stw	r2,-4(fp)
   4363c:	00000306 	br	4364c <alt_get_errno+0x48>
   43640:	00900034 	movhi	r2,16384
   43644:	1086ab04 	addi	r2,r2,6828
   43648:	e0bfff15 	stw	r2,-4(fp)
   4364c:	e0bfff17 	ldw	r2,-4(fp)
}
   43650:	e037883a 	mov	sp,fp
   43654:	dfc00117 	ldw	ra,4(sp)
   43658:	df000017 	ldw	fp,0(sp)
   4365c:	dec00204 	addi	sp,sp,8
   43660:	f800283a 	ret

00043664 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   43664:	defffd04 	addi	sp,sp,-12
   43668:	dfc00215 	stw	ra,8(sp)
   4366c:	df000115 	stw	fp,4(sp)
   43670:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   43674:	0009883a 	mov	r4,zero
   43678:	0043b5c0 	call	43b5c <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   4367c:	0043b900 	call	43b90 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   43680:	01100034 	movhi	r4,16384
   43684:	21000e04 	addi	r4,r4,56
   43688:	01500034 	movhi	r5,16384
   4368c:	29400e04 	addi	r5,r5,56
   43690:	01900034 	movhi	r6,16384
   43694:	31800e04 	addi	r6,r6,56
   43698:	00452880 	call	45288 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   4369c:	0044e000 	call	44e00 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   436a0:	01000134 	movhi	r4,4
   436a4:	21139904 	addi	r4,r4,20068
   436a8:	0045a840 	call	45a84 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   436ac:	d1201217 	ldw	r4,-32696(gp)
   436b0:	d1601317 	ldw	r5,-32692(gp)
   436b4:	d1a01417 	ldw	r6,-32688(gp)
   436b8:	004066c0 	call	4066c <main>
   436bc:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   436c0:	01000044 	movi	r4,1
   436c4:	004304c0 	call	4304c <close>
  exit (result);
   436c8:	e13fff17 	ldw	r4,-4(fp)
   436cc:	0045a980 	call	45a98 <exit>

000436d0 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   436d0:	defffe04 	addi	sp,sp,-8
   436d4:	df000115 	stw	fp,4(sp)
   436d8:	df000104 	addi	fp,sp,4
   436dc:	e13fff15 	stw	r4,-4(fp)
}
   436e0:	e037883a 	mov	sp,fp
   436e4:	df000017 	ldw	fp,0(sp)
   436e8:	dec00104 	addi	sp,sp,4
   436ec:	f800283a 	ret

000436f0 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   436f0:	defffe04 	addi	sp,sp,-8
   436f4:	df000115 	stw	fp,4(sp)
   436f8:	df000104 	addi	fp,sp,4
   436fc:	e13fff15 	stw	r4,-4(fp)
}
   43700:	e037883a 	mov	sp,fp
   43704:	df000017 	ldw	fp,0(sp)
   43708:	dec00104 	addi	sp,sp,4
   4370c:	f800283a 	ret

00043710 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   43710:	defff704 	addi	sp,sp,-36
   43714:	dfc00815 	stw	ra,32(sp)
   43718:	df000715 	stw	fp,28(sp)
   4371c:	df000704 	addi	fp,sp,28
   43720:	e13ffb15 	stw	r4,-20(fp)
   43724:	e17ffc15 	stw	r5,-16(fp)
   43728:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4372c:	e0bffb17 	ldw	r2,-20(fp)
   43730:	1004803a 	cmplt	r2,r2,zero
   43734:	1000081e 	bne	r2,zero,43758 <read+0x48>
   43738:	e0bffb17 	ldw	r2,-20(fp)
   4373c:	10800324 	muli	r2,r2,12
   43740:	1007883a 	mov	r3,r2
   43744:	00900034 	movhi	r2,16384
   43748:	10822204 	addi	r2,r2,2184
   4374c:	1887883a 	add	r3,r3,r2
   43750:	e0ffff15 	stw	r3,-4(fp)
   43754:	00000106 	br	4375c <read+0x4c>
   43758:	e03fff15 	stw	zero,-4(fp)
   4375c:	e0bfff17 	ldw	r2,-4(fp)
   43760:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   43764:	e0bffa17 	ldw	r2,-24(fp)
   43768:	1005003a 	cmpeq	r2,r2,zero
   4376c:	1000241e 	bne	r2,zero,43800 <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   43770:	e0bffa17 	ldw	r2,-24(fp)
   43774:	10800217 	ldw	r2,8(r2)
   43778:	108000cc 	andi	r2,r2,3
   4377c:	10800060 	cmpeqi	r2,r2,1
   43780:	10001a1e 	bne	r2,zero,437ec <read+0xdc>
   43784:	e0bffa17 	ldw	r2,-24(fp)
   43788:	10800017 	ldw	r2,0(r2)
   4378c:	10800517 	ldw	r2,20(r2)
   43790:	1005003a 	cmpeq	r2,r2,zero
   43794:	1000151e 	bne	r2,zero,437ec <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   43798:	e0bffa17 	ldw	r2,-24(fp)
   4379c:	10800017 	ldw	r2,0(r2)
   437a0:	10800517 	ldw	r2,20(r2)
   437a4:	e17ffc17 	ldw	r5,-16(fp)
   437a8:	e1bffd17 	ldw	r6,-12(fp)
   437ac:	e13ffa17 	ldw	r4,-24(fp)
   437b0:	103ee83a 	callr	r2
   437b4:	e0bff915 	stw	r2,-28(fp)
   437b8:	e0bff917 	ldw	r2,-28(fp)
   437bc:	1004403a 	cmpge	r2,r2,zero
   437c0:	1000071e 	bne	r2,zero,437e0 <read+0xd0>
        {
          ALT_ERRNO = -rval;
   437c4:	00438300 	call	43830 <alt_get_errno>
   437c8:	e0fff917 	ldw	r3,-28(fp)
   437cc:	00c7c83a 	sub	r3,zero,r3
   437d0:	10c00015 	stw	r3,0(r2)
          return -1;
   437d4:	00bfffc4 	movi	r2,-1
   437d8:	e0bffe15 	stw	r2,-8(fp)
   437dc:	00000e06 	br	43818 <read+0x108>
        }
        return rval;
   437e0:	e0bff917 	ldw	r2,-28(fp)
   437e4:	e0bffe15 	stw	r2,-8(fp)
   437e8:	00000b06 	br	43818 <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
   437ec:	00438300 	call	43830 <alt_get_errno>
   437f0:	1007883a 	mov	r3,r2
   437f4:	00800344 	movi	r2,13
   437f8:	18800015 	stw	r2,0(r3)
   437fc:	00000406 	br	43810 <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   43800:	00438300 	call	43830 <alt_get_errno>
   43804:	1007883a 	mov	r3,r2
   43808:	00801444 	movi	r2,81
   4380c:	18800015 	stw	r2,0(r3)
  }
  return -1;
   43810:	00bfffc4 	movi	r2,-1
   43814:	e0bffe15 	stw	r2,-8(fp)
   43818:	e0bffe17 	ldw	r2,-8(fp)
}
   4381c:	e037883a 	mov	sp,fp
   43820:	dfc00117 	ldw	ra,4(sp)
   43824:	df000017 	ldw	fp,0(sp)
   43828:	dec00204 	addi	sp,sp,8
   4382c:	f800283a 	ret

00043830 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   43830:	defffd04 	addi	sp,sp,-12
   43834:	dfc00215 	stw	ra,8(sp)
   43838:	df000115 	stw	fp,4(sp)
   4383c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   43840:	00900034 	movhi	r2,16384
   43844:	1086a304 	addi	r2,r2,6796
   43848:	10800017 	ldw	r2,0(r2)
   4384c:	1005003a 	cmpeq	r2,r2,zero
   43850:	1000061e 	bne	r2,zero,4386c <alt_get_errno+0x3c>
   43854:	00900034 	movhi	r2,16384
   43858:	1086a304 	addi	r2,r2,6796
   4385c:	10800017 	ldw	r2,0(r2)
   43860:	103ee83a 	callr	r2
   43864:	e0bfff15 	stw	r2,-4(fp)
   43868:	00000306 	br	43878 <alt_get_errno+0x48>
   4386c:	00900034 	movhi	r2,16384
   43870:	1086ab04 	addi	r2,r2,6828
   43874:	e0bfff15 	stw	r2,-4(fp)
   43878:	e0bfff17 	ldw	r2,-4(fp)
}
   4387c:	e037883a 	mov	sp,fp
   43880:	dfc00117 	ldw	ra,4(sp)
   43884:	df000017 	ldw	fp,0(sp)
   43888:	dec00204 	addi	sp,sp,8
   4388c:	f800283a 	ret

00043890 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   43890:	defffe04 	addi	sp,sp,-8
   43894:	df000115 	stw	fp,4(sp)
   43898:	df000104 	addi	fp,sp,4
   4389c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   438a0:	e0bfff17 	ldw	r2,-4(fp)
   438a4:	108000d0 	cmplti	r2,r2,3
   438a8:	10000d1e 	bne	r2,zero,438e0 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   438ac:	e0bfff17 	ldw	r2,-4(fp)
   438b0:	00d00034 	movhi	r3,16384
   438b4:	18c22204 	addi	r3,r3,2184
   438b8:	10800324 	muli	r2,r2,12
   438bc:	10c5883a 	add	r2,r2,r3
   438c0:	10800204 	addi	r2,r2,8
   438c4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   438c8:	e0bfff17 	ldw	r2,-4(fp)
   438cc:	00d00034 	movhi	r3,16384
   438d0:	18c22204 	addi	r3,r3,2184
   438d4:	10800324 	muli	r2,r2,12
   438d8:	10c5883a 	add	r2,r2,r3
   438dc:	10000015 	stw	zero,0(r2)
  }
}
   438e0:	e037883a 	mov	sp,fp
   438e4:	df000017 	ldw	fp,0(sp)
   438e8:	dec00104 	addi	sp,sp,4
   438ec:	f800283a 	ret

000438f0 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   438f0:	defff804 	addi	sp,sp,-32
   438f4:	df000715 	stw	fp,28(sp)
   438f8:	df000704 	addi	fp,sp,28
   438fc:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   43900:	0005303a 	rdctl	r2,status
   43904:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   43908:	e0fffb17 	ldw	r3,-20(fp)
   4390c:	00bfff84 	movi	r2,-2
   43910:	1884703a 	and	r2,r3,r2
   43914:	1001703a 	wrctl	status,r2
  
  return context;
   43918:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   4391c:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   43920:	d0a00a17 	ldw	r2,-32728(gp)
   43924:	10c000c4 	addi	r3,r2,3
   43928:	00bfff04 	movi	r2,-4
   4392c:	1884703a 	and	r2,r3,r2
   43930:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   43934:	d0e00a17 	ldw	r3,-32728(gp)
   43938:	e0bffe17 	ldw	r2,-8(fp)
   4393c:	1887883a 	add	r3,r3,r2
   43940:	00a00034 	movhi	r2,32768
   43944:	10800004 	addi	r2,r2,0
   43948:	10c0072e 	bgeu	r2,r3,43968 <sbrk+0x78>
   4394c:	e0bffd17 	ldw	r2,-12(fp)
   43950:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   43954:	e0bffa17 	ldw	r2,-24(fp)
   43958:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   4395c:	00bfffc4 	movi	r2,-1
   43960:	e0bfff15 	stw	r2,-4(fp)
   43964:	00000c06 	br	43998 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
   43968:	d0a00a17 	ldw	r2,-32728(gp)
   4396c:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
   43970:	d0e00a17 	ldw	r3,-32728(gp)
   43974:	e0bffe17 	ldw	r2,-8(fp)
   43978:	1885883a 	add	r2,r3,r2
   4397c:	d0a00a15 	stw	r2,-32728(gp)
   43980:	e0bffd17 	ldw	r2,-12(fp)
   43984:	e0bff915 	stw	r2,-28(fp)
   43988:	e0bff917 	ldw	r2,-28(fp)
   4398c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   43990:	e0bffc17 	ldw	r2,-16(fp)
   43994:	e0bfff15 	stw	r2,-4(fp)
   43998:	e0bfff17 	ldw	r2,-4(fp)
} 
   4399c:	e037883a 	mov	sp,fp
   439a0:	df000017 	ldw	fp,0(sp)
   439a4:	dec00104 	addi	sp,sp,4
   439a8:	f800283a 	ret

000439ac <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   439ac:	defffd04 	addi	sp,sp,-12
   439b0:	dfc00215 	stw	ra,8(sp)
   439b4:	df000115 	stw	fp,4(sp)
   439b8:	df000104 	addi	fp,sp,4
   439bc:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   439c0:	e13fff17 	ldw	r4,-4(fp)
   439c4:	0044b5c0 	call	44b5c <alt_busy_sleep>
}
   439c8:	e037883a 	mov	sp,fp
   439cc:	dfc00117 	ldw	ra,4(sp)
   439d0:	df000017 	ldw	fp,0(sp)
   439d4:	dec00204 	addi	sp,sp,8
   439d8:	f800283a 	ret

000439dc <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   439dc:	defff704 	addi	sp,sp,-36
   439e0:	dfc00815 	stw	ra,32(sp)
   439e4:	df000715 	stw	fp,28(sp)
   439e8:	df000704 	addi	fp,sp,28
   439ec:	e13ffb15 	stw	r4,-20(fp)
   439f0:	e17ffc15 	stw	r5,-16(fp)
   439f4:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   439f8:	e0bffb17 	ldw	r2,-20(fp)
   439fc:	1004803a 	cmplt	r2,r2,zero
   43a00:	1000081e 	bne	r2,zero,43a24 <write+0x48>
   43a04:	e0bffb17 	ldw	r2,-20(fp)
   43a08:	10800324 	muli	r2,r2,12
   43a0c:	1007883a 	mov	r3,r2
   43a10:	00900034 	movhi	r2,16384
   43a14:	10822204 	addi	r2,r2,2184
   43a18:	1887883a 	add	r3,r3,r2
   43a1c:	e0ffff15 	stw	r3,-4(fp)
   43a20:	00000106 	br	43a28 <write+0x4c>
   43a24:	e03fff15 	stw	zero,-4(fp)
   43a28:	e0bfff17 	ldw	r2,-4(fp)
   43a2c:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   43a30:	e0bffa17 	ldw	r2,-24(fp)
   43a34:	1005003a 	cmpeq	r2,r2,zero
   43a38:	1000241e 	bne	r2,zero,43acc <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   43a3c:	e0bffa17 	ldw	r2,-24(fp)
   43a40:	10800217 	ldw	r2,8(r2)
   43a44:	108000cc 	andi	r2,r2,3
   43a48:	1005003a 	cmpeq	r2,r2,zero
   43a4c:	10001a1e 	bne	r2,zero,43ab8 <write+0xdc>
   43a50:	e0bffa17 	ldw	r2,-24(fp)
   43a54:	10800017 	ldw	r2,0(r2)
   43a58:	10800617 	ldw	r2,24(r2)
   43a5c:	1005003a 	cmpeq	r2,r2,zero
   43a60:	1000151e 	bne	r2,zero,43ab8 <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   43a64:	e0bffa17 	ldw	r2,-24(fp)
   43a68:	10800017 	ldw	r2,0(r2)
   43a6c:	10800617 	ldw	r2,24(r2)
   43a70:	e17ffc17 	ldw	r5,-16(fp)
   43a74:	e1bffd17 	ldw	r6,-12(fp)
   43a78:	e13ffa17 	ldw	r4,-24(fp)
   43a7c:	103ee83a 	callr	r2
   43a80:	e0bff915 	stw	r2,-28(fp)
   43a84:	e0bff917 	ldw	r2,-28(fp)
   43a88:	1004403a 	cmpge	r2,r2,zero
   43a8c:	1000071e 	bne	r2,zero,43aac <write+0xd0>
      {
        ALT_ERRNO = -rval;
   43a90:	0043afc0 	call	43afc <alt_get_errno>
   43a94:	e0fff917 	ldw	r3,-28(fp)
   43a98:	00c7c83a 	sub	r3,zero,r3
   43a9c:	10c00015 	stw	r3,0(r2)
        return -1;
   43aa0:	00bfffc4 	movi	r2,-1
   43aa4:	e0bffe15 	stw	r2,-8(fp)
   43aa8:	00000e06 	br	43ae4 <write+0x108>
      }
      return rval;
   43aac:	e0bff917 	ldw	r2,-28(fp)
   43ab0:	e0bffe15 	stw	r2,-8(fp)
   43ab4:	00000b06 	br	43ae4 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
   43ab8:	0043afc0 	call	43afc <alt_get_errno>
   43abc:	1007883a 	mov	r3,r2
   43ac0:	00800344 	movi	r2,13
   43ac4:	18800015 	stw	r2,0(r3)
   43ac8:	00000406 	br	43adc <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   43acc:	0043afc0 	call	43afc <alt_get_errno>
   43ad0:	1007883a 	mov	r3,r2
   43ad4:	00801444 	movi	r2,81
   43ad8:	18800015 	stw	r2,0(r3)
  }
  return -1;
   43adc:	00bfffc4 	movi	r2,-1
   43ae0:	e0bffe15 	stw	r2,-8(fp)
   43ae4:	e0bffe17 	ldw	r2,-8(fp)
}
   43ae8:	e037883a 	mov	sp,fp
   43aec:	dfc00117 	ldw	ra,4(sp)
   43af0:	df000017 	ldw	fp,0(sp)
   43af4:	dec00204 	addi	sp,sp,8
   43af8:	f800283a 	ret

00043afc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   43afc:	defffd04 	addi	sp,sp,-12
   43b00:	dfc00215 	stw	ra,8(sp)
   43b04:	df000115 	stw	fp,4(sp)
   43b08:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   43b0c:	00900034 	movhi	r2,16384
   43b10:	1086a304 	addi	r2,r2,6796
   43b14:	10800017 	ldw	r2,0(r2)
   43b18:	1005003a 	cmpeq	r2,r2,zero
   43b1c:	1000061e 	bne	r2,zero,43b38 <alt_get_errno+0x3c>
   43b20:	00900034 	movhi	r2,16384
   43b24:	1086a304 	addi	r2,r2,6796
   43b28:	10800017 	ldw	r2,0(r2)
   43b2c:	103ee83a 	callr	r2
   43b30:	e0bfff15 	stw	r2,-4(fp)
   43b34:	00000306 	br	43b44 <alt_get_errno+0x48>
   43b38:	00900034 	movhi	r2,16384
   43b3c:	1086ab04 	addi	r2,r2,6828
   43b40:	e0bfff15 	stw	r2,-4(fp)
   43b44:	e0bfff17 	ldw	r2,-4(fp)
}
   43b48:	e037883a 	mov	sp,fp
   43b4c:	dfc00117 	ldw	ra,4(sp)
   43b50:	df000017 	ldw	fp,0(sp)
   43b54:	dec00204 	addi	sp,sp,8
   43b58:	f800283a 	ret

00043b5c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   43b5c:	defffd04 	addi	sp,sp,-12
   43b60:	dfc00215 	stw	ra,8(sp)
   43b64:	df000115 	stw	fp,4(sp)
   43b68:	df000104 	addi	fp,sp,4
   43b6c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS, nios2_qsys);
   43b70:	00457680 	call	45768 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   43b74:	00800044 	movi	r2,1
   43b78:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   43b7c:	e037883a 	mov	sp,fp
   43b80:	dfc00117 	ldw	ra,4(sp)
   43b84:	df000017 	ldw	fp,0(sp)
   43b88:	dec00204 	addi	sp,sp,8
   43b8c:	f800283a 	ret

00043b90 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   43b90:	defffe04 	addi	sp,sp,-8
   43b94:	dfc00115 	stw	ra,4(sp)
   43b98:	df000015 	stw	fp,0(sp)
   43b9c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
   43ba0:	01004034 	movhi	r4,256
   43ba4:	21004004 	addi	r4,r4,256
   43ba8:	000b883a 	mov	r5,zero
   43bac:	01800044 	movi	r6,1
   43bb0:	01c0fa04 	movi	r7,1000
   43bb4:	00449780 	call	44978 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   43bb8:	01100034 	movhi	r4,16384
   43bbc:	21028c04 	addi	r4,r4,2608
   43bc0:	000b883a 	mov	r5,zero
   43bc4:	000d883a 	mov	r6,zero
   43bc8:	0043d6c0 	call	43d6c <altera_avalon_jtag_uart_init>
   43bcc:	01100034 	movhi	r4,16384
   43bd0:	21028204 	addi	r4,r4,2568
   43bd4:	0043bec0 	call	43bec <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SPI_1, spi_1);
    ALTERA_AVALON_SPI_INIT ( SPI_2, spi_2);
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
}
   43bd8:	e037883a 	mov	sp,fp
   43bdc:	dfc00117 	ldw	ra,4(sp)
   43be0:	df000017 	ldw	fp,0(sp)
   43be4:	dec00204 	addi	sp,sp,8
   43be8:	f800283a 	ret

00043bec <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   43bec:	defffd04 	addi	sp,sp,-12
   43bf0:	dfc00215 	stw	ra,8(sp)
   43bf4:	df000115 	stw	fp,4(sp)
   43bf8:	df000104 	addi	fp,sp,4
   43bfc:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   43c00:	e13fff17 	ldw	r4,-4(fp)
   43c04:	01500034 	movhi	r5,16384
   43c08:	2946a004 	addi	r5,r5,6784
   43c0c:	0044cec0 	call	44cec <alt_dev_llist_insert>
}
   43c10:	e037883a 	mov	sp,fp
   43c14:	dfc00117 	ldw	ra,4(sp)
   43c18:	df000017 	ldw	fp,0(sp)
   43c1c:	dec00204 	addi	sp,sp,8
   43c20:	f800283a 	ret

00043c24 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   43c24:	defffa04 	addi	sp,sp,-24
   43c28:	dfc00515 	stw	ra,20(sp)
   43c2c:	df000415 	stw	fp,16(sp)
   43c30:	df000404 	addi	fp,sp,16
   43c34:	e13ffd15 	stw	r4,-12(fp)
   43c38:	e17ffe15 	stw	r5,-8(fp)
   43c3c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   43c40:	e0bffd17 	ldw	r2,-12(fp)
   43c44:	10800017 	ldw	r2,0(r2)
   43c48:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   43c4c:	e0bffc17 	ldw	r2,-16(fp)
   43c50:	11000a04 	addi	r4,r2,40
   43c54:	e0bffd17 	ldw	r2,-12(fp)
   43c58:	11c00217 	ldw	r7,8(r2)
   43c5c:	e17ffe17 	ldw	r5,-8(fp)
   43c60:	e1bfff17 	ldw	r6,-4(fp)
   43c64:	004426c0 	call	4426c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   43c68:	e037883a 	mov	sp,fp
   43c6c:	dfc00117 	ldw	ra,4(sp)
   43c70:	df000017 	ldw	fp,0(sp)
   43c74:	dec00204 	addi	sp,sp,8
   43c78:	f800283a 	ret

00043c7c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   43c7c:	defffa04 	addi	sp,sp,-24
   43c80:	dfc00515 	stw	ra,20(sp)
   43c84:	df000415 	stw	fp,16(sp)
   43c88:	df000404 	addi	fp,sp,16
   43c8c:	e13ffd15 	stw	r4,-12(fp)
   43c90:	e17ffe15 	stw	r5,-8(fp)
   43c94:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   43c98:	e0bffd17 	ldw	r2,-12(fp)
   43c9c:	10800017 	ldw	r2,0(r2)
   43ca0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   43ca4:	e0bffc17 	ldw	r2,-16(fp)
   43ca8:	11000a04 	addi	r4,r2,40
   43cac:	e0bffd17 	ldw	r2,-12(fp)
   43cb0:	11c00217 	ldw	r7,8(r2)
   43cb4:	e17ffe17 	ldw	r5,-8(fp)
   43cb8:	e1bfff17 	ldw	r6,-4(fp)
   43cbc:	00444900 	call	44490 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   43cc0:	e037883a 	mov	sp,fp
   43cc4:	dfc00117 	ldw	ra,4(sp)
   43cc8:	df000017 	ldw	fp,0(sp)
   43ccc:	dec00204 	addi	sp,sp,8
   43cd0:	f800283a 	ret

00043cd4 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   43cd4:	defffc04 	addi	sp,sp,-16
   43cd8:	dfc00315 	stw	ra,12(sp)
   43cdc:	df000215 	stw	fp,8(sp)
   43ce0:	df000204 	addi	fp,sp,8
   43ce4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   43ce8:	e0bfff17 	ldw	r2,-4(fp)
   43cec:	10800017 	ldw	r2,0(r2)
   43cf0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   43cf4:	e0bffe17 	ldw	r2,-8(fp)
   43cf8:	11000a04 	addi	r4,r2,40
   43cfc:	e0bfff17 	ldw	r2,-4(fp)
   43d00:	11400217 	ldw	r5,8(r2)
   43d04:	00441040 	call	44104 <altera_avalon_jtag_uart_close>
}
   43d08:	e037883a 	mov	sp,fp
   43d0c:	dfc00117 	ldw	ra,4(sp)
   43d10:	df000017 	ldw	fp,0(sp)
   43d14:	dec00204 	addi	sp,sp,8
   43d18:	f800283a 	ret

00043d1c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   43d1c:	defffa04 	addi	sp,sp,-24
   43d20:	dfc00515 	stw	ra,20(sp)
   43d24:	df000415 	stw	fp,16(sp)
   43d28:	df000404 	addi	fp,sp,16
   43d2c:	e13ffd15 	stw	r4,-12(fp)
   43d30:	e17ffe15 	stw	r5,-8(fp)
   43d34:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   43d38:	e0bffd17 	ldw	r2,-12(fp)
   43d3c:	10800017 	ldw	r2,0(r2)
   43d40:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   43d44:	e0bffc17 	ldw	r2,-16(fp)
   43d48:	11000a04 	addi	r4,r2,40
   43d4c:	e17ffe17 	ldw	r5,-8(fp)
   43d50:	e1bfff17 	ldw	r6,-4(fp)
   43d54:	00441780 	call	44178 <altera_avalon_jtag_uart_ioctl>
}
   43d58:	e037883a 	mov	sp,fp
   43d5c:	dfc00117 	ldw	ra,4(sp)
   43d60:	df000017 	ldw	fp,0(sp)
   43d64:	dec00204 	addi	sp,sp,8
   43d68:	f800283a 	ret

00043d6c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   43d6c:	defffa04 	addi	sp,sp,-24
   43d70:	dfc00515 	stw	ra,20(sp)
   43d74:	df000415 	stw	fp,16(sp)
   43d78:	df000404 	addi	fp,sp,16
   43d7c:	e13ffd15 	stw	r4,-12(fp)
   43d80:	e17ffe15 	stw	r5,-8(fp)
   43d84:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   43d88:	e0fffd17 	ldw	r3,-12(fp)
   43d8c:	00800044 	movi	r2,1
   43d90:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   43d94:	e0bffd17 	ldw	r2,-12(fp)
   43d98:	10800017 	ldw	r2,0(r2)
   43d9c:	11000104 	addi	r4,r2,4
   43da0:	e0bffd17 	ldw	r2,-12(fp)
   43da4:	10800817 	ldw	r2,32(r2)
   43da8:	1007883a 	mov	r3,r2
   43dac:	2005883a 	mov	r2,r4
   43db0:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   43db4:	e13ffe17 	ldw	r4,-8(fp)
   43db8:	e17fff17 	ldw	r5,-4(fp)
   43dbc:	d8000015 	stw	zero,0(sp)
   43dc0:	01800134 	movhi	r6,4
   43dc4:	318f8b04 	addi	r6,r6,15916
   43dc8:	e1fffd17 	ldw	r7,-12(fp)
   43dcc:	0044ef80 	call	44ef8 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   43dd0:	e0bffd17 	ldw	r2,-12(fp)
   43dd4:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   43dd8:	e0bffd17 	ldw	r2,-12(fp)
   43ddc:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   43de0:	00900034 	movhi	r2,16384
   43de4:	1086b004 	addi	r2,r2,6848
   43de8:	10800017 	ldw	r2,0(r2)
   43dec:	100b883a 	mov	r5,r2
   43df0:	01800134 	movhi	r6,4
   43df4:	31901504 	addi	r6,r6,16468
   43df8:	e1fffd17 	ldw	r7,-12(fp)
   43dfc:	0044a080 	call	44a08 <alt_alarm_start>
   43e00:	1004403a 	cmpge	r2,r2,zero
   43e04:	1000041e 	bne	r2,zero,43e18 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   43e08:	e0fffd17 	ldw	r3,-12(fp)
   43e0c:	00a00034 	movhi	r2,32768
   43e10:	10bfffc4 	addi	r2,r2,-1
   43e14:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   43e18:	e037883a 	mov	sp,fp
   43e1c:	dfc00117 	ldw	ra,4(sp)
   43e20:	df000017 	ldw	fp,0(sp)
   43e24:	dec00204 	addi	sp,sp,8
   43e28:	f800283a 	ret

00043e2c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   43e2c:	defff804 	addi	sp,sp,-32
   43e30:	df000715 	stw	fp,28(sp)
   43e34:	df000704 	addi	fp,sp,28
   43e38:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   43e3c:	e0bfff17 	ldw	r2,-4(fp)
   43e40:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
   43e44:	e0bffe17 	ldw	r2,-8(fp)
   43e48:	10800017 	ldw	r2,0(r2)
   43e4c:	e0bffd15 	stw	r2,-12(fp)
   43e50:	00000006 	br	43e54 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   43e54:	e0bffd17 	ldw	r2,-12(fp)
   43e58:	10800104 	addi	r2,r2,4
   43e5c:	10800037 	ldwio	r2,0(r2)
   43e60:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   43e64:	e0bffc17 	ldw	r2,-16(fp)
   43e68:	1080c00c 	andi	r2,r2,768
   43e6c:	1005003a 	cmpeq	r2,r2,zero
   43e70:	1000741e 	bne	r2,zero,44044 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   43e74:	e0bffc17 	ldw	r2,-16(fp)
   43e78:	1080400c 	andi	r2,r2,256
   43e7c:	1005003a 	cmpeq	r2,r2,zero
   43e80:	1000351e 	bne	r2,zero,43f58 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   43e84:	00800074 	movhi	r2,1
   43e88:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   43e8c:	e0bffe17 	ldw	r2,-8(fp)
   43e90:	10800a17 	ldw	r2,40(r2)
   43e94:	10800044 	addi	r2,r2,1
   43e98:	1081ffcc 	andi	r2,r2,2047
   43e9c:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
   43ea0:	e0bffe17 	ldw	r2,-8(fp)
   43ea4:	10c00b17 	ldw	r3,44(r2)
   43ea8:	e0bffa17 	ldw	r2,-24(fp)
   43eac:	18801626 	beq	r3,r2,43f08 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   43eb0:	e0bffd17 	ldw	r2,-12(fp)
   43eb4:	10800037 	ldwio	r2,0(r2)
   43eb8:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   43ebc:	e0bffb17 	ldw	r2,-20(fp)
   43ec0:	10a0000c 	andi	r2,r2,32768
   43ec4:	1005003a 	cmpeq	r2,r2,zero
   43ec8:	10000f1e 	bne	r2,zero,43f08 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   43ecc:	e0bffe17 	ldw	r2,-8(fp)
   43ed0:	10c00a17 	ldw	r3,40(r2)
   43ed4:	e0bffb17 	ldw	r2,-20(fp)
   43ed8:	1009883a 	mov	r4,r2
   43edc:	e0bffe17 	ldw	r2,-8(fp)
   43ee0:	1885883a 	add	r2,r3,r2
   43ee4:	10800e04 	addi	r2,r2,56
   43ee8:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   43eec:	e0bffe17 	ldw	r2,-8(fp)
   43ef0:	10800a17 	ldw	r2,40(r2)
   43ef4:	10800044 	addi	r2,r2,1
   43ef8:	10c1ffcc 	andi	r3,r2,2047
   43efc:	e0bffe17 	ldw	r2,-8(fp)
   43f00:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   43f04:	003fe106 	br	43e8c <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   43f08:	e0bffb17 	ldw	r2,-20(fp)
   43f0c:	10bfffec 	andhi	r2,r2,65535
   43f10:	1005003a 	cmpeq	r2,r2,zero
   43f14:	1000101e 	bne	r2,zero,43f58 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   43f18:	e0bffe17 	ldw	r2,-8(fp)
   43f1c:	10c00817 	ldw	r3,32(r2)
   43f20:	00bfff84 	movi	r2,-2
   43f24:	1886703a 	and	r3,r3,r2
   43f28:	e0bffe17 	ldw	r2,-8(fp)
   43f2c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   43f30:	e0bffd17 	ldw	r2,-12(fp)
   43f34:	11000104 	addi	r4,r2,4
   43f38:	e0bffe17 	ldw	r2,-8(fp)
   43f3c:	10800817 	ldw	r2,32(r2)
   43f40:	1007883a 	mov	r3,r2
   43f44:	2005883a 	mov	r2,r4
   43f48:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   43f4c:	e0bffd17 	ldw	r2,-12(fp)
   43f50:	10800104 	addi	r2,r2,4
   43f54:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   43f58:	e0bffc17 	ldw	r2,-16(fp)
   43f5c:	1080800c 	andi	r2,r2,512
   43f60:	1005003a 	cmpeq	r2,r2,zero
   43f64:	103fbb1e 	bne	r2,zero,43e54 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   43f68:	e0bffc17 	ldw	r2,-16(fp)
   43f6c:	10bfffec 	andhi	r2,r2,65535
   43f70:	1004d43a 	srli	r2,r2,16
   43f74:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   43f78:	00001506 	br	43fd0 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   43f7c:	e13ffd17 	ldw	r4,-12(fp)
   43f80:	e0bffe17 	ldw	r2,-8(fp)
   43f84:	10c00d17 	ldw	r3,52(r2)
   43f88:	e0bffe17 	ldw	r2,-8(fp)
   43f8c:	1885883a 	add	r2,r3,r2
   43f90:	10820e04 	addi	r2,r2,2104
   43f94:	10800003 	ldbu	r2,0(r2)
   43f98:	10c03fcc 	andi	r3,r2,255
   43f9c:	18c0201c 	xori	r3,r3,128
   43fa0:	18ffe004 	addi	r3,r3,-128
   43fa4:	2005883a 	mov	r2,r4
   43fa8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   43fac:	e0bffe17 	ldw	r2,-8(fp)
   43fb0:	10800d17 	ldw	r2,52(r2)
   43fb4:	10800044 	addi	r2,r2,1
   43fb8:	10c1ffcc 	andi	r3,r2,2047
   43fbc:	e0bffe17 	ldw	r2,-8(fp)
   43fc0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   43fc4:	e0bff917 	ldw	r2,-28(fp)
   43fc8:	10bfffc4 	addi	r2,r2,-1
   43fcc:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   43fd0:	e0bff917 	ldw	r2,-28(fp)
   43fd4:	1005003a 	cmpeq	r2,r2,zero
   43fd8:	1000051e 	bne	r2,zero,43ff0 <altera_avalon_jtag_uart_irq+0x1c4>
   43fdc:	e0bffe17 	ldw	r2,-8(fp)
   43fe0:	10c00d17 	ldw	r3,52(r2)
   43fe4:	e0bffe17 	ldw	r2,-8(fp)
   43fe8:	10800c17 	ldw	r2,48(r2)
   43fec:	18bfe31e 	bne	r3,r2,43f7c <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   43ff0:	e0bff917 	ldw	r2,-28(fp)
   43ff4:	1005003a 	cmpeq	r2,r2,zero
   43ff8:	103f961e 	bne	r2,zero,43e54 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   43ffc:	e0bffe17 	ldw	r2,-8(fp)
   44000:	10c00817 	ldw	r3,32(r2)
   44004:	00bfff44 	movi	r2,-3
   44008:	1886703a 	and	r3,r3,r2
   4400c:	e0bffe17 	ldw	r2,-8(fp)
   44010:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   44014:	e0bffe17 	ldw	r2,-8(fp)
   44018:	10800017 	ldw	r2,0(r2)
   4401c:	11000104 	addi	r4,r2,4
   44020:	e0bffe17 	ldw	r2,-8(fp)
   44024:	10800817 	ldw	r2,32(r2)
   44028:	1007883a 	mov	r3,r2
   4402c:	2005883a 	mov	r2,r4
   44030:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   44034:	e0bffd17 	ldw	r2,-12(fp)
   44038:	10800104 	addi	r2,r2,4
   4403c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   44040:	003f8406 	br	43e54 <altera_avalon_jtag_uart_irq+0x28>
}
   44044:	e037883a 	mov	sp,fp
   44048:	df000017 	ldw	fp,0(sp)
   4404c:	dec00104 	addi	sp,sp,4
   44050:	f800283a 	ret

00044054 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   44054:	defffc04 	addi	sp,sp,-16
   44058:	df000315 	stw	fp,12(sp)
   4405c:	df000304 	addi	fp,sp,12
   44060:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   44064:	e0bfff17 	ldw	r2,-4(fp)
   44068:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   4406c:	e0bffe17 	ldw	r2,-8(fp)
   44070:	10800017 	ldw	r2,0(r2)
   44074:	10800104 	addi	r2,r2,4
   44078:	10800037 	ldwio	r2,0(r2)
   4407c:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   44080:	e0bffd17 	ldw	r2,-12(fp)
   44084:	1081000c 	andi	r2,r2,1024
   44088:	1005003a 	cmpeq	r2,r2,zero
   4408c:	10000c1e 	bne	r2,zero,440c0 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   44090:	e0bffe17 	ldw	r2,-8(fp)
   44094:	10800017 	ldw	r2,0(r2)
   44098:	11000104 	addi	r4,r2,4
   4409c:	e0bffe17 	ldw	r2,-8(fp)
   440a0:	10800817 	ldw	r2,32(r2)
   440a4:	10810014 	ori	r2,r2,1024
   440a8:	1007883a 	mov	r3,r2
   440ac:	2005883a 	mov	r2,r4
   440b0:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
   440b4:	e0bffe17 	ldw	r2,-8(fp)
   440b8:	10000915 	stw	zero,36(r2)
   440bc:	00000a06 	br	440e8 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   440c0:	e0bffe17 	ldw	r2,-8(fp)
   440c4:	10c00917 	ldw	r3,36(r2)
   440c8:	00a00034 	movhi	r2,32768
   440cc:	10bfff04 	addi	r2,r2,-4
   440d0:	10c00536 	bltu	r2,r3,440e8 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
   440d4:	e0bffe17 	ldw	r2,-8(fp)
   440d8:	10800917 	ldw	r2,36(r2)
   440dc:	10c00044 	addi	r3,r2,1
   440e0:	e0bffe17 	ldw	r2,-8(fp)
   440e4:	10c00915 	stw	r3,36(r2)
   440e8:	00900034 	movhi	r2,16384
   440ec:	1086b004 	addi	r2,r2,6848
   440f0:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   440f4:	e037883a 	mov	sp,fp
   440f8:	df000017 	ldw	fp,0(sp)
   440fc:	dec00104 	addi	sp,sp,4
   44100:	f800283a 	ret

00044104 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   44104:	defffc04 	addi	sp,sp,-16
   44108:	df000315 	stw	fp,12(sp)
   4410c:	df000304 	addi	fp,sp,12
   44110:	e13ffd15 	stw	r4,-12(fp)
   44114:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   44118:	00000706 	br	44138 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
   4411c:	e0bffe17 	ldw	r2,-8(fp)
   44120:	1090000c 	andi	r2,r2,16384
   44124:	1005003a 	cmpeq	r2,r2,zero
   44128:	1000031e 	bne	r2,zero,44138 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
   4412c:	00bffd44 	movi	r2,-11
   44130:	e0bfff15 	stw	r2,-4(fp)
   44134:	00000b06 	br	44164 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   44138:	e0bffd17 	ldw	r2,-12(fp)
   4413c:	10c00d17 	ldw	r3,52(r2)
   44140:	e0bffd17 	ldw	r2,-12(fp)
   44144:	10800c17 	ldw	r2,48(r2)
   44148:	18800526 	beq	r3,r2,44160 <altera_avalon_jtag_uart_close+0x5c>
   4414c:	e0bffd17 	ldw	r2,-12(fp)
   44150:	10c00917 	ldw	r3,36(r2)
   44154:	e0bffd17 	ldw	r2,-12(fp)
   44158:	10800117 	ldw	r2,4(r2)
   4415c:	18bfef36 	bltu	r3,r2,4411c <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   44160:	e03fff15 	stw	zero,-4(fp)
   44164:	e0bfff17 	ldw	r2,-4(fp)
}
   44168:	e037883a 	mov	sp,fp
   4416c:	df000017 	ldw	fp,0(sp)
   44170:	dec00104 	addi	sp,sp,4
   44174:	f800283a 	ret

00044178 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   44178:	defff804 	addi	sp,sp,-32
   4417c:	df000715 	stw	fp,28(sp)
   44180:	df000704 	addi	fp,sp,28
   44184:	e13ffb15 	stw	r4,-20(fp)
   44188:	e17ffc15 	stw	r5,-16(fp)
   4418c:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
   44190:	00bff9c4 	movi	r2,-25
   44194:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
   44198:	e0bffc17 	ldw	r2,-16(fp)
   4419c:	e0bfff15 	stw	r2,-4(fp)
   441a0:	e0ffff17 	ldw	r3,-4(fp)
   441a4:	189a8060 	cmpeqi	r2,r3,27137
   441a8:	1000041e 	bne	r2,zero,441bc <altera_avalon_jtag_uart_ioctl+0x44>
   441ac:	e0ffff17 	ldw	r3,-4(fp)
   441b0:	189a80a0 	cmpeqi	r2,r3,27138
   441b4:	10001b1e 	bne	r2,zero,44224 <altera_avalon_jtag_uart_ioctl+0xac>
   441b8:	00002706 	br	44258 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   441bc:	e0bffb17 	ldw	r2,-20(fp)
   441c0:	10c00117 	ldw	r3,4(r2)
   441c4:	00a00034 	movhi	r2,32768
   441c8:	10bfffc4 	addi	r2,r2,-1
   441cc:	18802226 	beq	r3,r2,44258 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
   441d0:	e0bffd17 	ldw	r2,-12(fp)
   441d4:	10800017 	ldw	r2,0(r2)
   441d8:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   441dc:	e0bff917 	ldw	r2,-28(fp)
   441e0:	10800090 	cmplti	r2,r2,2
   441e4:	1000071e 	bne	r2,zero,44204 <altera_avalon_jtag_uart_ioctl+0x8c>
   441e8:	e0fff917 	ldw	r3,-28(fp)
   441ec:	00a00034 	movhi	r2,32768
   441f0:	10bfffc4 	addi	r2,r2,-1
   441f4:	18800326 	beq	r3,r2,44204 <altera_avalon_jtag_uart_ioctl+0x8c>
   441f8:	e0bff917 	ldw	r2,-28(fp)
   441fc:	e0bffe15 	stw	r2,-8(fp)
   44200:	00000306 	br	44210 <altera_avalon_jtag_uart_ioctl+0x98>
   44204:	00e00034 	movhi	r3,32768
   44208:	18ffff84 	addi	r3,r3,-2
   4420c:	e0fffe15 	stw	r3,-8(fp)
   44210:	e0bffb17 	ldw	r2,-20(fp)
   44214:	e0fffe17 	ldw	r3,-8(fp)
   44218:	10c00115 	stw	r3,4(r2)
      rc = 0;
   4421c:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
   44220:	00000d06 	br	44258 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   44224:	e0bffb17 	ldw	r2,-20(fp)
   44228:	10c00117 	ldw	r3,4(r2)
   4422c:	00a00034 	movhi	r2,32768
   44230:	10bfffc4 	addi	r2,r2,-1
   44234:	18800826 	beq	r3,r2,44258 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   44238:	e13ffd17 	ldw	r4,-12(fp)
   4423c:	e0bffb17 	ldw	r2,-20(fp)
   44240:	10c00917 	ldw	r3,36(r2)
   44244:	e0bffb17 	ldw	r2,-20(fp)
   44248:	10800117 	ldw	r2,4(r2)
   4424c:	1885803a 	cmpltu	r2,r3,r2
   44250:	20800015 	stw	r2,0(r4)
      rc = 0;
   44254:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
   44258:	e0bffa17 	ldw	r2,-24(fp)
}
   4425c:	e037883a 	mov	sp,fp
   44260:	df000017 	ldw	fp,0(sp)
   44264:	dec00104 	addi	sp,sp,4
   44268:	f800283a 	ret

0004426c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   4426c:	defff204 	addi	sp,sp,-56
   44270:	dfc00d15 	stw	ra,52(sp)
   44274:	df000c15 	stw	fp,48(sp)
   44278:	df000c04 	addi	fp,sp,48
   4427c:	e13ffb15 	stw	r4,-20(fp)
   44280:	e17ffc15 	stw	r5,-16(fp)
   44284:	e1bffd15 	stw	r6,-12(fp)
   44288:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
   4428c:	e0bffc17 	ldw	r2,-16(fp)
   44290:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   44294:	00004806 	br	443b8 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   44298:	e0bffb17 	ldw	r2,-20(fp)
   4429c:	10800a17 	ldw	r2,40(r2)
   442a0:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   442a4:	e0bffb17 	ldw	r2,-20(fp)
   442a8:	10800b17 	ldw	r2,44(r2)
   442ac:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
   442b0:	e0fff717 	ldw	r3,-36(fp)
   442b4:	e0bff617 	ldw	r2,-40(fp)
   442b8:	18800536 	bltu	r3,r2,442d0 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   442bc:	e0bff717 	ldw	r2,-36(fp)
   442c0:	e0fff617 	ldw	r3,-40(fp)
   442c4:	10c5c83a 	sub	r2,r2,r3
   442c8:	e0bff815 	stw	r2,-32(fp)
   442cc:	00000406 	br	442e0 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   442d0:	00820004 	movi	r2,2048
   442d4:	e0fff617 	ldw	r3,-40(fp)
   442d8:	10c5c83a 	sub	r2,r2,r3
   442dc:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
   442e0:	e0bff817 	ldw	r2,-32(fp)
   442e4:	1005003a 	cmpeq	r2,r2,zero
   442e8:	10001f1e 	bne	r2,zero,44368 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
   442ec:	e0fffd17 	ldw	r3,-12(fp)
   442f0:	e0bff817 	ldw	r2,-32(fp)
   442f4:	1880022e 	bgeu	r3,r2,44300 <altera_avalon_jtag_uart_read+0x94>
        n = space;
   442f8:	e0bffd17 	ldw	r2,-12(fp)
   442fc:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   44300:	e0bffb17 	ldw	r2,-20(fp)
   44304:	10c00e04 	addi	r3,r2,56
   44308:	e0bff617 	ldw	r2,-40(fp)
   4430c:	1887883a 	add	r3,r3,r2
   44310:	e0bffa17 	ldw	r2,-24(fp)
   44314:	1009883a 	mov	r4,r2
   44318:	180b883a 	mov	r5,r3
   4431c:	e1bff817 	ldw	r6,-32(fp)
   44320:	00415240 	call	41524 <memcpy>
      ptr   += n;
   44324:	e0fff817 	ldw	r3,-32(fp)
   44328:	e0bffa17 	ldw	r2,-24(fp)
   4432c:	10c5883a 	add	r2,r2,r3
   44330:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
   44334:	e0fffd17 	ldw	r3,-12(fp)
   44338:	e0bff817 	ldw	r2,-32(fp)
   4433c:	1885c83a 	sub	r2,r3,r2
   44340:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   44344:	e0fff617 	ldw	r3,-40(fp)
   44348:	e0bff817 	ldw	r2,-32(fp)
   4434c:	1885883a 	add	r2,r3,r2
   44350:	10c1ffcc 	andi	r3,r2,2047
   44354:	e0bffb17 	ldw	r2,-20(fp)
   44358:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   4435c:	e0bffd17 	ldw	r2,-12(fp)
   44360:	10800048 	cmpgei	r2,r2,1
   44364:	103fcc1e 	bne	r2,zero,44298 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
   44368:	e0fffa17 	ldw	r3,-24(fp)
   4436c:	e0bffc17 	ldw	r2,-16(fp)
   44370:	1880141e 	bne	r3,r2,443c4 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   44374:	e0bffe17 	ldw	r2,-8(fp)
   44378:	1090000c 	andi	r2,r2,16384
   4437c:	1004c03a 	cmpne	r2,r2,zero
   44380:	1000101e 	bne	r2,zero,443c4 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   44384:	e0bffb17 	ldw	r2,-20(fp)
   44388:	10c00a17 	ldw	r3,40(r2)
   4438c:	e0bff717 	ldw	r2,-36(fp)
   44390:	1880051e 	bne	r3,r2,443a8 <altera_avalon_jtag_uart_read+0x13c>
   44394:	e0bffb17 	ldw	r2,-20(fp)
   44398:	10c00917 	ldw	r3,36(r2)
   4439c:	e0bffb17 	ldw	r2,-20(fp)
   443a0:	10800117 	ldw	r2,4(r2)
   443a4:	18bff736 	bltu	r3,r2,44384 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   443a8:	e0bffb17 	ldw	r2,-20(fp)
   443ac:	10c00a17 	ldw	r3,40(r2)
   443b0:	e0bff717 	ldw	r2,-36(fp)
   443b4:	18800326 	beq	r3,r2,443c4 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   443b8:	e0bffd17 	ldw	r2,-12(fp)
   443bc:	10800048 	cmpgei	r2,r2,1
   443c0:	103fb51e 	bne	r2,zero,44298 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   443c4:	e0fffa17 	ldw	r3,-24(fp)
   443c8:	e0bffc17 	ldw	r2,-16(fp)
   443cc:	18801926 	beq	r3,r2,44434 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   443d0:	0005303a 	rdctl	r2,status
   443d4:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   443d8:	e0fff517 	ldw	r3,-44(fp)
   443dc:	00bfff84 	movi	r2,-2
   443e0:	1884703a 	and	r2,r3,r2
   443e4:	1001703a 	wrctl	status,r2
  
  return context;
   443e8:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   443ec:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   443f0:	e0bffb17 	ldw	r2,-20(fp)
   443f4:	10800817 	ldw	r2,32(r2)
   443f8:	10c00054 	ori	r3,r2,1
   443fc:	e0bffb17 	ldw	r2,-20(fp)
   44400:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   44404:	e0bffb17 	ldw	r2,-20(fp)
   44408:	10800017 	ldw	r2,0(r2)
   4440c:	11000104 	addi	r4,r2,4
   44410:	e0bffb17 	ldw	r2,-20(fp)
   44414:	10800817 	ldw	r2,32(r2)
   44418:	1007883a 	mov	r3,r2
   4441c:	2005883a 	mov	r2,r4
   44420:	10c00035 	stwio	r3,0(r2)
   44424:	e0bff917 	ldw	r2,-28(fp)
   44428:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4442c:	e0bff417 	ldw	r2,-48(fp)
   44430:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   44434:	e0fffa17 	ldw	r3,-24(fp)
   44438:	e0bffc17 	ldw	r2,-16(fp)
   4443c:	18800526 	beq	r3,r2,44454 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
   44440:	e0fffa17 	ldw	r3,-24(fp)
   44444:	e0bffc17 	ldw	r2,-16(fp)
   44448:	1887c83a 	sub	r3,r3,r2
   4444c:	e0ffff15 	stw	r3,-4(fp)
   44450:	00000906 	br	44478 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
   44454:	e0bffe17 	ldw	r2,-8(fp)
   44458:	1090000c 	andi	r2,r2,16384
   4445c:	1005003a 	cmpeq	r2,r2,zero
   44460:	1000031e 	bne	r2,zero,44470 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   44464:	00bffd44 	movi	r2,-11
   44468:	e0bfff15 	stw	r2,-4(fp)
   4446c:	00000206 	br	44478 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
   44470:	00bffec4 	movi	r2,-5
   44474:	e0bfff15 	stw	r2,-4(fp)
   44478:	e0bfff17 	ldw	r2,-4(fp)
}
   4447c:	e037883a 	mov	sp,fp
   44480:	dfc00117 	ldw	ra,4(sp)
   44484:	df000017 	ldw	fp,0(sp)
   44488:	dec00204 	addi	sp,sp,8
   4448c:	f800283a 	ret

00044490 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   44490:	defff204 	addi	sp,sp,-56
   44494:	dfc00d15 	stw	ra,52(sp)
   44498:	df000c15 	stw	fp,48(sp)
   4449c:	df000c04 	addi	fp,sp,48
   444a0:	e13ffb15 	stw	r4,-20(fp)
   444a4:	e17ffc15 	stw	r5,-16(fp)
   444a8:	e1bffd15 	stw	r6,-12(fp)
   444ac:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   444b0:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   444b4:	e0bffc17 	ldw	r2,-16(fp)
   444b8:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   444bc:	00003a06 	br	445a8 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   444c0:	e0bffb17 	ldw	r2,-20(fp)
   444c4:	10800c17 	ldw	r2,48(r2)
   444c8:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
   444cc:	e0bffb17 	ldw	r2,-20(fp)
   444d0:	10800d17 	ldw	r2,52(r2)
   444d4:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
   444d8:	e0fffa17 	ldw	r3,-24(fp)
   444dc:	e0bff917 	ldw	r2,-28(fp)
   444e0:	1880062e 	bgeu	r3,r2,444fc <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   444e4:	e0fff917 	ldw	r3,-28(fp)
   444e8:	e0bffa17 	ldw	r2,-24(fp)
   444ec:	1885c83a 	sub	r2,r3,r2
   444f0:	10bfffc4 	addi	r2,r2,-1
   444f4:	e0bff815 	stw	r2,-32(fp)
   444f8:	00000c06 	br	4452c <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
   444fc:	e0bff917 	ldw	r2,-28(fp)
   44500:	1005003a 	cmpeq	r2,r2,zero
   44504:	1000051e 	bne	r2,zero,4451c <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   44508:	00820004 	movi	r2,2048
   4450c:	e0fffa17 	ldw	r3,-24(fp)
   44510:	10c5c83a 	sub	r2,r2,r3
   44514:	e0bff815 	stw	r2,-32(fp)
   44518:	00000406 	br	4452c <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   4451c:	0081ffc4 	movi	r2,2047
   44520:	e0fffa17 	ldw	r3,-24(fp)
   44524:	10c5c83a 	sub	r2,r2,r3
   44528:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
   4452c:	e0bff817 	ldw	r2,-32(fp)
   44530:	1005003a 	cmpeq	r2,r2,zero
   44534:	10001f1e 	bne	r2,zero,445b4 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
   44538:	e0fffd17 	ldw	r3,-12(fp)
   4453c:	e0bff817 	ldw	r2,-32(fp)
   44540:	1880022e 	bgeu	r3,r2,4454c <altera_avalon_jtag_uart_write+0xbc>
        n = count;
   44544:	e0bffd17 	ldw	r2,-12(fp)
   44548:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   4454c:	e0bffb17 	ldw	r2,-20(fp)
   44550:	10c20e04 	addi	r3,r2,2104
   44554:	e0bffa17 	ldw	r2,-24(fp)
   44558:	1885883a 	add	r2,r3,r2
   4455c:	e0fffc17 	ldw	r3,-16(fp)
   44560:	1009883a 	mov	r4,r2
   44564:	180b883a 	mov	r5,r3
   44568:	e1bff817 	ldw	r6,-32(fp)
   4456c:	00415240 	call	41524 <memcpy>
      ptr   += n;
   44570:	e0fff817 	ldw	r3,-32(fp)
   44574:	e0bffc17 	ldw	r2,-16(fp)
   44578:	10c5883a 	add	r2,r2,r3
   4457c:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
   44580:	e0fffd17 	ldw	r3,-12(fp)
   44584:	e0bff817 	ldw	r2,-32(fp)
   44588:	1885c83a 	sub	r2,r3,r2
   4458c:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   44590:	e0fffa17 	ldw	r3,-24(fp)
   44594:	e0bff817 	ldw	r2,-32(fp)
   44598:	1885883a 	add	r2,r3,r2
   4459c:	10c1ffcc 	andi	r3,r2,2047
   445a0:	e0bffb17 	ldw	r2,-20(fp)
   445a4:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   445a8:	e0bffd17 	ldw	r2,-12(fp)
   445ac:	10800048 	cmpgei	r2,r2,1
   445b0:	103fc31e 	bne	r2,zero,444c0 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   445b4:	0005303a 	rdctl	r2,status
   445b8:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   445bc:	e0fff517 	ldw	r3,-44(fp)
   445c0:	00bfff84 	movi	r2,-2
   445c4:	1884703a 	and	r2,r3,r2
   445c8:	1001703a 	wrctl	status,r2
  
  return context;
   445cc:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   445d0:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   445d4:	e0bffb17 	ldw	r2,-20(fp)
   445d8:	10800817 	ldw	r2,32(r2)
   445dc:	10c00094 	ori	r3,r2,2
   445e0:	e0bffb17 	ldw	r2,-20(fp)
   445e4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   445e8:	e0bffb17 	ldw	r2,-20(fp)
   445ec:	10800017 	ldw	r2,0(r2)
   445f0:	11000104 	addi	r4,r2,4
   445f4:	e0bffb17 	ldw	r2,-20(fp)
   445f8:	10800817 	ldw	r2,32(r2)
   445fc:	1007883a 	mov	r3,r2
   44600:	2005883a 	mov	r2,r4
   44604:	10c00035 	stwio	r3,0(r2)
   44608:	e0bff717 	ldw	r2,-36(fp)
   4460c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   44610:	e0bff417 	ldw	r2,-48(fp)
   44614:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   44618:	e0bffd17 	ldw	r2,-12(fp)
   4461c:	10800050 	cmplti	r2,r2,1
   44620:	1000111e 	bne	r2,zero,44668 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
   44624:	e0bffe17 	ldw	r2,-8(fp)
   44628:	1090000c 	andi	r2,r2,16384
   4462c:	1004c03a 	cmpne	r2,r2,zero
   44630:	1000101e 	bne	r2,zero,44674 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   44634:	e0bffb17 	ldw	r2,-20(fp)
   44638:	10c00d17 	ldw	r3,52(r2)
   4463c:	e0bff917 	ldw	r2,-28(fp)
   44640:	1880051e 	bne	r3,r2,44658 <altera_avalon_jtag_uart_write+0x1c8>
   44644:	e0bffb17 	ldw	r2,-20(fp)
   44648:	10c00917 	ldw	r3,36(r2)
   4464c:	e0bffb17 	ldw	r2,-20(fp)
   44650:	10800117 	ldw	r2,4(r2)
   44654:	18bff736 	bltu	r3,r2,44634 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
   44658:	e0bffb17 	ldw	r2,-20(fp)
   4465c:	10c00d17 	ldw	r3,52(r2)
   44660:	e0bff917 	ldw	r2,-28(fp)
   44664:	18800326 	beq	r3,r2,44674 <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
   44668:	e0bffd17 	ldw	r2,-12(fp)
   4466c:	10800048 	cmpgei	r2,r2,1
   44670:	103fcd1e 	bne	r2,zero,445a8 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   44674:	e0fffc17 	ldw	r3,-16(fp)
   44678:	e0bff617 	ldw	r2,-40(fp)
   4467c:	18800526 	beq	r3,r2,44694 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
   44680:	e0fffc17 	ldw	r3,-16(fp)
   44684:	e0bff617 	ldw	r2,-40(fp)
   44688:	1887c83a 	sub	r3,r3,r2
   4468c:	e0ffff15 	stw	r3,-4(fp)
   44690:	00000906 	br	446b8 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
   44694:	e0bffe17 	ldw	r2,-8(fp)
   44698:	1090000c 	andi	r2,r2,16384
   4469c:	1005003a 	cmpeq	r2,r2,zero
   446a0:	1000031e 	bne	r2,zero,446b0 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
   446a4:	00bffd44 	movi	r2,-11
   446a8:	e0bfff15 	stw	r2,-4(fp)
   446ac:	00000206 	br	446b8 <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
   446b0:	00bffec4 	movi	r2,-5
   446b4:	e0bfff15 	stw	r2,-4(fp)
   446b8:	e0bfff17 	ldw	r2,-4(fp)
}
   446bc:	e037883a 	mov	sp,fp
   446c0:	dfc00117 	ldw	ra,4(sp)
   446c4:	df000017 	ldw	fp,0(sp)
   446c8:	dec00204 	addi	sp,sp,8
   446cc:	f800283a 	ret

000446d0 <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
   446d0:	defff404 	addi	sp,sp,-48
   446d4:	df000b15 	stw	fp,44(sp)
   446d8:	df000b04 	addi	fp,sp,44
   446dc:	e13ffc15 	stw	r4,-16(fp)
   446e0:	e17ffd15 	stw	r5,-12(fp)
   446e4:	e1bffe15 	stw	r6,-8(fp)
   446e8:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
   446ec:	e0fffe17 	ldw	r3,-8(fp)
   446f0:	e0bfff17 	ldw	r2,-4(fp)
   446f4:	10c5883a 	add	r2,r2,r3
   446f8:	e0bffb15 	stw	r2,-20(fp)
  alt_u8 * read_end = read_data + read_length;
   446fc:	e0c00117 	ldw	r3,4(fp)
   44700:	e0800217 	ldw	r2,8(fp)
   44704:	10c5883a 	add	r2,r2,r3
   44708:	e0bffa15 	stw	r2,-24(fp)

  alt_u32 write_zeros = read_length;
   4470c:	e0800117 	ldw	r2,4(fp)
   44710:	e0bff915 	stw	r2,-28(fp)
  alt_u32 read_ignore = write_length;
   44714:	e0bffe17 	ldw	r2,-8(fp)
   44718:	e0bff815 	stw	r2,-32(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
   4471c:	00800044 	movi	r2,1
   44720:	e0bff615 	stw	r2,-40(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
   44724:	e0bffc17 	ldw	r2,-16(fp)
   44728:	11000504 	addi	r4,r2,20
   4472c:	e0fffd17 	ldw	r3,-12(fp)
   44730:	00800044 	movi	r2,1
   44734:	10c6983a 	sll	r3,r2,r3
   44738:	2005883a 	mov	r2,r4
   4473c:	10c00035 	stwio	r3,0(r2)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
   44740:	e0800317 	ldw	r2,12(fp)
   44744:	1080008c 	andi	r2,r2,2
   44748:	1004c03a 	cmpne	r2,r2,zero
   4474c:	1000051e 	bne	r2,zero,44764 <alt_avalon_spi_command+0x94>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
   44750:	e0bffc17 	ldw	r2,-16(fp)
   44754:	10800304 	addi	r2,r2,12
   44758:	1007883a 	mov	r3,r2
   4475c:	00810004 	movi	r2,1024
   44760:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
   44764:	e0bffc17 	ldw	r2,-16(fp)
   44768:	10800037 	ldwio	r2,0(r2)
   4476c:	00000006 	br	44770 <alt_avalon_spi_command+0xa0>
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
   44770:	e0bffc17 	ldw	r2,-16(fp)
   44774:	10800204 	addi	r2,r2,8
   44778:	10800037 	ldwio	r2,0(r2)
   4477c:	e0bff715 	stw	r2,-36(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
   44780:	e0bff717 	ldw	r2,-36(fp)
   44784:	1080100c 	andi	r2,r2,64
   44788:	1005003a 	cmpeq	r2,r2,zero
   4478c:	1000031e 	bne	r2,zero,4479c <alt_avalon_spi_command+0xcc>
   44790:	e0bff617 	ldw	r2,-40(fp)
   44794:	1004c03a 	cmpne	r2,r2,zero
   44798:	1000041e 	bne	r2,zero,447ac <alt_avalon_spi_command+0xdc>
   4479c:	e0bff717 	ldw	r2,-36(fp)
   447a0:	1080200c 	andi	r2,r2,128
   447a4:	1005003a 	cmpeq	r2,r2,zero
   447a8:	103ff11e 	bne	r2,zero,44770 <alt_avalon_spi_command+0xa0>

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
   447ac:	e0bff717 	ldw	r2,-36(fp)
   447b0:	1080100c 	andi	r2,r2,64
   447b4:	1005003a 	cmpeq	r2,r2,zero
   447b8:	1000201e 	bne	r2,zero,4483c <alt_avalon_spi_command+0x16c>
   447bc:	e0bff617 	ldw	r2,-40(fp)
   447c0:	10800050 	cmplti	r2,r2,1
   447c4:	10001d1e 	bne	r2,zero,4483c <alt_avalon_spi_command+0x16c>
    {
      credits--;
   447c8:	e0bff617 	ldw	r2,-40(fp)
   447cc:	10bfffc4 	addi	r2,r2,-1
   447d0:	e0bff615 	stw	r2,-40(fp)

      if (write_data < write_end)
   447d4:	e0ffff17 	ldw	r3,-4(fp)
   447d8:	e0bffb17 	ldw	r2,-20(fp)
   447dc:	18800b2e 	bgeu	r3,r2,4480c <alt_avalon_spi_command+0x13c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
   447e0:	e0bffc17 	ldw	r2,-16(fp)
   447e4:	11000104 	addi	r4,r2,4
   447e8:	e0bfff17 	ldw	r2,-4(fp)
   447ec:	10800003 	ldbu	r2,0(r2)
   447f0:	10c03fcc 	andi	r3,r2,255
   447f4:	e0bfff17 	ldw	r2,-4(fp)
   447f8:	10800044 	addi	r2,r2,1
   447fc:	e0bfff15 	stw	r2,-4(fp)
   44800:	2005883a 	mov	r2,r4
   44804:	10c00035 	stwio	r3,0(r2)
   44808:	00000c06 	br	4483c <alt_avalon_spi_command+0x16c>
      else if (write_zeros > 0)
   4480c:	e0bff917 	ldw	r2,-28(fp)
   44810:	1005003a 	cmpeq	r2,r2,zero
   44814:	1000071e 	bne	r2,zero,44834 <alt_avalon_spi_command+0x164>
      {
        write_zeros--;
   44818:	e0bff917 	ldw	r2,-28(fp)
   4481c:	10bfffc4 	addi	r2,r2,-1
   44820:	e0bff915 	stw	r2,-28(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
   44824:	e0bffc17 	ldw	r2,-16(fp)
   44828:	10800104 	addi	r2,r2,4
   4482c:	10000035 	stwio	zero,0(r2)
   44830:	00000206 	br	4483c <alt_avalon_spi_command+0x16c>
      }
      else
        credits = -1024;
   44834:	00bf0004 	movi	r2,-1024
   44838:	e0bff615 	stw	r2,-40(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
   4483c:	e0bff717 	ldw	r2,-36(fp)
   44840:	1080200c 	andi	r2,r2,128
   44844:	1005003a 	cmpeq	r2,r2,zero
   44848:	103fc91e 	bne	r2,zero,44770 <alt_avalon_spi_command+0xa0>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
   4484c:	e0bffc17 	ldw	r2,-16(fp)
   44850:	10800037 	ldwio	r2,0(r2)
   44854:	e0bff515 	stw	r2,-44(fp)

      if (read_ignore > 0)
   44858:	e0bff817 	ldw	r2,-32(fp)
   4485c:	1005003a 	cmpeq	r2,r2,zero
   44860:	1000041e 	bne	r2,zero,44874 <alt_avalon_spi_command+0x1a4>
        read_ignore--;
   44864:	e0bff817 	ldw	r2,-32(fp)
   44868:	10bfffc4 	addi	r2,r2,-1
   4486c:	e0bff815 	stw	r2,-32(fp)
   44870:	00000706 	br	44890 <alt_avalon_spi_command+0x1c0>
      else
        *read_data++ = (alt_u8)rxdata;
   44874:	e0bff517 	ldw	r2,-44(fp)
   44878:	1007883a 	mov	r3,r2
   4487c:	e0800217 	ldw	r2,8(fp)
   44880:	10c00005 	stb	r3,0(r2)
   44884:	e0800217 	ldw	r2,8(fp)
   44888:	10800044 	addi	r2,r2,1
   4488c:	e0800215 	stw	r2,8(fp)
      credits++;
   44890:	e0bff617 	ldw	r2,-40(fp)
   44894:	10800044 	addi	r2,r2,1
   44898:	e0bff615 	stw	r2,-40(fp)

      if (read_ignore == 0 && read_data == read_end)
   4489c:	e0bff817 	ldw	r2,-32(fp)
   448a0:	1004c03a 	cmpne	r2,r2,zero
   448a4:	103fb21e 	bne	r2,zero,44770 <alt_avalon_spi_command+0xa0>
   448a8:	e0c00217 	ldw	r3,8(fp)
   448ac:	e0bffa17 	ldw	r2,-24(fp)
   448b0:	18800126 	beq	r3,r2,448b8 <alt_avalon_spi_command+0x1e8>
        break;
    }
    
  }
   448b4:	003fae06 	br	44770 <alt_avalon_spi_command+0xa0>

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
   448b8:	e0bffc17 	ldw	r2,-16(fp)
   448bc:	10800204 	addi	r2,r2,8
   448c0:	10800037 	ldwio	r2,0(r2)
   448c4:	e0bff715 	stw	r2,-36(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
   448c8:	e0bff717 	ldw	r2,-36(fp)
   448cc:	1080080c 	andi	r2,r2,32
   448d0:	1005003a 	cmpeq	r2,r2,zero
   448d4:	103ff81e 	bne	r2,zero,448b8 <alt_avalon_spi_command+0x1e8>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
   448d8:	e0800317 	ldw	r2,12(fp)
   448dc:	1080004c 	andi	r2,r2,1
   448e0:	1004c03a 	cmpne	r2,r2,zero
   448e4:	1000031e 	bne	r2,zero,448f4 <alt_avalon_spi_command+0x224>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
   448e8:	e0bffc17 	ldw	r2,-16(fp)
   448ec:	10800304 	addi	r2,r2,12
   448f0:	10000035 	stwio	zero,0(r2)

  return read_length;
   448f4:	e0800117 	ldw	r2,4(fp)
}
   448f8:	e037883a 	mov	sp,fp
   448fc:	df000017 	ldw	fp,0(sp)
   44900:	dec00104 	addi	sp,sp,4
   44904:	f800283a 	ret

00044908 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   44908:	defffa04 	addi	sp,sp,-24
   4490c:	dfc00515 	stw	ra,20(sp)
   44910:	df000415 	stw	fp,16(sp)
   44914:	df000404 	addi	fp,sp,16
   44918:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   4491c:	e0bfff17 	ldw	r2,-4(fp)
   44920:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   44924:	e0bfff17 	ldw	r2,-4(fp)
   44928:	10800104 	addi	r2,r2,4
   4492c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   44930:	0005303a 	rdctl	r2,status
   44934:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   44938:	e0fffd17 	ldw	r3,-12(fp)
   4493c:	00bfff84 	movi	r2,-2
   44940:	1884703a 	and	r2,r3,r2
   44944:	1001703a 	wrctl	status,r2
  
  return context;
   44948:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   4494c:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
   44950:	004565c0 	call	4565c <alt_tick>
   44954:	e0bffe17 	ldw	r2,-8(fp)
   44958:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4495c:	e0bffc17 	ldw	r2,-16(fp)
   44960:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   44964:	e037883a 	mov	sp,fp
   44968:	dfc00117 	ldw	ra,4(sp)
   4496c:	df000017 	ldw	fp,0(sp)
   44970:	dec00204 	addi	sp,sp,8
   44974:	f800283a 	ret

00044978 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   44978:	defff804 	addi	sp,sp,-32
   4497c:	dfc00715 	stw	ra,28(sp)
   44980:	df000615 	stw	fp,24(sp)
   44984:	df000604 	addi	fp,sp,24
   44988:	e13ffc15 	stw	r4,-16(fp)
   4498c:	e17ffd15 	stw	r5,-12(fp)
   44990:	e1bffe15 	stw	r6,-8(fp)
   44994:	e1ffff15 	stw	r7,-4(fp)
   44998:	e0bfff17 	ldw	r2,-4(fp)
   4499c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   449a0:	00900034 	movhi	r2,16384
   449a4:	1086b004 	addi	r2,r2,6848
   449a8:	10800017 	ldw	r2,0(r2)
   449ac:	1004c03a 	cmpne	r2,r2,zero
   449b0:	1000041e 	bne	r2,zero,449c4 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
   449b4:	00d00034 	movhi	r3,16384
   449b8:	18c6b004 	addi	r3,r3,6848
   449bc:	e0bffb17 	ldw	r2,-20(fp)
   449c0:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   449c4:	e0bffc17 	ldw	r2,-16(fp)
   449c8:	10800104 	addi	r2,r2,4
   449cc:	1007883a 	mov	r3,r2
   449d0:	008001c4 	movi	r2,7
   449d4:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   449d8:	d8000015 	stw	zero,0(sp)
   449dc:	e13ffd17 	ldw	r4,-12(fp)
   449e0:	e17ffe17 	ldw	r5,-8(fp)
   449e4:	01800134 	movhi	r6,4
   449e8:	31924204 	addi	r6,r6,18696
   449ec:	e1fffc17 	ldw	r7,-16(fp)
   449f0:	0044ef80 	call	44ef8 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   449f4:	e037883a 	mov	sp,fp
   449f8:	dfc00117 	ldw	ra,4(sp)
   449fc:	df000017 	ldw	fp,0(sp)
   44a00:	dec00204 	addi	sp,sp,8
   44a04:	f800283a 	ret

00044a08 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   44a08:	defff404 	addi	sp,sp,-48
   44a0c:	df000b15 	stw	fp,44(sp)
   44a10:	df000b04 	addi	fp,sp,44
   44a14:	e13ffb15 	stw	r4,-20(fp)
   44a18:	e17ffc15 	stw	r5,-16(fp)
   44a1c:	e1bffd15 	stw	r6,-12(fp)
   44a20:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   44a24:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   44a28:	00900034 	movhi	r2,16384
   44a2c:	1086b004 	addi	r2,r2,6848
   44a30:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   44a34:	1005003a 	cmpeq	r2,r2,zero
   44a38:	1000411e 	bne	r2,zero,44b40 <alt_alarm_start+0x138>
  {
    if (alarm)
   44a3c:	e0bffb17 	ldw	r2,-20(fp)
   44a40:	1005003a 	cmpeq	r2,r2,zero
   44a44:	10003b1e 	bne	r2,zero,44b34 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
   44a48:	e0fffb17 	ldw	r3,-20(fp)
   44a4c:	e0bffd17 	ldw	r2,-12(fp)
   44a50:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
   44a54:	e0fffb17 	ldw	r3,-20(fp)
   44a58:	e0bffe17 	ldw	r2,-8(fp)
   44a5c:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   44a60:	0005303a 	rdctl	r2,status
   44a64:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   44a68:	e0fff817 	ldw	r3,-32(fp)
   44a6c:	00bfff84 	movi	r2,-2
   44a70:	1884703a 	and	r2,r3,r2
   44a74:	1001703a 	wrctl	status,r2
  
  return context;
   44a78:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   44a7c:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   44a80:	00900034 	movhi	r2,16384
   44a84:	1086b104 	addi	r2,r2,6852
   44a88:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   44a8c:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   44a90:	e0fffc17 	ldw	r3,-16(fp)
   44a94:	e0bff917 	ldw	r2,-28(fp)
   44a98:	1885883a 	add	r2,r3,r2
   44a9c:	10c00044 	addi	r3,r2,1
   44aa0:	e0bffb17 	ldw	r2,-20(fp)
   44aa4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   44aa8:	e0bffb17 	ldw	r2,-20(fp)
   44aac:	10c00217 	ldw	r3,8(r2)
   44ab0:	e0bff917 	ldw	r2,-28(fp)
   44ab4:	1880042e 	bgeu	r3,r2,44ac8 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
   44ab8:	e0fffb17 	ldw	r3,-20(fp)
   44abc:	00800044 	movi	r2,1
   44ac0:	18800405 	stb	r2,16(r3)
   44ac4:	00000206 	br	44ad0 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
   44ac8:	e0bffb17 	ldw	r2,-20(fp)
   44acc:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   44ad0:	e0fffb17 	ldw	r3,-20(fp)
   44ad4:	00900034 	movhi	r2,16384
   44ad8:	1086a604 	addi	r2,r2,6808
   44adc:	e0bff615 	stw	r2,-40(fp)
   44ae0:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   44ae4:	e0fff717 	ldw	r3,-36(fp)
   44ae8:	e0bff617 	ldw	r2,-40(fp)
   44aec:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   44af0:	e0bff617 	ldw	r2,-40(fp)
   44af4:	10c00017 	ldw	r3,0(r2)
   44af8:	e0bff717 	ldw	r2,-36(fp)
   44afc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   44b00:	e0bff617 	ldw	r2,-40(fp)
   44b04:	10c00017 	ldw	r3,0(r2)
   44b08:	e0bff717 	ldw	r2,-36(fp)
   44b0c:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   44b10:	e0fff617 	ldw	r3,-40(fp)
   44b14:	e0bff717 	ldw	r2,-36(fp)
   44b18:	18800015 	stw	r2,0(r3)
   44b1c:	e0bffa17 	ldw	r2,-24(fp)
   44b20:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   44b24:	e0bff517 	ldw	r2,-44(fp)
   44b28:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   44b2c:	e03fff15 	stw	zero,-4(fp)
   44b30:	00000506 	br	44b48 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
   44b34:	00bffa84 	movi	r2,-22
   44b38:	e0bfff15 	stw	r2,-4(fp)
   44b3c:	00000206 	br	44b48 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
   44b40:	00bfde84 	movi	r2,-134
   44b44:	e0bfff15 	stw	r2,-4(fp)
   44b48:	e0bfff17 	ldw	r2,-4(fp)
  }
}
   44b4c:	e037883a 	mov	sp,fp
   44b50:	df000017 	ldw	fp,0(sp)
   44b54:	dec00104 	addi	sp,sp,4
   44b58:	f800283a 	ret

00044b5c <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   44b5c:	defffa04 	addi	sp,sp,-24
   44b60:	dfc00515 	stw	ra,20(sp)
   44b64:	df000415 	stw	fp,16(sp)
   44b68:	df000404 	addi	fp,sp,16
   44b6c:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
   44b70:	008000c4 	movi	r2,3
   44b74:	e0bffc15 	stw	r2,-16(fp)
  }
  

  big_loops = us / (INT_MAX/
   44b78:	e0fffc17 	ldw	r3,-16(fp)
   44b7c:	008003f4 	movhi	r2,15
   44b80:	10909004 	addi	r2,r2,16960
   44b84:	188b383a 	mul	r5,r3,r2
   44b88:	0102fb34 	movhi	r4,3052
   44b8c:	21308004 	addi	r4,r4,-15872
   44b90:	0045f680 	call	45f68 <__udivsi3>
   44b94:	100b883a 	mov	r5,r2
   44b98:	01200034 	movhi	r4,32768
   44b9c:	213fffc4 	addi	r4,r4,-1
   44ba0:	0045f680 	call	45f68 <__udivsi3>
   44ba4:	100b883a 	mov	r5,r2
   44ba8:	e13fff17 	ldw	r4,-4(fp)
   44bac:	0045f680 	call	45f68 <__udivsi3>
   44bb0:	e0bffd15 	stw	r2,-12(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   44bb4:	e0bffd17 	ldw	r2,-12(fp)
   44bb8:	1005003a 	cmpeq	r2,r2,zero
   44bbc:	1000281e 	bne	r2,zero,44c60 <alt_busy_sleep+0x104>
  {
    for(i=0;i<big_loops;i++)
   44bc0:	e03ffe15 	stw	zero,-8(fp)
   44bc4:	00001606 	br	44c20 <alt_busy_sleep+0xc4>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   44bc8:	00a00034 	movhi	r2,32768
   44bcc:	10bfffc4 	addi	r2,r2,-1
   44bd0:	10bfffc4 	addi	r2,r2,-1
   44bd4:	103ffe1e 	bne	r2,zero,44bd0 <alt_busy_sleep+0x74>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   44bd8:	e0fffc17 	ldw	r3,-16(fp)
   44bdc:	008003f4 	movhi	r2,15
   44be0:	10909004 	addi	r2,r2,16960
   44be4:	188b383a 	mul	r5,r3,r2
   44be8:	0102fb34 	movhi	r4,3052
   44bec:	21308004 	addi	r4,r4,-15872
   44bf0:	0045f680 	call	45f68 <__udivsi3>
   44bf4:	100b883a 	mov	r5,r2
   44bf8:	01200034 	movhi	r4,32768
   44bfc:	213fffc4 	addi	r4,r4,-1
   44c00:	0045f680 	call	45f68 <__udivsi3>
   44c04:	1007883a 	mov	r3,r2
   44c08:	e0bfff17 	ldw	r2,-4(fp)
   44c0c:	10c5c83a 	sub	r2,r2,r3
   44c10:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   44c14:	e0bffe17 	ldw	r2,-8(fp)
   44c18:	10800044 	addi	r2,r2,1
   44c1c:	e0bffe15 	stw	r2,-8(fp)
   44c20:	e0fffe17 	ldw	r3,-8(fp)
   44c24:	e0bffd17 	ldw	r2,-12(fp)
   44c28:	18bfe716 	blt	r3,r2,44bc8 <alt_busy_sleep+0x6c>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   44c2c:	e0fffc17 	ldw	r3,-16(fp)
   44c30:	008003f4 	movhi	r2,15
   44c34:	10909004 	addi	r2,r2,16960
   44c38:	188b383a 	mul	r5,r3,r2
   44c3c:	0102fb34 	movhi	r4,3052
   44c40:	21308004 	addi	r4,r4,-15872
   44c44:	0045f680 	call	45f68 <__udivsi3>
   44c48:	1007883a 	mov	r3,r2
   44c4c:	e0bfff17 	ldw	r2,-4(fp)
   44c50:	1885383a 	mul	r2,r3,r2
   44c54:	10bfffc4 	addi	r2,r2,-1
   44c58:	103ffe1e 	bne	r2,zero,44c54 <alt_busy_sleep+0xf8>
   44c5c:	00000c06 	br	44c90 <alt_busy_sleep+0x134>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   44c60:	e0fffc17 	ldw	r3,-16(fp)
   44c64:	008003f4 	movhi	r2,15
   44c68:	10909004 	addi	r2,r2,16960
   44c6c:	188b383a 	mul	r5,r3,r2
   44c70:	0102fb34 	movhi	r4,3052
   44c74:	21308004 	addi	r4,r4,-15872
   44c78:	0045f680 	call	45f68 <__udivsi3>
   44c7c:	1007883a 	mov	r3,r2
   44c80:	e0bfff17 	ldw	r2,-4(fp)
   44c84:	1885383a 	mul	r2,r3,r2
   44c88:	10bfffc4 	addi	r2,r2,-1
   44c8c:	00bffe16 	blt	zero,r2,44c88 <alt_busy_sleep+0x12c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   44c90:	0005883a 	mov	r2,zero
}
   44c94:	e037883a 	mov	sp,fp
   44c98:	dfc00117 	ldw	ra,4(sp)
   44c9c:	df000017 	ldw	fp,0(sp)
   44ca0:	dec00204 	addi	sp,sp,8
   44ca4:	f800283a 	ret

00044ca8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   44ca8:	defffe04 	addi	sp,sp,-8
   44cac:	df000115 	stw	fp,4(sp)
   44cb0:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   44cb4:	e03fff15 	stw	zero,-4(fp)
   44cb8:	00000506 	br	44cd0 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   44cbc:	e0bfff17 	ldw	r2,-4(fp)
   44cc0:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   44cc4:	e0bfff17 	ldw	r2,-4(fp)
   44cc8:	10800804 	addi	r2,r2,32
   44ccc:	e0bfff15 	stw	r2,-4(fp)
   44cd0:	e0bfff17 	ldw	r2,-4(fp)
   44cd4:	10820030 	cmpltui	r2,r2,2048
   44cd8:	103ff81e 	bne	r2,zero,44cbc <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   44cdc:	e037883a 	mov	sp,fp
   44ce0:	df000017 	ldw	fp,0(sp)
   44ce4:	dec00104 	addi	sp,sp,4
   44ce8:	f800283a 	ret

00044cec <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   44cec:	defff904 	addi	sp,sp,-28
   44cf0:	dfc00615 	stw	ra,24(sp)
   44cf4:	df000515 	stw	fp,20(sp)
   44cf8:	df000504 	addi	fp,sp,20
   44cfc:	e13ffd15 	stw	r4,-12(fp)
   44d00:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   44d04:	e0bffd17 	ldw	r2,-12(fp)
   44d08:	1005003a 	cmpeq	r2,r2,zero
   44d0c:	1000041e 	bne	r2,zero,44d20 <alt_dev_llist_insert+0x34>
   44d10:	e0bffd17 	ldw	r2,-12(fp)
   44d14:	10800217 	ldw	r2,8(r2)
   44d18:	1004c03a 	cmpne	r2,r2,zero
   44d1c:	1000071e 	bne	r2,zero,44d3c <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
   44d20:	0044da00 	call	44da0 <alt_get_errno>
   44d24:	1007883a 	mov	r3,r2
   44d28:	00800584 	movi	r2,22
   44d2c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   44d30:	00bffa84 	movi	r2,-22
   44d34:	e0bfff15 	stw	r2,-4(fp)
   44d38:	00001306 	br	44d88 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   44d3c:	e0fffd17 	ldw	r3,-12(fp)
   44d40:	e0bffe17 	ldw	r2,-8(fp)
   44d44:	e0bffb15 	stw	r2,-20(fp)
   44d48:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   44d4c:	e0fffc17 	ldw	r3,-16(fp)
   44d50:	e0bffb17 	ldw	r2,-20(fp)
   44d54:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   44d58:	e0bffb17 	ldw	r2,-20(fp)
   44d5c:	10c00017 	ldw	r3,0(r2)
   44d60:	e0bffc17 	ldw	r2,-16(fp)
   44d64:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   44d68:	e0bffb17 	ldw	r2,-20(fp)
   44d6c:	10c00017 	ldw	r3,0(r2)
   44d70:	e0bffc17 	ldw	r2,-16(fp)
   44d74:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   44d78:	e0fffb17 	ldw	r3,-20(fp)
   44d7c:	e0bffc17 	ldw	r2,-16(fp)
   44d80:	18800015 	stw	r2,0(r3)

  return 0;  
   44d84:	e03fff15 	stw	zero,-4(fp)
   44d88:	e0bfff17 	ldw	r2,-4(fp)
}
   44d8c:	e037883a 	mov	sp,fp
   44d90:	dfc00117 	ldw	ra,4(sp)
   44d94:	df000017 	ldw	fp,0(sp)
   44d98:	dec00204 	addi	sp,sp,8
   44d9c:	f800283a 	ret

00044da0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   44da0:	defffd04 	addi	sp,sp,-12
   44da4:	dfc00215 	stw	ra,8(sp)
   44da8:	df000115 	stw	fp,4(sp)
   44dac:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   44db0:	00900034 	movhi	r2,16384
   44db4:	1086a304 	addi	r2,r2,6796
   44db8:	10800017 	ldw	r2,0(r2)
   44dbc:	1005003a 	cmpeq	r2,r2,zero
   44dc0:	1000061e 	bne	r2,zero,44ddc <alt_get_errno+0x3c>
   44dc4:	00900034 	movhi	r2,16384
   44dc8:	1086a304 	addi	r2,r2,6796
   44dcc:	10800017 	ldw	r2,0(r2)
   44dd0:	103ee83a 	callr	r2
   44dd4:	e0bfff15 	stw	r2,-4(fp)
   44dd8:	00000306 	br	44de8 <alt_get_errno+0x48>
   44ddc:	00900034 	movhi	r2,16384
   44de0:	1086ab04 	addi	r2,r2,6828
   44de4:	e0bfff15 	stw	r2,-4(fp)
   44de8:	e0bfff17 	ldw	r2,-4(fp)
}
   44dec:	e037883a 	mov	sp,fp
   44df0:	dfc00117 	ldw	ra,4(sp)
   44df4:	df000017 	ldw	fp,0(sp)
   44df8:	dec00204 	addi	sp,sp,8
   44dfc:	f800283a 	ret

00044e00 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   44e00:	defffd04 	addi	sp,sp,-12
   44e04:	dfc00215 	stw	ra,8(sp)
   44e08:	df000115 	stw	fp,4(sp)
   44e0c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   44e10:	00bfff04 	movi	r2,-4
   44e14:	00c00134 	movhi	r3,4
   44e18:	18d7f704 	addi	r3,r3,24540
   44e1c:	1885883a 	add	r2,r3,r2
   44e20:	e0bfff15 	stw	r2,-4(fp)
   44e24:	00000606 	br	44e40 <_do_ctors+0x40>
        (*ctor) (); 
   44e28:	e0bfff17 	ldw	r2,-4(fp)
   44e2c:	10800017 	ldw	r2,0(r2)
   44e30:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   44e34:	e0bfff17 	ldw	r2,-4(fp)
   44e38:	10bfff04 	addi	r2,r2,-4
   44e3c:	e0bfff15 	stw	r2,-4(fp)
   44e40:	e0ffff17 	ldw	r3,-4(fp)
   44e44:	00800134 	movhi	r2,4
   44e48:	1097f604 	addi	r2,r2,24536
   44e4c:	18bff62e 	bgeu	r3,r2,44e28 <_do_ctors+0x28>
        (*ctor) (); 
}
   44e50:	e037883a 	mov	sp,fp
   44e54:	dfc00117 	ldw	ra,4(sp)
   44e58:	df000017 	ldw	fp,0(sp)
   44e5c:	dec00204 	addi	sp,sp,8
   44e60:	f800283a 	ret

00044e64 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   44e64:	defffd04 	addi	sp,sp,-12
   44e68:	dfc00215 	stw	ra,8(sp)
   44e6c:	df000115 	stw	fp,4(sp)
   44e70:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   44e74:	00bfff04 	movi	r2,-4
   44e78:	00c00134 	movhi	r3,4
   44e7c:	18d7f704 	addi	r3,r3,24540
   44e80:	1885883a 	add	r2,r3,r2
   44e84:	e0bfff15 	stw	r2,-4(fp)
   44e88:	00000606 	br	44ea4 <_do_dtors+0x40>
        (*dtor) (); 
   44e8c:	e0bfff17 	ldw	r2,-4(fp)
   44e90:	10800017 	ldw	r2,0(r2)
   44e94:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   44e98:	e0bfff17 	ldw	r2,-4(fp)
   44e9c:	10bfff04 	addi	r2,r2,-4
   44ea0:	e0bfff15 	stw	r2,-4(fp)
   44ea4:	e0ffff17 	ldw	r3,-4(fp)
   44ea8:	00800134 	movhi	r2,4
   44eac:	1097f704 	addi	r2,r2,24540
   44eb0:	18bff62e 	bgeu	r3,r2,44e8c <_do_dtors+0x28>
        (*dtor) (); 
}
   44eb4:	e037883a 	mov	sp,fp
   44eb8:	dfc00117 	ldw	ra,4(sp)
   44ebc:	df000017 	ldw	fp,0(sp)
   44ec0:	dec00204 	addi	sp,sp,8
   44ec4:	f800283a 	ret

00044ec8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   44ec8:	defffe04 	addi	sp,sp,-8
   44ecc:	dfc00115 	stw	ra,4(sp)
   44ed0:	df000015 	stw	fp,0(sp)
   44ed4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   44ed8:	0009883a 	mov	r4,zero
   44edc:	01440004 	movi	r5,4096
   44ee0:	00459f40 	call	459f4 <alt_icache_flush>
#endif
}
   44ee4:	e037883a 	mov	sp,fp
   44ee8:	dfc00117 	ldw	ra,4(sp)
   44eec:	df000017 	ldw	fp,0(sp)
   44ef0:	dec00204 	addi	sp,sp,8
   44ef4:	f800283a 	ret

00044ef8 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   44ef8:	defff904 	addi	sp,sp,-28
   44efc:	dfc00615 	stw	ra,24(sp)
   44f00:	df000515 	stw	fp,20(sp)
   44f04:	df000504 	addi	fp,sp,20
   44f08:	e13ffc15 	stw	r4,-16(fp)
   44f0c:	e17ffd15 	stw	r5,-12(fp)
   44f10:	e1bffe15 	stw	r6,-8(fp)
   44f14:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   44f18:	e0800217 	ldw	r2,8(fp)
   44f1c:	d8800015 	stw	r2,0(sp)
   44f20:	e13ffc17 	ldw	r4,-16(fp)
   44f24:	e17ffd17 	ldw	r5,-12(fp)
   44f28:	e1bffe17 	ldw	r6,-8(fp)
   44f2c:	e1ffff17 	ldw	r7,-4(fp)
   44f30:	00450cc0 	call	450cc <alt_iic_isr_register>
}  
   44f34:	e037883a 	mov	sp,fp
   44f38:	dfc00117 	ldw	ra,4(sp)
   44f3c:	df000017 	ldw	fp,0(sp)
   44f40:	dec00204 	addi	sp,sp,8
   44f44:	f800283a 	ret

00044f48 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   44f48:	defff904 	addi	sp,sp,-28
   44f4c:	df000615 	stw	fp,24(sp)
   44f50:	df000604 	addi	fp,sp,24
   44f54:	e13ffe15 	stw	r4,-8(fp)
   44f58:	e17fff15 	stw	r5,-4(fp)
   44f5c:	e0bfff17 	ldw	r2,-4(fp)
   44f60:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   44f64:	0005303a 	rdctl	r2,status
   44f68:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   44f6c:	e0fffb17 	ldw	r3,-20(fp)
   44f70:	00bfff84 	movi	r2,-2
   44f74:	1884703a 	and	r2,r3,r2
   44f78:	1001703a 	wrctl	status,r2
  
  return context;
   44f7c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   44f80:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
   44f84:	e0fffc17 	ldw	r3,-16(fp)
   44f88:	00800044 	movi	r2,1
   44f8c:	10c4983a 	sll	r2,r2,r3
   44f90:	1007883a 	mov	r3,r2
   44f94:	00900034 	movhi	r2,16384
   44f98:	1086af04 	addi	r2,r2,6844
   44f9c:	10800017 	ldw	r2,0(r2)
   44fa0:	1886b03a 	or	r3,r3,r2
   44fa4:	00900034 	movhi	r2,16384
   44fa8:	1086af04 	addi	r2,r2,6844
   44fac:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   44fb0:	00900034 	movhi	r2,16384
   44fb4:	1086af04 	addi	r2,r2,6844
   44fb8:	10800017 	ldw	r2,0(r2)
   44fbc:	100170fa 	wrctl	ienable,r2
   44fc0:	e0bffd17 	ldw	r2,-12(fp)
   44fc4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   44fc8:	e0bffa17 	ldw	r2,-24(fp)
   44fcc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   44fd0:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   44fd4:	e037883a 	mov	sp,fp
   44fd8:	df000017 	ldw	fp,0(sp)
   44fdc:	dec00104 	addi	sp,sp,4
   44fe0:	f800283a 	ret

00044fe4 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   44fe4:	defff904 	addi	sp,sp,-28
   44fe8:	df000615 	stw	fp,24(sp)
   44fec:	df000604 	addi	fp,sp,24
   44ff0:	e13ffe15 	stw	r4,-8(fp)
   44ff4:	e17fff15 	stw	r5,-4(fp)
   44ff8:	e0bfff17 	ldw	r2,-4(fp)
   44ffc:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   45000:	0005303a 	rdctl	r2,status
   45004:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   45008:	e0fffb17 	ldw	r3,-20(fp)
   4500c:	00bfff84 	movi	r2,-2
   45010:	1884703a 	and	r2,r3,r2
   45014:	1001703a 	wrctl	status,r2
  
  return context;
   45018:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   4501c:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
   45020:	e0fffc17 	ldw	r3,-16(fp)
   45024:	00800044 	movi	r2,1
   45028:	10c4983a 	sll	r2,r2,r3
   4502c:	0084303a 	nor	r2,zero,r2
   45030:	1007883a 	mov	r3,r2
   45034:	00900034 	movhi	r2,16384
   45038:	1086af04 	addi	r2,r2,6844
   4503c:	10800017 	ldw	r2,0(r2)
   45040:	1886703a 	and	r3,r3,r2
   45044:	00900034 	movhi	r2,16384
   45048:	1086af04 	addi	r2,r2,6844
   4504c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   45050:	00900034 	movhi	r2,16384
   45054:	1086af04 	addi	r2,r2,6844
   45058:	10800017 	ldw	r2,0(r2)
   4505c:	100170fa 	wrctl	ienable,r2
   45060:	e0bffd17 	ldw	r2,-12(fp)
   45064:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   45068:	e0bffa17 	ldw	r2,-24(fp)
   4506c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   45070:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   45074:	e037883a 	mov	sp,fp
   45078:	df000017 	ldw	fp,0(sp)
   4507c:	dec00104 	addi	sp,sp,4
   45080:	f800283a 	ret

00045084 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   45084:	defffc04 	addi	sp,sp,-16
   45088:	df000315 	stw	fp,12(sp)
   4508c:	df000304 	addi	fp,sp,12
   45090:	e13ffe15 	stw	r4,-8(fp)
   45094:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   45098:	000530fa 	rdctl	r2,ienable
   4509c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   450a0:	e0ffff17 	ldw	r3,-4(fp)
   450a4:	00800044 	movi	r2,1
   450a8:	10c4983a 	sll	r2,r2,r3
   450ac:	1007883a 	mov	r3,r2
   450b0:	e0bffd17 	ldw	r2,-12(fp)
   450b4:	1884703a 	and	r2,r3,r2
   450b8:	1004c03a 	cmpne	r2,r2,zero
}
   450bc:	e037883a 	mov	sp,fp
   450c0:	df000017 	ldw	fp,0(sp)
   450c4:	dec00104 	addi	sp,sp,4
   450c8:	f800283a 	ret

000450cc <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   450cc:	defff404 	addi	sp,sp,-48
   450d0:	dfc00b15 	stw	ra,44(sp)
   450d4:	df000a15 	stw	fp,40(sp)
   450d8:	df000a04 	addi	fp,sp,40
   450dc:	e13ffb15 	stw	r4,-20(fp)
   450e0:	e17ffc15 	stw	r5,-16(fp)
   450e4:	e1bffd15 	stw	r6,-12(fp)
   450e8:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
   450ec:	00bffa84 	movi	r2,-22
   450f0:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   450f4:	e0bffc17 	ldw	r2,-16(fp)
   450f8:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   450fc:	e0bff917 	ldw	r2,-28(fp)
   45100:	10800808 	cmpgei	r2,r2,32
   45104:	1000291e 	bne	r2,zero,451ac <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   45108:	0005303a 	rdctl	r2,status
   4510c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   45110:	e0fff717 	ldw	r3,-36(fp)
   45114:	00bfff84 	movi	r2,-2
   45118:	1884703a 	and	r2,r3,r2
   4511c:	1001703a 	wrctl	status,r2
  
  return context;
   45120:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   45124:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
   45128:	e0bff917 	ldw	r2,-28(fp)
   4512c:	00d00034 	movhi	r3,16384
   45130:	18c6bc04 	addi	r3,r3,6896
   45134:	100490fa 	slli	r2,r2,3
   45138:	10c7883a 	add	r3,r2,r3
   4513c:	e0bffd17 	ldw	r2,-12(fp)
   45140:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
   45144:	e0bff917 	ldw	r2,-28(fp)
   45148:	00d00034 	movhi	r3,16384
   4514c:	18c6bc04 	addi	r3,r3,6896
   45150:	100490fa 	slli	r2,r2,3
   45154:	10c5883a 	add	r2,r2,r3
   45158:	10c00104 	addi	r3,r2,4
   4515c:	e0bffe17 	ldw	r2,-8(fp)
   45160:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   45164:	e0bffd17 	ldw	r2,-12(fp)
   45168:	1005003a 	cmpeq	r2,r2,zero
   4516c:	1000051e 	bne	r2,zero,45184 <alt_iic_isr_register+0xb8>
   45170:	e17ff917 	ldw	r5,-28(fp)
   45174:	e13ffb17 	ldw	r4,-20(fp)
   45178:	0044f480 	call	44f48 <alt_ic_irq_enable>
   4517c:	e0bfff15 	stw	r2,-4(fp)
   45180:	00000406 	br	45194 <alt_iic_isr_register+0xc8>
   45184:	e17ff917 	ldw	r5,-28(fp)
   45188:	e13ffb17 	ldw	r4,-20(fp)
   4518c:	0044fe40 	call	44fe4 <alt_ic_irq_disable>
   45190:	e0bfff15 	stw	r2,-4(fp)
   45194:	e0bfff17 	ldw	r2,-4(fp)
   45198:	e0bffa15 	stw	r2,-24(fp)
   4519c:	e0bff817 	ldw	r2,-32(fp)
   451a0:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   451a4:	e0bff617 	ldw	r2,-40(fp)
   451a8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   451ac:	e0bffa17 	ldw	r2,-24(fp)
}
   451b0:	e037883a 	mov	sp,fp
   451b4:	dfc00117 	ldw	ra,4(sp)
   451b8:	df000017 	ldw	fp,0(sp)
   451bc:	dec00204 	addi	sp,sp,8
   451c0:	f800283a 	ret

000451c4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   451c4:	defff904 	addi	sp,sp,-28
   451c8:	dfc00615 	stw	ra,24(sp)
   451cc:	df000515 	stw	fp,20(sp)
   451d0:	df000504 	addi	fp,sp,20
   451d4:	e13ffc15 	stw	r4,-16(fp)
   451d8:	e17ffd15 	stw	r5,-12(fp)
   451dc:	e1bffe15 	stw	r6,-8(fp)
   451e0:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   451e4:	e13ffd17 	ldw	r4,-12(fp)
   451e8:	e17ffe17 	ldw	r5,-8(fp)
   451ec:	e1bfff17 	ldw	r6,-4(fp)
   451f0:	00453dc0 	call	453dc <open>
   451f4:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   451f8:	e0bffb17 	ldw	r2,-20(fp)
   451fc:	1004803a 	cmplt	r2,r2,zero
   45200:	10001c1e 	bne	r2,zero,45274 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
   45204:	e0bffb17 	ldw	r2,-20(fp)
   45208:	00d00034 	movhi	r3,16384
   4520c:	18c22204 	addi	r3,r3,2184
   45210:	10800324 	muli	r2,r2,12
   45214:	10c5883a 	add	r2,r2,r3
   45218:	10c00017 	ldw	r3,0(r2)
   4521c:	e0bffc17 	ldw	r2,-16(fp)
   45220:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   45224:	e0bffb17 	ldw	r2,-20(fp)
   45228:	00d00034 	movhi	r3,16384
   4522c:	18c22204 	addi	r3,r3,2184
   45230:	10800324 	muli	r2,r2,12
   45234:	10c5883a 	add	r2,r2,r3
   45238:	10800104 	addi	r2,r2,4
   4523c:	10c00017 	ldw	r3,0(r2)
   45240:	e0bffc17 	ldw	r2,-16(fp)
   45244:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   45248:	e0bffb17 	ldw	r2,-20(fp)
   4524c:	00d00034 	movhi	r3,16384
   45250:	18c22204 	addi	r3,r3,2184
   45254:	10800324 	muli	r2,r2,12
   45258:	10c5883a 	add	r2,r2,r3
   4525c:	10800204 	addi	r2,r2,8
   45260:	10c00017 	ldw	r3,0(r2)
   45264:	e0bffc17 	ldw	r2,-16(fp)
   45268:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   4526c:	e13ffb17 	ldw	r4,-20(fp)
   45270:	00438900 	call	43890 <alt_release_fd>
  }
} 
   45274:	e037883a 	mov	sp,fp
   45278:	dfc00117 	ldw	ra,4(sp)
   4527c:	df000017 	ldw	fp,0(sp)
   45280:	dec00204 	addi	sp,sp,8
   45284:	f800283a 	ret

00045288 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   45288:	defffb04 	addi	sp,sp,-20
   4528c:	dfc00415 	stw	ra,16(sp)
   45290:	df000315 	stw	fp,12(sp)
   45294:	df000304 	addi	fp,sp,12
   45298:	e13ffd15 	stw	r4,-12(fp)
   4529c:	e17ffe15 	stw	r5,-8(fp)
   452a0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   452a4:	01100034 	movhi	r4,16384
   452a8:	21022504 	addi	r4,r4,2196
   452ac:	e17ffd17 	ldw	r5,-12(fp)
   452b0:	01800044 	movi	r6,1
   452b4:	01c07fc4 	movi	r7,511
   452b8:	00451c40 	call	451c4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   452bc:	01100034 	movhi	r4,16384
   452c0:	21022204 	addi	r4,r4,2184
   452c4:	e17ffe17 	ldw	r5,-8(fp)
   452c8:	000d883a 	mov	r6,zero
   452cc:	01c07fc4 	movi	r7,511
   452d0:	00451c40 	call	451c4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   452d4:	01100034 	movhi	r4,16384
   452d8:	21022804 	addi	r4,r4,2208
   452dc:	e17fff17 	ldw	r5,-4(fp)
   452e0:	01800044 	movi	r6,1
   452e4:	01c07fc4 	movi	r7,511
   452e8:	00451c40 	call	451c4 <alt_open_fd>
}  
   452ec:	e037883a 	mov	sp,fp
   452f0:	dfc00117 	ldw	ra,4(sp)
   452f4:	df000017 	ldw	fp,0(sp)
   452f8:	dec00204 	addi	sp,sp,8
   452fc:	f800283a 	ret

00045300 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   45300:	defffc04 	addi	sp,sp,-16
   45304:	df000315 	stw	fp,12(sp)
   45308:	df000304 	addi	fp,sp,12
   4530c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   45310:	e0bffe17 	ldw	r2,-8(fp)
   45314:	10800217 	ldw	r2,8(r2)
   45318:	10d00034 	orhi	r3,r2,16384
   4531c:	e0bffe17 	ldw	r2,-8(fp)
   45320:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   45324:	e03ffd15 	stw	zero,-12(fp)
   45328:	00002006 	br	453ac <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   4532c:	e0bffd17 	ldw	r2,-12(fp)
   45330:	00d00034 	movhi	r3,16384
   45334:	18c22204 	addi	r3,r3,2184
   45338:	10800324 	muli	r2,r2,12
   4533c:	10c5883a 	add	r2,r2,r3
   45340:	10c00017 	ldw	r3,0(r2)
   45344:	e0bffe17 	ldw	r2,-8(fp)
   45348:	10800017 	ldw	r2,0(r2)
   4534c:	1880141e 	bne	r3,r2,453a0 <alt_file_locked+0xa0>
   45350:	e0bffd17 	ldw	r2,-12(fp)
   45354:	00d00034 	movhi	r3,16384
   45358:	18c22204 	addi	r3,r3,2184
   4535c:	10800324 	muli	r2,r2,12
   45360:	10c5883a 	add	r2,r2,r3
   45364:	10800204 	addi	r2,r2,8
   45368:	10800017 	ldw	r2,0(r2)
   4536c:	1004403a 	cmpge	r2,r2,zero
   45370:	10000b1e 	bne	r2,zero,453a0 <alt_file_locked+0xa0>
   45374:	e0bffd17 	ldw	r2,-12(fp)
   45378:	10800324 	muli	r2,r2,12
   4537c:	1007883a 	mov	r3,r2
   45380:	00900034 	movhi	r2,16384
   45384:	10822204 	addi	r2,r2,2184
   45388:	1887883a 	add	r3,r3,r2
   4538c:	e0bffe17 	ldw	r2,-8(fp)
   45390:	18800326 	beq	r3,r2,453a0 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   45394:	00bffcc4 	movi	r2,-13
   45398:	e0bfff15 	stw	r2,-4(fp)
   4539c:	00000a06 	br	453c8 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   453a0:	e0bffd17 	ldw	r2,-12(fp)
   453a4:	10800044 	addi	r2,r2,1
   453a8:	e0bffd15 	stw	r2,-12(fp)
   453ac:	00900034 	movhi	r2,16384
   453b0:	1086a204 	addi	r2,r2,6792
   453b4:	10800017 	ldw	r2,0(r2)
   453b8:	1007883a 	mov	r3,r2
   453bc:	e0bffd17 	ldw	r2,-12(fp)
   453c0:	18bfda2e 	bgeu	r3,r2,4532c <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   453c4:	e03fff15 	stw	zero,-4(fp)
   453c8:	e0bfff17 	ldw	r2,-4(fp)
}
   453cc:	e037883a 	mov	sp,fp
   453d0:	df000017 	ldw	fp,0(sp)
   453d4:	dec00104 	addi	sp,sp,4
   453d8:	f800283a 	ret

000453dc <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   453dc:	defff404 	addi	sp,sp,-48
   453e0:	dfc00b15 	stw	ra,44(sp)
   453e4:	df000a15 	stw	fp,40(sp)
   453e8:	df000a04 	addi	fp,sp,40
   453ec:	e13ffb15 	stw	r4,-20(fp)
   453f0:	e17ffc15 	stw	r5,-16(fp)
   453f4:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   453f8:	00bfffc4 	movi	r2,-1
   453fc:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
   45400:	00bffb44 	movi	r2,-19
   45404:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
   45408:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   4540c:	e13ffb17 	ldw	r4,-20(fp)
   45410:	01500034 	movhi	r5,16384
   45414:	2946a004 	addi	r5,r5,6784
   45418:	00457880 	call	45788 <alt_find_dev>
   4541c:	e0bffa15 	stw	r2,-24(fp)
   45420:	e0bffa17 	ldw	r2,-24(fp)
   45424:	1004c03a 	cmpne	r2,r2,zero
   45428:	1000051e 	bne	r2,zero,45440 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   4542c:	e13ffb17 	ldw	r4,-20(fp)
   45430:	004581c0 	call	4581c <alt_find_file>
   45434:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
   45438:	00800044 	movi	r2,1
   4543c:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   45440:	e0bffa17 	ldw	r2,-24(fp)
   45444:	1005003a 	cmpeq	r2,r2,zero
   45448:	1000301e 	bne	r2,zero,4550c <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
   4544c:	e13ffa17 	ldw	r4,-24(fp)
   45450:	004593c0 	call	4593c <alt_get_fd>
   45454:	e0bff815 	stw	r2,-32(fp)
   45458:	e0bff817 	ldw	r2,-32(fp)
   4545c:	1004403a 	cmpge	r2,r2,zero
   45460:	1000031e 	bne	r2,zero,45470 <open+0x94>
    {
      status = index;
   45464:	e0bff817 	ldw	r2,-32(fp)
   45468:	e0bff715 	stw	r2,-36(fp)
   4546c:	00002906 	br	45514 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
   45470:	e0bff817 	ldw	r2,-32(fp)
   45474:	10800324 	muli	r2,r2,12
   45478:	1007883a 	mov	r3,r2
   4547c:	00900034 	movhi	r2,16384
   45480:	10822204 	addi	r2,r2,2184
   45484:	1885883a 	add	r2,r3,r2
   45488:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   4548c:	e0fffc17 	ldw	r3,-16(fp)
   45490:	00900034 	movhi	r2,16384
   45494:	10bfffc4 	addi	r2,r2,-1
   45498:	1886703a 	and	r3,r3,r2
   4549c:	e0bff917 	ldw	r2,-28(fp)
   454a0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   454a4:	e0bff617 	ldw	r2,-40(fp)
   454a8:	1004c03a 	cmpne	r2,r2,zero
   454ac:	1000061e 	bne	r2,zero,454c8 <open+0xec>
   454b0:	e13ff917 	ldw	r4,-28(fp)
   454b4:	00453000 	call	45300 <alt_file_locked>
   454b8:	e0bff715 	stw	r2,-36(fp)
   454bc:	e0bff717 	ldw	r2,-36(fp)
   454c0:	1004803a 	cmplt	r2,r2,zero
   454c4:	1000131e 	bne	r2,zero,45514 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   454c8:	e0bffa17 	ldw	r2,-24(fp)
   454cc:	10800317 	ldw	r2,12(r2)
   454d0:	1005003a 	cmpeq	r2,r2,zero
   454d4:	1000091e 	bne	r2,zero,454fc <open+0x120>
   454d8:	e0bffa17 	ldw	r2,-24(fp)
   454dc:	10800317 	ldw	r2,12(r2)
   454e0:	e13ff917 	ldw	r4,-28(fp)
   454e4:	e17ffb17 	ldw	r5,-20(fp)
   454e8:	e1bffc17 	ldw	r6,-16(fp)
   454ec:	e1fffd17 	ldw	r7,-12(fp)
   454f0:	103ee83a 	callr	r2
   454f4:	e0bfff15 	stw	r2,-4(fp)
   454f8:	00000106 	br	45500 <open+0x124>
   454fc:	e03fff15 	stw	zero,-4(fp)
   45500:	e0bfff17 	ldw	r2,-4(fp)
   45504:	e0bff715 	stw	r2,-36(fp)
   45508:	00000206 	br	45514 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
   4550c:	00bffb44 	movi	r2,-19
   45510:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   45514:	e0bff717 	ldw	r2,-36(fp)
   45518:	1004403a 	cmpge	r2,r2,zero
   4551c:	1000091e 	bne	r2,zero,45544 <open+0x168>
  {
    alt_release_fd (index);  
   45520:	e13ff817 	ldw	r4,-32(fp)
   45524:	00438900 	call	43890 <alt_release_fd>
    ALT_ERRNO = -status;
   45528:	00455640 	call	45564 <alt_get_errno>
   4552c:	e0fff717 	ldw	r3,-36(fp)
   45530:	00c7c83a 	sub	r3,zero,r3
   45534:	10c00015 	stw	r3,0(r2)
    return -1;
   45538:	00bfffc4 	movi	r2,-1
   4553c:	e0bffe15 	stw	r2,-8(fp)
   45540:	00000206 	br	4554c <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
   45544:	e0bff817 	ldw	r2,-32(fp)
   45548:	e0bffe15 	stw	r2,-8(fp)
   4554c:	e0bffe17 	ldw	r2,-8(fp)
}
   45550:	e037883a 	mov	sp,fp
   45554:	dfc00117 	ldw	ra,4(sp)
   45558:	df000017 	ldw	fp,0(sp)
   4555c:	dec00204 	addi	sp,sp,8
   45560:	f800283a 	ret

00045564 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   45564:	defffd04 	addi	sp,sp,-12
   45568:	dfc00215 	stw	ra,8(sp)
   4556c:	df000115 	stw	fp,4(sp)
   45570:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   45574:	00900034 	movhi	r2,16384
   45578:	1086a304 	addi	r2,r2,6796
   4557c:	10800017 	ldw	r2,0(r2)
   45580:	1005003a 	cmpeq	r2,r2,zero
   45584:	1000061e 	bne	r2,zero,455a0 <alt_get_errno+0x3c>
   45588:	00900034 	movhi	r2,16384
   4558c:	1086a304 	addi	r2,r2,6796
   45590:	10800017 	ldw	r2,0(r2)
   45594:	103ee83a 	callr	r2
   45598:	e0bfff15 	stw	r2,-4(fp)
   4559c:	00000306 	br	455ac <alt_get_errno+0x48>
   455a0:	00900034 	movhi	r2,16384
   455a4:	1086ab04 	addi	r2,r2,6828
   455a8:	e0bfff15 	stw	r2,-4(fp)
   455ac:	e0bfff17 	ldw	r2,-4(fp)
}
   455b0:	e037883a 	mov	sp,fp
   455b4:	dfc00117 	ldw	ra,4(sp)
   455b8:	df000017 	ldw	fp,0(sp)
   455bc:	dec00204 	addi	sp,sp,8
   455c0:	f800283a 	ret

000455c4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   455c4:	defffa04 	addi	sp,sp,-24
   455c8:	df000515 	stw	fp,20(sp)
   455cc:	df000504 	addi	fp,sp,20
   455d0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   455d4:	0005303a 	rdctl	r2,status
   455d8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   455dc:	e0fffd17 	ldw	r3,-12(fp)
   455e0:	00bfff84 	movi	r2,-2
   455e4:	1884703a 	and	r2,r3,r2
   455e8:	1001703a 	wrctl	status,r2
  
  return context;
   455ec:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   455f0:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
   455f4:	e0bfff17 	ldw	r2,-4(fp)
   455f8:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   455fc:	e0bffc17 	ldw	r2,-16(fp)
   45600:	10c00017 	ldw	r3,0(r2)
   45604:	e0bffc17 	ldw	r2,-16(fp)
   45608:	10800117 	ldw	r2,4(r2)
   4560c:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
   45610:	e0bffc17 	ldw	r2,-16(fp)
   45614:	10c00117 	ldw	r3,4(r2)
   45618:	e0bffc17 	ldw	r2,-16(fp)
   4561c:	10800017 	ldw	r2,0(r2)
   45620:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   45624:	e0fffc17 	ldw	r3,-16(fp)
   45628:	e0bffc17 	ldw	r2,-16(fp)
   4562c:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
   45630:	e0fffc17 	ldw	r3,-16(fp)
   45634:	e0bffc17 	ldw	r2,-16(fp)
   45638:	18800015 	stw	r2,0(r3)
   4563c:	e0bffe17 	ldw	r2,-8(fp)
   45640:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   45644:	e0bffb17 	ldw	r2,-20(fp)
   45648:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   4564c:	e037883a 	mov	sp,fp
   45650:	df000017 	ldw	fp,0(sp)
   45654:	dec00104 	addi	sp,sp,4
   45658:	f800283a 	ret

0004565c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   4565c:	defffb04 	addi	sp,sp,-20
   45660:	dfc00415 	stw	ra,16(sp)
   45664:	df000315 	stw	fp,12(sp)
   45668:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   4566c:	d0a00c17 	ldw	r2,-32720(gp)
   45670:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   45674:	d0a01717 	ldw	r2,-32676(gp)
   45678:	10800044 	addi	r2,r2,1
   4567c:	d0a01715 	stw	r2,-32676(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   45680:	00003106 	br	45748 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
   45684:	e0bffe17 	ldw	r2,-8(fp)
   45688:	10800017 	ldw	r2,0(r2)
   4568c:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   45690:	e0bffe17 	ldw	r2,-8(fp)
   45694:	10800403 	ldbu	r2,16(r2)
   45698:	10803fcc 	andi	r2,r2,255
   4569c:	1005003a 	cmpeq	r2,r2,zero
   456a0:	1000051e 	bne	r2,zero,456b8 <alt_tick+0x5c>
   456a4:	d0a01717 	ldw	r2,-32676(gp)
   456a8:	1004c03a 	cmpne	r2,r2,zero
   456ac:	1000021e 	bne	r2,zero,456b8 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
   456b0:	e0bffe17 	ldw	r2,-8(fp)
   456b4:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   456b8:	e0bffe17 	ldw	r2,-8(fp)
   456bc:	10c00217 	ldw	r3,8(r2)
   456c0:	d0a01717 	ldw	r2,-32676(gp)
   456c4:	10c01e36 	bltu	r2,r3,45740 <alt_tick+0xe4>
   456c8:	e0bffe17 	ldw	r2,-8(fp)
   456cc:	10800403 	ldbu	r2,16(r2)
   456d0:	10803fcc 	andi	r2,r2,255
   456d4:	1004c03a 	cmpne	r2,r2,zero
   456d8:	1000191e 	bne	r2,zero,45740 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
   456dc:	e0bffe17 	ldw	r2,-8(fp)
   456e0:	10c00317 	ldw	r3,12(r2)
   456e4:	e0bffe17 	ldw	r2,-8(fp)
   456e8:	11000517 	ldw	r4,20(r2)
   456ec:	183ee83a 	callr	r3
   456f0:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   456f4:	e0bffd17 	ldw	r2,-12(fp)
   456f8:	1004c03a 	cmpne	r2,r2,zero
   456fc:	1000031e 	bne	r2,zero,4570c <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
   45700:	e13ffe17 	ldw	r4,-8(fp)
   45704:	00455c40 	call	455c4 <alt_alarm_stop>
   45708:	00000d06 	br	45740 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
   4570c:	e0bffe17 	ldw	r2,-8(fp)
   45710:	10c00217 	ldw	r3,8(r2)
   45714:	e0bffd17 	ldw	r2,-12(fp)
   45718:	1887883a 	add	r3,r3,r2
   4571c:	e0bffe17 	ldw	r2,-8(fp)
   45720:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   45724:	e0bffe17 	ldw	r2,-8(fp)
   45728:	10c00217 	ldw	r3,8(r2)
   4572c:	d0a01717 	ldw	r2,-32676(gp)
   45730:	1880032e 	bgeu	r3,r2,45740 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
   45734:	e0fffe17 	ldw	r3,-8(fp)
   45738:	00800044 	movi	r2,1
   4573c:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
   45740:	e0bfff17 	ldw	r2,-4(fp)
   45744:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   45748:	d0e00c04 	addi	r3,gp,-32720
   4574c:	e0bffe17 	ldw	r2,-8(fp)
   45750:	10ffcc1e 	bne	r2,r3,45684 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
   45754:	e037883a 	mov	sp,fp
   45758:	dfc00117 	ldw	ra,4(sp)
   4575c:	df000017 	ldw	fp,0(sp)
   45760:	dec00204 	addi	sp,sp,8
   45764:	f800283a 	ret

00045768 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   45768:	deffff04 	addi	sp,sp,-4
   4576c:	df000015 	stw	fp,0(sp)
   45770:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   45774:	000170fa 	wrctl	ienable,zero
}
   45778:	e037883a 	mov	sp,fp
   4577c:	df000017 	ldw	fp,0(sp)
   45780:	dec00104 	addi	sp,sp,4
   45784:	f800283a 	ret

00045788 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   45788:	defff904 	addi	sp,sp,-28
   4578c:	dfc00615 	stw	ra,24(sp)
   45790:	df000515 	stw	fp,20(sp)
   45794:	df000504 	addi	fp,sp,20
   45798:	e13ffd15 	stw	r4,-12(fp)
   4579c:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
   457a0:	e0bffe17 	ldw	r2,-8(fp)
   457a4:	10800017 	ldw	r2,0(r2)
   457a8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   457ac:	e13ffd17 	ldw	r4,-12(fp)
   457b0:	00407f00 	call	407f0 <strlen>
   457b4:	10800044 	addi	r2,r2,1
   457b8:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   457bc:	00000d06 	br	457f4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   457c0:	e0bffc17 	ldw	r2,-16(fp)
   457c4:	11000217 	ldw	r4,8(r2)
   457c8:	e1bffb17 	ldw	r6,-20(fp)
   457cc:	e17ffd17 	ldw	r5,-12(fp)
   457d0:	0045ad00 	call	45ad0 <memcmp>
   457d4:	1004c03a 	cmpne	r2,r2,zero
   457d8:	1000031e 	bne	r2,zero,457e8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   457dc:	e0bffc17 	ldw	r2,-16(fp)
   457e0:	e0bfff15 	stw	r2,-4(fp)
   457e4:	00000706 	br	45804 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   457e8:	e0bffc17 	ldw	r2,-16(fp)
   457ec:	10800017 	ldw	r2,0(r2)
   457f0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   457f4:	e0fffe17 	ldw	r3,-8(fp)
   457f8:	e0bffc17 	ldw	r2,-16(fp)
   457fc:	10fff01e 	bne	r2,r3,457c0 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   45800:	e03fff15 	stw	zero,-4(fp)
   45804:	e0bfff17 	ldw	r2,-4(fp)
}
   45808:	e037883a 	mov	sp,fp
   4580c:	dfc00117 	ldw	ra,4(sp)
   45810:	df000017 	ldw	fp,0(sp)
   45814:	dec00204 	addi	sp,sp,8
   45818:	f800283a 	ret

0004581c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   4581c:	defffa04 	addi	sp,sp,-24
   45820:	dfc00515 	stw	ra,20(sp)
   45824:	df000415 	stw	fp,16(sp)
   45828:	df000404 	addi	fp,sp,16
   4582c:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   45830:	00900034 	movhi	r2,16384
   45834:	10869e04 	addi	r2,r2,6776
   45838:	10800017 	ldw	r2,0(r2)
   4583c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   45840:	00003306 	br	45910 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
   45844:	e0bffd17 	ldw	r2,-12(fp)
   45848:	11000217 	ldw	r4,8(r2)
   4584c:	00407f00 	call	407f0 <strlen>
   45850:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
   45854:	e0bffd17 	ldw	r2,-12(fp)
   45858:	10c00217 	ldw	r3,8(r2)
   4585c:	e0bffc17 	ldw	r2,-16(fp)
   45860:	1885883a 	add	r2,r3,r2
   45864:	10bfffc4 	addi	r2,r2,-1
   45868:	10800003 	ldbu	r2,0(r2)
   4586c:	10803fcc 	andi	r2,r2,255
   45870:	1080201c 	xori	r2,r2,128
   45874:	10bfe004 	addi	r2,r2,-128
   45878:	10800bd8 	cmpnei	r2,r2,47
   4587c:	1000031e 	bne	r2,zero,4588c <alt_find_file+0x70>
    {
      len -= 1;
   45880:	e0bffc17 	ldw	r2,-16(fp)
   45884:	10bfffc4 	addi	r2,r2,-1
   45888:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   4588c:	e0bffc17 	ldw	r2,-16(fp)
   45890:	1007883a 	mov	r3,r2
   45894:	e0bffe17 	ldw	r2,-8(fp)
   45898:	1885883a 	add	r2,r3,r2
   4589c:	10800003 	ldbu	r2,0(r2)
   458a0:	10803fcc 	andi	r2,r2,255
   458a4:	1080201c 	xori	r2,r2,128
   458a8:	10bfe004 	addi	r2,r2,-128
   458ac:	10800be0 	cmpeqi	r2,r2,47
   458b0:	10000a1e 	bne	r2,zero,458dc <alt_find_file+0xc0>
   458b4:	e0bffc17 	ldw	r2,-16(fp)
   458b8:	1007883a 	mov	r3,r2
   458bc:	e0bffe17 	ldw	r2,-8(fp)
   458c0:	1885883a 	add	r2,r3,r2
   458c4:	10800003 	ldbu	r2,0(r2)
   458c8:	10803fcc 	andi	r2,r2,255
   458cc:	1080201c 	xori	r2,r2,128
   458d0:	10bfe004 	addi	r2,r2,-128
   458d4:	1004c03a 	cmpne	r2,r2,zero
   458d8:	10000a1e 	bne	r2,zero,45904 <alt_find_file+0xe8>
   458dc:	e0bffd17 	ldw	r2,-12(fp)
   458e0:	11000217 	ldw	r4,8(r2)
   458e4:	e1bffc17 	ldw	r6,-16(fp)
   458e8:	e17ffe17 	ldw	r5,-8(fp)
   458ec:	0045ad00 	call	45ad0 <memcmp>
   458f0:	1004c03a 	cmpne	r2,r2,zero
   458f4:	1000031e 	bne	r2,zero,45904 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   458f8:	e0bffd17 	ldw	r2,-12(fp)
   458fc:	e0bfff15 	stw	r2,-4(fp)
   45900:	00000806 	br	45924 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
   45904:	e0bffd17 	ldw	r2,-12(fp)
   45908:	10800017 	ldw	r2,0(r2)
   4590c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   45910:	00d00034 	movhi	r3,16384
   45914:	18c69e04 	addi	r3,r3,6776
   45918:	e0bffd17 	ldw	r2,-12(fp)
   4591c:	10ffc91e 	bne	r2,r3,45844 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   45920:	e03fff15 	stw	zero,-4(fp)
   45924:	e0bfff17 	ldw	r2,-4(fp)
}
   45928:	e037883a 	mov	sp,fp
   4592c:	dfc00117 	ldw	ra,4(sp)
   45930:	df000017 	ldw	fp,0(sp)
   45934:	dec00204 	addi	sp,sp,8
   45938:	f800283a 	ret

0004593c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   4593c:	defffc04 	addi	sp,sp,-16
   45940:	df000315 	stw	fp,12(sp)
   45944:	df000304 	addi	fp,sp,12
   45948:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   4594c:	00bffa04 	movi	r2,-24
   45950:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   45954:	e03ffe15 	stw	zero,-8(fp)
   45958:	00001e06 	br	459d4 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
   4595c:	e0bffe17 	ldw	r2,-8(fp)
   45960:	00d00034 	movhi	r3,16384
   45964:	18c22204 	addi	r3,r3,2184
   45968:	10800324 	muli	r2,r2,12
   4596c:	10c5883a 	add	r2,r2,r3
   45970:	10800017 	ldw	r2,0(r2)
   45974:	1004c03a 	cmpne	r2,r2,zero
   45978:	1000131e 	bne	r2,zero,459c8 <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
   4597c:	e0bffe17 	ldw	r2,-8(fp)
   45980:	00d00034 	movhi	r3,16384
   45984:	18c22204 	addi	r3,r3,2184
   45988:	10800324 	muli	r2,r2,12
   4598c:	10c7883a 	add	r3,r2,r3
   45990:	e0bfff17 	ldw	r2,-4(fp)
   45994:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
   45998:	00900034 	movhi	r2,16384
   4599c:	1086a204 	addi	r2,r2,6792
   459a0:	10c00017 	ldw	r3,0(r2)
   459a4:	e0bffe17 	ldw	r2,-8(fp)
   459a8:	1880040e 	bge	r3,r2,459bc <alt_get_fd+0x80>
      {
        alt_max_fd = i;
   459ac:	00d00034 	movhi	r3,16384
   459b0:	18c6a204 	addi	r3,r3,6792
   459b4:	e0bffe17 	ldw	r2,-8(fp)
   459b8:	18800015 	stw	r2,0(r3)
      }
      rc = i;
   459bc:	e0bffe17 	ldw	r2,-8(fp)
   459c0:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   459c4:	00000606 	br	459e0 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   459c8:	e0bffe17 	ldw	r2,-8(fp)
   459cc:	10800044 	addi	r2,r2,1
   459d0:	e0bffe15 	stw	r2,-8(fp)
   459d4:	e0bffe17 	ldw	r2,-8(fp)
   459d8:	10800810 	cmplti	r2,r2,32
   459dc:	103fdf1e 	bne	r2,zero,4595c <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   459e0:	e0bffd17 	ldw	r2,-12(fp)
}
   459e4:	e037883a 	mov	sp,fp
   459e8:	df000017 	ldw	fp,0(sp)
   459ec:	dec00104 	addi	sp,sp,4
   459f0:	f800283a 	ret

000459f4 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   459f4:	defffb04 	addi	sp,sp,-20
   459f8:	df000415 	stw	fp,16(sp)
   459fc:	df000404 	addi	fp,sp,16
   45a00:	e13ffe15 	stw	r4,-8(fp)
   45a04:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   45a08:	e0bfff17 	ldw	r2,-4(fp)
   45a0c:	10840070 	cmpltui	r2,r2,4097
   45a10:	1000021e 	bne	r2,zero,45a1c <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   45a14:	00840004 	movi	r2,4096
   45a18:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   45a1c:	e0fffe17 	ldw	r3,-8(fp)
   45a20:	e0bfff17 	ldw	r2,-4(fp)
   45a24:	1885883a 	add	r2,r3,r2
   45a28:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   45a2c:	e0bffe17 	ldw	r2,-8(fp)
   45a30:	e0bffd15 	stw	r2,-12(fp)
   45a34:	00000506 	br	45a4c <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   45a38:	e0bffd17 	ldw	r2,-12(fp)
   45a3c:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   45a40:	e0bffd17 	ldw	r2,-12(fp)
   45a44:	10800804 	addi	r2,r2,32
   45a48:	e0bffd15 	stw	r2,-12(fp)
   45a4c:	e0fffd17 	ldw	r3,-12(fp)
   45a50:	e0bffc17 	ldw	r2,-16(fp)
   45a54:	18bff836 	bltu	r3,r2,45a38 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   45a58:	e0bffe17 	ldw	r2,-8(fp)
   45a5c:	108007cc 	andi	r2,r2,31
   45a60:	1005003a 	cmpeq	r2,r2,zero
   45a64:	1000021e 	bne	r2,zero,45a70 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   45a68:	e0bffd17 	ldw	r2,-12(fp)
   45a6c:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   45a70:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   45a74:	e037883a 	mov	sp,fp
   45a78:	df000017 	ldw	fp,0(sp)
   45a7c:	dec00104 	addi	sp,sp,4
   45a80:	f800283a 	ret

00045a84 <atexit>:
   45a84:	200b883a 	mov	r5,r4
   45a88:	000d883a 	mov	r6,zero
   45a8c:	0009883a 	mov	r4,zero
   45a90:	000f883a 	mov	r7,zero
   45a94:	0045b441 	jmpi	45b44 <__register_exitproc>

00045a98 <exit>:
   45a98:	defffe04 	addi	sp,sp,-8
   45a9c:	000b883a 	mov	r5,zero
   45aa0:	dc000015 	stw	r16,0(sp)
   45aa4:	dfc00115 	stw	ra,4(sp)
   45aa8:	2021883a 	mov	r16,r4
   45aac:	0045c7c0 	call	45c7c <__call_exitprocs>
   45ab0:	00900034 	movhi	r2,16384
   45ab4:	10869b04 	addi	r2,r2,6764
   45ab8:	11000017 	ldw	r4,0(r2)
   45abc:	20800f17 	ldw	r2,60(r4)
   45ac0:	10000126 	beq	r2,zero,45ac8 <exit+0x30>
   45ac4:	103ee83a 	callr	r2
   45ac8:	8009883a 	mov	r4,r16
   45acc:	0045fb80 	call	45fb8 <_exit>

00045ad0 <memcmp>:
   45ad0:	00c000c4 	movi	r3,3
   45ad4:	1980032e 	bgeu	r3,r6,45ae4 <memcmp+0x14>
   45ad8:	2144b03a 	or	r2,r4,r5
   45adc:	10c4703a 	and	r2,r2,r3
   45ae0:	10000f26 	beq	r2,zero,45b20 <memcmp+0x50>
   45ae4:	31ffffc4 	addi	r7,r6,-1
   45ae8:	3000061e 	bne	r6,zero,45b04 <memcmp+0x34>
   45aec:	00000a06 	br	45b18 <memcmp+0x48>
   45af0:	39ffffc4 	addi	r7,r7,-1
   45af4:	00bfffc4 	movi	r2,-1
   45af8:	21000044 	addi	r4,r4,1
   45afc:	29400044 	addi	r5,r5,1
   45b00:	38800526 	beq	r7,r2,45b18 <memcmp+0x48>
   45b04:	20c00003 	ldbu	r3,0(r4)
   45b08:	28800003 	ldbu	r2,0(r5)
   45b0c:	18bff826 	beq	r3,r2,45af0 <memcmp+0x20>
   45b10:	1885c83a 	sub	r2,r3,r2
   45b14:	f800283a 	ret
   45b18:	0005883a 	mov	r2,zero
   45b1c:	f800283a 	ret
   45b20:	180f883a 	mov	r7,r3
   45b24:	20c00017 	ldw	r3,0(r4)
   45b28:	28800017 	ldw	r2,0(r5)
   45b2c:	18bfed1e 	bne	r3,r2,45ae4 <memcmp+0x14>
   45b30:	31bfff04 	addi	r6,r6,-4
   45b34:	21000104 	addi	r4,r4,4
   45b38:	29400104 	addi	r5,r5,4
   45b3c:	39bff936 	bltu	r7,r6,45b24 <memcmp+0x54>
   45b40:	003fe806 	br	45ae4 <memcmp+0x14>

00045b44 <__register_exitproc>:
   45b44:	defffa04 	addi	sp,sp,-24
   45b48:	00900034 	movhi	r2,16384
   45b4c:	10869b04 	addi	r2,r2,6764
   45b50:	dc000015 	stw	r16,0(sp)
   45b54:	14000017 	ldw	r16,0(r2)
   45b58:	dd000415 	stw	r20,16(sp)
   45b5c:	2829883a 	mov	r20,r5
   45b60:	81405217 	ldw	r5,328(r16)
   45b64:	dcc00315 	stw	r19,12(sp)
   45b68:	dc800215 	stw	r18,8(sp)
   45b6c:	dc400115 	stw	r17,4(sp)
   45b70:	dfc00515 	stw	ra,20(sp)
   45b74:	2023883a 	mov	r17,r4
   45b78:	3027883a 	mov	r19,r6
   45b7c:	3825883a 	mov	r18,r7
   45b80:	28002526 	beq	r5,zero,45c18 <__register_exitproc+0xd4>
   45b84:	29000117 	ldw	r4,4(r5)
   45b88:	008007c4 	movi	r2,31
   45b8c:	11002716 	blt	r2,r4,45c2c <__register_exitproc+0xe8>
   45b90:	8800101e 	bne	r17,zero,45bd4 <__register_exitproc+0x90>
   45b94:	2105883a 	add	r2,r4,r4
   45b98:	1085883a 	add	r2,r2,r2
   45b9c:	20c00044 	addi	r3,r4,1
   45ba0:	1145883a 	add	r2,r2,r5
   45ba4:	0009883a 	mov	r4,zero
   45ba8:	15000215 	stw	r20,8(r2)
   45bac:	28c00115 	stw	r3,4(r5)
   45bb0:	2005883a 	mov	r2,r4
   45bb4:	dfc00517 	ldw	ra,20(sp)
   45bb8:	dd000417 	ldw	r20,16(sp)
   45bbc:	dcc00317 	ldw	r19,12(sp)
   45bc0:	dc800217 	ldw	r18,8(sp)
   45bc4:	dc400117 	ldw	r17,4(sp)
   45bc8:	dc000017 	ldw	r16,0(sp)
   45bcc:	dec00604 	addi	sp,sp,24
   45bd0:	f800283a 	ret
   45bd4:	29802204 	addi	r6,r5,136
   45bd8:	00800044 	movi	r2,1
   45bdc:	110e983a 	sll	r7,r2,r4
   45be0:	30c04017 	ldw	r3,256(r6)
   45be4:	2105883a 	add	r2,r4,r4
   45be8:	1085883a 	add	r2,r2,r2
   45bec:	1185883a 	add	r2,r2,r6
   45bf0:	19c6b03a 	or	r3,r3,r7
   45bf4:	14802015 	stw	r18,128(r2)
   45bf8:	14c00015 	stw	r19,0(r2)
   45bfc:	00800084 	movi	r2,2
   45c00:	30c04015 	stw	r3,256(r6)
   45c04:	88bfe31e 	bne	r17,r2,45b94 <__register_exitproc+0x50>
   45c08:	30804117 	ldw	r2,260(r6)
   45c0c:	11c4b03a 	or	r2,r2,r7
   45c10:	30804115 	stw	r2,260(r6)
   45c14:	003fdf06 	br	45b94 <__register_exitproc+0x50>
   45c18:	00900034 	movhi	r2,16384
   45c1c:	1086fc04 	addi	r2,r2,7152
   45c20:	100b883a 	mov	r5,r2
   45c24:	80805215 	stw	r2,328(r16)
   45c28:	003fd606 	br	45b84 <__register_exitproc+0x40>
   45c2c:	00800034 	movhi	r2,0
   45c30:	10800004 	addi	r2,r2,0
   45c34:	1000021e 	bne	r2,zero,45c40 <__register_exitproc+0xfc>
   45c38:	013fffc4 	movi	r4,-1
   45c3c:	003fdc06 	br	45bb0 <__register_exitproc+0x6c>
   45c40:	01006404 	movi	r4,400
   45c44:	103ee83a 	callr	r2
   45c48:	1007883a 	mov	r3,r2
   45c4c:	103ffa26 	beq	r2,zero,45c38 <__register_exitproc+0xf4>
   45c50:	80805217 	ldw	r2,328(r16)
   45c54:	180b883a 	mov	r5,r3
   45c58:	18000115 	stw	zero,4(r3)
   45c5c:	18800015 	stw	r2,0(r3)
   45c60:	80c05215 	stw	r3,328(r16)
   45c64:	18006215 	stw	zero,392(r3)
   45c68:	18006315 	stw	zero,396(r3)
   45c6c:	0009883a 	mov	r4,zero
   45c70:	883fc826 	beq	r17,zero,45b94 <__register_exitproc+0x50>
   45c74:	003fd706 	br	45bd4 <__register_exitproc+0x90>

00045c78 <register_fini>:
   45c78:	f800283a 	ret

00045c7c <__call_exitprocs>:
   45c7c:	00900034 	movhi	r2,16384
   45c80:	10869b04 	addi	r2,r2,6764
   45c84:	10800017 	ldw	r2,0(r2)
   45c88:	defff304 	addi	sp,sp,-52
   45c8c:	df000b15 	stw	fp,44(sp)
   45c90:	d8800115 	stw	r2,4(sp)
   45c94:	00800034 	movhi	r2,0
   45c98:	10800004 	addi	r2,r2,0
   45c9c:	1005003a 	cmpeq	r2,r2,zero
   45ca0:	d8800215 	stw	r2,8(sp)
   45ca4:	d8800117 	ldw	r2,4(sp)
   45ca8:	dd400815 	stw	r21,32(sp)
   45cac:	dd000715 	stw	r20,28(sp)
   45cb0:	10805204 	addi	r2,r2,328
   45cb4:	dfc00c15 	stw	ra,48(sp)
   45cb8:	ddc00a15 	stw	r23,40(sp)
   45cbc:	dd800915 	stw	r22,36(sp)
   45cc0:	dcc00615 	stw	r19,24(sp)
   45cc4:	dc800515 	stw	r18,20(sp)
   45cc8:	dc400415 	stw	r17,16(sp)
   45ccc:	dc000315 	stw	r16,12(sp)
   45cd0:	282b883a 	mov	r21,r5
   45cd4:	2039883a 	mov	fp,r4
   45cd8:	d8800015 	stw	r2,0(sp)
   45cdc:	2829003a 	cmpeq	r20,r5,zero
   45ce0:	d8800117 	ldw	r2,4(sp)
   45ce4:	14405217 	ldw	r17,328(r2)
   45ce8:	88001026 	beq	r17,zero,45d2c <__call_exitprocs+0xb0>
   45cec:	ddc00017 	ldw	r23,0(sp)
   45cf0:	88800117 	ldw	r2,4(r17)
   45cf4:	8c802204 	addi	r18,r17,136
   45cf8:	143fffc4 	addi	r16,r2,-1
   45cfc:	80000916 	blt	r16,zero,45d24 <__call_exitprocs+0xa8>
   45d00:	05bfffc4 	movi	r22,-1
   45d04:	a000151e 	bne	r20,zero,45d5c <__call_exitprocs+0xe0>
   45d08:	8409883a 	add	r4,r16,r16
   45d0c:	2105883a 	add	r2,r4,r4
   45d10:	1485883a 	add	r2,r2,r18
   45d14:	10c02017 	ldw	r3,128(r2)
   45d18:	a8c01126 	beq	r21,r3,45d60 <__call_exitprocs+0xe4>
   45d1c:	843fffc4 	addi	r16,r16,-1
   45d20:	85bff81e 	bne	r16,r22,45d04 <__call_exitprocs+0x88>
   45d24:	d8800217 	ldw	r2,8(sp)
   45d28:	10003126 	beq	r2,zero,45df0 <__call_exitprocs+0x174>
   45d2c:	dfc00c17 	ldw	ra,48(sp)
   45d30:	df000b17 	ldw	fp,44(sp)
   45d34:	ddc00a17 	ldw	r23,40(sp)
   45d38:	dd800917 	ldw	r22,36(sp)
   45d3c:	dd400817 	ldw	r21,32(sp)
   45d40:	dd000717 	ldw	r20,28(sp)
   45d44:	dcc00617 	ldw	r19,24(sp)
   45d48:	dc800517 	ldw	r18,20(sp)
   45d4c:	dc400417 	ldw	r17,16(sp)
   45d50:	dc000317 	ldw	r16,12(sp)
   45d54:	dec00d04 	addi	sp,sp,52
   45d58:	f800283a 	ret
   45d5c:	8409883a 	add	r4,r16,r16
   45d60:	88c00117 	ldw	r3,4(r17)
   45d64:	2105883a 	add	r2,r4,r4
   45d68:	1445883a 	add	r2,r2,r17
   45d6c:	18ffffc4 	addi	r3,r3,-1
   45d70:	11800217 	ldw	r6,8(r2)
   45d74:	1c001526 	beq	r3,r16,45dcc <__call_exitprocs+0x150>
   45d78:	10000215 	stw	zero,8(r2)
   45d7c:	303fe726 	beq	r6,zero,45d1c <__call_exitprocs+0xa0>
   45d80:	00c00044 	movi	r3,1
   45d84:	1c06983a 	sll	r3,r3,r16
   45d88:	90804017 	ldw	r2,256(r18)
   45d8c:	8cc00117 	ldw	r19,4(r17)
   45d90:	1884703a 	and	r2,r3,r2
   45d94:	10001426 	beq	r2,zero,45de8 <__call_exitprocs+0x16c>
   45d98:	90804117 	ldw	r2,260(r18)
   45d9c:	1884703a 	and	r2,r3,r2
   45da0:	10000c1e 	bne	r2,zero,45dd4 <__call_exitprocs+0x158>
   45da4:	2105883a 	add	r2,r4,r4
   45da8:	1485883a 	add	r2,r2,r18
   45dac:	11400017 	ldw	r5,0(r2)
   45db0:	e009883a 	mov	r4,fp
   45db4:	303ee83a 	callr	r6
   45db8:	88800117 	ldw	r2,4(r17)
   45dbc:	98bfc81e 	bne	r19,r2,45ce0 <__call_exitprocs+0x64>
   45dc0:	b8800017 	ldw	r2,0(r23)
   45dc4:	147fd526 	beq	r2,r17,45d1c <__call_exitprocs+0xa0>
   45dc8:	003fc506 	br	45ce0 <__call_exitprocs+0x64>
   45dcc:	8c000115 	stw	r16,4(r17)
   45dd0:	003fea06 	br	45d7c <__call_exitprocs+0x100>
   45dd4:	2105883a 	add	r2,r4,r4
   45dd8:	1485883a 	add	r2,r2,r18
   45ddc:	11000017 	ldw	r4,0(r2)
   45de0:	303ee83a 	callr	r6
   45de4:	003ff406 	br	45db8 <__call_exitprocs+0x13c>
   45de8:	303ee83a 	callr	r6
   45dec:	003ff206 	br	45db8 <__call_exitprocs+0x13c>
   45df0:	88800117 	ldw	r2,4(r17)
   45df4:	1000081e 	bne	r2,zero,45e18 <__call_exitprocs+0x19c>
   45df8:	89000017 	ldw	r4,0(r17)
   45dfc:	20000726 	beq	r4,zero,45e1c <__call_exitprocs+0x1a0>
   45e00:	b9000015 	stw	r4,0(r23)
   45e04:	8809883a 	mov	r4,r17
   45e08:	00000000 	call	0 <__reset-0x40000>
   45e0c:	bc400017 	ldw	r17,0(r23)
   45e10:	883fb71e 	bne	r17,zero,45cf0 <__call_exitprocs+0x74>
   45e14:	003fc506 	br	45d2c <__call_exitprocs+0xb0>
   45e18:	89000017 	ldw	r4,0(r17)
   45e1c:	882f883a 	mov	r23,r17
   45e20:	2023883a 	mov	r17,r4
   45e24:	883fb21e 	bne	r17,zero,45cf0 <__call_exitprocs+0x74>
   45e28:	003fc006 	br	45d2c <__call_exitprocs+0xb0>

00045e2c <udivmodsi4>:
   45e2c:	29001b2e 	bgeu	r5,r4,45e9c <udivmodsi4+0x70>
   45e30:	28001a16 	blt	r5,zero,45e9c <udivmodsi4+0x70>
   45e34:	00800044 	movi	r2,1
   45e38:	0007883a 	mov	r3,zero
   45e3c:	01c007c4 	movi	r7,31
   45e40:	00000306 	br	45e50 <udivmodsi4+0x24>
   45e44:	19c01326 	beq	r3,r7,45e94 <udivmodsi4+0x68>
   45e48:	18c00044 	addi	r3,r3,1
   45e4c:	28000416 	blt	r5,zero,45e60 <udivmodsi4+0x34>
   45e50:	294b883a 	add	r5,r5,r5
   45e54:	1085883a 	add	r2,r2,r2
   45e58:	293ffa36 	bltu	r5,r4,45e44 <udivmodsi4+0x18>
   45e5c:	10000d26 	beq	r2,zero,45e94 <udivmodsi4+0x68>
   45e60:	0007883a 	mov	r3,zero
   45e64:	21400236 	bltu	r4,r5,45e70 <udivmodsi4+0x44>
   45e68:	2149c83a 	sub	r4,r4,r5
   45e6c:	1886b03a 	or	r3,r3,r2
   45e70:	1004d07a 	srli	r2,r2,1
   45e74:	280ad07a 	srli	r5,r5,1
   45e78:	103ffa1e 	bne	r2,zero,45e64 <udivmodsi4+0x38>
   45e7c:	30000226 	beq	r6,zero,45e88 <udivmodsi4+0x5c>
   45e80:	2005883a 	mov	r2,r4
   45e84:	f800283a 	ret
   45e88:	1809883a 	mov	r4,r3
   45e8c:	2005883a 	mov	r2,r4
   45e90:	f800283a 	ret
   45e94:	0007883a 	mov	r3,zero
   45e98:	003ff806 	br	45e7c <udivmodsi4+0x50>
   45e9c:	00800044 	movi	r2,1
   45ea0:	0007883a 	mov	r3,zero
   45ea4:	003fef06 	br	45e64 <udivmodsi4+0x38>

00045ea8 <__divsi3>:
   45ea8:	defffe04 	addi	sp,sp,-8
   45eac:	dc000015 	stw	r16,0(sp)
   45eb0:	dfc00115 	stw	ra,4(sp)
   45eb4:	0021883a 	mov	r16,zero
   45eb8:	20000c16 	blt	r4,zero,45eec <__divsi3+0x44>
   45ebc:	000d883a 	mov	r6,zero
   45ec0:	28000e16 	blt	r5,zero,45efc <__divsi3+0x54>
   45ec4:	0045e2c0 	call	45e2c <udivmodsi4>
   45ec8:	1007883a 	mov	r3,r2
   45ecc:	8005003a 	cmpeq	r2,r16,zero
   45ed0:	1000011e 	bne	r2,zero,45ed8 <__divsi3+0x30>
   45ed4:	00c7c83a 	sub	r3,zero,r3
   45ed8:	1805883a 	mov	r2,r3
   45edc:	dfc00117 	ldw	ra,4(sp)
   45ee0:	dc000017 	ldw	r16,0(sp)
   45ee4:	dec00204 	addi	sp,sp,8
   45ee8:	f800283a 	ret
   45eec:	0109c83a 	sub	r4,zero,r4
   45ef0:	04000044 	movi	r16,1
   45ef4:	000d883a 	mov	r6,zero
   45ef8:	283ff20e 	bge	r5,zero,45ec4 <__divsi3+0x1c>
   45efc:	014bc83a 	sub	r5,zero,r5
   45f00:	8021003a 	cmpeq	r16,r16,zero
   45f04:	003fef06 	br	45ec4 <__divsi3+0x1c>

00045f08 <__modsi3>:
   45f08:	deffff04 	addi	sp,sp,-4
   45f0c:	dfc00015 	stw	ra,0(sp)
   45f10:	01800044 	movi	r6,1
   45f14:	2807883a 	mov	r3,r5
   45f18:	20000416 	blt	r4,zero,45f2c <__modsi3+0x24>
   45f1c:	28000c16 	blt	r5,zero,45f50 <__modsi3+0x48>
   45f20:	dfc00017 	ldw	ra,0(sp)
   45f24:	dec00104 	addi	sp,sp,4
   45f28:	0045e2c1 	jmpi	45e2c <udivmodsi4>
   45f2c:	0109c83a 	sub	r4,zero,r4
   45f30:	28000b16 	blt	r5,zero,45f60 <__modsi3+0x58>
   45f34:	180b883a 	mov	r5,r3
   45f38:	01800044 	movi	r6,1
   45f3c:	0045e2c0 	call	45e2c <udivmodsi4>
   45f40:	0085c83a 	sub	r2,zero,r2
   45f44:	dfc00017 	ldw	ra,0(sp)
   45f48:	dec00104 	addi	sp,sp,4
   45f4c:	f800283a 	ret
   45f50:	014bc83a 	sub	r5,zero,r5
   45f54:	dfc00017 	ldw	ra,0(sp)
   45f58:	dec00104 	addi	sp,sp,4
   45f5c:	0045e2c1 	jmpi	45e2c <udivmodsi4>
   45f60:	0147c83a 	sub	r3,zero,r5
   45f64:	003ff306 	br	45f34 <__modsi3+0x2c>

00045f68 <__udivsi3>:
   45f68:	000d883a 	mov	r6,zero
   45f6c:	0045e2c1 	jmpi	45e2c <udivmodsi4>

00045f70 <__umodsi3>:
   45f70:	01800044 	movi	r6,1
   45f74:	0045e2c1 	jmpi	45e2c <udivmodsi4>

00045f78 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
   45f78:	defffd04 	addi	sp,sp,-12
   45f7c:	df000215 	stw	fp,8(sp)
   45f80:	df000204 	addi	fp,sp,8
   45f84:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
   45f88:	e0bfff17 	ldw	r2,-4(fp)
   45f8c:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   45f90:	e0bffe17 	ldw	r2,-8(fp)
   45f94:	1005003a 	cmpeq	r2,r2,zero
   45f98:	1000021e 	bne	r2,zero,45fa4 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
   45f9c:	002af070 	cmpltui	zero,zero,43969
   45fa0:	00000106 	br	45fa8 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
   45fa4:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
   45fa8:	e037883a 	mov	sp,fp
   45fac:	df000017 	ldw	fp,0(sp)
   45fb0:	dec00104 	addi	sp,sp,4
   45fb4:	f800283a 	ret

00045fb8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   45fb8:	defffd04 	addi	sp,sp,-12
   45fbc:	dfc00215 	stw	ra,8(sp)
   45fc0:	df000115 	stw	fp,4(sp)
   45fc4:	df000104 	addi	fp,sp,4
   45fc8:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
   45fcc:	e13fff17 	ldw	r4,-4(fp)
   45fd0:	0045f780 	call	45f78 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   45fd4:	003fff06 	br	45fd4 <_exit+0x1c>
   45fd8:	00045c78 	rdprs	zero,zero,4465
